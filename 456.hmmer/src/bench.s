	.text
	.file	"llvm-link"
	.globl	ReadA2M                 # -- Begin function ReadA2M
	.p2align	4, 0x90
	.type	ReadA2M,@function
ReadA2M:                                # @ReadA2M
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB0_2
# %bb.1:
	movq	$0, -56(%rbp)
	jmp	.LBB0_22
.LBB0_2:
	movq	$0, -40(%rbp)
	movl	$10, %edi
	xorl	%esi, %esi
	callq	MSAAlloc
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB0_3:                                # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	je	.LBB0_19
# %bb.4:                                #   in Loop: Header=BB0_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	jne	.LBB0_12
# %bb.5:                                #   in Loop: Header=BB0_3 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str, %rsi
	leaq	-20(%rbp), %rdx
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB0_7
# %bb.6:                                #   in Loop: Header=BB0_3 Depth=1
	movabsq	$.L.str.1, %rdi
	movq	-48(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-48(%rbp), %rax
	movl	16(%rax), %edx
	movb	$0, %al
	callq	Die
.LBB0_7:                                #   in Loop: Header=BB0_3 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.2, %rsi
	leaq	-76(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	GKIStoreKey
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jl	.LBB0_9
# %bb.8:                                #   in Loop: Header=BB0_3 Depth=1
	movq	-16(%rbp), %rdi
	callq	MSAExpand
.LBB0_9:                                #   in Loop: Header=BB0_3 Depth=1
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, -64(%rbp)
	je	.LBB0_11
# %bb.10:                               #   in Loop: Header=BB0_3 Depth=1
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-64(%rbp), %rdx
	callq	MSASetSeqDescription
.LBB0_11:                               #   in Loop: Header=BB0_3 Depth=1
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	jmp	.LBB0_18
.LBB0_12:                               #   in Loop: Header=BB0_3 Depth=1
	cmpq	$0, -40(%rbp)
	je	.LBB0_17
# %bb.13:                               #   in Loop: Header=BB0_3 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str, %rsi
	leaq	-20(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -72(%rbp)
	cmpq	$0, %rax
	jne	.LBB0_16
# %bb.14:                               #   in Loop: Header=BB0_3 Depth=1
	jmp	.LBB0_15
.LBB0_15:                               # %.backedge
                                        #   in Loop: Header=BB0_3 Depth=1
	jmp	.LBB0_3
.LBB0_16:                               #   in Loop: Header=BB0_3 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-16(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-72(%rbp), %rdx
	movl	-20(%rbp), %ecx
	callq	sre_strcat
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB0_17:                               #   in Loop: Header=BB0_3 Depth=1
	jmp	.LBB0_18
.LBB0_18:                               #   in Loop: Header=BB0_3 Depth=1
	jmp	.LBB0_15
.LBB0_19:
	cmpq	$0, -40(%rbp)
	jne	.LBB0_21
# %bb.20:
	movq	-16(%rbp), %rdi
	callq	MSAFree
	movq	$0, -56(%rbp)
	jmp	.LBB0_22
.LBB0_21:
	movq	-16(%rbp), %rdi
	callq	MSAVerifyParse
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB0_22:
	movq	-56(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end0:
	.size	ReadA2M, .Lfunc_end0-ReadA2M
	.cfi_endproc
                                        # -- End function
	.globl	WriteA2M                # -- Begin function WriteA2M
	.p2align	4, 0x90
	.type	WriteA2M,@function
WriteA2M:                               # @WriteA2M
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$60, -20(%rbp)
	movslq	-20(%rbp), %rax
	movb	$0, -96(%rbp,%rax)
	movl	$0, -4(%rbp)
.LBB1_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_7 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB1_12
# %bb.2:                                #   in Loop: Header=BB1_1 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-16(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB1_5
# %bb.3:                                #   in Loop: Header=BB1_1 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB1_5
# %bb.4:                                #   in Loop: Header=BB1_1 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	jmp	.LBB1_6
.LBB1_5:                                #   in Loop: Header=BB1_1 Depth=1
	movabsq	$.L.str.4, %rcx
	jmp	.LBB1_6
.LBB1_6:                                #   in Loop: Header=BB1_1 Depth=1
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB1_7:                                #   Parent Loop BB1_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB1_10
# %bb.8:                                #   in Loop: Header=BB1_7 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-8(%rbp), %rax
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.5, %rsi
	leaq	-96(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
# %bb.9:                                #   in Loop: Header=BB1_7 Depth=2
	movl	-20(%rbp), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB1_7
.LBB1_10:                               #   in Loop: Header=BB1_1 Depth=1
	jmp	.LBB1_11
.LBB1_11:                               #   in Loop: Header=BB1_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_1
.LBB1_12:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end1:
	.size	WriteA2M, .Lfunc_end1-WriteA2M
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function ComparePairAlignments
.LCPI2_0:
	.long	3212836864              # float -1
	.text
	.globl	ComparePairAlignments
	.p2align	4, 0x90
	.type	ComparePairAlignments,@function
ComparePairAlignments:                  # @ComparePairAlignments
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	-32(%rbp), %rax
	leaq	-12(%rbp), %r8
	movq	%rdi, -80(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	%rax, %rdx
	movq	%r8, %rcx
	callq	make_alilist
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:
	movss	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB2_11
.LBB2_2:
	leaq	-24(%rbp), %rdx
	leaq	-8(%rbp), %rcx
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	make_alilist
	cmpl	$0, %eax
	jne	.LBB2_4
# %bb.3:
	movss	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB2_11
.LBB2_4:
	leaq	-48(%rbp), %rdx
	leaq	-12(%rbp), %rcx
	movq	-80(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	make_alilist
	cmpl	$0, %eax
	jne	.LBB2_6
# %bb.5:
	movss	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB2_11
.LBB2_6:
	leaq	-40(%rbp), %rdx
	leaq	-8(%rbp), %rcx
	movq	-72(%rbp), %rdi
	movq	-80(%rbp), %rsi
	callq	make_alilist
	cmpl	$0, %eax
	jne	.LBB2_8
# %bb.7:
	movss	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB2_11
.LBB2_8:
	leaq	-16(%rbp), %rax
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-12(%rbp), %r8d
	movl	-8(%rbp), %r9d
	movq	%rax, (%rsp)
	callq	compare_lists
	cmpl	$0, %eax
	jne	.LBB2_10
# %bb.9:
	movss	.LCPI2_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB2_11
.LBB2_10:
	movq	-48(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
	movq	-32(%rbp), %rdi
	callq	free
	movq	-24(%rbp), %rdi
	callq	free
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
.LBB2_11:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end2:
	.size	ComparePairAlignments, .Lfunc_end2-ComparePairAlignments
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function make_alilist
	.type	make_alilist,@function
make_alilist:                           # @make_alilist
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.6, %rbx
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	shlq	$2, %rax
	movq	%rbx, %rdi
	movl	$179, %esi
	movq	%rax, %rdx
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB3_23
# %bb.2:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB3_15
# %bb.3:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB3_15
# %bb.4:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB3_15
# %bb.5:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB3_15
# %bb.6:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB3_15
# %bb.7:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB3_12
# %bb.8:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB3_12
# %bb.9:                                #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB3_12
# %bb.10:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB3_12
# %bb.11:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB3_13
.LBB3_12:                               #   in Loop: Header=BB3_1 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB3_14
.LBB3_13:                               #   in Loop: Header=BB3_1 Depth=1
	movl	-44(%rbp), %eax
.LBB3_14:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-56(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB3_15:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB3_21
# %bb.16:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB3_21
# %bb.17:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB3_21
# %bb.18:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB3_21
# %bb.19:                               #   in Loop: Header=BB3_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB3_21
# %bb.20:                               #   in Loop: Header=BB3_1 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
.LBB3_21:                               #   in Loop: Header=BB3_1 Depth=1
	jmp	.LBB3_22
.LBB3_22:                               #   in Loop: Header=BB3_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB3_1
.LBB3_23:
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end3:
	.size	make_alilist, .Lfunc_end3-make_alilist
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compare_lists
.LCPI4_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	compare_lists,@function
compare_lists:                          # @compare_lists
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	16(%rbp), %rax
	xorps	%xmm0, %xmm0
	movq	%rdi, -56(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -16(%rbp)
	movss	%xmm0, -8(%rbp)
	movss	%xmm0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB4_1:                                # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB4_6
# %bb.2:                                #   in Loop: Header=BB4_1 Depth=1
	movsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -8(%rbp)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB4_4
# %bb.3:                                #   in Loop: Header=BB4_1 Depth=1
	movsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -12(%rbp)
.LBB4_4:                                #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_5
.LBB4_5:                                #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_6:
	movl	$0, -4(%rbp)
.LBB4_7:                                # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB4_12
# %bb.8:                                #   in Loop: Header=BB4_7 Depth=1
	movsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -8(%rbp)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB4_10
# %bb.9:                                #   in Loop: Header=BB4_7 Depth=1
	movsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -12(%rbp)
.LBB4_10:                               #   in Loop: Header=BB4_7 Depth=1
	jmp	.LBB4_11
.LBB4_11:                               #   in Loop: Header=BB4_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_7
.LBB4_12:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-8(%rbp), %xmm0
	movq	16(%rbp), %rax
	movss	%xmm0, (%rax)
	movl	$1, %eax
	popq	%rbp
	retq
.Lfunc_end4:
	.size	compare_lists, .Lfunc_end4-compare_lists
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function CompareRefPairAlignments
.LCPI5_0:
	.long	3212836864              # float -1
	.text
	.globl	CompareRefPairAlignments
	.p2align	4, 0x90
	.type	CompareRefPairAlignments,@function
CompareRefPairAlignments:               # @CompareRefPairAlignments
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	leaq	-64(%rbp), %r9
	leaq	-32(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%r8, -88(%rbp)
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %r8
	movq	%rax, (%rsp)
	callq	make_ref_alilist
	cmpl	$0, %eax
	jne	.LBB5_2
# %bb.1:
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB5_11
.LBB5_2:
	leaq	-56(%rbp), %r9
	leaq	-28(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-96(%rbp), %r8
	movq	%rax, (%rsp)
	callq	make_ref_alilist
	cmpl	$0, %eax
	jne	.LBB5_4
# %bb.3:
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB5_11
.LBB5_4:
	leaq	-80(%rbp), %r9
	leaq	-32(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %r8
	movq	%rax, (%rsp)
	callq	make_ref_alilist
	cmpl	$0, %eax
	jne	.LBB5_6
# %bb.5:
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB5_11
.LBB5_6:
	leaq	-72(%rbp), %r9
	leaq	-28(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %r8
	movq	%rax, (%rsp)
	callq	make_ref_alilist
	cmpl	$0, %eax
	jne	.LBB5_8
# %bb.7:
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB5_11
.LBB5_8:
	leaq	-44(%rbp), %rax
	movq	-80(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movl	-32(%rbp), %r8d
	movl	-28(%rbp), %r9d
	movq	%rax, (%rsp)
	callq	compare_lists
	cmpl	$0, %eax
	jne	.LBB5_10
# %bb.9:
	movss	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
	jmp	.LBB5_11
.LBB5_10:
	movq	-80(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-56(%rbp), %rdi
	callq	free
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -4(%rbp)
.LBB5_11:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end5:
	.size	CompareRefPairAlignments, .Lfunc_end5-CompareRefPairAlignments
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function make_ref_alilist
	.type	make_ref_alilist,@function
make_ref_alilist:                       # @make_ref_alilist
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movq	16(%rbp), %rax
	movabsq	$.L.str.6, %rbx
	movq	%rdi, -80(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -72(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	shlq	$2, %rax
	movq	%rbx, %rdi
	movl	$236, %esi
	movq	%rax, %rdx
	callq	sre_malloc
	movabsq	$.L.str.6, %rbx
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	shlq	$2, %rax
	movq	%rbx, %rdi
	movl	$237, %esi
	movq	%rax, %rdx
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB6_1:                                # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB6_10
# %bb.2:                                #   in Loop: Header=BB6_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB6_8
# %bb.3:                                #   in Loop: Header=BB6_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB6_8
# %bb.4:                                #   in Loop: Header=BB6_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB6_8
# %bb.5:                                #   in Loop: Header=BB6_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB6_8
# %bb.6:                                #   in Loop: Header=BB6_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB6_8
# %bb.7:                                #   in Loop: Header=BB6_1 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-80(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB6_8:                                #   in Loop: Header=BB6_1 Depth=1
	jmp	.LBB6_9
.LBB6_9:                                #   in Loop: Header=BB6_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_1
.LBB6_10:
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB6_11:                               # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB6_40
# %bb.12:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB6_26
# %bb.13:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB6_26
# %bb.14:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB6_26
# %bb.15:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB6_26
# %bb.16:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB6_26
# %bb.17:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB6_26
# %bb.18:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB6_23
# %bb.19:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB6_23
# %bb.20:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB6_23
# %bb.21:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB6_23
# %bb.22:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB6_24
.LBB6_23:                               #   in Loop: Header=BB6_11 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB6_25
.LBB6_24:                               #   in Loop: Header=BB6_11 Depth=1
	movl	-40(%rbp), %eax
.LBB6_25:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-64(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB6_26:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB6_32
# %bb.27:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB6_32
# %bb.28:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB6_32
# %bb.29:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB6_32
# %bb.30:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB6_32
# %bb.31:                               #   in Loop: Header=BB6_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB6_32:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB6_38
# %bb.33:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB6_38
# %bb.34:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB6_38
# %bb.35:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB6_38
# %bb.36:                               #   in Loop: Header=BB6_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB6_38
# %bb.37:                               #   in Loop: Header=BB6_11 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
.LBB6_38:                               #   in Loop: Header=BB6_11 Depth=1
	jmp	.LBB6_39
.LBB6_39:                               #   in Loop: Header=BB6_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_11
.LBB6_40:
	movq	-56(%rbp), %rdi
	callq	free
	movl	-36(%rbp), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-64(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end6:
	.size	make_ref_alilist, .Lfunc_end6-make_ref_alilist
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function CompareMultAlignments
.LCPI7_0:
	.quad	4607182418800017408     # double 1
.LCPI7_1:
	.quad	4611686018427387904     # double 2
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI7_2:
	.long	3212836864              # float -1
	.text
	.globl	CompareMultAlignments
	.p2align	4, 0x90
	.type	CompareMultAlignments,@function
CompareMultAlignments:                  # @CompareMultAlignments
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movss	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB7_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB7_10
# %bb.2:                                #   in Loop: Header=BB7_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB7_3:                                #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB7_8
# %bb.4:                                #   in Loop: Header=BB7_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	callq	ComparePairAlignments
	xorps	%xmm1, %xmm1
	movss	%xmm0, -20(%rbp)
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm1
	jbe	.LBB7_6
# %bb.5:
	movss	.LCPI7_2(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -24(%rbp)
	jmp	.LBB7_11
.LBB7_6:                                #   in Loop: Header=BB7_3 Depth=2
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addss	-16(%rbp), %xmm0
	movss	%xmm0, -16(%rbp)
# %bb.7:                                #   in Loop: Header=BB7_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB7_3
.LBB7_8:                                #   in Loop: Header=BB7_1 Depth=1
	jmp	.LBB7_9
.LBB7_9:                                #   in Loop: Header=BB7_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB7_1
.LBB7_10:
	movsd	.LCPI7_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movsd	.LCPI7_1(%rip), %xmm1   # xmm1 = mem[0],zero
	movss	-16(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm1, %xmm2
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm3
	cvtss2sd	%xmm3, %xmm3
	subsd	%xmm0, %xmm3
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	movss	%xmm0, -24(%rbp)
.LBB7_11:
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end7:
	.size	CompareMultAlignments, .Lfunc_end7-CompareMultAlignments
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function CompareRefMultAlignments
.LCPI8_0:
	.quad	4607182418800017408     # double 1
.LCPI8_1:
	.quad	4611686018427387904     # double 2
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI8_2:
	.long	3212836864              # float -1
	.text
	.globl	CompareRefMultAlignments
	.p2align	4, 0x90
	.type	CompareRefMultAlignments,@function
CompareRefMultAlignments:               # @CompareRefMultAlignments
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -12(%rbp)
	movss	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB8_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB8_10
# %bb.2:                                #   in Loop: Header=BB8_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB8_3:                                #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB8_8
# %bb.4:                                #   in Loop: Header=BB8_3 Depth=2
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movq	-32(%rbp), %r8
	movslq	-8(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	callq	CompareRefPairAlignments
	xorps	%xmm1, %xmm1
	movss	%xmm0, -20(%rbp)
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm1
	jbe	.LBB8_6
# %bb.5:
	movss	.LCPI8_2(%rip), %xmm0   # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -24(%rbp)
	jmp	.LBB8_11
.LBB8_6:                                #   in Loop: Header=BB8_3 Depth=2
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addss	-16(%rbp), %xmm0
	movss	%xmm0, -16(%rbp)
# %bb.7:                                #   in Loop: Header=BB8_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_3
.LBB8_8:                                #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_9
.LBB8_9:                                #   in Loop: Header=BB8_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_1
.LBB8_10:
	movsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	movsd	.LCPI8_1(%rip), %xmm1   # xmm1 = mem[0],zero
	movss	-16(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm1, %xmm2
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm3
	cvtss2sd	%xmm3, %xmm3
	subsd	%xmm0, %xmm3
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	movss	%xmm0, -24(%rbp)
.LBB8_11:
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end8:
	.size	CompareRefMultAlignments, .Lfunc_end8-CompareRefMultAlignments
	.cfi_endproc
                                        # -- End function
	.globl	PairwiseIdentity        # -- Begin function PairwiseIdentity
	.p2align	4, 0x90
	.type	PairwiseIdentity,@function
PairwiseIdentity:                       # @PairwiseIdentity
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB9_1:                                # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB9_3
# %bb.2:                                #   in Loop: Header=BB9_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	setne	%al
.LBB9_3:                                #   in Loop: Header=BB9_1 Depth=1
	testb	$1, %al
	jne	.LBB9_4
	jmp	.LBB9_20
.LBB9_4:                                #   in Loop: Header=BB9_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB9_12
# %bb.5:                                #   in Loop: Header=BB9_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB9_12
# %bb.6:                                #   in Loop: Header=BB9_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB9_12
# %bb.7:                                #   in Loop: Header=BB9_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB9_12
# %bb.8:                                #   in Loop: Header=BB9_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB9_12
# %bb.9:                                #   in Loop: Header=BB9_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB9_11
# %bb.10:                               #   in Loop: Header=BB9_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB9_11:                               #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_12
.LBB9_12:                               #   in Loop: Header=BB9_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB9_18
# %bb.13:                               #   in Loop: Header=BB9_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB9_18
# %bb.14:                               #   in Loop: Header=BB9_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB9_18
# %bb.15:                               #   in Loop: Header=BB9_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB9_18
# %bb.16:                               #   in Loop: Header=BB9_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB9_18
# %bb.17:                               #   in Loop: Header=BB9_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB9_18:                               #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_19
.LBB9_19:                               #   in Loop: Header=BB9_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_1
.LBB9_20:
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB9_22
# %bb.21:
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB9_22:
	cmpl	$0, -8(%rbp)
	jne	.LBB9_24
# %bb.23:
	xorps	%xmm0, %xmm0
	jmp	.LBB9_25
.LBB9_24:
	movl	-36(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movl	-8(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
.LBB9_25:
	cvtsd2ss	%xmm0, %xmm0
	popq	%rbp
	retq
.Lfunc_end9:
	.size	PairwiseIdentity, .Lfunc_end9-PairwiseIdentity
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function AlignmentIdentityBySampling
.LCPI10_0:
	.long	1065353216              # float 1
	.text
	.globl	AlignmentIdentityBySampling
	.p2align	4, 0x90
	.type	AlignmentIdentityBySampling,@function
AlignmentIdentityBySampling:            # @AlignmentIdentityBySampling
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	cmpl	$2, -12(%rbp)
	jge	.LBB10_2
# %bb.1:
	movss	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
	jmp	.LBB10_10
.LBB10_2:
	xorps	%xmm0, %xmm0
	movss	%xmm0, -4(%rbp)
	movl	$0, -8(%rbp)
.LBB10_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB10_9
# %bb.4:                                #   in Loop: Header=BB10_3 Depth=1
	callq	sre_random
	movl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -20(%rbp)
.LBB10_5:                               #   Parent Loop BB10_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	sre_random
	movl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -16(%rbp)
# %bb.6:                                #   in Loop: Header=BB10_5 Depth=2
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB10_5
# %bb.7:                                #   in Loop: Header=BB10_3 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	PairwiseIdentity
	addss	-4(%rbp), %xmm0
	movss	%xmm0, -4(%rbp)
# %bb.8:                                #   in Loop: Header=BB10_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_3
.LBB10_9:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	-24(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -28(%rbp)
.LBB10_10:
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end10:
	.size	AlignmentIdentityBySampling, .Lfunc_end10-AlignmentIdentityBySampling
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function MajorityRuleConsensus
.LCPI11_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	MajorityRuleConsensus
	.p2align	4, 0x90
	.type	MajorityRuleConsensus,@function
MajorityRuleConsensus:                  # @MajorityRuleConsensus
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movabsq	$.L.str.6, %rax
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$485, %esi              # imm = 0x1E5
	callq	sre_malloc
	movq	%rax, -40(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB11_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_3 Depth 2
                                        #     Child Loop BB11_7 Depth 2
                                        #     Child Loop BB11_15 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB11_23
# %bb.2:                                #   in Loop: Header=BB11_1 Depth=1
	movl	$0, -4(%rbp)
.LBB11_3:                               #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$27, -4(%rbp)
	jge	.LBB11_6
# %bb.4:                                #   in Loop: Header=BB11_3 Depth=2
	movslq	-4(%rbp), %rax
	movl	$0, -176(%rbp,%rax,4)
# %bb.5:                                #   in Loop: Header=BB11_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_3
.LBB11_6:                               #   in Loop: Header=BB11_1 Depth=1
	movl	$0, -12(%rbp)
.LBB11_7:                               #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB11_13
# %bb.8:                                #   in Loop: Header=BB11_7 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB11_10
# %bb.9:                                #   in Loop: Header=BB11_7 Depth=2
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	subl	$65, %eax
	cltq
	movl	-176(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -176(%rbp,%rax,4)
	jmp	.LBB11_11
.LBB11_10:                              #   in Loop: Header=BB11_7 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
.LBB11_11:                              #   in Loop: Header=BB11_7 Depth=2
	jmp	.LBB11_12
.LBB11_12:                              #   in Loop: Header=BB11_7 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_7
.LBB11_13:                              #   in Loop: Header=BB11_1 Depth=1
	movsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-72(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	movl	-32(%rbp), %eax
	cvtsi2ssl	%eax, %xmm2
	divss	%xmm2, %xmm1
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jb	.LBB11_21
# %bb.14:                               #   in Loop: Header=BB11_1 Depth=1
	movl	$-1, -20(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB11_15:                              #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -4(%rbp)
	jge	.LBB11_20
# %bb.16:                               #   in Loop: Header=BB11_15 Depth=2
	movslq	-4(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB11_18
# %bb.17:                               #   in Loop: Header=BB11_15 Depth=2
	movslq	-4(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -24(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB11_18:                              #   in Loop: Header=BB11_15 Depth=2
	jmp	.LBB11_19
.LBB11_19:                              #   in Loop: Header=BB11_15 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_15
.LBB11_20:                              #   in Loop: Header=BB11_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$65, %eax
	movq	-40(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -16(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB11_21:                              #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_22
.LBB11_22:                              #   in Loop: Header=BB11_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_1
.LBB11_23:
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rax
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end11:
	.size	MajorityRuleConsensus, .Lfunc_end11-MajorityRuleConsensus
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function AllocAlignment
.LCPI12_0:
	.long	1065353216              # float 1
	.text
	.globl	AllocAlignment
	.p2align	4, 0x90
	.type	AllocAlignment,@function
AllocAlignment:                         # @AllocAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	%edi, -8(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	InitAinfo
	movabsq	$.L.str.7, %rdi
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	movl	$50, %esi
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB12_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB12_4
# %bb.2:                                #   in Loop: Header=BB12_1 Depth=1
	movabsq	$.L.str.7, %rdi
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$52, %esi
	callq	sre_malloc
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_4:
	movabsq	$.L.str.7, %rdi
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movslq	-8(%rbp), %rdx
	shlq	$2, %rdx
	movl	$57, %esi
	callq	sre_malloc
	movss	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movl	-8(%rbp), %esi
	callq	FSet
	movabsq	$.L.str.7, %rdi
	movslq	-8(%rbp), %rax
	imulq	$360, %rax, %rdx        # imm = 0x168
	movl	$60, %esi
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB12_5:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB12_8
# %bb.6:                                #   in Loop: Header=BB12_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	$0, (%rax)
# %bb.7:                                #   in Loop: Header=BB12_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_5
.LBB12_8:
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end12:
	.size	AllocAlignment, .Lfunc_end12-AllocAlignment
	.cfi_endproc
                                        # -- End function
	.globl	InitAinfo               # -- Begin function InitAinfo
	.p2align	4, 0x90
	.type	InitAinfo,@function
InitAinfo:                              # @InitAinfo
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 84(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 80(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 92(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 88(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 100(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 96(%rax)
	popq	%rbp
	retq
.Lfunc_end13:
	.size	InitAinfo, .Lfunc_end13-InitAinfo
	.cfi_endproc
                                        # -- End function
	.globl	FreeAlignment           # -- Begin function FreeAlignment
	.p2align	4, 0x90
	.type	FreeAlignment,@function
FreeAlignment:                          # @FreeAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -8(%rbp)
	movl	$0, -12(%rbp)
.LBB14_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jge	.LBB14_8
# %bb.2:                                #   in Loop: Header=BB14_1 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB14_4
# %bb.3:                                #   in Loop: Header=BB14_1 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	344(%rax), %rdi
	callq	free
.LBB14_4:                               #   in Loop: Header=BB14_1 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB14_6
# %bb.5:                                #   in Loop: Header=BB14_1 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	352(%rax), %rdi
	callq	free
.LBB14_6:                               #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_7
.LBB14_7:                               #   in Loop: Header=BB14_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_1
.LBB14_8:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB14_10
# %bb.9:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB14_10:
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB14_12
# %bb.11:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
.LBB14_12:
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB14_14
# %bb.13:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free
.LBB14_14:
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB14_16
# %bb.15:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free
.LBB14_16:
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB14_18
# %bb.17:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB14_18:
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB14_20
# %bb.19:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB14_20:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	Free2DArray
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end14:
	.size	FreeAlignment, .Lfunc_end14-FreeAlignment
	.cfi_endproc
                                        # -- End function
	.globl	SAMizeAlignment         # -- Begin function SAMizeAlignment
	.p2align	4, 0x90
	.type	SAMizeAlignment,@function
SAMizeAlignment:                        # @SAMizeAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB15_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_3 Depth 2
                                        #     Child Loop BB15_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB15_31
# %bb.2:                                #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB15_3:                               #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB15_16
# %bb.4:                                #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB15_9
# %bb.5:                                #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB15_9
# %bb.6:                                #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB15_9
# %bb.7:                                #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB15_9
# %bb.8:                                #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB15_10
.LBB15_9:                               #   in Loop: Header=BB15_3 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB15_15
.LBB15_10:                              #   in Loop: Header=BB15_3 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB15_12
# %bb.11:                               #   in Loop: Header=BB15_3 Depth=2
	movl	$1, -28(%rbp)
	jmp	.LBB15_15
.LBB15_12:                              #   in Loop: Header=BB15_3 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB15_14
# %bb.13:                               #   in Loop: Header=BB15_3 Depth=2
	movl	$1, -32(%rbp)
.LBB15_14:                              #   in Loop: Header=BB15_3 Depth=2
	jmp	.LBB15_15
.LBB15_15:                              #   in Loop: Header=BB15_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_3
.LBB15_16:                              #   in Loop: Header=BB15_1 Depth=1
	movb	$45, -9(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB15_19
# %bb.17:                               #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB15_19
# %bb.18:                               #   in Loop: Header=BB15_1 Depth=1
	movb	$46, -9(%rbp)
.LBB15_19:                              #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_20:                              #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB15_29
# %bb.21:                               #   in Loop: Header=BB15_20 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB15_26
# %bb.22:                               #   in Loop: Header=BB15_20 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB15_26
# %bb.23:                               #   in Loop: Header=BB15_20 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB15_26
# %bb.24:                               #   in Loop: Header=BB15_20 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB15_26
# %bb.25:                               #   in Loop: Header=BB15_20 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB15_27
.LBB15_26:                              #   in Loop: Header=BB15_20 Depth=2
	movb	-9(%rbp), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB15_27:                              #   in Loop: Header=BB15_20 Depth=2
	jmp	.LBB15_28
.LBB15_28:                              #   in Loop: Header=BB15_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_20
.LBB15_29:                              #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_30
.LBB15_30:                              #   in Loop: Header=BB15_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_1
.LBB15_31:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end15:
	.size	SAMizeAlignment, .Lfunc_end15-SAMizeAlignment
	.cfi_endproc
                                        # -- End function
	.globl	SAMizeAlignmentByGapFrac # -- Begin function SAMizeAlignmentByGapFrac
	.p2align	4, 0x90
	.type	SAMizeAlignmentByGapFrac,@function
SAMizeAlignmentByGapFrac:               # @SAMizeAlignmentByGapFrac
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movss	%xmm0, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB16_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
                                        #     Child Loop BB16_14 Depth 2
                                        #     Child Loop BB16_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB16_39
# %bb.2:                                #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB16_3:                               #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_12
# %bb.4:                                #   in Loop: Header=BB16_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB16_9
# %bb.5:                                #   in Loop: Header=BB16_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB16_9
# %bb.6:                                #   in Loop: Header=BB16_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB16_9
# %bb.7:                                #   in Loop: Header=BB16_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB16_9
# %bb.8:                                #   in Loop: Header=BB16_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB16_10
.LBB16_9:                               #   in Loop: Header=BB16_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB16_10:                              #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_11
.LBB16_11:                              #   in Loop: Header=BB16_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_3
.LBB16_12:                              #   in Loop: Header=BB16_1 Depth=1
	movl	-24(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jbe	.LBB16_25
# %bb.13:                               #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_14:                              #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_24
# %bb.15:                               #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB16_20
# %bb.16:                               #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB16_20
# %bb.17:                               #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB16_20
# %bb.18:                               #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB16_20
# %bb.19:                               #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB16_21
.LBB16_20:                              #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$46, (%rax,%rcx)
	jmp	.LBB16_22
.LBB16_21:                              #   in Loop: Header=BB16_14 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	tolower
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB16_22:                              #   in Loop: Header=BB16_14 Depth=2
	jmp	.LBB16_23
.LBB16_23:                              #   in Loop: Header=BB16_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_14
.LBB16_24:                              #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_37
.LBB16_25:                              #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_26:                              #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_36
# %bb.27:                               #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB16_32
# %bb.28:                               #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB16_32
# %bb.29:                               #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB16_32
# %bb.30:                               #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB16_32
# %bb.31:                               #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB16_33
.LBB16_32:                              #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$45, (%rax,%rcx)
	jmp	.LBB16_34
.LBB16_33:                              #   in Loop: Header=BB16_26 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB16_34:                              #   in Loop: Header=BB16_26 Depth=2
	jmp	.LBB16_35
.LBB16_35:                              #   in Loop: Header=BB16_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_26
.LBB16_36:                              #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_37
.LBB16_37:                              #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_38
.LBB16_38:                              #   in Loop: Header=BB16_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_1
.LBB16_39:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end16:
	.size	SAMizeAlignmentByGapFrac, .Lfunc_end16-SAMizeAlignmentByGapFrac
	.cfi_endproc
                                        # -- End function
	.globl	MakeAlignedString       # -- Begin function MakeAlignedString
	.p2align	4, 0x90
	.type	MakeAlignedString,@function
MakeAlignedString:                      # @MakeAlignedString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.7, %rax
	movq	%rdi, -32(%rbp)
	movl	%esi, -36(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$242, %esi
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB17_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB17_11
# %bb.2:                                #   in Loop: Header=BB17_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB17_8
# %bb.3:                                #   in Loop: Header=BB17_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB17_8
# %bb.4:                                #   in Loop: Header=BB17_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB17_8
# %bb.5:                                #   in Loop: Header=BB17_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB17_8
# %bb.6:                                #   in Loop: Header=BB17_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB17_8
# %bb.7:                                #   in Loop: Header=BB17_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_9
.LBB17_8:                               #   in Loop: Header=BB17_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	$46, (%rax,%rcx)
.LBB17_9:                               #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_10
.LBB17_10:                              #   in Loop: Header=BB17_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_1
.LBB17_11:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movslq	-16(%rbp), %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	cmpq	%rax, %rbx
	je	.LBB17_13
# %bb.12:
	movl	$6, squid_errno
	movq	-24(%rbp), %rdi
	callq	free
	movl	$0, -40(%rbp)
	jmp	.LBB17_14
.LBB17_13:
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -40(%rbp)
.LBB17_14:
	movl	-40(%rbp), %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end17:
	.size	MakeAlignedString, .Lfunc_end17-MakeAlignedString
	.cfi_endproc
                                        # -- End function
	.globl	MakeDealignedString     # -- Begin function MakeDealignedString
	.p2align	4, 0x90
	.type	MakeDealignedString,@function
MakeDealignedString:                    # @MakeDealignedString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.7, %rax
	movq	%rdi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$280, %esi              # imm = 0x118
	callq	sre_malloc
	movq	%rax, -48(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB18_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB18_10
# %bb.2:                                #   in Loop: Header=BB18_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB18_8
# %bb.3:                                #   in Loop: Header=BB18_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB18_8
# %bb.4:                                #   in Loop: Header=BB18_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB18_8
# %bb.5:                                #   in Loop: Header=BB18_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB18_8
# %bb.6:                                #   in Loop: Header=BB18_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB18_8
# %bb.7:                                #   in Loop: Header=BB18_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-48(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB18_8:                               #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_9
.LBB18_9:                               #   in Loop: Header=BB18_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_1
.LBB18_10:
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movslq	-20(%rbp), %rbx
	movq	-56(%rbp), %rdi
	callq	strlen
	cmpq	%rax, %rbx
	je	.LBB18_12
# %bb.11:
	movl	$6, squid_errno
	movq	-48(%rbp), %rdi
	callq	free
	movl	$0, -36(%rbp)
	jmp	.LBB18_13
.LBB18_12:
	movq	-48(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -36(%rbp)
.LBB18_13:
	movl	-36(%rbp), %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end18:
	.size	MakeDealignedString, .Lfunc_end18-MakeDealignedString
	.cfi_endproc
                                        # -- End function
	.globl	DealignedLength         # -- Begin function DealignedLength
	.p2align	4, 0x90
	.type	DealignedLength,@function
DealignedLength:                        # @DealignedLength
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
.LBB19_1:                               # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB19_10
# %bb.2:                                #   in Loop: Header=BB19_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB19_8
# %bb.3:                                #   in Loop: Header=BB19_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	je	.LBB19_8
# %bb.4:                                #   in Loop: Header=BB19_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB19_8
# %bb.5:                                #   in Loop: Header=BB19_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB19_8
# %bb.6:                                #   in Loop: Header=BB19_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	je	.LBB19_8
# %bb.7:                                #   in Loop: Header=BB19_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB19_8:                               #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_9
.LBB19_9:                               #   in Loop: Header=BB19_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_10:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end19:
	.size	DealignedLength, .Lfunc_end19-DealignedLength
	.cfi_endproc
                                        # -- End function
	.globl	WritePairwiseAlignment  # -- Begin function WritePairwiseAlignment
	.p2align	4, 0x90
	.type	WritePairwiseAlignment,@function
WritePairwiseAlignment:                 # @WritePairwiseAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$328, %rsp              # imm = 0x148
	.cfi_offset %rbx, -24
	movl	32(%rbp), %eax
	movq	24(%rbp), %rax
	movl	16(%rbp), %eax
	leaq	-90(%rbp), %rax
	movq	%rdi, -64(%rbp)
	movq	%rsi, -256(%rbp)
	movq	%rdx, -248(%rbp)
	movl	%ecx, -68(%rbp)
	movq	%r8, -240(%rbp)
	movq	%r9, -232(%rbp)
	movq	-248(%rbp), %rsi
	movq	%rax, %rdi
	movl	$10, %edx
	callq	strncpy
	movabsq	$.L.str.1.8, %rsi
	leaq	-90(%rbp), %rdi
	movb	$0, -80(%rbp)
	callq	strtok
	leaq	-79(%rbp), %rdi
	movq	-232(%rbp), %rsi
	movl	$10, %edx
	callq	strncpy
	movabsq	$.L.str.1.8, %rsi
	leaq	-79(%rbp), %rdi
	movb	$0, -69(%rbp)
	callq	strtok
	movq	-256(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$1, -40(%rbp)
.LBB20_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_8 Depth 2
                                        #     Child Loop BB20_32 Depth 2
                                        #     Child Loop BB20_42 Depth 2
	cmpl	$0, -40(%rbp)
	je	.LBB20_52
# %bb.2:                                #   in Loop: Header=BB20_1 Depth=1
	leaq	-160(%rbp), %rdi
	movl	$0, -40(%rbp)
	movq	-56(%rbp), %rsi
	movl	$60, %edx
	callq	strncpy
	leaq	-224(%rbp), %rdi
	movb	$0, -100(%rbp)
	movq	-48(%rbp), %rsi
	movl	$60, %edx
	callq	strncpy
	leaq	-224(%rbp), %rbx
	leaq	-160(%rbp), %rdi
	movb	$0, -164(%rbp)
	callq	strlen
	movl	%eax, -36(%rbp)
	movq	%rbx, %rdi
	callq	strlen
	movl	%eax, -32(%rbp)
	cmpl	$60, -36(%rbp)
	jne	.LBB20_4
# %bb.3:                                #   in Loop: Header=BB20_1 Depth=1
	movq	-56(%rbp), %rax
	movsbl	60(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB20_6
.LBB20_4:                               #   in Loop: Header=BB20_1 Depth=1
	cmpl	$60, -32(%rbp)
	jne	.LBB20_7
# %bb.5:                                #   in Loop: Header=BB20_1 Depth=1
	movq	-48(%rbp), %rax
	movsbl	60(%rax), %eax
	cmpl	$0, %eax
	je	.LBB20_7
.LBB20_6:                               #   in Loop: Header=BB20_1 Depth=1
	movl	$1, -40(%rbp)
.LBB20_7:                               #   in Loop: Header=BB20_1 Depth=1
	movl	-36(%rbp), %eax
	movq	-56(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -56(%rbp)
	movl	-32(%rbp), %eax
	movq	-48(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB20_8:                               #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	jge	.LBB20_10
# %bb.9:                                #   in Loop: Header=BB20_8 Depth=2
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	setl	%al
.LBB20_10:                              #   in Loop: Header=BB20_8 Depth=2
	testb	$1, %al
	jne	.LBB20_11
	jmp	.LBB20_31
.LBB20_11:                              #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$32, %eax
	je	.LBB20_28
# %bb.12:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$46, %eax
	je	.LBB20_28
# %bb.13:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$95, %eax
	je	.LBB20_28
# %bb.14:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$45, %eax
	je	.LBB20_28
# %bb.15:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$126, %eax
	je	.LBB20_28
# %bb.16:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$32, %eax
	je	.LBB20_28
# %bb.17:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$46, %eax
	je	.LBB20_28
# %bb.18:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$95, %eax
	je	.LBB20_28
# %bb.19:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$45, %eax
	je	.LBB20_28
# %bb.20:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$126, %eax
	je	.LBB20_28
# %bb.21:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	movslq	-12(%rbp), %rcx
	movsbl	-224(%rbp,%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB20_23
# %bb.22:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movb	-160(%rbp,%rax), %al
	movslq	-12(%rbp), %rcx
	movb	%al, -320(%rbp,%rcx)
	jmp	.LBB20_27
.LBB20_23:                              #   in Loop: Header=BB20_8 Depth=2
	movq	24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	-160(%rbp,%rcx), %ecx
	subl	$65, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	-224(%rbp,%rcx), %ecx
	subl	$65, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB20_25
# %bb.24:                               #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movb	$43, -320(%rbp,%rax)
	jmp	.LBB20_26
.LBB20_25:                              #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movb	$32, -320(%rbp,%rax)
.LBB20_26:                              #   in Loop: Header=BB20_8 Depth=2
	jmp	.LBB20_27
.LBB20_27:                              #   in Loop: Header=BB20_8 Depth=2
	jmp	.LBB20_29
.LBB20_28:                              #   in Loop: Header=BB20_8 Depth=2
	movslq	-12(%rbp), %rax
	movb	$32, -320(%rbp,%rax)
.LBB20_29:                              #   in Loop: Header=BB20_8 Depth=2
	jmp	.LBB20_30
.LBB20_30:                              #   in Loop: Header=BB20_8 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_8
.LBB20_31:                              #   in Loop: Header=BB20_1 Depth=1
	movslq	-12(%rbp), %rax
	movb	$0, -320(%rbp,%rax)
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB20_32:                              #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB20_41
# %bb.33:                               #   in Loop: Header=BB20_32 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$32, %eax
	je	.LBB20_39
# %bb.34:                               #   in Loop: Header=BB20_32 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$46, %eax
	je	.LBB20_39
# %bb.35:                               #   in Loop: Header=BB20_32 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$95, %eax
	je	.LBB20_39
# %bb.36:                               #   in Loop: Header=BB20_32 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$45, %eax
	je	.LBB20_39
# %bb.37:                               #   in Loop: Header=BB20_32 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-160(%rbp,%rax), %eax
	cmpl	$126, %eax
	je	.LBB20_39
# %bb.38:                               #   in Loop: Header=BB20_32 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB20_39:                              #   in Loop: Header=BB20_32 Depth=2
	jmp	.LBB20_40
.LBB20_40:                              #   in Loop: Header=BB20_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_32
.LBB20_41:                              #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB20_42:                              #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB20_51
# %bb.43:                               #   in Loop: Header=BB20_42 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$32, %eax
	je	.LBB20_49
# %bb.44:                               #   in Loop: Header=BB20_42 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$46, %eax
	je	.LBB20_49
# %bb.45:                               #   in Loop: Header=BB20_42 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$95, %eax
	je	.LBB20_49
# %bb.46:                               #   in Loop: Header=BB20_42 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$45, %eax
	je	.LBB20_49
# %bb.47:                               #   in Loop: Header=BB20_42 Depth=2
	movslq	-12(%rbp), %rax
	movsbl	-224(%rbp,%rax), %eax
	cmpl	$126, %eax
	je	.LBB20_49
# %bb.48:                               #   in Loop: Header=BB20_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB20_49:                              #   in Loop: Header=BB20_42 Depth=2
	jmp	.LBB20_50
.LBB20_50:                              #   in Loop: Header=BB20_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_42
.LBB20_51:                              #   in Loop: Header=BB20_1 Depth=1
	movabsq	$.L.str.2.9, %rsi
	movabsq	$.L.str.3.10, %rcx
	leaq	-160(%rbp), %rax
	leaq	-90(%rbp), %r8
	movq	-64(%rbp), %rdi
	movl	32(%rbp), %edx
	movl	-28(%rbp), %r9d
	movl	-28(%rbp), %ebx
	addl	-20(%rbp), %ebx
	subl	$1, %ebx
	movq	%rax, (%rsp)
	movl	%ebx, 8(%rsp)
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.4.11, %rsi
	movabsq	$.L.str.3.10, %rcx
	leaq	-320(%rbp), %r8
	movq	-64(%rbp), %rdi
	movl	32(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.2.9, %rsi
	movabsq	$.L.str.3.10, %rcx
	leaq	-224(%rbp), %rax
	leaq	-79(%rbp), %r8
	movq	-64(%rbp), %rdi
	movl	32(%rbp), %edx
	movl	-24(%rbp), %r9d
	movl	-24(%rbp), %ebx
	addl	-16(%rbp), %ebx
	subl	$1, %ebx
	movq	%rax, (%rsp)
	movl	%ebx, 8(%rsp)
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.5.12, %rsi
	movq	-64(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_1
.LBB20_52:
	movl	$1, %eax
	addq	$328, %rsp              # imm = 0x148
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end20:
	.size	WritePairwiseAlignment, .Lfunc_end20-WritePairwiseAlignment
	.cfi_endproc
                                        # -- End function
	.globl	MingapAlignment         # -- Begin function MingapAlignment
	.p2align	4, 0x90
	.type	MingapAlignment,@function
MingapAlignment:                        # @MingapAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -12(%rbp)
.LBB21_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
                                        #     Child Loop BB21_17 Depth 2
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB21_27
# %bb.2:                                #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_3:                               #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jge	.LBB21_12
# %bb.4:                                #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB21_10
# %bb.5:                                #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB21_10
# %bb.6:                                #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB21_10
# %bb.7:                                #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB21_10
# %bb.8:                                #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB21_10
# %bb.9:                                #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_13
.LBB21_10:                              #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_11
.LBB21_11:                              #   in Loop: Header=BB21_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_3
.LBB21_12:                              # %.loopexit
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_13
.LBB21_13:                              #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB21_15
# %bb.14:                               #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_26
.LBB21_15:                              #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB21_25
# %bb.16:                               #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_17:                              #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jge	.LBB21_20
# %bb.18:                               #   in Loop: Header=BB21_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.19:                               #   in Loop: Header=BB21_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_17
.LBB21_20:                              #   in Loop: Header=BB21_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB21_22
# %bb.21:                               #   in Loop: Header=BB21_1 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB21_22:                              #   in Loop: Header=BB21_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB21_24
# %bb.23:                               #   in Loop: Header=BB21_1 Depth=1
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB21_24:                              #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_25
.LBB21_25:                              #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB21_26:                              #   in Loop: Header=BB21_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_1
.LBB21_27:
	movl	$0, -4(%rbp)
.LBB21_28:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jge	.LBB21_31
# %bb.29:                               #   in Loop: Header=BB21_28 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.30:                               #   in Loop: Header=BB21_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_28
.LBB21_31:
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB21_33
# %bb.32:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB21_33:
	movq	-24(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB21_35
# %bb.34:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB21_35:
	movl	$1, %eax
	popq	%rbp
	retq
.Lfunc_end21:
	.size	MingapAlignment, .Lfunc_end21-MingapAlignment
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RandomAlignment
.LCPI22_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	RandomAlignment
	.p2align	4, 0x90
	.type	RandomAlignment,@function
RandomAlignment:                        # @RandomAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movabsq	$.L.str.7, %rax
	movq	%rdi, -96(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -16(%rbp)
	movss	%xmm0, -32(%rbp)
	movss	%xmm1, -52(%rbp)
	movq	%rcx, -104(%rbp)
	movq	%r8, -88(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$530, %esi              # imm = 0x212
	callq	sre_malloc
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
	movl	$9999999, -36(%rbp)     # imm = 0x98967F
	movl	$0, -4(%rbp)
.LBB22_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_7
# %bb.2:                                #   in Loop: Header=BB22_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movq	-72(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB22_4
# %bb.3:                                #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB22_5
.LBB22_4:                               #   in Loop: Header=BB22_1 Depth=1
	movl	-36(%rbp), %eax
.LBB22_5:                               #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, -36(%rbp)
# %bb.6:                                #   in Loop: Header=BB22_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_1
.LBB22_7:
	movsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	movss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	movss	-52(%rbp), %xmm3        # xmm3 = mem[0],zero,zero,zero
	cvtss2sd	%xmm3, %xmm3
	movaps	%xmm0, %xmm4
	subsd	%xmm3, %xmm4
	movaps	%xmm0, %xmm3
	divsd	%xmm4, %xmm3
	movaps	%xmm0, %xmm4
	addsd	%xmm3, %xmm4
	mulsd	%xmm4, %xmm2
	addsd	%xmm2, %xmm0
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB22_9
# %bb.8:
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB22_9:
	movabsq	$.L.str.7, %rdi
	movslq	-16(%rbp), %rdx
	shlq	$3, %rdx
	movl	$545, %esi              # imm = 0x221
	callq	sre_malloc
	movabsq	$.L.str.7, %rdi
	movq	%rax, -48(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$546, %esi              # imm = 0x222
	callq	sre_malloc
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB22_10:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_12 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_17
# %bb.11:                               #   in Loop: Header=BB22_10 Depth=1
	movabsq	$.L.str.7, %rdi
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$549, %esi              # imm = 0x225
	callq	sre_malloc
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -20(%rbp)
.LBB22_12:                              #   Parent Loop BB22_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB22_15
# %bb.13:                               #   in Loop: Header=BB22_12 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.14:                               #   in Loop: Header=BB22_12 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_12
.LBB22_15:                              #   in Loop: Header=BB22_10 Depth=1
	jmp	.LBB22_16
.LBB22_16:                              #   in Loop: Header=BB22_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_10
.LBB22_17:
	movsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	addss	-52(%rbp), %xmm2
	divss	%xmm2, %xmm1
	movss	%xmm1, -32(%rbp)
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB22_18:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_28
# %bb.19:                               #   in Loop: Header=BB22_18 Depth=1
	movl	$-1, -8(%rbp)
	movl	$0, -20(%rbp)
.LBB22_20:                              #   Parent Loop BB22_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_26
# %bb.21:                               #   in Loop: Header=BB22_20 Depth=2
	callq	sre_random
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	ja	.LBB22_23
# %bb.22:                               #   in Loop: Header=BB22_20 Depth=2
	cmpl	$-1, -8(%rbp)
	jne	.LBB22_24
.LBB22_23:                              #   in Loop: Header=BB22_20 Depth=2
	callq	sre_random
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -8(%rbp)
.LBB22_24:                              #   in Loop: Header=BB22_20 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.25:                               #   in Loop: Header=BB22_20 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_20
.LBB22_26:                              #   in Loop: Header=BB22_18 Depth=1
	jmp	.LBB22_27
.LBB22_27:                              #   in Loop: Header=BB22_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_18
.LBB22_28:
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB22_29:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB22_38
# %bb.30:                               #   in Loop: Header=BB22_29 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -4(%rbp)
.LBB22_31:                              #   Parent Loop BB22_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_36
# %bb.32:                               #   in Loop: Header=BB22_31 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB22_34
# %bb.33:                               #   in Loop: Header=BB22_31 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB22_34:                              #   in Loop: Header=BB22_31 Depth=2
	jmp	.LBB22_35
.LBB22_35:                              #   in Loop: Header=BB22_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_31
.LBB22_36:                              #   in Loop: Header=BB22_29 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.37:                               #   in Loop: Header=BB22_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_29
.LBB22_38:
	movabsq	$.L.str.7, %rdi
	movslq	-16(%rbp), %rdx
	shlq	$3, %rdx
	movl	$581, %esi              # imm = 0x245
	callq	sre_malloc
	movq	%rax, -80(%rbp)
	movl	$0, -4(%rbp)
.LBB22_39:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_42
# %bb.40:                               #   in Loop: Header=BB22_39 Depth=1
	movabsq	$.L.str.7, %rdi
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$583, %esi              # imm = 0x247
	callq	sre_malloc
	movq	-80(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.41:                               #   in Loop: Header=BB22_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_39
.LBB22_42:
	movl	$0, -4(%rbp)
.LBB22_43:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_45 Depth 2
                                        #       Child Loop BB22_47 Depth 3
                                        #       Child Loop BB22_51 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_60
# %bb.44:                               #   in Loop: Header=BB22_43 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -28(%rbp)
.LBB22_45:                              #   Parent Loop BB22_43 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_47 Depth 3
                                        #       Child Loop BB22_51 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB22_58
# %bb.46:                               #   in Loop: Header=BB22_45 Depth=2
	movl	$0, -24(%rbp)
.LBB22_47:                              #   Parent Loop BB22_43 Depth=1
                                        #     Parent Loop BB22_45 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB22_50
# %bb.48:                               #   in Loop: Header=BB22_47 Depth=3
	movq	-96(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -20(%rbp)
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-80(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
# %bb.49:                               #   in Loop: Header=BB22_47 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_47
.LBB22_50:                              #   in Loop: Header=BB22_45 Depth=2
	jmp	.LBB22_51
.LBB22_51:                              #   Parent Loop BB22_43 Depth=1
                                        #     Parent Loop BB22_45 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB22_54
# %bb.52:                               #   in Loop: Header=BB22_51 Depth=3
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -8(%rbp)
	movslq	%ecx, %rcx
	movb	$32, (%rax,%rcx)
# %bb.53:                               #   in Loop: Header=BB22_51 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_51
.LBB22_54:                              #   in Loop: Header=BB22_45 Depth=2
	movl	-28(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB22_56
# %bb.55:                               #   in Loop: Header=BB22_45 Depth=2
	movq	-96(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -20(%rbp)
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-80(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB22_56:                              #   in Loop: Header=BB22_45 Depth=2
	jmp	.LBB22_57
.LBB22_57:                              #   in Loop: Header=BB22_45 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB22_45
.LBB22_58:                              #   in Loop: Header=BB22_43 Depth=1
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.59:                               #   in Loop: Header=BB22_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_43
.LBB22_60:
	movabsq	$.L.str.7, %rdi
	movq	-88(%rbp), %rax
	movl	$0, (%rax)
	movl	-40(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movslq	-16(%rbp), %rax
	imulq	$360, %rax, %rdx        # imm = 0x168
	movl	$603, %esi              # imm = 0x25B
	callq	sre_malloc
	movq	-88(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB22_61:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB22_64
# %bb.62:                               #   in Loop: Header=BB22_61 Depth=1
	movq	-88(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-112(%rbp), %rsi
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rsi
	callq	SeqinfoCopy
# %bb.63:                               #   in Loop: Header=BB22_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_61
.LBB22_64:
	movq	-72(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	Free2DArray
	movq	-80(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end22:
	.size	RandomAlignment, .Lfunc_end22-RandomAlignment
	.cfi_endproc
                                        # -- End function
	.globl	AlignmentHomogenousGapsym # -- Begin function AlignmentHomogenousGapsym
	.p2align	4, 0x90
	.type	AlignmentHomogenousGapsym,@function
AlignmentHomogenousGapsym:              # @AlignmentHomogenousGapsym
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -28(%rbp)
	movb	%cl, -9(%rbp)
	movl	$0, -8(%rbp)
.LBB23_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB23_14
# %bb.2:                                #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -4(%rbp)
.LBB23_3:                               #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB23_12
# %bb.4:                                #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB23_9
# %bb.5:                                #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB23_9
# %bb.6:                                #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB23_9
# %bb.7:                                #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB23_9
# %bb.8:                                #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB23_10
.LBB23_9:                               #   in Loop: Header=BB23_3 Depth=2
	movb	-9(%rbp), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB23_10:                              #   in Loop: Header=BB23_3 Depth=2
	jmp	.LBB23_11
.LBB23_11:                              #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_3
.LBB23_12:                              #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_13
.LBB23_13:                              #   in Loop: Header=BB23_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_1
.LBB23_14:
	popq	%rbp
	retq
.Lfunc_end23:
	.size	AlignmentHomogenousGapsym, .Lfunc_end23-AlignmentHomogenousGapsym
	.cfi_endproc
                                        # -- End function
	.globl	DetermineAlphabet       # -- Begin function DetermineAlphabet
	.p2align	4, 0x90
	.type	DetermineAlphabet,@function
DetermineAlphabet:                      # @DetermineAlphabet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB24_1:                               # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB24_11
# %bb.2:                                #   in Loop: Header=BB24_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	Seqtype
	movl	%eax, %ecx
	subl	$3, %eax
	ja	.LBB24_8
# %bb.3:                                #   in Loop: Header=BB24_1 Depth=1
	movq	.LJTI24_0(,%rcx,8), %rax
	jmpq	*%rax
.LBB24_4:                               #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_9
.LBB24_5:                               #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_9
.LBB24_6:                               #   in Loop: Header=BB24_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_9
.LBB24_7:                               #   in Loop: Header=BB24_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_9
.LBB24_8:                               #   in Loop: Header=BB24_1 Depth=1
	movabsq	$.L.str.13, %rdi
	movb	$0, %al
	callq	Die
.LBB24_9:                               #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_10
.LBB24_10:                              #   in Loop: Header=BB24_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_1
.LBB24_11:
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB24_13
# %bb.12:
	movl	$2, -12(%rbp)
	jmp	.LBB24_25
.LBB24_13:
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB24_15
# %bb.14:
	movl	$3, -12(%rbp)
	jmp	.LBB24_24
.LBB24_15:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB24_18
# %bb.16:
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB24_18
# %bb.17:
	movabsq	$.L.str.1.14, %rdi
	movb	$0, %al
	callq	Warn
	movl	$2, -12(%rbp)
	jmp	.LBB24_23
.LBB24_18:
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB24_21
# %bb.19:
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB24_21
# %bb.20:
	movabsq	$.L.str.2.15, %rdi
	movb	$0, %al
	callq	Warn
	movl	$3, -12(%rbp)
	jmp	.LBB24_22
.LBB24_21:
	movabsq	$.L.str.3.16, %rdi
	movb	$0, %al
	callq	Die
.LBB24_22:
	jmp	.LBB24_23
.LBB24_23:
	jmp	.LBB24_24
.LBB24_24:
	jmp	.LBB24_25
.LBB24_25:
	movl	-12(%rbp), %edi
	callq	SetAlphabet
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end24:
	.size	DetermineAlphabet, .Lfunc_end24-DetermineAlphabet
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI24_0:
	.quad	.LBB24_7
	.quad	.LBB24_5
	.quad	.LBB24_4
	.quad	.LBB24_6
                                        # -- End function
	.text
	.globl	SetAlphabet             # -- Begin function SetAlphabet
	.p2align	4, 0x90
	.type	SetAlphabet,@function
SetAlphabet:                            # @SetAlphabet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -8(%rbp)
	cmpl	$0, Alphabet_type
	je	.LBB25_4
# %bb.1:
	movl	-8(%rbp), %eax
	cmpl	Alphabet_type, %eax
	je	.LBB25_3
# %bb.2:
	movabsq	$.L.str.4.17, %rdi
	movb	$0, %al
	callq	Die
.LBB25_3:
	jmp	.LBB25_25
.LBB25_4:
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB25_15
	jmp	.LBB25_5
.LBB25_5:
	subl	$3, %eax
	jne	.LBB25_24
	jmp	.LBB25_6
.LBB25_6:
	movl	-8(%rbp), %eax
	movl	%eax, Alphabet_type
	movl	$Alphabet, %edi
	movl	$.L.str.5.18, %esi
	callq	strcpy
	movl	$20, Alphabet_size
	movl	$24, Alphabet_iupac
	movl	$0, -4(%rbp)
.LBB25_7:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB25_10
# %bb.8:                                #   in Loop: Header=BB25_7 Depth=1
	movabsq	$Degenerate, %rdi
	movslq	-4(%rbp), %rax
	imulq	$20, %rax, %rax
	addq	%rax, %rdi
	movslq	Alphabet_size, %rdx
	xorl	%esi, %esi
	callq	memset
# %bb.9:                                #   in Loop: Header=BB25_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_7
.LBB25_10:
	movl	$0, -4(%rbp)
.LBB25_11:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB25_14
# %bb.12:                               #   in Loop: Header=BB25_11 Depth=1
	movabsq	$Degenerate, %rax
	movslq	-4(%rbp), %rcx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movslq	-4(%rbp), %rax
	movl	$1, DegenCount(,%rax,4)
# %bb.13:                               #   in Loop: Header=BB25_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_11
.LBB25_14:
	movabsq	$.L.str.6.19, %rsi
	movl	$85, %edi
	callq	set_degenerate
	movabsq	$.L.str.7.20, %rsi
	movl	$66, %edi
	callq	set_degenerate
	movabsq	$.L.str.8, %rsi
	movl	$90, %edi
	callq	set_degenerate
	movabsq	$.L.str.9, %rsi
	movl	$88, %edi
	callq	set_degenerate
	jmp	.LBB25_25
.LBB25_15:
	movl	-8(%rbp), %eax
	movl	%eax, Alphabet_type
	movl	$Alphabet, %edi
	movl	$.L.str.10, %esi
	callq	strcpy
	movl	$4, Alphabet_size
	movl	$17, Alphabet_iupac
	movl	$0, -4(%rbp)
.LBB25_16:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB25_19
# %bb.17:                               #   in Loop: Header=BB25_16 Depth=1
	movabsq	$Degenerate, %rdi
	movslq	-4(%rbp), %rax
	imulq	$20, %rax, %rax
	addq	%rax, %rdi
	movslq	Alphabet_size, %rdx
	xorl	%esi, %esi
	callq	memset
# %bb.18:                               #   in Loop: Header=BB25_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_16
.LBB25_19:
	movl	$0, -4(%rbp)
.LBB25_20:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB25_23
# %bb.21:                               #   in Loop: Header=BB25_20 Depth=1
	movabsq	$Degenerate, %rax
	movslq	-4(%rbp), %rcx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movslq	-4(%rbp), %rax
	movl	$1, DegenCount(,%rax,4)
# %bb.22:                               #   in Loop: Header=BB25_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_20
.LBB25_23:
	movabsq	$.L.str.11, %rsi
	movl	$85, %edi
	callq	set_degenerate
	movabsq	$.L.str.12, %rsi
	movl	$78, %edi
	callq	set_degenerate
	movabsq	$.L.str.12, %rsi
	movl	$88, %edi
	callq	set_degenerate
	movabsq	$.L.str.13.21, %rsi
	movl	$82, %edi
	callq	set_degenerate
	movabsq	$.L.str.14, %rsi
	movl	$89, %edi
	callq	set_degenerate
	movabsq	$.L.str.15, %rsi
	movl	$77, %edi
	callq	set_degenerate
	movabsq	$.L.str.16, %rsi
	movl	$75, %edi
	callq	set_degenerate
	movabsq	$.L.str.17, %rsi
	movl	$83, %edi
	callq	set_degenerate
	movabsq	$.L.str.18, %rsi
	movl	$87, %edi
	callq	set_degenerate
	movabsq	$.L.str.19, %rsi
	movl	$72, %edi
	callq	set_degenerate
	movabsq	$.L.str.20, %rsi
	movl	$66, %edi
	callq	set_degenerate
	movabsq	$.L.str.21, %rsi
	movl	$86, %edi
	callq	set_degenerate
	movabsq	$.L.str.22, %rsi
	movl	$68, %edi
	callq	set_degenerate
	jmp	.LBB25_25
.LBB25_24:
	movabsq	$.L.str.23, %rdi
	movb	$0, %al
	callq	Die
.LBB25_25:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end25:
	.size	SetAlphabet, .Lfunc_end25-SetAlphabet
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function set_degenerate
	.type	set_degenerate,@function
set_degenerate:                         # @set_degenerate
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$Alphabet, %r14
	movb	%dil, -17(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movsbl	-17(%rbp), %esi
	movq	%r14, %rdi
	callq	strchr
	movabsq	$Alphabet, %rcx
	subq	%rcx, %rax
	movl	%ebx, DegenCount(,%rax,4)
.LBB26_1:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB26_3
# %bb.2:                                #   in Loop: Header=BB26_1 Depth=1
	movabsq	$Alphabet, %rdi
	movsbl	-17(%rbp), %esi
	callq	strchr
	movabsq	$Alphabet, %rdi
	movabsq	$Degenerate, %rbx
	subq	%rdi, %rax
	imulq	$20, %rax, %rax
	addq	%rax, %rbx
	movq	-32(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	movabsq	$Alphabet, %rcx
	subq	%rcx, %rax
	movb	$1, (%rbx,%rax)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB26_1
.LBB26_3:
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end26:
	.size	set_degenerate, .Lfunc_end26-set_degenerate
	.cfi_endproc
                                        # -- End function
	.globl	SymbolIndex             # -- Begin function SymbolIndex
	.p2align	4, 0x90
	.type	SymbolIndex,@function
SymbolIndex:                            # @SymbolIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%dil, -1(%rbp)
	movsbl	-1(%rbp), %edi
	callq	toupper
	movabsq	$Alphabet, %rdi
	movsbl	%al, %esi
	callq	strchr
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB27_2
# %bb.1:
	movl	Alphabet_iupac, %eax
	subl	$1, %eax
	cltq
	jmp	.LBB27_3
.LBB27_2:
	movabsq	$Alphabet, %rcx
	movq	-16(%rbp), %rax
	subq	%rcx, %rax
.LBB27_3:
                                        # kill: def %eax killed %eax killed %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end27:
	.size	SymbolIndex, .Lfunc_end27-SymbolIndex
	.cfi_endproc
                                        # -- End function
	.globl	DigitizeSequence        # -- Begin function DigitizeSequence
	.p2align	4, 0x90
	.type	DigitizeSequence,@function
DigitizeSequence:                       # @DigitizeSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.24, %rax
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	-8(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$215, %esi
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	movl	Alphabet_iupac, %eax
	movq	-16(%rbp), %rcx
	movl	-8(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	movl	$1, -4(%rbp)
.LBB28_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jg	.LBB28_4
# %bb.2:                                #   in Loop: Header=BB28_1 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	SymbolIndex
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.3:                                #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_4:
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end28:
	.size	DigitizeSequence, .Lfunc_end28-DigitizeSequence
	.cfi_endproc
                                        # -- End function
	.globl	DedigitizeSequence      # -- Begin function DedigitizeSequence
	.p2align	4, 0x90
	.type	DedigitizeSequence,@function
DedigitizeSequence:                     # @DedigitizeSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.24, %rax
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$235, %esi
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB29_4
# %bb.2:                                #   in Loop: Header=BB29_1 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movb	Alphabet(,%rax), %al
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.3:                                #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end29:
	.size	DedigitizeSequence, .Lfunc_end29-DedigitizeSequence
	.cfi_endproc
                                        # -- End function
	.globl	DigitizeAlignment       # -- Begin function DigitizeAlignment
	.p2align	4, 0x90
	.type	DigitizeAlignment,@function
DigitizeAlignment:                      # @DigitizeAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.24, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rcx
	movslq	28(%rcx), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$264, %esi              # imm = 0x108
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB30_14
# %bb.2:                                #   in Loop: Header=BB30_1 Depth=1
	movabsq	$.L.str.24, %rdi
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$266, %esi              # imm = 0x10A
	callq	sre_malloc
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	Alphabet_iupac, %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movb	%al, (%rcx)
	movl	$0, -8(%rbp)
	movl	$1, -20(%rbp)
.LBB30_3:                               #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB30_12
# %bb.4:                                #   in Loop: Header=BB30_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB30_10
# %bb.5:                                #   in Loop: Header=BB30_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB30_10
# %bb.6:                                #   in Loop: Header=BB30_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB30_10
# %bb.7:                                #   in Loop: Header=BB30_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB30_10
# %bb.8:                                #   in Loop: Header=BB30_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB30_10
# %bb.9:                                #   in Loop: Header=BB30_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	SymbolIndex
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB30_10:                              #   in Loop: Header=BB30_3 Depth=2
	jmp	.LBB30_11
.LBB30_11:                              #   in Loop: Header=BB30_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_3
.LBB30_12:                              #   in Loop: Header=BB30_1 Depth=1
	movl	Alphabet_iupac, %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.13:                               #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_14:
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end30:
	.size	DigitizeAlignment, .Lfunc_end30-DigitizeAlignment
	.cfi_endproc
                                        # -- End function
	.globl	P7CountSymbol           # -- Begin function P7CountSymbol
	.p2align	4, 0x90
	.type	P7CountSymbol,@function
P7CountSymbol:                          # @P7CountSymbol
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movb	%sil, -1(%rbp)
	movss	%xmm0, -12(%rbp)
	movsbl	-1(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB31_2
# %bb.1:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movsbl	-1(%rbp), %ecx
	movslq	%ecx, %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB31_9
.LBB31_2:
	movl	$0, -8(%rbp)
.LBB31_3:                               # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB31_8
# %bb.4:                                #   in Loop: Header=BB31_3 Depth=1
	movabsq	$Degenerate, %rax
	movsbl	-1(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB31_6
# %bb.5:                                #   in Loop: Header=BB31_3 Depth=1
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movsbl	-1(%rbp), %eax
	cltq
	movl	DegenCount(,%rax,4), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
.LBB31_6:                               #   in Loop: Header=BB31_3 Depth=1
	jmp	.LBB31_7
.LBB31_7:                               #   in Loop: Header=BB31_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_8:
	jmp	.LBB31_9
.LBB31_9:
	popq	%rbp
	retq
.Lfunc_end31:
	.size	P7CountSymbol, .Lfunc_end31-P7CountSymbol
	.cfi_endproc
                                        # -- End function
	.globl	DefaultGeneticCode      # -- Begin function DefaultGeneticCode
	.p2align	4, 0x90
	.type	DefaultGeneticCode,@function
DefaultGeneticCode:                     # @DefaultGeneticCode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB32_7
# %bb.2:                                #   in Loop: Header=BB32_1 Depth=1
	movslq	-4(%rbp), %rax
	movq	stdcode1(,%rax,8), %rax
	movsbl	(%rax), %eax
	cmpl	$42, %eax
	jne	.LBB32_4
# %bb.3:                                #   in Loop: Header=BB32_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, (%rax,%rcx,4)
	jmp	.LBB32_5
.LBB32_4:                               #   in Loop: Header=BB32_1 Depth=1
	movabsq	$Alphabet, %rdi
	movslq	-4(%rbp), %rax
	movq	stdcode1(,%rax,8), %rax
	movsbl	(%rax), %esi
	callq	strchr
	movabsq	$Alphabet, %rcx
	subq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB32_5:                               #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_6
.LBB32_6:                               #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_7:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end32:
	.size	DefaultGeneticCode, .Lfunc_end32-DefaultGeneticCode
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function DefaultCodonBias
.LCPI33_0:
	.long	1056964608              # float 0.5
.LCPI33_1:
	.long	1042983595              # float 0.166666672
.LCPI33_2:
	.long	1065353216              # float 1
.LCPI33_3:
	.long	1048576000              # float 0.25
.LCPI33_4:
	.long	1051372203              # float 0.333333343
	.text
	.globl	DefaultCodonBias
	.p2align	4, 0x90
	.type	DefaultCodonBias,@function
DefaultCodonBias:                       # @DefaultCodonBias
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movss	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	.LCPI33_1(%rip), %xmm1  # xmm1 = mem[0],zero,zero,zero
	movss	.LCPI33_2(%rip), %xmm2  # xmm2 = mem[0],zero,zero,zero
	xorps	%xmm3, %xmm3
	movss	.LCPI33_3(%rip), %xmm4  # xmm4 = mem[0],zero,zero,zero
	movss	.LCPI33_4(%rip), %xmm5  # xmm5 = mem[0],zero,zero,zero
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movss	%xmm0, (%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 4(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 8(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 12(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 16(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 20(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 24(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 28(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 32(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 36(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 40(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 44(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm5, 48(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm5, 52(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm2, 56(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm5, 60(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 64(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 68(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 72(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 76(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 80(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 84(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 88(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 92(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 96(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 100(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 104(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 108(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 112(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 116(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 120(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 124(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 128(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 132(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 136(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 140(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 144(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 148(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 152(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 156(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 160(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 164(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 168(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 172(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 176(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 180(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 184(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 188(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 192(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 196(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 200(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 204(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 208(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 212(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 216(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 220(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 224(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 228(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm2, 232(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 236(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 240(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 244(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 248(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 252(%rax)
	popq	%rbp
	retq
.Lfunc_end33:
	.size	DefaultCodonBias, .Lfunc_end33-DefaultCodonBias
	.cfi_endproc
                                        # -- End function
	.globl	ReadClustal             # -- Begin function ReadClustal
	.p2align	4, 0x90
	.type	ReadClustal,@function
ReadClustal:                            # @ReadClustal
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB34_2
# %bb.1:
	movq	$0, -40(%rbp)
	jmp	.LBB34_25
.LBB34_2:
	jmp	.LBB34_3
.LBB34_3:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB34_8
# %bb.4:                                #   in Loop: Header=BB34_3 Depth=1
	movabsq	$.L.str.25, %rsi
	movq	-24(%rbp), %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB34_7
# %bb.5:                                #   in Loop: Header=BB34_3 Depth=1
	movabsq	$.L.str.1.26, %rsi
	movq	-24(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB34_7
# %bb.6:
	jmp	.LBB34_9
.LBB34_7:                               #   in Loop: Header=BB34_3 Depth=1
	jmp	.LBB34_3
.LBB34_8:                               # %.loopexit
	jmp	.LBB34_9
.LBB34_9:
	cmpq	$0, -24(%rbp)
	jne	.LBB34_11
# %bb.10:
	movq	$0, -40(%rbp)
	jmp	.LBB34_25
.LBB34_11:
	movl	$10, %edi
	xorl	%esi, %esi
	callq	MSAAlloc
	movq	%rax, -16(%rbp)
.LBB34_12:                              # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB34_24
# %bb.13:                               #   in Loop: Header=BB34_12 Depth=1
	leaq	-24(%rbp), %rdi
	movabsq	$.L.str.2.27, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB34_16
# %bb.14:                               #   in Loop: Header=BB34_12 Depth=1
	jmp	.LBB34_15
.LBB34_15:                              # %.backedge
                                        #   in Loop: Header=BB34_12 Depth=1
	jmp	.LBB34_12
.LBB34_16:                              #   in Loop: Header=BB34_12 Depth=1
	leaq	-24(%rbp), %rdi
	movabsq	$.L.str.2.27, %rsi
	leaq	-44(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB34_18
# %bb.17:                               #   in Loop: Header=BB34_12 Depth=1
	jmp	.LBB34_15
.LBB34_18:                              #   in Loop: Header=BB34_12 Depth=1
	leaq	-24(%rbp), %rdi
	movabsq	$.L.str.3.28, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movabsq	$.L.str.4.29, %rsi
	movq	%rax, -72(%rbp)
	movq	-64(%rbp), %rdi
	callq	strpbrk
	cmpq	$0, %rax
	je	.LBB34_21
# %bb.19:                               #   in Loop: Header=BB34_12 Depth=1
	movabsq	$.L.str.4.29, %rsi
	movq	-56(%rbp), %rdi
	callq	strpbrk
	cmpq	$0, %rax
	je	.LBB34_21
# %bb.20:                               #   in Loop: Header=BB34_12 Depth=1
	jmp	.LBB34_15
.LBB34_21:                              #   in Loop: Header=BB34_12 Depth=1
	cmpq	$0, -72(%rbp)
	je	.LBB34_23
# %bb.22:                               #   in Loop: Header=BB34_12 Depth=1
	movabsq	$.L.str.5.30, %rdi
	movq	-32(%rbp), %rax
	movl	16(%rax), %esi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movb	$0, %al
	callq	Die
.LBB34_23:                              #   in Loop: Header=BB34_12 Depth=1
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-16(%rbp), %rax
	movl	352(%rax), %edx
	addl	$1, %edx
	callq	MSAGetSeqidx
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 352(%rcx)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-16(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-56(%rbp), %rdx
	movl	-44(%rbp), %ecx
	callq	sre_strcat
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB34_15
.LBB34_24:
	movq	-16(%rbp), %rdi
	callq	MSAVerifyParse
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB34_25:
	movq	-40(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end34:
	.size	ReadClustal, .Lfunc_end34-ReadClustal
	.cfi_endproc
                                        # -- End function
	.globl	WriteClustal            # -- Begin function WriteClustal
	.p2align	4, 0x90
	.type	WriteClustal,@function
WriteClustal:                           # @WriteClustal
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$50, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB35_6
# %bb.2:                                #   in Loop: Header=BB35_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -36(%rbp)
	cmpl	-16(%rbp), %eax
	jle	.LBB35_4
# %bb.3:                                #   in Loop: Header=BB35_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB35_4:                               #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_5
.LBB35_5:                               #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_6:
	movabsq	$.L.str.6.31, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB35_7:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_9 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB35_14
# %bb.8:                                #   in Loop: Header=BB35_7 Depth=1
	movabsq	$.L.str.3.28, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB35_9:                               #   Parent Loop BB35_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB35_12
# %bb.10:                               #   in Loop: Header=BB35_9 Depth=2
	leaq	-112(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-8(%rbp), %rax
	addq	%rax, %rsi
	movslq	-12(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.7.32, %rsi
	leaq	-112(%rbp), %r8
	movslq	-12(%rbp), %rax
	movb	$0, -112(%rbp,%rax)
	movq	-32(%rbp), %rdi
	movl	-16(%rbp), %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movb	$0, %al
	callq	fprintf
# %bb.11:                               #   in Loop: Header=BB35_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_9
.LBB35_12:                              #   in Loop: Header=BB35_7 Depth=1
	jmp	.LBB35_13
.LBB35_13:                              #   in Loop: Header=BB35_7 Depth=1
	movl	-12(%rbp), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_7
.LBB35_14:
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end35:
	.size	WriteClustal, .Lfunc_end35-WriteClustal
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function Cluster
.LCPI36_0:
	.long	1232348144              # float 999999
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI36_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Cluster
	.p2align	4, 0x90
	.type	Cluster,@function
Cluster:                                # @Cluster
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movabsq	$.L.str.33, %rax
	movq	%rdi, -112(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movslq	-20(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$168, %esi
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB36_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_8
# %bb.2:                                #   in Loop: Header=BB36_1 Depth=1
	movabsq	$.L.str.33, %rdi
	movslq	-20(%rbp), %rdx
	shlq	$2, %rdx
	movl	$171, %esi
	callq	sre_malloc
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -16(%rbp)
.LBB36_3:                               #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_6
# %bb.4:                                #   in Loop: Header=BB36_3 Depth=2
	movq	-112(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB36_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_3
.LBB36_6:                               #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_7
.LBB36_7:                               #   in Loop: Header=BB36_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_1
.LBB36_8:
	movabsq	$.L.str.33, %rdi
	movslq	-20(%rbp), %rdx
	shlq	$2, %rdx
	movl	$176, %esi
	callq	sre_malloc
	movabsq	$.L.str.33, %rdi
	movq	%rax, -40(%rbp)
	movl	-20(%rbp), %eax
	subl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$177, %esi
	callq	sre_malloc
	movq	%rax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB36_9:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_12
# %bb.10:                               #   in Loop: Header=BB36_9 Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               #   in Loop: Header=BB36_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_9
.LBB36_12:
	movl	$0, -8(%rbp)
.LBB36_13:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_16
# %bb.14:                               #   in Loop: Header=BB36_13 Depth=1
	xorps	%xmm0, %xmm0
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.15:                               #   in Loop: Header=BB36_13 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_13
.LBB36_16:
	movl	-20(%rbp), %edi
	callq	AllocPhylo
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB36_18
# %bb.17:
	movabsq	$.L.str.1.34, %rdi
	movb	$0, %al
	callq	Die
.LBB36_18:
	movl	$0, -16(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_19:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_21 Depth 2
                                        #       Child Loop BB36_23 Depth 3
                                        #     Child Loop BB36_41 Depth 2
                                        #     Child Loop BB36_48 Depth 2
                                        #     Child Loop BB36_57 Depth 2
                                        #     Child Loop BB36_63 Depth 2
                                        #     Child Loop BB36_68 Depth 2
                                        #     Child Loop BB36_85 Depth 2
	cmpl	$2, -4(%rbp)
	jl	.LBB36_90
# %bb.20:                               #   in Loop: Header=BB36_19 Depth=1
	movss	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB36_21:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_23 Depth 3
	movl	-24(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB36_30
# %bb.22:                               #   in Loop: Header=BB36_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB36_23:                              #   Parent Loop BB36_19 Depth=1
                                        #     Parent Loop BB36_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB36_28
# %bb.24:                               #   in Loop: Header=BB36_23 Depth=3
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-64(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB36_26
# %bb.25:                               #   in Loop: Header=BB36_23 Depth=3
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -64(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB36_26:                              #   in Loop: Header=BB36_23 Depth=3
	jmp	.LBB36_27
.LBB36_27:                              #   in Loop: Header=BB36_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_23
.LBB36_28:                              #   in Loop: Header=BB36_21 Depth=2
	jmp	.LBB36_29
.LBB36_29:                              #   in Loop: Header=BB36_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_21
.LBB36_30:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB36_32
# %bb.31:                               #   in Loop: Header=BB36_19 Depth=1
	movl	-20(%rbp), %eax
	addl	-4(%rbp), %eax
	subl	$2, %eax
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	subl	-20(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
.LBB36_32:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB36_34
# %bb.33:                               #   in Loop: Header=BB36_19 Depth=1
	movl	-20(%rbp), %eax
	addl	-4(%rbp), %eax
	subl	$2, %eax
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	subl	-20(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
.LBB36_34:                              #   in Loop: Header=BB36_19 Depth=1
	movss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 12(%rax)
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 20(%rax)
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 16(%rax)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB36_36
# %bb.35:                               #   in Loop: Header=BB36_19 Depth=1
	movq	-80(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	16(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	subss	%xmm0, %xmm1
	movss	%xmm1, 16(%rax)
.LBB36_36:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB36_38
# %bb.37:                               #   in Loop: Header=BB36_19 Depth=1
	movq	-80(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	20(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	subss	%xmm0, %xmm1
	movss	%xmm1, 20(%rax)
.LBB36_38:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_40
# %bb.39:                               #   in Loop: Header=BB36_19 Depth=1
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 32(%rax)
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB36_45
.LBB36_40:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	addl	32(%rcx), %eax
	movl	%eax, 32(%rcx)
	movl	$0, -44(%rbp)
.LBB36_41:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_44
# %bb.42:                               #   in Loop: Header=BB36_41 Depth=2
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movq	24(%rax), %rax
	movslq	-44(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movq	24(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	orl	%eax, %esi
	movb	%sil, (%rcx,%rdx)
# %bb.43:                               #   in Loop: Header=BB36_41 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_41
.LBB36_44:                              #   in Loop: Header=BB36_19 Depth=1
	jmp	.LBB36_45
.LBB36_45:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_47
# %bb.46:                               #   in Loop: Header=BB36_19 Depth=1
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 32(%rax)
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB36_52
.LBB36_47:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	addl	32(%rcx), %eax
	movl	%eax, 32(%rcx)
	movl	$0, -44(%rbp)
.LBB36_48:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_51
# %bb.49:                               #   in Loop: Header=BB36_48 Depth=2
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movq	24(%rax), %rax
	movslq	-44(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movq	24(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	orl	%eax, %esi
	movb	%sil, (%rcx,%rdx)
# %bb.50:                               #   in Loop: Header=BB36_48 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_48
.LBB36_51:                              #   in Loop: Header=BB36_19 Depth=1
	jmp	.LBB36_52
.LBB36_52:                              #   in Loop: Header=BB36_19 Depth=1
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB36_54
# %bb.53:                               #   in Loop: Header=BB36_19 Depth=1
	movl	-16(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jne	.LBB36_55
.LBB36_54:                              #   in Loop: Header=BB36_19 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_55:                              #   in Loop: Header=BB36_19 Depth=1
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	je	.LBB36_61
# %bb.56:                               #   in Loop: Header=BB36_19 Depth=1
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-88(%rbp), %rax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -24(%rbp)
.LBB36_57:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB36_60
# %bb.58:                               #   in Loop: Header=BB36_57 Depth=2
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -68(%rbp)
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movss	-68(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.59:                               #   in Loop: Header=BB36_57 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_57
.LBB36_60:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB36_61:                              #   in Loop: Header=BB36_19 Depth=1
	movl	-16(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB36_67
# %bb.62:                               #   in Loop: Header=BB36_19 Depth=1
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-88(%rbp), %rax
	movq	-32(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -24(%rbp)
.LBB36_63:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB36_66
# %bb.64:                               #   in Loop: Header=BB36_63 Depth=2
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -68(%rbp)
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movss	-68(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.65:                               #   in Loop: Header=BB36_63 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_63
.LBB36_66:                              #   in Loop: Header=BB36_19 Depth=1
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB36_67:                              #   in Loop: Header=BB36_19 Depth=1
	movl	-4(%rbp), %eax
	subl	$2, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB36_68:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB36_84
# %bb.69:                               #   in Loop: Header=BB36_68 Depth=2
	movl	-92(%rbp), %eax
	testl	%eax, %eax
	je	.LBB36_72
	jmp	.LBB36_70
.LBB36_70:                              #   in Loop: Header=BB36_68 Depth=2
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB36_77
	jmp	.LBB36_71
.LBB36_71:                              #   in Loop: Header=BB36_68 Depth=2
	subl	$2, %eax
	je	.LBB36_73
	jmp	.LBB36_81
.LBB36_72:                              #   in Loop: Header=BB36_68 Depth=2
	movsd	.LCPI36_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB36_82
.LBB36_73:                              #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB36_75
# %bb.74:                               #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	jmp	.LBB36_76
.LBB36_75:                              #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
.LBB36_76:                              #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB36_82
.LBB36_77:                              #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	ucomiss	(%rax,%rcx,4), %xmm0
	jbe	.LBB36_79
# %bb.78:                               #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	jmp	.LBB36_80
.LBB36_79:                              #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
.LBB36_80:                              #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB36_82
.LBB36_81:                              #   in Loop: Header=BB36_68 Depth=2
	movsd	.LCPI36_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB36_82:                              #   in Loop: Header=BB36_68 Depth=2
	jmp	.LBB36_83
.LBB36_83:                              #   in Loop: Header=BB36_68 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_68
.LBB36_84:                              #   in Loop: Header=BB36_19 Depth=1
	movl	$0, -12(%rbp)
.LBB36_85:                              #   Parent Loop BB36_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB36_88
# %bb.86:                               #   in Loop: Header=BB36_85 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.87:                               #   in Loop: Header=BB36_85 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_85
.LBB36_88:                              #   in Loop: Header=BB36_19 Depth=1
	movl	-4(%rbp), %eax
	addl	-20(%rbp), %eax
	subl	$2, %eax
	movq	-40(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               #   in Loop: Header=BB36_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_19
.LBB36_90:
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	Free2DArray
	movq	-40(%rbp), %rdi
	callq	free
	movq	-80(%rbp), %rdi
	callq	free
	movq	-56(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end36:
	.size	Cluster, .Lfunc_end36-Cluster
	.cfi_endproc
                                        # -- End function
	.globl	AllocPhylo              # -- Begin function AllocPhylo
	.p2align	4, 0x90
	.type	AllocPhylo,@function
AllocPhylo:                             # @AllocPhylo
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	$1, %eax
	cltq
	imulq	$40, %rax, %rdi
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB37_2
# %bb.1:
	movq	$0, -32(%rbp)
	jmp	.LBB37_9
.LBB37_2:
	movl	$0, -4(%rbp)
.LBB37_3:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_8
# %bb.4:                                #   in Loop: Header=BB37_3 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 12(%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 20(%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 16(%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	$-1, 8(%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 32(%rax)
	movslq	-20(%rbp), %rdi
	movl	$1, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rax, 24(%rcx)
	cmpq	$0, %rax
	jne	.LBB37_6
# %bb.5:
	movq	$0, -32(%rbp)
	jmp	.LBB37_9
.LBB37_6:                               #   in Loop: Header=BB37_3 Depth=1
	jmp	.LBB37_7
.LBB37_7:                               #   in Loop: Header=BB37_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_3
.LBB37_8:
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB37_9:
	movq	-32(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end37:
	.size	AllocPhylo, .Lfunc_end37-AllocPhylo
	.cfi_endproc
                                        # -- End function
	.globl	FreePhylo               # -- Begin function FreePhylo
	.p2align	4, 0x90
	.type	FreePhylo,@function
FreePhylo:                              # @FreePhylo
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB38_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_4
# %bb.2:                                #   in Loop: Header=BB38_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movq	24(%rax), %rdi
	callq	free
# %bb.3:                                #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:
	movq	-16(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end38:
	.size	FreePhylo, .Lfunc_end38-FreePhylo
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function MakeDiffMx
.LCPI39_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	MakeDiffMx
	.p2align	4, 0x90
	.type	MakeDiffMx,@function
MakeDiffMx:                             # @MakeDiffMx
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-12(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	FMX2Alloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_8
# %bb.2:                                #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_3:                               #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_6
# %bb.4:                                #   in Loop: Header=BB39_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	PairwiseIdentity
	movsd	.LCPI39_0(%rip), %xmm1  # xmm1 = mem[0],zero
	cvtss2sd	%xmm0, %xmm0
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB39_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_3
.LBB39_6:                               #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_7
.LBB39_7:                               #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_8:
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end39:
	.size	MakeDiffMx, .Lfunc_end39-MakeDiffMx
	.cfi_endproc
                                        # -- End function
	.globl	MakeIdentityMx          # -- Begin function MakeIdentityMx
	.p2align	4, 0x90
	.type	MakeIdentityMx,@function
MakeIdentityMx:                         # @MakeIdentityMx
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-12(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	FMX2Alloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB40_8
# %bb.2:                                #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_3:                               #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB40_6
# %bb.4:                                #   in Loop: Header=BB40_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	PairwiseIdentity
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB40_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_3
.LBB40_6:                               #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_7
.LBB40_7:                               #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_8:
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end40:
	.size	MakeIdentityMx, .Lfunc_end40-MakeIdentityMx
	.cfi_endproc
                                        # -- End function
	.globl	PrintNewHampshireTree   # -- Begin function PrintNewHampshireTree
	.p2align	4, 0x90
	.type	PrintNewHampshireTree,@function
PrintNewHampshireTree:                  # @PrintNewHampshireTree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.33, %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -8(%rbp)
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$464, %esi              # imm = 0x1D0
	callq	sre_malloc
	movq	%rax, -48(%rbp)
	callq	InitIntStack
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	PushIntStack
	movl	$0, -12(%rbp)
.LBB41_1:                               # =>This Inner Loop Header: Depth=1
	leaq	-4(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	PopIntStack
	cmpl	$0, %eax
	je	.LBB41_16
# %bb.2:                                #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB41_6
# %bb.3:                                #   in Loop: Header=BB41_1 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB41_5
# %bb.4:                                #   in Loop: Header=BB41_1 Depth=1
	movabsq	$.L.str.2.35, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
.LBB41_5:                               #   in Loop: Header=BB41_1 Depth=1
	movabsq	$.L.str.3.36, %rsi
	movq	-40(%rbp), %rdi
	movq	-56(%rbp), %rax
	movq	40(%rax), %rdx
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdx
	addq	$4, %rdx
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movl	$1, -12(%rbp)
	jmp	.LBB41_15
.LBB41_6:                               #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_10
# %bb.7:                                #   in Loop: Header=BB41_1 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB41_9
# %bb.8:                                #   in Loop: Header=BB41_1 Depth=1
	movabsq	$.L.str.4.37, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
.LBB41_9:                               #   in Loop: Header=BB41_1 Depth=1
	movabsq	$.L.str.5.38, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	PushIntStack
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %esi
	callq	PushIntStack
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %esi
	callq	PushIntStack
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	-8(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	8(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	-8(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	4(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
	jmp	.LBB41_14
.LBB41_10:                              #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB41_12
# %bb.11:                               #   in Loop: Header=BB41_1 Depth=1
	movabsq	$.L.str.6.39, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB41_13
.LBB41_12:                              #   in Loop: Header=BB41_1 Depth=1
	movabsq	$.L.str.7.40, %rsi
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB41_13:                              #   in Loop: Header=BB41_1 Depth=1
	movl	$1, -12(%rbp)
.LBB41_14:                              #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_15
.LBB41_15:                              #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_1
.LBB41_16:
	movq	-24(%rbp), %rdi
	callq	FreeIntStack
	movq	-48(%rbp), %rdi
	callq	free
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end41:
	.size	PrintNewHampshireTree, .Lfunc_end41-PrintNewHampshireTree
	.cfi_endproc
                                        # -- End function
	.globl	PrintPhylo              # -- Begin function PrintPhylo
	.p2align	4, 0x90
	.type	PrintPhylo,@function
PrintPhylo:                             # @PrintPhylo
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -16(%rbp)
	movl	%ecx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB42_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_16
# %bb.2:                                #   in Loop: Header=BB42_1 Depth=1
	movabsq	$.L.str.8.41, %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %edx
	movl	-4(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.9.42, %rsi
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %edx
	subl	-8(%rbp), %edx
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %ecx
	movb	$0, %al
	callq	fprintf
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB42_4
# %bb.3:                                #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %edx
	subl	-8(%rbp), %edx
	jmp	.LBB42_5
.LBB42_4:                               #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %edx
.LBB42_5:                               #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB42_7
# %bb.6:                                #   in Loop: Header=BB42_1 Depth=1
	movq	-32(%rbp), %rax
	movq	40(%rax), %rcx
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rsi
	imulq	$40, %rsi, %rsi
	addq	%rsi, %rax
	movslq	4(%rax), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rcx
	addq	$4, %rcx
	jmp	.LBB42_8
.LBB42_7:                               #   in Loop: Header=BB42_1 Depth=1
	movabsq	$.L.str.11.43, %rcx
	jmp	.LBB42_8
.LBB42_8:                               #   in Loop: Header=BB42_1 Depth=1
	movabsq	$.L.str.10.44, %rsi
	movq	-16(%rbp), %r8
	movslq	-4(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %r8
	movss	16(%r8), %xmm0          # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB42_10
# %bb.9:                                #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %edx
	subl	-8(%rbp), %edx
	jmp	.LBB42_11
.LBB42_10:                              #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %edx
.LBB42_11:                              #   in Loop: Header=BB42_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB42_13
# %bb.12:                               #   in Loop: Header=BB42_1 Depth=1
	movq	-32(%rbp), %rax
	movq	40(%rax), %rcx
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rsi
	imulq	$40, %rsi, %rsi
	addq	%rsi, %rax
	movslq	8(%rax), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rcx
	addq	$4, %rcx
	jmp	.LBB42_14
.LBB42_13:                              #   in Loop: Header=BB42_1 Depth=1
	movabsq	$.L.str.11.43, %rcx
	jmp	.LBB42_14
.LBB42_14:                              #   in Loop: Header=BB42_1 Depth=1
	movabsq	$.L.str.12.45, %rsi
	movq	-16(%rbp), %r8
	movslq	-4(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %r8
	movss	20(%r8), %xmm0          # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.13.46, %rsi
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.14.47, %rsi
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %edx
	movb	$0, %al
	callq	fprintf
# %bb.15:                               #   in Loop: Header=BB42_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_1
.LBB42_16:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end42:
	.size	PrintPhylo, .Lfunc_end42-PrintPhylo
	.cfi_endproc
                                        # -- End function
	.globl	CreatePlan7Matrix       # -- Begin function CreatePlan7Matrix
	.p2align	4, 0x90
	.type	CreatePlan7Matrix,@function
CreatePlan7Matrix:                      # @CreatePlan7Matrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.48, %rax
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -24(%rbp)
	movq	%rax, %rdi
	movl	$66, %esi
	movl	$80, %edx
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -8(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$3, %rdx
	movl	$67, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$3, %rdx
	movl	$68, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$3, %rdx
	movl	$69, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$3, %rdx
	movl	$70, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	imull	$5, %eax, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$71, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$72, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$73, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$74, %esi
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$1, -12(%rbp)
.LBB43_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB43_4
# %bb.2:                                #   in Loop: Header=BB43_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	imull	$5, -12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB43_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_1
.LBB43_4:
	cmpl	$0, -24(%rbp)
	jle	.LBB43_7
# %bb.5:
	cmpl	$0, -28(%rbp)
	jle	.LBB43_7
# %bb.6:
	movabsq	$.L.str.1.49, %rdi
	movb	$0, %al
	callq	Die
.LBB43_7:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 76(%rcx)
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end43:
	.size	CreatePlan7Matrix, .Lfunc_end43-CreatePlan7Matrix
	.cfi_endproc
                                        # -- End function
	.globl	ResizePlan7Matrix       # -- Begin function ResizePlan7Matrix
	.p2align	4, 0x90
	.type	ResizePlan7Matrix,@function
ResizePlan7Matrix:                      # @ResizePlan7Matrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	64(%rcx), %eax
	jg	.LBB44_3
# %bb.1:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jg	.LBB44_3
# %bb.2:
	jmp	.LBB44_12
.LBB44_3:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	64(%rcx), %eax
	jle	.LBB44_5
# %bb.4:
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rax
	movl	72(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$133, %esi
	callq	sre_realloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$134, %esi
	callq	sre_realloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$135, %esi
	callq	sre_realloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$136, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
.LBB44_5:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jle	.LBB44_7
# %bb.6:
	movq	-8(%rbp), %rax
	movl	76(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 68(%rcx)
.LBB44_7:
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	imull	$5, %eax, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$144, %esi
	callq	sre_realloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$145, %esi
	callq	sre_realloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$146, %esi
	callq	sre_realloc
	movabsq	$.L.str.48, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdx
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$147, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$1, -16(%rbp)
.LBB44_8:                               # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB44_11
# %bb.9:                                #   in Loop: Header=BB44_8 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	imull	$5, -16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               #   in Loop: Header=BB44_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_8
.LBB44_11:
	jmp	.LBB44_12
.LBB44_12:
	cmpq	$0, -48(%rbp)
	je	.LBB44_14
# %bb.13:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB44_14:
	cmpq	$0, -40(%rbp)
	je	.LBB44_16
# %bb.15:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB44_16:
	cmpq	$0, -32(%rbp)
	je	.LBB44_18
# %bb.17:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB44_18:
	cmpq	$0, 16(%rbp)
	je	.LBB44_20
# %bb.19:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB44_20:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end44:
	.size	ResizePlan7Matrix, .Lfunc_end44-ResizePlan7Matrix
	.cfi_endproc
                                        # -- End function
	.globl	AllocPlan7Matrix        # -- Begin function AllocPlan7Matrix
	.p2align	4, 0x90
	.type	AllocPlan7Matrix,@function
AllocPlan7Matrix:                       # @AllocPlan7Matrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -24(%rbp)
	movl	-16(%rbp), %edi
	subl	$1, %edi
	movl	-12(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	CreatePlan7Matrix
	movq	%rax, -8(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB45_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB45_2:
	cmpq	$0, -40(%rbp)
	je	.LBB45_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB45_4:
	cmpq	$0, -32(%rbp)
	je	.LBB45_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB45_6:
	cmpq	$0, -24(%rbp)
	je	.LBB45_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB45_8:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end45:
	.size	AllocPlan7Matrix, .Lfunc_end45-AllocPlan7Matrix
	.cfi_endproc
                                        # -- End function
	.globl	FreePlan7Matrix         # -- Begin function FreePlan7Matrix
	.p2align	4, 0x90
	.type	FreePlan7Matrix,@function
FreePlan7Matrix:                        # @FreePlan7Matrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end46:
	.size	FreePlan7Matrix, .Lfunc_end46-FreePlan7Matrix
	.cfi_endproc
                                        # -- End function
	.globl	AllocShadowMatrix       # -- Begin function AllocShadowMatrix
	.p2align	4, 0x90
	.type	AllocShadowMatrix,@function
AllocShadowMatrix:                      # @AllocShadowMatrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.48, %rax
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -32(%rbp)
	movq	%rax, %rdi
	movl	$244, %esi
	movl	$40, %edx
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -16(%rbp)
	movslq	-20(%rbp), %rdx
	shlq	$3, %rdx
	movl	$245, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movslq	-20(%rbp), %rdx
	shlq	$3, %rdx
	movl	$246, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movslq	-20(%rbp), %rdx
	shlq	$3, %rdx
	movl	$247, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movslq	-20(%rbp), %rdx
	shlq	$3, %rdx
	movl	$248, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movslq	-20(%rbp), %rdx
	shlq	$2, %rdx
	movl	$249, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	imull	$5, -20(%rbp), %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$250, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$251, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$252, %esi
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$253, %esi
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB47_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_4
# %bb.2:                                #   in Loop: Header=BB47_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	imull	$5, -4(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_4:
	cmpq	$0, -56(%rbp)
	je	.LBB47_6
# %bb.5:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB47_6:
	cmpq	$0, -48(%rbp)
	je	.LBB47_8
# %bb.7:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB47_8:
	cmpq	$0, -40(%rbp)
	je	.LBB47_10
# %bb.9:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB47_10:
	cmpq	$0, -32(%rbp)
	je	.LBB47_12
# %bb.11:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB47_12:
	movq	-16(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end47:
	.size	AllocShadowMatrix, .Lfunc_end47-AllocShadowMatrix
	.cfi_endproc
                                        # -- End function
	.globl	FreeShadowMatrix        # -- Begin function FreeShadowMatrix
	.p2align	4, 0x90
	.type	FreeShadowMatrix,@function
FreeShadowMatrix:                       # @FreeShadowMatrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end48:
	.size	FreeShadowMatrix, .Lfunc_end48-FreeShadowMatrix
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function P7ViterbiSize
.LCPI49_0:
	.quad	4697254411347427328     # double 1048576
.LCPI49_1:
	.quad	4616189618054758400     # double 4
.LCPI49_2:
	.quad	4617315517961601024     # double 5
.LCPI49_3:
	.quad	4620693217682128896     # double 8
.LCPI49_4:
	.quad	4613937818241073152     # double 3
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI49_5:
	.long	1117782016              # float 80
	.text
	.globl	P7ViterbiSize
	.p2align	4, 0x90
	.type	P7ViterbiSize,@function
P7ViterbiSize:                          # @P7ViterbiSize
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movsd	.LCPI49_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movsd	.LCPI49_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movsd	.LCPI49_3(%rip), %xmm3  # xmm3 = mem[0],zero
	movsd	.LCPI49_4(%rip), %xmm4  # xmm4 = mem[0],zero
	movss	.LCPI49_5(%rip), %xmm5  # xmm5 = mem[0],zero,zero,zero
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movss	%xmm5, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cvtsi2ssl	%eax, %xmm5
	cvtss2sd	%xmm5, %xmm5
	mulsd	%xmm5, %xmm4
	movl	-12(%rbp), %eax
	addl	$2, %eax
	cvtsi2ssl	%eax, %xmm5
	cvtss2sd	%xmm5, %xmm5
	mulsd	%xmm5, %xmm4
	mulsd	%xmm2, %xmm4
	movss	-4(%rbp), %xmm5         # xmm5 = mem[0],zero,zero,zero
	cvtss2sd	%xmm5, %xmm5
	addsd	%xmm4, %xmm5
	cvtsd2ss	%xmm5, %xmm4
	movss	%xmm4, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cvtsi2ssl	%eax, %xmm4
	cvtss2sd	%xmm4, %xmm4
	movaps	%xmm2, %xmm5
	mulsd	%xmm4, %xmm5
	mulsd	%xmm3, %xmm5
	movss	-4(%rbp), %xmm3         # xmm3 = mem[0],zero,zero,zero
	cvtss2sd	%xmm3, %xmm3
	addsd	%xmm5, %xmm3
	cvtsd2ss	%xmm3, %xmm3
	movss	%xmm3, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cvtsi2ssl	%eax, %xmm3
	cvtss2sd	%xmm3, %xmm3
	mulsd	%xmm3, %xmm1
	mulsd	%xmm2, %xmm1
	movss	-4(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movss	%xmm1, -4(%rbp)
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -4(%rbp)
	cvttss2si	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end49:
	.size	P7ViterbiSize, .Lfunc_end49-P7ViterbiSize
	.cfi_endproc
                                        # -- End function
	.globl	P7SmallViterbiSize      # -- Begin function P7SmallViterbiSize
	.p2align	4, 0x90
	.type	P7SmallViterbiSize,@function
P7SmallViterbiSize:                     # @P7SmallViterbiSize
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$1000000, %ecx          # imm = 0xF4240
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	imull	$12, %eax, %eax
	cltq
	shlq	$2, %rax
	addq	$160, %rax
	addq	$128, %rax
	addq	$80, %rax
	movl	-8(%rbp), %edx
	addl	$1, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rax
	xorl	%edx, %edx
	divq	%rcx
                                        # kill: def %eax killed %eax killed %rax
	popq	%rbp
	retq
.Lfunc_end50:
	.size	P7SmallViterbiSize, .Lfunc_end50-P7SmallViterbiSize
	.cfi_endproc
                                        # -- End function
	.globl	P7WeeViterbiSize        # -- Begin function P7WeeViterbiSize
	.p2align	4, 0x90
	.type	P7WeeViterbiSize,@function
P7WeeViterbiSize:                       # @P7WeeViterbiSize
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$1000000, %ecx          # imm = 0xF4240
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-8(%rbp), %eax
	addl	$2, %eax
	imull	$12, %eax, %eax
	cltq
	shlq	$2, %rax
	addq	$160, %rax
	addq	$128, %rax
	addq	$80, %rax
	movl	-4(%rbp), %edx
	addl	$2, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rax
	movl	-4(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rax
	movl	-4(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$0, %rdx
	addq	%rdx, %rax
	xorl	%edx, %edx
	divq	%rcx
                                        # kill: def %eax killed %eax killed %rax
	popq	%rbp
	retq
.Lfunc_end51:
	.size	P7WeeViterbiSize, .Lfunc_end51-P7WeeViterbiSize
	.cfi_endproc
                                        # -- End function
	.globl	P7Forward               # -- Begin function P7Forward
	.p2align	4, 0x90
	.type	P7Forward,@function
P7Forward:                              # @P7Forward
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	leaq	-32(%rbp), %rax
	leaq	-40(%rbp), %rbx
	leaq	-48(%rbp), %r8
	leaq	-64(%rbp), %r9
	movq	%rdi, -72(%rbp)
	movl	%esi, -52(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -96(%rbp)
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %esi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	AllocPlan7Matrix
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	336(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$0, -16(%rbp)
.LBB52_1:                               # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB52_4
# %bb.2:                                #   in Loop: Header=BB52_1 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.3:                                #   in Loop: Header=BB52_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_1
.LBB52_4:
	movl	$1, -12(%rbp)
.LBB52_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_7 Depth 2
                                        #     Child Loop BB52_11 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jg	.LBB52_16
# %bb.6:                                #   in Loop: Header=BB52_5 Depth=1
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movl	$1, -16(%rbp)
.LBB52_7:                               #   Parent Loop BB52_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB52_10
# %bb.8:                                #   in Loop: Header=BB52_7 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%eax, %ebx
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-64(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%ebx, %edi
	movl	%eax, %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	320(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	16(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	328(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
# %bb.9:                                #   in Loop: Header=BB52_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_7
.LBB52_10:                              #   in Loop: Header=BB52_5 Depth=1
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%eax, %ebx
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-64(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%ebx, %edi
	movl	%eax, %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	320(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	340(%rcx), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$1, -16(%rbp)
.LBB52_11:                              #   Parent Loop BB52_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB52_14
# %bb.12:                               #   in Loop: Header=BB52_11 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
# %bb.13:                               #   in Loop: Header=BB52_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_11
.LBB52_14:                              #   in Loop: Header=BB52_5 Depth=1
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %edi
	movq	-24(%rbp), %rax
	addl	364(%rax), %edi
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %esi
	movq	-24(%rbp), %rax
	addl	348(%rax), %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %edi
	movq	-24(%rbp), %rax
	addl	336(%rax), %edi
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %esi
	movq	-24(%rbp), %rax
	addl	360(%rax), %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %edi
	movq	-24(%rbp), %rax
	addl	356(%rax), %edi
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %esi
	movq	-24(%rbp), %rax
	addl	344(%rax), %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
# %bb.15:                               #   in Loop: Header=BB52_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_5
.LBB52_16:
	movq	-32(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	352(%rcx), %eax
	movl	%eax, -76(%rbp)
	cmpq	$0, -96(%rbp)
	je	.LBB52_18
# %bb.17:
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB52_19
.LBB52_18:
	movq	-88(%rbp), %rdi
	callq	FreePlan7Matrix
.LBB52_19:
	movl	-76(%rbp), %edi
	callq	Scorify
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end52:
	.size	P7Forward, .Lfunc_end52-P7Forward
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function P7ViterbiTrace
.LCPI53_0:
	.quad	4652007308841189376     # double 1000
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI53_1:
	.long	1065353216              # float 1
	.text
	.globl	P7ViterbiTrace
	.p2align	4, 0x90
	.type	P7ViterbiTrace,@function
P7ViterbiTrace:                         # @P7ViterbiTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	leaq	-24(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -56(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%r8, -72(%rbp)
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	$6, %ecx
	movl	%ecx, -28(%rbp)
	movl	-28(%rbp), %edi
	movq	%rax, %rsi
	callq	P7AllocTrace
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movb	$9, (%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movb	$8, 1(%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, 4(%rax)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, 4(%rax)
	movl	$2, -4(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_69 Depth 2
                                        #     Child Loop BB53_73 Depth 2
                                        #     Child Loop BB53_9 Depth 2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$4, %eax
	je	.LBB53_110
# %bb.2:                                #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB53_106
# %bb.3:                                #   in Loop: Header=BB53_1 Depth=1
	movq	.LJTI53_0(,%rax,8), %rax
	jmpq	*%rax
.LBB53_4:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	320(%rcx), %rcx
	movq	-112(%rbp), %rdx
	movl	-8(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movsbl	(%rdx,%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movl	%eax, -52(%rbp)
	cmpl	$-987654321, -52(%rbp)  # imm = 0xC521974F
	jg	.LBB53_6
# %bb.5:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_6:                               #   in Loop: Header=BB53_1 Depth=1
	movl	-52(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	(%rcx), %ecx
	movq	-40(%rbp), %rdx
	movq	368(%rdx), %rdx
	movl	-12(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_15
# %bb.7:                                #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	cvtsi2sdl	%eax, %xmm1
	addsd	%xmm0, %xmm1
	movq	-40(%rbp), %rax
	movq	368(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB53_14
# %bb.8:                                #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_9
.LBB53_9:                               #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -12(%rbp)
	jle	.LBB53_13
# %bb.10:                               #   in Loop: Header=BB53_9 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB53_12
# %bb.11:                               #   in Loop: Header=BB53_9 Depth=2
	movl	-56(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	P7ReallocTrace
.LBB53_12:                              #   in Loop: Header=BB53_9 Depth=2
	jmp	.LBB53_9
.LBB53_13:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_14
.LBB53_14:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$6, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_25
.LBB53_15:                              #   in Loop: Header=BB53_1 Depth=1
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_17
# %bb.16:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_24
.LBB53_17:                              #   in Loop: Header=BB53_1 Depth=1
	movl	-52(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	24(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_19
# %bb.18:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_23
.LBB53_19:                              #   in Loop: Header=BB53_1 Depth=1
	movl	-52(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	40(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_21
# %bb.20:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_22
.LBB53_21:                              #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_22:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_23
.LBB53_23:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_24
.LBB53_24:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_25
.LBB53_25:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_26
.LBB53_26:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_27:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jg	.LBB53_29
# %bb.28:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_29:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	16(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_31
# %bb.30:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_35
.LBB53_31:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	48(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_33
# %bb.32:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_34
.LBB53_33:                              #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_34:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_35
.LBB53_35:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_36
.LBB53_36:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_37:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-104(%rbp), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	328(%rcx), %rcx
	movq	-112(%rbp), %rdx
	movl	-8(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movsbl	(%rdx,%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movl	%eax, -52(%rbp)
	cmpl	$-987654321, -52(%rbp)  # imm = 0xC521974F
	jg	.LBB53_39
# %bb.38:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_39:                              #   in Loop: Header=BB53_1 Depth=1
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_41
# %bb.40:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_45
.LBB53_41:                              #   in Loop: Header=BB53_1 Depth=1
	movl	-52(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	32(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_43
# %bb.42:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_44
.LBB53_43:                              #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_44:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_45
.LBB53_45:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_46
.LBB53_46:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_47:                              #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -8(%rbp)
	jne	.LBB53_50
# %bb.48:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB53_50
# %bb.49:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$4, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_55
.LBB53_50:                              #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -8(%rbp)
	jle	.LBB53_53
# %bb.51:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	16(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	340(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_53
# %bb.52:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_54
.LBB53_53:                              #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_54:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_55
.LBB53_55:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_56:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, (%rax)     # imm = 0xC521974F
	jg	.LBB53_58
# %bb.57:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_58:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	16(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	336(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_60
# %bb.59:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_64
.LBB53_60:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	12(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	360(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_62
# %bb.61:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$10, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_63
.LBB53_62:                              #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_63:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_64
.LBB53_64:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_65
.LBB53_65:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_66:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 4(%rax)    # imm = 0xC521974F
	jg	.LBB53_68
# %bb.67:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_68:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_69:                              #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$1, -12(%rbp)
	jl	.LBB53_82
# %bb.70:                               #   in Loop: Header=BB53_69 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movq	376(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_80
# %bb.71:                               #   in Loop: Header=BB53_1 Depth=1
	movss	.LCPI53_1(%rip), %xmm1  # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	cvtsi2sdl	%eax, %xmm1
	addsd	%xmm0, %xmm1
	movq	-40(%rbp), %rax
	movq	376(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB53_79
# %bb.72:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB53_73:                              #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-60(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jle	.LBB53_78
# %bb.74:                               #   in Loop: Header=BB53_73 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-60(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB53_76
# %bb.75:                               #   in Loop: Header=BB53_73 Depth=2
	movl	-56(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	P7ReallocTrace
.LBB53_76:                              #   in Loop: Header=BB53_73 Depth=2
	jmp	.LBB53_77
.LBB53_77:                              #   in Loop: Header=BB53_73 Depth=2
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB53_73
.LBB53_78:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_79
.LBB53_79:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_83
.LBB53_80:                              #   in Loop: Header=BB53_69 Depth=2
	jmp	.LBB53_81
.LBB53_81:                              #   in Loop: Header=BB53_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_69
.LBB53_82:                              # %.loopexit
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_83
.LBB53_83:                              #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -12(%rbp)
	jge	.LBB53_85
# %bb.84:                               #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_85:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_86:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 8(%rax)    # imm = 0xC521974F
	jg	.LBB53_88
# %bb.87:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_88:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	356(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_90
# %bb.89:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_94
.LBB53_90:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	344(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_92
# %bb.91:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_93
.LBB53_92:                              #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.3.51, %rdi
	movb	$0, %al
	callq	Die
.LBB53_93:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_94
.LBB53_94:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_95
.LBB53_95:                              #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_96:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 12(%rax)   # imm = 0xC521974F
	jg	.LBB53_98
# %bb.97:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB53_111
.LBB53_98:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	12(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	364(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_100
# %bb.99:                               #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$10, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB53_104
.LBB53_100:                             #   in Loop: Header=BB53_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	movq	-40(%rbp), %rdx
	addl	348(%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_102
# %bb.101:                              #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_103
.LBB53_102:                             #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.3.51, %rdi
	movb	$0, %al
	callq	Die
.LBB53_103:                             #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_104
.LBB53_104:                             #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_105
.LBB53_105:                             #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_107
.LBB53_106:                             #   in Loop: Header=BB53_1 Depth=1
	movabsq	$.L.str.2.50, %rdi
	movb	$0, %al
	callq	Die
.LBB53_107:                             #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB53_109
# %bb.108:                              #   in Loop: Header=BB53_1 Depth=1
	movl	-56(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	P7ReallocTrace
.LBB53_109:                             #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_1
.LBB53_110:
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rdi
	callq	P7ReverseTrace
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB53_111:
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end53:
	.size	P7ViterbiTrace, .Lfunc_end53-P7ViterbiTrace
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI53_0:
	.quad	.LBB53_4
	.quad	.LBB53_27
	.quad	.LBB53_37
	.quad	.LBB53_106
	.quad	.LBB53_47
	.quad	.LBB53_56
	.quad	.LBB53_66
	.quad	.LBB53_86
	.quad	.LBB53_106
	.quad	.LBB53_96
                                        # -- End function
	.text
	.globl	P7SmallViterbi          # -- Begin function P7SmallViterbi
	.p2align	4, 0x90
	.type	P7SmallViterbi,@function
P7SmallViterbi:                         # @P7SmallViterbi
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	leaq	-40(%rbp), %rax
	movq	%rdi, -96(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%r8, -104(%rbp)
	movq	-96(%rbp), %rdi
	movl	-68(%rbp), %esi
	movq	-88(%rbp), %rdx
	movq	%rax, %rcx
	callq	P7ParsingViterbi
	movss	%xmm0, -72(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB54_2
# %bb.1:
	cmpq	$0, -104(%rbp)
	jne	.LBB54_3
.LBB54_2:
	movq	-40(%rbp), %rdi
	callq	P7FreeTrace
	movss	-72(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -76(%rbp)
	jmp	.LBB54_40
.LBB54_3:
	movabsq	$.L.str.48, %rdi
	movl	$2, %ecx
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cltd
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-28(%rbp), %rdx
	shlq	$3, %rdx
	movl	$930, %esi              # imm = 0x3A2
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB54_4:                               # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_10
# %bb.5:                                #   in Loop: Header=BB54_4 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-8(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	movq	-88(%rbp), %rax
	movl	136(%rax), %esi
	callq	P7ViterbiSize
	cmpl	$1000, %eax             # imm = 0x3E8
	jle	.LBB54_7
# %bb.6:                                #   in Loop: Header=BB54_4 Depth=1
	movq	-96(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	%rax, %rdi
	movl	-60(%rbp), %esi
	movq	-88(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rcx
	callq	P7WeeViterbi
	jmp	.LBB54_8
.LBB54_7:                               #   in Loop: Header=BB54_4 Depth=1
	movq	-96(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	%rax, %rdi
	movl	-60(%rbp), %esi
	movq	-88(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	-56(%rbp), %r8
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %r8
	callq	P7Viterbi
.LBB54_8:                               #   in Loop: Header=BB54_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	subl	$4, %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.9:                                #   in Loop: Header=BB54_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_4
.LBB54_10:
	leaq	-24(%rbp), %rsi
	movl	-28(%rbp), %eax
	subl	$1, %eax
	addl	$4, %eax
	movl	-68(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	P7AllocTrace
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movb	$4, (%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movb	$5, 1(%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, 4(%rax)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, 4(%rax)
	movl	$2, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB54_11:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jg	.LBB54_14
# %bb.12:                               #   in Loop: Header=BB54_11 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.13:                               #   in Loop: Header=BB54_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_11
.LBB54_14:
	movl	$0, -8(%rbp)
.LBB54_15:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_17 Depth 2
                                        #     Child Loop BB54_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_31
# %bb.16:                               #   in Loop: Header=BB54_15 Depth=1
	movl	$2, -32(%rbp)
.LBB54_17:                              #   Parent Loop BB54_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	(%rcx), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_23
# %bb.18:                               #   in Loop: Header=BB54_17 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-32(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB54_20
# %bb.19:                               #   in Loop: Header=BB54_17 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-8(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB54_21
.LBB54_20:                              #   in Loop: Header=BB54_17 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB54_21:                              #   in Loop: Header=BB54_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.22:                               #   in Loop: Header=BB54_17 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB54_17
.LBB54_23:                              #   in Loop: Header=BB54_15 Depth=1
	movl	$10, %eax
	movl	$8, %ecx
	movl	-8(%rbp), %edx
	movl	-28(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB54_29
# %bb.24:                               #   in Loop: Header=BB54_15 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB54_25:                              #   Parent Loop BB54_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-8(%rbp), %edx
	addl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB54_28
# %bb.26:                               #   in Loop: Header=BB54_25 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$10, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.27:                               #   in Loop: Header=BB54_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_25
.LBB54_28:                              #   in Loop: Header=BB54_15 Depth=1
	jmp	.LBB54_29
.LBB54_29:                              #   in Loop: Header=BB54_15 Depth=1
	jmp	.LBB54_30
.LBB54_30:                              #   in Loop: Header=BB54_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_15
.LBB54_31:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB54_32:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB54_35
# %bb.33:                               #   in Loop: Header=BB54_32 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.34:                               #   in Loop: Header=BB54_32 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_32
.LBB54_35:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$9, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	$0, -8(%rbp)
.LBB54_36:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_39
# %bb.37:                               #   in Loop: Header=BB54_36 Depth=1
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	P7FreeTrace
# %bb.38:                               #   in Loop: Header=BB54_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_36
.LBB54_39:
	movq	-56(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	P7FreeTrace
	movq	-24(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	movss	-72(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -76(%rbp)
.LBB54_40:
	movss	-76(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end54:
	.size	P7SmallViterbi, .Lfunc_end54-P7SmallViterbi
	.cfi_endproc
                                        # -- End function
	.globl	P7ParsingViterbi        # -- Begin function P7ParsingViterbi
	.p2align	4, 0x90
	.type	P7ParsingViterbi,@function
P7ParsingViterbi:                       # @P7ParsingViterbi
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	leaq	-32(%rbp), %rax
	leaq	-56(%rbp), %r10
	leaq	-72(%rbp), %r8
	leaq	-104(%rbp), %r9
	movq	%rdi, -144(%rbp)
	movl	%esi, -80(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -168(%rbp)
	movq	-48(%rbp), %rcx
	movl	136(%rcx), %esi
	movl	$2, %edi
	movq	%rax, %rdx
	movq	%r10, %rcx
	callq	AllocPlan7Matrix
	leaq	-96(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	leaq	-128(%rbp), %r8
	leaq	-136(%rbp), %r9
	movq	%rax, -160(%rbp)
	movq	-48(%rbp), %rax
	movl	136(%rax), %esi
	movl	$2, %edi
	callq	AllocPlan7Matrix
	movabsq	$.L.str.48, %rdi
	movq	%rax, -152(%rbp)
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$1083, %esi             # imm = 0x43B
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -112(%rbp)
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$1084, %esi             # imm = 0x43C
	callq	sre_malloc
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 16(%rax)
	movq	-48(%rbp), %rax
	movl	336(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-120(%rbp), %rax
	movl	$-1, (%rax)
	movl	$0, -4(%rbp)
.LBB55_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB55_4
# %bb.2:                                #   in Loop: Header=BB55_1 Depth=1
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.3:                                #   in Loop: Header=BB55_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_1
.LBB55_4:
	movl	$1, -16(%rbp)
.LBB55_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_7 Depth 2
                                        #     Child Loop BB55_37 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jg	.LBB55_56
# %bb.6:                                #   in Loop: Header=BB55_5 Depth=1
	movl	$2, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -8(%rbp)
	cmpl	$0, -8(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -20(%rbp)
	movq	-104(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movl	$1, -4(%rbp)
.LBB55_7:                               #   Parent Loop BB55_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB55_34
# %bb.8:                                #   in Loop: Header=BB55_7 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_10
# %bb.9:                                #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_10:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB55_12
# %bb.11:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_12:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB55_14
# %bb.13:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_14:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-104(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB55_16
# %bb.15:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_16:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-48(%rbp), %rax
	movq	320(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	je	.LBB55_18
# %bb.17:                               #   in Loop: Header=BB55_7 Depth=2
	movq	-48(%rbp), %rax
	movq	320(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB55_19
.LBB55_18:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB55_19:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-104(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_21
# %bb.20:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-136(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_21:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-104(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB55_23
# %bb.22:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-136(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-136(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_23:                              #   in Loop: Header=BB55_7 Depth=2
	movl	-4(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB55_32
# %bb.24:                               #   in Loop: Header=BB55_7 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_26
# %bb.25:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-128(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_26:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB55_28
# %bb.27:                               #   in Loop: Header=BB55_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-128(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_28:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-48(%rbp), %rax
	movq	328(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	je	.LBB55_30
# %bb.29:                               #   in Loop: Header=BB55_7 Depth=2
	movq	-48(%rbp), %rax
	movq	328(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB55_31
.LBB55_30:                              #   in Loop: Header=BB55_7 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB55_31:                              #   in Loop: Header=BB55_7 Depth=2
	jmp	.LBB55_32
.LBB55_32:                              #   in Loop: Header=BB55_7 Depth=2
	jmp	.LBB55_33
.LBB55_33:                              #   in Loop: Header=BB55_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_7
.LBB55_34:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	340(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_36
# %bb.35:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
.LBB55_36:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$1, -4(%rbp)
.LBB55_37:                              #   Parent Loop BB55_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB55_42
# %bb.38:                               #   in Loop: Header=BB55_37 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB55_40
# %bb.39:                               #   in Loop: Header=BB55_37 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_40:                              #   in Loop: Header=BB55_37 Depth=2
	jmp	.LBB55_41
.LBB55_41:                              #   in Loop: Header=BB55_37 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_37
.LBB55_42:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	364(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_44
# %bb.43:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
	movq	-96(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB55_44:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	348(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	12(%rcx), %eax
	jle	.LBB55_46
# %bb.45:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
	movl	-16(%rbp), %eax
	movq	-96(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB55_46:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	336(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_48
# %bb.47:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB55_48:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	360(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB55_50
# %bb.49:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-96(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB55_50:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	356(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB55_52
# %bb.51:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-96(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-96(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB55_52:                              #   in Loop: Header=BB55_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	8(%rcx), %eax
	jle	.LBB55_54
# %bb.53:                               #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movl	-16(%rbp), %eax
	movq	-96(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB55_54:                              #   in Loop: Header=BB55_5 Depth=1
	jmp	.LBB55_55
.LBB55_55:                              #   in Loop: Header=BB55_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_5
.LBB55_56:
	leaq	-64(%rbp), %rsi
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	addl	352(%rcx), %eax
	movl	%eax, -12(%rbp)
	movl	$2, -76(%rbp)
	movl	-76(%rbp), %edi
	callq	P7AllocTrace
	movl	$2, %ecx
	movl	$0, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rdx
	movb	$9, (%rax,%rdx)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rdx
	movl	$0, (%rax,%rdx,4)
	movq	-96(%rbp), %rsi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	movq	(%rsi,%rax,8), %rax
	movl	8(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB55_57:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -16(%rbp)
	jle	.LBB55_59
# %bb.58:                               #   in Loop: Header=BB55_57 Depth=1
	movl	-76(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -76(%rbp)
	movq	-64(%rbp), %rdi
	movl	-76(%rbp), %esi
	callq	P7ReallocTrace
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movl	-16(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$6, (%rax,%rcx)
	movl	-16(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_57
.LBB55_59:
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$4, (%rax,%rcx)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-64(%rbp), %rdi
	callq	P7ReverseTrace
	movq	-160(%rbp), %rdi
	callq	FreePlan7Matrix
	movq	-152(%rbp), %rdi
	callq	FreePlan7Matrix
	movq	-112(%rbp), %rdi
	callq	free
	movq	-120(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-12(%rbp), %edi
	callq	Scorify
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end55:
	.size	P7ParsingViterbi, .Lfunc_end55-P7ParsingViterbi
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function P7WeeViterbi
.LCPI56_0:
	.quad	4652007308841189376     # double 1000
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI56_1:
	.long	1065353216              # float 1
	.text
	.globl	P7WeeViterbi
	.p2align	4, 0x90
	.type	P7WeeViterbi,@function
P7WeeViterbi:                           # @P7WeeViterbi
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movabsq	$.L.str.48, %rax
	movq	%rdi, -176(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%rcx, -168(%rbp)
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$1282, %esi             # imm = 0x502
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -88(%rbp)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$1283, %esi             # imm = 0x503
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -104(%rbp)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$1284, %esi             # imm = 0x504
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -136(%rbp)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$1285, %esi             # imm = 0x505
	callq	sre_malloc
	movq	%rax, -128(%rbp)
	movl	$0, -64(%rbp)
	movq	-128(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movl	-68(%rbp), %eax
	movq	-136(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-88(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-120(%rbp), %rax
	movl	136(%rax), %eax
	movq	-88(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-104(%rbp), %rax
	movb	$4, 1(%rax)
	movq	-104(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movb	$9, (%rax,%rcx)
.LBB56_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_17 Depth 2
                                        #     Child Loop BB56_23 Depth 2
	cmpl	$0, -64(%rbp)
	jl	.LBB56_28
# %bb.2:                                #   in Loop: Header=BB56_1 Depth=1
	leaq	-152(%rbp), %r14
	leaq	-41(%rbp), %r10
	leaq	-60(%rbp), %r11
	movq	-128(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, -112(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, -156(%rbp)
	movq	-104(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movb	(%rcx,%rdx), %cl
	movb	%cl, -70(%rbp)
	movq	-136(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, -108(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, -148(%rbp)
	movq	-104(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movb	(%rcx,%rdx), %cl
	movb	%cl, -69(%rbp)
	movl	-64(%rbp), %ecx
	addl	$-1, %ecx
	movl	%ecx, -64(%rbp)
	movq	-120(%rbp), %rdi
	movq	-176(%rbp), %rsi
	movl	-68(%rbp), %edx
	movl	-156(%rbp), %ecx
	movb	-70(%rbp), %al
	movl	-112(%rbp), %r9d
	movl	-148(%rbp), %ebx
	movb	-69(%rbp), %r15b
	movl	-108(%rbp), %r12d
	movsbl	%al, %r8d
	movl	%ebx, (%rsp)
	movsbl	%r15b, %eax
	movl	%eax, 8(%rsp)
	movl	%r12d, 16(%rsp)
	movq	%r14, 24(%rsp)
	movq	%r10, 32(%rsp)
	movq	%r11, 40(%rsp)
	callq	get_wee_midpt
	movss	%xmm0, -144(%rbp)
	movl	-152(%rbp), %eax
	movq	-88(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movb	-41(%rbp), %al
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movsbl	-70(%rbp), %eax
	cmpl	$4, %eax
	jne	.LBB56_5
# %bb.3:                                #   in Loop: Header=BB56_1 Depth=1
	movsbl	-69(%rbp), %eax
	cmpl	$9, %eax
	jne	.LBB56_5
# %bb.4:                                #   in Loop: Header=BB56_1 Depth=1
	movss	-144(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -140(%rbp)
.LBB56_5:                               #   in Loop: Header=BB56_1 Depth=1
	movsbl	-41(%rbp), %eax
	cmpl	$5, %eax
	je	.LBB56_10
# %bb.6:                                #   in Loop: Header=BB56_1 Depth=1
	movl	-60(%rbp), %eax
	subl	-112(%rbp), %eax
	cmpl	$1, %eax
	jg	.LBB56_9
# %bb.7:                                #   in Loop: Header=BB56_1 Depth=1
	movl	-60(%rbp), %eax
	subl	-112(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB56_10
# %bb.8:                                #   in Loop: Header=BB56_1 Depth=1
	movsbl	-70(%rbp), %eax
	cmpl	$4, %eax
	jne	.LBB56_10
.LBB56_9:                               #   in Loop: Header=BB56_1 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movq	-128(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-136(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB56_10:                              #   in Loop: Header=BB56_1 Depth=1
	movsbl	-41(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB56_15
# %bb.11:                               #   in Loop: Header=BB56_1 Depth=1
	movl	-108(%rbp), %eax
	subl	-60(%rbp), %eax
	cmpl	$1, %eax
	jg	.LBB56_14
# %bb.12:                               #   in Loop: Header=BB56_1 Depth=1
	movl	-108(%rbp), %eax
	subl	-60(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB56_15
# %bb.13:                               #   in Loop: Header=BB56_1 Depth=1
	movsbl	-69(%rbp), %eax
	cmpl	$9, %eax
	jne	.LBB56_15
.LBB56_14:                              #   in Loop: Header=BB56_1 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	movq	-128(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-136(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB56_15:                              #   in Loop: Header=BB56_1 Depth=1
	movsbl	-41(%rbp), %eax
	cmpl	$5, %eax
	jne	.LBB56_21
# %bb.16:                               #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_17
.LBB56_17:                              #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB56_20
# %bb.18:                               #   in Loop: Header=BB56_17 Depth=2
	movq	-88(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	-104(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movb	$5, (%rax,%rcx)
# %bb.19:                               #   in Loop: Header=BB56_17 Depth=2
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_17
.LBB56_20:                              #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_21
.LBB56_21:                              #   in Loop: Header=BB56_1 Depth=1
	movsbl	-41(%rbp), %eax
	cmpl	$8, %eax
	jne	.LBB56_27
# %bb.22:                               #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_23
.LBB56_23:                              #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-60(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB56_26
# %bb.24:                               #   in Loop: Header=BB56_23 Depth=2
	movq	-120(%rbp), %rax
	movl	136(%rax), %eax
	movq	-88(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-104(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movb	$8, (%rax,%rcx)
# %bb.25:                               #   in Loop: Header=BB56_23 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_23
.LBB56_26:                              #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_27
.LBB56_27:                              #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_1
.LBB56_28:
	movl	-68(%rbp), %eax
	addl	$6, %eax
	movl	%eax, -92(%rbp)
	movl	$1, -40(%rbp)
.LBB56_29:                              # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB56_41
# %bb.30:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-104(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB56_33
# %bb.31:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-104(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB56_33
# %bb.32:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-88(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	subl	$1, %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB56_33:                              #   in Loop: Header=BB56_29 Depth=1
	movq	-104(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	jne	.LBB56_36
# %bb.34:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-104(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB56_36
# %bb.35:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-88(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB56_36:                              #   in Loop: Header=BB56_29 Depth=1
	movq	-104(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB56_39
# %bb.37:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-104(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	jne	.LBB56_39
# %bb.38:                               #   in Loop: Header=BB56_29 Depth=1
	movq	-120(%rbp), %rax
	movl	136(%rax), %eax
	movq	-88(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB56_39:                              #   in Loop: Header=BB56_29 Depth=1
	jmp	.LBB56_40
.LBB56_40:                              #   in Loop: Header=BB56_29 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB56_29
.LBB56_41:
	movq	-104(%rbp), %rax
	movsbl	1(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB56_43
# %bb.42:
	movq	-88(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB56_43:
	movq	-104(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB56_45
# %bb.44:
	movq	-120(%rbp), %rax
	movl	136(%rax), %eax
	movq	-88(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB56_45:
	leaq	-56(%rbp), %rsi
	movl	-92(%rbp), %edi
	callq	P7AllocTrace
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movb	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movb	$5, 1(%rax)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, 4(%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, 4(%rax)
	movl	$2, -36(%rbp)
	movl	$1, -40(%rbp)
.LBB56_46:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_52 Depth 2
                                        #     Child Loop BB56_61 Depth 2
                                        #     Child Loop BB56_69 Depth 2
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB56_81
# %bb.47:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-104(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$7, %ecx
	ja	.LBB56_78
# %bb.48:                               #   in Loop: Header=BB56_46 Depth=1
	movq	.LJTI56_0(,%rax,8), %rax
	jmpq	*%rax
.LBB56_49:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	jne	.LBB56_57
# %bb.50:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$6, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-120(%rbp), %rax
	movq	208(%rax), %rax
	movq	-88(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-120(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	cvtsi2sdl	%eax, %xmm1
	addsd	%xmm0, %xmm1
	movq	-120(%rbp), %rax
	movq	368(%rax), %rax
	movq	-88(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB56_56
# %bb.51:                               #   in Loop: Header=BB56_46 Depth=1
	movl	$1, -76(%rbp)
.LBB56_52:                              #   Parent Loop BB56_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	-88(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB56_55
# %bb.53:                               #   in Loop: Header=BB56_52 Depth=2
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
# %bb.54:                               #   in Loop: Header=BB56_52 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB56_52
.LBB56_55:                              #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_56
.LBB56_56:                              #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_57
.LBB56_57:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-40(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB56_65
# %bb.58:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-104(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB56_65
# %bb.59:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-88(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$1, %eax
	jle	.LBB56_65
# %bb.60:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
.LBB56_61:                              #   Parent Loop BB56_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB56_64
# %bb.62:                               #   in Loop: Header=BB56_61 Depth=2
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
# %bb.63:                               #   in Loop: Header=BB56_61 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB56_61
.LBB56_64:                              #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_65
.LBB56_65:                              #   in Loop: Header=BB56_46 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	je	.LBB56_67
# %bb.66:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-104(%rbp), %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	jne	.LBB56_74
.LBB56_67:                              #   in Loop: Header=BB56_46 Depth=1
	movss	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero,zero,zero
	movq	-120(%rbp), %rax
	movq	216(%rax), %rax
	movq	-88(%rbp), %rcx
	movl	-40(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	cvtsi2sdl	%eax, %xmm1
	addsd	%xmm0, %xmm1
	movq	-120(%rbp), %rax
	movq	376(%rax), %rax
	movq	-88(%rbp), %rcx
	movl	-40(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB56_73
# %bb.68:                               #   in Loop: Header=BB56_46 Depth=1
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
.LBB56_69:                              #   Parent Loop BB56_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	-120(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB56_72
# %bb.70:                               #   in Loop: Header=BB56_69 Depth=2
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
# %bb.71:                               #   in Loop: Header=BB56_69 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB56_69
.LBB56_72:                              #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_73
.LBB56_73:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB56_74:                              #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_79
.LBB56_75:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-40(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_79
.LBB56_76:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-40(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_79
.LBB56_77:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-40(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_79
.LBB56_78:                              #   in Loop: Header=BB56_46 Depth=1
	movq	-104(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.4.52, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB56_79:                              #   in Loop: Header=BB56_46 Depth=1
	jmp	.LBB56_80
.LBB56_80:                              #   in Loop: Header=BB56_46 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB56_46
.LBB56_81:
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$9, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rdi
	callq	free
	movq	-104(%rbp), %rdi
	callq	free
	movq	-128(%rbp), %rdi
	callq	free
	movq	-136(%rbp), %rdi
	callq	free
	movss	-140(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	addq	$192, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end56:
	.size	P7WeeViterbi, .Lfunc_end56-P7WeeViterbi
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI56_0:
	.quad	.LBB56_49
	.quad	.LBB56_78
	.quad	.LBB56_75
	.quad	.LBB56_78
	.quad	.LBB56_76
	.quad	.LBB56_78
	.quad	.LBB56_78
	.quad	.LBB56_77
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function get_wee_midpt
	.type	get_wee_midpt,@function
get_wee_midpt:                          # @get_wee_midpt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movl	32(%rbp), %eax
	movb	24(%rbp), %al
	movl	16(%rbp), %eax
	movl	$2, %r10d
	movq	%rdi, -32(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -136(%rbp)
	movl	%ecx, -16(%rbp)
	movb	%r8b, -41(%rbp)
	movl	%r9d, -96(%rbp)
	movl	-96(%rbp), %ecx
	movl	32(%rbp), %eax
	subl	-96(%rbp), %eax
	cltd
	idivl	%r10d
	addl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	32(%rbp), %eax
	subl	-96(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB57_3
# %bb.1:
	movsbl	-41(%rbp), %eax
	cmpl	$4, %eax
	jne	.LBB57_3
# %bb.2:
	movl	-96(%rbp), %eax
	movl	%eax, -88(%rbp)
.LBB57_3:
	movl	32(%rbp), %eax
	subl	-96(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB57_6
# %bb.4:
	movsbl	24(%rbp), %eax
	cmpl	$9, %eax
	jne	.LBB57_6
# %bb.5:
	movl	32(%rbp), %eax
	movl	%eax, -88(%rbp)
.LBB57_6:
	movsbl	-41(%rbp), %eax
	cmpl	$4, %eax
	jne	.LBB57_8
# %bb.7:
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_8:
	movl	-96(%rbp), %eax
.LBB57_9:
	leaq	-24(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-72(%rbp), %r8
	leaq	-80(%rbp), %r9
	movl	%eax, -132(%rbp)
	movq	-32(%rbp), %rax
	movl	136(%rax), %esi
	movl	$2, %edi
	callq	AllocPlan7Matrix
	movl	$2, %ecx
	movq	%rax, -128(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_10:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jg	.LBB57_13
# %bb.11:                               #   in Loop: Header=BB57_10 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.12:                               #   in Loop: Header=BB57_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_10
.LBB57_13:
	movsbl	-41(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$7, %ecx
	ja	.LBB57_20
# %bb.14:
	movq	.LJTI57_0(,%rax,8), %rax
	jmpq	*%rax
.LBB57_15:
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB57_21
.LBB57_16:
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB57_21
.LBB57_17:
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 16(%rax)
	jmp	.LBB57_21
.LBB57_18:
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
	jmp	.LBB57_21
.LBB57_19:
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 16(%rax)
	jmp	.LBB57_21
.LBB57_20:
	movsbl	-41(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.53, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB57_21:
	movsbl	-41(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB57_33
# %bb.22:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB57_23:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jg	.LBB57_30
# %bb.24:                               #   in Loop: Header=BB57_23 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_26
# %bb.25:                               #   in Loop: Header=BB57_23 Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_26:                              #   in Loop: Header=BB57_23 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_28
# %bb.27:                               #   in Loop: Header=BB57_23 Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_28:                              #   in Loop: Header=BB57_23 Depth=1
	jmp	.LBB57_29
.LBB57_29:                              #   in Loop: Header=BB57_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_23
.LBB57_30:
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_32
# %bb.31:
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
.LBB57_32:
	jmp	.LBB57_33
.LBB57_33:
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	336(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_35
# %bb.34:
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB57_35:
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_37
# %bb.36:
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB57_37:
	movl	-132(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
.LBB57_38:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_54 Depth 2
                                        #     Child Loop BB57_86 Depth 2
	movl	-40(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB57_101
# %bb.39:                               #   in Loop: Header=BB57_38 Depth=1
	movl	$2, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -8(%rbp)
	cmpl	$0, -8(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB57_48
# %bb.40:                               #   in Loop: Header=BB57_38 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_42
# %bb.41:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_42:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-72(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_44
# %bb.43:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_44:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	je	.LBB57_46
# %bb.45:                               #   in Loop: Header=BB57_38 Depth=1
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB57_47
.LBB57_46:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB57_47:                              #   in Loop: Header=BB57_38 Depth=1
	jmp	.LBB57_48
.LBB57_48:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_50
# %bb.49:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_50:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	je	.LBB57_52
# %bb.51:                               #   in Loop: Header=BB57_38 Depth=1
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB57_53
.LBB57_52:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB57_53:                              #   in Loop: Header=BB57_38 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB57_54:                              #   Parent Loop BB57_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jg	.LBB57_83
# %bb.55:                               #   in Loop: Header=BB57_54 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_57
# %bb.56:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_57:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-72(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_59
# %bb.58:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_59:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-24(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_61
# %bb.60:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_61:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-80(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_63
# %bb.62:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_63:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	je	.LBB57_65
# %bb.64:                               #   in Loop: Header=BB57_54 Depth=2
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB57_66
.LBB57_65:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB57_66:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB57_72
# %bb.67:                               #   in Loop: Header=BB57_54 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_69
# %bb.68:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_69:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_71
# %bb.70:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_71:                              #   in Loop: Header=BB57_54 Depth=2
	jmp	.LBB57_72
.LBB57_72:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB57_81
# %bb.73:                               #   in Loop: Header=BB57_54 Depth=2
	movq	-56(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_75
# %bb.74:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_75:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-72(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_77
# %bb.76:                               #   in Loop: Header=BB57_54 Depth=2
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_77:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	je	.LBB57_79
# %bb.78:                               #   in Loop: Header=BB57_54 Depth=2
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB57_80
.LBB57_79:                              #   in Loop: Header=BB57_54 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB57_80:                              #   in Loop: Header=BB57_54 Depth=2
	jmp	.LBB57_81
.LBB57_81:                              #   in Loop: Header=BB57_54 Depth=2
	jmp	.LBB57_82
.LBB57_82:                              #   in Loop: Header=BB57_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_54
.LBB57_83:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	340(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_85
# %bb.84:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
.LBB57_85:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_86:                              #   Parent Loop BB57_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	cmpl	16(%rbp), %ecx
	jg	.LBB57_88
# %bb.87:                               #   in Loop: Header=BB57_86 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	setle	%al
.LBB57_88:                              #   in Loop: Header=BB57_86 Depth=2
	testb	$1, %al
	jne	.LBB57_89
	jmp	.LBB57_93
.LBB57_89:                              #   in Loop: Header=BB57_86 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB57_91
# %bb.90:                               #   in Loop: Header=BB57_86 Depth=2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
.LBB57_91:                              #   in Loop: Header=BB57_86 Depth=2
	jmp	.LBB57_92
.LBB57_92:                              #   in Loop: Header=BB57_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_86
.LBB57_93:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	336(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_95
# %bb.94:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB57_95:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	356(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_97
# %bb.96:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB57_97:                              #   in Loop: Header=BB57_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	8(%rcx), %eax
	jle	.LBB57_99
# %bb.98:                               #   in Loop: Header=BB57_38 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB57_99:                              #   in Loop: Header=BB57_38 Depth=1
	jmp	.LBB57_100
.LBB57_100:                             #   in Loop: Header=BB57_38 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB57_38
.LBB57_101:
	leaq	-24(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-72(%rbp), %r8
	leaq	-80(%rbp), %r9
	movq	-32(%rbp), %rax
	movl	136(%rax), %esi
	movl	$2, %edi
	callq	AllocPlan7Matrix
	movl	$2, %ecx
	movq	%rax, -120(%rbp)
	movl	32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_102:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	16(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB57_105
# %bb.103:                              #   in Loop: Header=BB57_102 Depth=1
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.104:                              #   in Loop: Header=BB57_102 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_102
.LBB57_105:
	movl	-36(%rbp), %eax
	xorl	%ecx, %ecx
	testl	%eax, %eax
	sete	%cl
	movl	%ecx, -8(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movl	$-987654321, 4(%rax,%rcx,4) # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movl	$-987654321, 4(%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movl	$-987654321, 4(%rax,%rcx,4) # imm = 0xC521974F
	movsbl	24(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$8, %ecx
	ja	.LBB57_112
# %bb.106:
	movq	.LJTI57_1(,%rax,8), %rax
	jmpq	*%rax
.LBB57_107:
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB57_113
.LBB57_108:
	movq	-72(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB57_113
.LBB57_109:
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 16(%rax)
	jmp	.LBB57_113
.LBB57_110:
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
	jmp	.LBB57_113
.LBB57_111:
	movq	-32(%rbp), %rax
	movl	352(%rax), %eax
	movq	-24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB57_113
.LBB57_112:
	movsbl	24(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.53, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB57_113:
	movsbl	24(%rbp), %eax
	cmpl	$9, %eax
	jne	.LBB57_121
# %bb.114:
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	344(%rcx), %eax
	movq	-24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_115:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB57_120
# %bb.116:                              #   in Loop: Header=BB57_115 Depth=1
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	32(%rbp), %eax
	cmpl	-88(%rbp), %eax
	je	.LBB57_118
# %bb.117:                              #   in Loop: Header=BB57_115 Depth=1
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	32(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
.LBB57_118:                             #   in Loop: Header=BB57_115 Depth=1
	jmp	.LBB57_119
.LBB57_119:                             #   in Loop: Header=BB57_115 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_115
.LBB57_120:
	jmp	.LBB57_121
.LBB57_121:
	movl	32(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
.LBB57_122:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_126 Depth 2
                                        #     Child Loop BB57_138 Depth 2
	movl	-40(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jl	.LBB57_167
# %bb.123:                              #   in Loop: Header=BB57_122 Depth=1
	movl	$2, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -8(%rbp)
	cmpl	$0, -8(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	356(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_125
# %bb.124:                              #   in Loop: Header=BB57_122 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB57_125:                             #   in Loop: Header=BB57_122 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_126:                             #   Parent Loop BB57_122 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jg	.LBB57_131
# %bb.127:                              #   in Loop: Header=BB57_126 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB57_129
# %bb.128:                              #   in Loop: Header=BB57_126 Depth=2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB57_129:                             #   in Loop: Header=BB57_126 Depth=2
	jmp	.LBB57_130
.LBB57_130:                             #   in Loop: Header=BB57_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_126
.LBB57_131:                             #   in Loop: Header=BB57_122 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_133
# %bb.132:                              #   in Loop: Header=BB57_122 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
.LBB57_133:                             #   in Loop: Header=BB57_122 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	336(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_135
# %bb.134:                              #   in Loop: Header=BB57_122 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
.LBB57_135:                             #   in Loop: Header=BB57_122 Depth=1
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	340(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	16(%rcx), %eax
	jle	.LBB57_137
# %bb.136:                              #   in Loop: Header=BB57_122 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
.LBB57_137:                             #   in Loop: Header=BB57_122 Depth=1
	movl	16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_138:                             #   Parent Loop BB57_122 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB57_165
# %bb.139:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jne	.LBB57_143
# %bb.140:                              #   in Loop: Header=BB57_138 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movl	-40(%rbp), %eax
	cmpl	-88(%rbp), %eax
	je	.LBB57_142
# %bb.141:                              #   in Loop: Header=BB57_138 Depth=2
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
.LBB57_142:                             #   in Loop: Header=BB57_138 Depth=2
	jmp	.LBB57_164
.LBB57_143:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_145
# %bb.144:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_145:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_147
# %bb.146:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_147:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-72(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_149
# %bb.148:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_149:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_151
# %bb.150:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_151:                             #   in Loop: Header=BB57_138 Depth=2
	movl	-40(%rbp), %eax
	cmpl	-88(%rbp), %eax
	je	.LBB57_153
# %bb.152:                              #   in Loop: Header=BB57_138 Depth=2
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
.LBB57_153:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_155
# %bb.154:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_155:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_157
# %bb.156:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_157:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB57_159
# %bb.158:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_159:                             #   in Loop: Header=BB57_138 Depth=2
	movq	-72(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB57_161
# %bb.160:                              #   in Loop: Header=BB57_138 Depth=2
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB57_161:                             #   in Loop: Header=BB57_138 Depth=2
	movl	-40(%rbp), %eax
	cmpl	-88(%rbp), %eax
	je	.LBB57_163
# %bb.162:                              #   in Loop: Header=BB57_138 Depth=2
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
.LBB57_163:                             #   in Loop: Header=BB57_138 Depth=2
	jmp	.LBB57_164
.LBB57_164:                             #   in Loop: Header=BB57_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_138
.LBB57_165:                             #   in Loop: Header=BB57_122 Depth=1
	jmp	.LBB57_166
.LBB57_166:                             #   in Loop: Header=BB57_122 Depth=1
	movl	-40(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB57_122
.LBB57_167:
	movl	$2, %ecx
	movl	-88(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -8(%rbp)
	movl	$-987654321, -92(%rbp)  # imm = 0xC521974F
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_168:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jg	.LBB57_175
# %bb.169:                              #   in Loop: Header=BB57_168 Depth=1
	movq	-128(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	-92(%rbp), %eax
	jle	.LBB57_171
# %bb.170:                              #   in Loop: Header=BB57_168 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -108(%rbp)
	movb	$1, -57(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB57_171:                             #   in Loop: Header=BB57_168 Depth=1
	movq	-128(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	-92(%rbp), %eax
	jle	.LBB57_173
# %bb.172:                              #   in Loop: Header=BB57_168 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -108(%rbp)
	movb	$3, -57(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB57_173:                             #   in Loop: Header=BB57_168 Depth=1
	jmp	.LBB57_174
.LBB57_174:                             #   in Loop: Header=BB57_168 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_168
.LBB57_175:
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-120(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	16(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	-92(%rbp), %eax
	jle	.LBB57_177
# %bb.176:
	movl	$1, -108(%rbp)
	movb	$5, -57(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB57_177:
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-120(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	8(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	-92(%rbp), %eax
	jle	.LBB57_179
# %bb.178:
	movq	-32(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -108(%rbp)
	movb	$8, -57(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB57_179:
	movq	-128(%rbp), %rdi
	callq	FreePlan7Matrix
	movq	-120(%rbp), %rdi
	callq	FreePlan7Matrix
	movl	-108(%rbp), %eax
	movq	40(%rbp), %rcx
	movl	%eax, (%rcx)
	movb	-57(%rbp), %al
	movq	48(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-88(%rbp), %eax
	movq	56(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-92(%rbp), %edi
	callq	Scorify
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end57:
	.size	get_wee_midpt, .Lfunc_end57-get_wee_midpt
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI57_0:
	.quad	.LBB57_15
	.quad	.LBB57_20
	.quad	.LBB57_16
	.quad	.LBB57_19
	.quad	.LBB57_17
	.quad	.LBB57_20
	.quad	.LBB57_20
	.quad	.LBB57_18
.LJTI57_1:
	.quad	.LBB57_107
	.quad	.LBB57_112
	.quad	.LBB57_108
	.quad	.LBB57_112
	.quad	.LBB57_109
	.quad	.LBB57_112
	.quad	.LBB57_112
	.quad	.LBB57_110
	.quad	.LBB57_111
                                        # -- End function
	.text
	.globl	Plan7ESTViterbi         # -- Begin function Plan7ESTViterbi
	.p2align	4, 0x90
	.type	Plan7ESTViterbi,@function
Plan7ESTViterbi:                        # @Plan7ESTViterbi
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	-32(%rbp), %rax
	leaq	-40(%rbp), %r10
	leaq	-48(%rbp), %r8
	leaq	-56(%rbp), %r9
	movq	%rdi, -72(%rbp)
	movl	%esi, -64(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -88(%rbp)
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %esi
	movq	%rax, %rdx
	movq	%r10, %rcx
	callq	AllocPlan7Matrix
	movq	%rax, -80(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	336(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$0, -4(%rbp)
.LBB58_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB58_4
# %bb.2:                                #   in Loop: Header=BB58_1 Depth=1
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.3:                                #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	340(%rcx), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	336(%rcx), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$0, -4(%rbp)
.LBB58_5:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB58_8
# %bb.6:                                #   in Loop: Header=BB58_5 Depth=1
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.7:                                #   in Loop: Header=BB58_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_5
.LBB58_8:
	movl	$2, -8(%rbp)
.LBB58_9:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_18 Depth 2
                                        #     Child Loop BB58_64 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jg	.LBB58_77
# %bb.10:                               #   in Loop: Header=BB58_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	cmpl	$2, -8(%rbp)
	jle	.LBB58_17
# %bb.11:                               #   in Loop: Header=BB58_9 Depth=1
	movq	-72(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$4, %eax
	jge	.LBB58_15
# %bb.12:                               #   in Loop: Header=BB58_9 Depth=1
	movq	-72(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$4, %eax
	jge	.LBB58_15
# %bb.13:                               #   in Loop: Header=BB58_9 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$4, %eax
	jge	.LBB58_15
# %bb.14:                               #   in Loop: Header=BB58_9 Depth=1
	movq	-72(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	shll	$2, %ecx
	addl	%ecx, %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB58_16
.LBB58_15:                              #   in Loop: Header=BB58_9 Depth=1
	movl	$64, -60(%rbp)
.LBB58_16:                              #   in Loop: Header=BB58_9 Depth=1
	jmp	.LBB58_17
.LBB58_17:                              #   in Loop: Header=BB58_9 Depth=1
	movl	$1, -4(%rbp)
.LBB58_18:                              #   Parent Loop BB58_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB58_63
# %bb.19:                               #   in Loop: Header=BB58_18 Depth=2
	cmpl	$2, -8(%rbp)
	jle	.LBB58_27
# %bb.20:                               #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_22
# %bb.21:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_22:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-32(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_24
# %bb.23:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_24:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_26
# %bb.25:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_26:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-24(%rbp), %rax
	movq	424(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
.LBB58_27:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	440(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_29
# %bb.28:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_29:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	440(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_31
# %bb.30:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_31:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-32(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	440(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_33
# %bb.32:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_33:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	440(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_35
# %bb.34:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_35:                              #   in Loop: Header=BB58_18 Depth=2
	cmpl	$3, -8(%rbp)
	jle	.LBB58_45
# %bb.36:                               #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	444(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_38
# %bb.37:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_38:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	444(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_40
# %bb.39:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_40:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-32(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	444(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_42
# %bb.41:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_42:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	444(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_44
# %bb.43:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_44:                              #   in Loop: Header=BB58_18 Depth=2
	jmp	.LBB58_45
.LBB58_45:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_47
# %bb.46:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_47:                              #   in Loop: Header=BB58_18 Depth=2
	cmpl	$2, -8(%rbp)
	jle	.LBB58_51
# %bb.48:                               #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_50
# %bb.49:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_50:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-24(%rbp), %rax
	movq	432(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
.LBB58_51:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	440(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_53
# %bb.52:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_53:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	440(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_55
# %bb.54:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_55:                              #   in Loop: Header=BB58_18 Depth=2
	cmpl	$4, -8(%rbp)
	jle	.LBB58_61
# %bb.56:                               #   in Loop: Header=BB58_18 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	444(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_58
# %bb.57:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_58:                              #   in Loop: Header=BB58_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	addl	444(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB58_60
# %bb.59:                               #   in Loop: Header=BB58_18 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_60:                              #   in Loop: Header=BB58_18 Depth=2
	jmp	.LBB58_61
.LBB58_61:                              #   in Loop: Header=BB58_18 Depth=2
	jmp	.LBB58_62
.LBB58_62:                              #   in Loop: Header=BB58_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_18
.LBB58_63:                              #   in Loop: Header=BB58_9 Depth=1
	movq	-32(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	340(%rcx), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB58_64:                              #   Parent Loop BB58_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB58_69
# %bb.65:                               #   in Loop: Header=BB58_64 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB58_67
# %bb.66:                               #   in Loop: Header=BB58_64 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
.LBB58_67:                              #   in Loop: Header=BB58_64 Depth=2
	jmp	.LBB58_68
.LBB58_68:                              #   in Loop: Header=BB58_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_64
.LBB58_69:                              #   in Loop: Header=BB58_9 Depth=1
	movq	-32(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	364(%rcx), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	348(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	12(%rcx), %eax
	jle	.LBB58_71
# %bb.70:                               #   in Loop: Header=BB58_9 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB58_71:                              #   in Loop: Header=BB58_9 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	336(%rcx), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	360(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB58_73
# %bb.72:                               #   in Loop: Header=BB58_9 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB58_73:                              #   in Loop: Header=BB58_9 Depth=1
	movq	-32(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	356(%rcx), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	8(%rcx), %eax
	jle	.LBB58_75
# %bb.74:                               #   in Loop: Header=BB58_9 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB58_75:                              #   in Loop: Header=BB58_9 Depth=1
	jmp	.LBB58_76
.LBB58_76:                              #   in Loop: Header=BB58_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_9
.LBB58_77:
	movq	-32(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	352(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpq	$0, -88(%rbp)
	je	.LBB58_79
# %bb.78:
	movq	-80(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB58_80
.LBB58_79:
	movq	-80(%rbp), %rdi
	callq	FreePlan7Matrix
.LBB58_80:
	movl	-12(%rbp), %edi
	callq	Scorify
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end58:
	.size	Plan7ESTViterbi, .Lfunc_end58-Plan7ESTViterbi
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7ViterbiAlignAlignment
.LCPI59_0:
	.long	3323739136              # float -9999
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI59_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	P7ViterbiAlignAlignment
	.p2align	4, 0x90
	.type	P7ViterbiAlignAlignment,@function
P7ViterbiAlignAlignment:                # @P7ViterbiAlignAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.48, %rax
	movq	%rdi, -72(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-72(%rbp), %rcx
	movl	24(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$2044, %esi             # imm = 0x7FC
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -96(%rbp)
	movq	-72(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$2045, %esi             # imm = 0x7FD
	callq	sre_malloc
	movq	%rax, -112(%rbp)
	movl	$1, -16(%rbp)
.LBB59_1:                               # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB59_4
# %bb.2:                                #   in Loop: Header=BB59_1 Depth=1
	movabsq	$.L.str.48, %rdi
	movslq	Alphabet_size, %rdx
	shlq	$2, %rdx
	movl	$2047, %esi             # imm = 0x7FF
	callq	sre_malloc
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
# %bb.3:                                #   in Loop: Header=BB59_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_1
.LBB59_4:
	movss	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-112(%rbp), %rax
	movss	%xmm0, (%rax)
	movq	-72(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-72(%rbp), %rax
	movl	28(%rax), %esi
	callq	FSum
	movss	%xmm0, -148(%rbp)
	movl	$1, -16(%rbp)
.LBB59_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_7 Depth 2
	movl	-16(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB59_18
# %bb.6:                                #   in Loop: Header=BB59_5 Depth=1
	movl	$0, -60(%rbp)
.LBB59_7:                               #   Parent Loop BB59_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-60(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB59_16
# %bb.8:                                #   in Loop: Header=BB59_7 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB59_14
# %bb.9:                                #   in Loop: Header=BB59_7 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB59_14
# %bb.10:                               #   in Loop: Header=BB59_7 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB59_14
# %bb.11:                               #   in Loop: Header=BB59_7 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB59_14
# %bb.12:                               #   in Loop: Header=BB59_7 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB59_14
# %bb.13:                               #   in Loop: Header=BB59_7 Depth=2
	movabsq	$Alphabet, %rdi
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rbx
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %esi
	callq	strchr
	movabsq	$Alphabet, %rcx
	subq	%rcx, %rax
	movq	-72(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movss	(%rcx,%rdx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	%rbx, %rdi
	movsbl	%al, %esi
	callq	P7CountSymbol
.LBB59_14:                              #   in Loop: Header=BB59_7 Depth=2
	jmp	.LBB59_15
.LBB59_15:                              #   in Loop: Header=BB59_7 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB59_7
.LBB59_16:                              #   in Loop: Header=BB59_5 Depth=1
	movsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	movss	-148(%rbp), %xmm1       # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	callq	FScale
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FSum
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.17:                               #   in Loop: Header=BB59_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_5
.LBB59_18:
	leaq	-48(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-80(%rbp), %r8
	leaq	-104(%rbp), %r9
	movq	-32(%rbp), %rax
	movl	136(%rax), %esi
	movl	$2, %edi
	callq	AllocPlan7Matrix
	leaq	-88(%rbp), %rdx
	leaq	-120(%rbp), %rcx
	leaq	-136(%rbp), %r8
	leaq	-128(%rbp), %r9
	movq	%rax, -168(%rbp)
	movq	-72(%rbp), %rax
	movl	24(%rax), %edi
	addl	$1, %edi
	movq	-32(%rbp), %rax
	movl	136(%rax), %esi
	callq	AllocShadowMatrix
	movq	%rax, -144(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 16(%rax)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movb	$4, 4(%rax)
	movq	-32(%rbp), %rax
	movl	336(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movb	$5, (%rax)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-144(%rbp), %rax
	movq	32(%rax), %rax
	movl	$0, (%rax)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movb	$0, 3(%rax)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movb	$0, 2(%rax)
	movl	$0, -12(%rbp)
.LBB59_19:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB59_22
# %bb.20:                               #   in Loop: Header=BB59_19 Depth=1
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.21:                               #   in Loop: Header=BB59_19 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_19
.LBB59_22:
	movl	$1, -16(%rbp)
.LBB59_23:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_25 Depth 2
                                        #       Child Loop BB59_41 Depth 3
                                        #       Child Loop BB59_66 Depth 3
                                        #     Child Loop BB59_81 Depth 2
	movl	-16(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB59_102
# %bb.24:                               #   in Loop: Header=BB59_23 Depth=1
	movl	$2, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -20(%rbp)
	cmpl	$0, -20(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-104(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-80(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-128(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, (%rax)
	movq	-136(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, (%rax)
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, (%rax)
	movl	$1, -12(%rbp)
.LBB59_25:                              #   Parent Loop BB59_23 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
                                        #       Child Loop BB59_66 Depth 3
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB59_76
# %bb.26:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_30
# %bb.27:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_30
# %bb.28:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_30
# %bb.29:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB59_30:                              #   in Loop: Header=BB59_25 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_34
# %bb.31:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_34
# %bb.32:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm1
	movq	-112(%rbp), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	mulss	(%rax,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -24(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_34
# %bb.33:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$3, (%rax,%rcx)
.LBB59_34:                              #   in Loop: Header=BB59_25 Depth=2
	movq	-48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_36
# %bb.35:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$6, (%rax,%rcx)
.LBB59_36:                              #   in Loop: Header=BB59_25 Depth=2
	movq	-104(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_40
# %bb.37:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_40
# %bb.38:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-104(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_40
# %bb.39:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$2, (%rax,%rcx)
.LBB59_40:                              #   in Loop: Header=BB59_25 Depth=2
	movl	$0, -40(%rbp)
.LBB59_41:                              #   Parent Loop BB59_23 Depth=1
                                        #     Parent Loop BB59_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-40(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB59_47
# %bb.42:                               #   in Loop: Header=BB59_41 Depth=3
	xorps	%xmm0, %xmm0
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB59_45
# %bb.43:                               #   in Loop: Header=BB59_41 Depth=3
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jne	.LBB59_45
# %bb.44:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jmp	.LBB59_48
.LBB59_45:                              #   in Loop: Header=BB59_41 Depth=3
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	cvtsi2ssl	%edx, %xmm1
	addss	%xmm0, %xmm1
	cvttss2si	%xmm1, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.46:                               #   in Loop: Header=BB59_41 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB59_41
.LBB59_47:                              # %.loopexit1
                                        #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_48
.LBB59_48:                              #   in Loop: Header=BB59_25 Depth=2
	movq	-104(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-128(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_52
# %bb.49:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	16(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_52
# %bb.50:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_52
# %bb.51:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-128(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB59_52:                              #   in Loop: Header=BB59_25 Depth=2
	movq	-104(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_56
# %bb.53:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_56
# %bb.54:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-104(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_56
# %bb.55:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-128(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$2, (%rax,%rcx)
.LBB59_56:                              #   in Loop: Header=BB59_25 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB59_74
# %bb.57:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-80(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-136(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_61
# %bb.58:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_61
# %bb.59:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm1
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_61
# %bb.60:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-136(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB59_61:                              #   in Loop: Header=BB59_25 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_65
# %bb.62:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_65
# %bb.63:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm1
	movq	-112(%rbp), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	mulss	(%rax,%rcx,4), %xmm1
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB59_65
# %bb.64:                               #   in Loop: Header=BB59_25 Depth=2
	movl	-24(%rbp), %eax
	movq	-80(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-136(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$3, (%rax,%rcx)
.LBB59_65:                              #   in Loop: Header=BB59_25 Depth=2
	movl	$0, -40(%rbp)
.LBB59_66:                              #   Parent Loop BB59_23 Depth=1
                                        #     Parent Loop BB59_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-40(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB59_72
# %bb.67:                               #   in Loop: Header=BB59_66 Depth=3
	xorps	%xmm0, %xmm0
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB59_70
# %bb.68:                               #   in Loop: Header=BB59_66 Depth=3
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jne	.LBB59_70
# %bb.69:                               #   in Loop: Header=BB59_25 Depth=2
	movq	-80(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jmp	.LBB59_73
.LBB59_70:                              #   in Loop: Header=BB59_66 Depth=3
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movq	-80(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	cvtsi2ssl	%edx, %xmm1
	addss	%xmm0, %xmm1
	cvttss2si	%xmm1, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.71:                               #   in Loop: Header=BB59_66 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB59_66
.LBB59_72:                              # %.loopexit
                                        #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_73
.LBB59_73:                              #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_74
.LBB59_74:                              #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_75
.LBB59_75:                              #   in Loop: Header=BB59_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_25
.LBB59_76:                              #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, 4(%rax)
	movq	-48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 16(%rax)   # imm = 0xC521974F
	jle	.LBB59_80
# %bb.77:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$-987654321, 340(%rax)  # imm = 0xC521974F
	jle	.LBB59_80
# %bb.78:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movl	340(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -24(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB59_80
# %bb.79:                               #   in Loop: Header=BB59_23 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$5, 4(%rax)
.LBB59_80:                              #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, 1(%rax)
	movl	$1, -12(%rbp)
.LBB59_81:                              #   Parent Loop BB59_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB59_88
# %bb.82:                               #   in Loop: Header=BB59_81 Depth=2
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_86
# %bb.83:                               #   in Loop: Header=BB59_81 Depth=2
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jle	.LBB59_86
# %bb.84:                               #   in Loop: Header=BB59_81 Depth=2
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB59_86
# %bb.85:                               #   in Loop: Header=BB59_81 Depth=2
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-144(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB59_86:                              #   in Loop: Header=BB59_81 Depth=2
	jmp	.LBB59_87
.LBB59_87:                              #   in Loop: Header=BB59_81 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_81
.LBB59_88:                              #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 16(%rax)   # imm = 0xC521974F
	jle	.LBB59_92
# %bb.89:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$-987654321, 336(%rax)  # imm = 0xC521974F
	jle	.LBB59_92
# %bb.90:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	336(%rcx), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB59_92
# %bb.91:                               #   in Loop: Header=BB59_23 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$5, (%rax)
.LBB59_92:                              #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 8(%rax)    # imm = 0xC521974F
	jle	.LBB59_96
# %bb.93:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$-987654321, 356(%rax)  # imm = 0xC521974F
	jle	.LBB59_96
# %bb.94:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movl	356(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -24(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB59_96
# %bb.95:                               #   in Loop: Header=BB59_23 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$8, 2(%rax)
.LBB59_96:                              #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 4(%rax)    # imm = 0xC521974F
	jle	.LBB59_100
# %bb.97:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$-987654321, 344(%rax)  # imm = 0xC521974F
	jle	.LBB59_100
# %bb.98:                               #   in Loop: Header=BB59_23 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	8(%rcx), %eax
	jle	.LBB59_100
# %bb.99:                               #   in Loop: Header=BB59_23 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	$7, 2(%rax)
.LBB59_100:                             #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_101
.LBB59_101:                             #   in Loop: Header=BB59_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_23
.LBB59_102:
	movl	$2, %ecx
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	24(%rax), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	movq	(%rsi,%rax,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	352(%rcx), %eax
	movl	%eax, -24(%rbp)
	movq	-144(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	24(%rax), %edx
	callq	ShadowTrace
	movq	%rax, -160(%rbp)
	movq	-168(%rbp), %rdi
	callq	FreePlan7Matrix
	movq	-144(%rbp), %rdi
	callq	FreeShadowMatrix
	movl	$1, -16(%rbp)
.LBB59_103:                             # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB59_106
# %bb.104:                              #   in Loop: Header=BB59_103 Depth=1
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.105:                              #   in Loop: Header=BB59_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_103
.LBB59_106:
	movq	-96(%rbp), %rdi
	callq	free
	movq	-112(%rbp), %rdi
	callq	free
	movq	-160(%rbp), %rax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end59:
	.size	P7ViterbiAlignAlignment, .Lfunc_end59-P7ViterbiAlignAlignment
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function ShadowTrace
.LCPI60_0:
	.quad	4652007308841189376     # double 1000
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI60_1:
	.long	1065353216              # float 1
	.text
	.globl	ShadowTrace
	.p2align	4, 0x90
	.type	ShadowTrace,@function
ShadowTrace:                            # @ShadowTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-16(%rbp), %rax
	movq	%rdi, -48(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	$6, %ecx
	movl	%ecx, -28(%rbp)
	movl	-28(%rbp), %edi
	movq	%rax, %rsi
	callq	P7AllocTrace
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movb	$9, (%rax)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	movb	$8, -1(%rbp)
.LBB60_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_25 Depth 2
                                        #     Child Loop BB60_13 Depth 2
	movsbl	-1(%rbp), %eax
	cmpl	$4, %eax
	je	.LBB60_40
# %bb.2:                                #   in Loop: Header=BB60_1 Depth=1
	movsbl	-1(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB60_36
# %bb.3:                                #   in Loop: Header=BB60_1 Depth=1
	movq	.LJTI60_0(,%rax,8), %rax
	jmpq	*%rax
.LBB60_4:                               #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_5:                               #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_6:                               #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_7:                               #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	4(%rax), %al
	movb	%al, -1(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movsbl	-1(%rbp), %eax
	cmpl	$5, %eax
	jne	.LBB60_9
# %bb.8:                                #   in Loop: Header=BB60_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	jmp	.LBB60_10
.LBB60_9:                               #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_10
.LBB60_10:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_11:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	movq	208(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	cvtsi2sdl	%eax, %xmm1
	addsd	%xmm0, %xmm1
	movq	-56(%rbp), %rax
	movq	368(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB60_18
# %bb.12:                               #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_13
.LBB60_13:                              #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -24(%rbp)
	jle	.LBB60_17
# %bb.14:                               #   in Loop: Header=BB60_13 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB60_16
# %bb.15:                               #   in Loop: Header=BB60_13 Depth=2
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	P7ReallocTrace
.LBB60_16:                              #   in Loop: Header=BB60_13 Depth=2
	jmp	.LBB60_13
.LBB60_17:                              #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_18
.LBB60_18:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$6, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_19:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$10, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	3(%rax), %al
	movb	%al, -1(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movsbl	-1(%rbp), %eax
	cmpl	$10, %eax
	jne	.LBB60_21
# %bb.20:                               #   in Loop: Header=BB60_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	jmp	.LBB60_22
.LBB60_21:                              #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_22
.LBB60_22:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_23:                              #   in Loop: Header=BB60_1 Depth=1
	movss	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -24(%rbp)
	movb	$1, -1(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-56(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-24(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	cvtsi2sdl	%eax, %xmm1
	addsd	%xmm0, %xmm1
	movq	-56(%rbp), %rax
	movq	376(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB60_31
# %bb.24:                               #   in Loop: Header=BB60_1 Depth=1
	movq	-56(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB60_25:                              #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB60_30
# %bb.26:                               #   in Loop: Header=BB60_25 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB60_28
# %bb.27:                               #   in Loop: Header=BB60_25 Depth=2
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	P7ReallocTrace
.LBB60_28:                              #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_29
.LBB60_29:                              #   in Loop: Header=BB60_25 Depth=2
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_25
.LBB60_30:                              #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_31
.LBB60_31:                              #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_37
.LBB60_32:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movb	2(%rax), %al
	movb	%al, -1(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movsbl	-1(%rbp), %eax
	cmpl	$8, %eax
	jne	.LBB60_34
# %bb.33:                               #   in Loop: Header=BB60_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	jmp	.LBB60_35
.LBB60_34:                              #   in Loop: Header=BB60_1 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_35
.LBB60_35:                              #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_37
.LBB60_36:                              #   in Loop: Header=BB60_1 Depth=1
	movsbl	-1(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.5.54, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB60_37:                              #   in Loop: Header=BB60_1 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB60_39
# %bb.38:                               #   in Loop: Header=BB60_1 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	P7ReallocTrace
.LBB60_39:                              #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_1
.LBB60_40:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$4, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rdi
	callq	P7ReverseTrace
	movq	-16(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end60:
	.size	ShadowTrace, .Lfunc_end60-ShadowTrace
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI60_0:
	.quad	.LBB60_4
	.quad	.LBB60_6
	.quad	.LBB60_5
	.quad	.LBB60_36
	.quad	.LBB60_7
	.quad	.LBB60_11
	.quad	.LBB60_23
	.quad	.LBB60_32
	.quad	.LBB60_36
	.quad	.LBB60_19
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PostprocessSignificantHit
.LCPI61_0:
	.quad	4681608360884174848     # double 1.0E+5
.LCPI61_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	PostprocessSignificantHit
	.p2align	4, 0x90
	.type	PostprocessSignificantHit,@function
PostprocessSignificantHit:              # @PostprocessSignificantHit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movq	32(%rbp), %rax
	movq	24(%rbp), %rax
	movq	16(%rbp), %rax
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -128(%rbp)
	movl	%r9d, -144(%rbp)
	movss	%xmm0, -104(%rbp)
	cmpq	$0, -160(%rbp)
	jne	.LBB61_2
# %bb.1:
	movss	-104(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -108(%rbp)
	jmp	.LBB61_60
.LBB61_2:
	leaq	-80(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	movq	-160(%rbp), %rdi
	callq	TraceDecompose
	cmpl	$0, -44(%rbp)
	jne	.LBB61_4
# %bb.3:
	movabsq	$.L.str.6.55, %rdi
	movb	$0, %al
	callq	Die
.LBB61_4:
	movabsq	$.L.str.48, %rdi
	movslq	-44(%rbp), %rdx
	shlq	$2, %rdx
	movl	$2480, %esi             # imm = 0x9B0
	callq	sre_malloc
	movabsq	$.L.str.48, %rdi
	movq	%rax, -64(%rbp)
	movslq	-44(%rbp), %rdx
	shlq	$2, %rdx
	movl	$2481, %esi             # imm = 0x9B1
	callq	sre_malloc
	xorps	%xmm0, %xmm0
	movq	%rax, -96(%rbp)
	movl	$0, -48(%rbp)
	movss	%xmm0, -40(%rbp)
	movl	$0, -36(%rbp)
.LBB61_5:                               # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_13
# %bb.6:                                #   in Loop: Header=BB61_5 Depth=1
	movq	-56(%rbp), %rdi
	movq	-128(%rbp), %rsi
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	P7TraceScore
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	cmpl	$0, 48(%rbp)
	je	.LBB61_8
# %bb.7:                                #   in Loop: Header=BB61_5 Depth=1
	movq	-56(%rbp), %rdi
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-128(%rbp), %rdx
	callq	TraceScoreCorrection
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	subss	%xmm0, %xmm1
	movss	%xmm1, (%rax,%rcx,4)
.LBB61_8:                               #   in Loop: Header=BB61_5 Depth=1
	xorps	%xmm0, %xmm0
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB61_10
# %bb.9:                                #   in Loop: Header=BB61_5 Depth=1
	movq	-96(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-40(%rbp), %xmm0
	movss	%xmm0, -40(%rbp)
	jmp	.LBB61_11
.LBB61_10:                              #   in Loop: Header=BB61_5 Depth=1
	movq	-96(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB61_11:                              #   in Loop: Header=BB61_5 Depth=1
	jmp	.LBB61_12
.LBB61_12:                              #   in Loop: Header=BB61_5 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB61_5
.LBB61_13:
	cmpl	$0, -48(%rbp)
	jne	.LBB61_15
# %bb.14:
	movq	-64(%rbp), %rdi
	movl	-44(%rbp), %esi
	callq	FArgMax
	movl	%eax, -36(%rbp)
	movq	-96(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -40(%rbp)
	movl	$1, -48(%rbp)
.LBB61_15:
	cmpl	$0, 40(%rbp)
	je	.LBB61_17
# %bb.16:
	movss	-104(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -40(%rbp)
.LBB61_17:
	movq	-56(%rbp), %rdi
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	PValue
	movsd	%xmm0, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$1, -68(%rbp)
.LBB61_18:                              # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_38
# %bb.19:                               #   in Loop: Header=BB61_18 Depth=1
	movq	-96(%rbp), %rax
	movslq	-36(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB61_21
# %bb.20:                               #   in Loop: Header=BB61_18 Depth=1
	jmp	.LBB61_37
.LBB61_21:                              #   in Loop: Header=BB61_18 Depth=1
	leaq	-100(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	leaq	-140(%rbp), %rcx
	leaq	-136(%rbp), %r8
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rdi
	movq	(%rax,%rdi,8), %rdi
	callq	TraceSimpleBounds
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	PValue
	movsd	%xmm0, -152(%rbp)
	movsd	-152(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	56(%rbp), %rax
	movsd	24(%rax), %xmm1         # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jb	.LBB61_36
# %bb.22:                               #   in Loop: Header=BB61_18 Depth=1
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	56(%rbp), %rax
	ucomiss	16(%rax), %xmm0
	jb	.LBB61_36
# %bb.23:                               #   in Loop: Header=BB61_18 Depth=1
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-56(%rbp), %rsi
	movq	-128(%rbp), %rdx
	movq	16(%rbp), %rcx
	callq	CreateFancyAli
	movq	%rax, -168(%rbp)
	cmpl	$0, 64(%rbp)
	je	.LBB61_25
# %bb.24:                               #   in Loop: Header=BB61_18 Depth=1
	movsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-100(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, -88(%rbp)
	jmp	.LBB61_26
.LBB61_25:                              #   in Loop: Header=BB61_18 Depth=1
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -88(%rbp)
.LBB61_26:                              #   in Loop: Header=BB61_18 Depth=1
	movq	-176(%rbp), %rdi
	movsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	-152(%rbp), %xmm1       # xmm1 = mem[0],zero
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm2    # xmm2 = mem[0],zero,zero,zero
	movsd	-120(%rbp), %xmm3       # xmm3 = mem[0],zero
	movss	-40(%rbp), %xmm4        # xmm4 = mem[0],zero,zero,zero
	cmpl	$0, 64(%rbp)
	je	.LBB61_28
# %bb.27:                               #   in Loop: Header=BB61_18 Depth=1
	movq	-56(%rbp), %rax
	movq	(%rax), %rsi
	jmp	.LBB61_29
.LBB61_28:                              #   in Loop: Header=BB61_18 Depth=1
	movq	16(%rbp), %rsi
.LBB61_29:                              #   in Loop: Header=BB61_18 Depth=1
	cmpl	$0, 64(%rbp)
	je	.LBB61_31
# %bb.30:                               #   in Loop: Header=BB61_18 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rdx
	jmp	.LBB61_32
.LBB61_31:                              #   in Loop: Header=BB61_18 Depth=1
	movq	24(%rbp), %rdx
.LBB61_32:                              #   in Loop: Header=BB61_18 Depth=1
	cmpl	$0, 64(%rbp)
	je	.LBB61_34
# %bb.33:                               #   in Loop: Header=BB61_18 Depth=1
	movq	-56(%rbp), %rax
	movq	16(%rax), %rcx
	jmp	.LBB61_35
.LBB61_34:                              #   in Loop: Header=BB61_18 Depth=1
	movq	32(%rbp), %rcx
.LBB61_35:                              #   in Loop: Header=BB61_18 Depth=1
	movl	-100(%rbp), %r8d
	movl	-132(%rbp), %r9d
	movl	-144(%rbp), %r14d
	movl	-140(%rbp), %r10d
	movl	-136(%rbp), %r11d
	movq	-56(%rbp), %rbx
	movl	136(%rbx), %ebx
	movl	-68(%rbp), %eax
	movl	-48(%rbp), %r15d
	movq	-168(%rbp), %r12
	movl	%r14d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movl	%eax, 32(%rsp)
	movl	%r15d, 40(%rsp)
	movq	%r12, 48(%rsp)
	callq	RegisterHit
.LBB61_36:                              #   in Loop: Header=BB61_18 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB61_37:                              #   in Loop: Header=BB61_18 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB61_18
.LBB61_38:
	cmpl	$0, 64(%rbp)
	je	.LBB61_43
# %bb.39:
	xorps	%xmm0, %xmm0
	movsd	-120(%rbp), %xmm1       # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB61_41
# %bb.40:
	movsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	log
	movsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	jmp	.LBB61_42
.LBB61_41:
	movsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	addsd	%xmm0, %xmm1
.LBB61_42:
	movsd	%xmm1, -88(%rbp)
	jmp	.LBB61_44
.LBB61_43:
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -88(%rbp)
.LBB61_44:
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	56(%rbp), %rax
	ucomiss	(%rax), %xmm0
	jb	.LBB61_55
# %bb.45:
	movq	-184(%rbp), %rdi
	movsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	-120(%rbp), %xmm1       # xmm1 = mem[0],zero
	movss	-40(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cmpl	$0, 64(%rbp)
	je	.LBB61_47
# %bb.46:
	movq	-56(%rbp), %rax
	movq	(%rax), %rsi
	jmp	.LBB61_48
.LBB61_47:
	movq	16(%rbp), %rsi
.LBB61_48:
	cmpl	$0, 64(%rbp)
	je	.LBB61_50
# %bb.49:
	movq	-56(%rbp), %rax
	movq	8(%rax), %rdx
	jmp	.LBB61_51
.LBB61_50:
	movq	24(%rbp), %rdx
.LBB61_51:
	cmpl	$0, 64(%rbp)
	je	.LBB61_53
# %bb.52:
	movq	-56(%rbp), %rax
	movq	16(%rax), %rcx
	jmp	.LBB61_54
.LBB61_53:
	movq	32(%rbp), %rcx
.LBB61_54:
	movl	-48(%rbp), %eax
	xorps	%xmm3, %xmm3
	xorps	%xmm4, %xmm4
	movl	$0, %r8d
	movl	$0, %r9d
	movl	$0, (%rsp)
	movl	$0, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	movl	%eax, 40(%rsp)
	movq	$0, 48(%rsp)
	callq	RegisterHit
.LBB61_55:
	movl	$0, -36(%rbp)
.LBB61_56:                              # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_59
# %bb.57:                               #   in Loop: Header=BB61_56 Depth=1
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	P7FreeTrace
# %bb.58:                               #   in Loop: Header=BB61_56 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB61_56
.LBB61_59:
	movq	-80(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-96(%rbp), %rdi
	callq	free
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -108(%rbp)
.LBB61_60:
	movss	-108(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	addq	$208, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end61:
	.size	PostprocessSignificantHit, .Lfunc_end61-PostprocessSignificantHit
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function ParsePAMFile
.LCPI62_0:
	.quad	4611686018427387904     # double 2
	.text
	.globl	ParsePAMFile
	.p2align	4, 0x90
	.type	ParsePAMFile,@function
ParsePAMFile:                           # @ParsePAMFile
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$704, %rsp              # imm = 0x2C0
	xorps	%xmm0, %xmm0
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -56(%rbp)
	movl	$0, -32(%rbp)
	movss	%xmm0, -36(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.LBB62_2
# %bb.1:
	movl	$2, squid_errno
	movl	$0, -20(%rbp)
	jmp	.LBB62_61
.LBB62_2:
	jmp	.LBB62_3
.LBB62_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_12 Depth 2
	leaq	-704(%rbp), %rdi
	movq	-64(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB62_5
# %bb.4:
	movl	$2, squid_errno
	movl	$0, -20(%rbp)
	jmp	.LBB62_61
.LBB62_5:                               #   in Loop: Header=BB62_3 Depth=1
	movabsq	$.L.str.56, %rsi
	leaq	-704(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB62_10
# %bb.6:                                #   in Loop: Header=BB62_3 Depth=1
	leaq	-704(%rbp), %rdi
	movl	$47, %esi
	callq	strchr
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB62_10
# %bb.7:                                #   in Loop: Header=BB62_3 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB62_9
# %bb.8:
	movl	$5, squid_errno
	movl	$0, -20(%rbp)
	jmp	.LBB62_61
.LBB62_9:                               #   in Loop: Header=BB62_3 Depth=1
	movsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	movsd	%xmm0, -72(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rdi
	callq	atof
	movsd	-72(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -36(%rbp)
	movl	$1, -32(%rbp)
	jmp	.LBB62_19
.LBB62_10:                              #   in Loop: Header=BB62_3 Depth=1
	movabsq	$.L.str.1.57, %rsi
	leaq	-704(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB62_18
# %bb.11:                               #   in Loop: Header=BB62_3 Depth=1
	jmp	.LBB62_12
.LBB62_12:                              #   Parent Loop BB62_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-704(%rbp), %rdi
	movl	$61, %esi
	callq	strrchr
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB62_16
# %bb.13:                               #   in Loop: Header=BB62_12 Depth=2
	movq	-16(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	IsReal
	cmpl	$0, %eax
	je	.LBB62_15
# %bb.14:                               #   in Loop: Header=BB62_3 Depth=1
	movq	-16(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
	movl	$1, -32(%rbp)
	jmp	.LBB62_17
.LBB62_15:                              #   in Loop: Header=BB62_12 Depth=2
	jmp	.LBB62_12
.LBB62_16:                              # %.loopexit
                                        #   in Loop: Header=BB62_3 Depth=1
	jmp	.LBB62_17
.LBB62_17:                              #   in Loop: Header=BB62_3 Depth=1
	jmp	.LBB62_18
.LBB62_18:                              #   in Loop: Header=BB62_3 Depth=1
	jmp	.LBB62_19
.LBB62_19:                              #   in Loop: Header=BB62_3 Depth=1
	jmp	.LBB62_20
.LBB62_20:                              #   in Loop: Header=BB62_3 Depth=1
	movabsq	$.L.str.2.58, %rsi
	leaq	-704(%rbp), %rdi
	callq	strtok
	movb	$1, %cl
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB62_22
# %bb.21:                               #   in Loop: Header=BB62_3 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$35, %eax
	sete	%cl
.LBB62_22:                              #   in Loop: Header=BB62_3 Depth=1
	testb	$1, %cl
	jne	.LBB62_3
# %bb.23:
	movl	$0, -4(%rbp)
.LBB62_24:                              # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$65, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movslq	-4(%rbp), %rax
	cmpl	$0, -192(%rbp,%rax,4)
	jl	.LBB62_26
# %bb.25:                               #   in Loop: Header=BB62_24 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$25, -192(%rbp,%rax,4)
	jle	.LBB62_27
.LBB62_26:                              #   in Loop: Header=BB62_24 Depth=1
	movslq	-4(%rbp), %rax
	movl	$26, -192(%rbp,%rax,4)
.LBB62_27:                              #   in Loop: Header=BB62_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.28:                               #   in Loop: Header=BB62_24 Depth=1
	movabsq	$.L.str.2.58, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB62_24
# %bb.29:
	movl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$27, %edi
	movl	$8, %esi
	callq	calloc
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB62_31
# %bb.30:
	movabsq	$.L.str.3.59, %rdi
	movb	$0, %al
	callq	Die
.LBB62_31:
	movl	$0, -4(%rbp)
.LBB62_32:                              # =>This Inner Loop Header: Depth=1
	cmpl	$27, -4(%rbp)
	jge	.LBB62_37
# %bb.33:                               #   in Loop: Header=BB62_32 Depth=1
	movl	$27, %edi
	movl	$4, %esi
	callq	calloc
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_35
# %bb.34:                               #   in Loop: Header=BB62_32 Depth=1
	movabsq	$.L.str.3.59, %rdi
	movb	$0, %al
	callq	Die
.LBB62_35:                              #   in Loop: Header=BB62_32 Depth=1
	jmp	.LBB62_36
.LBB62_36:                              #   in Loop: Header=BB62_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_32
.LBB62_37:
	movl	$0, -28(%rbp)
.LBB62_38:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_44 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_55
# %bb.39:                               #   in Loop: Header=BB62_38 Depth=1
	leaq	-704(%rbp), %rdi
	movq	-64(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB62_41
# %bb.40:
	movl	$2, squid_errno
	movl	$0, -20(%rbp)
	jmp	.LBB62_61
.LBB62_41:                              #   in Loop: Header=BB62_38 Depth=1
	movabsq	$.L.str.2.58, %rsi
	leaq	-704(%rbp), %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB62_43
# %bb.42:
	movl	$2, squid_errno
	movl	$0, -20(%rbp)
	jmp	.LBB62_61
.LBB62_43:                              #   in Loop: Header=BB62_38 Depth=1
	movl	$0, -24(%rbp)
.LBB62_44:                              #   Parent Loop BB62_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_53
# %bb.45:                               #   in Loop: Header=BB62_44 Depth=2
	cmpq	$0, -16(%rbp)
	jne	.LBB62_47
# %bb.46:
	movl	$2, squid_errno
	movl	$0, -20(%rbp)
	jmp	.LBB62_61
.LBB62_47:                              #   in Loop: Header=BB62_44 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$42, %eax
	je	.LBB62_49
# %bb.48:                               #   in Loop: Header=BB62_44 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB62_50
.LBB62_49:                              #   in Loop: Header=BB62_44 Depth=2
	movl	-24(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_51
.LBB62_50:                              #   in Loop: Header=BB62_44 Depth=2
	movq	-16(%rbp), %rdi
	callq	atoi
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movslq	-192(%rbp,%rdx,4), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movslq	-192(%rbp,%rdx,4), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB62_51:                              #   in Loop: Header=BB62_44 Depth=2
	movabsq	$.L.str.2.58, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -16(%rbp)
# %bb.52:                               #   in Loop: Header=BB62_44 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_44
.LBB62_53:                              #   in Loop: Header=BB62_38 Depth=1
	jmp	.LBB62_54
.LBB62_54:                              #   in Loop: Header=BB62_38 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_38
.LBB62_55:
	cmpq	$0, -56(%rbp)
	je	.LBB62_60
# %bb.56:
	cmpl	$0, -32(%rbp)
	je	.LBB62_58
# %bb.57:
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movss	%xmm0, (%rax)
	jmp	.LBB62_59
.LBB62_58:
	movabsq	$.L.str.4.60, %rdi
	movb	$0, %al
	callq	Warn
	movsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	movsd	.LCPI62_0(%rip), %xmm1  # xmm1 = mem[0],zero
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movss	%xmm0, (%rax)
.LBB62_59:
	jmp	.LBB62_60
.LBB62_60:
	movq	-48(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -20(%rbp)
.LBB62_61:
	movl	-20(%rbp), %eax
	addq	$704, %rsp              # imm = 0x2C0
	popq	%rbp
	retq
.Lfunc_end62:
	.size	ParsePAMFile, .Lfunc_end62-ParsePAMFile
	.cfi_endproc
                                        # -- End function
	.globl	Statetype               # -- Begin function Statetype
	.p2align	4, 0x90
	.type	Statetype,@function
Statetype:                              # @Statetype
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movb	%dil, -1(%rbp)
	movsbl	-1(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB63_12
# %bb.1:
	movq	.LJTI63_0(,%rax,8), %rax
	jmpq	*%rax
.LBB63_2:
	movabsq	$.L.str.63, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_3:
	movabsq	$.L.str.1.64, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_4:
	movabsq	$.L.str.2.65, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_5:
	movabsq	$.L.str.3.66, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_6:
	movabsq	$.L.str.4.67, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_7:
	movabsq	$.L.str.5.68, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_8:
	movabsq	$.L.str.6.69, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_9:
	movabsq	$.L.str.7.70, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_10:
	movabsq	$.L.str.8.71, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_11:
	movabsq	$.L.str.9.72, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB63_13
.LBB63_12:
	movabsq	$.L.str.10.73, %rax
	movq	%rax, -16(%rbp)
.LBB63_13:
	movq	-16(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end63:
	.size	Statetype, .Lfunc_end63-Statetype
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI63_0:
	.quad	.LBB63_5
	.quad	.LBB63_6
	.quad	.LBB63_7
	.quad	.LBB63_2
	.quad	.LBB63_3
	.quad	.LBB63_4
	.quad	.LBB63_8
	.quad	.LBB63_10
	.quad	.LBB63_11
	.quad	.LBB63_9
                                        # -- End function
	.text
	.globl	AlphabetType2String     # -- Begin function AlphabetType2String
	.p2align	4, 0x90
	.type	AlphabetType2String,@function
AlphabetType2String:                    # @AlphabetType2String
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	testl	%eax, %eax
	je	.LBB64_5
	jmp	.LBB64_1
.LBB64_1:
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB64_4
	jmp	.LBB64_2
.LBB64_2:
	subl	$3, %eax
	jne	.LBB64_6
	jmp	.LBB64_3
.LBB64_3:
	movabsq	$.L.str.11.74, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB64_7
.LBB64_4:
	movabsq	$.L.str.12.75, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB64_7
.LBB64_5:
	movabsq	$.L.str.13.76, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB64_7
.LBB64_6:
	movabsq	$.L.str.10.73, %rax
	movq	%rax, -8(%rbp)
.LBB64_7:
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end64:
	.size	AlphabetType2String, .Lfunc_end64-AlphabetType2String
	.cfi_endproc
                                        # -- End function
	.globl	P7PrintTrace            # -- Begin function P7PrintTrace
	.p2align	4, 0x90
	.type	P7PrintTrace,@function
P7PrintTrace:                           # @P7PrintTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.LBB65_2
# %bb.1:
	movabsq	$.L.str.14.77, %rsi
	movq	-64(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB65_38
.LBB65_2:
	cmpq	$0, -72(%rbp)
	jne	.LBB65_8
# %bb.3:
	movabsq	$.L.str.15.78, %rsi
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rax
	movl	(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.16.79, %rsi
	movq	-64(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -36(%rbp)
.LBB65_4:                               # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB65_7
# %bb.5:                                #   in Loop: Header=BB65_4 Depth=1
	movq	-64(%rbp), %rbx
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.17.80, %rsi
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-48(%rbp), %rdx
	movq	24(%rdx), %rdx
	movslq	-36(%rbp), %rdi
	movl	(%rdx,%rdi,4), %r8d
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
# %bb.6:                                #   in Loop: Header=BB65_4 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_4
.LBB65_7:
	jmp	.LBB65_38
.LBB65_8:
	movq	-72(%rbp), %rax
	movl	456(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB65_10
# %bb.9:
	movabsq	$.L.str.18.81, %rdi
	movb	$0, %al
	callq	Die
.LBB65_10:
	movabsq	$.L.str.19.82, %rsi
	movl	$0, -52(%rbp)
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rax
	movl	(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.20.83, %rsi
	movq	-64(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -36(%rbp)
.LBB65_11:                              # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB65_37
# %bb.12:                               #   in Loop: Header=BB65_11 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB65_14
# %bb.13:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-80(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
.LBB65_14:                              #   in Loop: Header=BB65_11 Depth=1
	movq	-64(%rbp), %r14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %r15
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %r12d
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-36(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_16
# %bb.15:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-72(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %r9b
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %edx
	movq	-48(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	(%rcx,%rsi), %cl
	movq	-48(%rbp), %rsi
	movq	16(%rsi), %rsi
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	(%rsi,%rax,4), %r8d
	movsbl	%r9b, %esi
	movsbl	%cl, %ecx
	callq	TransitionScoreLookup
	movl	%eax, %r9d
	jmp	.LBB65_17
.LBB65_16:                              #   in Loop: Header=BB65_11 Depth=1
	xorl	%r9d, %r9d
	jmp	.LBB65_17
.LBB65_17:                              #   in Loop: Header=BB65_11 Depth=1
	movabsq	$.L.str.21.84, %rsi
	movq	%r14, %rdi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movl	%ebx, %r8d
	movb	$0, %al
	callq	fprintf
	movl	-36(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_19
# %bb.18:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-72(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %edx
	movq	-48(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	(%rcx,%rsi), %cl
	movq	-48(%rbp), %rsi
	movq	16(%rsi), %rsi
	movl	-36(%rbp), %ebx
	addl	$1, %ebx
	movslq	%ebx, %rbx
	movl	(%rsi,%rbx,4), %r8d
	movsbl	%al, %esi
	movsbl	%cl, %ecx
	callq	TransitionScoreLookup
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB65_19:                              #   in Loop: Header=BB65_11 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB65_34
# %bb.20:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB65_22
# %bb.21:                               #   in Loop: Header=BB65_11 Depth=1
	movabsq	$.L.str.22.85, %rsi
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	320(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	movslq	-56(%rbp), %rax
	movsbl	Alphabet(,%rax), %ecx
	movb	$0, %al
	callq	fprintf
	movq	-72(%rbp), %rax
	movq	320(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB65_33
.LBB65_22:                              #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB65_24
# %bb.23:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-64(%rbp), %r14
	movq	-72(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %ebx
	movslq	-56(%rbp), %rax
	movsbl	Alphabet(,%rax), %edi
	callq	tolower
	movabsq	$.L.str.22.85, %rsi
	movsbl	%al, %ecx
	movq	%r14, %rdi
	movl	%ebx, %edx
	movb	$0, %al
	callq	fprintf
	movq	-72(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB65_32
.LBB65_24:                              #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	jne	.LBB65_26
# %bb.25:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	je	.LBB65_30
.LBB65_26:                              #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	jne	.LBB65_28
# %bb.27:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	je	.LBB65_30
.LBB65_28:                              #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$10, %eax
	jne	.LBB65_31
# %bb.29:                               #   in Loop: Header=BB65_11 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$10, %eax
	jne	.LBB65_31
.LBB65_30:                              #   in Loop: Header=BB65_11 Depth=1
	movq	-64(%rbp), %rbx
	movslq	-56(%rbp), %rax
	movsbl	Alphabet(,%rax), %edi
	callq	tolower
	movabsq	$.L.str.22.85, %rsi
	movsbl	%al, %ecx
	movq	%rbx, %rdi
	xorl	%edx, %edx
	movb	$0, %al
	callq	fprintf
.LBB65_31:                              #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_32
.LBB65_32:                              #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_33
.LBB65_33:                              #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_35
.LBB65_34:                              #   in Loop: Header=BB65_11 Depth=1
	movabsq	$.L.str.23.86, %rsi
	movabsq	$.L.str.24.87, %rdx
	movq	-64(%rbp), %rdi
	movl	$45, %ecx
	movb	$0, %al
	callq	fprintf
.LBB65_35:                              #   in Loop: Header=BB65_11 Depth=1
	movabsq	$.L.str.25.88, %rdi
	movq	-64(%rbp), %rsi
	callq	fputs
# %bb.36:                               #   in Loop: Header=BB65_11 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_11
.LBB65_37:
	movabsq	$.L.str.26, %rsi
	movq	-64(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.27, %rsi
	movq	-64(%rbp), %rdi
	movl	-52(%rbp), %edx
	movb	$0, %al
	callq	fprintf
.LBB65_38:
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end65:
	.size	P7PrintTrace, .Lfunc_end65-P7PrintTrace
	.cfi_endproc
                                        # -- End function
	.globl	P7PrintPrior            # -- Begin function P7PrintPrior
	.p2align	4, 0x90
	.type	P7PrintPrior,@function
P7PrintPrior:                           # @P7PrintPrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB66_2
# %bb.1:
	movabsq	$.L.str.28, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
	jmp	.LBB66_6
.LBB66_2:
	movq	-24(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB66_4
# %bb.3:
	movabsq	$.L.str.29, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
	jmp	.LBB66_5
.LBB66_4:
	movabsq	$.L.str.30, %rdi
	movb	$0, %al
	callq	Die
.LBB66_5:
	jmp	.LBB66_6
.LBB66_6:
	cmpl	$3, Alphabet_type
	jne	.LBB66_8
# %bb.7:
	movabsq	$.L.str.31, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
	jmp	.LBB66_11
.LBB66_8:
	cmpl	$2, Alphabet_type
	jne	.LBB66_10
# %bb.9:
	movabsq	$.L.str.32, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
.LBB66_10:
	jmp	.LBB66_11
.LBB66_11:
	movabsq	$.L.str.33.89, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	4(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB66_12:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_14 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB66_19
# %bb.13:                               #   in Loop: Header=BB66_12 Depth=1
	movabsq	$.L.str.34, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	8(%rax,%rcx,4), %xmm0   # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB66_14:                              #   Parent Loop BB66_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$7, -8(%rbp)
	jge	.LBB66_17
# %bb.15:                               #   in Loop: Header=BB66_14 Depth=2
	movabsq	$.L.str.35, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
# %bb.16:                               #   in Loop: Header=BB66_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_14
.LBB66_17:                              #   in Loop: Header=BB66_12 Depth=1
	movabsq	$.L.str.25.88, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
# %bb.18:                               #   in Loop: Header=BB66_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_12
.LBB66_19:
	movabsq	$.L.str.33.89, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	6408(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB66_20:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_22 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	6408(%rcx), %eax
	jge	.LBB66_27
# %bb.21:                               #   in Loop: Header=BB66_20 Depth=1
	movabsq	$.L.str.34, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	6412(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB66_22:                              #   Parent Loop BB66_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB66_25
# %bb.23:                               #   in Loop: Header=BB66_22 Depth=2
	movabsq	$.L.str.35, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	addq	$7212, %rax             # imm = 0x1C2C
	movslq	-4(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
# %bb.24:                               #   in Loop: Header=BB66_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_22
.LBB66_25:                              #   in Loop: Header=BB66_20 Depth=1
	movabsq	$.L.str.25.88, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
# %bb.26:                               #   in Loop: Header=BB66_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_20
.LBB66_27:
	movabsq	$.L.str.33.89, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	23212(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB66_28:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_30 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	23212(%rcx), %eax
	jge	.LBB66_35
# %bb.29:                               #   in Loop: Header=BB66_28 Depth=1
	movabsq	$.L.str.34, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	23216(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB66_30:                              #   Parent Loop BB66_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB66_33
# %bb.31:                               #   in Loop: Header=BB66_30 Depth=2
	movabsq	$.L.str.35, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	addq	$24016, %rax            # imm = 0x5DD0
	movslq	-4(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
# %bb.32:                               #   in Loop: Header=BB66_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_30
.LBB66_33:                              #   in Loop: Header=BB66_28 Depth=1
	movabsq	$.L.str.25.88, %rdi
	movq	-16(%rbp), %rsi
	callq	fputs
# %bb.34:                               #   in Loop: Header=BB66_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_28
.LBB66_35:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end66:
	.size	P7PrintPrior, .Lfunc_end66-P7PrintPrior
	.cfi_endproc
                                        # -- End function
	.globl	TraceVerify             # -- Begin function TraceVerify
	.p2align	4, 0x90
	.type	TraceVerify,@function
TraceVerify:                            # @TraceVerify
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$4, %eax
	je	.LBB67_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_2:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movsbl	1(%rax), %eax
	cmpl	$5, %eax
	je	.LBB67_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_4:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	je	.LBB67_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_6:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$9, %eax
	je	.LBB67_8
# %bb.7:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_8:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB67_10
# %bb.9:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_10:
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB67_11:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB67_112
# %bb.12:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB67_108
# %bb.13:                               #   in Loop: Header=BB67_11 Depth=1
	movq	.LJTI67_0(,%rax,8), %rax
	jmpq	*%rax
.LBB67_14:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_16
# %bb.15:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_16:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_18
# %bb.17:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_18:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB67_20
# %bb.19:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_20:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB67_22
# %bb.21:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_22:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -8(%rbp)
	je	.LBB67_24
# %bb.23:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_24:                              #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_110
.LBB67_25:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_27
# %bb.26:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_27:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB67_29
# %bb.28:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_29:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB67_33
# %bb.30:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_32
# %bb.31:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_32:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_38
.LBB67_33:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_35
# %bb.34:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_35:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB67_37
# %bb.36:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_37:                              #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_38
.LBB67_38:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB67_110
.LBB67_39:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_41
# %bb.40:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_41:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_43
# %bb.42:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_43:                              #   in Loop: Header=BB67_11 Depth=1
	movl	$0, -28(%rbp)
	jmp	.LBB67_110
.LBB67_44:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_46
# %bb.45:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_46:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jl	.LBB67_48
# %bb.47:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB67_49
.LBB67_48:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_49:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB67_51
# %bb.50:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_54
.LBB67_51:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_53
# %bb.52:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_53:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB67_54:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_110
.LBB67_55:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_57
# %bb.56:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_57:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB67_59
# %bb.58:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_59:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jl	.LBB67_61
# %bb.60:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_62
.LBB67_61:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_62:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB67_64
# %bb.63:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_64:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_110
.LBB67_65:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_67
# %bb.66:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_67:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_69
# %bb.68:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_69:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jl	.LBB67_71
# %bb.70:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB67_72
.LBB67_71:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_72:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_110
.LBB67_73:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_75
# %bb.74:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_75:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_77
# %bb.76:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_77:                              #   in Loop: Header=BB67_11 Depth=1
	movl	$0, -32(%rbp)
	jmp	.LBB67_110
.LBB67_78:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_80
# %bb.79:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_80:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -32(%rbp)
	jle	.LBB67_84
# %bb.81:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_83
# %bb.82:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_83:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_87
.LBB67_84:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_86
# %bb.85:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_86:                              #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_87
.LBB67_87:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_110
.LBB67_88:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_90
# %bb.89:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_90:                              #   in Loop: Header=BB67_11 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB67_94
# %bb.91:                               #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_93
# %bb.92:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_93:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_97
.LBB67_94:                              #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_96
# %bb.95:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_96:                              #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_97
.LBB67_97:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB67_110
.LBB67_98:                              #   in Loop: Header=BB67_11 Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB67_100
# %bb.99:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_100:                             #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_102
# %bb.101:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_102:                             #   in Loop: Header=BB67_11 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_104
# %bb.103:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_104:                             #   in Loop: Header=BB67_11 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB67_106
# %bb.105:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_106:                             #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_110
.LBB67_107:
	jmp	.LBB67_109
.LBB67_108:                             # %.loopexit
	jmp	.LBB67_109
.LBB67_109:
	movl	$0, -4(%rbp)
	jmp	.LBB67_113
.LBB67_110:                             #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_111
.LBB67_111:                             #   in Loop: Header=BB67_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_11
.LBB67_112:
	movl	$1, -4(%rbp)
.LBB67_113:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end67:
	.size	TraceVerify, .Lfunc_end67-TraceVerify
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI67_0:
	.quad	.LBB67_107
	.quad	.LBB67_44
	.quad	.LBB67_65
	.quad	.LBB67_55
	.quad	.LBB67_14
	.quad	.LBB67_25
	.quad	.LBB67_39
	.quad	.LBB67_73
	.quad	.LBB67_88
	.quad	.LBB67_98
	.quad	.LBB67_78
                                        # -- End function
	.text
	.globl	TraceCompare            # -- Begin function TraceCompare
	.p2align	4, 0x90
	.type	TraceCompare,@function
TraceCompare:                           # @TraceCompare
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB68_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB68_13
.LBB68_2:
	movl	$0, -4(%rbp)
.LBB68_3:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB68_12
# %bb.4:                                #   in Loop: Header=BB68_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	%ecx, %eax
	je	.LBB68_6
# %bb.5:
	movl	$0, -8(%rbp)
	jmp	.LBB68_13
.LBB68_6:                               #   in Loop: Header=BB68_3 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	je	.LBB68_8
# %bb.7:
	movl	$0, -8(%rbp)
	jmp	.LBB68_13
.LBB68_8:                               #   in Loop: Header=BB68_3 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	je	.LBB68_10
# %bb.9:
	movl	$0, -8(%rbp)
	jmp	.LBB68_13
.LBB68_10:                              #   in Loop: Header=BB68_3 Depth=1
	jmp	.LBB68_11
.LBB68_11:                              #   in Loop: Header=BB68_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_3
.LBB68_12:
	movl	$1, -8(%rbp)
.LBB68_13:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end68:
	.size	TraceCompare, .Lfunc_end68-TraceCompare
	.cfi_endproc
                                        # -- End function
	.globl	DisplayPlan7Posteriors  # -- Begin function DisplayPlan7Posteriors
	.p2align	4, 0x90
	.type	DisplayPlan7Posteriors,@function
DisplayPlan7Posteriors:                 # @DisplayPlan7Posteriors
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-64(%rbp), %rax
	movl	%edi, -4(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -24(%rbp)
	movq	%r9, -16(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movl	-4(%rbp), %edi
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	%rax, %r8
	movl	$2, %r9d
	callq	DisplayPlan7PostAlign
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end69:
	.size	DisplayPlan7Posteriors, .Lfunc_end69-DisplayPlan7Posteriors
	.cfi_endproc
                                        # -- End function
	.globl	DisplayPlan7PostAlign   # -- Begin function DisplayPlan7PostAlign
	.p2align	4, 0x90
	.type	DisplayPlan7PostAlign,@function
DisplayPlan7PostAlign:                  # @DisplayPlan7PostAlign
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, -60(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%r8, -88(%rbp)
	movl	%r9d, -40(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	352(%rcx), %eax
	movl	%eax, -44(%rbp)
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, -80(%rbp)
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, -72(%rbp)
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, -96(%rbp)
	movl	$0, -28(%rbp)
.LBB70_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
                                        #       Child Loop BB70_5 Depth 3
                                        #       Child Loop BB70_10 Depth 3
                                        #     Child Loop BB70_17 Depth 2
                                        #       Child Loop BB70_29 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jg	.LBB70_76
# %bb.2:                                #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -48(%rbp)
.LBB70_3:                               #   Parent Loop BB70_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_5 Depth 3
                                        #       Child Loop BB70_10 Depth 3
	movl	-48(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB70_16
# %bb.4:                                #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_5
.LBB70_5:                               #   Parent Loop BB70_1 Depth=1
                                        #     Parent Loop BB70_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movq	-80(%rbp), %rdx
	movslq	-48(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jge	.LBB70_7
# %bb.6:                                #   in Loop: Header=BB70_5 Depth=3
	movq	-80(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	setl	%al
.LBB70_7:                               #   in Loop: Header=BB70_5 Depth=3
	testb	$1, %al
	jne	.LBB70_8
	jmp	.LBB70_9
.LBB70_8:                               #   in Loop: Header=BB70_5 Depth=3
	movq	-80(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB70_5
.LBB70_9:                               #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_10
.LBB70_10:                              #   Parent Loop BB70_1 Depth=1
                                        #     Parent Loop BB70_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movq	-72(%rbp), %rdx
	movslq	-48(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	cmpl	%edx, %ecx
	jg	.LBB70_12
# %bb.11:                               #   in Loop: Header=BB70_10 Depth=3
	movq	-72(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-88(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	setl	%al
.LBB70_12:                              #   in Loop: Header=BB70_10 Depth=3
	testb	$1, %al
	jne	.LBB70_13
	jmp	.LBB70_14
.LBB70_13:                              #   in Loop: Header=BB70_10 Depth=3
	movq	-72(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB70_10
.LBB70_14:                              #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_15
.LBB70_15:                              #   in Loop: Header=BB70_3 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB70_3
.LBB70_16:                              #   in Loop: Header=BB70_1 Depth=1
	movb	$1, -33(%rbp)
.LBB70_17:                              #   Parent Loop BB70_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_29 Depth 3
	movsbl	-33(%rbp), %eax
	cmpl	$10, %eax
	jg	.LBB70_74
# %bb.18:                               #   in Loop: Header=BB70_17 Depth=2
	movsbl	-33(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB70_20
# %bb.19:                               #   in Loop: Header=BB70_17 Depth=2
	movsbl	-33(%rbp), %eax
	cmpl	$6, %eax
	jne	.LBB70_21
.LBB70_20:                              #   in Loop: Header=BB70_17 Depth=2
	movl	$1, -120(%rbp)
	movq	-56(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB70_28
.LBB70_21:                              #   in Loop: Header=BB70_17 Depth=2
	movsbl	-33(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB70_23
# %bb.22:                               #   in Loop: Header=BB70_17 Depth=2
	movl	$2, -120(%rbp)
	movq	-56(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB70_27
.LBB70_23:                              #   in Loop: Header=BB70_17 Depth=2
	movsbl	-33(%rbp), %eax
	cmpl	$3, %eax
	jne	.LBB70_25
# %bb.24:                               #   in Loop: Header=BB70_17 Depth=2
	movl	$1, -120(%rbp)
	movq	-56(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB70_26
.LBB70_25:                              #   in Loop: Header=BB70_17 Depth=2
	movl	$0, -116(%rbp)
	movl	$0, -120(%rbp)
.LBB70_26:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_27
.LBB70_27:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_28
.LBB70_28:                              #   in Loop: Header=BB70_17 Depth=2
	movl	-120(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB70_29:                              #   Parent Loop BB70_1 Depth=1
                                        #     Parent Loop BB70_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-32(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB70_55
# %bb.30:                               #   in Loop: Header=BB70_29 Depth=3
	movsbl	-33(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$5, %ecx
	ja	.LBB70_52
# %bb.31:                               #   in Loop: Header=BB70_29 Depth=3
	movq	.LJTI70_1(,%rax,8), %rax
	jmpq	*%rax
.LBB70_32:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_35
# %bb.33:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-32(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB70_35
# %bb.34:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	-32(%rbp), %r9d
	addl	$1, %r9d
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movl	-32(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %r10
	movq	-80(%rbp), %r11
	movq	-72(%rbp), %rbx
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$1, %edi
	movl	$1, %ecx
	movl	%eax, (%rsp)
	movq	%r10, 8(%rsp)
	movq	%r11, 16(%rsp)
	movq	%rbx, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_35:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_38
# %bb.36:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-32(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB70_38
# %bb.37:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	-32(%rbp), %r9d
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$1, %edi
	movl	$3, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_38:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-32(%rbp), %eax
	movq	-56(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_40
# %bb.39:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	movl	-32(%rbp), %r9d
	addl	$1, %r9d
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-28(%rbp), %rdi
	movq	(%rcx,%rdi,8), %rcx
	movl	-32(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$1, %edi
	movl	$2, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_40:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdi
	movq	(%rcx,%rdi,8), %rcx
	addl	4(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$1, %edi
	movl	$7, %ecx
	movl	$0, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	jmp	.LBB70_53
.LBB70_41:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_43
# %bb.42:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	-32(%rbp), %r9d
	addl	$1, %r9d
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movl	-32(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$2, %edi
	movl	$1, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_43:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	movl	-32(%rbp), %r9d
	addl	$1, %r9d
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-28(%rbp), %rdi
	movq	(%rcx,%rdi,8), %rcx
	movl	-32(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$2, %edi
	movl	$2, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	jmp	.LBB70_53
.LBB70_44:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_46
# %bb.45:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	-32(%rbp), %r9d
	addl	$1, %r9d
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movl	-32(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$3, %edi
	movl	$1, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_46:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_48
# %bb.47:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	-32(%rbp), %r9d
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	movq	-112(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movslq	-32(%rbp), %rdi
	addl	(%rcx,%rdi,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$3, %edi
	movl	$3, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_48:                              #   in Loop: Header=BB70_29 Depth=3
	jmp	.LBB70_53
.LBB70_49:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_51
# %bb.50:                               #   in Loop: Header=BB70_29 Depth=3
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	-32(%rbp), %r9d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-112(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$6, %edi
	xorl	%edx, %edx
	movl	$1, %ecx
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_51:                              #   in Loop: Header=BB70_29 Depth=3
	jmp	.LBB70_53
.LBB70_52:                              #   in Loop: Header=BB70_29 Depth=3
	jmp	.LBB70_53
.LBB70_53:                              #   in Loop: Header=BB70_29 Depth=3
	jmp	.LBB70_54
.LBB70_54:                              #   in Loop: Header=BB70_29 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB70_29
.LBB70_55:                              #   in Loop: Header=BB70_17 Depth=2
	movsbl	-33(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB70_71
# %bb.56:                               #   in Loop: Header=BB70_17 Depth=2
	movq	.LJTI70_0(,%rax,8), %rax
	jmpq	*%rax
.LBB70_57:                              #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	336(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$5, %edi
	xorl	%edx, %edx
	movl	$6, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_59
# %bb.58:                               #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	340(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	16(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$5, %edi
	xorl	%edx, %edx
	movl	$5, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_59:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_72
.LBB70_60:                              #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	360(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$10, %edi
	xorl	%edx, %edx
	movl	$6, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_62
# %bb.61:                               #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	364(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	12(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$10, %edi
	xorl	%edx, %edx
	movl	$10, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_62:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_72
.LBB70_63:                              #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	352(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$8, %edi
	xorl	%edx, %edx
	movl	$9, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB70_65
# %bb.64:                               #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	356(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	8(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$8, %edi
	xorl	%edx, %edx
	movl	$8, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_65:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_72
.LBB70_66:                              #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	344(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	8(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$7, %edi
	xorl	%edx, %edx
	movl	$8, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	348(%rcx), %eax
	movq	-112(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	12(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$7, %edi
	xorl	%edx, %edx
	movl	$10, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
	jmp	.LBB70_72
.LBB70_67:                              #   in Loop: Header=BB70_17 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB70_69
# %bb.68:                               #   in Loop: Header=BB70_17 Depth=2
	movl	-28(%rbp), %esi
	movl	-28(%rbp), %r8d
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-88(%rbp), %rbx
	movq	-80(%rbp), %r10
	movq	-72(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	-40(%rbp), %r15d
	movl	$4, %edi
	xorl	%edx, %edx
	movl	$5, %ecx
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	PrintTransition
.LBB70_69:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_72
.LBB70_70:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_72
.LBB70_71:                              #   in Loop: Header=BB70_17 Depth=2
	movabsq	$.L.str.90, %rdi
	movb	$0, %al
	callq	Die
.LBB70_72:                              #   in Loop: Header=BB70_17 Depth=2
	jmp	.LBB70_73
.LBB70_73:                              #   in Loop: Header=BB70_17 Depth=2
	movb	-33(%rbp), %al
	addb	$1, %al
	movb	%al, -33(%rbp)
	jmp	.LBB70_17
.LBB70_74:                              #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_75
.LBB70_75:                              #   in Loop: Header=BB70_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB70_1
.LBB70_76:
	movq	-80(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rdi
	callq	free
	movq	-96(%rbp), %rdi
	callq	free
	addq	$152, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end70:
	.size	DisplayPlan7PostAlign, .Lfunc_end70-DisplayPlan7PostAlign
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI70_0:
	.quad	.LBB70_70
	.quad	.LBB70_70
	.quad	.LBB70_70
	.quad	.LBB70_67
	.quad	.LBB70_57
	.quad	.LBB70_70
	.quad	.LBB70_66
	.quad	.LBB70_63
	.quad	.LBB70_70
	.quad	.LBB70_60
.LJTI70_1:
	.quad	.LBB70_32
	.quad	.LBB70_41
	.quad	.LBB70_44
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_49
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function PrintTransition
.LCPI71_0:
	.long	1065353216              # float 1
	.text
	.globl	PrintTransition
	.p2align	4, 0x90
	.type	PrintTransition,@function
PrintTransition:                        # @PrintTransition
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$64, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	56(%rbp), %eax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movq	24(%rbp), %rax
	movl	16(%rbp), %eax
	movb	%dil, -38(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -72(%rbp)
	movb	%cl, -37(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB71_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
                                        #       Child Loop BB71_17 Depth 3
	movl	-36(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB71_36
# %bb.2:                                #   in Loop: Header=BB71_1 Depth=1
	movq	48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -64(%rbp)
	movq	32(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
.LBB71_3:                               #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_17 Depth 3
	movl	-44(%rbp), %eax
	movq	40(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB71_34
# %bb.4:                                #   in Loop: Header=BB71_3 Depth=2
	movq	24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB71_6
# %bb.5:                                #   in Loop: Header=BB71_3 Depth=2
	movq	24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -64(%rbp)
.LBB71_6:                               #   in Loop: Header=BB71_3 Depth=2
	movsbl	-38(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_10
# %bb.7:                                #   in Loop: Header=BB71_3 Depth=2
	movl	-72(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB71_10
# %bb.8:                                #   in Loop: Header=BB71_3 Depth=2
	movl	-88(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB71_10
# %bb.9:                                #   in Loop: Header=BB71_3 Depth=2
	movl	$1, -76(%rbp)
.LBB71_10:                              #   in Loop: Header=BB71_3 Depth=2
	movsbl	-37(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_14
# %bb.11:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-68(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB71_14
# %bb.12:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-84(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB71_14
# %bb.13:                               #   in Loop: Header=BB71_3 Depth=2
	movl	$1, -76(%rbp)
.LBB71_14:                              #   in Loop: Header=BB71_3 Depth=2
	movl	-44(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_32
# %bb.15:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movq	24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB71_22
# %bb.16:                               #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_17
.LBB71_17:                              #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$2, %ecx
	jne	.LBB71_19
# %bb.18:                               #   in Loop: Header=BB71_17 Depth=3
	movl	-48(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	setl	%al
.LBB71_19:                              #   in Loop: Header=BB71_17 Depth=3
	testb	$1, %al
	jne	.LBB71_20
	jmp	.LBB71_21
.LBB71_20:                              #   in Loop: Header=BB71_17 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB71_17
.LBB71_21:                              #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_22
.LBB71_22:                              #   in Loop: Header=BB71_3 Depth=2
	movq	24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB71_24
# %bb.23:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB71_24:                              #   in Loop: Header=BB71_3 Depth=2
	movsbl	-38(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_31
# %bb.25:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-72(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB71_31
# %bb.26:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-88(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB71_31
# %bb.27:                               #   in Loop: Header=BB71_3 Depth=2
	movsbl	-37(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_31
# %bb.28:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-68(%rbp), %eax
	movq	24(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB71_31
# %bb.29:                               #   in Loop: Header=BB71_3 Depth=2
	movl	-84(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jne	.LBB71_31
# %bb.30:                               #   in Loop: Header=BB71_3 Depth=2
	movq	48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB71_31:                              #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_32
.LBB71_32:                              #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_33
.LBB71_33:                              #   in Loop: Header=BB71_3 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB71_3
.LBB71_34:                              #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_35
.LBB71_35:                              #   in Loop: Header=BB71_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_1
.LBB71_36:
	cmpl	$0, -76(%rbp)
	jne	.LBB71_38
# %bb.37:
	jmp	.LBB71_73
.LBB71_38:
	movsbl	-38(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB71_50
# %bb.39:
	movq	.LJTI71_0(,%rax,8), %rax
	jmpq	*%rax
.LBB71_40:
	movabsq	$.L.str.13.91, %rsi
	leaq	-60(%rbp), %rdi
	movl	-72(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_41:
	movabsq	$.L.str.14.92, %rsi
	leaq	-60(%rbp), %rdi
	movl	-72(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_42:
	movabsq	$.L.str.15.93, %rsi
	leaq	-60(%rbp), %rdi
	movl	-72(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_43:
	movabsq	$.L.str.16.94, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_44:
	movabsq	$.L.str.17.95, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_45:
	movabsq	$.L.str.18.96, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_46:
	movabsq	$.L.str.19.97, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_47:
	movabsq	$.L.str.20.98, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_48:
	movabsq	$.L.str.21.99, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_49:
	movabsq	$.L.str.22.100, %rsi
	leaq	-60(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_51
.LBB71_50:
	movabsq	$.L.str.23.101, %rdi
	movb	$0, %al
	callq	Die
.LBB71_51:
	movsbl	-37(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB71_63
# %bb.52:
	movq	.LJTI71_1(,%rax,8), %rax
	jmpq	*%rax
.LBB71_53:
	movabsq	$.L.str.13.91, %rsi
	leaq	-54(%rbp), %rdi
	movl	-68(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_54:
	movabsq	$.L.str.14.92, %rsi
	leaq	-54(%rbp), %rdi
	movl	-68(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_55:
	movabsq	$.L.str.15.93, %rsi
	leaq	-54(%rbp), %rdi
	movl	-68(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_56:
	movabsq	$.L.str.16.94, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_57:
	movabsq	$.L.str.17.95, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_58:
	movabsq	$.L.str.18.96, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_59:
	movabsq	$.L.str.19.97, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_60:
	movabsq	$.L.str.20.98, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_61:
	movabsq	$.L.str.21.99, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_62:
	movabsq	$.L.str.22.100, %rsi
	leaq	-54(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB71_64
.LBB71_63:
	movabsq	$.L.str.23.101, %rdi
	movb	$0, %al
	callq	Die
.LBB71_64:
	movss	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	leaq	-54(%rbp), %r14
	leaq	-60(%rbp), %r15
	movl	-88(%rbp), %ebx
	movl	-84(%rbp), %r12d
	movl	16(%rbp), %edi
	callq	Score2Prob
	movabsq	$.L.str.24.102, %rdi
	cvtss2sd	%xmm0, %xmm0
	movl	%ebx, %esi
	movq	%r15, %rdx
	movl	%r12d, %ecx
	movq	%r14, %r8
	movb	$1, %al
	callq	printf
	movl	$0, -36(%rbp)
.LBB71_65:                              # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB71_72
# %bb.66:                               #   in Loop: Header=BB71_65 Depth=1
	movq	48(%rbp), %rax
	movslq	-36(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB71_68
# %bb.67:                               #   in Loop: Header=BB71_65 Depth=1
	movabsq	$.L.str.25.103, %rdi
	movb	$0, %al
	callq	printf
.LBB71_68:                              #   in Loop: Header=BB71_65 Depth=1
	movl	-36(%rbp), %eax
	movl	56(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_70
# %bb.69:                               #   in Loop: Header=BB71_65 Depth=1
	movabsq	$.L.str.26.104, %rdi
	movb	$0, %al
	callq	printf
.LBB71_70:                              #   in Loop: Header=BB71_65 Depth=1
	jmp	.LBB71_71
.LBB71_71:                              #   in Loop: Header=BB71_65 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_65
.LBB71_72:
	movabsq	$.L.str.27.105, %rdi
	movb	$0, %al
	callq	printf
.LBB71_73:
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end71:
	.size	PrintTransition, .Lfunc_end71-PrintTransition
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI71_0:
	.quad	.LBB71_40
	.quad	.LBB71_41
	.quad	.LBB71_42
	.quad	.LBB71_43
	.quad	.LBB71_44
	.quad	.LBB71_45
	.quad	.LBB71_46
	.quad	.LBB71_47
	.quad	.LBB71_49
	.quad	.LBB71_48
.LJTI71_1:
	.quad	.LBB71_53
	.quad	.LBB71_54
	.quad	.LBB71_55
	.quad	.LBB71_56
	.quad	.LBB71_57
	.quad	.LBB71_58
	.quad	.LBB71_59
	.quad	.LBB71_60
	.quad	.LBB71_62
	.quad	.LBB71_61
                                        # -- End function
	.text
	.globl	DisplayPlan7Matrix      # -- Begin function DisplayPlan7Matrix
	.p2align	4, 0x90
	.type	DisplayPlan7Matrix,@function
DisplayPlan7Matrix:                     # @DisplayPlan7Matrix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.1.106, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, -4(%rbp)
.LBB72_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_4
# %bb.2:                                #   in Loop: Header=BB72_1 Depth=1
	movabsq	$.L.str.2.107, %rdi
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movsbl	Alphabet(,%rax), %esi
	movb	$0, %al
	callq	printf
# %bb.3:                                #   in Loop: Header=BB72_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_1
.LBB72_4:
	movabsq	$.L.str.3.108, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_5:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_8
# %bb.6:                                #   in Loop: Header=BB72_5 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %edi
	callq	PrintIscore
# %bb.7:                                #   in Loop: Header=BB72_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_5
.LBB72_8:
	movl	$1, -8(%rbp)
.LBB72_9:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_11 Depth 2
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB72_16
# %bb.10:                               #   in Loop: Header=BB72_9 Depth=1
	movabsq	$.L.str.4.109, %rdi
	movl	-8(%rbp), %esi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_11:                              #   Parent Loop BB72_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_14
# %bb.12:                               #   in Loop: Header=BB72_11 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	PrintIscore
# %bb.13:                               #   in Loop: Header=BB72_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_11
.LBB72_14:                              #   in Loop: Header=BB72_9 Depth=1
	jmp	.LBB72_15
.LBB72_15:                              #   in Loop: Header=BB72_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_9
.LBB72_16:
	movl	$1, -8(%rbp)
.LBB72_17:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_19 Depth 2
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB72_24
# %bb.18:                               #   in Loop: Header=BB72_17 Depth=1
	movabsq	$.L.str.5.110, %rdi
	movl	-8(%rbp), %esi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_19:                              #   Parent Loop BB72_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_22
# %bb.20:                               #   in Loop: Header=BB72_19 Depth=2
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	PrintIscore
# %bb.21:                               #   in Loop: Header=BB72_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_19
.LBB72_22:                              #   in Loop: Header=BB72_17 Depth=1
	jmp	.LBB72_23
.LBB72_23:                              #   in Loop: Header=BB72_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_17
.LBB72_24:
	movabsq	$.L.str.6.111, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_25:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_28
# %bb.26:                               #   in Loop: Header=BB72_25 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %edi
	callq	PrintIscore
# %bb.27:                               #   in Loop: Header=BB72_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_25
.LBB72_28:
	movabsq	$.L.str.7.112, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_29:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_32
# %bb.30:                               #   in Loop: Header=BB72_29 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %edi
	callq	PrintIscore
# %bb.31:                               #   in Loop: Header=BB72_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_29
.LBB72_32:
	movabsq	$.L.str.8.113, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_33:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_36
# %bb.34:                               #   in Loop: Header=BB72_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %edi
	callq	PrintIscore
# %bb.35:                               #   in Loop: Header=BB72_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_33
.LBB72_36:
	movabsq	$.L.str.9.114, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_37:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_40
# %bb.38:                               #   in Loop: Header=BB72_37 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	callq	PrintIscore
# %bb.39:                               #   in Loop: Header=BB72_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_37
.LBB72_40:
	movl	$2, -8(%rbp)
.LBB72_41:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_43 Depth 2
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB72_48
# %bb.42:                               #   in Loop: Header=BB72_41 Depth=1
	movabsq	$.L.str.10.115, %rdi
	movl	-8(%rbp), %esi
	movb	$0, %al
	callq	printf
	movl	$0, -4(%rbp)
.LBB72_43:                              #   Parent Loop BB72_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB72_46
# %bb.44:                               #   in Loop: Header=BB72_43 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	PrintIscore
# %bb.45:                               #   in Loop: Header=BB72_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_43
.LBB72_46:                              #   in Loop: Header=BB72_41 Depth=1
	jmp	.LBB72_47
.LBB72_47:                              #   in Loop: Header=BB72_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_41
.LBB72_48:
	movabsq	$.L.str.11.116, %rdi
	movb	$0, %al
	callq	printf
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end72:
	.size	DisplayPlan7Matrix, .Lfunc_end72-DisplayPlan7Matrix
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PrintIscore
.LCPI73_0:
	.quad	4654059855337520623     # double 1442.6950408889641
	.text
	.globl	PrintIscore
	.p2align	4, 0x90
	.type	PrintIscore,@function
PrintIscore:                            # @PrintIscore
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.12.117, %rax
	movsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %ecx
	cvtsi2sdl	%ecx, %xmm1
	movsd	%xmm1, -8(%rbp)
	movsd	%xmm0, -24(%rbp)
	movsd	-8(%rbp), %xmm0         # xmm0 = mem[0],zero
	divsd	-24(%rbp), %xmm0
	movsd	%xmm0, -8(%rbp)
	movsd	-8(%rbp), %xmm0         # xmm0 = mem[0],zero
	movq	%rax, %rdi
	movb	$1, %al
	callq	printf
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end73:
	.size	PrintIscore, .Lfunc_end73-PrintIscore
	.cfi_endproc
                                        # -- End function
	.globl	EmitSequence            # -- Begin function EmitSequence
	.p2align	4, 0x90
	.type	EmitSequence,@function
EmitSequence:                           # @EmitSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	leaq	-48(%rbp), %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -88(%rbp)
	movq	%rdx, -80(%rbp)
	movq	%rcx, -72(%rbp)
	movl	$64, %edi
	movq	%rax, %rsi
	callq	P7AllocTrace
	movabsq	$.L.str.118, %rdi
	movl	$64, -56(%rbp)
	movl	$59, %esi
	movl	$64, %edx
	callq	sre_malloc
	movq	%rax, -64(%rbp)
	movl	$64, -52(%rbp)
	movq	-48(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	movl	$5, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	Alphabet_iupac, %eax
	movq	-64(%rbp), %rcx
	movb	%al, (%rcx)
	movl	$1, -20(%rbp)
	movl	$0, -16(%rbp)
	movb	$5, -9(%rbp)
	movl	$2, -36(%rbp)
.LBB74_1:                               # =>This Inner Loop Header: Depth=1
	movsbl	-9(%rbp), %eax
	cmpl	$9, %eax
	je	.LBB74_55
# %bb.2:                                #   in Loop: Header=BB74_1 Depth=1
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB74_31
# %bb.3:                                #   in Loop: Header=BB74_1 Depth=1
	movq	.LJTI74_0(,%rax,8), %rax
	jmpq	*%rax
.LBB74_4:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, (%rax)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	136(%rax), %esi
	addl	$1, %esi
	callq	FChoose
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB74_6
# %bb.5:                                #   in Loop: Header=BB74_1 Depth=1
	movb	$2, -9(%rbp)
	movl	$1, -16(%rbp)
	jmp	.LBB74_7
.LBB74_6:                               #   in Loop: Header=BB74_1 Depth=1
	movb	$1, -9(%rbp)
.LBB74_7:                               #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_32
.LBB74_8:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	addq	$12, %rdi
	movl	$2, %esi
	callq	FChoose
	movl	$3, %ecx
	movl	$1, %edx
	cmpl	$0, %eax
	cmovel	%edx, %ecx
	movb	%cl, -9(%rbp)
	movsbl	-9(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB74_10
# %bb.9:                                #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB74_10:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_32
.LBB74_11:                              #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$172, %rdi
	movl	$2, %esi
	callq	FChoose
	movl	$6, %ecx
	movl	$5, %edx
	cmpl	$1, %eax
	cmovel	%edx, %ecx
	movb	%cl, -9(%rbp)
	movl	$0, -16(%rbp)
	jmp	.LBB74_32
.LBB74_12:                              #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$172, %rdi
	addq	$8, %rdi
	movl	$2, %esi
	callq	FChoose
	movl	$8, %ecx
	movl	$10, %edx
	cmpl	$1, %eax
	cmovel	%edx, %ecx
	movb	%cl, -9(%rbp)
	movl	$0, -16(%rbp)
	jmp	.LBB74_32
.LBB74_13:                              #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$172, %rdi
	addq	$16, %rdi
	movl	$2, %esi
	callq	FChoose
	movl	$9, %ecx
	movl	$8, %edx
	cmpl	$1, %eax
	cmovel	%edx, %ecx
	movb	%cl, -9(%rbp)
	movl	$0, -16(%rbp)
	jmp	.LBB74_32
.LBB74_14:                              #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$172, %rdi
	addq	$24, %rdi
	movl	$2, %esi
	callq	FChoose
	movl	$6, %ecx
	movl	$10, %edx
	cmpl	$1, %eax
	cmovel	%edx, %ecx
	movb	%cl, -9(%rbp)
	movl	$0, -16(%rbp)
	jmp	.LBB74_32
.LBB74_15:                              #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB74_17
# %bb.16:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	addq	$20, %rdi
	movl	$2, %esi
	callq	FChoose
	movl	$2, %ecx
	movl	$1, %edx
	cmpl	$0, %eax
	cmovel	%edx, %ecx
	movb	%cl, -9(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_18
.LBB74_17:                              #   in Loop: Header=BB74_1 Depth=1
	movb	$7, -9(%rbp)
	movl	$0, -16(%rbp)
.LBB74_18:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_32
.LBB74_19:                              #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB74_28
# %bb.20:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	leaq	-112(%rbp), %rbx
	movq	%rbx, %rdi
	movl	$3, %edx
	callq	FCopy
	movq	-32(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -100(%rbp)
	movq	%rbx, %rdi
	movl	$4, %esi
	callq	FChoose
	movl	%eax, %ecx
	subl	$3, %eax
	ja	.LBB74_26
# %bb.21:                               #   in Loop: Header=BB74_1 Depth=1
	movq	.LJTI74_1(,%rcx,8), %rax
	jmpq	*%rax
.LBB74_22:                              #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movb	$1, -9(%rbp)
	jmp	.LBB74_27
.LBB74_23:                              #   in Loop: Header=BB74_1 Depth=1
	movb	$3, -9(%rbp)
	jmp	.LBB74_27
.LBB74_24:                              #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movb	$2, -9(%rbp)
	jmp	.LBB74_27
.LBB74_25:                              #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -16(%rbp)
	movb	$7, -9(%rbp)
	jmp	.LBB74_27
.LBB74_26:                              #   in Loop: Header=BB74_1 Depth=1
	movabsq	$.L.str.1.119, %rdi
	movb	$0, %al
	callq	Die
.LBB74_27:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_29
.LBB74_28:                              #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -16(%rbp)
	movb	$7, -9(%rbp)
.LBB74_29:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_32
.LBB74_30:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_31
.LBB74_31:                              #   in Loop: Header=BB74_1 Depth=1
	movabsq	$.L.str.2.120, %rdi
	movb	$0, %al
	callq	Die
.LBB74_32:                              #   in Loop: Header=BB74_1 Depth=1
	movl	$-1, -40(%rbp)
	movsbl	-9(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB74_34
# %bb.33:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FChoose
	movl	%eax, -40(%rbp)
	jmp	.LBB74_45
.LBB74_34:                              #   in Loop: Header=BB74_1 Depth=1
	movsbl	-9(%rbp), %eax
	cmpl	$3, %eax
	jne	.LBB74_36
# %bb.35:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FChoose
	movl	%eax, -40(%rbp)
	jmp	.LBB74_44
.LBB74_36:                              #   in Loop: Header=BB74_1 Depth=1
	movsbl	-9(%rbp), %eax
	cmpl	$5, %eax
	jne	.LBB74_38
# %bb.37:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	je	.LBB74_42
.LBB74_38:                              #   in Loop: Header=BB74_1 Depth=1
	movsbl	-9(%rbp), %eax
	cmpl	$8, %eax
	jne	.LBB74_40
# %bb.39:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	je	.LBB74_42
.LBB74_40:                              #   in Loop: Header=BB74_1 Depth=1
	movsbl	-9(%rbp), %eax
	cmpl	$10, %eax
	jne	.LBB74_43
# %bb.41:                               #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$10, %eax
	jne	.LBB74_43
.LBB74_42:                              #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$224, %rdi
	movl	Alphabet_size, %esi
	callq	FChoose
	movl	%eax, -40(%rbp)
.LBB74_43:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_44
.LBB74_44:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_45
.LBB74_45:                              #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movb	-9(%rbp), %al
	movl	-16(%rbp), %ecx
	cmpl	$-1, -40(%rbp)
	je	.LBB74_47
# %bb.46:                               #   in Loop: Header=BB74_1 Depth=1
	movl	-20(%rbp), %r8d
	jmp	.LBB74_48
.LBB74_47:                              #   in Loop: Header=BB74_1 Depth=1
	xorl	%r8d, %r8d
	jmp	.LBB74_48
.LBB74_48:                              #   in Loop: Header=BB74_1 Depth=1
	movsbl	%al, %edx
	callq	TraceSet
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB74_50
# %bb.49:                               #   in Loop: Header=BB74_1 Depth=1
	movl	-56(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -56(%rbp)
	movq	-48(%rbp), %rdi
	movl	-56(%rbp), %esi
	callq	P7ReallocTrace
.LBB74_50:                              #   in Loop: Header=BB74_1 Depth=1
	cmpl	$-1, -40(%rbp)
	je	.LBB74_54
# %bb.51:                               #   in Loop: Header=BB74_1 Depth=1
	movl	-40(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cmpl	-52(%rbp), %eax
	jne	.LBB74_53
# %bb.52:                               #   in Loop: Header=BB74_1 Depth=1
	movabsq	$.L.str.118, %rdi
	movl	-52(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rdx
	movslq	-52(%rbp), %rcx
	shlq	$0, %rcx
	movl	$146, %esi
	callq	sre_realloc
	movq	%rax, -64(%rbp)
.LBB74_53:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_54
.LBB74_54:                              #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_1
.LBB74_55:
	movl	-36(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	Alphabet_iupac, %eax
	movq	-64(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-64(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	cmpq	$0, -88(%rbp)
	je	.LBB74_57
# %bb.56:
	movq	-64(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB74_58
.LBB74_57:
	movq	-64(%rbp), %rdi
	callq	free
.LBB74_58:
	cmpq	$0, -80(%rbp)
	je	.LBB74_60
# %bb.59:
	movl	-20(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB74_60:
	cmpq	$0, -72(%rbp)
	je	.LBB74_62
# %bb.61:
	movq	-48(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB74_63
.LBB74_62:
	movq	-48(%rbp), %rdi
	callq	P7FreeTrace
.LBB74_63:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end74:
	.size	EmitSequence, .Lfunc_end74-EmitSequence
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI74_0:
	.quad	.LBB74_30
	.quad	.LBB74_19
	.quad	.LBB74_15
	.quad	.LBB74_8
	.quad	.LBB74_31
	.quad	.LBB74_11
	.quad	.LBB74_4
	.quad	.LBB74_12
	.quad	.LBB74_13
	.quad	.LBB74_30
	.quad	.LBB74_14
.LJTI74_1:
	.quad	.LBB74_22
	.quad	.LBB74_23
	.quad	.LBB74_24
	.quad	.LBB74_25
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function EmitConsensusSequence
.LCPI75_0:
	.long	1063675494              # float 0.899999976
.LCPI75_1:
	.long	1056964608              # float 0.5
.LCPI75_3:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI75_2:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	EmitConsensusSequence
	.p2align	4, 0x90
	.type	EmitConsensusSequence,@function
EmitConsensusSequence:                  # @EmitConsensusSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -120(%rbp)
	movq	%rdx, -112(%rbp)
	movq	%rcx, -104(%rbp)
	movq	%r8, -96(%rbp)
	cmpl	$3, Alphabet_type
	jne	.LBB75_2
# %bb.1:
	movss	.LCPI75_1(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -68(%rbp)
	jmp	.LBB75_3
.LBB75_2:
	movss	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -68(%rbp)
.LBB75_3:
	leaq	-88(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-128(%rbp), %rcx
	movq	-40(%rbp), %rdi
	callq	StateOccupancy
	movl	$0, -28(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -32(%rbp)
	movl	$1, -4(%rbp)
.LBB75_4:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB75_13
# %bb.5:                                #   in Loop: Header=BB75_4 Depth=1
	movsd	.LCPI75_2(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB75_7
# %bb.6:                                #   in Loop: Header=BB75_4 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB75_8
.LBB75_7:                               #   in Loop: Header=BB75_4 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
.LBB75_8:                               #   in Loop: Header=BB75_4 Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB75_11
# %bb.9:                                #   in Loop: Header=BB75_4 Depth=1
	movsd	.LCPI75_2(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB75_11
# %bb.10:                               #   in Loop: Header=BB75_4 Depth=1
	movss	.LCPI75_3(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movaps	%xmm0, %xmm1
	subss	16(%rax), %xmm1
	divss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB75_11:                              #   in Loop: Header=BB75_4 Depth=1
	jmp	.LBB75_12
.LBB75_12:                              #   in Loop: Header=BB75_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_4
.LBB75_13:
	leaq	-24(%rbp), %rsi
	movl	-32(%rbp), %edi
	addl	$6, %edi
	addl	-44(%rbp), %edi
	addl	-28(%rbp), %edi
	callq	P7AllocTrace
	movabsq	$.L.str.118, %rdi
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$3, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$327, %esi              # imm = 0x147
	callq	sre_malloc
	movabsq	$.L.str.118, %rdi
	movq	%rax, -64(%rbp)
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$328, %esi              # imm = 0x148
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movq	-24(%rbp), %rdi
	movl	$1, %esi
	movl	$5, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	movl	$6, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	Alphabet_iupac, %eax
	movq	-64(%rbp), %rcx
	movb	%al, (%rcx)
	movl	$3, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$1, -4(%rbp)
.LBB75_14:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_23 Depth 2
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB75_28
# %bb.15:                               #   in Loop: Header=BB75_14 Depth=1
	movsd	.LCPI75_2(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB75_19
# %bb.16:                               #   in Loop: Header=BB75_14 Depth=1
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FArgMax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %r8d
	addl	$1, %r8d
	movl	$1, %edx
	callq	TraceSet
	movslq	-16(%rbp), %rax
	movb	Alphabet(,%rax), %al
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-16(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-68(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB75_18
# %bb.17:                               #   in Loop: Header=BB75_14 Depth=1
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	tolower
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB75_18:                              #   in Loop: Header=BB75_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_20
.LBB75_19:                              #   in Loop: Header=BB75_14 Depth=1
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %ecx
	movl	$2, %edx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB75_20:                              #   in Loop: Header=BB75_14 Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB75_26
# %bb.21:                               #   in Loop: Header=BB75_14 Depth=1
	movsd	.LCPI75_2(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB75_26
# %bb.22:                               #   in Loop: Header=BB75_14 Depth=1
	movss	.LCPI75_3(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movaps	%xmm0, %xmm1
	subss	16(%rax), %xmm1
	divss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -16(%rbp)
.LBB75_23:                              #   Parent Loop BB75_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -16(%rbp)
	cmpl	$0, %eax
	je	.LBB75_25
# %bb.24:                               #   in Loop: Header=BB75_23 Depth=2
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %r8d
	addl	$1, %r8d
	movl	$3, %edx
	callq	TraceSet
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	$120, (%rax,%rcx)
	movl	Alphabet_iupac, %eax
	subl	$1, %eax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_23
.LBB75_25:                              #   in Loop: Header=BB75_14 Depth=1
	jmp	.LBB75_26
.LBB75_26:                              #   in Loop: Header=BB75_14 Depth=1
	jmp	.LBB75_27
.LBB75_27:                              #   in Loop: Header=BB75_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_14
.LBB75_28:
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	$7, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	$8, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	$9, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	Alphabet_iupac, %eax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movq	-88(%rbp), %rdi
	callq	free
	movq	-80(%rbp), %rdi
	callq	free
	movq	-128(%rbp), %rdi
	callq	free
	cmpq	$0, -120(%rbp)
	je	.LBB75_30
# %bb.29:
	movq	-56(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB75_31
.LBB75_30:
	movq	-56(%rbp), %rdi
	callq	free
.LBB75_31:
	cmpq	$0, -112(%rbp)
	je	.LBB75_33
# %bb.32:
	movq	-64(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB75_34
.LBB75_33:
	movq	-64(%rbp), %rdi
	callq	free
.LBB75_34:
	cmpq	$0, -104(%rbp)
	je	.LBB75_36
# %bb.35:
	movl	-12(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB75_36:
	cmpq	$0, -96(%rbp)
	je	.LBB75_38
# %bb.37:
	movq	-24(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB75_39
.LBB75_38:
	movq	-24(%rbp), %rdi
	callq	P7FreeTrace
.LBB75_39:
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end75:
	.size	EmitConsensusSequence, .Lfunc_end75-EmitConsensusSequence
	.cfi_endproc
                                        # -- End function
	.globl	StateOccupancy          # -- Begin function StateOccupancy
	.p2align	4, 0x90
	.type	StateOccupancy,@function
StateOccupancy:                         # @StateOccupancy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.118, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-16(%rbp), %rcx
	movl	136(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$414, %esi              # imm = 0x19E
	callq	sre_malloc
	movabsq	$.L.str.118, %rdi
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movslq	136(%rax), %rdx
	shlq	$2, %rdx
	movl	$415, %esi              # imm = 0x19F
	callq	sre_malloc
	movabsq	$.L.str.118, %rdi
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$416, %esi              # imm = 0x1A0
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movss	%xmm0, 4(%rax)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	%xmm0, 4(%rax)
	movq	-24(%rbp), %rax
	movss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	8(%rax), %rax
	mulss	4(%rax), %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 4(%rax)
	movl	$2, -4(%rbp)
.LBB76_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB76_6
# %bb.2:                                #   in Loop: Header=BB76_1 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	mulss	(%rax), %xmm0
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addss	(%rax,%rcx,4), %xmm0
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	mulss	20(%rax), %xmm1
	addss	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	mulss	8(%rax), %xmm0
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	mulss	24(%rax), %xmm1
	addss	%xmm1, %xmm0
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB76_4
# %bb.3:                                #   in Loop: Header=BB76_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	mulss	4(%rax), %xmm0
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB76_4:                               #   in Loop: Header=BB76_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_6:
	movq	-24(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end76:
	.size	StateOccupancy, .Lfunc_end76-StateOccupancy
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function WriteProfile
.LCPI77_0:
	.quad	4666723172467343360     # double 1.0E+4
.LCPI77_1:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	WriteProfile
	.p2align	4, 0x90
	.type	WriteProfile,@function
WriteProfile:                           # @WriteProfile
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -52(%rbp)
	movq	-24(%rbp), %rdi
	movl	$1, %esi
	callq	P7Logoddsify
	movq	-24(%rbp), %rax
	cmpl	$1000, 136(%rax)        # imm = 0x3E8
	jle	.LBB77_3
# %bb.1:
	cmpl	$0, -52(%rbp)
	jne	.LBB77_3
# %bb.2:
	movabsq	$.L.str.121, %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rsi
	movb	$0, %al
	callq	Warn
.LBB77_3:
	cmpl	$3, Alphabet_type
	jne	.LBB77_5
# %bb.4:
	movabsq	$.L.str.1.122, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB77_9
.LBB77_5:
	cmpl	$2, Alphabet_type
	jne	.LBB77_7
# %bb.6:
	movabsq	$.L.str.2.123, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB77_8
.LBB77_7:
	movabsq	$.L.str.3.124, %rdi
	movb	$0, %al
	callq	Die
.LBB77_8:
	jmp	.LBB77_9
.LBB77_9:
	cmpl	$3, Alphabet_type
	jne	.LBB77_11
# %bb.10:
	movabsq	$.L.str.4.125, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB77_14
.LBB77_11:
	cmpl	$2, Alphabet_type
	jne	.LBB77_13
# %bb.12:
	movabsq	$.L.str.5.126, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB77_13:
	jmp	.LBB77_14
.LBB77_14:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	136(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	(%rax), %r8
	movq	-24(%rbp), %rax
	movl	456(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB77_16
# %bb.15:
	movq	-24(%rbp), %rax
	movq	8(%rax), %r9
	jmp	.LBB77_17
.LBB77_16:
	movabsq	$.L.str.8.127, %r9
	jmp	.LBB77_17
.LBB77_17:
	movq	-24(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB77_19
# %bb.18:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	jmp	.LBB77_20
.LBB77_19:
	movabsq	$.L.str.8.127, %rax
	jmp	.LBB77_20
.LBB77_20:
	movabsq	$.L.str.6.128, %rsi
	movabsq	$.L.str.7.129, %rdx
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
	cmpl	$0, -52(%rbp)
	je	.LBB77_22
# %bb.21:
	movabsq	$.L.str.9.130, %rsi
	movabsq	$.L.str.7.129, %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.10.131, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.11.132, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.12.133, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.13.134, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.14.135, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.15.136, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.16.137, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB77_23
.LBB77_22:
	movabsq	$.L.str.9.130, %rsi
	movabsq	$.L.str.7.129, %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.17.138, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.18.139, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.13.134, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.14.135, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.15.136, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.16.137, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB77_23:
	movabsq	$.L.str.19.140, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB77_24:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB77_27
# %bb.25:                               #   in Loop: Header=BB77_24 Depth=1
	movabsq	$.L.str.20.141, %rsi
	movq	-16(%rbp), %rdi
	movslq	-8(%rbp), %rax
	movsbl	Alphabet(,%rax), %edx
	movb	$0, %al
	callq	fprintf
# %bb.26:                               #   in Loop: Header=BB77_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_24
.LBB77_27:
	cmpl	$0, -52(%rbp)
	je	.LBB77_29
# %bb.28:
	movabsq	$.L.str.21.142, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB77_30
.LBB77_29:
	movabsq	$.L.str.22.143, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB77_30:
	movl	$1, -4(%rbp)
.LBB77_31:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_36 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB77_58
# %bb.32:                               #   in Loop: Header=BB77_31 Depth=1
	movl	$10, %ecx
	movl	-4(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB77_35
# %bb.33:                               #   in Loop: Header=BB77_31 Depth=1
	cmpl	$10, -4(%rbp)
	jle	.LBB77_35
# %bb.34:                               #   in Loop: Header=BB77_31 Depth=1
	movabsq	$.L.str.23.144, %rsi
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %edx
	movb	$0, %al
	callq	fprintf
.LBB77_35:                              #   in Loop: Header=BB77_31 Depth=1
	movq	-24(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FArgMax
	movabsq	$.L.str.24.145, %rsi
	movl	%eax, -8(%rbp)
	movq	-16(%rbp), %rdi
	movslq	-8(%rbp), %rax
	movsbl	Alphabet(,%rax), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB77_36:                              #   Parent Loop BB77_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB77_41
# %bb.37:                               #   in Loop: Header=BB77_36 Depth=2
	movq	-24(%rbp), %rax
	movq	320(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB77_39
# %bb.38:                               #   in Loop: Header=BB77_36 Depth=2
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB77_39:                              #   in Loop: Header=BB77_36 Depth=2
	movabsq	$.L.str.25.146, %rsi
	movsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	imull	$100, -40(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rdi
	movl	-40(%rbp), %edx
	movb	$0, %al
	callq	fprintf
# %bb.40:                               #   in Loop: Header=BB77_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_36
.LBB77_41:                              #   in Loop: Header=BB77_31 Depth=1
	cmpl	$1, -4(%rbp)
	jle	.LBB77_43
# %bb.42:                               #   in Loop: Header=BB77_31 Depth=1
	movsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	imull	$4294967295, %eax, %eax # imm = 0xFFFFFFFF
	movl	%eax, -32(%rbp)
	imull	$100, -32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB77_44
.LBB77_43:                              #   in Loop: Header=BB77_31 Depth=1
	movl	$100, -32(%rbp)
.LBB77_44:                              #   in Loop: Header=BB77_31 Depth=1
	cmpl	$1, -4(%rbp)
	jle	.LBB77_46
# %bb.45:                               #   in Loop: Header=BB77_31 Depth=1
	movsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imull	$4294967295, (%rax,%rcx,4), %eax # imm = 0xFFFFFFFF
	movl	%eax, -28(%rbp)
	imull	$100, -28(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB77_47
.LBB77_46:                              #   in Loop: Header=BB77_31 Depth=1
	movl	$100, -28(%rbp)
.LBB77_47:                              #   in Loop: Header=BB77_31 Depth=1
	cmpl	$1, -4(%rbp)
	jle	.LBB77_49
# %bb.48:                               #   in Loop: Header=BB77_31 Depth=1
	movsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	imull	$4294967295, %eax, %eax # imm = 0xFFFFFFFF
	movl	%eax, -48(%rbp)
	imull	$100, -48(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB77_50
.LBB77_49:                              #   in Loop: Header=BB77_31 Depth=1
	movl	$100, -48(%rbp)
.LBB77_50:                              #   in Loop: Header=BB77_31 Depth=1
	cmpl	$1, -4(%rbp)
	jle	.LBB77_52
# %bb.51:                               #   in Loop: Header=BB77_31 Depth=1
	movsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imull	$4294967295, (%rax,%rcx,4), %eax # imm = 0xFFFFFFFF
	movl	%eax, -44(%rbp)
	imull	$100, -44(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB77_53
.LBB77_52:                              #   in Loop: Header=BB77_31 Depth=1
	movl	$100, -44(%rbp)
.LBB77_53:                              #   in Loop: Header=BB77_31 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB77_55
# %bb.54:                               #   in Loop: Header=BB77_31 Depth=1
	movabsq	$.L.str.26.147, %rsi
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movl	-44(%rbp), %r9d
	movb	$0, %al
	callq	fprintf
	jmp	.LBB77_56
.LBB77_55:                              #   in Loop: Header=BB77_31 Depth=1
	movabsq	$.L.str.27.148, %rsi
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movb	$0, %al
	callq	fprintf
.LBB77_56:                              #   in Loop: Header=BB77_31 Depth=1
	jmp	.LBB77_57
.LBB77_57:                              #   in Loop: Header=BB77_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_31
.LBB77_58:
	movabsq	$.L.str.28.149, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -8(%rbp)
.LBB77_59:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_61 Depth 2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB77_66
# %bb.60:                               #   in Loop: Header=BB77_59 Depth=1
	xorps	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
	movl	$1, -4(%rbp)
.LBB77_61:                              #   Parent Loop BB77_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB77_64
# %bb.62:                               #   in Loop: Header=BB77_61 Depth=2
	movq	-24(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-36(%rbp), %xmm0
	movss	%xmm0, -36(%rbp)
# %bb.63:                               #   in Loop: Header=BB77_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_61
.LBB77_64:                              #   in Loop: Header=BB77_59 Depth=1
	movabsq	$.L.str.25.146, %rsi
	movq	-24(%rbp), %rax
	movl	56(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	mulss	-36(%rbp), %xmm0
	movss	%xmm0, -36(%rbp)
	movq	-16(%rbp), %rdi
	cvttss2si	-36(%rbp), %edx
	movb	$0, %al
	callq	fprintf
# %bb.65:                               #   in Loop: Header=BB77_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_59
.LBB77_66:
	jmp	.LBB77_67
.LBB77_67:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB77_70
# %bb.68:                               #   in Loop: Header=BB77_67 Depth=1
	movabsq	$.L.str.25.146, %rsi
	movq	-16(%rbp), %rdi
	xorl	%edx, %edx
	movb	$0, %al
	callq	fprintf
# %bb.69:                               #   in Loop: Header=BB77_67 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_67
.LBB77_70:
	movabsq	$.L.str.29.150, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end77:
	.size	WriteProfile, .Lfunc_end77-WriteProfile
	.cfi_endproc
                                        # -- End function
	.globl	EPSWriteSmallMSA        # -- Begin function EPSWriteSmallMSA
	.p2align	4, 0x90
	.type	EPSWriteSmallMSA,@function
EPSWriteSmallMSA:                       # @EPSWriteSmallMSA
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movabsq	$.L.str.151, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$8, -64(%rbp)
	movl	$9, -52(%rbp)
	movl	$15, -48(%rbp)
	movq	%rax, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	%rax, -72(%rbp)
	movl	$12, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB78_6
# %bb.2:                                #   in Loop: Header=BB78_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -56(%rbp)
	cmpl	-8(%rbp), %eax
	jle	.LBB78_4
# %bb.3:                                #   in Loop: Header=BB78_1 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_4:                               #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_5
.LBB78_5:                               #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_6:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-64(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$50, 24(%rax)
	jle	.LBB78_8
# %bb.7:
	movabsq	$.L.str.1.152, %rdi
	movb	$0, %al
	callq	Die
.LBB78_8:
	movl	-8(%rbp), %eax
	movl	-52(%rbp), %ecx
	movq	-24(%rbp), %rdx
	imull	24(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	cmpl	$612, -44(%rbp)         # imm = 0x264
	jle	.LBB78_10
# %bb.9:
	movabsq	$.L.str.2.153, %rdi
	movb	$0, %al
	callq	Die
.LBB78_10:
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	imull	28(%rcx), %eax
	movl	%eax, -40(%rbp)
	cmpl	$792, -40(%rbp)         # imm = 0x318
	jle	.LBB78_12
# %bb.11:
	movabsq	$.L.str.3.154, %rdi
	movb	$0, %al
	callq	Die
.LBB78_12:
	movabsq	$.L.str.4.155, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.5.156, %rsi
	movq	-16(%rbp), %rdi
	movl	-44(%rbp), %r8d
	movl	-40(%rbp), %r9d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.6.157, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.7.158, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.8.159, %rsi
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.9.160, %rsi
	movq	-16(%rbp), %rdi
	movl	-60(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.10.161, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.11.162, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB78_13:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_15 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB78_20
# %bb.14:                               #   in Loop: Header=BB78_13 Depth=1
	movabsq	$.L.str.12.163, %rsi
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	subl	-4(%rbp), %eax
	subl	$1, %eax
	imull	-48(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rdi
	movl	-36(%rbp), %ecx
	xorl	%edx, %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.13.164, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movb	$0, %al
	callq	fprintf
	movl	-8(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -28(%rbp)
.LBB78_15:                              #   Parent Loop BB78_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB78_18
# %bb.16:                               #   in Loop: Header=BB78_15 Depth=2
	movabsq	$.L.str.12.163, %rsi
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.14.165, %rsi
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	movb	$0, %al
	callq	fprintf
	movl	-52(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.17:                               #   in Loop: Header=BB78_15 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_15
.LBB78_18:                              #   in Loop: Header=BB78_13 Depth=1
	jmp	.LBB78_19
.LBB78_19:                              #   in Loop: Header=BB78_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_13
.LBB78_20:
	movq	-72(%rbp), %rdi
	callq	free
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end78:
	.size	EPSWriteSmallMSA, .Lfunc_end78-EPSWriteSmallMSA
	.cfi_endproc
                                        # -- End function
	.globl	P7Viterbi               # -- Begin function P7Viterbi
	.p2align	4, 0x90
	.type	P7Viterbi,@function
P7Viterbi:                              # @P7Viterbi
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	leaq	-24(%rbp), %rax
	leaq	-80(%rbp), %r10
	leaq	-96(%rbp), %r9
	leaq	-88(%rbp), %r11
	movq	%rdi, -104(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -144(%rbp)
	movq	%r8, -136(%rbp)
	movq	-144(%rbp), %rdi
	movl	-44(%rbp), %esi
	movq	-32(%rbp), %rcx
	movl	136(%rcx), %edx
	movq	%rax, %rcx
	movq	%r10, %r8
	movq	%r11, (%rsp)
	callq	ResizePlan7Matrix
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, 16(%rax)
	movq	-32(%rbp), %rax
	movl	336(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$0, -4(%rbp)
.LBB79_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB79_4
# %bb.2:                                #   in Loop: Header=BB79_1 Depth=1
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.3:                                #   in Loop: Header=BB79_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_1
.LBB79_4:
	movq	-32(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-32(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -224(%rbp)
	movl	$1, -8(%rbp)
.LBB79_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_7 Depth 2
                                        #     Child Loop BB79_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB79_50
# %bb.6:                                #   in Loop: Header=BB79_5 Depth=1
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movq	-96(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movq	-80(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -208(%rbp)
	movq	-96(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -120(%rbp)
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -248(%rbp)
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -240(%rbp)
	movq	-40(%rbp), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-64(%rbp), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-56(%rbp), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movl	$1, -4(%rbp)
.LBB79_7:                               #   Parent Loop BB79_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jg	.LBB79_28
# %bb.8:                                #   in Loop: Header=BB79_7 Depth=2
	movq	-128(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-200(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-176(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB79_10
# %bb.9:                                #   in Loop: Header=BB79_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_10:                              #   in Loop: Header=BB79_7 Depth=2
	movq	-208(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-160(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB79_12
# %bb.11:                               #   in Loop: Header=BB79_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_12:                              #   in Loop: Header=BB79_7 Depth=2
	movl	-108(%rbp), %eax
	movq	-224(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB79_14
# %bb.13:                               #   in Loop: Header=BB79_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_14:                              #   in Loop: Header=BB79_7 Depth=2
	movq	-248(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jge	.LBB79_16
# %bb.15:                               #   in Loop: Header=BB79_7 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB79_16:                              #   in Loop: Header=BB79_7 Depth=2
	movq	-64(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-152(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-184(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB79_18
# %bb.17:                               #   in Loop: Header=BB79_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_18:                              #   in Loop: Header=BB79_7 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jge	.LBB79_20
# %bb.19:                               #   in Loop: Header=BB79_7 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB79_20:                              #   in Loop: Header=BB79_7 Depth=2
	movl	-4(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB79_26
# %bb.21:                               #   in Loop: Header=BB79_7 Depth=2
	movq	-128(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-192(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-120(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-168(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB79_23
# %bb.22:                               #   in Loop: Header=BB79_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_23:                              #   in Loop: Header=BB79_7 Depth=2
	movq	-240(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	jge	.LBB79_25
# %bb.24:                               #   in Loop: Header=BB79_7 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB79_25:                              #   in Loop: Header=BB79_7 Depth=2
	jmp	.LBB79_26
.LBB79_26:                              #   in Loop: Header=BB79_7 Depth=2
	jmp	.LBB79_27
.LBB79_27:                              #   in Loop: Header=BB79_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_7
.LBB79_28:                              #   in Loop: Header=BB79_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	340(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB79_30
# %bb.29:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
.LBB79_30:                              #   in Loop: Header=BB79_5 Depth=1
	movl	$-987654321, -68(%rbp)  # imm = 0xC521974F
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -232(%rbp)
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	$1, -4(%rbp)
.LBB79_31:                              #   Parent Loop BB79_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB79_36
# %bb.32:                               #   in Loop: Header=BB79_31 Depth=2
	movq	-232(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-216(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	-68(%rbp), %eax
	jle	.LBB79_34
# %bb.33:                               #   in Loop: Header=BB79_31 Depth=2
	movl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB79_34:                              #   in Loop: Header=BB79_31 Depth=2
	jmp	.LBB79_35
.LBB79_35:                              #   in Loop: Header=BB79_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_31
.LBB79_36:                              #   in Loop: Header=BB79_5 Depth=1
	movl	-68(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	364(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB79_38
# %bb.37:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB79_38:                              #   in Loop: Header=BB79_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	348(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	12(%rcx), %eax
	jle	.LBB79_40
# %bb.39:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB79_40:                              #   in Loop: Header=BB79_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	336(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB79_42
# %bb.41:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB79_42:                              #   in Loop: Header=BB79_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	360(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB79_44
# %bb.43:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB79_44:                              #   in Loop: Header=BB79_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	356(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB79_46
# %bb.45:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB79_46:                              #   in Loop: Header=BB79_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	344(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	8(%rcx), %eax
	jle	.LBB79_48
# %bb.47:                               #   in Loop: Header=BB79_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB79_48:                              #   in Loop: Header=BB79_5 Depth=1
	jmp	.LBB79_49
.LBB79_49:                              #   in Loop: Header=BB79_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_5
.LBB79_50:
	movq	-24(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	addl	352(%rcx), %eax
	movl	%eax, -12(%rbp)
	cmpq	$0, -136(%rbp)
	je	.LBB79_52
# %bb.51:
	leaq	-256(%rbp), %r8
	movq	-32(%rbp), %rdi
	movq	-104(%rbp), %rsi
	movl	-44(%rbp), %edx
	movq	-144(%rbp), %rcx
	callq	P7ViterbiTrace
	movq	-256(%rbp), %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB79_52:
	movl	-12(%rbp), %edi
	callq	Scorify
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end79:
	.size	P7Viterbi, .Lfunc_end79-P7Viterbi
	.cfi_endproc
                                        # -- End function
	.globl	FileDirname             # -- Begin function FileDirname
	.p2align	4, 0x90
	.type	FileDirname,@function
FileDirname:                            # @FileDirname
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movl	$47, %esi
	callq	strrchr
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB80_2
# %bb.1:
	xorl	%eax, %eax
	jmp	.LBB80_3
.LBB80_2:
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
.LBB80_3:
	movabsq	$.L.str.168, %rdi
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$73, %esi
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	cmpl	$0, -4(%rbp)
	jle	.LBB80_5
# %bb.4:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	strncpy
	jmp	.LBB80_9
.LBB80_5:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$47, %eax
	je	.LBB80_7
# %bb.6:
	movq	-16(%rbp), %rax
	movb	$46, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB80_8
.LBB80_7:
	movq	-16(%rbp), %rax
	movb	$47, (%rax)
	movl	$1, -4(%rbp)
.LBB80_8:
	jmp	.LBB80_9
.LBB80_9:
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end80:
	.size	FileDirname, .Lfunc_end80-FileDirname
	.cfi_endproc
                                        # -- End function
	.globl	FileTail                # -- Begin function FileTail
	.p2align	4, 0x90
	.type	FileTail,@function
FileTail:                               # @FileTail
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rdi
	movl	$47, %esi
	callq	strrchr
	movabsq	$.L.str.168, %rbx
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$1, %rax
	shlq	$0, %rax
	movq	%rbx, %rdi
	movl	$105, %esi
	movq	%rax, %rdx
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB81_2
# %bb.1:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	jmp	.LBB81_3
.LBB81_2:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	addq	$1, %rsi
	callq	strcpy
.LBB81_3:
	cmpl	$0, -28(%rbp)
	je	.LBB81_7
# %bb.4:
	movq	-16(%rbp), %rdi
	movl	$46, %esi
	callq	strrchr
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB81_6
# %bb.5:
	movq	-48(%rbp), %rax
	movb	$0, (%rax)
.LBB81_6:
	jmp	.LBB81_7
.LBB81_7:
	movq	-16(%rbp), %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end81:
	.size	FileTail, .Lfunc_end81-FileTail
	.cfi_endproc
                                        # -- End function
	.globl	FileSameDirectory       # -- Begin function FileSameDirectory
	.p2align	4, 0x90
	.type	FileSameDirectory,@function
FileSameDirectory:                      # @FileSameDirectory
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movl	$1, -4(%rbp)
	movq	-48(%rbp), %rdi
	callq	FileDirname
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	xorl	%esi, %esi
	callq	FileTail
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB82_2
# %bb.1:
	movl	$0, -4(%rbp)
.LBB82_2:
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	FileConcat
	movq	%rax, -16(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB82_5
# %bb.3:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB82_5
# %bb.4:
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -16(%rbp)
.LBB82_5:
	movq	-40(%rbp), %rdi
	callq	free
	movq	-24(%rbp), %rdi
	callq	free
	movq	-16(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end82:
	.size	FileSameDirectory, .Lfunc_end82-FileSameDirectory
	.cfi_endproc
                                        # -- End function
	.globl	FileConcat              # -- Begin function FileConcat
	.p2align	4, 0x90
	.type	FileConcat,@function
FileConcat:                             # @FileConcat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$.L.str.168, %r14
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	%rax, %rbx
	addq	$2, %rbx
	shlq	$0, %rbx
	movq	%r14, %rdi
	movl	$170, %esi
	movq	%rbx, %rdx
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$47, %eax
	jne	.LBB83_2
# %bb.1:
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	jmp	.LBB83_3
.LBB83_2:
	movabsq	$.L.str.1.169, %rsi
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %r8
	movl	$47, %ecx
	movb	$0, %al
	callq	sprintf
.LBB83_3:
	movq	-32(%rbp), %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end83:
	.size	FileConcat, .Lfunc_end83-FileConcat
	.cfi_endproc
                                        # -- End function
	.globl	FileAddSuffix           # -- Begin function FileAddSuffix
	.p2align	4, 0x90
	.type	FileAddSuffix,@function
FileAddSuffix:                          # @FileAddSuffix
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$.L.str.168, %r14
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	%rax, %rbx
	addq	$2, %rbx
	movq	%r14, %rdi
	movl	$190, %esi
	movq	%rbx, %rdx
	callq	sre_malloc
	movabsq	$.L.str.2.170, %rsi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movb	$0, %al
	callq	sprintf
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end84:
	.size	FileAddSuffix, .Lfunc_end84-FileAddSuffix
	.cfi_endproc
                                        # -- End function
	.globl	EnvFileOpen             # -- Begin function EnvFileOpen
	.p2align	4, 0x90
	.type	EnvFileOpen,@function
EnvFileOpen:                            # @EnvFileOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.LBB85_2
# %bb.1:
	movq	$0, -24(%rbp)
	jmp	.LBB85_15
.LBB85_2:
	movq	-56(%rbp), %rdi
	callq	getenv
	movq	%rax, %rdi
	callq	Strdup
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB85_4
# %bb.3:
	movq	$0, -24(%rbp)
	jmp	.LBB85_15
.LBB85_4:
	movabsq	$.L.str.3.171, %rsi
	movq	$0, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
.LBB85_5:                               # =>This Inner Loop Header: Depth=1
	cmpq	$0, -16(%rbp)
	je	.LBB85_11
# %bb.6:                                #   in Loop: Header=BB85_5 Depth=1
	movq	-64(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-16(%rbp), %rdi
	callq	strlen
	addl	%eax, %ebx
	addl	$2, %ebx
	cmpl	$1024, %ebx             # imm = 0x400
	jle	.LBB85_8
# %bb.7:
	movq	-32(%rbp), %rdi
	callq	free
	movq	$0, -24(%rbp)
	jmp	.LBB85_15
.LBB85_8:                               #   in Loop: Header=BB85_5 Depth=1
	movabsq	$.L.str.1.169, %rsi
	leaq	-1088(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %r8
	movl	$47, %ecx
	movb	$0, %al
	callq	sprintf
	movabsq	$.L.str.4.172, %rsi
	leaq	-1088(%rbp), %rdi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	je	.LBB85_10
# %bb.9:
	jmp	.LBB85_12
.LBB85_10:                              #   in Loop: Header=BB85_5 Depth=1
	movabsq	$.L.str.3.171, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -16(%rbp)
	jmp	.LBB85_5
.LBB85_11:                              # %.loopexit
	jmp	.LBB85_12
.LBB85_12:
	cmpq	$0, -48(%rbp)
	je	.LBB85_14
# %bb.13:
	movq	-16(%rbp), %rdi
	callq	Strdup
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB85_14:
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB85_15:
	movq	-24(%rbp), %rax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end85:
	.size	EnvFileOpen, .Lfunc_end85-EnvFileOpen
	.cfi_endproc
                                        # -- End function
	.globl	FileExists              # -- Begin function FileExists
	.p2align	4, 0x90
	.type	FileExists,@function
FileExists:                             # @FileExists
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.4.172, %rsi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	fopen
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB86_2
# %bb.1:
	movq	-16(%rbp), %rdi
	callq	fclose
	movl	$1, -4(%rbp)
	jmp	.LBB86_3
.LBB86_2:
	movl	$0, -4(%rbp)
.LBB86_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end86:
	.size	FileExists, .Lfunc_end86-FileExists
	.cfi_endproc
                                        # -- End function
	.globl	Getopt                  # -- Begin function Getopt
	.p2align	4, 0x90
	.type	Getopt,@function
Getopt:                                 # @Getopt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movq	24(%rbp), %rax
	movq	16(%rbp), %rax
	movl	%edi, -52(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -60(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -72(%rbp)
	movl	$0, -12(%rbp)
	movl	Getopt.optind, %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_3
# %bb.1:
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB87_3
# %bb.2:
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$.L.str.173, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB87_4
.LBB87_3:
	movl	Getopt.optind, %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	24(%rbp), %rax
	movq	$0, (%rax)
	movq	16(%rbp), %rax
	movq	$0, (%rax)
	movl	$0, -56(%rbp)
	jmp	.LBB87_76
.LBB87_4:
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$.L.str.1.174, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB87_6
# %bb.5:
	movl	Getopt.optind, %eax
	addl	$1, %eax
	movl	%eax, Getopt.optind
	movl	Getopt.optind, %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	16(%rbp), %rax
	movq	$0, (%rax)
	movq	24(%rbp), %rax
	movq	$0, (%rax)
	movl	$0, -56(%rbp)
	jmp	.LBB87_76
.LBB87_6:
	cmpq	$0, Getopt.optptr
	jne	.LBB87_37
# %bb.7:
	movabsq	$.L.str.1.174, %rsi
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB87_37
# %bb.8:
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$61, %esi
	callq	strchr
	movq	%rax, Getopt.optptr
	cmpq	$0, %rax
	je	.LBB87_10
# %bb.9:
	movq	Getopt.optptr, %rax
	movb	$0, (%rax)
	movq	Getopt.optptr, %rax
	addq	$1, %rax
	movq	%rax, Getopt.optptr
.LBB87_10:
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -16(%rbp)
.LBB87_11:                              # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_19
# %bb.12:                               #   in Loop: Header=BB87_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$0, 8(%rax)
	jne	.LBB87_17
# %bb.13:                               #   in Loop: Header=BB87_11 Depth=1
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-48(%rbp), %rdx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB87_17
# %bb.14:                               #   in Loop: Header=BB87_11 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-48(%rbp), %rbx
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	strlen
	cmpq	%rax, %rbx
	jne	.LBB87_16
# %bb.15:
	jmp	.LBB87_20
.LBB87_16:                              #   in Loop: Header=BB87_11 Depth=1
	jmp	.LBB87_17
.LBB87_17:                              #   in Loop: Header=BB87_11 Depth=1
	jmp	.LBB87_18
.LBB87_18:                              #   in Loop: Header=BB87_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_11
.LBB87_19:                              # %.loopexit
	jmp	.LBB87_20
.LBB87_20:
	cmpl	$1, -44(%rbp)
	jle	.LBB87_23
# %bb.21:
	movslq	-48(%rbp), %rbx
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	strlen
	cmpq	%rax, %rbx
	je	.LBB87_23
# %bb.22:
	movabsq	$.L.str.2.175, %rdi
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB87_23:
	cmpl	$0, -44(%rbp)
	jne	.LBB87_25
# %bb.24:
	movabsq	$.L.str.3.176, %rdi
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB87_25:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	je	.LBB87_33
# %bb.26:
	cmpq	$0, Getopt.optptr
	je	.LBB87_28
# %bb.27:
	movq	Getopt.optptr, %rax
	movq	24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	$0, Getopt.optptr
	movl	Getopt.optind, %eax
	addl	$1, %eax
	movl	%eax, Getopt.optind
	jmp	.LBB87_32
.LBB87_28:
	movl	Getopt.optind, %eax
	addl	$1, %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB87_30
# %bb.29:
	movabsq	$.L.str.4.177, %rdi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
	jmp	.LBB87_31
.LBB87_30:
	movq	-32(%rbp), %rax
	movl	Getopt.optind, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	Getopt.optind, %eax
	addl	$2, %eax
	movl	%eax, Getopt.optind
.LBB87_31:
	jmp	.LBB87_32
.LBB87_32:
	jmp	.LBB87_36
.LBB87_33:
	cmpq	$0, Getopt.optptr
	je	.LBB87_35
# %bb.34:
	movabsq	$.L.str.5.178, %rdi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB87_35:
	movq	24(%rbp), %rax
	movq	$0, (%rax)
	movl	Getopt.optind, %eax
	addl	$1, %eax
	movl	%eax, Getopt.optind
.LBB87_36:
	jmp	.LBB87_62
.LBB87_37:
	cmpq	$0, Getopt.optptr
	jne	.LBB87_39
# %bb.38:
	movq	-32(%rbp), %rax
	movslq	Getopt.optind, %rcx
	movq	(%rax,%rcx,8), %rax
	addq	$1, %rax
	movq	%rax, Getopt.optptr
.LBB87_39:
	movl	$-1, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB87_40:                              # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_46
# %bb.41:                               #   in Loop: Header=BB87_40 Depth=1
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$1, 8(%rax)
	jne	.LBB87_44
# %bb.42:                               #   in Loop: Header=BB87_40 Depth=1
	movq	Getopt.optptr, %rax
	movsbl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	(%rcx), %rcx
	movsbl	1(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB87_44
# %bb.43:
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_47
.LBB87_44:                              #   in Loop: Header=BB87_40 Depth=1
	jmp	.LBB87_45
.LBB87_45:                              #   in Loop: Header=BB87_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_40
.LBB87_46:                              # %.loopexit1
	jmp	.LBB87_47
.LBB87_47:
	cmpl	$-1, -12(%rbp)
	jne	.LBB87_49
# %bb.48:
	movabsq	$.L.str.6.179, %rdi
	movq	Getopt.optptr, %rax
	movsbl	(%rax), %esi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB87_49:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	je	.LBB87_57
# %bb.50:
	movq	Getopt.optptr, %rax
	movsbl	1(%rax), %eax
	cmpl	$0, %eax
	je	.LBB87_52
# %bb.51:
	movq	Getopt.optptr, %rax
	addq	$1, %rax
	movq	24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	Getopt.optind, %eax
	addl	$1, %eax
	movl	%eax, Getopt.optind
	jmp	.LBB87_56
.LBB87_52:
	movl	Getopt.optind, %eax
	addl	$1, %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_54
# %bb.53:
	movq	-32(%rbp), %rax
	movl	Getopt.optind, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	Getopt.optind, %eax
	addl	$2, %eax
	movl	%eax, Getopt.optind
	jmp	.LBB87_55
.LBB87_54:
	movabsq	$.L.str.4.177, %rdi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB87_55:
	jmp	.LBB87_56
.LBB87_56:
	movq	$0, Getopt.optptr
	jmp	.LBB87_61
.LBB87_57:
	movq	24(%rbp), %rax
	movq	$0, (%rax)
	movq	Getopt.optptr, %rax
	movsbl	1(%rax), %eax
	cmpl	$0, %eax
	je	.LBB87_59
# %bb.58:
	movq	Getopt.optptr, %rax
	addq	$1, %rax
	movq	%rax, Getopt.optptr
	jmp	.LBB87_60
.LBB87_59:
	movl	Getopt.optind, %eax
	addl	$1, %eax
	movl	%eax, Getopt.optind
	movq	$0, Getopt.optptr
.LBB87_60:
	jmp	.LBB87_61
.LBB87_61:
	jmp	.LBB87_62
.LBB87_62:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	je	.LBB87_75
# %bb.63:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$1, 12(%rax)
	jne	.LBB87_66
# %bb.64:
	movq	24(%rbp), %rax
	movq	(%rax), %rdi
	callq	IsInt
	cmpl	$0, %eax
	jne	.LBB87_66
# %bb.65:
	movabsq	$.L.str.7.180, %rdi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
	jmp	.LBB87_74
.LBB87_66:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$2, 12(%rax)
	jne	.LBB87_69
# %bb.67:
	movq	24(%rbp), %rax
	movq	(%rax), %rdi
	callq	IsReal
	cmpl	$0, %eax
	jne	.LBB87_69
# %bb.68:
	movabsq	$.L.str.8.181, %rdi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
	jmp	.LBB87_73
.LBB87_69:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$3, 12(%rax)
	jne	.LBB87_72
# %bb.70:
	movq	24(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	cmpq	$1, %rax
	je	.LBB87_72
# %bb.71:
	movabsq	$.L.str.9.182, %rdi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB87_72:
	jmp	.LBB87_73
.LBB87_73:
	jmp	.LBB87_74
.LBB87_74:
	jmp	.LBB87_75
.LBB87_75:
	movl	Getopt.optind, %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$1, -56(%rbp)
.LBB87_76:
	movl	-56(%rbp), %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end87:
	.size	Getopt, .Lfunc_end87-Getopt
	.cfi_endproc
                                        # -- End function
	.globl	GKIInit                 # -- Begin function GKIInit
	.p2align	4, 0x90
	.type	GKIInit,@function
GKIInit:                                # @GKIInit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%edi, %edi
	callq	gki_alloc
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end88:
	.size	GKIInit, .Lfunc_end88-GKIInit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gki_alloc
	.type	gki_alloc,@function
gki_alloc:                              # @gki_alloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jl	.LBB89_2
# %bb.1:
	cmpl	$4, -16(%rbp)
	jl	.LBB89_3
.LBB89_2:
	movabsq	$.L.str.7.183, %rdi
	movb	$0, %al
	callq	Die
.LBB89_3:
	movabsq	$.L.str.184, %rdi
	movl	$294, %esi              # imm = 0x126
	movl	$24, %edx
	callq	sre_malloc
	movabsq	$.L.str.184, %rdi
	movq	%rax, -8(%rbp)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movslq	8(%rax), %rax
	movl	gki_primes(,%rax,4), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movslq	12(%rax), %rax
	imulq	$24, %rax, %rdx
	movl	$298, %esi              # imm = 0x12A
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$0, -12(%rbp)
.LBB89_4:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB89_7
# %bb.5:                                #   in Loop: Header=BB89_4 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.6:                                #   in Loop: Header=BB89_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_4
.LBB89_7:
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end89:
	.size	gki_alloc, .Lfunc_end89-gki_alloc
	.cfi_endproc
                                        # -- End function
	.globl	GKIFree                 # -- Begin function GKIFree
	.p2align	4, 0x90
	.type	GKIFree,@function
GKIFree:                                # @GKIFree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB90_2
# %bb.1:
	jmp	.LBB90_12
.LBB90_2:
	movl	$0, -4(%rbp)
.LBB90_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_5 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB90_11
# %bb.4:                                #   in Loop: Header=BB90_3 Depth=1
	jmp	.LBB90_5
.LBB90_5:                               #   Parent Loop BB90_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB90_9
# %bb.6:                                #   in Loop: Header=BB90_5 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpq	$0, (%rax)
	je	.LBB90_8
# %bb.7:                                #   in Loop: Header=BB90_5 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rdi
	callq	free
.LBB90_8:                               #   in Loop: Header=BB90_5 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB90_5
.LBB90_9:                               #   in Loop: Header=BB90_3 Depth=1
	jmp	.LBB90_10
.LBB90_10:                              #   in Loop: Header=BB90_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_3
.LBB90_11:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rdi
	callq	free
.LBB90_12:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end90:
	.size	GKIFree, .Lfunc_end90-GKIFree
	.cfi_endproc
                                        # -- End function
	.globl	GKIStoreKey             # -- Begin function GKIStoreKey
	.p2align	4, 0x90
	.type	GKIStoreKey,@function
GKIStoreKey:                            # @GKIStoreKey
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	gki_hashvalue
	movabsq	$.L.str.184, %rdi
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movl	$189, %esi
	movl	$24, %edx
	callq	sre_malloc
	movabsq	$.L.str.184, %rbx
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$1, %rax
	shlq	$0, %rax
	movq	%rbx, %rdi
	movl	$190, %esi
	movq	%rax, %rdx
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	%rax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$3, 12(%rcx), %ecx
	cmpl	%ecx, %eax
	jle	.LBB91_3
# %bb.1:
	movq	-16(%rbp), %rax
	cmpl	$3, 8(%rax)
	jge	.LBB91_3
# %bb.2:
	movq	-16(%rbp), %rdi
	callq	gki_upsize
.LBB91_3:
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	subl	$1, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end91:
	.size	GKIStoreKey, .Lfunc_end91-GKIStoreKey
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gki_hashvalue
	.type	gki_hashvalue,@function
gki_hashvalue:                          # @gki_hashvalue
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB92_1:                               # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB92_6
# %bb.2:                                #   in Loop: Header=BB92_1 Depth=1
	movl	-4(%rbp), %eax
	shll	$7, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	1(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB92_4
# %bb.3:
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cltd
	idivl	12(%rcx)
	movl	%edx, -4(%rbp)
	jmp	.LBB92_7
.LBB92_4:                               #   in Loop: Header=BB92_1 Depth=1
	movl	-4(%rbp), %eax
	shll	$7, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	addl	%ecx, %eax
	movq	-24(%rbp), %rcx
	cltd
	idivl	12(%rcx)
	movl	%edx, -4(%rbp)
# %bb.5:                                #   in Loop: Header=BB92_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB92_1
.LBB92_6:                               # %.loopexit
	jmp	.LBB92_7
.LBB92_7:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end92:
	.size	gki_hashvalue, .Lfunc_end92-gki_hashvalue
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gki_upsize
	.type	gki_upsize,@function
gki_upsize:                             # @gki_upsize
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jl	.LBB93_2
# %bb.1:
	movl	$0, -44(%rbp)
	jmp	.LBB93_10
.LBB93_2:
	movq	-24(%rbp), %rax
	movl	8(%rax), %edi
	addl	$1, %edi
	callq	gki_alloc
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB93_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_5 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB93_9
# %bb.4:                                #   in Loop: Header=BB93_3 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
.LBB93_5:                               #   Parent Loop BB93_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$0, -40(%rbp)
	je	.LBB93_7
# %bb.6:                                #   in Loop: Header=BB93_5 Depth=2
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	gki_hashvalue
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	%rax, 16(%rcx)
	jmp	.LBB93_5
.LBB93_7:                               #   in Loop: Header=BB93_3 Depth=1
	jmp	.LBB93_8
.LBB93_8:                               #   in Loop: Header=BB93_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_3
.LBB93_9:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rdi
	callq	free
	movl	$1, -44(%rbp)
.LBB93_10:
	movl	-44(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end93:
	.size	gki_upsize, .Lfunc_end93-gki_upsize
	.cfi_endproc
                                        # -- End function
	.globl	GKIKeyIndex             # -- Begin function GKIKeyIndex
	.p2align	4, 0x90
	.type	GKIKeyIndex,@function
GKIKeyIndex:                            # @GKIKeyIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	gki_hashvalue
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
.LBB94_1:                               # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB94_6
# %bb.2:                                #   in Loop: Header=BB94_1 Depth=1
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB94_4
# %bb.3:
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_7
.LBB94_4:                               #   in Loop: Header=BB94_1 Depth=1
	jmp	.LBB94_5
.LBB94_5:                               #   in Loop: Header=BB94_1 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB94_1
.LBB94_6:
	movl	$-1, -12(%rbp)
.LBB94_7:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end94:
	.size	GKIKeyIndex, .Lfunc_end94-GKIKeyIndex
	.cfi_endproc
                                        # -- End function
	.globl	GKIStatus               # -- Begin function GKIStatus
	.p2align	4, 0x90
	.type	GKIStatus,@function
GKIStatus:                              # @GKIStatus
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movl	$0, -20(%rbp)
	movl	$-1, -16(%rbp)
	movl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	movl	$0, -8(%rbp)
.LBB95_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB95_14
# %bb.2:                                #   in Loop: Header=BB95_1 Depth=1
	movl	$0, -4(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
.LBB95_3:                               #   Parent Loop BB95_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$0, -40(%rbp)
	je	.LBB95_6
# %bb.4:                                #   in Loop: Header=BB95_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.5:                                #   in Loop: Header=BB95_3 Depth=2
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB95_3
.LBB95_6:                               #   in Loop: Header=BB95_1 Depth=1
	cmpl	$0, -4(%rbp)
	jne	.LBB95_8
# %bb.7:                                #   in Loop: Header=BB95_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB95_8:                               #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB95_10
# %bb.9:                                #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB95_10:                              #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB95_12
# %bb.11:                               #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_12:                              #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_13
.LBB95_13:                              #   in Loop: Header=BB95_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_1
.LBB95_14:
	movabsq	$.L.str.1.187, %rdi
	movq	-32(%rbp), %rax
	movl	16(%rax), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.2.188, %rdi
	movq	-32(%rbp), %rax
	movl	12(%rax), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.3.189, %rdi
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	movabsq	$.L.str.4.190, %rdi
	movl	-20(%rbp), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.5.191, %rdi
	movl	-16(%rbp), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.6.192, %rdi
	movl	-12(%rbp), %esi
	movb	$0, %al
	callq	printf
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end95:
	.size	GKIStatus, .Lfunc_end95-GKIStatus
	.cfi_endproc
                                        # -- End function
	.globl	GSIOpen                 # -- Begin function GSIOpen
	.p2align	4, 0x90
	.type	GSIOpen,@function
GSIOpen:                                # @GSIOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.193, %rax
	movq	%rdi, -24(%rbp)
	movq	%rax, %rdi
	movl	$58, %esi
	movl	$16, %edx
	callq	sre_malloc
	movabsq	$.L.str.1.194, %rsi
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rdi
	callq	fopen
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	jne	.LBB96_2
# %bb.1:
	movq	-8(%rbp), %rdi
	callq	free
	movl	$4, squid_errno
	movq	$0, -16(%rbp)
	jmp	.LBB96_11
.LBB96_2:
	leaq	-64(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$32, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB96_4
# %bb.3:
	movq	-8(%rbp), %rdi
	callq	free
	movl	$2, squid_errno
	movq	$0, -16(%rbp)
	jmp	.LBB96_11
.LBB96_4:
	leaq	-64(%rbp), %rdi
	movl	$.L.str.2.195, %esi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB96_6
# %bb.5:
	movq	-8(%rbp), %rdi
	callq	free
	movl	$5, squid_errno
	movq	$0, -16(%rbp)
	jmp	.LBB96_11
.LBB96_6:
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$2, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB96_8
# %bb.7:
	movq	-8(%rbp), %rdi
	callq	free
	movl	$2, squid_errno
	movq	$0, -16(%rbp)
	jmp	.LBB96_11
.LBB96_8:
	movq	-8(%rbp), %rdi
	addq	$12, %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB96_10
# %bb.9:
	movq	-8(%rbp), %rdi
	callq	free
	movl	$2, squid_errno
	movq	$0, -16(%rbp)
	jmp	.LBB96_11
.LBB96_10:
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %edi
	callq	sre_ntoh16
	movq	-8(%rbp), %rcx
	movw	%ax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %edi
	callq	sre_ntoh32
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB96_11:
	movq	-16(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end96:
	.size	GSIOpen, .Lfunc_end96-GSIOpen
	.cfi_endproc
                                        # -- End function
	.globl	GSIGetRecord            # -- Begin function GSIGetRecord
	.p2align	4, 0x90
	.type	GSIGetRecord,@function
GSIGetRecord:                           # @GSIGetRecord
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB97_2
# %bb.1:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movl	$32, %esi
	movl	$1, %edx
	callq	fseek
	jmp	.LBB97_5
.LBB97_2:
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$32, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB97_4
# %bb.3:
	movl	$2, squid_errno
	movl	$0, -4(%rbp)
	jmp	.LBB97_20
.LBB97_4:
	jmp	.LBB97_5
.LBB97_5:
	cmpq	$0, -32(%rbp)
	jne	.LBB97_7
# %bb.6:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movl	$2, %esi
	movl	$1, %edx
	callq	fseek
	jmp	.LBB97_10
.LBB97_7:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$2, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB97_9
# %bb.8:
	movl	$2, squid_errno
	movl	$0, -4(%rbp)
	jmp	.LBB97_20
.LBB97_9:
	jmp	.LBB97_10
.LBB97_10:
	cmpq	$0, -24(%rbp)
	jne	.LBB97_12
# %bb.11:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movl	$4, %esi
	movl	$1, %edx
	callq	fseek
	jmp	.LBB97_15
.LBB97_12:
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB97_14
# %bb.13:
	movl	$2, squid_errno
	movl	$0, -4(%rbp)
	jmp	.LBB97_20
.LBB97_14:
	jmp	.LBB97_15
.LBB97_15:
	cmpq	$0, -32(%rbp)
	je	.LBB97_17
# %bb.16:
	movq	-32(%rbp), %rax
	movzwl	(%rax), %edi
	callq	sre_ntoh16
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB97_17:
	cmpq	$0, -24(%rbp)
	je	.LBB97_19
# %bb.18:
	movq	-24(%rbp), %rax
	movl	(%rax), %edi
	callq	sre_ntoh32
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB97_19:
	movl	$1, -4(%rbp)
.LBB97_20:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end97:
	.size	GSIGetRecord, .Lfunc_end97-GSIGetRecord
	.cfi_endproc
                                        # -- End function
	.globl	GSIGetOffset            # -- Begin function GSIGetOffset
	.p2align	4, 0x90
	.type	GSIGetOffset,@function
GSIGetOffset:                           # @GSIGetOffset
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -56(%rbp)
	movb	$0, -96(%rbp)
	movq	-24(%rbp), %rax
	movzwl	8(%rax), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movzwl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	-8(%rbp), %eax
	shrl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	imull	$38, -4(%rbp), %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	callq	fseek
.LBB98_1:                               # =>This Inner Loop Header: Depth=1
	leaq	-30(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-128(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	GSIGetRecord
	cmpl	$0, %eax
	je	.LBB98_14
# %bb.2:                                #   in Loop: Header=BB98_1 Depth=1
	leaq	-128(%rbp), %rdi
	movq	-80(%rbp), %rsi
	callq	strcmp
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB98_4
# %bb.3:
	jmp	.LBB98_15
.LBB98_4:                               #   in Loop: Header=BB98_1 Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jb	.LBB98_6
# %bb.5:
	movl	$0, -36(%rbp)
	jmp	.LBB98_16
.LBB98_6:                               #   in Loop: Header=BB98_1 Depth=1
	cmpl	$0, -28(%rbp)
	jge	.LBB98_8
# %bb.7:                                #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_11
.LBB98_8:                               #   in Loop: Header=BB98_1 Depth=1
	cmpl	$0, -28(%rbp)
	jle	.LBB98_10
# %bb.9:                                #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB98_10:                              #   in Loop: Header=BB98_1 Depth=1
	jmp	.LBB98_11
.LBB98_11:                              #   in Loop: Header=BB98_1 Depth=1
	jmp	.LBB98_12
.LBB98_12:                              #   in Loop: Header=BB98_1 Depth=1
	jmp	.LBB98_13
.LBB98_13:                              #   in Loop: Header=BB98_1 Depth=1
	movl	-12(%rbp), %eax
	addl	-8(%rbp), %eax
	shrl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	imull	$38, -4(%rbp), %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	callq	fseek
	jmp	.LBB98_1
.LBB98_14:                              # %.loopexit
	jmp	.LBB98_15
.LBB98_15:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movzwl	-30(%rbp), %eax
	imull	$38, %eax, %eax
	movslq	%eax, %rsi
	xorl	%edx, %edx
	callq	fseek
	leaq	-40(%rbp), %rcx
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	xorl	%edx, %edx
	callq	GSIGetRecord
	movl	-40(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -36(%rbp)
.LBB98_16:
	movl	-36(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end98:
	.size	GSIGetOffset, .Lfunc_end98-GSIGetOffset
	.cfi_endproc
                                        # -- End function
	.globl	GSIClose                # -- Begin function GSIClose
	.p2align	4, 0x90
	.type	GSIClose,@function
GSIClose:                               # @GSIClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fclose
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end99:
	.size	GSIClose, .Lfunc_end99-GSIClose
	.cfi_endproc
                                        # -- End function
	.globl	GSIAllocIndex           # -- Begin function GSIAllocIndex
	.p2align	4, 0x90
	.type	GSIAllocIndex,@function
GSIAllocIndex:                          # @GSIAllocIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.193, %rdi
	movl	$200, %esi
	movl	$40, %edx
	callq	sre_malloc
	movabsq	$.L.str.193, %rdi
	movq	%rax, -8(%rbp)
	movl	$201, %esi
	movl	$80, %edx
	callq	sre_malloc
	movabsq	$.L.str.193, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$202, %esi
	movl	$40, %edx
	callq	sre_malloc
	movabsq	$.L.str.193, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movl	$203, %esi
	movl	$4000, %edx             # imm = 0xFA0
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-8(%rbp), %rax
	movw	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end100:
	.size	GSIAllocIndex, .Lfunc_end100-GSIAllocIndex
	.cfi_endproc
                                        # -- End function
	.globl	GSIFreeIndex            # -- Begin function GSIFreeIndex
	.p2align	4, 0x90
	.type	GSIFreeIndex,@function
GSIFreeIndex:                           # @GSIFreeIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB101_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzwl	16(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_4
# %bb.2:                                #   in Loop: Header=BB101_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.3:                                #   in Loop: Header=BB101_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_1
.LBB101_4:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end101:
	.size	GSIFreeIndex, .Lfunc_end101-GSIFreeIndex
	.cfi_endproc
                                        # -- End function
	.globl	GSIAddFileToIndex       # -- Begin function GSIAddFileToIndex
	.p2align	4, 0x90
	.type	GSIAddFileToIndex,@function
GSIAddFileToIndex:                      # @GSIAddFileToIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	movl	%eax, -12(%rbp)
	cmpl	$32, -12(%rbp)
	jl	.LBB102_2
# %bb.1:
	movabsq	$.L.str.3.196, %rdi
	movb	$0, %al
	callq	Die
.LBB102_2:
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	sre_strdup
	movl	$10, %ecx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movzwl	16(%rsi), %esi
	movq	%rax, (%rdx,%rsi,8)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movzwl	16(%rsi), %esi
	movl	%eax, (%rdx,%rsi,4)
	movq	-8(%rbp), %rax
	movw	16(%rax), %dx
	addw	$1, %dx
	movw	%dx, 16(%rax)
	movq	-8(%rbp), %rax
	movzwl	16(%rax), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB102_4
# %bb.3:
	movabsq	$.L.str.193, %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movzwl	16(%rax), %eax
	addl	$10, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$229, %esi
	callq	sre_realloc
	movabsq	$.L.str.193, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movzwl	16(%rax), %eax
	addl	$10, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$230, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
.LBB102_4:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end102:
	.size	GSIAddFileToIndex, .Lfunc_end102-GSIAddFileToIndex
	.cfi_endproc
                                        # -- End function
	.globl	GSIAddKeyToIndex        # -- Begin function GSIAddKeyToIndex
	.p2align	4, 0x90
	.type	GSIAddKeyToIndex,@function
GSIAddKeyToIndex:                       # @GSIAddKeyToIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	cmpq	$32, %rax
	jb	.LBB103_2
# %bb.1:
	movabsq	$.L.str.4.197, %rdi
	movb	$0, %al
	callq	Die
.LBB103_2:
	cmpl	$65535, -12(%rbp)       # imm = 0xFFFF
	jle	.LBB103_4
# %bb.3:
	movabsq	$.L.str.5.198, %rdi
	movb	$0, %al
	callq	Die
.LBB103_4:
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpq	%rax, -24(%rbp)
	jle	.LBB103_6
# %bb.5:
	movabsq	$.L.str.6.199, %rdi
	movb	$0, %al
	callq	Die
.LBB103_6:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	movslq	32(%rax), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	movl	$31, %edx
	callq	strncpy
	movl	$100, %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rdx
	movslq	32(%rdx), %rdx
	imulq	$40, %rdx, %rdx
	addq	%rdx, %rax
	movb	$0, 31(%rax)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movslq	32(%rsi), %rsi
	imulq	$40, %rsi, %rsi
	addq	%rsi, %rdx
	movw	%ax, 32(%rdx)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movslq	32(%rsi), %rsi
	imulq	$40, %rsi, %rsi
	addq	%rsi, %rdx
	movl	%eax, 36(%rdx)
	movq	-8(%rbp), %rax
	movl	32(%rax), %edx
	addl	$1, %edx
	movl	%edx, 32(%rax)
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB103_8
# %bb.7:
	movabsq	$.L.str.193, %rdi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	addl	$100, %eax
	cltq
	imulq	$40, %rax, %rcx
	movl	$247, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
.LBB103_8:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end103:
	.size	GSIAddKeyToIndex, .Lfunc_end103-GSIAddKeyToIndex
	.cfi_endproc
                                        # -- End function
	.globl	GSISortIndex            # -- Begin function GSISortIndex
	.p2align	4, 0x90
	.type	GSISortIndex,@function
GSISortIndex:                           # @GSISortIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$gsi_keysorter, %rcx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	32(%rax), %esi
	movl	$40, %edx
	movb	$0, %al
	callq	specqsort
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end104:
	.size	GSISortIndex, .Lfunc_end104-GSISortIndex
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gsi_keysorter
	.type	gsi_keysorter,@function
gsi_keysorter:                          # @gsi_keysorter
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	strcmp
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end105:
	.size	gsi_keysorter, .Lfunc_end105-gsi_keysorter
	.cfi_endproc
                                        # -- End function
	.globl	GSIWriteIndex           # -- Begin function GSIWriteIndex
	.p2align	4, 0x90
	.type	GSIWriteIndex,@function
GSIWriteIndex:                          # @GSIWriteIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movzwl	16(%rax), %eax
	cmpl	$65535, %eax            # imm = 0xFFFF
	jle	.LBB106_2
# %bb.1:
	movabsq	$.L.str.7.200, %rdi
	movb	$0, %al
	callq	Die
.LBB106_2:
	movq	-16(%rbp), %rax
	cmpl	$-1, 32(%rax)
	jbe	.LBB106_4
# %bb.3:
	movabsq	$.L.str.8.201, %rdi
	movb	$0, %al
	callq	Die
.LBB106_4:
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movzwl	16(%rax), %esi
	movq	-16(%rbp), %rax
	movslq	32(%rax), %rdx
	callq	GSIWriteHeader
	movl	$0, -4(%rbp)
.LBB106_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzwl	16(%rcx), %ecx
	cmpl	%ecx, %eax
	jae	.LBB106_8
# %bb.6:                                #   in Loop: Header=BB106_5 Depth=1
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movl	(%rax,%rcx,4), %ecx
	callq	GSIWriteFileRecord
# %bb.7:                                #   in Loop: Header=BB106_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_5
.LBB106_8:
	movl	$0, -4(%rbp)
.LBB106_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	32(%rcx), %eax
	jae	.LBB106_12
# %bb.10:                               #   in Loop: Header=BB106_9 Depth=1
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	24(%rax), %rsi
	movl	-4(%rbp), %eax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-4(%rbp), %ecx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	32(%rax), %edx
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-4(%rbp), %ecx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	36(%rax), %ecx
	callq	GSIWriteKeyRecord
# %bb.11:                               #   in Loop: Header=BB106_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_9
.LBB106_12:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end106:
	.size	GSIWriteIndex, .Lfunc_end106-GSIWriteIndex
	.cfi_endproc
                                        # -- End function
	.globl	GSIWriteHeader          # -- Begin function GSIWriteHeader
	.p2align	4, 0x90
	.type	GSIWriteHeader,@function
GSIWriteHeader:                         # @GSIWriteHeader
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -40(%rbp)
	cmpl	$65535, -20(%rbp)       # imm = 0xFFFF
	jle	.LBB107_2
# %bb.1:
	movabsq	$.L.str.9.205, %rdi
	movb	$0, %al
	callq	Die
.LBB107_2:
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpq	%rax, -40(%rbp)
	jle	.LBB107_4
# %bb.3:
	movabsq	$.L.str.10.206, %rdi
	movb	$0, %al
	callq	Die
.LBB107_4:
	movl	-20(%rbp), %eax
	movw	%ax, -10(%rbp)
	movq	-40(%rbp), %rax
	movl	%eax, -16(%rbp)
	movzwl	-10(%rbp), %edi
	callq	sre_hton16
	movw	%ax, -10(%rbp)
	movl	-16(%rbp), %edi
	callq	sre_hton32
	leaq	-80(%rbp), %rbx
	movl	%eax, -16(%rbp)
	movq	%rbx, %rdi
	movl	$.L.str.2.195, %esi
	callq	strcpy
	movq	-32(%rbp), %rcx
	movq	%rbx, %rdi
	movl	$1, %esi
	movl	$32, %edx
	callq	fwrite
	cmpq	$32, %rax
	jae	.LBB107_6
# %bb.5:
	movabsq	$.L.str.193, %rdi
	movl	$314, %esi              # imm = 0x13A
	callq	Panic
.LBB107_6:
	leaq	-10(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	jae	.LBB107_8
# %bb.7:
	movabsq	$.L.str.193, %rdi
	movl	$315, %esi              # imm = 0x13B
	callq	Panic
.LBB107_8:
	leaq	-16(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	jae	.LBB107_10
# %bb.9:
	movabsq	$.L.str.193, %rdi
	movl	$316, %esi              # imm = 0x13C
	callq	Panic
.LBB107_10:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end107:
	.size	GSIWriteHeader, .Lfunc_end107-GSIWriteHeader
	.cfi_endproc
                                        # -- End function
	.globl	GSIWriteFileRecord      # -- Begin function GSIWriteFileRecord
	.p2align	4, 0x90
	.type	GSIWriteFileRecord,@function
GSIWriteFileRecord:                     # @GSIWriteFileRecord
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	cmpq	$32, %rax
	jb	.LBB108_2
# %bb.1:
	movl	$0, -20(%rbp)
	jmp	.LBB108_13
.LBB108_2:
	cmpl	$65535, -16(%rbp)       # imm = 0xFFFF
	jle	.LBB108_4
# %bb.3:
	movabsq	$.L.str.11.202, %rdi
	movb	$0, %al
	callq	Die
.LBB108_4:
	cmpl	$-1, -12(%rbp)
	jbe	.LBB108_6
# %bb.5:
	movabsq	$.L.str.12.204, %rdi
	movb	$0, %al
	callq	Die
.LBB108_6:
	movl	-16(%rbp), %eax
	movw	%ax, -2(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movzwl	-2(%rbp), %edi
	callq	sre_hton16
	movw	%ax, -2(%rbp)
	movl	-8(%rbp), %edi
	callq	sre_hton32
	movl	%eax, -8(%rbp)
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$32, %edx
	callq	fwrite
	cmpq	$32, %rax
	jae	.LBB108_8
# %bb.7:
	movabsq	$.L.str.193, %rdi
	movl	$347, %esi              # imm = 0x15B
	callq	Panic
.LBB108_8:
	leaq	-2(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	jae	.LBB108_10
# %bb.9:
	movabsq	$.L.str.193, %rdi
	movl	$348, %esi              # imm = 0x15C
	callq	Panic
.LBB108_10:
	leaq	-8(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	jae	.LBB108_12
# %bb.11:
	movabsq	$.L.str.193, %rdi
	movl	$349, %esi              # imm = 0x15D
	callq	Panic
.LBB108_12:
	movl	$1, -20(%rbp)
.LBB108_13:
	movl	-20(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end108:
	.size	GSIWriteFileRecord, .Lfunc_end108-GSIWriteFileRecord
	.cfi_endproc
                                        # -- End function
	.globl	GSIWriteKeyRecord       # -- Begin function GSIWriteKeyRecord
	.p2align	4, 0x90
	.type	GSIWriteKeyRecord,@function
GSIWriteKeyRecord:                      # @GSIWriteKeyRecord
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	cmpq	$32, %rax
	jb	.LBB109_2
# %bb.1:
	movl	$0, -16(%rbp)
	jmp	.LBB109_13
.LBB109_2:
	cmpl	$65535, -12(%rbp)       # imm = 0xFFFF
	jle	.LBB109_4
# %bb.3:
	movabsq	$.L.str.11.202, %rdi
	movb	$0, %al
	callq	Die
.LBB109_4:
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpq	%rax, -32(%rbp)
	jle	.LBB109_6
# %bb.5:
	movabsq	$.L.str.13.203, %rdi
	movb	$0, %al
	callq	Die
.LBB109_6:
	movl	-12(%rbp), %eax
	movw	%ax, -2(%rbp)
	movq	-32(%rbp), %rax
	movl	%eax, -8(%rbp)
	movzwl	-2(%rbp), %edi
	callq	sre_hton16
	movw	%ax, -2(%rbp)
	movl	-8(%rbp), %edi
	callq	sre_hton32
	movl	%eax, -8(%rbp)
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$32, %edx
	callq	fwrite
	cmpq	$32, %rax
	jae	.LBB109_8
# %bb.7:
	movabsq	$.L.str.193, %rdi
	movl	$382, %esi              # imm = 0x17E
	callq	Panic
.LBB109_8:
	leaq	-2(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	jae	.LBB109_10
# %bb.9:
	movabsq	$.L.str.193, %rdi
	movl	$383, %esi              # imm = 0x17F
	callq	Panic
.LBB109_10:
	leaq	-8(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	jae	.LBB109_12
# %bb.11:
	movabsq	$.L.str.193, %rdi
	movl	$384, %esi              # imm = 0x180
	callq	Panic
.LBB109_12:
	movl	$1, -16(%rbp)
.LBB109_13:
	movl	-16(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end109:
	.size	GSIWriteKeyRecord, .Lfunc_end109-GSIWriteKeyRecord
	.cfi_endproc
                                        # -- End function
	.globl	AllocHistogram          # -- Begin function AllocHistogram
	.p2align	4, 0x90
	.type	AllocHistogram,@function
AllocHistogram:                         # @AllocHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.207, %rax
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	-20(%rbp), %ecx
	subl	-24(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -16(%rbp)
	movq	%rax, %rdi
	movl	$68, %esi
	movl	$64, %edx
	callq	sre_malloc
	movabsq	$.L.str.207, %rdi
	movq	%rax, -8(%rbp)
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$2147483647, 20(%rax)   # imm = 0x7FFFFFFF
	movq	-8(%rbp), %rax
	movl	$-2147483648, 16(%rax)  # imm = 0x80000000
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movl	$75, %esi
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$0, -12(%rbp)
.LBB110_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB110_4
# %bb.2:                                #   in Loop: Header=BB110_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB110_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_1
.LBB110_4:
	movq	-8(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end110:
	.size	AllocHistogram, .Lfunc_end110-AllocHistogram
	.cfi_endproc
                                        # -- End function
	.globl	FreeHistogram           # -- Begin function FreeHistogram
	.p2align	4, 0x90
	.type	FreeHistogram,@function
FreeHistogram:                          # @FreeHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB111_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
.LBB111_2:
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end111:
	.size	FreeHistogram, .Lfunc_end111-FreeHistogram
	.cfi_endproc
                                        # -- End function
	.globl	UnfitHistogram          # -- Begin function UnfitHistogram
	.p2align	4, 0x90
	.type	UnfitHistogram,@function
UnfitHistogram:                         # @UnfitHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB112_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
.LBB112_2:
	movq	-8(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end112:
	.size	UnfitHistogram, .Lfunc_end112-UnfitHistogram
	.cfi_endproc
                                        # -- End function
	.globl	AddToHistogram          # -- Begin function AddToHistogram
	.p2align	4, 0x90
	.type	AddToHistogram,@function
AddToHistogram:                         # @AddToHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -32(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	.LBB113_2
# %bb.1:
	movabsq	$.L.str.1.208, %rdi
	movb	$0, %al
	callq	Die
.LBB113_2:
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	floor
	cvttsd2si	%xmm0, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jge	.LBB113_8
# %bb.3:
	movabsq	$.L.str.207, %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	subl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 8(%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movslq	-20(%rbp), %rcx
	shlq	$2, %rcx
	movl	$148, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rsi
	movslq	-24(%rbp), %rdx
	shlq	$2, %rdx
	callq	memmove
	movl	$0, -12(%rbp)
.LBB113_4:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB113_7
# %bb.5:                                #   in Loop: Header=BB113_4 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.6:                                #   in Loop: Header=BB113_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_4
.LBB113_7:
	jmp	.LBB113_15
.LBB113_8:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jle	.LBB113_14
# %bb.9:
	movabsq	$.L.str.207, %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	addl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movslq	-20(%rbp), %rcx
	shlq	$2, %rcx
	movl	$159, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_10:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB113_13
# %bb.11:                               #   in Loop: Header=BB113_10 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.12:                               #   in Loop: Header=BB113_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_10
.LBB113_13:
	jmp	.LBB113_14
.LBB113_14:
	jmp	.LBB113_15
.LBB113_15:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB113_17
# %bb.16:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
.LBB113_17:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jle	.LBB113_19
# %bb.18:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
.LBB113_19:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end113:
	.size	AddToHistogram, .Lfunc_end113-AddToHistogram
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function PrintASCIIHistogram
.LCPI114_0:
	.long	1065353216              # float 1
	.text
	.globl	PrintASCIIHistogram
	.p2align	4, 0x90
	.type	PrintASCIIHistogram,@function
PrintASCIIHistogram:                    # @PrintASCIIHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$3, -64(%rbp)
	movl	$0, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -4(%rbp)
.LBB114_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	16(%rcx), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	cmpl	%ecx, %eax
	jg	.LBB114_6
# %bb.2:                                #   in Loop: Header=BB114_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-56(%rbp), %eax
	jle	.LBB114_4
# %bb.3:                                #   in Loop: Header=BB114_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, -28(%rbp)
.LBB114_4:                              #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_5
.LBB114_5:                              #   in Loop: Header=BB114_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_1
.LBB114_6:
	movl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -20(%rbp)
.LBB114_7:                              # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jle	.LBB114_14
# %bb.8:                                #   in Loop: Header=BB114_7 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB114_10
# %bb.9:                                #   in Loop: Header=BB114_7 Depth=1
	movl	$0, -20(%rbp)
	jmp	.LBB114_13
.LBB114_10:                             #   in Loop: Header=BB114_7 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cmpl	-64(%rbp), %eax
	jne	.LBB114_12
# %bb.11:
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB114_15
.LBB114_12:                             #   in Loop: Header=BB114_7 Depth=1
	jmp	.LBB114_13
.LBB114_13:                             #   in Loop: Header=BB114_7 Depth=1
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB114_7
.LBB114_14:                             # %.loopexit1
	jmp	.LBB114_15
.LBB114_15:
	movl	$0, -20(%rbp)
.LBB114_16:                             # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB114_23
# %bb.17:                               #   in Loop: Header=BB114_16 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB114_19
# %bb.18:                               #   in Loop: Header=BB114_16 Depth=1
	movl	$0, -20(%rbp)
	jmp	.LBB114_22
.LBB114_19:                             #   in Loop: Header=BB114_16 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cmpl	-64(%rbp), %eax
	jne	.LBB114_21
# %bb.20:
	movl	-64(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	jmp	.LBB114_24
.LBB114_21:                             #   in Loop: Header=BB114_16 Depth=1
	jmp	.LBB114_22
.LBB114_22:                             #   in Loop: Header=BB114_16 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB114_16
.LBB114_23:                             # %.loopexit
	jmp	.LBB114_24
.LBB114_24:
	movl	$0, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -4(%rbp)
.LBB114_25:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	cmpl	%ecx, %eax
	jg	.LBB114_28
# %bb.26:                               #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.27:                               #   in Loop: Header=BB114_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_25
.LBB114_28:
	movl	$0, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -4(%rbp)
.LBB114_29:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-32(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	cmpl	%ecx, %eax
	jl	.LBB114_32
# %bb.30:                               #   in Loop: Header=BB114_29 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.31:                               #   in Loop: Header=BB114_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_29
.LBB114_32:
	movl	-48(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jle	.LBB114_34
# %bb.33:
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB114_34:
	movl	-44(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jle	.LBB114_36
# %bb.35:
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB114_36:
	movabsq	$.L.str.2.209, %rsi
	movabsq	$.L.str.3.210, %r10
	movabsq	$.L.str.4.211, %rcx
	movabsq	$.L.str.5.212, %r8
	movl	$59, %edi
	movl	-56(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	%edi
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rdi
	movl	-60(%rbp), %r9d
	movq	%r10, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.6.213, %rsi
	movabsq	$.L.str.7.214, %rdx
	movabsq	$.L.str.8.215, %rcx
	movq	-40(%rbp), %rdi
	movq	%rcx, %r8
	movb	$0, %al
	callq	fprintf
	movb	$0, -80(%rbp)
	movb	$10, -81(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB114_37:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_48 Depth 2
                                        #     Child Loop BB114_57 Depth 2
                                        #     Child Loop BB114_70 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB114_81
# %bb.38:                               #   in Loop: Header=BB114_37 Depth=1
	leaq	-160(%rbp), %rdi
	movl	$32, %esi
	movl	$79, %edx
	callq	memset
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB114_40
# %bb.39:                               #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_80
.LBB114_40:                             #   in Loop: Header=BB114_37 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB114_42
# %bb.41:                               #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_80
.LBB114_42:                             #   in Loop: Header=BB114_37 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB114_53
# %bb.43:                               #   in Loop: Header=BB114_37 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	20(%rcx), %eax
	je	.LBB114_53
# %bb.44:                               #   in Loop: Header=BB114_37 Depth=1
	movabsq	$.L.str.9.216, %rsi
	movabsq	$.L.str.10.217, %r8
	leaq	-160(%rbp), %rdi
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	-48(%rbp), %ecx
	movb	$0, %al
	callq	sprintf
	cmpl	$0, -48(%rbp)
	jle	.LBB114_52
# %bb.45:                               #   in Loop: Header=BB114_37 Depth=1
	movl	-48(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	-60(%rbp)
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cmpl	$60, -20(%rbp)
	jle	.LBB114_47
# %bb.46:                               #   in Loop: Header=BB114_37 Depth=1
	movabsq	$.L.str.11.218, %rdi
	movb	$0, %al
	callq	Die
.LBB114_47:                             #   in Loop: Header=BB114_37 Depth=1
	movl	$20, -24(%rbp)
.LBB114_48:                             #   Parent Loop BB114_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -20(%rbp)
	jle	.LBB114_51
# %bb.49:                               #   in Loop: Header=BB114_48 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -24(%rbp)
	cltq
	movb	$61, -160(%rbp,%rax)
# %bb.50:                               #   in Loop: Header=BB114_48 Depth=2
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_48
.LBB114_51:                             #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_52
.LBB114_52:                             #   in Loop: Header=BB114_37 Depth=1
	leaq	-160(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	jmp	.LBB114_80
.LBB114_53:                             #   in Loop: Header=BB114_37 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB114_62
# %bb.54:                               #   in Loop: Header=BB114_37 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	je	.LBB114_62
# %bb.55:                               #   in Loop: Header=BB114_37 Depth=1
	movabsq	$.L.str.12.219, %rsi
	movabsq	$.L.str.10.217, %r8
	leaq	-160(%rbp), %rdi
	movl	-4(%rbp), %edx
	movl	-44(%rbp), %ecx
	movb	$0, %al
	callq	sprintf
	cmpl	$0, -44(%rbp)
	jle	.LBB114_61
# %bb.56:                               #   in Loop: Header=BB114_37 Depth=1
	movl	-44(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	-60(%rbp)
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	$20, -24(%rbp)
.LBB114_57:                             #   Parent Loop BB114_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -20(%rbp)
	jle	.LBB114_60
# %bb.58:                               #   in Loop: Header=BB114_57 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -24(%rbp)
	cltq
	movb	$61, -160(%rbp,%rax)
# %bb.59:                               #   in Loop: Header=BB114_57 Depth=2
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_57
.LBB114_60:                             #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_61
.LBB114_61:                             #   in Loop: Header=BB114_37 Depth=1
	leaq	-160(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	jmp	.LBB114_80
.LBB114_62:                             #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_63
.LBB114_63:                             #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_64
.LBB114_64:                             #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_65
.LBB114_65:                             #   in Loop: Header=BB114_37 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	.LBB114_67
# %bb.66:                               #   in Loop: Header=BB114_37 Depth=1
	movabsq	$.L.str.13.220, %rsi
	leaq	-160(%rbp), %rdi
	movl	-4(%rbp), %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-16(%rbp), %rax
	movq	32(%rax), %r8
	movslq	-52(%rbp), %rax
	cvttss2si	(%r8,%rax,4), %r8d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_68
.LBB114_67:                             #   in Loop: Header=BB114_37 Depth=1
	movabsq	$.L.str.14.221, %rsi
	movabsq	$.L.str.10.217, %r8
	leaq	-160(%rbp), %rdi
	movl	-4(%rbp), %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	movb	$0, %al
	callq	sprintf
.LBB114_68:                             #   in Loop: Header=BB114_37 Depth=1
	movb	$32, -140(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-52(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB114_74
# %bb.69:                               #   in Loop: Header=BB114_37 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	cltd
	idivl	-60(%rbp)
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	$20, -24(%rbp)
.LBB114_70:                             #   Parent Loop BB114_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -20(%rbp)
	jle	.LBB114_73
# %bb.71:                               #   in Loop: Header=BB114_70 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -24(%rbp)
	cltq
	movb	$61, -160(%rbp,%rax)
# %bb.72:                               #   in Loop: Header=BB114_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_70
.LBB114_73:                             #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_74
.LBB114_74:                             #   in Loop: Header=BB114_37 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	.LBB114_79
# %bb.75:                               #   in Loop: Header=BB114_37 Depth=1
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-52(%rbp), %rcx
	cvttss2si	(%rax,%rcx,4), %eax
	cmpl	$0, %eax
	jle	.LBB114_79
# %bb.76:                               #   in Loop: Header=BB114_37 Depth=1
	movss	.LCPI114_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-52(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	subss	%xmm0, %xmm1
	cvttss2si	%xmm1, %eax
	cltd
	idivl	-60(%rbp)
	addl	$20, %eax
	movl	%eax, -24(%rbp)
	cmpl	$78, -24(%rbp)
	jl	.LBB114_78
# %bb.77:                               #   in Loop: Header=BB114_37 Depth=1
	movl	$78, -24(%rbp)
.LBB114_78:                             #   in Loop: Header=BB114_37 Depth=1
	movslq	-24(%rbp), %rax
	movb	$42, -160(%rbp,%rax)
.LBB114_79:                             #   in Loop: Header=BB114_37 Depth=1
	leaq	-160(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
.LBB114_80:                             #   in Loop: Header=BB114_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_37
.LBB114_81:
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	testl	%eax, %eax
	je	.LBB114_84
	jmp	.LBB114_82
.LBB114_82:
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB114_85
	jmp	.LBB114_83
.LBB114_83:
	subl	$2, %eax
	je	.LBB114_86
	jmp	.LBB114_87
.LBB114_84:
	movabsq	$.L.str.15.222, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB114_87
.LBB114_85:
	movabsq	$.L.str.16.223, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.17.224, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.18.225, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.19.226, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.20.227, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	jmp	.LBB114_87
.LBB114_86:
	movabsq	$.L.str.21.228, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.22.229, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.23.230, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.19.226, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.20.227, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB114_87:
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end114:
	.size	PrintASCIIHistogram, .Lfunc_end114-PrintASCIIHistogram
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PrintXMGRHistogram
.LCPI115_0:
	.quad	4607182418800017408     # double 1
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI115_1:
	.long	1065353216              # float 1
	.text
	.globl	PrintXMGRHistogram
	.p2align	4, 0x90
	.type	PrintXMGRHistogram,@function
PrintXMGRHistogram:                     # @PrintXMGRHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB115_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB115_6
# %bb.2:                                #   in Loop: Header=BB115_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB115_4
# %bb.3:                                #   in Loop: Header=BB115_1 Depth=1
	movabsq	$.L.str.24.231, %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %r8
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	subl	8(%rax), %ecx
	movslq	%ecx, %rax
	movl	(%r8,%rax,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB115_4:                              #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_5
.LBB115_5:                              #   in Loop: Header=BB115_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_1
.LBB115_6:
	movabsq	$.L.str.25.232, %rsi
	movq	-24(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	.LBB115_12
# %bb.7:
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB115_8:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB115_11
# %bb.9:                                #   in Loop: Header=BB115_8 Depth=1
	movss	.LCPI115_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	addss	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm2         # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movsd	.LCPI115_0(%rip), %xmm1 # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -32(%rbp)        # 8-byte Spill
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm2         # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movabsq	$.L.str.24.231, %rsi
	movsd	.LCPI115_0(%rip), %xmm1 # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	subsd	%xmm1, %xmm0
	movsd	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %edx
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movb	$1, %al
	callq	fprintf
# %bb.10:                               #   in Loop: Header=BB115_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_8
.LBB115_11:
	movabsq	$.L.str.25.232, %rsi
	movq	-24(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB115_12:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end115:
	.size	PrintXMGRHistogram, .Lfunc_end115-PrintXMGRHistogram
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function ExtremeValueP
.LCPI116_0:
	.quad	-4616189618054758400    # double -1
.LCPI116_1:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
.LCPI116_2:
	.quad	4649442368115913523     # double 708.39999999999998
.LCPI116_3:
	.quad	4502148214488346440     # double 9.9999999999999995E-8
.LCPI116_4:
	.quad	4607182418800017408     # double 1
	.text
	.globl	ExtremeValueP
	.p2align	4, 0x90
	.type	ExtremeValueP,@function
ExtremeValueP:                          # @ExtremeValueP
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movsd	.LCPI116_1(%rip), %xmm3 # xmm3 = mem[0],zero
	movss	%xmm0, -12(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	%xmm2, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm1
	mulss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -40(%rbp)        # 8-byte Spill
	movaps	%xmm3, %xmm0
	callq	log
	movsd	.LCPI116_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movsd	.LCPI116_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	ucomisd	-40(%rbp), %xmm1        # 8-byte Folded Reload
	jb	.LBB116_2
# %bb.1:
	movsd	.LCPI116_4(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -24(%rbp)
	jmp	.LBB116_7
.LBB116_2:
	movsd	.LCPI116_2(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movss	-12(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm2
	mulss	%xmm2, %xmm1
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB116_4
# %bb.3:
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)
	jmp	.LBB116_7
.LBB116_4:
	movsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI116_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	%xmm0, -32(%rbp)
	ucomisd	-32(%rbp), %xmm1
	jbe	.LBB116_6
# %bb.5:
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -24(%rbp)
	jmp	.LBB116_7
.LBB116_6:
	movsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	mulsd	-32(%rbp), %xmm0
	callq	exp
	movsd	.LCPI116_4(%rip), %xmm1 # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -24(%rbp)
.LBB116_7:
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end116:
	.size	ExtremeValueP, .Lfunc_end116-ExtremeValueP
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PrintXMGRDistribution
.LCPI117_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	PrintXMGRDistribution
	.p2align	4, 0x90
	.type	PrintXMGRDistribution,@function
PrintXMGRDistribution:                  # @PrintXMGRDistribution
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB117_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB117_4
# %bb.2:                                #   in Loop: Header=BB117_1 Depth=1
	movabsq	$.L.str.24.231, %rsi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
# %bb.3:                                #   in Loop: Header=BB117_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_1
.LBB117_4:
	movabsq	$.L.str.25.232, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	.LBB117_10
# %bb.5:
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB117_6:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB117_9
# %bb.7:                                #   in Loop: Header=BB117_6 Depth=1
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm2         # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movabsq	$.L.str.24.231, %rsi
	movsd	.LCPI117_0(%rip), %xmm1 # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -40(%rbp)
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %edx
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movb	$1, %al
	callq	fprintf
# %bb.8:                                #   in Loop: Header=BB117_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_6
.LBB117_9:
	movabsq	$.L.str.25.232, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB117_10:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end117:
	.size	PrintXMGRDistribution, .Lfunc_end117-PrintXMGRDistribution
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PrintXMGRRegressionLine
.LCPI118_0:
	.quad	-4616189618054758400    # double -1
.LCPI118_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	PrintXMGRRegressionLine
	.p2align	4, 0x90
	.type	PrintXMGRRegressionLine,@function
PrintXMGRRegressionLine:                # @PrintXMGRRegressionLine
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB118_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB118_6
# %bb.2:                                #   in Loop: Header=BB118_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	callq	log
	movsd	.LCPI118_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movsd	%xmm0, -40(%rbp)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB118_4
# %bb.3:                                #   in Loop: Header=BB118_1 Depth=1
	movabsq	$.L.str.24.231, %rsi
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movb	$1, %al
	callq	fprintf
.LBB118_4:                              #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_5
.LBB118_5:                              #   in Loop: Header=BB118_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_1
.LBB118_6:
	movabsq	$.L.str.25.232, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	.LBB118_12
# %bb.7:
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB118_8:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB118_11
# %bb.9:                                #   in Loop: Header=BB118_8 Depth=1
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm2         # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movsd	.LCPI118_1(%rip), %xmm1 # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movsd	.LCPI118_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movabsq	$.L.str.24.231, %rsi
	movsd	%xmm0, -40(%rbp)
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %edx
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movb	$1, %al
	callq	fprintf
# %bb.10:                               #   in Loop: Header=BB118_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_8
.LBB118_11:
	movabsq	$.L.str.25.232, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB118_12:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end118:
	.size	PrintXMGRRegressionLine, .Lfunc_end118-PrintXMGRRegressionLine
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function EVDBasicFit
.LCPI119_0:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	EVDBasicFit
	.p2align	4, 0x90
	.type	EVDBasicFit,@function
EVDBasicFit:                            # @EVDBasicFit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movabsq	$.L.str.207, %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movl	16(%rcx), %ecx
	movq	-16(%rbp), %rdx
	subl	20(%rdx), %ecx
	addl	$1, %ecx
	movl	%ecx, -24(%rbp)
	movslq	-24(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$492, %esi              # imm = 0x1EC
	callq	sre_malloc
	movabsq	$.L.str.207, %rdi
	movq	%rax, -40(%rbp)
	movslq	-24(%rbp), %rdx
	shlq	$2, %rdx
	movl	$493, %esi              # imm = 0x1ED
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB119_1:                              # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB119_4
# %bb.2:                                #   in Loop: Header=BB119_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB119_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1
.LBB119_4:
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB119_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB119_8
# %bb.6:                                #   in Loop: Header=BB119_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	20(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	20(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.7:                                #   in Loop: Header=BB119_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_5
.LBB119_8:
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB119_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB119_12
# %bb.10:                               #   in Loop: Header=BB119_9 Depth=1
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	20(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI119_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	20(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.11:                               #   in Loop: Header=BB119_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_9
.LBB119_12:
	leaq	-64(%rbp), %rcx
	leaq	-68(%rbp), %r8
	leaq	-72(%rbp), %r9
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	subl	$1, %edx
	callq	Linefit
	movsd	.LCPI119_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-68(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -44(%rbp)
	movss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-44(%rbp), %xmm0
	movss	%xmm0, -60(%rbp)
	movq	-16(%rbp), %rdi
	movss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	cvtsi2ssl	%eax, %xmm2
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	cvtsi2ssl	%eax, %xmm3
	movl	$2, %esi
	callq	ExtremeValueSetHistogram
	movq	-56(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end119:
	.size	EVDBasicFit, .Lfunc_end119-EVDBasicFit
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function ExtremeValueSetHistogram
.LCPI120_0:
	.quad	4611686018427387904     # double 2
.LCPI120_1:
	.quad	4617315517961601024     # double 5
	.text
	.globl	ExtremeValueSetHistogram
	.p2align	4, 0x90
	.type	ExtremeValueSetHistogram,@function
ExtremeValueSetHistogram:               # @ExtremeValueSetHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -48(%rbp)
	movss	%xmm1, -44(%rbp)
	movss	%xmm2, -40(%rbp)
	movss	%xmm3, -36(%rbp)
	movl	%esi, -32(%rbp)
	movq	-8(%rbp), %rdi
	callq	UnfitHistogram
	movabsq	$.L.str.207, %rdi
	movq	-8(%rbp), %rax
	movl	$1, 40(%rax)
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 48(%rax)
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 44(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-28(%rbp), %rdx
	shlq	$2, %rdx
	movl	$696, %esi              # imm = 0x2B8
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movl	$0, -20(%rbp)
.LBB120_1:                              # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_4
# %bb.2:                                #   in Loop: Header=BB120_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB120_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1
.LBB120_4:
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB120_5:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	.LBB120_8
# %bb.6:                                #   in Loop: Header=BB120_5 Depth=1
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-8(%rbp), %rax
	movss	44(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	48(%rax), %xmm2         # xmm2 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	28(%rax), %edi
	callq	ExtremeValueE
	movsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-8(%rbp), %rax
	movss	44(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	48(%rax), %xmm2         # xmm2 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	28(%rax), %edi
	callq	ExtremeValueE
	movsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.7:                                #   in Loop: Header=BB120_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_5
.LBB120_8:
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 56(%rax)
	movl	$0, -16(%rbp)
	cvttss2si	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB120_9:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jb	.LBB120_15
# %bb.10:                               #   in Loop: Header=BB120_9 Depth=1
	movsd	.LCPI120_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB120_13
# %bb.11:                               #   in Loop: Header=BB120_9 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	cmpl	$5, (%rax,%rcx,4)
	jl	.LBB120_13
# %bb.12:                               #   in Loop: Header=BB120_9 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	subss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, -24(%rbp)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	mulss	-24(%rbp), %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	divss	(%rax,%rcx,4), %xmm0
	movq	-8(%rbp), %rax
	addss	56(%rax), %xmm0
	movss	%xmm0, 56(%rax)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB120_13:                             #   in Loop: Header=BB120_9 Depth=1
	jmp	.LBB120_14
.LBB120_14:                             #   in Loop: Header=BB120_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_9
.LBB120_15:
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB120_17
# %bb.16:
	movsd	.LCPI120_0(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-16(%rbp), %eax
	subl	$1, %eax
	subl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm2, %xmm0
	movq	-8(%rbp), %rax
	movss	56(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm2, %xmm1
	callq	IncompleteGamma
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 60(%rax)
	jmp	.LBB120_18
.LBB120_17:
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 60(%rax)
.LBB120_18:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end120:
	.size	ExtremeValueSetHistogram, .Lfunc_end120-ExtremeValueSetHistogram
	.cfi_endproc
                                        # -- End function
	.globl	ExtremeValueE           # -- Begin function ExtremeValueE
	.p2align	4, 0x90
	.type	ExtremeValueE,@function
ExtremeValueE:                          # @ExtremeValueE
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movss	%xmm0, -16(%rbp)
	movss	%xmm1, -12(%rbp)
	movss	%xmm2, -8(%rbp)
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cvtsi2sdl	%eax, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end121:
	.size	ExtremeValueE, .Lfunc_end121-ExtremeValueE
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function ExtremeValueFitHistogram
.LCPI122_0:
	.quad	4607182418800017408     # double 1
.LCPI122_1:
	.quad	4603417229367550579     # double 0.58198000000000005
.LCPI122_2:
	.quad	-4616189618054758400    # double -1
.LCPI122_3:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	ExtremeValueFitHistogram
	.p2align	4, 0x90
	.type	ExtremeValueFitHistogram,@function
ExtremeValueFitHistogram:               # @ExtremeValueFitHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -68(%rbp)
	movss	%xmm0, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB122_8
# %bb.1:
	movl	$-1, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB122_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB122_7
# %bb.3:                                #   in Loop: Header=BB122_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-72(%rbp), %eax
	jle	.LBB122_5
# %bb.4:                                #   in Loop: Header=BB122_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB122_5:                              #   in Loop: Header=BB122_2 Depth=1
	jmp	.LBB122_6
.LBB122_6:                              #   in Loop: Header=BB122_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_2
.LBB122_7:
	jmp	.LBB122_8
.LBB122_8:
	movss	-80(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB122_10
# %bb.9:
	movss	-80(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	jmp	.LBB122_11
.LBB122_10:
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
.LBB122_11:
	cvttss2si	%xmm0, %eax
	movl	%eax, -24(%rbp)
	movl	$0, -32(%rbp)
.LBB122_12:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_16 Depth 2
	cmpl	$100, -32(%rbp)
	jge	.LBB122_43
# %bb.13:                               #   in Loop: Header=BB122_12 Depth=1
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movl	-24(%rbp), %eax
	subl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$5, -28(%rbp)
	jge	.LBB122_15
# %bb.14:
	jmp	.LBB122_45
.LBB122_15:                             #   in Loop: Header=BB122_12 Depth=1
	movabsq	$.L.str.207, %rdi
	movslq	-28(%rbp), %rdx
	shlq	$2, %rdx
	movl	$600, %esi              # imm = 0x258
	callq	sre_malloc
	movabsq	$.L.str.207, %rdi
	movq	%rax, -64(%rbp)
	movslq	-28(%rbp), %rdx
	shlq	$2, %rdx
	movl	$601, %esi              # imm = 0x259
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movl	$0, -8(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_16:                             #   Parent Loop BB122_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB122_19
# %bb.17:                               #   in Loop: Header=BB122_16 Depth=2
	movsd	.LCPI122_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-64(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
# %bb.18:                               #   in Loop: Header=BB122_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_16
.LBB122_19:                             #   in Loop: Header=BB122_12 Depth=1
	cmpl	$100, -8(%rbp)
	jge	.LBB122_21
# %bb.20:
	jmp	.LBB122_45
.LBB122_21:                             #   in Loop: Header=BB122_12 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB122_32
# %bb.22:                               #   in Loop: Header=BB122_12 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB122_27
# %bb.23:                               #   in Loop: Header=BB122_12 Depth=1
	movsd	.LCPI122_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	subl	-8(%rbp), %eax
	movl	-8(%rbp), %ecx
	cvtsi2ssl	%ecx, %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_25
# %bb.24:                               #   in Loop: Header=BB122_12 Depth=1
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	subl	-8(%rbp), %eax
	jmp	.LBB122_26
.LBB122_25:                             #   in Loop: Header=BB122_12 Depth=1
	movsd	.LCPI122_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
.LBB122_26:                             #   in Loop: Header=BB122_12 Depth=1
	movl	%eax, -44(%rbp)
	jmp	.LBB122_31
.LBB122_27:                             #   in Loop: Header=BB122_12 Depth=1
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	-40(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	EVDDistribution
	movsd	.LCPI122_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	%xmm0, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	subl	-8(%rbp), %eax
	movl	-8(%rbp), %ecx
	cvtsi2sdl	%ecx, %xmm0
	mulsd	-96(%rbp), %xmm0
	subsd	-96(%rbp), %xmm1
	divsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_29
# %bb.28:                               #   in Loop: Header=BB122_12 Depth=1
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	subl	-8(%rbp), %eax
	jmp	.LBB122_30
.LBB122_29:                             #   in Loop: Header=BB122_12 Depth=1
	movsd	.LCPI122_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	-96(%rbp), %xmm1
	subsd	-96(%rbp), %xmm0
	divsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
.LBB122_30:                             #   in Loop: Header=BB122_12 Depth=1
	movl	%eax, -44(%rbp)
.LBB122_31:                             #   in Loop: Header=BB122_12 Depth=1
	jmp	.LBB122_32
.LBB122_32:                             #   in Loop: Header=BB122_12 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB122_36
# %bb.33:                               #   in Loop: Header=BB122_12 Depth=1
	leaq	-36(%rbp), %r8
	leaq	-40(%rbp), %r9
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	callq	EVDCensoredFit
	cmpl	$0, %eax
	jne	.LBB122_35
# %bb.34:
	jmp	.LBB122_45
.LBB122_35:                             #   in Loop: Header=BB122_12 Depth=1
	jmp	.LBB122_39
.LBB122_36:                             #   in Loop: Header=BB122_12 Depth=1
	leaq	-36(%rbp), %rcx
	leaq	-40(%rbp), %r8
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movl	-28(%rbp), %edx
	callq	EVDMaxLikelyFit
	cmpl	$0, %eax
	jne	.LBB122_38
# %bb.37:
	jmp	.LBB122_45
.LBB122_38:                             #   in Loop: Header=BB122_12 Depth=1
	jmp	.LBB122_39
.LBB122_39:                             #   in Loop: Header=BB122_12 Depth=1
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -104(%rbp)       # 8-byte Spill
	movl	-8(%rbp), %eax
	addl	-44(%rbp), %eax
	subl	$1, %eax
	cvtsi2sdl	%eax, %xmm0
	movl	-8(%rbp), %eax
	addl	-44(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	callq	log
	movsd	.LCPI122_2(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	-104(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -76(%rbp)
	movq	-64(%rbp), %rdi
	callq	free
	movq	-56(%rbp), %rdi
	callq	free
	movl	-76(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jl	.LBB122_41
# %bb.40:
	jmp	.LBB122_44
.LBB122_41:                             #   in Loop: Header=BB122_12 Depth=1
	movl	-76(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.42:                               #   in Loop: Header=BB122_12 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB122_12
.LBB122_43:                             # %.loopexit
	jmp	.LBB122_44
.LBB122_44:
	movq	-16(%rbp), %rdi
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm2
	movl	-24(%rbp), %eax
	cvtsi2ssl	%eax, %xmm3
	movl	$1, %esi
	callq	ExtremeValueSetHistogram
	movl	$1, -84(%rbp)
	jmp	.LBB122_50
.LBB122_45:
	movq	-16(%rbp), %rdi
	callq	UnfitHistogram
	cmpq	$0, -64(%rbp)
	je	.LBB122_47
# %bb.46:
	movq	-64(%rbp), %rdi
	callq	free
.LBB122_47:
	cmpq	$0, -56(%rbp)
	je	.LBB122_49
# %bb.48:
	movq	-56(%rbp), %rdi
	callq	free
.LBB122_49:
	movl	$0, -84(%rbp)
.LBB122_50:
	movl	-84(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end122:
	.size	ExtremeValueFitHistogram, .Lfunc_end122-ExtremeValueFitHistogram
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function EVDDistribution
.LCPI123_0:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	EVDDistribution
	.p2align	4, 0x90
	.type	EVDDistribution,@function
EVDDistribution:                        # @EVDDistribution
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movsd	.LCPI123_0(%rip), %xmm3 # xmm3 = mem[0],zero
	movss	%xmm0, -12(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	%xmm2, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm3
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm3
	movaps	%xmm3, %xmm0
	callq	exp
	movsd	.LCPI123_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end123:
	.size	EVDDistribution, .Lfunc_end123-EVDDistribution
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function EVDCensoredFit
.LCPI124_0:
	.long	1045220557              # float 0.200000003
.LCPI124_1:
	.long	925353388               # float 9.99999974E-6
.LCPI124_3:
	.long	981668463               # float 0.00100000005
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI124_2:
	.quad	9223372036854775807     # double NaN
	.quad	9223372036854775807     # double NaN
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI124_4:
	.quad	4636737291354636288     # double 100
.LCPI124_5:
	.quad	4591870180066957722     # double 0.10000000000000001
.LCPI124_6:
	.quad	4584304132692975288     # double 0.029999999999999999
.LCPI124_7:
	.quad	4611686018427387904     # double 2
.LCPI124_8:
	.quad	-4616189618054758400    # double -1
.LCPI124_9:
	.quad	4607182418800017408     # double 1
	.text
	.globl	EVDCensoredFit
	.p2align	4, 0x90
	.type	EVDCensoredFit,@function
EVDCensoredFit:                         # @EVDCensoredFit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movss	.LCPI124_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movss	.LCPI124_1(%rip), %xmm2 # xmm2 = mem[0],zero,zero,zero
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -24(%rbp)
	movss	%xmm0, -20(%rbp)
	movq	%r8, -128(%rbp)
	movq	%r9, -120(%rbp)
	movss	%xmm2, -76(%rbp)
	movss	%xmm1, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB124_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$100, -4(%rbp)
	jge	.LBB124_8
# %bb.2:                                #   in Loop: Header=BB124_1 Depth=1
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-24(%rbp), %ecx
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	callq	Lawless422
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	.LCPI124_2(%rip), %xmm1 # xmm1 = [nan,nan]
	pand	%xmm1, %xmm0
	movss	-76(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB124_4
# %bb.3:
	jmp	.LBB124_9
.LBB124_4:                              #   in Loop: Header=BB124_1 Depth=1
	xorps	%xmm0, %xmm0
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movss	-12(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm2
	subss	%xmm2, %xmm1
	movss	%xmm1, -8(%rbp)
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jb	.LBB124_6
# %bb.5:                                #   in Loop: Header=BB124_1 Depth=1
	movss	.LCPI124_3(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
.LBB124_6:                              #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_7
.LBB124_7:                              #   in Loop: Header=BB124_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_1
.LBB124_8:                              # %.loopexit1
	jmp	.LBB124_9
.LBB124_9:
	cmpl	$100, -4(%rbp)
	jne	.LBB124_36
# %bb.10:
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movss	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -16(%rbp)
	movss	%xmm0, -32(%rbp)
	movss	%xmm0, -8(%rbp)
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-24(%rbp), %ecx
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	callq	Lawless422
	xorps	%xmm0, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB124_17
# %bb.11:
	jmp	.LBB124_12
.LBB124_12:                             # =>This Inner Loop Header: Depth=1
	xorps	%xmm0, %xmm0
	movsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-16(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movss	%xmm1, -16(%rbp)
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB124_14
# %bb.13:
	movl	$0, -40(%rbp)
	jmp	.LBB124_44
.LBB124_14:                             #   in Loop: Header=BB124_12 Depth=1
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-24(%rbp), %ecx
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Lawless422
# %bb.15:                               #   in Loop: Header=BB124_12 Depth=1
	xorps	%xmm0, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	ja	.LBB124_12
# %bb.16:
	jmp	.LBB124_23
.LBB124_17:
	jmp	.LBB124_18
.LBB124_18:                             # =>This Inner Loop Header: Depth=1
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -32(%rbp)
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-24(%rbp), %ecx
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Lawless422
	movsd	.LCPI124_4(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB124_20
# %bb.19:
	movl	$0, -40(%rbp)
	jmp	.LBB124_44
.LBB124_20:                             #   in Loop: Header=BB124_18 Depth=1
	jmp	.LBB124_21
.LBB124_21:                             #   in Loop: Header=BB124_18 Depth=1
	xorps	%xmm0, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	ja	.LBB124_18
# %bb.22:
	jmp	.LBB124_23
.LBB124_23:
	movl	$0, -4(%rbp)
.LBB124_24:                             # =>This Inner Loop Header: Depth=1
	cmpl	$100, -4(%rbp)
	jge	.LBB124_32
# %bb.25:                               #   in Loop: Header=BB124_24 Depth=1
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movsd	.LCPI124_7(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	addss	-32(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -52(%rbp)
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-24(%rbp), %ecx
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Lawless422
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	.LCPI124_2(%rip), %xmm1 # xmm1 = [nan,nan]
	pand	%xmm1, %xmm0
	movss	-76(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB124_27
# %bb.26:
	jmp	.LBB124_33
.LBB124_27:                             #   in Loop: Header=BB124_24 Depth=1
	xorps	%xmm0, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB124_29
# %bb.28:                               #   in Loop: Header=BB124_24 Depth=1
	movss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -16(%rbp)
	jmp	.LBB124_30
.LBB124_29:                             #   in Loop: Header=BB124_24 Depth=1
	movss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)
.LBB124_30:                             #   in Loop: Header=BB124_24 Depth=1
	jmp	.LBB124_31
.LBB124_31:                             #   in Loop: Header=BB124_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_24
.LBB124_32:                             # %.loopexit
	jmp	.LBB124_33
.LBB124_33:
	cmpl	$100, -4(%rbp)
	jne	.LBB124_35
# %bb.34:
	movl	$0, -40(%rbp)
	jmp	.LBB124_44
.LBB124_35:
	movss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
.LBB124_36:
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -96(%rbp)
	movsd	%xmm0, -72(%rbp)
	movl	$0, -4(%rbp)
.LBB124_37:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_43
# %bb.38:                               #   in Loop: Header=BB124_37 Depth=1
	cmpq	$0, -48(%rbp)
	jne	.LBB124_40
# %bb.39:                               #   in Loop: Header=BB124_37 Depth=1
	movsd	.LCPI124_9(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_41
.LBB124_40:                             #   in Loop: Header=BB124_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm1
.LBB124_41:                             #   in Loop: Header=BB124_37 Depth=1
	movsd	.LCPI124_8(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm1, -112(%rbp)
	movsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	movsd	%xmm1, -88(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	-88(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	addsd	-72(%rbp), %xmm1
	movsd	%xmm1, -72(%rbp)
	movsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	addsd	-96(%rbp), %xmm0
	movsd	%xmm0, -96(%rbp)
# %bb.42:                               #   in Loop: Header=BB124_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_37
.LBB124_43:
	movsd	.LCPI124_8(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-24(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	movsd	%xmm1, -88(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movss	-20(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	-88(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	addsd	-72(%rbp), %xmm1
	movsd	%xmm1, -72(%rbp)
	movsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	divsd	-96(%rbp), %xmm0
	callq	log
	movsd	.LCPI124_8(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -100(%rbp)
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-120(%rbp), %rax
	movss	%xmm0, (%rax)
	movss	-100(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	movq	-128(%rbp), %rax
	movss	%xmm0, (%rax)
	movl	$1, -40(%rbp)
.LBB124_44:
	movl	-40(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end124:
	.size	EVDCensoredFit, .Lfunc_end124-EVDCensoredFit
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function EVDMaxLikelyFit
.LCPI125_0:
	.long	1045220557              # float 0.200000003
.LCPI125_1:
	.long	925353388               # float 9.99999974E-6
.LCPI125_3:
	.long	981668463               # float 0.00100000005
.LCPI125_9:
	.long	3212836864              # float -1
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI125_2:
	.quad	9223372036854775807     # double NaN
	.quad	9223372036854775807     # double NaN
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI125_4:
	.quad	4636737291354636288     # double 100
.LCPI125_5:
	.quad	4591870180066957722     # double 0.10000000000000001
.LCPI125_6:
	.quad	4611686018427387904     # double 2
.LCPI125_7:
	.quad	-4616189618054758400    # double -1
.LCPI125_8:
	.quad	4607182418800017408     # double 1
	.text
	.globl	EVDMaxLikelyFit
	.p2align	4, 0x90
	.type	EVDMaxLikelyFit,@function
EVDMaxLikelyFit:                        # @EVDMaxLikelyFit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movss	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	%rdi, -56(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -120(%rbp)
	movq	%r8, -112(%rbp)
	movss	%xmm1, -60(%rbp)
	movss	%xmm0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB125_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$100, -4(%rbp)
	jge	.LBB125_8
# %bb.2:                                #   in Loop: Header=BB125_1 Depth=1
	leaq	-8(%rbp), %rcx
	leaq	-28(%rbp), %r8
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-24(%rbp), %edx
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Lawless416
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	.LCPI125_2(%rip), %xmm1 # xmm1 = [nan,nan]
	pand	%xmm1, %xmm0
	movss	-60(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB125_4
# %bb.3:
	jmp	.LBB125_9
.LBB125_4:                              #   in Loop: Header=BB125_1 Depth=1
	xorps	%xmm0, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	divss	-28(%rbp), %xmm2
	subss	%xmm2, %xmm1
	movss	%xmm1, -12(%rbp)
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jb	.LBB125_6
# %bb.5:                                #   in Loop: Header=BB125_1 Depth=1
	movss	.LCPI125_3(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -12(%rbp)
.LBB125_6:                              #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_7
.LBB125_7:                              #   in Loop: Header=BB125_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_1
.LBB125_8:                              # %.loopexit1
	jmp	.LBB125_9
.LBB125_9:
	cmpl	$100, -4(%rbp)
	jne	.LBB125_36
# %bb.10:
	leaq	-8(%rbp), %rcx
	leaq	-28(%rbp), %r8
	movss	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -20(%rbp)
	movss	%xmm0, -16(%rbp)
	movss	%xmm0, -12(%rbp)
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-24(%rbp), %edx
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Lawless416
	xorps	%xmm0, %xmm0
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB125_17
# %bb.11:
	jmp	.LBB125_12
.LBB125_12:                             # =>This Inner Loop Header: Depth=1
	xorps	%xmm0, %xmm0
	movsd	.LCPI125_5(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-20(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movss	%xmm1, -20(%rbp)
	movss	-20(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB125_14
# %bb.13:
	movl	$0, -36(%rbp)
	jmp	.LBB125_44
.LBB125_14:                             #   in Loop: Header=BB125_12 Depth=1
	leaq	-8(%rbp), %rcx
	leaq	-28(%rbp), %r8
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-24(%rbp), %edx
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Lawless416
# %bb.15:                               #   in Loop: Header=BB125_12 Depth=1
	xorps	%xmm0, %xmm0
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	ja	.LBB125_12
# %bb.16:
	jmp	.LBB125_23
.LBB125_17:
	jmp	.LBB125_18
.LBB125_18:                             # =>This Inner Loop Header: Depth=1
	leaq	-8(%rbp), %rcx
	leaq	-28(%rbp), %r8
	movsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -16(%rbp)
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-24(%rbp), %edx
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Lawless416
	movsd	.LCPI125_4(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB125_20
# %bb.19:
	movl	$0, -36(%rbp)
	jmp	.LBB125_44
.LBB125_20:                             #   in Loop: Header=BB125_18 Depth=1
	jmp	.LBB125_21
.LBB125_21:                             #   in Loop: Header=BB125_18 Depth=1
	xorps	%xmm0, %xmm0
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	ja	.LBB125_18
# %bb.22:
	jmp	.LBB125_23
.LBB125_23:
	movl	$0, -4(%rbp)
.LBB125_24:                             # =>This Inner Loop Header: Depth=1
	cmpl	$100, -4(%rbp)
	jge	.LBB125_32
# %bb.25:                               #   in Loop: Header=BB125_24 Depth=1
	leaq	-8(%rbp), %rcx
	leaq	-28(%rbp), %r8
	movsd	.LCPI125_6(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-20(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	addss	-16(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -32(%rbp)
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-24(%rbp), %edx
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Lawless416
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	.LCPI125_2(%rip), %xmm1 # xmm1 = [nan,nan]
	pand	%xmm1, %xmm0
	movss	-60(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB125_27
# %bb.26:
	jmp	.LBB125_33
.LBB125_27:                             #   in Loop: Header=BB125_24 Depth=1
	xorps	%xmm0, %xmm0
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB125_29
# %bb.28:                               #   in Loop: Header=BB125_24 Depth=1
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -20(%rbp)
	jmp	.LBB125_30
.LBB125_29:                             #   in Loop: Header=BB125_24 Depth=1
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -16(%rbp)
.LBB125_30:                             #   in Loop: Header=BB125_24 Depth=1
	jmp	.LBB125_31
.LBB125_31:                             #   in Loop: Header=BB125_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_24
.LBB125_32:                             # %.loopexit
	jmp	.LBB125_33
.LBB125_33:
	cmpl	$100, -4(%rbp)
	jne	.LBB125_35
# %bb.34:
	movl	$0, -36(%rbp)
	jmp	.LBB125_44
.LBB125_35:
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -12(%rbp)
.LBB125_36:
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -80(%rbp)
	movsd	%xmm0, -72(%rbp)
	movl	$0, -4(%rbp)
.LBB125_37:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB125_43
# %bb.38:                               #   in Loop: Header=BB125_37 Depth=1
	cmpq	$0, -48(%rbp)
	jne	.LBB125_40
# %bb.39:                               #   in Loop: Header=BB125_37 Depth=1
	movsd	.LCPI125_8(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB125_41
.LBB125_40:                             #   in Loop: Header=BB125_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm0
.LBB125_41:                             #   in Loop: Header=BB125_37 Depth=1
	movss	.LCPI125_9(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movsd	%xmm0, -96(%rbp)
	movsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -104(%rbp)       # 8-byte Spill
	mulss	-12(%rbp), %xmm1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	cvtss2sd	%xmm1, %xmm0
	callq	exp
	movsd	-104(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	addsd	-80(%rbp), %xmm1
	movsd	%xmm1, -80(%rbp)
	movsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	addsd	-72(%rbp), %xmm0
	movsd	%xmm0, -72(%rbp)
# %bb.42:                               #   in Loop: Header=BB125_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_37
.LBB125_43:
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	divsd	-72(%rbp), %xmm0
	callq	log
	movsd	.LCPI125_7(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -84(%rbp)
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-112(%rbp), %rax
	movss	%xmm0, (%rax)
	movss	-84(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-120(%rbp), %rax
	movss	%xmm0, (%rax)
	movl	$1, -36(%rbp)
.LBB125_44:
	movl	-36(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end125:
	.size	EVDMaxLikelyFit, .Lfunc_end125-EVDMaxLikelyFit
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Lawless416
.LCPI126_0:
	.quad	4607182418800017408     # double 1
.LCPI126_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	Lawless416
	.p2align	4, 0x90
	.type	Lawless416,@function
Lawless416:                             # @Lawless416
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorps	%xmm1, %xmm1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -76(%rbp)
	movss	%xmm0, -8(%rbp)
	movq	%rcx, -104(%rbp)
	movq	%r8, -96(%rbp)
	movsd	%xmm1, -56(%rbp)
	movsd	%xmm1, -72(%rbp)
	movsd	%xmm1, -64(%rbp)
	movsd	%xmm1, -48(%rbp)
	movsd	%xmm1, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB126_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB126_7
# %bb.2:                                #   in Loop: Header=BB126_1 Depth=1
	cmpq	$0, -88(%rbp)
	jne	.LBB126_4
# %bb.3:                                #   in Loop: Header=BB126_1 Depth=1
	movsd	.LCPI126_0(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB126_5
.LBB126_4:                              #   in Loop: Header=BB126_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm1
.LBB126_5:                              #   in Loop: Header=BB126_1 Depth=1
	movsd	.LCPI126_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm1, -40(%rbp)
	movsd	-40(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm2    # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm2, %xmm1
	addsd	-64(%rbp), %xmm1
	movsd	%xmm1, -64(%rbp)
	movsd	-40(%rbp), %xmm2        # xmm2 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm2
	movsd	%xmm2, -32(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI126_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-32(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-48(%rbp), %xmm2
	movsd	%xmm2, -48(%rbp)
	movsd	-40(%rbp), %xmm2        # xmm2 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -32(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI126_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-32(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-72(%rbp), %xmm2
	movsd	%xmm2, -72(%rbp)
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	addsd	-24(%rbp), %xmm1
	movsd	%xmm1, -24(%rbp)
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	addsd	-56(%rbp), %xmm0
	movsd	%xmm0, -56(%rbp)
# %bb.6:                                #   in Loop: Header=BB126_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_1
.LBB126_7:
	movsd	.LCPI126_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movaps	%xmm0, %xmm2
	divsd	%xmm1, %xmm2
	movsd	-64(%rbp), %xmm1        # xmm1 = mem[0],zero
	divsd	-56(%rbp), %xmm1
	subsd	%xmm1, %xmm2
	movsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	divsd	-24(%rbp), %xmm1
	addsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movq	-104(%rbp), %rax
	movss	%xmm1, (%rax)
	movsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	divsd	-24(%rbp), %xmm1
	movsd	-48(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	-24(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movsd	-72(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	-24(%rbp), %xmm2
	subsd	%xmm2, %xmm1
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	mulss	-8(%rbp), %xmm2
	cvtss2sd	%xmm2, %xmm2
	divsd	%xmm2, %xmm0
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-96(%rbp), %rax
	movss	%xmm0, (%rax)
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end126:
	.size	Lawless416, .Lfunc_end126-Lawless416
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Lawless422
.LCPI127_0:
	.quad	4607182418800017408     # double 1
.LCPI127_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	Lawless422
	.p2align	4, 0x90
	.type	Lawless422,@function
Lawless422:                             # @Lawless422
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	xorps	%xmm2, %xmm2
	movq	%rdi, -48(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -52(%rbp)
	movss	%xmm0, -12(%rbp)
	movss	%xmm1, -8(%rbp)
	movq	%r8, -120(%rbp)
	movq	%r9, -112(%rbp)
	movsd	%xmm2, -80(%rbp)
	movsd	%xmm2, -72(%rbp)
	movsd	%xmm2, -88(%rbp)
	movsd	%xmm2, -40(%rbp)
	movsd	%xmm2, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB127_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB127_7
# %bb.2:                                #   in Loop: Header=BB127_1 Depth=1
	cmpq	$0, -104(%rbp)
	jne	.LBB127_4
# %bb.3:                                #   in Loop: Header=BB127_1 Depth=1
	movsd	.LCPI127_0(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB127_5
.LBB127_4:                              #   in Loop: Header=BB127_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm1
.LBB127_5:                              #   in Loop: Header=BB127_1 Depth=1
	movsd	.LCPI127_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm1, -64(%rbp)
	movsd	-64(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm2    # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm2, %xmm1
	addsd	-88(%rbp), %xmm1
	movsd	%xmm1, -88(%rbp)
	movsd	-64(%rbp), %xmm1        # xmm1 = mem[0],zero
	movsd	%xmm1, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-24(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-32(%rbp), %xmm2
	movsd	%xmm2, -32(%rbp)
	movsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-24(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-40(%rbp), %xmm2
	movsd	%xmm2, -40(%rbp)
	movsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	addsd	-72(%rbp), %xmm1
	movsd	%xmm1, -72(%rbp)
	movsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	addsd	-80(%rbp), %xmm0
	movsd	%xmm0, -80(%rbp)
# %bb.6:                                #   in Loop: Header=BB127_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_1
.LBB127_7:
	movsd	.LCPI127_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-52(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	movsd	%xmm1, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-24(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-32(%rbp), %xmm2
	movsd	%xmm2, -32(%rbp)
	movl	-52(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI127_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-24(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-40(%rbp), %xmm2
	movsd	%xmm2, -40(%rbp)
	movl	-52(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI127_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-24(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	-72(%rbp), %xmm2
	movsd	%xmm2, -72(%rbp)
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm1, %xmm2
	divsd	%xmm0, %xmm2
	movsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	divsd	-80(%rbp), %xmm0
	subsd	%xmm0, %xmm2
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	divsd	-32(%rbp), %xmm0
	addsd	%xmm0, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	movq	-120(%rbp), %rax
	movss	%xmm0, (%rax)
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	divsd	-32(%rbp), %xmm0
	movsd	-40(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	-32(%rbp), %xmm2
	mulsd	%xmm2, %xmm0
	movsd	-72(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	-32(%rbp), %xmm2
	subsd	%xmm2, %xmm0
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	mulss	-8(%rbp), %xmm2
	cvtss2sd	%xmm2, %xmm2
	divsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-112(%rbp), %rax
	movss	%xmm0, (%rax)
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end127:
	.size	Lawless422, .Lfunc_end127-Lawless422
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GaussianFitHistogram
.LCPI128_0:
	.quad	4611686018427387904     # double 2
.LCPI128_1:
	.quad	4617315517961601024     # double 5
.LCPI128_2:
	.quad	-4616189618054758400    # double -1
.LCPI128_3:
	.quad	4607182418800017408     # double 1
.LCPI128_4:
	.quad	4618760250204063342     # double 6.2831799999999998
.LCPI128_5:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	GaussianFitHistogram
	.p2align	4, 0x90
	.type	GaussianFitHistogram,@function
GaussianFitHistogram:                   # @GaussianFitHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movss	%xmm0, -92(%rbp)
	movq	-16(%rbp), %rdi
	callq	UnfitHistogram
	movq	-16(%rbp), %rax
	cmpl	$1000, 28(%rax)         # imm = 0x3E8
	jge	.LBB128_2
# %bb.1:
	movq	-16(%rbp), %rax
	movl	$0, 40(%rax)
	movl	$0, -48(%rbp)
	jmp	.LBB128_25
.LBB128_2:
	xorps	%xmm0, %xmm0
	movss	%xmm0, -40(%rbp)
	movss	%xmm0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB128_3:                              # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB128_6
# %bb.4:                                #   in Loop: Header=BB128_3 Depth=1
	movsd	.LCPI128_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	mulss	-24(%rbp), %xmm0
	addss	-28(%rbp), %xmm0
	movss	%xmm0, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	mulss	-24(%rbp), %xmm0
	mulss	-24(%rbp), %xmm0
	addss	-40(%rbp), %xmm0
	movss	%xmm0, -40(%rbp)
# %bb.5:                                #   in Loop: Header=BB128_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB128_3
.LBB128_6:
	movabsq	$.L.str.207, %rbx
	movq	-16(%rbp), %rax
	movl	$2, 40(%rax)
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 44(%rax)
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	mulss	-28(%rbp), %xmm1
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm2
	divss	%xmm2, %xmm1
	subss	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	sqrt
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 48(%rax)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movslq	-44(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rbx, %rdi
	movl	$790, %esi              # imm = 0x316
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movl	$0, -32(%rbp)
.LBB128_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB128_10
# %bb.8:                                #   in Loop: Header=BB128_7 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-32(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.9:                                #   in Loop: Header=BB128_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB128_7
.LBB128_10:
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB128_11:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	.LBB128_14
# %bb.12:                               #   in Loop: Header=BB128_11 Depth=1
	movsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -88(%rbp)        # 8-byte Spill
	movsd	.LCPI128_2(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -72(%rbp)        # 8-byte Spill
	movsd	.LCPI128_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movsd	.LCPI128_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	movq	-16(%rbp), %rax
	movss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -80(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -64(%rbp)        # 8-byte Spill
	movsd	.LCPI128_4(%rip), %xmm0 # xmm0 = mem[0],zero
	callq	sqrt
	movsd	-64(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	-72(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movsd	-88(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm1, %xmm2
	movq	-16(%rbp), %rax
	movss	48(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm2
	divsd	%xmm2, %xmm0
	callq	exp
	movsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	-80(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	mulsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.13:                               #   in Loop: Header=BB128_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB128_11
.LBB128_14:
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 56(%rax)
	movl	$0, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB128_15:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB128_21
# %bb.16:                               #   in Loop: Header=BB128_15 Depth=1
	movsd	.LCPI128_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB128_19
# %bb.17:                               #   in Loop: Header=BB128_15 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	cmpl	$5, (%rax,%rcx,4)
	jl	.LBB128_19
# %bb.18:                               #   in Loop: Header=BB128_15 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	subss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, -24(%rbp)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	mulss	-24(%rbp), %xmm0
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	divss	(%rax,%rcx,4), %xmm0
	movq	-16(%rbp), %rax
	addss	56(%rax), %xmm0
	movss	%xmm0, 56(%rax)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB128_19:                             #   in Loop: Header=BB128_15 Depth=1
	jmp	.LBB128_20
.LBB128_20:                             #   in Loop: Header=BB128_15 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB128_15
.LBB128_21:
	cmpl	$3, -36(%rbp)
	jle	.LBB128_23
# %bb.22:
	movsd	.LCPI128_0(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-36(%rbp), %eax
	subl	$3, %eax
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm2, %xmm0
	movq	-16(%rbp), %rax
	movss	56(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm2, %xmm1
	callq	IncompleteGamma
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 60(%rax)
	jmp	.LBB128_24
.LBB128_23:
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 60(%rax)
.LBB128_24:
	movl	$1, -48(%rbp)
.LBB128_25:
	movl	-48(%rbp), %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end128:
	.size	GaussianFitHistogram, .Lfunc_end128-GaussianFitHistogram
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GaussianSetHistogram
.LCPI129_0:
	.quad	4611686018427387904     # double 2
.LCPI129_1:
	.quad	4617315517961601024     # double 5
.LCPI129_2:
	.quad	-4616189618054758400    # double -1
.LCPI129_3:
	.quad	4607182418800017408     # double 1
.LCPI129_4:
	.quad	4618760250204063342     # double 6.2831799999999998
.LCPI129_5:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	GaussianSetHistogram
	.p2align	4, 0x90
	.type	GaussianSetHistogram,@function
GaussianSetHistogram:                   # @GaussianSetHistogram
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -48(%rbp)
	movss	%xmm1, -44(%rbp)
	movq	-8(%rbp), %rdi
	callq	UnfitHistogram
	movabsq	$.L.str.207, %rdi
	movq	-8(%rbp), %rax
	movl	$2, 40(%rax)
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 44(%rax)
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-28(%rbp), %rdx
	shlq	$2, %rdx
	movl	$845, %esi              # imm = 0x34D
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movl	$0, -24(%rbp)
.LBB129_1:                              # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_4
# %bb.2:                                #   in Loop: Header=BB129_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-24(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB129_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB129_1
.LBB129_4:
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB129_5:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	.LBB129_8
# %bb.6:                                #   in Loop: Header=BB129_5 Depth=1
	movsd	.LCPI129_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -80(%rbp)        # 8-byte Spill
	movsd	.LCPI129_2(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -64(%rbp)        # 8-byte Spill
	movsd	.LCPI129_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -40(%rbp)        # 8-byte Spill
	movsd	.LCPI129_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	movq	-8(%rbp), %rax
	movss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -72(%rbp)        # 8-byte Spill
	movq	-8(%rbp), %rax
	movss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movsd	.LCPI129_4(%rip), %xmm0 # xmm0 = mem[0],zero
	callq	sqrt
	movsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -40(%rbp)        # 8-byte Spill
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	-64(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movss	48(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm1, %xmm2
	movq	-8(%rbp), %rax
	movss	48(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm2
	divsd	%xmm2, %xmm0
	callq	exp
	movsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	-72(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	mulsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.7:                                #   in Loop: Header=BB129_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_5
.LBB129_8:
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 56(%rax)
	movl	$0, -20(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB129_9:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jg	.LBB129_15
# %bb.10:                               #   in Loop: Header=BB129_9 Depth=1
	movsd	.LCPI129_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB129_13
# %bb.11:                               #   in Loop: Header=BB129_9 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	cmpl	$5, (%rax,%rcx,4)
	jl	.LBB129_13
# %bb.12:                               #   in Loop: Header=BB129_9 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	subss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, -16(%rbp)
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	mulss	-16(%rbp), %xmm0
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movslq	%ecx, %rcx
	divss	(%rax,%rcx,4), %xmm0
	movq	-8(%rbp), %rax
	addss	56(%rax), %xmm0
	movss	%xmm0, 56(%rax)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB129_13:                             #   in Loop: Header=BB129_9 Depth=1
	jmp	.LBB129_14
.LBB129_14:                             #   in Loop: Header=BB129_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_9
.LBB129_15:
	cmpl	$1, -20(%rbp)
	jle	.LBB129_17
# %bb.16:
	movsd	.LCPI129_0(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-20(%rbp), %eax
	subl	$1, %eax
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm2, %xmm0
	movq	-8(%rbp), %rax
	movss	56(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm2, %xmm1
	callq	IncompleteGamma
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 60(%rax)
	jmp	.LBB129_18
.LBB129_17:
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 60(%rax)
.LBB129_18:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end129:
	.size	GaussianSetHistogram, .Lfunc_end129-GaussianSetHistogram
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function EVDDensity
.LCPI130_0:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	EVDDensity
	.p2align	4, 0x90
	.type	EVDDensity,@function
EVDDensity:                             # @EVDDensity
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movsd	.LCPI130_0(%rip), %xmm3 # xmm3 = mem[0],zero
	movss	%xmm0, -12(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	%xmm2, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm3, %xmm1
	mulsd	%xmm0, %xmm1
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, -24(%rbp)        # 8-byte Spill
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm3
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm0, %xmm3
	movaps	%xmm3, %xmm0
	callq	exp
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end130:
	.size	EVDDensity, .Lfunc_end130-EVDDensity
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function ExtremeValueP2
.LCPI131_0:
	.quad	4502148214488346440     # double 9.9999999999999995E-8
.LCPI131_1:
	.quad	4607182418800017408     # double 1
.LCPI131_2:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	ExtremeValueP2
	.p2align	4, 0x90
	.type	ExtremeValueP2,@function
ExtremeValueP2:                         # @ExtremeValueP2
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movss	%xmm0, -24(%rbp)
	movss	%xmm1, -20(%rbp)
	movss	%xmm2, -16(%rbp)
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm0
	movsd	%xmm0, -40(%rbp)        # 8-byte Spill
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-20(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	-16(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movsd	.LCPI131_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-40(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -8(%rbp)
	ucomisd	-8(%rbp), %xmm1
	jbe	.LBB131_2
# %bb.1:
	movsd	-8(%rbp), %xmm0         # xmm0 = mem[0],zero
	movsd	%xmm0, -32(%rbp)
	jmp	.LBB131_3
.LBB131_2:
	movsd	.LCPI131_2(%rip), %xmm0 # xmm0 = mem[0],zero
	mulsd	-8(%rbp), %xmm0
	callq	exp
	movsd	.LCPI131_1(%rip), %xmm1 # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -32(%rbp)
.LBB131_3:
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end131:
	.size	ExtremeValueP2, .Lfunc_end131-ExtremeValueP2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function EVDrandom
.LCPI132_0:
	.quad	4607182418800017408     # double 1
.LCPI132_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	EVDrandom
	.p2align	4, 0x90
	.type	EVDrandom,@function
EVDrandom:                              # @EVDrandom
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorps	%xmm2, %xmm2
	movss	%xmm0, -12(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	%xmm2, -4(%rbp)
.LBB132_1:                              # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xorps	%xmm0, %xmm0
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jne	.LBB132_2
	jp	.LBB132_2
	jmp	.LBB132_3
.LBB132_2:                              #   in Loop: Header=BB132_1 Depth=1
	movsd	.LCPI132_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
.LBB132_3:                              #   in Loop: Header=BB132_1 Depth=1
	testb	$1, %al
	jne	.LBB132_4
	jmp	.LBB132_5
.LBB132_4:                              #   in Loop: Header=BB132_1 Depth=1
	callq	sre_random
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -4(%rbp)
	jmp	.LBB132_1
.LBB132_5:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI132_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end132:
	.size	EVDrandom, .Lfunc_end132-EVDrandom
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function hmmcalibrate
.LCPI133_0:
	.long	1128792064              # float 200
.LCPI133_1:
	.long	1134723072              # float 325
.LCPI133_2:
	.long	1176255488              # float 9999
	.text
	.globl	hmmcalibrate
	.p2align	4, 0x90
	.type	hmmcalibrate,@function
hmmcalibrate:                           # @hmmcalibrate
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$296, %rsp              # imm = 0x128
	.cfi_offset %rbx, -24
	movss	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	.LCPI133_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movl	%edi, -112(%rbp)
	movq	%rsi, -168(%rbp)
	movl	$5000, -108(%rbp)       # imm = 0x1388
	movl	$0, -56(%rbp)
	movss	%xmm1, -100(%rbp)
	movss	%xmm0, -96(%rbp)
	xorl	%edi, %edi
	callq	time
	movl	%eax, -104(%rbp)
	movq	$0, -120(%rbp)
	movl	$0, -52(%rbp)
	movl	$20, -188(%rbp)
	movl	$100, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB133_1:                              # =>This Inner Loop Header: Depth=1
	movabsq	$OPTIONS, %rdx
	movabsq	$usage, %r8
	leaq	-92(%rbp), %r9
	leaq	-40(%rbp), %rax
	leaq	-72(%rbp), %rbx
	movl	-112(%rbp), %edi
	movq	-168(%rbp), %rsi
	movl	$9, %ecx
	movq	%rax, (%rsp)
	movq	%rbx, 8(%rsp)
	callq	Getopt
	cmpl	$0, %eax
	je	.LBB133_29
# %bb.2:                                #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.233, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_4
# %bb.3:                                #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	atoi
	movl	%eax, -28(%rbp)
	jmp	.LBB133_28
.LBB133_4:                              #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.1.234, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_6
# %bb.5:                                #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	atoi
	movl	%eax, -56(%rbp)
	jmp	.LBB133_27
.LBB133_6:                              #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.2.235, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_8
# %bb.7:                                #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -120(%rbp)
	jmp	.LBB133_26
.LBB133_8:                              #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.3.236, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_10
# %bb.9:                                #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -100(%rbp)
	jmp	.LBB133_25
.LBB133_10:                             #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.4.237, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_12
# %bb.11:                               #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	atoi
	movl	%eax, -108(%rbp)
	jmp	.LBB133_24
.LBB133_12:                             #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.5.238, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_14
# %bb.13:                               #   in Loop: Header=BB133_1 Depth=1
	movl	$1, -52(%rbp)
	jmp	.LBB133_23
.LBB133_14:                             #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.6.239, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_16
# %bb.15:                               #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -96(%rbp)
	jmp	.LBB133_22
.LBB133_16:                             #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.7.240, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_18
# %bb.17:                               #   in Loop: Header=BB133_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	atoi
	movl	%eax, -104(%rbp)
	jmp	.LBB133_21
.LBB133_18:                             #   in Loop: Header=BB133_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	$.L.str.8.241, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB133_20
# %bb.19:
	movabsq	$banner, %rsi
	movq	stdout, %rdi
	callq	HMMERBanner
	movabsq	$usage, %rdi
	callq	puts
	movabsq	$experts, %rdi
	callq	puts
	xorl	%edi, %edi
	callq	exit
.LBB133_20:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_21
.LBB133_21:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_22
.LBB133_22:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_23
.LBB133_23:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_24
.LBB133_24:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_25
.LBB133_25:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_26
.LBB133_26:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_27
.LBB133_27:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_28
.LBB133_28:                             #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_1
.LBB133_29:
	movl	-112(%rbp), %eax
	subl	-92(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB133_31
# %bb.30:
	movabsq	$.L.str.9.242, %rdi
	movabsq	$usage, %rsi
	movb	$0, %al
	callq	Die
.LBB133_31:
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -92(%rbp)
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB133_33
# %bb.32:
	movabsq	$.L.str.10.243, %rdi
	movb	$0, %al
	callq	Die
.LBB133_33:
	cmpl	$0, -28(%rbp)
	je	.LBB133_35
# %bb.34:
	movabsq	$.L.str.11.244, %rdi
	movb	$0, %al
	callq	Die
.LBB133_35:
	movq	-136(%rbp), %rdi
	xorl	%esi, %esi
	callq	HMMFileOpen
	movq	%rax, -128(%rbp)
	cmpq	$0, %rax
	jne	.LBB133_37
# %bb.36:
	movabsq	$.L.str.12.245, %rdi
	movq	-136(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB133_37:
	movq	$0, -80(%rbp)
	cmpq	$0, -120(%rbp)
	je	.LBB133_41
# %bb.38:
	movabsq	$.L.str.13.246, %rsi
	movq	-120(%rbp), %rdi
	callq	fopen
	movq	%rax, -80(%rbp)
	cmpq	$0, %rax
	jne	.LBB133_40
# %bb.39:
	movabsq	$.L.str.14.247, %rdi
	movq	-120(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB133_40:
	jmp	.LBB133_41
.LBB133_41:
	movabsq	$.L.str.15.248, %rbx
	movq	-136(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movq	%rbx, %rdi
	movl	$265, %esi              # imm = 0x109
	movq	%rax, %rdx
	callq	sre_malloc
	movabsq	$.L.str.16.249, %rbx
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	strcpy
	movq	-48(%rbp), %rdi
	movq	%rbx, %rsi
	callq	strcat
	movq	-48(%rbp), %rdi
	callq	FileExists
	cmpl	$0, %eax
	je	.LBB133_45
# %bb.42:
	movq	-48(%rbp), %rdi
	callq	remove
	cmpl	$0, %eax
	je	.LBB133_44
# %bb.43:
	movabsq	$.L.str.15.248, %rdi
	movl	$270, %esi              # imm = 0x10E
	callq	Panic
.LBB133_44:
	jmp	.LBB133_45
.LBB133_45:
	movq	-128(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB133_47
# %bb.46:
	movabsq	$.L.str.17.250, %rax
	movq	%rax, -184(%rbp)
	jmp	.LBB133_48
.LBB133_47:
	movabsq	$.L.str.13.246, %rax
	movq	%rax, -184(%rbp)
.LBB133_48:
	movabsq	$banner, %rsi
	movq	stdout, %rdi
	callq	HMMERBanner
	movabsq	$.L.str.18.251, %rdi
	movq	-136(%rbp), %rsi
	movb	$0, %al
	callq	printf
	cmpl	$0, -56(%rbp)
	je	.LBB133_50
# %bb.49:
	movabsq	$.L.str.19.252, %rdi
	movl	-56(%rbp), %esi
	movb	$0, %al
	callq	printf
	jmp	.LBB133_51
.LBB133_50:
	movabsq	$.L.str.20.253, %rdi
	movss	-100(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	movabsq	$.L.str.21.254, %rdi
	movss	-96(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
.LBB133_51:
	movabsq	$.L.str.22.255, %rdi
	movl	-108(%rbp), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.23.256, %rdi
	movl	-104(%rbp), %esi
	movb	$0, %al
	callq	printf
	cmpq	$0, -120(%rbp)
	je	.LBB133_53
# %bb.52:
	movq	-120(%rbp), %rsi
	jmp	.LBB133_54
.LBB133_53:
	movabsq	$.L.str.25.257, %rsi
	jmp	.LBB133_54
.LBB133_54:
	movabsq	$.L.str.24.258, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$0, -52(%rbp)
	je	.LBB133_56
# %bb.55:
	movabsq	$.L.str.26.259, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB133_59
.LBB133_56:
	cmpl	$0, -28(%rbp)
	jle	.LBB133_58
# %bb.57:
	movabsq	$.L.str.27.260, %rdi
	movl	-28(%rbp), %esi
	movb	$0, %al
	callq	printf
.LBB133_58:
	jmp	.LBB133_59
.LBB133_59:
	movabsq	$.L.str.28.261, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.15.248, %rdi
	movl	$0, -12(%rbp)
	movslq	-60(%rbp), %rdx
	shlq	$2, %rdx
	movl	$308, %esi              # imm = 0x134
	callq	sre_malloc
	movabsq	$.L.str.15.248, %rdi
	movq	%rax, -152(%rbp)
	movslq	-60(%rbp), %rdx
	shlq	$2, %rdx
	movl	$309, %esi              # imm = 0x135
	callq	sre_malloc
	movq	%rax, -144(%rbp)
.LBB133_60:                             # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rsi
	movq	-128(%rbp), %rdi
	callq	HMMFileRead
	cmpl	$0, %eax
	je	.LBB133_74
# %bb.61:                               #   in Loop: Header=BB133_60 Depth=1
	cmpq	$0, -24(%rbp)
	jne	.LBB133_63
# %bb.62:                               #   in Loop: Header=BB133_60 Depth=1
	movabsq	$.L.str.29.262, %rdi
	movb	$0, %al
	callq	Die
.LBB133_63:                             #   in Loop: Header=BB133_60 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB133_66
# %bb.64:                               #   in Loop: Header=BB133_60 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB133_66
# %bb.65:                               #   in Loop: Header=BB133_60 Depth=1
	leaq	-88(%rbp), %r8
	leaq	-172(%rbp), %r9
	movq	-24(%rbp), %rdi
	movl	-104(%rbp), %esi
	movl	-108(%rbp), %edx
	movss	-100(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	movss	-96(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-56(%rbp), %ecx
	callq	main_loop_serial
	jmp	.LBB133_67
.LBB133_66:                             #   in Loop: Header=BB133_60 Depth=1
	movabsq	$.L.str.30.263, %rdi
	movb	$0, %al
	callq	Die
.LBB133_67:                             #   in Loop: Header=BB133_60 Depth=1
	movss	.LCPI133_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-88(%rbp), %rdi
	movl	$1, %esi
	callq	ExtremeValueFitHistogram
	cmpl	$0, %eax
	jne	.LBB133_69
# %bb.68:                               #   in Loop: Header=BB133_60 Depth=1
	movabsq	$.L.str.31.264, %rdi
	movb	$0, %al
	callq	Die
.LBB133_69:                             #   in Loop: Header=BB133_60 Depth=1
	movl	$100, %ecx
	movq	-88(%rbp), %rax
	movss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-152(%rbp), %rax
	movslq	-12(%rbp), %rdx
	movss	%xmm0, (%rax,%rdx,4)
	movq	-88(%rbp), %rax
	movss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-144(%rbp), %rax
	movslq	-12(%rbp), %rdx
	movss	%xmm0, (%rax,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB133_71
# %bb.70:                               #   in Loop: Header=BB133_60 Depth=1
	movabsq	$.L.str.15.248, %rdi
	movq	-152(%rbp), %rdx
	movl	-12(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$348, %esi              # imm = 0x15C
	callq	sre_realloc
	movabsq	$.L.str.15.248, %rdi
	movq	%rax, -152(%rbp)
	movq	-144(%rbp), %rdx
	movl	-12(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	movl	$349, %esi              # imm = 0x15D
	callq	sre_realloc
	movq	%rax, -144(%rbp)
.LBB133_71:                             #   in Loop: Header=BB133_60 Depth=1
	movabsq	$.L.str.32.265, %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rsi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.33.266, %rdi
	movq	-88(%rbp), %rax
	movss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	movabsq	$.L.str.34.267, %rdi
	movq	-88(%rbp), %rax
	movss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	movabsq	$.L.str.35.268, %rdi
	movss	-172(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	movabsq	$.L.str.36, %rdi
	movb	$0, %al
	callq	printf
	cmpq	$0, -80(%rbp)
	je	.LBB133_73
# %bb.72:                               #   in Loop: Header=BB133_60 Depth=1
	movabsq	$.L.str.37, %rsi
	movq	-80(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movb	$0, %al
	callq	fprintf
	movq	-80(%rbp), %rdi
	movq	-88(%rbp), %rsi
	callq	PrintASCIIHistogram
	movabsq	$.L.str.36, %rsi
	movq	-80(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB133_73:                             #   in Loop: Header=BB133_60 Depth=1
	movq	-88(%rbp), %rdi
	callq	FreeHistogram
	movq	-24(%rbp), %rdi
	callq	FreePlan7
	jmp	.LBB133_60
.LBB133_74:
	movq	-128(%rbp), %rdi
	callq	HMMFileRewind
	movq	-48(%rbp), %rdi
	callq	FileExists
	cmpl	$0, %eax
	je	.LBB133_76
# %bb.75:
	movabsq	$.L.str.38, %rdi
	movq	-48(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB133_76:
	movq	-48(%rbp), %rdi
	movq	-184(%rbp), %rsi
	callq	fopen
	movq	%rax, -160(%rbp)
	cmpq	$0, %rax
	jne	.LBB133_78
# %bb.77:
	movabsq	$.L.str.39, %rdi
	movq	-48(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB133_78:
	movl	$0, -32(%rbp)
.LBB133_79:                             # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB133_89
# %bb.80:                               #   in Loop: Header=BB133_79 Depth=1
	leaq	-24(%rbp), %rsi
	movq	-128(%rbp), %rdi
	callq	HMMFileRead
	cmpl	$0, %eax
	jne	.LBB133_82
# %bb.81:                               #   in Loop: Header=BB133_79 Depth=1
	movabsq	$.L.str.40, %rdi
	movb	$0, %al
	callq	Die
.LBB133_82:                             #   in Loop: Header=BB133_79 Depth=1
	cmpq	$0, -24(%rbp)
	jne	.LBB133_84
# %bb.83:                               #   in Loop: Header=BB133_79 Depth=1
	movabsq	$.L.str.41, %rdi
	movq	-136(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB133_84:                             #   in Loop: Header=BB133_79 Depth=1
	movq	-152(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	%xmm0, 448(%rax)
	movq	-144(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	%xmm0, 452(%rax)
	movq	-24(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$128, %ecx
	movl	%ecx, 456(%rax)
	movq	-24(%rbp), %rdi
	movl	-112(%rbp), %esi
	movq	-168(%rbp), %rdx
	callq	Plan7ComlogAppend
	movq	-128(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB133_86
# %bb.85:                               #   in Loop: Header=BB133_79 Depth=1
	movq	-160(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	WriteBinHMM
	jmp	.LBB133_87
.LBB133_86:                             #   in Loop: Header=BB133_79 Depth=1
	movq	-160(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	WriteAscHMM
.LBB133_87:                             #   in Loop: Header=BB133_79 Depth=1
	movq	-24(%rbp), %rdi
	callq	FreePlan7
# %bb.88:                               #   in Loop: Header=BB133_79 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB133_79
.LBB133_89:
	movq	-128(%rbp), %rdi
	callq	HMMFileClose
	movq	-160(%rbp), %rdi
	callq	fclose
	cmpl	$0, %eax
	je	.LBB133_91
# %bb.90:
	movabsq	$.L.str.15.248, %rdi
	movl	$415, %esi              # imm = 0x19F
	callq	Panic
.LBB133_91:
	movq	-48(%rbp), %rdi
	callq	free
	movq	-152(%rbp), %rdi
	callq	free
	movq	-144(%rbp), %rdi
	callq	free
	cmpq	$0, -80(%rbp)
	je	.LBB133_93
# %bb.92:
	movq	-80(%rbp), %rdi
	callq	fclose
.LBB133_93:
	callq	SqdClean
	xorl	%eax, %eax
	addq	$296, %rsp              # imm = 0x128
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end133:
	.size	hmmcalibrate, .Lfunc_end133-hmmcalibrate
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function main_loop_serial
.LCPI134_0:
	.long	4286578687              # float -3.40282347E+38
	.text
	.p2align	4, 0x90
	.type	main_loop_serial,@function
main_loop_serial:                       # @main_loop_serial
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -60(%rbp)
	movss	%xmm0, -56(%rbp)
	movss	%xmm1, -52(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -96(%rbp)
	movq	%r9, -88(%rbp)
	movl	-64(%rbp), %edi
	callq	sre_srandom
	movq	-24(%rbp), %rdi
	movl	$1, %esi
	callq	P7Logoddsify
	leaq	-100(%rbp), %rsi
	leaq	-192(%rbp), %rdi
	callq	P7DefaultNullModel
	movl	$4294967096, %edi       # imm = 0xFFFFFF38
	movl	$200, %esi
	movl	$100, %edx
	callq	AllocHistogram
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	136(%rax), %esi
	movl	$1, %edi
	movl	$25, %edx
	xorl	%ecx, %ecx
	callq	CreatePlan7Matrix
	movss	.LCPI134_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	%rax, -48(%rbp)
	movss	%xmm0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB134_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_5 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB134_15
# %bb.2:                                #   in Loop: Header=BB134_1 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB134_4
# %bb.3:                                #   in Loop: Header=BB134_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_8
.LBB134_4:                              #   in Loop: Header=BB134_1 Depth=1
	jmp	.LBB134_5
.LBB134_5:                              #   Parent Loop BB134_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movss	-56(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movss	-52(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	callq	Gaussrandom
	cvttsd2si	%xmm0, %eax
	movl	%eax, -4(%rbp)
# %bb.6:                                #   in Loop: Header=BB134_5 Depth=2
	cmpl	$1, -4(%rbp)
	jl	.LBB134_5
# %bb.7:                                #   in Loop: Header=BB134_1 Depth=1
	jmp	.LBB134_8
.LBB134_8:                              #   in Loop: Header=BB134_1 Depth=1
	movabsq	$Alphabet, %rdi
	leaq	-192(%rbp), %rsi
	movl	Alphabet_size, %edx
	movl	-4(%rbp), %ecx
	callq	RandomSequence
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	DigitizeSequence
	movq	%rax, -40(%rbp)
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rax
	movl	136(%rax), %esi
	callq	P7ViterbiSize
	cmpl	$1000, %eax             # imm = 0x3E8
	jg	.LBB134_10
# %bb.9:                                #   in Loop: Header=BB134_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	P7Viterbi
	movss	%xmm0, -8(%rbp)
	jmp	.LBB134_11
.LBB134_10:                             #   in Loop: Header=BB134_1 Depth=1
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	P7SmallViterbi
	movss	%xmm0, -8(%rbp)
.LBB134_11:                             #   in Loop: Header=BB134_1 Depth=1
	movq	-80(%rbp), %rdi
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	callq	AddToHistogram
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	ucomiss	-16(%rbp), %xmm0
	jbe	.LBB134_13
# %bb.12:                               #   in Loop: Header=BB134_1 Depth=1
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -16(%rbp)
.LBB134_13:                             #   in Loop: Header=BB134_1 Depth=1
	movq	-40(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rdi
	callq	free
# %bb.14:                               #   in Loop: Header=BB134_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_1
.LBB134_15:
	movq	-48(%rbp), %rdi
	callq	FreePlan7Matrix
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-88(%rbp), %rax
	movss	%xmm0, (%rax)
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end134:
	.size	main_loop_serial, .Lfunc_end134-main_loop_serial
	.cfi_endproc
                                        # -- End function
	.globl	HMMFileOpen             # -- Begin function HMMFileOpen
	.p2align	4, 0x90
	.type	HMMFileOpen,@function
HMMFileOpen:                            # @HMMFileOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$592, %rsp              # imm = 0x250
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$.L.str.271, %rax
	movq	%rdi, -48(%rbp)
	movq	%rsi, -88(%rbp)
	movq	%rax, %rdi
	movl	$164, %esi
	movl	$56, %edx
	callq	sre_malloc
	movabsq	$.L.str.1.272, %rsi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	$0, (%rax)
	movq	-24(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 32(%rax)
	movq	-24(%rbp), %rax
	movq	$0, (%rax)
	movq	-24(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-48(%rbp), %rdi
	callq	fopen
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	je	.LBB135_4
# %bb.1:
	movabsq	$.L.str.271, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	shlq	$0, %rax
	movq	%rbx, %rdi
	movl	$181, %esi
	movq	%rax, %rdx
	callq	sre_malloc
	movabsq	$.L.str.2.273, %rsi
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movq	-48(%rbp), %rdi
	callq	SSIRecommendMode
	movq	-24(%rbp), %rcx
	movl	%eax, 36(%rcx)
	cmpl	$-1, %eax
	jne	.LBB135_3
# %bb.2:
	movabsq	$.L.str.3.274, %rdi
	movb	$0, %al
	callq	Die
.LBB135_3:
	jmp	.LBB135_10
.LBB135_4:
	leaq	-80(%rbp), %rdx
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rsi
	callq	EnvFileOpen
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	je	.LBB135_8
# %bb.5:
	movq	-80(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	FileConcat
	movabsq	$.L.str.271, %r14
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	addq	%rax, %rbx
	addq	$5, %rbx
	shlq	$0, %rbx
	movq	%r14, %rdi
	movl	$192, %esi
	movq	%rbx, %rdx
	callq	sre_malloc
	movabsq	$.L.str.2.273, %rsi
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rdi
	callq	SSIRecommendMode
	movq	-24(%rbp), %rcx
	movl	%eax, 36(%rcx)
	cmpl	$-1, %eax
	jne	.LBB135_7
# %bb.6:
	movabsq	$.L.str.3.274, %rdi
	movb	$0, %al
	callq	Die
.LBB135_7:
	movq	-64(%rbp), %rdi
	callq	free
	movq	-80(%rbp), %rdi
	callq	free
	jmp	.LBB135_9
.LBB135_8:
	movq	$0, -40(%rbp)
	jmp	.LBB135_62
.LBB135_9:
	jmp	.LBB135_10
.LBB135_10:
	movq	-56(%rbp), %rdi
	movq	-24(%rbp), %rsi
	addq	$8, %rsi
	callq	SSIOpen
	movq	-56(%rbp), %rdi
	callq	free
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	36(%rax), %esi
	movq	-24(%rbp), %rdx
	addq	$40, %rdx
	callq	SSIGetFilePosition
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB135_12
# %bb.11:
	movabsq	$.L.str.4.275, %rdi
	movb	$0, %al
	callq	Die
.LBB135_12:
	leaq	-28(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB135_14
# %bb.13:
	movq	-24(%rbp), %rdi
	callq	HMMFileClose
	movq	$0, -40(%rbp)
	jmp	.LBB135_62
.LBB135_14:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	rewind
	movl	-28(%rbp), %eax
	cmpl	v20magic, %eax
	jne	.LBB135_16
# %bb.15:
	movabsq	$read_bin20hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_16:
	movl	-28(%rbp), %eax
	cmpl	v20swap, %eax
	jne	.LBB135_18
# %bb.17:
	movabsq	$read_bin20hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 28(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_18:
	movl	-28(%rbp), %eax
	cmpl	v19magic, %eax
	jne	.LBB135_20
# %bb.19:
	movabsq	$read_bin19hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_20:
	movl	-28(%rbp), %eax
	cmpl	v19swap, %eax
	jne	.LBB135_22
# %bb.21:
	movabsq	$read_bin19hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 28(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_22:
	movl	-28(%rbp), %eax
	cmpl	v17magic, %eax
	jne	.LBB135_24
# %bb.23:
	movabsq	$read_bin17hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_24:
	movl	-28(%rbp), %eax
	cmpl	v17swap, %eax
	jne	.LBB135_26
# %bb.25:
	movabsq	$read_bin17hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 28(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_26:
	movl	-28(%rbp), %eax
	cmpl	v11magic, %eax
	jne	.LBB135_28
# %bb.27:
	movabsq	$read_bin11hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_28:
	movl	-28(%rbp), %eax
	cmpl	v11swap, %eax
	jne	.LBB135_30
# %bb.29:
	movabsq	$read_bin11hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 28(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_30:
	movl	-28(%rbp), %eax
	cmpl	v10magic, %eax
	jne	.LBB135_32
# %bb.31:
	movabsq	$read_bin10hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_32:
	movl	-28(%rbp), %eax
	cmpl	v10swap, %eax
	jne	.LBB135_34
# %bb.33:
	movabsq	$read_bin10hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 28(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_34:
	jmp	.LBB135_35
.LBB135_35:
	jmp	.LBB135_36
.LBB135_36:
	jmp	.LBB135_37
.LBB135_37:
	jmp	.LBB135_38
.LBB135_38:
	jmp	.LBB135_39
.LBB135_39:
	jmp	.LBB135_40
.LBB135_40:
	jmp	.LBB135_41
.LBB135_41:
	jmp	.LBB135_42
.LBB135_42:
	jmp	.LBB135_43
.LBB135_43:
	movl	-28(%rbp), %eax
	andl	$-2147483648, %eax      # imm = 0x80000000
	cmpl	$0, %eax
	je	.LBB135_45
# %bb.44:
	movabsq	$.L.str.5.278, %rdi
	movq	-48(%rbp), %rsi
	movb	$0, %al
	callq	Warn
	movq	-24(%rbp), %rdi
	callq	HMMFileClose
	movq	$0, -40(%rbp)
	jmp	.LBB135_62
.LBB135_45:
	leaq	-608(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB135_47
# %bb.46:
	movq	-24(%rbp), %rdi
	callq	HMMFileClose
	movq	$0, -40(%rbp)
	jmp	.LBB135_62
.LBB135_47:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	rewind
	movabsq	$.L.str.6.279, %rdi
	leaq	-608(%rbp), %rsi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB135_49
# %bb.48:
	movabsq	$read_asc20hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_49:
	movabsq	$.L.str.7.280, %rdi
	leaq	-608(%rbp), %rsi
	movl	$10, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB135_51
# %bb.50:
	movabsq	$read_asc19hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_51:
	movabsq	$.L.str.8.281, %rdi
	leaq	-608(%rbp), %rsi
	movl	$10, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB135_53
# %bb.52:
	movabsq	$read_asc17hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_53:
	movabsq	$.L.str.9.282, %rdi
	leaq	-608(%rbp), %rsi
	movl	$10, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB135_55
# %bb.54:
	movabsq	$read_asc11hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_55:
	movabsq	$.L.str.10.283, %rdi
	leaq	-608(%rbp), %rsi
	movl	$10, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB135_57
# %bb.56:
	movabsq	$read_asc10hmm, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB135_62
.LBB135_57:
	jmp	.LBB135_58
.LBB135_58:
	jmp	.LBB135_59
.LBB135_59:
	jmp	.LBB135_60
.LBB135_60:
	jmp	.LBB135_61
.LBB135_61:
	movq	-24(%rbp), %rdi
	callq	HMMFileClose
	movq	$0, -40(%rbp)
.LBB135_62:
	movq	-40(%rbp), %rax
	addq	$592, %rsp              # imm = 0x250
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end135:
	.size	HMMFileOpen, .Lfunc_end135-HMMFileOpen
	.cfi_endproc
                                        # -- End function
	.globl	HMMFileClose            # -- Begin function HMMFileClose
	.p2align	4, 0x90
	.type	HMMFileClose,@function
HMMFileClose:                           # @HMMFileClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB136_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fclose
.LBB136_2:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB136_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	SSIClose
.LBB136_4:
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end136:
	.size	HMMFileClose, .Lfunc_end136-HMMFileClose
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_bin20hmm
	.type	read_bin20hmm,@function
read_bin20hmm:                          # @read_bin20hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -32(%rbp)
	movq	%rsi, -56(%rbp)
	movq	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB137_2
# %bb.1:
	movl	$0, -44(%rbp)
	jmp	.LBB137_162
.LBB137_2:
	leaq	-48(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_4
# %bb.3:
	movl	$0, -44(%rbp)
	jmp	.LBB137_162
.LBB137_4:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_6
# %bb.5:
	leaq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_6:
	movl	-48(%rbp), %eax
	cmpl	v20magic, %eax
	je	.LBB137_8
# %bb.7:
	jmp	.LBB137_159
.LBB137_8:
	callq	AllocPlan7Shell
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$456, %rdi              # imm = 0x1C8
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_10
# %bb.9:
	jmp	.LBB137_159
.LBB137_10:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_12
# %bb.11:
	movq	-16(%rbp), %rdi
	addq	$456, %rdi              # imm = 0x1C8
	movl	$4, %esi
	callq	byteswap
.LBB137_12:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	28(%rax), %esi
	movq	-16(%rbp), %rdx
	callq	read_bin_string
	cmpl	$0, %eax
	jne	.LBB137_14
# %bb.13:
	jmp	.LBB137_159
.LBB137_14:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB137_17
# %bb.15:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	28(%rax), %esi
	movq	-16(%rbp), %rdx
	addq	$8, %rdx
	callq	read_bin_string
	cmpl	$0, %eax
	jne	.LBB137_17
# %bb.16:
	jmp	.LBB137_159
.LBB137_17:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB137_20
# %bb.18:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	28(%rax), %esi
	movq	-16(%rbp), %rdx
	addq	$16, %rdx
	callq	read_bin_string
	cmpl	$0, %eax
	jne	.LBB137_20
# %bb.19:
	jmp	.LBB137_159
.LBB137_20:
	movq	-16(%rbp), %rdi
	addq	$136, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_22
# %bb.21:
	jmp	.LBB137_159
.LBB137_22:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_24
# %bb.23:
	movq	-16(%rbp), %rdi
	addq	$136, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_24:
	leaq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_26
# %bb.25:
	jmp	.LBB137_159
.LBB137_26:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_28
# %bb.27:
	leaq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_28:
	cmpl	$0, Alphabet_type
	jne	.LBB137_30
# %bb.29:
	movl	-40(%rbp), %edi
	callq	SetAlphabet
	jmp	.LBB137_33
.LBB137_30:
	movl	-40(%rbp), %eax
	cmpl	Alphabet_type, %eax
	je	.LBB137_32
# %bb.31:
	movl	Alphabet_type, %edi
	callq	AlphabetType2String
	movq	%rax, %rbx
	movl	-40(%rbp), %edi
	callq	AlphabetType2String
	movabsq	$.L.str.65, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB137_32:
	jmp	.LBB137_33
.LBB137_33:
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	callq	AllocPlan7Body
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB137_36
# %bb.34:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_36
# %bb.35:
	jmp	.LBB137_159
.LBB137_36:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	136(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB137_39
# %bb.37:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_39
# %bb.38:
	jmp	.LBB137_159
.LBB137_39:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	136(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB137_42
# %bb.40:
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_42
# %bb.41:
	jmp	.LBB137_159
.LBB137_42:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_48
# %bb.43:
	movl	$1, -20(%rbp)
.LBB137_44:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB137_47
# %bb.45:                               #   in Loop: Header=BB137_44 Depth=1
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdi
	movslq	-20(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.46:                               #   in Loop: Header=BB137_44 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_44
.LBB137_47:
	jmp	.LBB137_48
.LBB137_48:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	28(%rax), %esi
	movq	-16(%rbp), %rdx
	addq	$48, %rdx
	callq	read_bin_string
	cmpl	$0, %eax
	jne	.LBB137_50
# %bb.49:
	jmp	.LBB137_159
.LBB137_50:
	movq	-16(%rbp), %rdi
	addq	$56, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_52
# %bb.51:
	jmp	.LBB137_159
.LBB137_52:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_54
# %bb.53:
	movq	-16(%rbp), %rdi
	addq	$56, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_54:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	28(%rax), %esi
	movq	-16(%rbp), %rdx
	addq	$64, %rdx
	callq	read_bin_string
	cmpl	$0, %eax
	jne	.LBB137_56
# %bb.55:
	jmp	.LBB137_159
.LBB137_56:
	movq	-16(%rbp), %rdi
	addq	$80, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_58
# %bb.57:
	jmp	.LBB137_159
.LBB137_58:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_60
# %bb.59:
	movq	-16(%rbp), %rdi
	addq	$80, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_60:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB137_68
# %bb.61:
	movq	-16(%rbp), %rdi
	addq	$112, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_63
# %bb.62:
	jmp	.LBB137_159
.LBB137_63:
	movq	-16(%rbp), %rdi
	addq	$116, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_65
# %bb.64:
	jmp	.LBB137_159
.LBB137_65:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_67
# %bb.66:
	movq	-16(%rbp), %rdi
	addq	$112, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-16(%rbp), %rdi
	addq	$116, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_67:
	jmp	.LBB137_68
.LBB137_68:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB137_76
# %bb.69:
	movq	-16(%rbp), %rdi
	addq	$120, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_71
# %bb.70:
	jmp	.LBB137_159
.LBB137_71:
	movq	-16(%rbp), %rdi
	addq	$124, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_73
# %bb.72:
	jmp	.LBB137_159
.LBB137_73:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_75
# %bb.74:
	movq	-16(%rbp), %rdi
	addq	$120, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-16(%rbp), %rdi
	addq	$124, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_75:
	jmp	.LBB137_76
.LBB137_76:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4096, %eax             # imm = 0x1000
	cmpl	$0, %eax
	je	.LBB137_84
# %bb.77:
	movq	-16(%rbp), %rdi
	addq	$128, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_79
# %bb.78:
	jmp	.LBB137_159
.LBB137_79:
	movq	-16(%rbp), %rdi
	addq	$132, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_81
# %bb.80:
	jmp	.LBB137_159
.LBB137_81:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_83
# %bb.82:
	movq	-16(%rbp), %rdi
	addq	$128, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-16(%rbp), %rdi
	addq	$132, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB137_83:
	jmp	.LBB137_84
.LBB137_84:
	movl	$0, -20(%rbp)
.LBB137_85:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_90 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB137_96
# %bb.86:                               #   in Loop: Header=BB137_85 Depth=1
	movq	-16(%rbp), %rdi
	addq	$172, %rdi
	movslq	-20(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$2, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_88
# %bb.87:
	jmp	.LBB137_159
.LBB137_88:                             #   in Loop: Header=BB137_85 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_94
# %bb.89:                               #   in Loop: Header=BB137_85 Depth=1
	movl	$0, -36(%rbp)
.LBB137_90:                             #   Parent Loop BB137_85 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -36(%rbp)
	jge	.LBB137_93
# %bb.91:                               #   in Loop: Header=BB137_90 Depth=2
	movq	-16(%rbp), %rdi
	addq	$172, %rdi
	movslq	-20(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.92:                               #   in Loop: Header=BB137_90 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB137_90
.LBB137_93:                             #   in Loop: Header=BB137_85 Depth=1
	jmp	.LBB137_94
.LBB137_94:                             #   in Loop: Header=BB137_85 Depth=1
	jmp	.LBB137_95
.LBB137_95:                             #   in Loop: Header=BB137_85 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_85
.LBB137_96:
	movq	-16(%rbp), %rdi
	addq	$304, %rdi              # imm = 0x130
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_98
# %bb.97:
	jmp	.LBB137_159
.LBB137_98:
	movq	-16(%rbp), %rdi
	addq	$224, %rdi
	movslq	Alphabet_size, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_100
# %bb.99:
	jmp	.LBB137_159
.LBB137_100:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB137_108
# %bb.101:
	movq	-16(%rbp), %rdi
	addq	$448, %rdi              # imm = 0x1C0
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_103
# %bb.102:
	jmp	.LBB137_159
.LBB137_103:
	movq	-16(%rbp), %rdi
	addq	$452, %rdi              # imm = 0x1C4
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_105
# %bb.104:
	jmp	.LBB137_159
.LBB137_105:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_107
# %bb.106:
	movq	-16(%rbp), %rdi
	addq	$448, %rdi              # imm = 0x1C0
	movl	$4, %esi
	callq	byteswap
	movq	-16(%rbp), %rdi
	addq	$452, %rdi              # imm = 0x1C4
	movl	$4, %esi
	callq	byteswap
.LBB137_107:
	jmp	.LBB137_108
.LBB137_108:
	movq	-16(%rbp), %rdi
	addq	$168, %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_110
# %bb.109:
	jmp	.LBB137_159
.LBB137_110:
	movq	-16(%rbp), %rax
	movq	208(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_112
# %bb.111:
	jmp	.LBB137_159
.LBB137_112:
	movq	-16(%rbp), %rax
	movq	216(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_114
# %bb.113:
	jmp	.LBB137_159
.LBB137_114:
	movl	$1, -20(%rbp)
.LBB137_115:                            # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB137_120
# %bb.116:                              #   in Loop: Header=BB137_115 Depth=1
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	Alphabet_size, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_118
# %bb.117:
	jmp	.LBB137_159
.LBB137_118:                            #   in Loop: Header=BB137_115 Depth=1
	jmp	.LBB137_119
.LBB137_119:                            #   in Loop: Header=BB137_115 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_115
.LBB137_120:
	movl	$1, -20(%rbp)
.LBB137_121:                            # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB137_126
# %bb.122:                              #   in Loop: Header=BB137_121 Depth=1
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	Alphabet_size, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_124
# %bb.123:
	jmp	.LBB137_159
.LBB137_124:                            #   in Loop: Header=BB137_121 Depth=1
	jmp	.LBB137_125
.LBB137_125:                            #   in Loop: Header=BB137_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_121
.LBB137_126:
	movl	$1, -20(%rbp)
.LBB137_127:                            # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB137_132
# %bb.128:                              #   in Loop: Header=BB137_127 Depth=1
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$7, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB137_130
# %bb.129:
	jmp	.LBB137_159
.LBB137_130:                            #   in Loop: Header=BB137_127 Depth=1
	jmp	.LBB137_131
.LBB137_131:                            #   in Loop: Header=BB137_127 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_127
.LBB137_132:
	movq	-32(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB137_158
# %bb.133:
	movl	$0, -36(%rbp)
.LBB137_134:                            # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB137_137
# %bb.135:                              #   in Loop: Header=BB137_134 Depth=1
	movq	-16(%rbp), %rdi
	addq	$224, %rdi
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.136:                              #   in Loop: Header=BB137_134 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB137_134
.LBB137_137:
	movq	-16(%rbp), %rdi
	addq	$304, %rdi              # imm = 0x130
	movl	$4, %esi
	callq	byteswap
	movq	-16(%rbp), %rdi
	addq	$168, %rdi
	movl	$4, %esi
	callq	byteswap
	movl	$1, -20(%rbp)
.LBB137_138:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_140 Depth 2
                                        #     Child Loop BB137_145 Depth 2
                                        #     Child Loop BB137_151 Depth 2
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB137_157
# %bb.139:                              #   in Loop: Header=BB137_138 Depth=1
	movl	$0, -36(%rbp)
.LBB137_140:                            #   Parent Loop BB137_138 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB137_143
# %bb.141:                              #   in Loop: Header=BB137_140 Depth=2
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.142:                              #   in Loop: Header=BB137_140 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB137_140
.LBB137_143:                            #   in Loop: Header=BB137_138 Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB137_149
# %bb.144:                              #   in Loop: Header=BB137_138 Depth=1
	movl	$0, -36(%rbp)
.LBB137_145:                            #   Parent Loop BB137_138 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB137_148
# %bb.146:                              #   in Loop: Header=BB137_145 Depth=2
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.147:                              #   in Loop: Header=BB137_145 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB137_145
.LBB137_148:                            #   in Loop: Header=BB137_138 Depth=1
	jmp	.LBB137_149
.LBB137_149:                            #   in Loop: Header=BB137_138 Depth=1
	movq	-16(%rbp), %rax
	movq	208(%rax), %rdi
	movslq	-20(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-16(%rbp), %rax
	movq	216(%rax), %rdi
	movslq	-20(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB137_155
# %bb.150:                              #   in Loop: Header=BB137_138 Depth=1
	movl	$0, -36(%rbp)
.LBB137_151:                            #   Parent Loop BB137_138 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$7, -36(%rbp)
	jge	.LBB137_154
# %bb.152:                              #   in Loop: Header=BB137_151 Depth=2
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.153:                              #   in Loop: Header=BB137_151 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB137_151
.LBB137_154:                            #   in Loop: Header=BB137_138 Depth=1
	jmp	.LBB137_155
.LBB137_155:                            #   in Loop: Header=BB137_138 Depth=1
	jmp	.LBB137_156
.LBB137_156:                            #   in Loop: Header=BB137_138 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_138
.LBB137_157:
	jmp	.LBB137_158
.LBB137_158:
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$32, %ecx
	movl	%ecx, 456(%rax)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	movq	-16(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -44(%rbp)
	jmp	.LBB137_162
.LBB137_159:
	cmpq	$0, -16(%rbp)
	je	.LBB137_161
# %bb.160:
	movq	-16(%rbp), %rdi
	callq	FreePlan7
.LBB137_161:
	movq	-56(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -44(%rbp)
.LBB137_162:
	movl	-44(%rbp), %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end137:
	.size	read_bin20hmm, .Lfunc_end137-read_bin20hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_bin19hmm
	.type	read_bin19hmm,@function
read_bin19hmm:                          # @read_bin19hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB138_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB138_7
.LBB138_2:
	leaq	-44(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB138_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB138_7
.LBB138_4:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	28(%rax), %edx
	movl	$7, %esi
	callq	read_plan9_binhmm
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB138_6
# %bb.5:
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB138_7
.LBB138_6:
	leaq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	Plan9toPlan7
	movabsq	$.L.str.84, %rdi
	callq	Strdup
	movq	-32(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-32(%rbp), %rdi
	callq	Plan7SetCtime
	movq	-24(%rbp), %rdi
	callq	P9FreeHMM
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB138_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end138:
	.size	read_bin19hmm, .Lfunc_end138-read_bin19hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_bin17hmm
	.type	read_bin17hmm,@function
read_bin17hmm:                          # @read_bin17hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB139_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB139_7
.LBB139_2:
	leaq	-44(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB139_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB139_7
.LBB139_4:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	28(%rax), %edx
	movl	$5, %esi
	callq	read_plan9_binhmm
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB139_6
# %bb.5:
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB139_7
.LBB139_6:
	leaq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	Plan9toPlan7
	movabsq	$.L.str.84, %rdi
	callq	Strdup
	movq	-32(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-32(%rbp), %rdi
	callq	Plan7SetCtime
	movq	-24(%rbp), %rdi
	callq	P9FreeHMM
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB139_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end139:
	.size	read_bin17hmm, .Lfunc_end139-read_bin17hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_bin11hmm
	.type	read_bin11hmm,@function
read_bin11hmm:                          # @read_bin11hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB140_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB140_7
.LBB140_2:
	leaq	-44(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB140_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB140_7
.LBB140_4:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	28(%rax), %edx
	movl	$3, %esi
	callq	read_plan9_binhmm
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB140_6
# %bb.5:
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB140_7
.LBB140_6:
	leaq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	Plan9toPlan7
	movabsq	$.L.str.84, %rdi
	callq	Strdup
	movq	-32(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-32(%rbp), %rdi
	callq	Plan7SetCtime
	movq	-24(%rbp), %rdi
	callq	P9FreeHMM
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB140_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end140:
	.size	read_bin11hmm, .Lfunc_end140-read_bin11hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_bin10hmm
	.type	read_bin10hmm,@function
read_bin10hmm:                          # @read_bin10hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB141_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB141_7
.LBB141_2:
	leaq	-44(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB141_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB141_7
.LBB141_4:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	28(%rax), %edx
	movl	$1, %esi
	callq	read_plan9_binhmm
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB141_6
# %bb.5:
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB141_7
.LBB141_6:
	leaq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	Plan9toPlan7
	movabsq	$.L.str.84, %rdi
	callq	Strdup
	movq	-32(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-32(%rbp), %rdi
	callq	Plan7SetCtime
	movq	-24(%rbp), %rdi
	callq	P9FreeHMM
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB141_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end141:
	.size	read_bin10hmm, .Lfunc_end141-read_bin10hmm
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function read_asc20hmm
.LCPI142_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI142_1:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	read_asc20hmm,@function
read_asc20hmm:                          # @read_asc20hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$592, %rsp              # imm = 0x250
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -104(%rbp)
	movq	$0, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB142_2
# %bb.1:
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB142_3
.LBB142_2:
	movl	$0, -84(%rbp)
	jmp	.LBB142_208
.LBB142_3:
	movabsq	$.L.str.6.279, %rsi
	leaq	-624(%rbp), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB142_5
# %bb.4:
	jmp	.LBB142_205
.LBB142_5:
	callq	AllocPlan7Shell
	movq	%rax, -40(%rbp)
	movl	$-1, -80(%rbp)
.LBB142_6:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_71 Depth 2
                                        #       Child Loop BB142_73 Depth 3
                                        #     Child Loop BB142_91 Depth 2
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	je	.LBB142_127
# %bb.7:                                #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.57, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_9
# %bb.8:                                #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rsi
	movq	-40(%rbp), %rdi
	addq	$6, %rsi
	callq	Plan7SetName
	jmp	.LBB142_126
.LBB142_9:                              #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.58, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_11
# %bb.10:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rsi
	movq	-40(%rbp), %rdi
	addq	$6, %rsi
	callq	Plan7SetAccession
	jmp	.LBB142_125
.LBB142_11:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.59, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_13
# %bb.12:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rsi
	movq	-40(%rbp), %rdi
	addq	$6, %rsi
	callq	Plan7SetDescription
	jmp	.LBB142_124
.LBB142_13:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.60, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_15
# %bb.14:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	atoi
	movl	%eax, -80(%rbp)
	jmp	.LBB142_123
.LBB142_15:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.61, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_17
# %bb.16:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	atoi
	movq	-40(%rbp), %rcx
	movl	%eax, 56(%rcx)
	jmp	.LBB142_122
.LBB142_17:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.62, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_30
# %bb.18:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	s2upper
	movabsq	$.L.str.63.287, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_20
# %bb.19:                               #   in Loop: Header=BB142_6 Depth=1
	movl	$3, -76(%rbp)
	jmp	.LBB142_24
.LBB142_20:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.64, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_22
# %bb.21:                               #   in Loop: Header=BB142_6 Depth=1
	movl	$2, -76(%rbp)
	jmp	.LBB142_23
.LBB142_22:
	jmp	.LBB142_205
.LBB142_23:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_24
.LBB142_24:                             #   in Loop: Header=BB142_6 Depth=1
	cmpl	$0, Alphabet_type
	jne	.LBB142_26
# %bb.25:                               #   in Loop: Header=BB142_6 Depth=1
	movl	-76(%rbp), %edi
	callq	SetAlphabet
	jmp	.LBB142_29
.LBB142_26:                             #   in Loop: Header=BB142_6 Depth=1
	movl	-76(%rbp), %eax
	cmpl	Alphabet_type, %eax
	je	.LBB142_28
# %bb.27:                               #   in Loop: Header=BB142_6 Depth=1
	movl	Alphabet_type, %edi
	callq	AlphabetType2String
	movq	%rax, %rbx
	movl	-76(%rbp), %edi
	callq	AlphabetType2String
	movabsq	$.L.str.65, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB142_28:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_29
.LBB142_29:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_121
.LBB142_30:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.66, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_34
# %bb.31:                               #   in Loop: Header=BB142_6 Depth=1
	movsbl	-618(%rbp), %edi
	callq	sre_toupper
	cmpl	$89, %eax
	jne	.LBB142_33
# %bb.32:                               #   in Loop: Header=BB142_6 Depth=1
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, 456(%rax)
.LBB142_33:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_120
.LBB142_34:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.67, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_38
# %bb.35:                               #   in Loop: Header=BB142_6 Depth=1
	movsbl	-618(%rbp), %edi
	callq	sre_toupper
	cmpl	$89, %eax
	jne	.LBB142_37
# %bb.36:                               #   in Loop: Header=BB142_6 Depth=1
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$8, %ecx
	movl	%ecx, 456(%rax)
.LBB142_37:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_119
.LBB142_38:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.68, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_42
# %bb.39:                               #   in Loop: Header=BB142_6 Depth=1
	movsbl	-618(%rbp), %edi
	callq	sre_toupper
	cmpl	$89, %eax
	jne	.LBB142_41
# %bb.40:                               #   in Loop: Header=BB142_6 Depth=1
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$256, %ecx              # imm = 0x100
	movl	%ecx, 456(%rax)
.LBB142_41:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_118
.LBB142_42:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.69, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_47
# %bb.43:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	StringChop
	movq	-40(%rbp), %rax
	cmpq	$0, 48(%rax)
	jne	.LBB142_45
# %bb.44:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	Strdup
	movq	-40(%rbp), %rcx
	movq	%rax, 48(%rcx)
	jmp	.LBB142_46
.LBB142_45:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.271, %r14
	leaq	-624(%rbp), %r12
	movq	-40(%rbp), %rax
	movq	48(%rax), %r15
	movq	-40(%rbp), %rax
	movq	48(%rax), %rdi
	callq	strlen
	movq	%rax, %rbx
	addq	$1, %rbx
	addq	$6, %r12
	movq	%r12, %rdi
	callq	strlen
	addq	%rax, %rbx
	shlq	$3, %rbx
	movq	%r14, %rdi
	movl	$624, %esi              # imm = 0x270
	movq	%r15, %rdx
	movq	%rbx, %rcx
	callq	sre_realloc
	movabsq	$.L.str.34.286, %rsi
	movq	-40(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rdi
	callq	strcat
	leaq	-624(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	48(%rax), %rdi
	addq	$6, %rsi
	callq	strcat
.LBB142_46:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_117
.LBB142_47:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.70, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_49
# %bb.48:                               #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	StringChop
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	Strdup
	movq	-40(%rbp), %rcx
	movq	%rax, 64(%rcx)
	jmp	.LBB142_116
.LBB142_49:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.71, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_55
# %bb.50:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_52
# %bb.51:
	jmp	.LBB142_205
.LBB142_52:                             #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.72, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 112(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_54
# %bb.53:
	jmp	.LBB142_205
.LBB142_54:                             #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 116(%rax)
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$1024, %ecx             # imm = 0x400
	movl	%ecx, 456(%rax)
	jmp	.LBB142_115
.LBB142_55:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.73, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_61
# %bb.56:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_58
# %bb.57:
	jmp	.LBB142_205
.LBB142_58:                             #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.72, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 120(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_60
# %bb.59:
	jmp	.LBB142_205
.LBB142_60:                             #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 124(%rax)
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$2048, %ecx             # imm = 0x800
	movl	%ecx, 456(%rax)
	jmp	.LBB142_114
.LBB142_61:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.74, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_67
# %bb.62:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_64
# %bb.63:
	jmp	.LBB142_205
.LBB142_64:                             #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.72, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 128(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_66
# %bb.65:
	jmp	.LBB142_205
.LBB142_66:                             #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 132(%rax)
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$4096, %ecx             # imm = 0x1000
	movl	%ecx, 456(%rax)
	jmp	.LBB142_113
.LBB142_67:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.75, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_81
# %bb.68:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_70
# %bb.69:
	jmp	.LBB142_205
.LBB142_70:                             #   in Loop: Header=BB142_6 Depth=1
	movl	$0, -60(%rbp)
.LBB142_71:                             #   Parent Loop BB142_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB142_73 Depth 3
	cmpl	$4, -60(%rbp)
	jge	.LBB142_80
# %bb.72:                               #   in Loop: Header=BB142_71 Depth=2
	movl	$0, -44(%rbp)
.LBB142_73:                             #   Parent Loop BB142_6 Depth=1
                                        #     Parent Loop BB142_71 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -44(%rbp)
	jge	.LBB142_78
# %bb.74:                               #   in Loop: Header=BB142_73 Depth=3
	cmpq	$0, -56(%rbp)
	jne	.LBB142_76
# %bb.75:
	jmp	.LBB142_205
.LBB142_76:                             #   in Loop: Header=BB142_73 Depth=3
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movabsq	$.L.str.72, %rsi
	movq	-40(%rbp), %rax
	addq	$172, %rax
	movslq	-60(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-44(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
# %bb.77:                               #   in Loop: Header=BB142_73 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB142_73
.LBB142_78:                             #   in Loop: Header=BB142_71 Depth=2
	jmp	.LBB142_79
.LBB142_79:                             #   in Loop: Header=BB142_71 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB142_71
.LBB142_80:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_112
.LBB142_81:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.76, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_87
# %bb.82:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_84
# %bb.83:
	jmp	.LBB142_205
.LBB142_84:                             #   in Loop: Header=BB142_6 Depth=1
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movabsq	$.L.str.72, %rsi
	movq	-40(%rbp), %rax
	movss	%xmm0, 304(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_86
# %bb.85:
	jmp	.LBB142_205
.LBB142_86:                             #   in Loop: Header=BB142_6 Depth=1
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	%xmm1, -92(%rbp)        # 4-byte Spill
	movq	-40(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movss	%xmm1, -88(%rbp)        # 4-byte Spill
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movss	-88(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	addss	%xmm0, %xmm1
	movss	-92(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	divss	%xmm1, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 304(%rax)
	jmp	.LBB142_111
.LBB142_87:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.77, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_97
# %bb.88:                               #   in Loop: Header=BB142_6 Depth=1
	cmpl	$0, Alphabet_type
	jne	.LBB142_90
# %bb.89:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.78, %rdi
	movb	$0, %al
	callq	Die
.LBB142_90:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	movl	$0, -44(%rbp)
.LBB142_91:                             #   Parent Loop BB142_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB142_96
# %bb.92:                               #   in Loop: Header=BB142_91 Depth=2
	cmpq	$0, -56(%rbp)
	jne	.LBB142_94
# %bb.93:
	jmp	.LBB142_205
.LBB142_94:                             #   in Loop: Header=BB142_91 Depth=2
	movsd	.LCPI142_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-56(%rbp), %rdi
	movl	Alphabet_size, %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	callq	ascii2prob
	movabsq	$.L.str.72, %rsi
	movq	-40(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movss	%xmm0, 224(%rax,%rcx,4)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
# %bb.95:                               #   in Loop: Header=BB142_91 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB142_91
.LBB142_96:                             #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_110
.LBB142_97:                             #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.79, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_103
# %bb.98:                               #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$128, %ecx
	movl	%ecx, 456(%rax)
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_100
# %bb.99:
	jmp	.LBB142_205
.LBB142_100:                            #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.72, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 448(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_102
# %bb.101:
	jmp	.LBB142_205
.LBB142_102:                            #   in Loop: Header=BB142_6 Depth=1
	movq	-56(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 452(%rax)
	jmp	.LBB142_109
.LBB142_103:                            #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.80, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_105
# %bb.104:                              #   in Loop: Header=BB142_6 Depth=1
	leaq	-624(%rbp), %rdi
	addq	$6, %rdi
	callq	atoi
	movq	-40(%rbp), %rcx
	movl	%eax, 80(%rcx)
	jmp	.LBB142_108
.LBB142_105:                            #   in Loop: Header=BB142_6 Depth=1
	movabsq	$.L.str.81, %rsi
	leaq	-624(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_107
# %bb.106:
	jmp	.LBB142_128
.LBB142_107:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_108
.LBB142_108:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_109
.LBB142_109:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_110
.LBB142_110:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_111
.LBB142_111:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_112
.LBB142_112:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_113
.LBB142_113:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_114
.LBB142_114:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_115
.LBB142_115:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_116
.LBB142_116:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_117
.LBB142_117:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_118
.LBB142_118:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_119
.LBB142_119:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_120
.LBB142_120:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_121
.LBB142_121:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_122
.LBB142_122:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_123
.LBB142_123:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_124
.LBB142_124:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_125
.LBB142_125:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_126
.LBB142_126:                            #   in Loop: Header=BB142_6 Depth=1
	jmp	.LBB142_6
.LBB142_127:                            # %.loopexit1
	jmp	.LBB142_128
.LBB142_128:
	movq	-72(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB142_130
# %bb.129:
	jmp	.LBB142_205
.LBB142_130:
	cmpl	$1, -80(%rbp)
	jge	.LBB142_132
# %bb.131:
	jmp	.LBB142_205
.LBB142_132:
	movq	-40(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.LBB142_134
# %bb.133:
	jmp	.LBB142_205
.LBB142_134:
	cmpl	$0, Alphabet_type
	jne	.LBB142_136
# %bb.135:
	jmp	.LBB142_205
.LBB142_136:
	movq	-40(%rbp), %rdi
	movl	-80(%rbp), %esi
	callq	AllocPlan7Body
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB142_138
# %bb.137:
	jmp	.LBB142_205
.LBB142_138:
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB142_140
# %bb.139:
	jmp	.LBB142_205
.LBB142_140:
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_142
# %bb.141:
	jmp	.LBB142_205
.LBB142_142:
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movabsq	$.L.str.72, %rsi
	movss	%xmm0, -96(%rbp)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_144
# %bb.143:
	jmp	.LBB142_205
.LBB142_144:
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_146
# %bb.145:
	jmp	.LBB142_205
.LBB142_146:
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movq	-40(%rbp), %rax
	movss	%xmm0, 168(%rax)
	movq	-40(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-96(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	168(%rax), %xmm1
	divss	%xmm1, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 168(%rax)
	movl	$1, -60(%rbp)
.LBB142_147:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_155 Depth 2
                                        #     Child Loop BB142_172 Depth 2
                                        #     Child Loop BB142_185 Depth 2
	movl	-60(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB142_198
# %bb.148:                              #   in Loop: Header=BB142_147 Depth=1
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB142_150
# %bb.149:
	jmp	.LBB142_205
.LBB142_150:                            #   in Loop: Header=BB142_147 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_152
# %bb.151:
	jmp	.LBB142_205
.LBB142_152:                            #   in Loop: Header=BB142_147 Depth=1
	movq	-56(%rbp), %rdi
	callq	atoi
	cmpl	-60(%rbp), %eax
	je	.LBB142_154
# %bb.153:
	jmp	.LBB142_205
.LBB142_154:                            #   in Loop: Header=BB142_147 Depth=1
	movl	$0, -44(%rbp)
.LBB142_155:                            #   Parent Loop BB142_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB142_160
# %bb.156:                              #   in Loop: Header=BB142_155 Depth=2
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_158
# %bb.157:
	jmp	.LBB142_205
.LBB142_158:                            #   in Loop: Header=BB142_155 Depth=2
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	callq	ascii2prob
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.159:                              #   in Loop: Header=BB142_155 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB142_155
.LBB142_160:                            #   in Loop: Header=BB142_147 Depth=1
	movq	-40(%rbp), %rax
	movl	456(%rax), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB142_164
# %bb.161:                              #   in Loop: Header=BB142_147 Depth=1
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_163
# %bb.162:
	jmp	.LBB142_205
.LBB142_163:                            #   in Loop: Header=BB142_147 Depth=1
	movq	-56(%rbp), %rdi
	callq	atoi
	movq	-40(%rbp), %rcx
	movq	72(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB142_164:                            #   in Loop: Header=BB142_147 Depth=1
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB142_166
# %bb.165:
	jmp	.LBB142_205
.LBB142_166:                            #   in Loop: Header=BB142_147 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_168
# %bb.167:
	jmp	.LBB142_205
.LBB142_168:                            #   in Loop: Header=BB142_147 Depth=1
	movq	-40(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB142_170
# %bb.169:                              #   in Loop: Header=BB142_147 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB142_170:                            #   in Loop: Header=BB142_147 Depth=1
	movl	-60(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB142_178
# %bb.171:                              #   in Loop: Header=BB142_147 Depth=1
	movl	$0, -44(%rbp)
.LBB142_172:                            #   Parent Loop BB142_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB142_177
# %bb.173:                              #   in Loop: Header=BB142_172 Depth=2
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_175
# %bb.174:
	jmp	.LBB142_205
.LBB142_175:                            #   in Loop: Header=BB142_172 Depth=2
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	callq	ascii2prob
	movq	-40(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.176:                              #   in Loop: Header=BB142_172 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB142_172
.LBB142_177:                            #   in Loop: Header=BB142_147 Depth=1
	jmp	.LBB142_178
.LBB142_178:                            #   in Loop: Header=BB142_147 Depth=1
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB142_180
# %bb.179:
	jmp	.LBB142_205
.LBB142_180:                            #   in Loop: Header=BB142_147 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-624(%rbp), %rdi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_182
# %bb.181:
	jmp	.LBB142_205
.LBB142_182:                            #   in Loop: Header=BB142_147 Depth=1
	movq	-40(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB142_184
# %bb.183:                              #   in Loop: Header=BB142_147 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-40(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB142_184:                            #   in Loop: Header=BB142_147 Depth=1
	movl	$0, -44(%rbp)
.LBB142_185:                            #   Parent Loop BB142_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$7, -44(%rbp)
	jge	.LBB142_192
# %bb.186:                              #   in Loop: Header=BB142_185 Depth=2
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_188
# %bb.187:
	jmp	.LBB142_205
.LBB142_188:                            #   in Loop: Header=BB142_185 Depth=2
	movl	-60(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB142_190
# %bb.189:                              #   in Loop: Header=BB142_185 Depth=2
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB142_190:                            #   in Loop: Header=BB142_185 Depth=2
	jmp	.LBB142_191
.LBB142_191:                            #   in Loop: Header=BB142_185 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB142_185
.LBB142_192:                            #   in Loop: Header=BB142_147 Depth=1
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_194
# %bb.193:
	jmp	.LBB142_205
.LBB142_194:                            #   in Loop: Header=BB142_147 Depth=1
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movabsq	$.L.str.72, %rsi
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	movslq	-60(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB142_196
# %bb.195:
	jmp	.LBB142_205
.LBB142_196:                            #   in Loop: Header=BB142_147 Depth=1
	movss	.LCPI142_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rdi
	callq	ascii2prob
	movq	-40(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-60(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.197:                              #   in Loop: Header=BB142_147 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB142_147
.LBB142_198:
	jmp	.LBB142_199
.LBB142_199:                            # =>This Inner Loop Header: Depth=1
	leaq	-624(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	je	.LBB142_203
# %bb.200:                              #   in Loop: Header=BB142_199 Depth=1
	movabsq	$.L.str.82, %rsi
	leaq	-624(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB142_202
# %bb.201:
	jmp	.LBB142_204
.LBB142_202:                            #   in Loop: Header=BB142_199 Depth=1
	jmp	.LBB142_199
.LBB142_203:                            # %.loopexit
	jmp	.LBB142_204
.LBB142_204:
	movq	-40(%rbp), %rdi
	callq	Plan7Renormalize
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$32, %ecx
	movl	%ecx, 456(%rax)
	movq	-40(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	movq	-40(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -84(%rbp)
	jmp	.LBB142_208
.LBB142_205:
	cmpq	$0, -40(%rbp)
	je	.LBB142_207
# %bb.206:
	movq	-40(%rbp), %rdi
	callq	FreePlan7
.LBB142_207:
	movq	-104(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -84(%rbp)
.LBB142_208:
	movl	-84(%rbp), %eax
	addq	$592, %rsp              # imm = 0x250
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end142:
	.size	read_asc20hmm, .Lfunc_end142-read_asc20hmm
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function read_asc19hmm
.LCPI143_0:
	.quad	4607156757263679115     # double 0.99715099715099719
.LCPI143_1:
	.quad	4607173420598963721     # double 0.99900099900099903
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI143_2:
	.long	1065353216              # float 1
	.text
	.p2align	4, 0x90
	.type	read_asc19hmm,@function
read_asc19hmm:                          # @read_asc19hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movq	%rdi, -80(%rbp)
	movq	%rsi, -72(%rbp)
	movq	$0, -24(%rbp)
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB143_2
# %bb.1:
	leaq	-592(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB143_3
.LBB143_2:
	movl	$0, -56(%rbp)
	jmp	.LBB143_155
.LBB143_3:
	movabsq	$.L.str.7.280, %rsi
	leaq	-592(%rbp), %rdi
	movl	$10, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB143_5
# %bb.4:
	jmp	.LBB143_152
.LBB143_5:
	callq	AllocPlan7Shell
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_7
# %bb.6:
	jmp	.LBB143_152
.LBB143_7:
	movq	-32(%rbp), %rdi
	callq	atoi
	movl	%eax, -60(%rbp)
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_9
# %bb.8:
	jmp	.LBB143_152
.LBB143_9:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_11
# %bb.10:
	jmp	.LBB143_152
.LBB143_11:
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	Plan7SetName
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_13
# %bb.12:
	jmp	.LBB143_152
.LBB143_13:
	movq	-32(%rbp), %rdi
	callq	s2upper
	movq	-32(%rbp), %rdi
	movl	$.L.str.63.287, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB143_15
# %bb.14:
	movl	$3, -52(%rbp)
	jmp	.LBB143_19
.LBB143_15:
	movq	-32(%rbp), %rdi
	movl	$.L.str.64, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB143_17
# %bb.16:
	movl	$2, -52(%rbp)
	jmp	.LBB143_18
.LBB143_17:
	jmp	.LBB143_152
.LBB143_18:
	jmp	.LBB143_19
.LBB143_19:
	cmpl	$0, Alphabet_type
	jne	.LBB143_21
# %bb.20:
	movl	-52(%rbp), %edi
	callq	SetAlphabet
	jmp	.LBB143_24
.LBB143_21:
	movl	-52(%rbp), %eax
	cmpl	Alphabet_type, %eax
	je	.LBB143_23
# %bb.22:
	movl	Alphabet_type, %edi
	callq	AlphabetType2String
	movq	%rax, %rbx
	movl	-52(%rbp), %edi
	callq	AlphabetType2String
	movabsq	$.L.str.65, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB143_23:
	jmp	.LBB143_24
.LBB143_24:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_26
# %bb.25:
	jmp	.LBB143_152
.LBB143_26:
	movabsq	$Alphabet, %rsi
	movq	-32(%rbp), %rdi
	movslq	Alphabet_size, %rdx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB143_28
# %bb.27:
	jmp	.LBB143_152
.LBB143_28:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_30
# %bb.29:
	jmp	.LBB143_152
.LBB143_30:
	movq	-32(%rbp), %rdi
	movl	$.L.str.21.285, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB143_32
# %bb.31:
	movq	-24(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, 456(%rax)
.LBB143_32:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_34
# %bb.33:
	jmp	.LBB143_152
.LBB143_34:
	movq	-32(%rbp), %rdi
	movl	$.L.str.21.285, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB143_36
# %bb.35:
	movq	-24(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$8, %ecx
	movl	%ecx, 456(%rax)
.LBB143_36:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_38
# %bb.37:
	jmp	.LBB143_152
.LBB143_38:
	movq	-32(%rbp), %rdi
	movl	$.L.str.83, %esi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB143_40
# %bb.39:
	jmp	.LBB143_152
.LBB143_40:
	movl	$0, -36(%rbp)
.LBB143_41:                             # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB143_46
# %bb.42:                               #   in Loop: Header=BB143_41 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_44
# %bb.43:
	jmp	.LBB143_152
.LBB143_44:                             #   in Loop: Header=BB143_41 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	%xmm0, 224(%rax,%rcx,4)
# %bb.45:                               #   in Loop: Header=BB143_41 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB143_41
.LBB143_46:
	movsd	.LCPI143_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI143_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	Alphabet_type, %eax
	cmpl	$3, %eax
	je	.LBB143_48
# %bb.47:
	movaps	%xmm1, %xmm0
.LBB143_48:
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movss	%xmm0, 304(%rax)
	movq	-80(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB143_50
# %bb.49:
	jmp	.LBB143_152
.LBB143_50:
	cmpl	$1, -60(%rbp)
	jge	.LBB143_52
# %bb.51:
	jmp	.LBB143_152
.LBB143_52:
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.LBB143_54
# %bb.53:
	jmp	.LBB143_152
.LBB143_54:
	cmpl	$0, Alphabet_type
	jne	.LBB143_56
# %bb.55:
	jmp	.LBB143_152
.LBB143_56:
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	callq	AllocPlan7Body
	movq	-24(%rbp), %rdi
	callq	ZeroPlan7
	movq	-24(%rbp), %rdi
	callq	Plan7LSConfig
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_58
# %bb.57:
	jmp	.LBB143_152
.LBB143_58:
	movl	$0, -36(%rbp)
.LBB143_59:                             # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB143_64
# %bb.60:                               #   in Loop: Header=BB143_59 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_62
# %bb.61:
	jmp	.LBB143_152
.LBB143_62:                             #   in Loop: Header=BB143_59 Depth=1
	jmp	.LBB143_63
.LBB143_63:                             #   in Loop: Header=BB143_59 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB143_59
.LBB143_64:
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_66
# %bb.65:
	jmp	.LBB143_152
.LBB143_66:
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_68
# %bb.67:
	jmp	.LBB143_152
.LBB143_68:
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movss	%xmm0, 168(%rax)
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	movss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	movss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	addss	168(%rax), %xmm1
	divss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-24(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	movss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	addss	168(%rax), %xmm1
	divss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movss	%xmm0, 168(%rax)
	movl	$0, -36(%rbp)
.LBB143_69:                             # =>This Inner Loop Header: Depth=1
	cmpl	$7, -36(%rbp)
	jge	.LBB143_74
# %bb.70:                               #   in Loop: Header=BB143_69 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_72
# %bb.71:
	jmp	.LBB143_152
.LBB143_72:                             #   in Loop: Header=BB143_69 Depth=1
	jmp	.LBB143_73
.LBB143_73:                             #   in Loop: Header=BB143_69 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB143_69
.LBB143_74:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_76
# %bb.75:
	jmp	.LBB143_152
.LBB143_76:
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_78
# %bb.77:
	jmp	.LBB143_152
.LBB143_78:
	movl	$1, -12(%rbp)
.LBB143_79:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_83 Depth 2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB143_136
# %bb.80:                               #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_82
# %bb.81:
	jmp	.LBB143_152
.LBB143_82:                             #   in Loop: Header=BB143_79 Depth=1
	movl	$0, -36(%rbp)
.LBB143_83:                             #   Parent Loop BB143_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB143_88
# %bb.84:                               #   in Loop: Header=BB143_83 Depth=2
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_86
# %bb.85:
	jmp	.LBB143_152
.LBB143_86:                             #   in Loop: Header=BB143_83 Depth=2
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.87:                               #   in Loop: Header=BB143_83 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB143_83
.LBB143_88:                             #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_90
# %bb.89:
	jmp	.LBB143_152
.LBB143_90:                             #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_92
# %bb.91:                               #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, (%rax)
.LBB143_92:                             #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_94
# %bb.93:
	jmp	.LBB143_152
.LBB143_94:                             #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_99
# %bb.95:                               #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jne	.LBB143_97
# %bb.96:                               #   in Loop: Header=BB143_79 Depth=1
	xorps	%xmm0, %xmm0
	jmp	.LBB143_98
.LBB143_97:                             #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	cvtss2sd	%xmm0, %xmm0
.LBB143_98:                             #   in Loop: Header=BB143_79 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 8(%rax)
.LBB143_99:                             #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_101
# %bb.100:
	jmp	.LBB143_152
.LBB143_101:                            #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_103
# %bb.102:                              #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 4(%rax)
.LBB143_103:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_105
# %bb.104:
	jmp	.LBB143_152
.LBB143_105:                            #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_107
# %bb.106:                              #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 20(%rax)
.LBB143_107:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_109
# %bb.108:
	jmp	.LBB143_152
.LBB143_109:                            #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_114
# %bb.110:                              #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jne	.LBB143_112
# %bb.111:                              #   in Loop: Header=BB143_79 Depth=1
	xorps	%xmm0, %xmm0
	jmp	.LBB143_113
.LBB143_112:                            #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	cvtss2sd	%xmm0, %xmm0
.LBB143_113:                            #   in Loop: Header=BB143_79 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 24(%rax)
.LBB143_114:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_116
# %bb.115:
	jmp	.LBB143_152
.LBB143_116:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_118
# %bb.117:
	jmp	.LBB143_152
.LBB143_118:                            #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_120
# %bb.119:                              #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 12(%rax)
.LBB143_120:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_122
# %bb.121:
	jmp	.LBB143_152
.LBB143_122:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_124
# %bb.123:
	jmp	.LBB143_152
.LBB143_124:                            #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_126
# %bb.125:                              #   in Loop: Header=BB143_79 Depth=1
	movss	.LCPI143_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rdi
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 16(%rax)
.LBB143_126:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_128
# %bb.127:
	jmp	.LBB143_152
.LBB143_128:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-24(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB143_130
# %bb.129:                              #   in Loop: Header=BB143_79 Depth=1
	movq	-32(%rbp), %rax
	movb	(%rax), %al
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB143_130:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_132
# %bb.131:
	jmp	.LBB143_152
.LBB143_132:                            #   in Loop: Header=BB143_79 Depth=1
	movq	-24(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB143_134
# %bb.133:                              #   in Loop: Header=BB143_79 Depth=1
	movq	-32(%rbp), %rax
	movb	(%rax), %al
	movq	-24(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB143_134:                            #   in Loop: Header=BB143_79 Depth=1
	jmp	.LBB143_135
.LBB143_135:                            #   in Loop: Header=BB143_79 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_79
.LBB143_136:
	movl	$0, -12(%rbp)
.LBB143_137:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_141 Depth 2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB143_151
# %bb.138:                              #   in Loop: Header=BB143_137 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_140
# %bb.139:
	jmp	.LBB143_152
.LBB143_140:                            #   in Loop: Header=BB143_137 Depth=1
	movl	$0, -36(%rbp)
.LBB143_141:                            #   Parent Loop BB143_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB143_149
# %bb.142:                              #   in Loop: Header=BB143_141 Depth=2
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB143_144
# %bb.143:
	jmp	.LBB143_152
.LBB143_144:                            #   in Loop: Header=BB143_141 Depth=2
	cmpl	$0, -12(%rbp)
	jle	.LBB143_147
# %bb.145:                              #   in Loop: Header=BB143_141 Depth=2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB143_147
# %bb.146:                              #   in Loop: Header=BB143_141 Depth=2
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	callq	ascii2prob
	movq	-24(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB143_147:                            #   in Loop: Header=BB143_141 Depth=2
	jmp	.LBB143_148
.LBB143_148:                            #   in Loop: Header=BB143_141 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB143_141
.LBB143_149:                            #   in Loop: Header=BB143_137 Depth=1
	jmp	.LBB143_150
.LBB143_150:                            #   in Loop: Header=BB143_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_137
.LBB143_151:
	movq	-24(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$32, %ecx
	movl	%ecx, 456(%rax)
	movq	-24(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	movq	-24(%rbp), %rdi
	callq	Plan7Renormalize
	movabsq	$.L.str.84, %rdi
	callq	Strdup
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rdi
	callq	Plan7SetCtime
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -56(%rbp)
	jmp	.LBB143_155
.LBB143_152:
	cmpq	$0, -24(%rbp)
	je	.LBB143_154
# %bb.153:
	movq	-24(%rbp), %rdi
	callq	FreePlan7
.LBB143_154:
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -56(%rbp)
.LBB143_155:
	movl	-56(%rbp), %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end143:
	.size	read_asc19hmm, .Lfunc_end143-read_asc19hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_asc17hmm
	.type	read_asc17hmm,@function
read_asc17hmm:                          # @read_asc17hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$560, %rsp              # imm = 0x230
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB144_2
# %bb.1:
	leaq	-560(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB144_3
.LBB144_2:
	movl	$0, -4(%rbp)
	jmp	.LBB144_6
.LBB144_3:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movl	$6, %esi
	callq	read_plan9_aschmm
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB144_5
# %bb.4:
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB144_6
.LBB144_5:
	leaq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	Plan9toPlan7
	movabsq	$.L.str.84, %rdi
	callq	Strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rdi
	callq	Plan7SetCtime
	movq	-24(%rbp), %rdi
	callq	P9FreeHMM
	movq	-16(%rbp), %rdi
	callq	Plan7Renormalize
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB144_6:
	movl	-4(%rbp), %eax
	addq	$560, %rsp              # imm = 0x230
	popq	%rbp
	retq
.Lfunc_end144:
	.size	read_asc17hmm, .Lfunc_end144-read_asc17hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_asc11hmm
	.type	read_asc11hmm,@function
read_asc11hmm:                          # @read_asc11hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.90.284, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	Die
	movl	$1, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end145:
	.size	read_asc11hmm, .Lfunc_end145-read_asc11hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_asc10hmm
	.type	read_asc10hmm,@function
read_asc10hmm:                          # @read_asc10hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.91, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	Die
	movl	$1, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end146:
	.size	read_asc10hmm, .Lfunc_end146-read_asc10hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_plan9_aschmm
	.type	read_plan9_aschmm,@function
read_plan9_aschmm:                      # @read_plan9_aschmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$600, %rsp              # imm = 0x258
	.cfi_offset %rbx, -24
	leaq	-608(%rbp), %rax
	movq	%rdi, -48(%rbp)
	movl	%esi, -60(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rax, %rdi
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_2
# %bb.1:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_2:
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_4
# %bb.3:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_4:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB147_6
# %bb.5:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_6:
	movq	-32(%rbp), %rdi
	callq	atoi
	leaq	-608(%rbp), %rdi
	movl	%eax, -84(%rbp)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_8
# %bb.7:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_8:
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_10
# %bb.9:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_10:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB147_12
# %bb.11:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_12:
	movq	-32(%rbp), %rdi
	callq	atoi
	movl	%eax, -68(%rbp)
	cmpl	$4, -68(%rbp)
	jne	.LBB147_14
# %bb.13:
	movl	$2, -64(%rbp)
	jmp	.LBB147_18
.LBB147_14:
	cmpl	$20, -68(%rbp)
	jne	.LBB147_16
# %bb.15:
	movl	$3, -64(%rbp)
	jmp	.LBB147_17
.LBB147_16:
	movabsq	$.L.str.85, %rdi
	movl	-68(%rbp), %esi
	movb	$0, %al
	callq	Die
.LBB147_17:
	jmp	.LBB147_18
.LBB147_18:
	cmpl	$0, Alphabet_type
	jne	.LBB147_20
# %bb.19:
	movl	-64(%rbp), %edi
	callq	SetAlphabet
	jmp	.LBB147_23
.LBB147_20:
	movl	-64(%rbp), %eax
	cmpl	Alphabet_type, %eax
	je	.LBB147_22
# %bb.21:
	movl	Alphabet_type, %edi
	callq	AlphabetType2String
	movq	%rax, %rbx
	movl	-64(%rbp), %edi
	callq	AlphabetType2String
	movabsq	$.L.str.65, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB147_22:
	jmp	.LBB147_23
.LBB147_23:
	movl	-84(%rbp), %edi
	callq	P9AllocHMM
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_25
# %bb.24:
	movabsq	$.L.str.86, %rdi
	movb	$0, %al
	callq	Die
.LBB147_25:
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_27
# %bb.26:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_27:
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_29
# %bb.28:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_29:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB147_31
# %bb.30:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_31:
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_33
# %bb.32:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_33:
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_35
# %bb.34:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_35:
	cmpl	$2, -60(%rbp)
	jne	.LBB147_43
# %bb.36:
	movl	$0, -12(%rbp)
.LBB147_37:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB147_42
# %bb.38:                               #   in Loop: Header=BB147_37 Depth=1
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_40
# %bb.39:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_40:                             #   in Loop: Header=BB147_37 Depth=1
	jmp	.LBB147_41
.LBB147_41:                             #   in Loop: Header=BB147_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_37
.LBB147_42:
	jmp	.LBB147_43
.LBB147_43:
	cmpl	$6, -60(%rbp)
	jne	.LBB147_53
# %bb.44:
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_46
# %bb.45:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_46:
	movabsq	$.L.str.21.285, %rsi
	leaq	-608(%rbp), %rdi
	movl	$3, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB147_48
# %bb.47:
	movq	-56(%rbp), %rax
	movl	144(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 144(%rax)
.LBB147_48:
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_50
# %bb.49:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_50:
	movabsq	$.L.str.21.285, %rsi
	leaq	-608(%rbp), %rdi
	movl	$3, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB147_52
# %bb.51:
	movq	-56(%rbp), %rax
	movl	144(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 144(%rax)
.LBB147_52:
	jmp	.LBB147_53
.LBB147_53:
	jmp	.LBB147_54
.LBB147_54:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_67 Depth 2
                                        #     Child Loop BB147_74 Depth 2
                                        #     Child Loop BB147_94 Depth 2
                                        #     Child Loop BB147_103 Depth 2
                                        #     Child Loop BB147_124 Depth 2
                                        #     Child Loop BB147_133 Depth 2
                                        #     Child Loop BB147_155 Depth 2
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	je	.LBB147_166
# %bb.55:                               #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -80(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_57
# %bb.56:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_57:                             #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_59
# %bb.58:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_59:                             #   in Loop: Header=BB147_54 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB147_61
# %bb.60:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_61:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atoi
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jl	.LBB147_63
# %bb.62:                               #   in Loop: Header=BB147_54 Depth=1
	movl	-36(%rbp), %eax
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB147_64
.LBB147_63:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_64:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-80(%rbp), %rdi
	movl	$.L.str.87, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB147_110
# %bb.65:                               #   in Loop: Header=BB147_54 Depth=1
	cmpl	$6, -60(%rbp)
	jne	.LBB147_81
# %bb.66:                               #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.34.286, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -32(%rbp)
.LBB147_67:                             #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$40, %ecx
	je	.LBB147_69
# %bb.68:                               #   in Loop: Header=BB147_67 Depth=2
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	setne	%al
.LBB147_69:                             #   in Loop: Header=BB147_67 Depth=2
	testb	$1, %al
	jne	.LBB147_70
	jmp	.LBB147_71
.LBB147_70:                             #   in Loop: Header=BB147_67 Depth=2
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB147_67
.LBB147_71:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$40, %eax
	je	.LBB147_73
# %bb.72:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_73:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rax
	movb	1(%rax), %al
	movq	-56(%rbp), %rcx
	movq	120(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB147_74:                             #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$40, %ecx
	je	.LBB147_76
# %bb.75:                               #   in Loop: Header=BB147_74 Depth=2
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	setne	%al
.LBB147_76:                             #   in Loop: Header=BB147_74 Depth=2
	testb	$1, %al
	jne	.LBB147_77
	jmp	.LBB147_78
.LBB147_77:                             #   in Loop: Header=BB147_74 Depth=2
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB147_74
.LBB147_78:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$40, %eax
	je	.LBB147_80
# %bb.79:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_80:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rax
	movb	1(%rax), %al
	movq	-56(%rbp), %rcx
	movq	128(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB147_81:                             #   in Loop: Header=BB147_54 Depth=1
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_83
# %bb.82:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_83:                             #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_85
# %bb.84:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_85:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	leaq	-608(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, (%rax)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_87
# %bb.86:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_87:                             #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_89
# %bb.88:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_89:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	leaq	-608(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 8(%rax)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_91
# %bb.90:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_91:                             #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_93
# %bb.92:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_93:                             #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 4(%rax)
	movl	$0, -12(%rbp)
.LBB147_94:                             #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB147_101
# %bb.95:                               #   in Loop: Header=BB147_94 Depth=2
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_97
# %bb.96:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_97:                             #   in Loop: Header=BB147_94 Depth=2
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_99
# %bb.98:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_99:                             #   in Loop: Header=BB147_94 Depth=2
	movq	-32(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, 12(%rax,%rcx,4)
# %bb.100:                              #   in Loop: Header=BB147_94 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_94
.LBB147_101:                            #   in Loop: Header=BB147_54 Depth=1
	cmpl	$2, -60(%rbp)
	jne	.LBB147_109
# %bb.102:                              #   in Loop: Header=BB147_54 Depth=1
	movl	$0, -12(%rbp)
.LBB147_103:                            #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	Alphabet_size, %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB147_108
# %bb.104:                              #   in Loop: Header=BB147_103 Depth=2
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_106
# %bb.105:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_106:                            #   in Loop: Header=BB147_103 Depth=2
	jmp	.LBB147_107
.LBB147_107:                            #   in Loop: Header=BB147_103 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_103
.LBB147_108:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_109
.LBB147_109:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_165
.LBB147_110:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-80(%rbp), %rdi
	movl	$.L.str.88, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB147_140
# %bb.111:                              #   in Loop: Header=BB147_54 Depth=1
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_113
# %bb.112:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_113:                            #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_115
# %bb.114:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_115:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	leaq	-608(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, (%rax)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_117
# %bb.116:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_117:                            #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_119
# %bb.118:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_119:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	leaq	-608(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 8(%rax)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_121
# %bb.120:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_121:                            #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_123
# %bb.122:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_123:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 4(%rax)
	movl	$0, -12(%rbp)
.LBB147_124:                            #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB147_131
# %bb.125:                              #   in Loop: Header=BB147_124 Depth=2
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_127
# %bb.126:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_127:                            #   in Loop: Header=BB147_124 Depth=2
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_129
# %bb.128:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_129:                            #   in Loop: Header=BB147_124 Depth=2
	movq	-32(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, 12(%rax,%rcx,4)
# %bb.130:                              #   in Loop: Header=BB147_124 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_124
.LBB147_131:                            #   in Loop: Header=BB147_54 Depth=1
	cmpl	$2, -60(%rbp)
	jne	.LBB147_139
# %bb.132:                              #   in Loop: Header=BB147_54 Depth=1
	movl	$0, -12(%rbp)
.LBB147_133:                            #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	Alphabet_size, %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB147_138
# %bb.134:                              #   in Loop: Header=BB147_133 Depth=2
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_136
# %bb.135:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_136:                            #   in Loop: Header=BB147_133 Depth=2
	jmp	.LBB147_137
.LBB147_137:                            #   in Loop: Header=BB147_133 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_133
.LBB147_138:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_139
.LBB147_139:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_164
.LBB147_140:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-80(%rbp), %rdi
	movl	$.L.str.89, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB147_162
# %bb.141:                              #   in Loop: Header=BB147_54 Depth=1
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_143
# %bb.142:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_143:                            #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_145
# %bb.144:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_145:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	leaq	-608(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, (%rax)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_147
# %bb.146:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_147:                            #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_149
# %bb.148:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_149:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	leaq	-608(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 8(%rax)
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_151
# %bb.150:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_151:                            #   in Loop: Header=BB147_54 Depth=1
	movabsq	$.L.str.72, %rsi
	leaq	-608(%rbp), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB147_153
# %bb.152:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_153:                            #   in Loop: Header=BB147_54 Depth=1
	movq	-32(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-36(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 4(%rax)
	cmpl	$2, -60(%rbp)
	jne	.LBB147_161
# %bb.154:                              #   in Loop: Header=BB147_54 Depth=1
	movl	$0, -12(%rbp)
.LBB147_155:                            #   Parent Loop BB147_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -12(%rbp)
	jge	.LBB147_160
# %bb.156:                              #   in Loop: Header=BB147_155 Depth=2
	leaq	-608(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB147_158
# %bb.157:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_158:                            #   in Loop: Header=BB147_155 Depth=2
	jmp	.LBB147_159
.LBB147_159:                            #   in Loop: Header=BB147_155 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_155
.LBB147_160:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_161
.LBB147_161:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_163
.LBB147_162:
	movq	$0, -24(%rbp)
	jmp	.LBB147_167
.LBB147_163:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_164
.LBB147_164:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_165
.LBB147_165:                            #   in Loop: Header=BB147_54 Depth=1
	jmp	.LBB147_54
.LBB147_166:
	movq	-56(%rbp), %rdi
	addq	$32, %rdi
	callq	P9DefaultNullModel
	movq	-56(%rbp), %rdi
	callq	P9Renormalize
	movq	-56(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB147_167:
	movq	-24(%rbp), %rax
	addq	$600, %rsp              # imm = 0x258
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end147:
	.size	read_plan9_aschmm, .Lfunc_end147-read_plan9_aschmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ascii2prob
	.type	ascii2prob,@function
ascii2prob:                             # @ascii2prob
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movss	%xmm0, -4(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$42, %eax
	jne	.LBB148_2
# %bb.1:
	xorps	%xmm0, %xmm0
	jmp	.LBB148_3
.LBB148_2:
	movq	-16(%rbp), %rdi
	callq	atoi
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	%eax, %edi
	callq	Score2Prob
	cvtss2sd	%xmm0, %xmm0
.LBB148_3:
	cvtsd2ss	%xmm0, %xmm0
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end148:
	.size	ascii2prob, .Lfunc_end148-ascii2prob
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_plan9_binhmm
	.type	read_plan9_binhmm,@function
read_plan9_binhmm:                      # @read_plan9_binhmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	leaq	-72(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -56(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rax, %rdi
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_2
# %bb.1:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_2:
	leaq	-64(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_4
# %bb.3:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_4:
	cmpl	$0, -56(%rbp)
	je	.LBB149_6
# %bb.5:
	leaq	-72(%rbp), %rdi
	movl	$4, %esi
	callq	byteswap
	leaq	-64(%rbp), %rdi
	movl	$4, %esi
	callq	byteswap
.LBB149_6:
	cmpl	$4, -64(%rbp)
	jne	.LBB149_8
# %bb.7:
	movl	$2, -60(%rbp)
	jmp	.LBB149_12
.LBB149_8:
	cmpl	$20, -64(%rbp)
	jne	.LBB149_10
# %bb.9:
	movl	$3, -60(%rbp)
	jmp	.LBB149_11
.LBB149_10:
	movabsq	$.L.str.85, %rdi
	movl	-64(%rbp), %esi
	movb	$0, %al
	callq	Die
.LBB149_11:
	jmp	.LBB149_12
.LBB149_12:
	cmpl	$0, Alphabet_type
	jne	.LBB149_14
# %bb.13:
	movl	-60(%rbp), %edi
	callq	SetAlphabet
	jmp	.LBB149_17
.LBB149_14:
	movl	-60(%rbp), %eax
	cmpl	Alphabet_type, %eax
	je	.LBB149_16
# %bb.15:
	movl	Alphabet_type, %edi
	callq	AlphabetType2String
	movq	%rax, %rbx
	movl	-60(%rbp), %edi
	callq	AlphabetType2String
	movabsq	$.L.str.65, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB149_16:
	jmp	.LBB149_17
.LBB149_17:
	movl	-72(%rbp), %edi
	callq	P9AllocHMM
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB149_19
# %bb.18:
	movabsq	$.L.str.86, %rdi
	movb	$0, %al
	callq	Die
.LBB149_19:
	cmpl	$7, -52(%rbp)
	jne	.LBB149_27
# %bb.20:
	leaq	-68(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_22
# %bb.21:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_22:
	cmpl	$0, -56(%rbp)
	je	.LBB149_24
# %bb.23:
	leaq	-68(%rbp), %rdi
	movl	$4, %esi
	callq	byteswap
.LBB149_24:
	movabsq	$.L.str.271, %rdi
	movq	-24(%rbp), %rax
	movq	112(%rax), %rdx
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$0, %rcx
	movl	$1475, %esi             # imm = 0x5C3
	callq	sre_realloc
	movq	-24(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-24(%rbp), %rax
	movq	112(%rax), %rdi
	movslq	-68(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_26
# %bb.25:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_26:
	movq	-24(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-68(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB149_27:
	leaq	-60(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_29
# %bb.28:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_29:
	leaq	-96(%rbp), %rdi
	movslq	Alphabet_size, %rdx
	movq	-40(%rbp), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_31
# %bb.30:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_31:
	cmpl	$1, -52(%rbp)
	jne	.LBB149_33
# %bb.32:
	movq	-40(%rbp), %rdi
	movslq	Alphabet_size, %rsi
	shlq	$2, %rsi
	movl	$1, %edx
	callq	fseek
.LBB149_33:
	cmpl	$5, -52(%rbp)
	je	.LBB149_35
# %bb.34:
	cmpl	$7, -52(%rbp)
	jne	.LBB149_46
.LBB149_35:
	movq	-24(%rbp), %rdi
	addq	$144, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_37
# %bb.36:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_37:
	cmpl	$0, -56(%rbp)
	je	.LBB149_39
# %bb.38:
	movq	-24(%rbp), %rdi
	addq	$144, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB149_39:
	movq	-24(%rbp), %rax
	movl	144(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB149_42
# %bb.40:
	movq	-24(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_42
# %bb.41:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_42:
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movl	144(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB149_45
# %bb.43:
	movq	-24(%rbp), %rax
	movq	128(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_45
# %bb.44:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_45:
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
.LBB149_46:
	cmpl	$7, -52(%rbp)
	jne	.LBB149_56
# %bb.47:
	movq	-24(%rbp), %rdi
	addq	$32, %rdi
	movslq	Alphabet_size, %rdx
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_49
# %bb.48:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_49:
	cmpl	$0, -56(%rbp)
	je	.LBB149_55
# %bb.50:
	movl	$0, -28(%rbp)
.LBB149_51:                             # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB149_54
# %bb.52:                               #   in Loop: Header=BB149_51 Depth=1
	movq	-24(%rbp), %rdi
	addq	$32, %rdi
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.53:                               #   in Loop: Header=BB149_51 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB149_51
.LBB149_54:
	jmp	.LBB149_55
.LBB149_55:
	jmp	.LBB149_57
.LBB149_56:
	movq	-24(%rbp), %rdi
	addq	$32, %rdi
	callq	P9DefaultNullModel
.LBB149_57:
	movl	$0, -12(%rbp)
.LBB149_58:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_69 Depth 2
                                        #     Child Loop BB149_95 Depth 2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jg	.LBB149_103
# %bb.59:                               #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_61
# %bb.60:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_61:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$8, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_63
# %bb.62:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_63:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$4, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_65
# %bb.64:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_65:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$12, %rdi
	movslq	Alphabet_size, %rdx
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_67
# %bb.66:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_67:                             #   in Loop: Header=BB149_58 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB149_73
# %bb.68:                               #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$8, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$4, %rdi
	movl	$4, %esi
	callq	byteswap
	movl	$0, -28(%rbp)
.LBB149_69:                             #   Parent Loop BB149_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB149_72
# %bb.70:                               #   in Loop: Header=BB149_69 Depth=2
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$12, %rdi
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.71:                               #   in Loop: Header=BB149_69 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB149_69
.LBB149_72:                             #   in Loop: Header=BB149_58 Depth=1
	jmp	.LBB149_73
.LBB149_73:                             #   in Loop: Header=BB149_58 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB149_75
# %bb.74:                               #   in Loop: Header=BB149_58 Depth=1
	movq	-40(%rbp), %rdi
	movl	Alphabet_size, %eax
	addl	$3, %eax
	movslq	%eax, %rsi
	shlq	$2, %rsi
	movl	$1, %edx
	callq	fseek
.LBB149_75:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_77
# %bb.76:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_77:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$8, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_79
# %bb.78:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_79:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$4, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_81
# %bb.80:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_81:                             #   in Loop: Header=BB149_58 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB149_83
# %bb.82:                               #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$8, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$4, %rdi
	movl	$4, %esi
	callq	byteswap
.LBB149_83:                             #   in Loop: Header=BB149_58 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB149_85
# %bb.84:                               #   in Loop: Header=BB149_58 Depth=1
	movq	-40(%rbp), %rdi
	movl	$12, %esi
	movl	$1, %edx
	callq	fseek
.LBB149_85:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_87
# %bb.86:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_87:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$8, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_89
# %bb.88:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_89:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$4, %rdi
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_91
# %bb.90:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_91:                             #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$12, %rdi
	movslq	Alphabet_size, %rdx
	movq	-40(%rbp), %rcx
	movl	$4, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB149_93
# %bb.92:
	movq	$0, -48(%rbp)
	jmp	.LBB149_104
.LBB149_93:                             #   in Loop: Header=BB149_58 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB149_99
# %bb.94:                               #   in Loop: Header=BB149_58 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$8, %rdi
	movl	$4, %esi
	callq	byteswap
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$4, %rdi
	movl	$4, %esi
	callq	byteswap
	movl	$0, -28(%rbp)
.LBB149_95:                             #   Parent Loop BB149_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB149_98
# %bb.96:                               #   in Loop: Header=BB149_95 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$12, %rdi
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movl	$4, %esi
	callq	byteswap
# %bb.97:                               #   in Loop: Header=BB149_95 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB149_95
.LBB149_98:                             #   in Loop: Header=BB149_58 Depth=1
	jmp	.LBB149_99
.LBB149_99:                             #   in Loop: Header=BB149_58 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB149_101
# %bb.100:                              #   in Loop: Header=BB149_58 Depth=1
	movq	-40(%rbp), %rdi
	movl	Alphabet_size, %eax
	addl	$3, %eax
	movslq	%eax, %rsi
	shlq	$2, %rsi
	movl	$1, %edx
	callq	fseek
.LBB149_101:                            #   in Loop: Header=BB149_58 Depth=1
	jmp	.LBB149_102
.LBB149_102:                            #   in Loop: Header=BB149_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_58
.LBB149_103:
	movq	-24(%rbp), %rdi
	callq	P9Renormalize
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB149_104:
	movq	-48(%rbp), %rax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end149:
	.size	read_plan9_binhmm, .Lfunc_end149-read_plan9_binhmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function byteswap
	.type	byteswap,@function
byteswap:                               # @byteswap
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB150_1:                              # =>This Inner Loop Header: Depth=1
	movl	$2, %ecx
	movl	-4(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	%eax, %esi
	jge	.LBB150_4
# %bb.2:                                #   in Loop: Header=BB150_1 Depth=1
	movq	-24(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -5(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movb	-5(%rbp), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.3:                                #   in Loop: Header=BB150_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_1
.LBB150_4:
	popq	%rbp
	retq
.Lfunc_end150:
	.size	byteswap, .Lfunc_end150-byteswap
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_bin_string
	.type	read_bin_string,@function
read_bin_string:                        # @read_bin_string
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-4(%rbp), %rax
	movq	%rdi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$0, %rax
	jne	.LBB151_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB151_7
.LBB151_2:
	cmpl	$0, -20(%rbp)
	je	.LBB151_4
# %bb.3:
	leaq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	byteswap
.LBB151_4:
	movabsq	$.L.str.271, %rdi
	movslq	-4(%rbp), %rdx
	shlq	$0, %rdx
	movl	$1370, %esi             # imm = 0x55A
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fread
	cmpq	$0, %rax
	jne	.LBB151_6
# %bb.5:
	movq	-16(%rbp), %rdi
	callq	free
	movl	$0, -8(%rbp)
	jmp	.LBB151_7
.LBB151_6:
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -8(%rbp)
.LBB151_7:
	movl	-8(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end151:
	.size	read_bin_string, .Lfunc_end151-read_bin_string
	.cfi_endproc
                                        # -- End function
	.globl	HMMFileRead             # -- Begin function HMMFileRead
	.p2align	4, 0x90
	.type	HMMFileRead,@function
HMMFileRead:                            # @HMMFileRead
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 32(%rax)
	je	.LBB152_4
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	36(%rax), %esi
	movq	-8(%rbp), %rdx
	addq	$40, %rdx
	callq	SSIGetFilePosition
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB152_3
# %bb.2:
	movabsq	$.L.str.4.275, %rdi
	movb	$0, %al
	callq	Die
.LBB152_3:
	jmp	.LBB152_4
.LBB152_4:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end152:
	.size	HMMFileRead, .Lfunc_end152-HMMFileRead
	.cfi_endproc
                                        # -- End function
	.globl	HMMFileRewind           # -- Begin function HMMFileRewind
	.p2align	4, 0x90
	.type	HMMFileRewind,@function
HMMFileRewind:                          # @HMMFileRewind
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	rewind
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end153:
	.size	HMMFileRewind, .Lfunc_end153-HMMFileRewind
	.cfi_endproc
                                        # -- End function
	.globl	HMMFilePositionByName   # -- Begin function HMMFilePositionByName
	.p2align	4, 0x90
	.type	HMMFilePositionByName,@function
HMMFilePositionByName:                  # @HMMFilePositionByName
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB154_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB154_7
.LBB154_2:
	leaq	-28(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	SSIGetOffsetByName
	cmpl	$0, %eax
	je	.LBB154_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB154_7
.LBB154_4:
	leaq	-48(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	SSISetFilePosition
	cmpl	$0, %eax
	je	.LBB154_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB154_7
.LBB154_6:
	movl	$1, -4(%rbp)
.LBB154_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end154:
	.size	HMMFilePositionByName, .Lfunc_end154-HMMFilePositionByName
	.cfi_endproc
                                        # -- End function
	.globl	HMMFilePositionByIndex  # -- Begin function HMMFilePositionByIndex
	.p2align	4, 0x90
	.type	HMMFilePositionByIndex,@function
HMMFilePositionByIndex:                 # @HMMFilePositionByIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB155_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB155_7
.LBB155_2:
	leaq	-24(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movl	-20(%rbp), %esi
	callq	SSIGetOffsetByNumber
	cmpl	$0, %eax
	je	.LBB155_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB155_7
.LBB155_4:
	leaq	-40(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	SSISetFilePosition
	cmpl	$0, %eax
	je	.LBB155_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB155_7
.LBB155_6:
	movl	$1, -4(%rbp)
.LBB155_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end155:
	.size	HMMFilePositionByIndex, .Lfunc_end155-HMMFilePositionByIndex
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function WriteAscHMM
.LCPI156_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI156_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	WriteAscHMM
	.p2align	4, 0x90
	.type	WriteAscHMM,@function
WriteAscHMM:                            # @WriteAscHMM
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$80, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$.L.str.11.294, %rax
	movabsq	$.L.str.12.295, %rdx
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.13.296, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movb	$0, %al
	callq	fprintf
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB156_2
# %bb.1:
	movabsq	$.L.str.14.297, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB156_2:
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB156_4
# %bb.3:
	movabsq	$.L.str.15.298, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB156_4:
	movabsq	$.L.str.16.299, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	136(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.17.302, %rsi
	movabsq	$.L.str.19.301, %rdx
	movabsq	$.L.str.18.300, %rax
	movq	-40(%rbp), %rdi
	movl	Alphabet_type, %ecx
	cmpl	$3, %ecx
	cmoveq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.20.304, %rsi
	movabsq	$.L.str.22.303, %rdx
	movabsq	$.L.str.21.285, %rax
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	456(%rcx), %ecx
	andl	$4, %ecx
	cmpl	$0, %ecx
	cmovneq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.23.305, %rsi
	movabsq	$.L.str.22.303, %rdx
	movabsq	$.L.str.21.285, %rax
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	456(%rcx), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	cmovneq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.24.306, %rsi
	movabsq	$.L.str.22.303, %rdx
	movabsq	$.L.str.21.285, %rax
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	456(%rcx), %ecx
	andl	$256, %ecx              # imm = 0x100
	cmpl	$0, %ecx
	cmovneq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.25.307, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	48(%rax), %rdx
	callq	multiline
	movabsq	$.L.str.26.308, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	56(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.27.309, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	64(%rax), %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.28.310, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	80(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB156_6
# %bb.5:
	movabsq	$.L.str.29.311, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movss	112(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-32(%rbp), %rax
	movss	116(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
.LBB156_6:
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB156_8
# %bb.7:
	movabsq	$.L.str.30.312, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movss	120(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-32(%rbp), %rax
	movss	124(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
.LBB156_8:
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4096, %eax             # imm = 0x1000
	cmpl	$0, %eax
	je	.LBB156_10
# %bb.9:
	movabsq	$.L.str.31.313, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movss	128(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-32(%rbp), %rax
	movss	132(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
.LBB156_10:
	movabsq	$.L.str.32.314, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movl	$0, -44(%rbp)
.LBB156_11:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_13 Depth 2
	cmpl	$4, -44(%rbp)
	jge	.LBB156_18
# %bb.12:                               #   in Loop: Header=BB156_11 Depth=1
	movl	$0, -20(%rbp)
.LBB156_13:                             #   Parent Loop BB156_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -20(%rbp)
	jge	.LBB156_16
# %bb.14:                               #   in Loop: Header=BB156_13 Depth=2
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	addq	$172, %rax
	movslq	-44(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	prob2ascii
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
# %bb.15:                               #   in Loop: Header=BB156_13 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB156_13
.LBB156_16:                             #   in Loop: Header=BB156_11 Depth=1
	jmp	.LBB156_17
.LBB156_17:                             #   in Loop: Header=BB156_11 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB156_11
.LBB156_18:
	movabsq	$.L.str.34.286, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movabsq	$.L.str.35.316, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	prob2ascii
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movsd	.LCPI156_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movss	304(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	callq	prob2ascii
	movabsq	$.L.str.36.317, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.37.318, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movl	$0, -20(%rbp)
.LBB156_19:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB156_22
# %bb.20:                               #   in Loop: Header=BB156_19 Depth=1
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movl	Alphabet_size, %eax
	cvtsi2ssl	%eax, %xmm2
	divss	%xmm2, %xmm1
	callq	prob2ascii
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
# %bb.21:                               #   in Loop: Header=BB156_19 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB156_19
.LBB156_22:
	movabsq	$.L.str.34.286, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB156_24
# %bb.23:
	movabsq	$.L.str.38.319, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movss	448(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-32(%rbp), %rax
	movss	452(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
.LBB156_24:
	movabsq	$.L.str.39.320, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -20(%rbp)
.LBB156_25:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB156_28
# %bb.26:                               #   in Loop: Header=BB156_25 Depth=1
	movabsq	$.L.str.40.321, %rsi
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rax
	movsbl	Alphabet(,%rax), %edx
	movb	$0, %al
	callq	fprintf
# %bb.27:                               #   in Loop: Header=BB156_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB156_25
.LBB156_28:
	movabsq	$.L.str.34.286, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.41.322, %rsi
	movabsq	$.L.str.42, %rdx
	movabsq	$.L.str.43, %rcx
	movabsq	$.L.str.44, %r8
	movabsq	$.L.str.45, %r9
	movabsq	$.L.str.46, %rax
	movabsq	$.L.str.47, %rbx
	movabsq	$.L.str.48.323, %r10
	movabsq	$.L.str.49, %r11
	movabsq	$.L.str.50, %r14
	movq	-40(%rbp), %rdi
	movq	%rax, (%rsp)
	movq	%rbx, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	movq	%r14, 32(%rsp)
	movb	$0, %al
	callq	fprintf
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movaps	%xmm1, %xmm0
	subss	168(%rax), %xmm0
	callq	prob2ascii
	movabsq	$.L.str.51, %rsi
	movabsq	$.L.str.52, %rcx
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	prob2ascii
	movabsq	$.L.str.36.317, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movl	$1, -44(%rbp)
.LBB156_29:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_31 Depth 2
                                        #     Child Loop BB156_40 Depth 2
                                        #     Child Loop BB156_50 Depth 2
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB156_58
# %bb.30:                               #   in Loop: Header=BB156_29 Depth=1
	movabsq	$.L.str.53, %rsi
	movq	-40(%rbp), %rdi
	movl	-44(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -20(%rbp)
.LBB156_31:                             #   Parent Loop BB156_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB156_34
# %bb.32:                               #   in Loop: Header=BB156_31 Depth=2
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	callq	prob2ascii
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
# %bb.33:                               #   in Loop: Header=BB156_31 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB156_31
.LBB156_34:                             #   in Loop: Header=BB156_29 Depth=1
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB156_36
# %bb.35:                               #   in Loop: Header=BB156_29 Depth=1
	movabsq	$.L.str.54, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movb	$0, %al
	callq	fprintf
.LBB156_36:                             #   in Loop: Header=BB156_29 Depth=1
	movabsq	$.L.str.34.286, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB156_38
# %bb.37:                               #   in Loop: Header=BB156_29 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-44(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	jmp	.LBB156_39
.LBB156_38:                             #   in Loop: Header=BB156_29 Depth=1
	movl	$45, %edx
	jmp	.LBB156_39
.LBB156_39:                             #   in Loop: Header=BB156_29 Depth=1
	movabsq	$.L.str.55, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$0, -20(%rbp)
.LBB156_40:                             #   Parent Loop BB156_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB156_46
# %bb.41:                               #   in Loop: Header=BB156_40 Depth=2
	movq	-40(%rbp), %rbx
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB156_43
# %bb.42:                               #   in Loop: Header=BB156_40 Depth=2
	movq	-32(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	callq	prob2ascii
	movq	%rax, %rdx
	jmp	.LBB156_44
.LBB156_43:                             #   in Loop: Header=BB156_40 Depth=2
	movabsq	$.L.str.52, %rdx
	jmp	.LBB156_44
.LBB156_44:                             #   in Loop: Header=BB156_40 Depth=2
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movb	$0, %al
	callq	fprintf
# %bb.45:                               #   in Loop: Header=BB156_40 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB156_40
.LBB156_46:                             #   in Loop: Header=BB156_29 Depth=1
	movabsq	$.L.str.34.286, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB156_48
# %bb.47:                               #   in Loop: Header=BB156_29 Depth=1
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-44(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	jmp	.LBB156_49
.LBB156_48:                             #   in Loop: Header=BB156_29 Depth=1
	movl	$45, %edx
	jmp	.LBB156_49
.LBB156_49:                             #   in Loop: Header=BB156_29 Depth=1
	movabsq	$.L.str.55, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$0, -48(%rbp)
.LBB156_50:                             #   Parent Loop BB156_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$7, -48(%rbp)
	jge	.LBB156_56
# %bb.51:                               #   in Loop: Header=BB156_50 Depth=2
	movq	-40(%rbp), %rbx
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB156_53
# %bb.52:                               #   in Loop: Header=BB156_50 Depth=2
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	prob2ascii
	movq	%rax, %rdx
	jmp	.LBB156_54
.LBB156_53:                             #   in Loop: Header=BB156_50 Depth=2
	movabsq	$.L.str.52, %rdx
	jmp	.LBB156_54
.LBB156_54:                             #   in Loop: Header=BB156_50 Depth=2
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movb	$0, %al
	callq	fprintf
# %bb.55:                               #   in Loop: Header=BB156_50 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB156_50
.LBB156_56:                             #   in Loop: Header=BB156_29 Depth=1
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	movslq	-44(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	prob2ascii
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movss	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rbx
	movq	-32(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-44(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	prob2ascii
	movabsq	$.L.str.33.315, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.34.286, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
# %bb.57:                               #   in Loop: Header=BB156_29 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB156_29
.LBB156_58:
	movabsq	$.L.str.56.324, %rdi
	movq	-40(%rbp), %rsi
	callq	fputs
	addq	$80, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end156:
	.size	WriteAscHMM, .Lfunc_end156-WriteAscHMM
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function multiline
	.type	multiline,@function
multiline:                              # @multiline
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB157_2
# %bb.1:
	jmp	.LBB157_6
.LBB157_2:
	movq	-24(%rbp), %rdi
	callq	Strdup
	movabsq	$.L.str.34.286, %rsi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	strtok
	movq	%rax, -8(%rbp)
.LBB157_3:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB157_5
# %bb.4:                                #   in Loop: Header=BB157_3 Depth=1
	movabsq	$.L.str.93, %rsi
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.34.286, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -8(%rbp)
	jmp	.LBB157_3
.LBB157_5:
	movq	-16(%rbp), %rdi
	callq	free
.LBB157_6:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end157:
	.size	multiline, .Lfunc_end157-multiline
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function prob2ascii
	.type	prob2ascii,@function
prob2ascii:                             # @prob2ascii
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorps	%xmm2, %xmm2
	movss	%xmm0, -4(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm2, %xmm0
	jne	.LBB158_2
	jp	.LBB158_2
# %bb.1:
	movabsq	$.L.str.52, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB158_3
.LBB158_2:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movabsq	$prob2ascii.buffer, %rdi
	movabsq	$.L.str.92, %rsi
	movl	%eax, %edx
	movb	$0, %al
	callq	sprintf
	movabsq	$prob2ascii.buffer, %rax
	movq	%rax, -16(%rbp)
.LBB158_3:
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end158:
	.size	prob2ascii, .Lfunc_end158-prob2ascii
	.cfi_endproc
                                        # -- End function
	.globl	WriteBinHMM             # -- Begin function WriteBinHMM
	.p2align	4, 0x90
	.type	WriteBinHMM,@function
WriteBinHMM:                            # @WriteBinHMM
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$v20magic, %rax
	movq	%rdi, -24(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rax, %rdi
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rdi
	addq	$456, %rdi              # imm = 0x1C8
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rsi
	callq	write_bin_string
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB159_2
# %bb.1:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	callq	write_bin_string
.LBB159_2:
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB159_4
# %bb.3:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	16(%rax), %rsi
	callq	write_bin_string
.LBB159_4:
	movq	-8(%rbp), %rdi
	addq	$136, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movabsq	$Alphabet_type, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB159_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB159_6:
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB159_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB159_8:
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB159_10
# %bb.9:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	callq	fwrite
.LBB159_10:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	48(%rax), %rsi
	callq	write_bin_string
	movq	-8(%rbp), %rdi
	addq	$56, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	callq	write_bin_string
	movq	-8(%rbp), %rdi
	addq	$80, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB159_12
# %bb.11:
	movq	-8(%rbp), %rdi
	addq	$112, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rdi
	addq	$116, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
.LBB159_12:
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB159_14
# %bb.13:
	movq	-8(%rbp), %rdi
	addq	$120, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rdi
	addq	$124, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
.LBB159_14:
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4096, %eax             # imm = 0x1000
	cmpl	$0, %eax
	je	.LBB159_16
# %bb.15:
	movq	-8(%rbp), %rdi
	addq	$128, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rdi
	addq	$132, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
.LBB159_16:
	movl	$0, -12(%rbp)
.LBB159_17:                             # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB159_20
# %bb.18:                               #   in Loop: Header=BB159_17 Depth=1
	movq	-8(%rbp), %rdi
	addq	$172, %rdi
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$2, %edx
	callq	fwrite
# %bb.19:                               #   in Loop: Header=BB159_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_17
.LBB159_20:
	movq	-8(%rbp), %rdi
	addq	$304, %rdi              # imm = 0x130
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rdi
	addq	$224, %rdi
	movslq	Alphabet_size, %rdx
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	callq	fwrite
	movq	-8(%rbp), %rax
	movl	456(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB159_22
# %bb.21:
	movq	-8(%rbp), %rdi
	addq	$448, %rdi              # imm = 0x1C0
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rdi
	addq	$452, %rdi              # imm = 0x1C4
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
.LBB159_22:
	movq	-8(%rbp), %rdi
	addq	$168, %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	callq	fwrite
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	callq	fwrite
	movl	$1, -12(%rbp)
.LBB159_23:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB159_26
# %bb.24:                               #   in Loop: Header=BB159_23 Depth=1
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	Alphabet_size, %rdx
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	callq	fwrite
# %bb.25:                               #   in Loop: Header=BB159_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_23
.LBB159_26:
	movl	$1, -12(%rbp)
.LBB159_27:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB159_30
# %bb.28:                               #   in Loop: Header=BB159_27 Depth=1
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	Alphabet_size, %rdx
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	callq	fwrite
# %bb.29:                               #   in Loop: Header=BB159_27 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_27
.LBB159_30:
	movl	$1, -12(%rbp)
.LBB159_31:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB159_34
# %bb.32:                               #   in Loop: Header=BB159_31 Depth=1
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rcx
	movl	$4, %esi
	movl	$7, %edx
	callq	fwrite
# %bb.33:                               #   in Loop: Header=BB159_31 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_31
.LBB159_34:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end159:
	.size	WriteBinHMM, .Lfunc_end159-WriteBinHMM
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function write_bin_string
	.type	write_bin_string,@function
write_bin_string:                       # @write_bin_string
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB160_2
# %bb.1:
	leaq	-12(%rbp), %rbx
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$1, %rax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rbx, %rdi
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	jmp	.LBB160_3
.LBB160_2:
	leaq	-12(%rbp), %rdi
	movl	$0, -12(%rbp)
	movq	-32(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
.LBB160_3:
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end160:
	.size	write_bin_string, .Lfunc_end160-write_bin_string
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function main
.LCPI161_0:
	.quad	5183643170566569984     # double 3.4028234663852886E+38
.LCPI161_2:
	.quad	4621819117588971520     # double 10
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI161_1:
	.long	4286578687              # float -3.40282347E+38
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$0, -184(%rbp)
	movl	%edi, -120(%rbp)
	movq	%rsi, -232(%rbp)
	cmpl	$3, -120(%rbp)
	je	.LBB161_2
# %bb.1:
	movl	-120(%rbp), %edi
	movq	-232(%rbp), %rsi
	callq	hmmcalibrate
	movl	%eax, -184(%rbp)
	jmp	.LBB161_174
.LBB161_2:
	movsd	.LCPI161_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	.LCPI161_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movsd	.LCPI161_2(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$0, -80(%rbp)
	movl	$0, -64(%rbp)
	movl	$1, -108(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -204(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -100(%rbp)
	movl	$2147483647, -72(%rbp)  # imm = 0x7FFFFFFF
	movsd	%xmm2, -152(%rbp)
	movss	%xmm1, -160(%rbp)
	movss	%xmm1, -144(%rbp)
	movsd	%xmm0, -136(%rbp)
	movl	$0, -128(%rbp)
	movl	$0, -124(%rbp)
.LBB161_3:                              # =>This Inner Loop Header: Depth=1
	movabsq	$OPTIONS.339, %rdx
	movabsq	$usage.340, %r8
	leaq	-68(%rbp), %r9
	leaq	-56(%rbp), %rax
	leaq	-88(%rbp), %r10
	movl	-120(%rbp), %edi
	movq	-232(%rbp), %rsi
	movl	$17, %ecx
	movq	%rax, (%rsp)
	movq	%r10, 8(%rsp)
	callq	Getopt
	cmpl	$0, %eax
	je	.LBB161_57
# %bb.4:                                #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.341, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_6
# %bb.5:                                #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atoi
	movl	%eax, -72(%rbp)
	jmp	.LBB161_56
.LBB161_6:                              #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.1.342, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_8
# %bb.7:                                #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atof
	movsd	%xmm0, -152(%rbp)
	jmp	.LBB161_55
.LBB161_8:                              #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.2.343, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_10
# %bb.9:                                #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -160(%rbp)
	jmp	.LBB161_54
.LBB161_10:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.3.344, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_12
# %bb.11:                               #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atoi
	movl	%eax, -124(%rbp)
	jmp	.LBB161_53
.LBB161_12:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.4.345, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_14
# %bb.13:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$1, -212(%rbp)
	jmp	.LBB161_52
.LBB161_14:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.5.346, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_16
# %bb.15:                               #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atoi
	movl	%eax, -100(%rbp)
	jmp	.LBB161_51
.LBB161_16:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.6.347, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_18
# %bb.17:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$1, -128(%rbp)
	jmp	.LBB161_50
.LBB161_18:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.7.348, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_20
# %bb.19:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$2, -128(%rbp)
	jmp	.LBB161_49
.LBB161_20:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.8.349, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_22
# %bb.21:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$3, -128(%rbp)
	jmp	.LBB161_48
.LBB161_22:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.9.350, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_24
# %bb.23:                               #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atof
	movsd	%xmm0, -136(%rbp)
	jmp	.LBB161_47
.LBB161_24:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.10.351, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_26
# %bb.25:                               #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -144(%rbp)
	jmp	.LBB161_46
.LBB161_26:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.11.352, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_28
# %bb.27:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$1, -64(%rbp)
	jmp	.LBB161_45
.LBB161_28:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.12.353, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_30
# %bb.29:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$0, -108(%rbp)
	jmp	.LBB161_44
.LBB161_30:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.13.354, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_32
# %bb.31:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$1, -104(%rbp)
	jmp	.LBB161_43
.LBB161_32:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.14.355, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_34
# %bb.33:                               #   in Loop: Header=BB161_3 Depth=1
	movl	$1, -60(%rbp)
	jmp	.LBB161_42
.LBB161_34:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.15.356, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_38
# %bb.35:                               #   in Loop: Header=BB161_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	String2SeqfileFormat
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB161_37
# %bb.36:                               #   in Loop: Header=BB161_3 Depth=1
	movabsq	$.L.str.16.357, %rdi
	movq	-88(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB161_37:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_41
.LBB161_38:                             #   in Loop: Header=BB161_3 Depth=1
	movq	-56(%rbp), %rdi
	movl	$.L.str.17.358, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_40
# %bb.39:
	movabsq	$banner.359, %rsi
	movq	stdout, %rdi
	callq	HMMERBanner
	movabsq	$usage.340, %rdi
	callq	puts
	movabsq	$experts.360, %rdi
	callq	puts
	xorl	%edi, %edi
	callq	exit
.LBB161_40:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_41
.LBB161_41:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_42
.LBB161_42:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_43
.LBB161_43:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_44
.LBB161_44:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_45
.LBB161_45:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_46
.LBB161_46:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_47
.LBB161_47:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_48
.LBB161_48:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_49
.LBB161_49:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_50
.LBB161_50:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_51
.LBB161_51:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_52
.LBB161_52:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_53
.LBB161_53:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_54
.LBB161_54:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_55
.LBB161_55:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_56
.LBB161_56:                             #   in Loop: Header=BB161_3 Depth=1
	jmp	.LBB161_3
.LBB161_57:
	movl	-120(%rbp), %eax
	subl	-68(%rbp), %eax
	cmpl	$2, %eax
	je	.LBB161_59
# %bb.58:
	movabsq	$.L.str.18.361, %rdi
	movabsq	$usage.340, %rsi
	movb	$0, %al
	callq	Die
.LBB161_59:
	movq	-232(%rbp), %rax
	movl	-68(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -68(%rbp)
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -200(%rbp)
	movq	-232(%rbp), %rax
	movl	-68(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -68(%rbp)
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB161_62
# %bb.60:
	cmpl	$0, -204(%rbp)
	jne	.LBB161_62
# %bb.61:
	movabsq	$.L.str.19.362, %rdi
	movb	$0, %al
	callq	Die
.LBB161_62:
	cmpl	$0, -100(%rbp)
	je	.LBB161_65
# %bb.63:
	cmpl	$0, -208(%rbp)
	jne	.LBB161_65
# %bb.64:
	movabsq	$.L.str.20.363, %rdi
	movb	$0, %al
	callq	Die
.LBB161_65:
	cmpl	$0, -80(%rbp)
	jne	.LBB161_69
# %bb.66:
	movabsq	$.L.str.21.364, %rdi
	movq	-192(%rbp), %rsi
	xorl	%edx, %edx
	callq	Strparse
	cmpl	$0, %eax
	jne	.LBB161_68
# %bb.67:
	movq	-192(%rbp), %rdi
	movl	$.L.str.22.365, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB161_69
.LBB161_68:
	movl	$7, -80(%rbp)
.LBB161_69:
	movabsq	$.L.str.23.366, %rdx
	movq	-192(%rbp), %rdi
	movl	-80(%rbp), %esi
	callq	SeqfileOpen
	movq	%rax, -224(%rbp)
	cmpq	$0, %rax
	jne	.LBB161_71
# %bb.70:
	movabsq	$.L.str.24.367, %rdi
	movabsq	$usage.340, %rdx
	movq	-192(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB161_71:
	movabsq	$.L.str.25.368, %rsi
	movq	-200(%rbp), %rdi
	callq	HMMFileOpen
	movq	%rax, -272(%rbp)
	cmpq	$0, %rax
	jne	.LBB161_73
# %bb.72:
	movabsq	$.L.str.26.369, %rdi
	movabsq	$usage.340, %rdx
	movq	-200(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB161_73:
	leaq	-48(%rbp), %rsi
	movq	-272(%rbp), %rdi
	callq	HMMFileRead
	cmpl	$0, %eax
	jne	.LBB161_75
# %bb.74:
	movabsq	$.L.str.27.370, %rdi
	movq	-200(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB161_75:
	cmpq	$0, -48(%rbp)
	jne	.LBB161_77
# %bb.76:
	movabsq	$.L.str.28.371, %rdi
	movq	-200(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB161_77:
	movq	-48(%rbp), %rdi
	cmpl	$0, -64(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	P7Logoddsify
	cmpl	$0, -60(%rbp)
	je	.LBB161_80
# %bb.78:
	cmpl	$2, Alphabet_type
	jne	.LBB161_80
# %bb.79:
	movabsq	$.L.str.29.372, %rdi
	movb	$0, %al
	callq	Die
.LBB161_80:
	leaq	-160(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	SetAutocuts
	cmpl	$0, %eax
	jne	.LBB161_82
# %bb.81:
	movabsq	$.L.str.30.373, %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB161_82:
	movabsq	$banner.359, %rsi
	movq	stdout, %rdi
	callq	HMMERBanner
	movabsq	$.L.str.31.374, %rdi
	movq	-200(%rbp), %rsi
	movq	-48(%rbp), %rax
	movq	(%rax), %rdx
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.32.375, %rdi
	movq	-192(%rbp), %rsi
	movb	$0, %al
	callq	printf
	cmpl	$0, -104(%rbp)
	je	.LBB161_84
# %bb.83:
	movabsq	$.L.str.33.376, %rdi
	movb	$0, %al
	callq	printf
.LBB161_84:
	movabsq	$.L.str.34.377, %rdi
	movb	$0, %al
	callq	printf
	movss	.LCPI161_1(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	-160(%rbp), %xmm1       # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jne	.LBB161_86
	jp	.LBB161_86
# %bb.85:
	movabsq	$.L.str.35.378, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_96
.LBB161_86:
	movabsq	$.L.str.36.379, %rdi
	movss	-160(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	cmpl	$1, -128(%rbp)
	jne	.LBB161_88
# %bb.87:
	movabsq	$.L.str.37.380, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_95
.LBB161_88:
	cmpl	$2, -128(%rbp)
	jne	.LBB161_90
# %bb.89:
	movabsq	$.L.str.38.381, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_94
.LBB161_90:
	cmpl	$3, -128(%rbp)
	jne	.LBB161_92
# %bb.91:
	movabsq	$.L.str.39.382, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_93
.LBB161_92:
	movabsq	$.L.str.40.383, %rdi
	movb	$0, %al
	callq	printf
.LBB161_93:
	jmp	.LBB161_94
.LBB161_94:
	jmp	.LBB161_95
.LBB161_95:
	jmp	.LBB161_96
.LBB161_96:
	movabsq	$.L.str.41.384, %rdi
	movb	$0, %al
	callq	printf
	movss	.LCPI161_1(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	-144(%rbp), %xmm1       # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jne	.LBB161_98
	jp	.LBB161_98
# %bb.97:
	movabsq	$.L.str.35.378, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_108
.LBB161_98:
	movabsq	$.L.str.36.379, %rdi
	movss	-144(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	cmpl	$1, -128(%rbp)
	jne	.LBB161_100
# %bb.99:
	movabsq	$.L.str.42.385, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_107
.LBB161_100:
	cmpl	$2, -128(%rbp)
	jne	.LBB161_102
# %bb.101:
	movabsq	$.L.str.43.386, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_106
.LBB161_102:
	cmpl	$3, -128(%rbp)
	jne	.LBB161_104
# %bb.103:
	movabsq	$.L.str.44.387, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_105
.LBB161_104:
	movabsq	$.L.str.40.383, %rdi
	movb	$0, %al
	callq	printf
.LBB161_105:
	jmp	.LBB161_106
.LBB161_106:
	jmp	.LBB161_107
.LBB161_107:
	jmp	.LBB161_108
.LBB161_108:
	movabsq	$.L.str.45.388, %rdi
	movb	$0, %al
	callq	printf
	movsd	.LCPI161_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-152(%rbp), %xmm1       # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jne	.LBB161_110
	jp	.LBB161_110
# %bb.109:
	movabsq	$.L.str.35.378, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_111
.LBB161_110:
	movabsq	$.L.str.46.389, %rdi
	movsd	-152(%rbp), %xmm0       # xmm0 = mem[0],zero
	movb	$1, %al
	callq	printf
.LBB161_111:
	movabsq	$.L.str.47.390, %rdi
	movb	$0, %al
	callq	printf
	movsd	.LCPI161_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jne	.LBB161_113
	jp	.LBB161_113
# %bb.112:
	movabsq	$.L.str.35.378, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_114
.LBB161_113:
	movabsq	$.L.str.48.391, %rdi
	movsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	movb	$1, %al
	callq	printf
.LBB161_114:
	movabsq	$.L.str.49.392, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967096, %edi       # imm = 0xFFFFFF38
	movl	$200, %esi
	movl	$100, %edx
	callq	AllocHistogram
	movq	%rax, -176(%rbp)
	movl	$200, %edi
	callq	AllocTophits
	movq	%rax, -168(%rbp)
	movl	$200, %edi
	callq	AllocTophits
	movq	%rax, -96(%rbp)
	cmpl	$0, -204(%rbp)
	je	.LBB161_117
# %bb.115:
	cmpl	$0, -104(%rbp)
	je	.LBB161_117
# %bb.116:
	leaq	-160(%rbp), %rdx
	leaq	-112(%rbp), %r10
	movq	-48(%rbp), %rdi
	movq	-224(%rbp), %rsi
	movl	-64(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %r11
	movq	-96(%rbp), %rbx
	movq	%rax, (%rsp)
	movq	%r11, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movq	%r10, 24(%rsp)
	callq	main_loop_pvm
	jmp	.LBB161_122
.LBB161_117:
	cmpl	$0, -208(%rbp)
	je	.LBB161_120
# %bb.118:
	cmpl	$0, -100(%rbp)
	je	.LBB161_120
# %bb.119:
	leaq	-160(%rbp), %rdx
	leaq	-112(%rbp), %r10
	movq	-48(%rbp), %rdi
	movq	-224(%rbp), %rsi
	movl	-64(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movl	-100(%rbp), %ebx
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %r11
	movq	-96(%rbp), %r14
	movl	%ebx, (%rsp)
	movq	%rax, 8(%rsp)
	movq	%r11, 16(%rsp)
	movq	%r14, 24(%rsp)
	movq	%r10, 32(%rsp)
	callq	main_loop_threaded
	jmp	.LBB161_121
.LBB161_120:
	leaq	-160(%rbp), %rdx
	leaq	-112(%rbp), %r10
	movq	-48(%rbp), %rdi
	movq	-224(%rbp), %rsi
	movl	-64(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movq	-176(%rbp), %rbx
	movq	-168(%rbp), %rax
	movq	-96(%rbp), %r11
	movq	%rbx, (%rsp)
	movq	%rax, 8(%rsp)
	movq	%r11, 16(%rsp)
	movq	%r10, 24(%rsp)
	callq	main_loop_serial.393
.LBB161_121:
	jmp	.LBB161_122
.LBB161_122:
	movq	-48(%rbp), %rax
	movl	456(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB161_124
# %bb.123:
	movq	-176(%rbp), %rdi
	movq	-48(%rbp), %rax
	movss	448(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movss	452(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-176(%rbp), %rax
	movl	20(%rax), %eax
	cvtsi2ssl	%eax, %xmm2
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	cvtsi2ssl	%eax, %xmm3
	xorl	%esi, %esi
	callq	ExtremeValueSetHistogram
.LBB161_124:
	cmpl	$0, -124(%rbp)
	jne	.LBB161_126
# %bb.125:
	movl	-112(%rbp), %eax
	movl	%eax, -124(%rbp)
.LBB161_126:
	cmpl	$0, -212(%rbp)
	je	.LBB161_134
# %bb.127:
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	movq	-48(%rbp), %rax
	movl	456(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB161_129
# %bb.128:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	jmp	.LBB161_130
.LBB161_129:
	movabsq	$.L.str.51.394, %rdx
	jmp	.LBB161_130
.LBB161_130:
	movq	-48(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB161_132
# %bb.131:
	movq	-48(%rbp), %rax
	movq	16(%rax), %rcx
	jmp	.LBB161_133
.LBB161_132:
	movabsq	$.L.str.51.394, %rcx
	jmp	.LBB161_133
.LBB161_133:
	movabsq	$.L.str.50.395, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_141
.LBB161_134:
	movabsq	$.L.str.52.396, %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	movb	$0, %al
	callq	printf
	movq	-48(%rbp), %rax
	movl	456(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB161_136
# %bb.135:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rsi
	jmp	.LBB161_137
.LBB161_136:
	movabsq	$.L.str.54.397, %rsi
	jmp	.LBB161_137
.LBB161_137:
	movabsq	$.L.str.53.398, %rdi
	movb	$0, %al
	callq	printf
	movq	-48(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB161_139
# %bb.138:
	movq	-48(%rbp), %rax
	movq	16(%rax), %rsi
	jmp	.LBB161_140
.LBB161_139:
	movabsq	$.L.str.54.397, %rsi
	jmp	.LBB161_140
.LBB161_140:
	movabsq	$.L.str.55.399, %rdi
	movb	$0, %al
	callq	printf
.LBB161_141:
	movq	-48(%rbp), %rax
	movl	456(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB161_143
# %bb.142:
	movabsq	$.L.str.56.400, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB161_144
.LBB161_143:
	movabsq	$.L.str.57.401, %rdi
	movb	$0, %al
	callq	printf
.LBB161_144:
	movq	-168(%rbp), %rdi
	callq	FullSortTophits
	movq	-168(%rbp), %rdi
	callq	TophitsMaxName
	movl	$8, %ecx
	cmpl	%eax, %ecx
	jle	.LBB161_146
# %bb.145:
	movl	$8, %eax
	jmp	.LBB161_147
.LBB161_146:
	movq	-168(%rbp), %rdi
	callq	TophitsMaxName
.LBB161_147:
	movl	$52, %ecx
	movl	%eax, -180(%rbp)
	subl	-180(%rbp), %ecx
	cmpl	$11, %ecx
	jle	.LBB161_149
# %bb.148:
	movl	$52, %eax
	subl	-180(%rbp), %eax
	jmp	.LBB161_150
.LBB161_149:
	movl	$11, %eax
	jmp	.LBB161_150
.LBB161_150:
	movl	%eax, -308(%rbp)
	movq	-96(%rbp), %rdi
	callq	FullSortTophits
	movq	-96(%rbp), %rdi
	callq	TophitsMaxName
	movl	$8, %ecx
	cmpl	%eax, %ecx
	jle	.LBB161_152
# %bb.151:
	movl	$8, %eax
	jmp	.LBB161_153
.LBB161_152:
	movq	-96(%rbp), %rdi
	callq	TophitsMaxName
.LBB161_153:
	movl	%eax, -180(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB161_173
# %bb.154:
	movabsq	$.L.str.58.402, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -116(%rbp)
	movl	$0, -76(%rbp)
.LBB161_155:                            # =>This Inner Loop Header: Depth=1
	movl	-116(%rbp), %eax
	movq	-96(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB161_167
# %bb.156:                              #   in Loop: Header=BB161_155 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jne	.LBB161_158
# %bb.157:
	jmp	.LBB161_168
.LBB161_158:                            #   in Loop: Header=BB161_155 Depth=1
	leaq	-296(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	leaq	-288(%rbp), %r8
	leaq	-252(%rbp), %r9
	leaq	-280(%rbp), %rax
	leaq	-248(%rbp), %rbx
	leaq	-244(%rbp), %r10
	leaq	-316(%rbp), %r11
	leaq	-324(%rbp), %r14
	leaq	-320(%rbp), %r15
	leaq	-240(%rbp), %r12
	leaq	-236(%rbp), %r13
	movq	-96(%rbp), %rdi
	movl	-116(%rbp), %esi
	movq	%rax, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	movq	%rbx, 24(%rsp)
	movq	%r10, 32(%rsp)
	movq	%r11, 40(%rsp)
	movq	%r14, 48(%rsp)
	movq	%r15, 56(%rsp)
	movq	$0, 64(%rsp)
	movq	%r12, 72(%rsp)
	movq	%r13, 80(%rsp)
	leaq	-304(%rbp), %rax
	movq	%rax, 88(%rsp)
	callq	GetRankedHit
	movsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-124(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, -264(%rbp)
	movsd	-288(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-124(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	ucomisd	-152(%rbp), %xmm0
	ja	.LBB161_160
# %bb.159:                              #   in Loop: Header=BB161_155 Depth=1
	movss	-252(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	movss	-160(%rbp), %xmm1       # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB161_161
.LBB161_160:                            #   in Loop: Header=BB161_155 Depth=1
	jmp	.LBB161_166
.LBB161_161:                            #   in Loop: Header=BB161_155 Depth=1
	movsd	-264(%rbp), %xmm0       # xmm0 = mem[0],zero
	movsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jb	.LBB161_164
# %bb.162:                              #   in Loop: Header=BB161_155 Depth=1
	movss	-216(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	ucomiss	-144(%rbp), %xmm0
	jb	.LBB161_164
# %bb.163:                              #   in Loop: Header=BB161_155 Depth=1
	movabsq	$.L.str.59.403, %rdi
	movq	-280(%rbp), %rsi
	movl	-240(%rbp), %edx
	movl	-236(%rbp), %ecx
	movl	-248(%rbp), %r8d
	movl	-244(%rbp), %r9d
	movss	-216(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	movb	$2, %al
	callq	printf
	movq	stdout, %rdi
	movq	-304(%rbp), %rsi
	callq	PrintFancyAli
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
.LBB161_164:                            #   in Loop: Header=BB161_155 Depth=1
	jmp	.LBB161_165
.LBB161_165:                            #   in Loop: Header=BB161_155 Depth=1
	jmp	.LBB161_166
.LBB161_166:                            #   in Loop: Header=BB161_155 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB161_155
.LBB161_167:                            # %.loopexit
	jmp	.LBB161_168
.LBB161_168:
	cmpl	$0, -76(%rbp)
	jne	.LBB161_170
# %bb.169:
	movabsq	$.L.str.60.404, %rdi
	movb	$0, %al
	callq	printf
.LBB161_170:
	movl	-76(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jne	.LBB161_172
# %bb.171:
	movabsq	$.L.str.61.405, %rdi
	movl	-72(%rbp), %esi
	movb	$0, %al
	callq	printf
.LBB161_172:
	jmp	.LBB161_173
.LBB161_173:
	movabsq	$.L.str.62.406, %rdi
	movl	-112(%rbp), %esi
	movb	$0, %al
	callq	printf
	movq	-176(%rbp), %rdi
	callq	FreeHistogram
	movq	-272(%rbp), %rdi
	callq	HMMFileClose
	movq	-224(%rbp), %rdi
	callq	SeqfileClose
	movq	-168(%rbp), %rdi
	callq	FreeTophits
	movq	-96(%rbp), %rdi
	callq	FreeTophits
	movq	-48(%rbp), %rdi
	callq	FreePlan7
	callq	SqdClean
	movl	$0, -184(%rbp)
.LBB161_174:
	movl	-184(%rbp), %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end161:
	.size	main, .Lfunc_end161-main
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function main_loop_pvm
	.type	main_loop_pvm,@function
main_loop_pvm:                          # @main_loop_pvm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movq	24(%rbp), %rax
	movq	16(%rbp), %rax
	movabsq	$.L.str.63.408, %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -4(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	Die
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end162:
	.size	main_loop_pvm, .Lfunc_end162-main_loop_pvm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function main_loop_threaded
	.type	main_loop_threaded,@function
main_loop_threaded:                     # @main_loop_threaded
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movq	24(%rbp), %rax
	movl	16(%rbp), %eax
	movabsq	$.L.str.64.407, %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -4(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	Die
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end163:
	.size	main_loop_threaded, .Lfunc_end163-main_loop_threaded
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function main_loop_serial.393
	.type	main_loop_serial.393,@function
main_loop_serial.393:                   # @main_loop_serial.393
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movq	24(%rbp), %rax
	movq	16(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -84(%rbp)
	movq	-40(%rbp), %rax
	movl	136(%rax), %esi
	movl	$1, %edi
	movl	$25, %edx
	xorl	%ecx, %ecx
	callq	CreatePlan7Matrix
	movq	%rax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB164_1:                              # =>This Inner Loop Header: Depth=1
	leaq	-104(%rbp), %rdx
	leaq	-480(%rbp), %rcx
	movq	-112(%rbp), %rdi
	movq	-112(%rbp), %rax
	movl	144(%rax), %esi
	callq	ReadSeq
	cmpl	$0, %eax
	je	.LBB164_28
# %bb.2:                                #   in Loop: Header=BB164_1 Depth=1
	cmpl	$0, -156(%rbp)
	jne	.LBB164_5
# %bb.3:                                #   in Loop: Header=BB164_1 Depth=1
	jmp	.LBB164_4
.LBB164_4:                              # %.backedge
                                        #   in Loop: Header=BB164_1 Depth=1
	jmp	.LBB164_1
.LBB164_5:                              #   in Loop: Header=BB164_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	-104(%rbp), %rdi
	movl	-156(%rbp), %esi
	callq	DigitizeSequence
	movq	%rax, -48(%rbp)
	cmpl	$0, -84(%rbp)
	je	.LBB164_8
# %bb.6:                                #   in Loop: Header=BB164_1 Depth=1
	cmpl	$3, Alphabet_type
	jne	.LBB164_8
# %bb.7:                                #   in Loop: Header=BB164_1 Depth=1
	movq	-48(%rbp), %rdi
	movl	-156(%rbp), %esi
	callq	XNU
.LBB164_8:                              #   in Loop: Header=BB164_1 Depth=1
	movl	-156(%rbp), %edi
	movq	-40(%rbp), %rax
	movl	136(%rax), %esi
	callq	P7ViterbiSize
	cmpl	$1000, %eax             # imm = 0x3E8
	jg	.LBB164_10
# %bb.9:                                #   in Loop: Header=BB164_1 Depth=1
	leaq	-72(%rbp), %r8
	movq	-48(%rbp), %rdi
	movl	-156(%rbp), %esi
	movq	-40(%rbp), %rdx
	movq	-80(%rbp), %rcx
	callq	P7Viterbi
	movss	%xmm0, -28(%rbp)
	jmp	.LBB164_11
.LBB164_10:                             #   in Loop: Header=BB164_1 Depth=1
	leaq	-72(%rbp), %r8
	movq	-48(%rbp), %rdi
	movl	-156(%rbp), %esi
	movq	-40(%rbp), %rdx
	movq	-80(%rbp), %rcx
	callq	P7SmallViterbi
	movss	%xmm0, -28(%rbp)
.LBB164_11:                             #   in Loop: Header=BB164_1 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB164_15
# %bb.12:                               #   in Loop: Header=BB164_1 Depth=1
	movq	-48(%rbp), %rdi
	movl	-156(%rbp), %esi
	movq	-40(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	P7Forward
	movss	%xmm0, -28(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB164_14
# %bb.13:                               #   in Loop: Header=BB164_1 Depth=1
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	TraceScoreCorrection
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	subss	%xmm0, %xmm1
	movss	%xmm1, -28(%rbp)
.LBB164_14:                             #   in Loop: Header=BB164_1 Depth=1
	jmp	.LBB164_15
.LBB164_15:                             #   in Loop: Header=BB164_1 Depth=1
	movq	-40(%rbp), %rdi
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	PValue
	movsd	%xmm0, -96(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 36(%rax)
	je	.LBB164_17
# %bb.16:                               #   in Loop: Header=BB164_1 Depth=1
	movq	-56(%rbp), %rax
	movl	36(%rax), %eax
	cvtsi2sdl	%eax, %xmm0
	mulsd	-96(%rbp), %xmm0
	jmp	.LBB164_18
.LBB164_17:                             #   in Loop: Header=BB164_1 Depth=1
	movl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm0
	mulsd	-96(%rbp), %xmm0
.LBB164_18:                             #   in Loop: Header=BB164_1 Depth=1
	movsd	%xmm0, -120(%rbp)
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	ucomiss	(%rax), %xmm0
	jb	.LBB164_27
# %bb.19:                               #   in Loop: Header=BB164_1 Depth=1
	movsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-56(%rbp), %rax
	movsd	8(%rax), %xmm1          # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jb	.LBB164_27
# %bb.20:                               #   in Loop: Header=BB164_1 Depth=1
	leaq	-480(%rbp), %r11
	movq	24(%rbp), %rdi
	movq	32(%rbp), %rsi
	movq	-72(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movq	-48(%rbp), %r8
	movl	-156(%rbp), %r9d
	addq	$4, %r11
	movl	-480(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB164_22
# %bb.21:                               #   in Loop: Header=BB164_1 Depth=1
	leaq	-480(%rbp), %r10
	addq	$132, %r10
	jmp	.LBB164_23
.LBB164_22:                             #   in Loop: Header=BB164_1 Depth=1
	xorl	%r10d, %r10d
	jmp	.LBB164_23
.LBB164_23:                             #   in Loop: Header=BB164_1 Depth=1
	movl	-480(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB164_25
# %bb.24:                               #   in Loop: Header=BB164_1 Depth=1
	leaq	-480(%rbp), %rax
	addq	$196, %rax
	jmp	.LBB164_26
.LBB164_25:                             #   in Loop: Header=BB164_1 Depth=1
	xorl	%eax, %eax
	jmp	.LBB164_26
.LBB164_26:                             #   in Loop: Header=BB164_1 Depth=1
	xorl	%ebx, %ebx
	movl	-64(%rbp), %ebx
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movl	-60(%rbp), %r14d
	movq	-56(%rbp), %r15
	movq	%r11, (%rsp)
	movq	%r10, 8(%rsp)
	movq	%rax, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movl	%r14d, 32(%rsp)
	movq	%r15, 40(%rsp)
	movl	$0, 48(%rsp)
	callq	PostprocessSignificantHit
	movss	%xmm0, -28(%rbp)
.LBB164_27:                             #   in Loop: Header=BB164_1 Depth=1
	movq	16(%rbp), %rdi
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	AddToHistogram
	leaq	-480(%rbp), %rsi
	movq	-104(%rbp), %rdi
	callq	FreeSequence
	movq	-72(%rbp), %rdi
	callq	P7FreeTrace
	movq	-48(%rbp), %rdi
	callq	free
	jmp	.LBB164_4
.LBB164_28:
	movq	-80(%rbp), %rdi
	callq	FreePlan7Matrix
	movl	-32(%rbp), %eax
	movq	40(%rbp), %rcx
	movl	%eax, (%rcx)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end164:
	.size	main_loop_serial.393, .Lfunc_end164-main_loop_serial.393
	.cfi_endproc
                                        # -- End function
	.globl	Strparse                # -- Begin function Strparse
	.p2align	4, 0x90
	.type	Strparse,@function
Strparse:                               # @Strparse
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -24(%rbp)
	cmpl	$10, -24(%rbp)
	jl	.LBB165_2
# %bb.1:
	movabsq	$.L.str.411, %rdi
	movl	$9, %esi
	movb	$0, %al
	callq	Die
.LBB165_2:
	movl	$0, -4(%rbp)
.LBB165_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB165_8
# %bb.4:                                #   in Loop: Header=BB165_3 Depth=1
	movslq	-4(%rbp), %rax
	cmpq	$0, sqd_parse(,%rax,8)
	je	.LBB165_6
# %bb.5:                                #   in Loop: Header=BB165_3 Depth=1
	movslq	-4(%rbp), %rax
	movq	sqd_parse(,%rax,8), %rdi
	callq	free
	movslq	-4(%rbp), %rax
	movq	$0, sqd_parse(,%rax,8)
.LBB165_6:                              #   in Loop: Header=BB165_3 Depth=1
	jmp	.LBB165_7
.LBB165_7:                              #   in Loop: Header=BB165_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_3
.LBB165_8:
	movq	-48(%rbp), %rdi
	callq	sqd_regcomp
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB165_10
# %bb.9:
	movabsq	$.L.str.1.412, %rdi
	movb	$0, %al
	callq	Die
.LBB165_10:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	sqd_regexec
	movl	%eax, -28(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB165_19
# %bb.11:
	movl	$0, -4(%rbp)
.LBB165_12:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB165_18
# %bb.13:                               #   in Loop: Header=BB165_12 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB165_16
# %bb.14:                               #   in Loop: Header=BB165_12 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, 80(%rax,%rcx,8)
	je	.LBB165_16
# %bb.15:                               #   in Loop: Header=BB165_12 Depth=1
	movabsq	$.L.str.2.413, %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	80(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subq	%rcx, %rax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$124, %esi
	callq	sre_malloc
	movslq	-4(%rbp), %rcx
	movq	%rax, sqd_parse(,%rcx,8)
	movslq	-4(%rbp), %rax
	movq	sqd_parse(,%rax,8), %rdi
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-20(%rbp), %rdx
	callq	strncpy
	movslq	-4(%rbp), %rax
	movq	sqd_parse(,%rax,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB165_16:                             #   in Loop: Header=BB165_12 Depth=1
	jmp	.LBB165_17
.LBB165_17:                             #   in Loop: Header=BB165_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_12
.LBB165_18:
	jmp	.LBB165_19
.LBB165_19:
	movq	-16(%rbp), %rdi
	callq	free
	movl	-28(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end165:
	.size	Strparse, .Lfunc_end165-Strparse
	.cfi_endproc
                                        # -- End function
	.globl	sqd_regcomp             # -- Begin function sqd_regcomp
	.p2align	4, 0x90
	.type	sqd_regcomp,@function
sqd_regcomp:                            # @sqd_regcomp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.LBB166_2
# %bb.1:
	movabsq	$.L.str.3.420, %rdi
	callq	sqd_regerror
	movq	$0, -24(%rbp)
	jmp	.LBB166_27
.LBB166_2:
	leaq	-88(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -80(%rbp)
	movq	$0, -56(%rbp)
	movb	$9, -64(%rbp)
	movb	$0, -62(%rbp)
	movb	$0, -63(%rbp)
	movq	%rdi, %rax
	addq	$24, %rax
	movq	%rax, -72(%rbp)
	movl	$156, %esi
	callq	regc
	leaq	-88(%rbp), %rdi
	leaq	-28(%rbp), %rdx
	xorl	%esi, %esi
	callq	reg
	cmpq	$0, %rax
	jne	.LBB166_4
# %bb.3:
	movq	$0, -24(%rbp)
	jmp	.LBB166_27
.LBB166_4:
	cmpq	$32767, -56(%rbp)       # imm = 0x7FFF
	jl	.LBB166_6
# %bb.5:
	movabsq	$.L.str.4.421, %rdi
	callq	sqd_regerror
	movq	$0, -24(%rbp)
	jmp	.LBB166_27
.LBB166_6:
	movq	-56(%rbp), %rdi
	addq	$184, %rdi
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB166_8
# %bb.7:
	movabsq	$.L.str.5.422, %rdi
	callq	sqd_regerror
	movq	$0, -24(%rbp)
	jmp	.LBB166_27
.LBB166_8:
	leaq	-88(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -80(%rbp)
	movq	-16(%rbp), %rax
	addq	$180, %rax
	movq	%rax, -72(%rbp)
	movl	$156, %esi
	callq	regc
	leaq	-88(%rbp), %rdi
	leaq	-28(%rbp), %rdx
	xorl	%esi, %esi
	callq	reg
	cmpq	$0, %rax
	jne	.LBB166_10
# %bb.9:
	movq	$0, -24(%rbp)
	jmp	.LBB166_27
.LBB166_10:
	movq	-16(%rbp), %rax
	movb	$0, 160(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 161(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 168(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 176(%rax)
	movq	-16(%rbp), %rax
	addq	$180, %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	regnext
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB166_26
# %bb.11:
	movq	-8(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$8, %eax
	jne	.LBB166_13
# %bb.12:
	movq	-8(%rbp), %rax
	movb	3(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 160(%rcx)
	jmp	.LBB166_16
.LBB166_13:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB166_15
# %bb.14:
	movq	-16(%rbp), %rax
	movb	$1, 161(%rax)
.LBB166_15:
	jmp	.LBB166_16
.LBB166_16:
	movl	-28(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB166_25
# %bb.17:
	movq	$0, -96(%rbp)
	movq	$0, -40(%rbp)
.LBB166_18:                             # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB166_24
# %bb.19:                               #   in Loop: Header=BB166_18 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$8, %eax
	jne	.LBB166_22
# %bb.20:                               #   in Loop: Header=BB166_18 Depth=1
	movq	-8(%rbp), %rdi
	addq	$3, %rdi
	callq	strlen
	cmpq	-40(%rbp), %rax
	jb	.LBB166_22
# %bb.21:                               #   in Loop: Header=BB166_18 Depth=1
	movq	-8(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -96(%rbp)
	movq	-8(%rbp), %rdi
	addq	$3, %rdi
	callq	strlen
	movq	%rax, -40(%rbp)
.LBB166_22:                             #   in Loop: Header=BB166_18 Depth=1
	jmp	.LBB166_23
.LBB166_23:                             #   in Loop: Header=BB166_18 Depth=1
	movq	-8(%rbp), %rdi
	callq	regnext
	movq	%rax, -8(%rbp)
	jmp	.LBB166_18
.LBB166_24:
	movq	-96(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 168(%rcx)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	%eax, 176(%rcx)
.LBB166_25:
	jmp	.LBB166_26
.LBB166_26:
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB166_27:
	movq	-24(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end166:
	.size	sqd_regcomp, .Lfunc_end166-sqd_regcomp
	.cfi_endproc
                                        # -- End function
	.globl	sqd_regexec             # -- Begin function sqd_regexec
	.p2align	4, 0x90
	.type	sqd_regexec,@function
sqd_regexec:                            # @sqd_regexec
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB167_2
# %bb.1:
	cmpq	$0, -32(%rbp)
	jne	.LBB167_3
.LBB167_2:
	movabsq	$.L.str.6.414, %rdi
	callq	sqd_regerror
	movl	$0, -4(%rbp)
	jmp	.LBB167_25
.LBB167_3:
	movq	-16(%rbp), %rax
	movzbl	180(%rax), %eax
	cmpl	$156, %eax
	je	.LBB167_5
# %bb.4:
	movabsq	$.L.str.7.415, %rdi
	callq	sqd_regerror
	movl	$0, -4(%rbp)
	jmp	.LBB167_25
.LBB167_5:
	movq	-16(%rbp), %rax
	cmpq	$0, 168(%rax)
	je	.LBB167_8
# %bb.6:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	168(%rax), %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB167_8
# %bb.7:
	movl	$0, -4(%rbp)
	jmp	.LBB167_25
.LBB167_8:
	movq	-32(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	addq	$80, %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	cmpb	$0, 161(%rax)
	je	.LBB167_10
# %bb.9:
	leaq	-72(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	regtry
	movl	%eax, -4(%rbp)
	jmp	.LBB167_25
.LBB167_10:
	movq	-16(%rbp), %rax
	movsbl	160(%rax), %eax
	cmpl	$0, %eax
	je	.LBB167_18
# %bb.11:
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB167_12:                             # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB167_17
# %bb.13:                               #   in Loop: Header=BB167_12 Depth=1
	leaq	-72(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	regtry
	cmpl	$0, %eax
	je	.LBB167_15
# %bb.14:
	movl	$1, -4(%rbp)
	jmp	.LBB167_25
.LBB167_15:                             #   in Loop: Header=BB167_12 Depth=1
	jmp	.LBB167_16
.LBB167_16:                             #   in Loop: Header=BB167_12 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1, %rdi
	movq	-16(%rbp), %rax
	movsbl	160(%rax), %esi
	callq	strchr
	movq	%rax, -24(%rbp)
	jmp	.LBB167_12
.LBB167_17:
	movl	$0, -4(%rbp)
	jmp	.LBB167_25
.LBB167_18:
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB167_19:                             # =>This Inner Loop Header: Depth=1
	leaq	-72(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	regtry
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB167_20
	jmp	.LBB167_24
.LBB167_20:                             #   in Loop: Header=BB167_19 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB167_22
# %bb.21:
	movl	$0, -4(%rbp)
	jmp	.LBB167_25
.LBB167_22:                             #   in Loop: Header=BB167_19 Depth=1
	jmp	.LBB167_23
.LBB167_23:                             #   in Loop: Header=BB167_19 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB167_19
.LBB167_24:
	movl	$1, -4(%rbp)
.LBB167_25:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end167:
	.size	sqd_regexec, .Lfunc_end167-sqd_regexec
	.cfi_endproc
                                        # -- End function
	.globl	sqd_regerror            # -- Begin function sqd_regerror
	.p2align	4, 0x90
	.type	sqd_regerror,@function
sqd_regerror:                           # @sqd_regerror
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.11.419, %rsi
	movq	%rdi, -8(%rbp)
	movq	stderr, %rdi
	movq	-8(%rbp), %rdx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	exit
.Lfunc_end168:
	.size	sqd_regerror, .Lfunc_end168-sqd_regerror
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regtry
	.type	regtry,@function
regtry:                                 # @regtry
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	addq	$80, %rax
	movq	%rax, -40(%rbp)
	movl	$10, -4(%rbp)
.LBB169_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB169_4
# %bb.2:                                #   in Loop: Header=BB169_1 Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$8, %rcx
	movq	%rcx, -48(%rbp)
	movq	$0, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$8, %rcx
	movq	%rcx, -40(%rbp)
	movq	$0, (%rax)
# %bb.3:                                #   in Loop: Header=BB169_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_1
.LBB169_4:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	addq	$180, %rsi
	addq	$1, %rsi
	callq	regmatch
	cmpl	$0, %eax
	je	.LBB169_6
# %bb.5:
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	movl	$1, -20(%rbp)
	jmp	.LBB169_7
.LBB169_6:
	movl	$0, -20(%rbp)
.LBB169_7:
	movl	-20(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end169:
	.size	regtry, .Lfunc_end169-regtry
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regmatch
	.type	regmatch,@function
regmatch:                               # @regmatch
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB170_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, -32(%rbp)
	je	.LBB170_65
# %bb.2:                                #   in Loop: Header=BB170_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	regnext
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$39, %ecx
	ja	.LBB170_62
# %bb.3:                                #   in Loop: Header=BB170_1 Depth=1
	movq	.LJTI170_0(,%rax,8), %rax
	jmpq	*%rax
.LBB170_4:                              #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	8(%rcx), %rax
	je	.LBB170_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_6:                              #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_63
.LBB170_7:                              #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB170_9
# %bb.8:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_9:                              #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_63
.LBB170_10:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB170_12
# %bb.11:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_12:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB170_63
.LBB170_13:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-32(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movsbl	(%rcx), %ecx
	cmpl	%ecx, %eax
	je	.LBB170_15
# %bb.14:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_15:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-64(%rbp), %rdi
	callq	strlen
	movq	%rax, -72(%rbp)
	cmpq	$1, -72(%rbp)
	jbe	.LBB170_18
# %bb.16:                               #   in Loop: Header=BB170_1 Depth=1
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rsi
	movq	-72(%rbp), %rdx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB170_18
# %bb.17:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_18:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	(%rcx), %rax
	movq	%rax, (%rcx)
	jmp	.LBB170_63
.LBB170_19:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB170_21
# %bb.20:                               #   in Loop: Header=BB170_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$3, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB170_22
.LBB170_21:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_22:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB170_63
.LBB170_23:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB170_25
# %bb.24:                               #   in Loop: Header=BB170_1 Depth=1
	movq	-32(%rbp), %rdi
	addq	$3, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB170_26
.LBB170_25:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_26:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB170_63
.LBB170_27:                             #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_63
.LBB170_28:                             #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_63
.LBB170_29:
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$20, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	regmatch
	cmpl	$0, %eax
	je	.LBB170_33
# %bb.30:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-48(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	jne	.LBB170_32
# %bb.31:
	movq	-112(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB170_32:
	movl	$1, -4(%rbp)
	jmp	.LBB170_66
.LBB170_33:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_34:
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$30, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	regmatch
	cmpl	$0, %eax
	je	.LBB170_38
# %bb.35:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-44(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	jne	.LBB170_37
# %bb.36:
	movq	-104(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB170_37:
	movl	$1, -4(%rbp)
	jmp	.LBB170_66
.LBB170_38:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_39:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-40(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$6, %eax
	je	.LBB170_41
# %bb.40:                               #   in Loop: Header=BB170_1 Depth=1
	movq	-32(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB170_47
.LBB170_41:
	jmp	.LBB170_42
.LBB170_42:                             # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$6, %eax
	jne	.LBB170_46
# %bb.43:                               #   in Loop: Header=BB170_42 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	addq	$3, %rsi
	callq	regmatch
	cmpl	$0, %eax
	je	.LBB170_45
# %bb.44:
	movl	$1, -4(%rbp)
	jmp	.LBB170_66
.LBB170_45:                             #   in Loop: Header=BB170_42 Depth=1
	movq	-96(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rdi
	callq	regnext
	movq	%rax, -32(%rbp)
	jmp	.LBB170_42
.LBB170_46:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_47:                             #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_63
.LBB170_48:
	movq	-40(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$8, %eax
	jne	.LBB170_50
# %bb.49:
	movq	-40(%rbp), %rax
	movsbl	3(%rax), %eax
	jmp	.LBB170_51
.LBB170_50:
	xorl	%eax, %eax
	jmp	.LBB170_51
.LBB170_51:
	movl	$1, %ecx
	xorl	%edx, %edx
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$10, %eax
	cmovel	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rax, -80(%rbp)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	addq	$3, %rsi
	callq	regrepeat
	addq	$1, %rax
	movq	%rax, -56(%rbp)
.LBB170_52:                             # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jbe	.LBB170_60
# %bb.53:                               #   in Loop: Header=BB170_52 Depth=1
	movq	-88(%rbp), %rax
	addq	-56(%rbp), %rax
	addq	$-1, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movsbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB170_55
# %bb.54:                               #   in Loop: Header=BB170_52 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	movsbl	-17(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB170_58
.LBB170_55:                             #   in Loop: Header=BB170_52 Depth=1
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	regmatch
	cmpl	$0, %eax
	je	.LBB170_57
# %bb.56:
	movl	$1, -4(%rbp)
	jmp	.LBB170_66
.LBB170_57:                             #   in Loop: Header=BB170_52 Depth=1
	jmp	.LBB170_58
.LBB170_58:                             #   in Loop: Header=BB170_52 Depth=1
	jmp	.LBB170_59
.LBB170_59:                             #   in Loop: Header=BB170_52 Depth=1
	movq	-56(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB170_52
.LBB170_60:
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_61:
	movl	$1, -4(%rbp)
	jmp	.LBB170_66
.LBB170_62:
	movabsq	$.L.str.25.416, %rdi
	callq	sqd_regerror
	movl	$0, -4(%rbp)
	jmp	.LBB170_66
.LBB170_63:                             #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_64
.LBB170_64:                             #   in Loop: Header=BB170_1 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB170_1
.LBB170_65:
	movabsq	$.L.str.26.417, %rdi
	callq	sqd_regerror
	movl	$0, -4(%rbp)
.LBB170_66:
	movl	-4(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end170:
	.size	regmatch, .Lfunc_end170-regmatch
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI170_0:
	.quad	.LBB170_61
	.quad	.LBB170_4
	.quad	.LBB170_7
	.quad	.LBB170_10
	.quad	.LBB170_19
	.quad	.LBB170_23
	.quad	.LBB170_39
	.quad	.LBB170_28
	.quad	.LBB170_13
	.quad	.LBB170_27
	.quad	.LBB170_48
	.quad	.LBB170_48
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_62
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_29
	.quad	.LBB170_62
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
	.quad	.LBB170_34
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function regnext
	.type	regnext,@function
regnext:                                # @regnext
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	1(%rax), %eax
	andl	$127, %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movsbl	2(%rcx), %ecx
	andl	$255, %ecx
	addl	%ecx, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB171_2
# %bb.1:
	movq	$0, -24(%rbp)
	jmp	.LBB171_6
.LBB171_2:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$7, %eax
	jne	.LBB171_4
# %bb.3:
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rdx
	subq	%rdx, %rcx
	addq	%rcx, %rax
	jmp	.LBB171_5
.LBB171_4:
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addq	%rcx, %rax
.LBB171_5:
	movq	%rax, -24(%rbp)
.LBB171_6:
	movq	-24(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end171:
	.size	regnext, .Lfunc_end171-regnext
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regrepeat
	.type	regrepeat,@function
regrepeat:                              # @regrepeat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	addl	$-3, %eax
	movl	%eax, %ecx
	subl	$5, %ecx
	ja	.LBB172_10
# %bb.1:
	movq	.LJTI172_0(,%rax,8), %rax
	jmpq	*%rax
.LBB172_2:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	movq	%rax, -16(%rbp)
	jmp	.LBB172_11
.LBB172_3:
	movq	-24(%rbp), %rax
	movb	3(%rax), %al
	movb	%al, -1(%rbp)
	movq	$0, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB172_4:                              # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	movsbl	(%rax), %eax
	movsbl	-1(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB172_7
# %bb.5:                                #   in Loop: Header=BB172_4 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
# %bb.6:                                #   in Loop: Header=BB172_4 Depth=1
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB172_4
.LBB172_7:
	movq	-48(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB172_11
.LBB172_8:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	addq	$3, %rsi
	callq	strspn
	movq	%rax, -16(%rbp)
	jmp	.LBB172_11
.LBB172_9:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	addq	$3, %rsi
	callq	strcspn
	movq	%rax, -16(%rbp)
	jmp	.LBB172_11
.LBB172_10:
	movabsq	$.L.str.27.418, %rdi
	callq	sqd_regerror
	movq	$0, -16(%rbp)
.LBB172_11:
	movq	-16(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end172:
	.size	regrepeat, .Lfunc_end172-regrepeat
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI172_0:
	.quad	.LBB172_2
	.quad	.LBB172_8
	.quad	.LBB172_9
	.quad	.LBB172_10
	.quad	.LBB172_10
	.quad	.LBB172_3
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function regc
	.type	regc,@function
regc:                                   # @regc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movb	%sil, -1(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	$24, %rcx
	cmpq	%rcx, %rax
	je	.LBB173_2
# %bb.1:
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, 16(%rcx)
	movb	%al, (%rdx)
	jmp	.LBB173_3
.LBB173_2:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 32(%rax)
.LBB173_3:
	popq	%rbp
	retq
.Lfunc_end173:
	.size	regc, .Lfunc_end173-regc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reg
	.type	reg,@function
reg:                                    # @reg
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -44(%rbp)
	movq	-56(%rbp), %rax
	movl	$1, (%rax)
	cmpl	$0, -24(%rbp)
	je	.LBB174_4
# %bb.1:
	movq	-8(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB174_3
# %bb.2:
	movabsq	$.L.str.12.423, %rdi
	callq	sqd_regerror
	movq	$0, -40(%rbp)
	jmp	.LBB174_31
.LBB174_3:
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-8(%rbp), %rdi
	movl	-44(%rbp), %esi
	addl	$20, %esi
	callq	regnode
	movq	%rax, -32(%rbp)
.LBB174_4:
	leaq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	regbranch
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB174_6
# %bb.5:
	movq	$0, -40(%rbp)
	jmp	.LBB174_31
.LBB174_6:
	cmpl	$0, -24(%rbp)
	je	.LBB174_8
# %bb.7:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	regtail
	jmp	.LBB174_9
.LBB174_8:
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB174_9:
	movl	-20(%rbp), %eax
	xorl	$-1, %eax
	andl	$1, %eax
	xorl	$-1, %eax
	movq	-56(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	andl	$4, %eax
	movq	-56(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB174_10:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$124, %eax
	jne	.LBB174_14
# %bb.11:                               #   in Loop: Header=BB174_10 Depth=1
	leaq	-20(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-8(%rbp), %rdi
	callq	regbranch
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB174_13
# %bb.12:
	movq	$0, -40(%rbp)
	jmp	.LBB174_31
.LBB174_13:                             #   in Loop: Header=BB174_10 Depth=1
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	regtail
	movl	-20(%rbp), %eax
	xorl	$-1, %eax
	andl	$1, %eax
	xorl	$-1, %eax
	movq	-56(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	andl	$4, %eax
	movq	-56(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB174_10
.LBB174_14:
	movq	-8(%rbp), %rdi
	cmpl	$0, -24(%rbp)
	je	.LBB174_16
# %bb.15:
	movl	-44(%rbp), %esi
	addl	$30, %esi
	jmp	.LBB174_17
.LBB174_16:
	xorl	%esi, %esi
	jmp	.LBB174_17
.LBB174_17:
	callq	regnode
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	regtail
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB174_18:                             # =>This Inner Loop Header: Depth=1
	cmpq	$0, -16(%rbp)
	je	.LBB174_21
# %bb.19:                               #   in Loop: Header=BB174_18 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	regoptail
# %bb.20:                               #   in Loop: Header=BB174_18 Depth=1
	movq	-16(%rbp), %rdi
	callq	regnext
	movq	%rax, -16(%rbp)
	jmp	.LBB174_18
.LBB174_21:
	cmpl	$0, -24(%rbp)
	je	.LBB174_24
# %bb.22:
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, (%rax)
	movsbl	(%rcx), %eax
	cmpl	$41, %eax
	je	.LBB174_24
# %bb.23:
	movabsq	$.L.str.13.424, %rdi
	callq	sqd_regerror
	movq	$0, -40(%rbp)
	jmp	.LBB174_31
.LBB174_24:
	cmpl	$0, -24(%rbp)
	jne	.LBB174_29
# %bb.25:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB174_29
# %bb.26:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$41, %eax
	jne	.LBB174_28
# %bb.27:
	movabsq	$.L.str.14.425, %rdi
	callq	sqd_regerror
	movq	$0, -40(%rbp)
	jmp	.LBB174_31
.LBB174_28:
	movabsq	$.L.str.15.426, %rdi
	callq	sqd_regerror
	movq	$0, -40(%rbp)
	jmp	.LBB174_31
.LBB174_29:
	jmp	.LBB174_30
.LBB174_30:
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB174_31:
	movq	-40(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end174:
	.size	reg, .Lfunc_end174-reg
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regnode
	.type	regnode,@function
regnode:                                # @regnode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movb	%sil, -1(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rcx
	addq	$24, %rcx
	cmpq	%rcx, %rax
	jne	.LBB175_2
# %bb.1:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rcx
	addq	$3, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB175_3
.LBB175_2:
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movb	%al, (%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB175_3:
	movq	-40(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end175:
	.size	regnode, .Lfunc_end175-regnode
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regbranch
	.type	regbranch,@function
regbranch:                              # @regbranch
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rdi
	movl	$6, %esi
	callq	regnode
	movq	%rax, -56(%rbp)
	movq	$0, -24(%rbp)
.LBB176_1:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movsbl	(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$0, %ecx
	je	.LBB176_4
# %bb.2:                                #   in Loop: Header=BB176_1 Depth=1
	xorl	%eax, %eax
	cmpl	$124, -12(%rbp)
	je	.LBB176_4
# %bb.3:                                #   in Loop: Header=BB176_1 Depth=1
	cmpl	$41, -12(%rbp)
	setne	%al
.LBB176_4:                              #   in Loop: Header=BB176_1 Depth=1
	testb	$1, %al
	jne	.LBB176_5
	jmp	.LBB176_11
.LBB176_5:                              #   in Loop: Header=BB176_1 Depth=1
	leaq	-16(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	regpiece
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB176_7
# %bb.6:
	movq	$0, -48(%rbp)
	jmp	.LBB176_14
.LBB176_7:                              #   in Loop: Header=BB176_1 Depth=1
	movl	-16(%rbp), %eax
	andl	$1, %eax
	movq	-40(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	cmpq	$0, -24(%rbp)
	jne	.LBB176_9
# %bb.8:                                #   in Loop: Header=BB176_1 Depth=1
	movl	-16(%rbp), %eax
	andl	$4, %eax
	movq	-40(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB176_10
.LBB176_9:                              #   in Loop: Header=BB176_1 Depth=1
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	regtail
.LBB176_10:                             #   in Loop: Header=BB176_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB176_1
.LBB176_11:
	cmpq	$0, -24(%rbp)
	jne	.LBB176_13
# %bb.12:
	movq	-8(%rbp), %rdi
	movl	$9, %esi
	callq	regnode
.LBB176_13:
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB176_14:
	movq	-48(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end176:
	.size	regbranch, .Lfunc_end176-regbranch
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regtail
	.type	regtail,@function
regtail:                                # @regtail
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	addq	$24, %rcx
	cmpq	%rcx, %rax
	jne	.LBB177_2
# %bb.1:
	jmp	.LBB177_10
.LBB177_2:
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB177_3:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	regnext
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	je	.LBB177_6
# %bb.4:                                #   in Loop: Header=BB177_3 Depth=1
	jmp	.LBB177_5
.LBB177_5:                              #   in Loop: Header=BB177_3 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB177_3
.LBB177_6:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$7, %eax
	jne	.LBB177_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	jmp	.LBB177_9
.LBB177_8:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	subq	%rcx, %rax
.LBB177_9:
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	sarl	$8, %eax
	andl	$127, %eax
	movq	-8(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-12(%rbp), %eax
	andl	$255, %eax
	movq	-8(%rbp), %rcx
	movb	%al, 2(%rcx)
.LBB177_10:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end177:
	.size	regtail, .Lfunc_end177-regtail
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regoptail
	.type	regoptail,@function
regoptail:                              # @regoptail
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	$24, %rcx
	cmpq	%rcx, %rax
	je	.LBB178_2
# %bb.1:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$6, %eax
	je	.LBB178_3
.LBB178_2:
	jmp	.LBB178_4
.LBB178_3:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	addq	$3, %rsi
	movq	-24(%rbp), %rdx
	callq	regtail
.LBB178_4:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end178:
	.size	regoptail, .Lfunc_end178-regoptail
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regpiece
	.type	regpiece,@function
regpiece:                               # @regpiece
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$64, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	leaq	-44(%rbp), %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movq	-32(%rbp), %rdi
	movq	%rax, %rsi
	callq	regatom
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB179_2
# %bb.1:
	movq	$0, -64(%rbp)
	jmp	.LBB179_36
.LBB179_2:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movb	(%rax), %al
	movb	%al, -17(%rbp)
	movsbl	-17(%rbp), %eax
	cmpl	$42, %eax
	je	.LBB179_6
# %bb.3:
	movsbl	-17(%rbp), %eax
	cmpl	$43, %eax
	je	.LBB179_6
# %bb.4:
	movsbl	-17(%rbp), %eax
	cmpl	$63, %eax
	je	.LBB179_6
# %bb.5:
	movl	-44(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB179_36
.LBB179_6:
	movl	-44(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB179_9
# %bb.7:
	movsbl	-17(%rbp), %eax
	cmpl	$63, %eax
	je	.LBB179_9
# %bb.8:
	movabsq	$.L.str.16.427, %rdi
	callq	sqd_regerror
	movq	$0, -64(%rbp)
	jmp	.LBB179_36
.LBB179_9:
	movsbl	-17(%rbp), %eax
	movl	%eax, %ecx
	subl	$42, %ecx
	je	.LBB179_12
	jmp	.LBB179_10
.LBB179_10:
	movl	%eax, %ecx
	subl	$43, %ecx
	je	.LBB179_13
	jmp	.LBB179_11
.LBB179_11:
	subl	$63, %eax
	je	.LBB179_14
	jmp	.LBB179_15
.LBB179_12:
	movq	-72(%rbp), %rax
	movl	$4, (%rax)
	jmp	.LBB179_15
.LBB179_13:
	movq	-72(%rbp), %rax
	movl	$5, (%rax)
	jmp	.LBB179_15
.LBB179_14:
	movq	-72(%rbp), %rax
	movl	$0, (%rax)
.LBB179_15:
	movsbl	-17(%rbp), %eax
	cmpl	$42, %eax
	jne	.LBB179_18
# %bb.16:
	movl	-44(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB179_18
# %bb.17:
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movl	$10, %esi
	callq	reginsert
	jmp	.LBB179_31
.LBB179_18:
	movsbl	-17(%rbp), %eax
	cmpl	$42, %eax
	jne	.LBB179_20
# %bb.19:
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movl	$6, %esi
	callq	reginsert
	movq	-32(%rbp), %rbx
	movq	-40(%rbp), %r14
	movq	-32(%rbp), %rdi
	movl	$7, %esi
	callq	regnode
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	regoptail
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	regoptail
	movq	-32(%rbp), %rbx
	movq	-40(%rbp), %r14
	movq	-32(%rbp), %rdi
	movl	$6, %esi
	callq	regnode
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	regtail
	movq	-32(%rbp), %rbx
	movq	-40(%rbp), %r14
	movq	-32(%rbp), %rdi
	movl	$9, %esi
	callq	regnode
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	regtail
	jmp	.LBB179_30
.LBB179_20:
	movsbl	-17(%rbp), %eax
	cmpl	$43, %eax
	jne	.LBB179_23
# %bb.21:
	movl	-44(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB179_23
# %bb.22:
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movl	$11, %esi
	callq	reginsert
	jmp	.LBB179_29
.LBB179_23:
	movsbl	-17(%rbp), %eax
	cmpl	$43, %eax
	jne	.LBB179_25
# %bb.24:
	movq	-32(%rbp), %rdi
	movl	$6, %esi
	callq	regnode
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	regtail
	movq	-32(%rbp), %rbx
	movq	-32(%rbp), %rdi
	movl	$7, %esi
	callq	regnode
	movq	-40(%rbp), %rdx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	regtail
	movq	-32(%rbp), %rbx
	movq	-56(%rbp), %r14
	movq	-32(%rbp), %rdi
	movl	$6, %esi
	callq	regnode
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	regtail
	movq	-32(%rbp), %rbx
	movq	-40(%rbp), %r14
	movq	-32(%rbp), %rdi
	movl	$9, %esi
	callq	regnode
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	regtail
	jmp	.LBB179_28
.LBB179_25:
	movsbl	-17(%rbp), %eax
	cmpl	$63, %eax
	jne	.LBB179_27
# %bb.26:
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movl	$6, %esi
	callq	reginsert
	movq	-32(%rbp), %rbx
	movq	-40(%rbp), %r14
	movq	-32(%rbp), %rdi
	movl	$6, %esi
	callq	regnode
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	regtail
	movq	-32(%rbp), %rdi
	movl	$9, %esi
	callq	regnode
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	regtail
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	regoptail
.LBB179_27:
	jmp	.LBB179_28
.LBB179_28:
	jmp	.LBB179_29
.LBB179_29:
	jmp	.LBB179_30
.LBB179_30:
	jmp	.LBB179_31
.LBB179_31:
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$42, %eax
	je	.LBB179_34
# %bb.32:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$43, %eax
	je	.LBB179_34
# %bb.33:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$63, %eax
	jne	.LBB179_35
.LBB179_34:
	movabsq	$.L.str.17.428, %rdi
	callq	sqd_regerror
	movq	$0, -64(%rbp)
	jmp	.LBB179_36
.LBB179_35:
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB179_36:
	movq	-64(%rbp), %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end179:
	.size	regpiece, .Lfunc_end179-regpiece
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function regatom
	.type	regatom,@function
regatom:                                # @regatom
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, (%rax)
	movsbl	(%rcx), %eax
	testl	%eax, %eax
	je	.LBB180_44
	jmp	.LBB180_1
.LBB180_1:
	movl	%eax, %ecx
	subl	$36, %ecx
	je	.LBB180_12
	jmp	.LBB180_2
.LBB180_2:
	movl	%eax, %ecx
	subl	$40, %ecx
	je	.LBB180_41
	jmp	.LBB180_3
.LBB180_3:
	movl	%eax, %ecx
	subl	$41, %ecx
	je	.LBB180_44
	jmp	.LBB180_4
.LBB180_4:
	movl	%eax, %ecx
	addl	$-42, %ecx
	subl	$2, %ecx
	jb	.LBB180_45
	jmp	.LBB180_5
.LBB180_5:
	movl	%eax, %ecx
	subl	$46, %ecx
	je	.LBB180_13
	jmp	.LBB180_6
.LBB180_6:
	movl	%eax, %ecx
	subl	$63, %ecx
	je	.LBB180_45
	jmp	.LBB180_7
.LBB180_7:
	movl	%eax, %ecx
	subl	$91, %ecx
	je	.LBB180_14
	jmp	.LBB180_8
.LBB180_8:
	movl	%eax, %ecx
	subl	$92, %ecx
	je	.LBB180_46
	jmp	.LBB180_9
.LBB180_9:
	movl	%eax, %ecx
	subl	$94, %ecx
	je	.LBB180_11
	jmp	.LBB180_10
.LBB180_10:
	subl	$124, %eax
	je	.LBB180_44
	jmp	.LBB180_49
.LBB180_11:
	movq	-8(%rbp), %rdi
	movl	$1, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
	jmp	.LBB180_63
.LBB180_12:
	movq	-8(%rbp), %rdi
	movl	$2, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
	jmp	.LBB180_63
.LBB180_13:
	movq	-8(%rbp), %rdi
	movl	$3, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	orl	$3, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB180_63
.LBB180_14:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$94, %eax
	jne	.LBB180_16
# %bb.15:
	movq	-8(%rbp), %rdi
	movl	$5, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB180_17
.LBB180_16:
	movq	-8(%rbp), %rdi
	movl	$4, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
.LBB180_17:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	movl	%eax, -16(%rbp)
	cmpl	$93, %eax
	je	.LBB180_19
# %bb.18:
	cmpl	$45, -16(%rbp)
	jne	.LBB180_20
.LBB180_19:
	movq	-8(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	regc
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
.LBB180_20:
	jmp	.LBB180_21
.LBB180_21:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_32 Depth 2
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, (%rcx)
	movsbl	(%rdx), %ecx
	movl	%ecx, -16(%rbp)
	cmpl	$0, %ecx
	je	.LBB180_23
# %bb.22:                               #   in Loop: Header=BB180_21 Depth=1
	cmpl	$93, -16(%rbp)
	setne	%al
.LBB180_23:                             #   in Loop: Header=BB180_21 Depth=1
	testb	$1, %al
	jne	.LBB180_24
	jmp	.LBB180_38
.LBB180_24:                             #   in Loop: Header=BB180_21 Depth=1
	cmpl	$45, -16(%rbp)
	je	.LBB180_26
# %bb.25:                               #   in Loop: Header=BB180_21 Depth=1
	movq	-8(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	regc
	jmp	.LBB180_37
.LBB180_26:                             #   in Loop: Header=BB180_21 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	movl	%eax, -16(%rbp)
	cmpl	$93, %eax
	je	.LBB180_28
# %bb.27:                               #   in Loop: Header=BB180_21 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB180_29
.LBB180_28:                             #   in Loop: Header=BB180_21 Depth=1
	movq	-8(%rbp), %rdi
	movl	$45, %esi
	callq	regc
	jmp	.LBB180_36
.LBB180_29:                             #   in Loop: Header=BB180_21 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movzbl	-2(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movzbl	%al, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB180_31
# %bb.30:
	movabsq	$.L.str.18.429, %rdi
	callq	sqd_regerror
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_31:                             #   in Loop: Header=BB180_21 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB180_32:                             #   Parent Loop BB180_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jg	.LBB180_35
# %bb.33:                               #   in Loop: Header=BB180_32 Depth=2
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	regc
# %bb.34:                               #   in Loop: Header=BB180_32 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB180_32
.LBB180_35:                             #   in Loop: Header=BB180_21 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
.LBB180_36:                             #   in Loop: Header=BB180_21 Depth=1
	jmp	.LBB180_37
.LBB180_37:                             #   in Loop: Header=BB180_21 Depth=1
	jmp	.LBB180_21
.LBB180_38:
	movq	-8(%rbp), %rdi
	xorl	%esi, %esi
	callq	regc
	cmpl	$93, -16(%rbp)
	je	.LBB180_40
# %bb.39:
	movabsq	$.L.str.19.430, %rdi
	callq	sqd_regerror
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_40:
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	orl	$3, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB180_63
.LBB180_41:
	leaq	-64(%rbp), %rdx
	movq	-8(%rbp), %rdi
	movl	$1, %esi
	callq	reg
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB180_43
# %bb.42:
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_43:
	movl	-64(%rbp), %eax
	andl	$5, %eax
	movq	-56(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB180_63
.LBB180_44:
	movabsq	$.L.str.20.431, %rdi
	callq	sqd_regerror
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_45:
	movabsq	$.L.str.21.432, %rdi
	callq	sqd_regerror
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_46:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB180_48
# %bb.47:
	movabsq	$.L.str.22.433, %rdi
	callq	sqd_regerror
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_48:
	movq	-8(%rbp), %rdi
	movl	$8, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, (%rax)
	movsbl	(%rcx), %esi
	callq	regc
	movq	-8(%rbp), %rdi
	xorl	%esi, %esi
	callq	regc
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	orl	$3, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB180_63
.LBB180_49:
	movabsq	$.L.str.23.434, %rsi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, (%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	strcspn
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB180_51
# %bb.50:
	movabsq	$.L.str.24.435, %rdi
	callq	sqd_regerror
	movq	$0, -48(%rbp)
	jmp	.LBB180_64
.LBB180_51:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -9(%rbp)
	cmpq	$1, -32(%rbp)
	jbe	.LBB180_56
# %bb.52:
	movsbl	-9(%rbp), %eax
	cmpl	$42, %eax
	je	.LBB180_55
# %bb.53:
	movsbl	-9(%rbp), %eax
	cmpl	$43, %eax
	je	.LBB180_55
# %bb.54:
	movsbl	-9(%rbp), %eax
	cmpl	$63, %eax
	jne	.LBB180_56
.LBB180_55:
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB180_56:
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	cmpq	$1, -32(%rbp)
	jne	.LBB180_58
# %bb.57:
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
.LBB180_58:
	movq	-8(%rbp), %rdi
	movl	$8, %esi
	callq	regnode
	movq	%rax, -40(%rbp)
.LBB180_59:                             # =>This Inner Loop Header: Depth=1
	cmpq	$0, -32(%rbp)
	jbe	.LBB180_62
# %bb.60:                               #   in Loop: Header=BB180_59 Depth=1
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, (%rax)
	movsbl	(%rcx), %esi
	callq	regc
# %bb.61:                               #   in Loop: Header=BB180_59 Depth=1
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB180_59
.LBB180_62:
	movq	-8(%rbp), %rdi
	xorl	%esi, %esi
	callq	regc
.LBB180_63:
	movq	-40(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB180_64:
	movq	-48(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end180:
	.size	regatom, .Lfunc_end180-regatom
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reginsert
	.type	reginsert,@function
reginsert:                              # @reginsert
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movb	%sil, -1(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rcx
	addq	$24, %rcx
	cmpq	%rcx, %rax
	jne	.LBB181_2
# %bb.1:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rcx
	addq	$3, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_3
.LBB181_2:
	movq	-32(%rbp), %rdi
	addq	$3, %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-32(%rbp), %rax
	subq	%rax, %rdx
	callq	memmove
	movq	-24(%rbp), %rax
	movq	16(%rax), %rcx
	addq	$3, %rcx
	movq	%rcx, 16(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movb	%al, (%rcx)
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	$0, (%rax)
.LBB181_3:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end181:
	.size	reginsert, .Lfunc_end181-reginsert
	.cfi_endproc
                                        # -- End function
	.globl	SqdClean                # -- Begin function SqdClean
	.p2align	4, 0x90
	.type	SqdClean,@function
SqdClean:                               # @SqdClean
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB182_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jg	.LBB182_6
# %bb.2:                                #   in Loop: Header=BB182_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpq	$0, sqd_parse(,%rax,8)
	je	.LBB182_4
# %bb.3:                                #   in Loop: Header=BB182_1 Depth=1
	movslq	-4(%rbp), %rax
	movq	sqd_parse(,%rax,8), %rdi
	callq	free
	movslq	-4(%rbp), %rax
	movq	$0, sqd_parse(,%rax,8)
.LBB182_4:                              #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_5
.LBB182_5:                              #   in Loop: Header=BB182_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_1
.LBB182_6:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end182:
	.size	SqdClean, .Lfunc_end182-SqdClean
	.cfi_endproc
                                        # -- End function
	.globl	sqd_regsub              # -- Begin function sqd_regsub
	.p2align	4, 0x90
	.type	sqd_regsub,@function
sqd_regsub:                             # @sqd_regsub
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB183_3
# %bb.1:
	cmpq	$0, -56(%rbp)
	je	.LBB183_3
# %bb.2:
	cmpq	$0, -48(%rbp)
	jne	.LBB183_4
.LBB183_3:
	movabsq	$.L.str.8.438, %rdi
	callq	sqd_regerror
	jmp	.LBB183_30
.LBB183_4:
	movq	-24(%rbp), %rax
	movzbl	180(%rax), %eax
	cmpl	$156, %eax
	je	.LBB183_6
# %bb.5:
	movabsq	$.L.str.9.439, %rdi
	callq	sqd_regerror
	jmp	.LBB183_30
.LBB183_6:
	jmp	.LBB183_7
.LBB183_7:                              # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movsbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB183_29
# %bb.8:                                #   in Loop: Header=BB183_7 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$38, %eax
	jne	.LBB183_10
# %bb.9:                                #   in Loop: Header=BB183_7 Depth=1
	movl	$0, -8(%rbp)
	jmp	.LBB183_15
.LBB183_10:                             #   in Loop: Header=BB183_7 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$92, %eax
	jne	.LBB183_13
# %bb.11:                               #   in Loop: Header=BB183_7 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB183_13
# %bb.12:                               #   in Loop: Header=BB183_7 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_14
.LBB183_13:                             #   in Loop: Header=BB183_7 Depth=1
	movl	$-1, -8(%rbp)
.LBB183_14:                             #   in Loop: Header=BB183_7 Depth=1
	jmp	.LBB183_15
.LBB183_15:                             #   in Loop: Header=BB183_7 Depth=1
	cmpl	$0, -8(%rbp)
	jge	.LBB183_21
# %bb.16:                               #   in Loop: Header=BB183_7 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$92, %eax
	jne	.LBB183_20
# %bb.17:                               #   in Loop: Header=BB183_7 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$92, %eax
	je	.LBB183_19
# %bb.18:                               #   in Loop: Header=BB183_7 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$38, %eax
	jne	.LBB183_20
.LBB183_19:                             #   in Loop: Header=BB183_7 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	(%rax), %al
	movb	%al, -1(%rbp)
.LBB183_20:                             #   in Loop: Header=BB183_7 Depth=1
	movb	-1(%rbp), %al
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movb	%al, (%rcx)
	jmp	.LBB183_28
.LBB183_21:                             #   in Loop: Header=BB183_7 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB183_27
# %bb.22:                               #   in Loop: Header=BB183_7 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	cmpq	$0, 80(%rax,%rcx,8)
	je	.LBB183_27
# %bb.23:                               #   in Loop: Header=BB183_7 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	80(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jbe	.LBB183_27
# %bb.24:                               #   in Loop: Header=BB183_7 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	80(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-40(%rbp), %rdx
	callq	strncpy
	movq	-40(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movsbl	-1(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB183_26
# %bb.25:
	movabsq	$.L.str.10.440, %rdi
	callq	sqd_regerror
	jmp	.LBB183_30
.LBB183_26:                             #   in Loop: Header=BB183_7 Depth=1
	jmp	.LBB183_27
.LBB183_27:                             #   in Loop: Header=BB183_7 Depth=1
	jmp	.LBB183_28
.LBB183_28:                             #   in Loop: Header=BB183_7 Depth=1
	jmp	.LBB183_7
.LBB183_29:
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$0, (%rax)
.LBB183_30:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end183:
	.size	sqd_regsub, .Lfunc_end183-sqd_regsub
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XNU
.LCPI184_0:
	.quad	4604155999850424435     # double 0.66400000000000003
.LCPI184_1:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI184_2:
	.quad	4599914942066931129     # double 0.34657399999999999
.LCPI184_3:
	.quad	4576918229304087675     # double 0.01
.LCPI184_4:
	.quad	4602678819172646912     # double 0.5
.LCPI184_5:
	.quad	4562254508917369340     # double 0.001
	.text
	.globl	XNU
	.p2align	4, 0x90
	.type	XNU,@function
XNU:                                    # @XNU
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movsd	.LCPI184_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI184_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI184_2(%rip), %xmm2 # xmm2 = mem[0],zero
	movsd	.LCPI184_3(%rip), %xmm3 # xmm3 = mem[0],zero
	movq	%rdi, -88(%rbp)
	movl	%esi, -32(%rbp)
	movl	$4, -52(%rbp)
	movl	$1, -92(%rbp)
	movsd	%xmm3, -128(%rbp)
	movsd	%xmm2, -72(%rbp)
	movsd	%xmm1, -104(%rbp)
	movsd	%xmm0, -120(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB184_2
# %bb.1:
	movl	$0, -60(%rbp)
	jmp	.LBB184_44
.LBB184_2:
	movabsq	$.L.str.489, %rdi
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$100, %esi
	callq	sre_malloc
	movq	%rax, -40(%rbp)
	movl	$1, -4(%rbp)
.LBB184_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jg	.LBB184_6
# %bb.4:                                #   in Loop: Header=BB184_3 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB184_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_3
.LBB184_6:
	movsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	mulsd	-120(%rbp), %xmm0
	movl	-52(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	-104(%rbp), %xmm1
	divsd	%xmm1, %xmm0
	callq	log
	xorps	%xmm1, %xmm1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	%xmm0, %rcx
	xorq	%rax, %rcx
	movq	%rcx, %xmm0
	divsd	-72(%rbp), %xmm0
	movsd	%xmm0, -80(%rbp)
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	jbe	.LBB184_8
# %bb.7:
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -112(%rbp)       # 8-byte Spill
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	log
	movsd	.LCPI184_4(%rip), %xmm1 # xmm1 = mem[0],zero
	divsd	-72(%rbp), %xmm0
	movsd	-112(%rbp), %xmm2       # 8-byte Reload
                                        # xmm2 = mem[0],zero
	addsd	%xmm0, %xmm2
	addsd	%xmm1, %xmm2
	movaps	%xmm2, %xmm0
	callq	floor
	cvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB184_9
.LBB184_8:
	movl	$0, -48(%rbp)
.LBB184_9:
	movsd	.LCPI184_5(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	divsd	%xmm1, %xmm0
	callq	log
	cvttsd2si	%xmm0, %eax
	cvtsi2sdl	%eax, %xmm0
	divsd	-72(%rbp), %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -56(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB184_10:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_12 Depth 2
                                        #       Child Loop BB184_18 Depth 3
                                        #     Child Loop BB184_31 Depth 2
	movl	-20(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jg	.LBB184_37
# %bb.11:                               #   in Loop: Header=BB184_10 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB184_12:                             #   Parent Loop BB184_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB184_18 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jg	.LBB184_29
# %bb.13:                               #   in Loop: Header=BB184_12 Depth=2
	movabsq	$xpam120, %rax
	movq	-88(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movq	-88(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB184_15
# %bb.14:                               #   in Loop: Header=BB184_12 Depth=2
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB184_15:                             #   in Loop: Header=BB184_12 Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB184_22
# %bb.16:                               #   in Loop: Header=BB184_12 Depth=2
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jle	.LBB184_22
# %bb.17:                               #   in Loop: Header=BB184_12 Depth=2
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB184_18:                             #   Parent Loop BB184_10 Depth=1
                                        #     Parent Loop BB184_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB184_21
# %bb.19:                               #   in Loop: Header=BB184_18 Depth=3
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$1, (%rax,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
# %bb.20:                               #   in Loop: Header=BB184_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB184_18
.LBB184_21:                             #   in Loop: Header=BB184_12 Depth=2
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
	jmp	.LBB184_25
.LBB184_22:                             #   in Loop: Header=BB184_12 Depth=2
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jle	.LBB184_24
# %bb.23:                               #   in Loop: Header=BB184_12 Depth=2
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB184_24:                             #   in Loop: Header=BB184_12 Depth=2
	jmp	.LBB184_25
.LBB184_25:                             #   in Loop: Header=BB184_12 Depth=2
	cmpl	$0, -12(%rbp)
	jge	.LBB184_27
# %bb.26:                               #   in Loop: Header=BB184_12 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB184_27:                             #   in Loop: Header=BB184_12 Depth=2
	jmp	.LBB184_28
.LBB184_28:                             #   in Loop: Header=BB184_12 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_12
.LBB184_29:                             #   in Loop: Header=BB184_10 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB184_35
# %bb.30:                               #   in Loop: Header=BB184_10 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB184_31:                             #   Parent Loop BB184_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB184_34
# %bb.32:                               #   in Loop: Header=BB184_31 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$1, (%rax,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
# %bb.33:                               #   in Loop: Header=BB184_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB184_31
.LBB184_34:                             #   in Loop: Header=BB184_10 Depth=1
	jmp	.LBB184_35
.LBB184_35:                             #   in Loop: Header=BB184_10 Depth=1
	jmp	.LBB184_36
.LBB184_36:                             #   in Loop: Header=BB184_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB184_10
.LBB184_37:
	movl	$1, -4(%rbp)
.LBB184_38:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jg	.LBB184_43
# %bb.39:                               #   in Loop: Header=BB184_38 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB184_41
# %bb.40:                               #   in Loop: Header=BB184_38 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	Alphabet_iupac, %eax
	subl	$1, %eax
	movq	-88(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB184_41:                             #   in Loop: Header=BB184_38 Depth=1
	jmp	.LBB184_42
.LBB184_42:                             #   in Loop: Header=BB184_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_38
.LBB184_43:
	movq	-40(%rbp), %rdi
	callq	free
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB184_44:
	movl	-60(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end184:
	.size	XNU, .Lfunc_end184-XNU
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function TraceScoreCorrection
.LCPI185_0:
	.quad	4665518107723300864     # double 8000
	.text
	.globl	TraceScoreCorrection
	.p2align	4, 0x90
	.type	TraceScoreCorrection,@function
TraceScoreCorrection:                   # @TraceScoreCorrection
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB185_2
# %bb.1:
	xorps	%xmm0, %xmm0
	movss	%xmm0, -28(%rbp)
	jmp	.LBB185_27
.LBB185_2:
	leaq	-128(%rbp), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -4(%rbp)
.LBB185_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB185_11
# %bb.4:                                #   in Loop: Header=BB185_3 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB185_6
# %bb.5:                                #   in Loop: Header=BB185_3 Depth=1
	leaq	-128(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	Alphabet_size, %edx
	callq	FAdd
	jmp	.LBB185_9
.LBB185_6:                              #   in Loop: Header=BB185_3 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB185_8
# %bb.7:                                #   in Loop: Header=BB185_3 Depth=1
	leaq	-128(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	160(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	Alphabet_size, %edx
	callq	FAdd
.LBB185_8:                              #   in Loop: Header=BB185_3 Depth=1
	jmp	.LBB185_9
.LBB185_9:                              #   in Loop: Header=BB185_3 Depth=1
	jmp	.LBB185_10
.LBB185_10:                             #   in Loop: Header=BB185_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_3
.LBB185_11:
	leaq	-128(%rbp), %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
	movl	$0, -8(%rbp)
.LBB185_12:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB185_15
# %bb.13:                               #   in Loop: Header=BB185_12 Depth=1
	movslq	-8(%rbp), %rax
	movss	-128(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movslq	-8(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
# %bb.14:                               #   in Loop: Header=BB185_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_12
.LBB185_15:
	movl	Alphabet_size, %eax
	movl	%eax, -8(%rbp)
.LBB185_16:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB185_19
# %bb.17:                               #   in Loop: Header=BB185_16 Depth=1
	leaq	-128(%rbp), %rdi
	movq	-40(%rbp), %rsi
	addq	$224, %rsi
	movl	-8(%rbp), %edx
	callq	DegenerateSymbolScore
	movslq	-8(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
# %bb.18:                               #   in Loop: Header=BB185_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_16
.LBB185_19:
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB185_20:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB185_26
# %bb.21:                               #   in Loop: Header=BB185_20 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	je	.LBB185_23
# %bb.22:                               #   in Loop: Header=BB185_20 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB185_24
.LBB185_23:                             #   in Loop: Header=BB185_20 Depth=1
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movl	-224(%rbp,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB185_24:                             #   in Loop: Header=BB185_20 Depth=1
	jmp	.LBB185_25
.LBB185_25:                             #   in Loop: Header=BB185_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_20
.LBB185_26:
	movsd	.LCPI185_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	subsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %esi
	xorl	%edi, %edi
	callq	ILogsum
	movl	%eax, %edi
	callq	Scorify
	movss	%xmm0, -28(%rbp)
.LBB185_27:
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end185:
	.size	TraceScoreCorrection, .Lfunc_end185-TraceScoreCorrection
	.cfi_endproc
                                        # -- End function
	.globl	SantaCruzCorrection     # -- Begin function SantaCruzCorrection
	.p2align	4, 0x90
	.type	SantaCruzCorrection,@function
SantaCruzCorrection:                    # @SantaCruzCorrection
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	xorps	%xmm0, %xmm0
	popq	%rbp
	retq
.Lfunc_end186:
	.size	SantaCruzCorrection, .Lfunc_end186-SantaCruzCorrection
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Prob2Score
.LCPI187_0:
	.quad	-4556649414143246336    # double -9999
.LCPI187_1:
	.quad	4609176140017200175     # double 1.44269504
.LCPI187_2:
	.quad	4602678819172646912     # double 0.5
.LCPI187_3:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	Prob2Score
	.p2align	4, 0x90
	.type	Prob2Score,@function
Prob2Score:                             # @Prob2Score
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorps	%xmm2, %xmm2
	movss	%xmm0, -4(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm2, %xmm0
	jne	.LBB187_2
	jp	.LBB187_2
# %bb.1:
	movl	$-987654321, -12(%rbp)  # imm = 0xC521974F
	jmp	.LBB187_6
.LBB187_2:
	xorps	%xmm0, %xmm0
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	divss	-8(%rbp), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB187_4
# %bb.3:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	divss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI187_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB187_5
.LBB187_4:
	movsd	.LCPI187_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB187_5
.LBB187_5:
	movsd	.LCPI187_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI187_3(%rip), %xmm2 # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	%xmm2, %xmm1
	movaps	%xmm1, %xmm0
	callq	floor
	cvttsd2si	%xmm0, %eax
	movl	%eax, -12(%rbp)
.LBB187_6:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end187:
	.size	Prob2Score, .Lfunc_end187-Prob2Score
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Score2Prob
.LCPI188_0:
	.quad	4604418534308398236     # double 0.69314717999999997
.LCPI188_1:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	Score2Prob
	.p2align	4, 0x90
	.type	Score2Prob,@function
Score2Prob:                             # @Score2Prob
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -4(%rbp)
	movss	%xmm0, -12(%rbp)
	cmpl	$-987654321, -4(%rbp)   # imm = 0xC521974F
	jne	.LBB188_2
# %bb.1:
	xorps	%xmm0, %xmm0
	movss	%xmm0, -8(%rbp)
	jmp	.LBB188_3
.LBB188_2:
	movsd	.LCPI188_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI188_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm2, %xmm0
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -8(%rbp)
.LBB188_3:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end188:
	.size	Score2Prob, .Lfunc_end188-Score2Prob
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Scorify
.LCPI189_0:
	.quad	4652007308841189376     # double 1000
	.text
	.globl	Scorify
	.p2align	4, 0x90
	.type	Scorify,@function
Scorify:                                # @Scorify
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movsd	.LCPI189_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	popq	%rbp
	retq
.Lfunc_end189:
	.size	Scorify, .Lfunc_end189-Scorify
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PValue
.LCPI190_0:
	.quad	4609176140017200175     # double 1.44269504
.LCPI190_1:
	.quad	9218868437227405311     # double 1.7976931348623157E+308
.LCPI190_2:
	.quad	-4616189618054758400    # double -1
.LCPI190_3:
	.quad	4607182418800017408     # double 1
.LCPI190_4:
	.quad	4604418534308398236     # double 0.69314717999999997
	.text
	.globl	PValue
	.p2align	4, 0x90
	.type	PValue,@function
PValue:                                 # @PValue
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movsd	.LCPI190_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	%rdi, -24(%rbp)
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movaps	%xmm1, %xmm0
	callq	log
	movsd	.LCPI190_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jb	.LBB190_2
# %bb.1:
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -16(%rbp)
	jmp	.LBB190_6
.LBB190_2:
	movsd	.LCPI190_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movsd	%xmm1, -32(%rbp)        # 8-byte Spill
	callq	log
	movsd	.LCPI190_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI190_0(%rip), %xmm2 # xmm2 = mem[0],zero
	mulsd	%xmm2, %xmm0
	mulsd	%xmm0, %xmm1
	ucomisd	-32(%rbp), %xmm1        # 8-byte Folded Reload
	jb	.LBB190_4
# %bb.3:
	movsd	.LCPI190_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
	jmp	.LBB190_5
.LBB190_4:
	movsd	.LCPI190_4(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	mulsd	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI190_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movaps	%xmm1, %xmm2
	addsd	%xmm0, %xmm2
	divsd	%xmm2, %xmm1
	movsd	%xmm1, -16(%rbp)
.LBB190_5:
	jmp	.LBB190_6
.LBB190_6:
	cmpq	$0, -24(%rbp)
	je	.LBB190_11
# %bb.7:
	movq	-24(%rbp), %rax
	movl	456(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB190_11
# %bb.8:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	448(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	452(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	ExtremeValueP
	movsd	%xmm0, -40(%rbp)
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB190_10
# %bb.9:
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
.LBB190_10:
	jmp	.LBB190_11
.LBB190_11:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end190:
	.size	PValue, .Lfunc_end190-PValue
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function LogSum
.LCPI191_0:
	.quad	4632233691727265792     # double 50
.LCPI191_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	LogSum
	.p2align	4, 0x90
	.type	LogSum,@function
LogSum:                                 # @LogSum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movss	%xmm0, -8(%rbp)
	movss	%xmm1, -4(%rbp)
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	ucomiss	-4(%rbp), %xmm0
	jbe	.LBB191_5
# %bb.1:
	movsd	.LCPI191_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	subss	-4(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB191_3
# %bb.2:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	jmp	.LBB191_4
.LBB191_3:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movsd	.LCPI191_1(%rip), %xmm1 # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
.LBB191_4:
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -12(%rbp)
	jmp	.LBB191_9
.LBB191_5:
	movsd	.LCPI191_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB191_7
# %bb.6:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	jmp	.LBB191_8
.LBB191_7:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	subss	-4(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movsd	.LCPI191_1(%rip), %xmm1 # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
.LBB191_8:
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -12(%rbp)
.LBB191_9:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end191:
	.size	LogSum, .Lfunc_end191-LogSum
	.cfi_endproc
                                        # -- End function
	.globl	ILogsum                 # -- Begin function ILogsum
	.p2align	4, 0x90
	.type	ILogsum,@function
ILogsum:                                # @ILogsum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	cmpl	$0, ILogsum.firsttime
	je	.LBB192_2
# %bb.1:
	callq	init_ilogsum
	movl	$0, ILogsum.firsttime
.LBB192_2:
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$20000, -4(%rbp)        # imm = 0x4E20
	jl	.LBB192_4
# %bb.3:
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_9
.LBB192_4:
	cmpl	$-20000, -4(%rbp)       # imm = 0xB1E0
	jg	.LBB192_6
# %bb.5:
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_9
.LBB192_6:
	cmpl	$0, -4(%rbp)
	jle	.LBB192_8
# %bb.7:
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	ilogsum_lookup(,%rcx,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB192_9
.LBB192_8:
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	subl	-4(%rbp), %eax
	cltq
	addl	ilogsum_lookup(,%rax,4), %ecx
	movl	%ecx, -8(%rbp)
.LBB192_9:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end192:
	.size	ILogsum, .Lfunc_end192-ILogsum
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_ilogsum
.LCPI193_0:
	.quad	4654059855333610918     # double 1442.6950400000001
.LCPI193_1:
	.quad	4607182418800017408     # double 1
.LCPI193_2:
	.quad	4652007308841189376     # double 1000
.LCPI193_3:
	.quad	4604418534308398236     # double 0.69314717999999997
	.text
	.p2align	4, 0x90
	.type	init_ilogsum,@function
init_ilogsum:                           # @init_ilogsum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB193_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$20000, -4(%rbp)        # imm = 0x4E20
	jge	.LBB193_4
# %bb.2:                                #   in Loop: Header=BB193_1 Depth=1
	movsd	.LCPI193_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI193_3(%rip), %xmm0 # xmm0 = mem[0],zero
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm2, %xmm0
	divsd	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI193_1(%rip), %xmm1 # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movsd	.LCPI193_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, ilogsum_lookup(,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB193_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_1
.LBB193_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end193:
	.size	init_ilogsum, .Lfunc_end193-init_ilogsum
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function LogNorm
.LCPI194_0:
	.long	4048155338              # float -1.00000002E+30
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI194_1:
	.quad	4632233691727265792     # double 50
	.text
	.globl	LogNorm
	.p2align	4, 0x90
	.type	LogNorm,@function
LogNorm:                                # @LogNorm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorps	%xmm0, %xmm0
	movss	.LCPI194_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	%xmm0, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB194_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB194_6
# %bb.2:                                #   in Loop: Header=BB194_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	ucomiss	-8(%rbp), %xmm0
	jbe	.LBB194_4
# %bb.3:                                #   in Loop: Header=BB194_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
.LBB194_4:                              #   in Loop: Header=BB194_1 Depth=1
	jmp	.LBB194_5
.LBB194_5:                              #   in Loop: Header=BB194_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_1
.LBB194_6:
	movl	$0, -4(%rbp)
.LBB194_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB194_12
# %bb.8:                                #   in Loop: Header=BB194_7 Depth=1
	movsd	.LCPI194_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB194_10
# %bb.9:                                #   in Loop: Header=BB194_7 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movss	-20(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -20(%rbp)
.LBB194_10:                             #   in Loop: Header=BB194_7 Depth=1
	jmp	.LBB194_11
.LBB194_11:                             #   in Loop: Header=BB194_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_7
.LBB194_12:
	movl	$0, -4(%rbp)
.LBB194_13:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB194_19
# %bb.14:                               #   in Loop: Header=BB194_13 Depth=1
	movsd	.LCPI194_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB194_16
# %bb.15:                               #   in Loop: Header=BB194_13 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movss	-20(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB194_17
.LBB194_16:                             #   in Loop: Header=BB194_13 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB194_17:                             #   in Loop: Header=BB194_13 Depth=1
	jmp	.LBB194_18
.LBB194_18:                             #   in Loop: Header=BB194_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_13
.LBB194_19:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end194:
	.size	LogNorm, .Lfunc_end194-LogNorm
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Logp_cvec
.LCPI195_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Logp_cvec
	.p2align	4, 0x90
	.type	Logp_cvec,@function
Logp_cvec:                              # @Logp_cvec
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -32(%rbp)
	movss	%xmm0, -4(%rbp)
	movss	%xmm0, -12(%rbp)
	movss	%xmm0, -16(%rbp)
	movss	%xmm0, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB195_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB195_4
# %bb.2:                                #   in Loop: Header=BB195_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	addss	-20(%rbp), %xmm0
	movss	%xmm0, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-16(%rbp), %xmm0
	movss	%xmm0, -16(%rbp)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-12(%rbp), %xmm0
	movss	%xmm0, -12(%rbp)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	Gammln
	movsd	.LCPI195_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-4(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm0, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	movss	%xmm0, -4(%rbp)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	addsd	%xmm1, %xmm0
	callq	Gammln
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -4(%rbp)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	Gammln
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -4(%rbp)
# %bb.3:                                #   in Loop: Header=BB195_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_1
.LBB195_4:
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	Gammln
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -4(%rbp)
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	Gammln
	movsd	.LCPI195_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-4(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm0, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	movss	%xmm0, -4(%rbp)
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	addsd	%xmm1, %xmm0
	callq	Gammln
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end195:
	.size	Logp_cvec, .Lfunc_end195-Logp_cvec
	.cfi_endproc
                                        # -- End function
	.globl	SampleDirichlet         # -- Begin function SampleDirichlet
	.p2align	4, 0x90
	.type	SampleDirichlet,@function
SampleDirichlet:                        # @SampleDirichlet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB196_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB196_4
# %bb.2:                                #   in Loop: Header=BB196_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	callq	SampleGamma
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB196_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_1
.LBB196_4:
	movq	-16(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	FNorm
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end196:
	.size	SampleDirichlet, .Lfunc_end196-SampleDirichlet
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SampleGamma
.LCPI197_0:
	.quad	4607182418800017408     # double 1
.LCPI197_2:
	.quad	4611686018427387904     # double 2
.LCPI197_3:
	.quad	4598175219545276416     # double 0.25
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI197_1:
	.long	1065353216              # float 1
	.text
	.globl	SampleGamma
	.p2align	4, 0x90
	.type	SampleGamma,@function
SampleGamma:                            # @SampleGamma
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movsd	.LCPI197_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm1, %xmm0
	jb	.LBB197_5
# %bb.1:
	jmp	.LBB197_2
.LBB197_2:                              # =>This Inner Loop Header: Depth=1
	movsd	.LCPI197_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI197_2(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-4(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm2, %xmm0
	subsd	%xmm1, %xmm0
	callq	sqrt
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
	callq	sre_random
	movss	.LCPI197_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -28(%rbp)
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movaps	%xmm1, %xmm2
	subss	-28(%rbp), %xmm2
	divss	%xmm2, %xmm0
	movss	%xmm0, -12(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	divss	-36(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	callq	pow
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -8(%rbp)
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movd	%xmm0, %eax
	xorl	$2147483648, %eax       # imm = 0x80000000
	movd	%eax, %xmm0
	addss	-4(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movsd	.LCPI197_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI197_3(%rip), %xmm2 # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	movsd	%xmm2, -24(%rbp)        # 8-byte Spill
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movss	-4(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm2
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm2, %xmm1
	callq	pow
	movsd	.LCPI197_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI197_0(%rip), %xmm2 # xmm2 = mem[0],zero
	movsd	-24(%rbp), %xmm3        # 8-byte Reload
                                        # xmm3 = mem[0],zero
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, -24(%rbp)        # 8-byte Spill
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm2, %xmm3
	divsd	%xmm0, %xmm3
	addsd	%xmm3, %xmm2
	movaps	%xmm2, %xmm0
	callq	pow
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -52(%rbp)
	callq	sre_random
	movss	-52(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB197_4
# %bb.3:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)
	jmp	.LBB197_17
.LBB197_4:                              #   in Loop: Header=BB197_2 Depth=1
	jmp	.LBB197_2
.LBB197_5:
	xorps	%xmm0, %xmm0
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB197_15
# %bb.6:
	jmp	.LBB197_7
.LBB197_7:                              # =>This Inner Loop Header: Depth=1
	callq	sre_random
	movsd	.LCPI197_0(%rip), %xmm1 # xmm1 = mem[0],zero
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -28(%rbp)
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI197_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-48(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	divsd	%xmm0, %xmm2
	movaps	%xmm1, %xmm0
	addsd	%xmm2, %xmm0
	movsd	-24(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	movss	%xmm0, -12(%rbp)
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm1, %xmm0
	jbe	.LBB197_11
# %bb.8:                                #   in Loop: Header=BB197_7 Depth=1
	movsd	.LCPI197_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	.LCPI197_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	subss	-12(%rbp), %xmm1
	cvtss2sd	%xmm1, %xmm1
	movsd	%xmm1, -24(%rbp)        # 8-byte Spill
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movsd	%xmm1, -48(%rbp)        # 8-byte Spill
	callq	exp
	movsd	-48(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	divsd	%xmm0, %xmm2
	movsd	-24(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm2, %xmm1
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	log
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	%xmm0, %rcx
	xorq	%rax, %rcx
	movq	%rcx, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -8(%rbp)
	callq	sre_random
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movsd	.LCPI197_0(%rip), %xmm2 # xmm2 = mem[0],zero
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm2, %xmm1
	callq	pow
	ucomisd	-24(%rbp), %xmm0        # 8-byte Folded Reload
	jb	.LBB197_10
# %bb.9:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)
	jmp	.LBB197_17
.LBB197_10:                             #   in Loop: Header=BB197_7 Depth=1
	jmp	.LBB197_14
.LBB197_11:                             #   in Loop: Header=BB197_7 Depth=1
	movsd	.LCPI197_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movss	-4(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	divsd	%xmm2, %xmm1
	callq	pow
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -8(%rbp)
	callq	sre_random
	movsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movd	%xmm0, %eax
	xorl	$2147483648, %eax       # imm = 0x80000000
	movd	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	ucomisd	-24(%rbp), %xmm0        # 8-byte Folded Reload
	jb	.LBB197_13
# %bb.12:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)
	jmp	.LBB197_17
.LBB197_13:                             #   in Loop: Header=BB197_7 Depth=1
	jmp	.LBB197_14
.LBB197_14:                             #   in Loop: Header=BB197_7 Depth=1
	jmp	.LBB197_7
.LBB197_15:
	jmp	.LBB197_16
.LBB197_16:
	movabsq	$.L.str.502, %rdi
	movb	$0, %al
	callq	Die
	xorps	%xmm0, %xmm0
	movss	%xmm0, -32(%rbp)
.LBB197_17:
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end197:
	.size	SampleGamma, .Lfunc_end197-SampleGamma
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SampleCountvector
.LCPI198_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	SampleCountvector
	.p2align	4, 0x90
	.type	SampleCountvector,@function
SampleCountvector:                      # @SampleCountvector
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -40(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	movl	-16(%rbp), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -12(%rbp)
.LBB198_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB198_4
# %bb.2:                                #   in Loop: Header=BB198_1 Depth=1
	movq	-32(%rbp), %rbx
	movq	-40(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	FChoose
	movsd	.LCPI198_0(%rip), %xmm0 # xmm0 = mem[0],zero
	cltq
	movss	(%rbx,%rax,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, (%rbx,%rax,4)
# %bb.3:                                #   in Loop: Header=BB198_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_1
.LBB198_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end198:
	.size	SampleCountvector, .Lfunc_end198-SampleCountvector
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function P_PvecGivenDirichlet
.LCPI199_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	P_PvecGivenDirichlet
	.p2align	4, 0x90
	.type	P_PvecGivenDirichlet,@function
P_PvecGivenDirichlet:                   # @P_PvecGivenDirichlet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -24(%rbp)
	movss	%xmm0, -8(%rbp)
	movss	%xmm0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB199_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_6
# %bb.2:                                #   in Loop: Header=BB199_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB199_4
# %bb.3:                                #   in Loop: Header=BB199_1 Depth=1
	movsd	.LCPI199_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -48(%rbp)        # 8-byte Spill
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	addsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	Gammln
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-12(%rbp), %xmm0
	movss	%xmm0, -12(%rbp)
.LBB199_4:                              #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_5
.LBB199_5:                              #   in Loop: Header=BB199_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_1
.LBB199_6:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	Gammln
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -8(%rbp)
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end199:
	.size	P_PvecGivenDirichlet, .Lfunc_end199-P_PvecGivenDirichlet
	.cfi_endproc
                                        # -- End function
	.globl	HMMERBanner             # -- Begin function HMMERBanner
	.p2align	4, 0x90
	.type	HMMERBanner,@function
HMMERBanner:                            # @HMMERBanner
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.505, %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rax, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.1.506, %rsi
	movabsq	$.L.str.2.507, %rdx
	movabsq	$.L.str.3.508, %rcx
	movabsq	$.L.str.4.509, %r8
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.505, %rsi
	movabsq	$.L.str.5.510, %rdx
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.505, %rsi
	movabsq	$.L.str.6.511, %rdx
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.7.512, %rsi
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end200:
	.size	HMMERBanner, .Lfunc_end200-HMMERBanner
	.cfi_endproc
                                        # -- End function
	.globl	Getword                 # -- Begin function Getword
	.p2align	4, 0x90
	.type	Getword,@function
Getword:                                # @Getword
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -4(%rbp)
	cmpq	$0, Getword.sptr
	je	.LBB201_2
# %bb.1:
	movabsq	$.L.str.8.515, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, Getword.sptr
.LBB201_2:
	jmp	.LBB201_3
.LBB201_3:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, Getword.sptr
	jne	.LBB201_9
# %bb.4:                                #   in Loop: Header=BB201_3 Depth=1
	movabsq	$Getword.buffer, %rdi
	movq	-24(%rbp), %rdx
	movl	$512, %esi              # imm = 0x200
	callq	fgets
	movq	%rax, Getword.sptr
	cmpq	$0, %rax
	jne	.LBB201_6
# %bb.5:
	movq	$0, -16(%rbp)
	jmp	.LBB201_22
.LBB201_6:                              #   in Loop: Header=BB201_3 Depth=1
	movabsq	$Getword.buffer, %rdi
	movl	$35, %esi
	callq	strchr
	movq	%rax, Getword.sptr
	cmpq	$0, %rax
	je	.LBB201_8
# %bb.7:                                #   in Loop: Header=BB201_3 Depth=1
	movq	Getword.sptr, %rax
	movb	$0, (%rax)
.LBB201_8:                              #   in Loop: Header=BB201_3 Depth=1
	movabsq	$Getword.buffer, %rdi
	movabsq	$.L.str.8.515, %rsi
	callq	strtok
	movq	%rax, Getword.sptr
	jmp	.LBB201_3
.LBB201_9:
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB201_15
	jmp	.LBB201_10
.LBB201_10:
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB201_18
	jmp	.LBB201_11
.LBB201_11:
	subl	$4, %eax
	jne	.LBB201_21
	jmp	.LBB201_12
.LBB201_12:
	movq	Getword.sptr, %rdi
	callq	strlen
	cmpq	$0, %rax
	jne	.LBB201_14
# %bb.13:
	movabsq	$.L.str.9.516, %rdi
	movb	$0, %al
	callq	Warn
	movq	$0, Getword.sptr
.LBB201_14:
	jmp	.LBB201_21
.LBB201_15:
	movq	Getword.sptr, %rdi
	callq	IsInt
	cmpl	$0, %eax
	jne	.LBB201_17
# %bb.16:
	movabsq	$.L.str.10.517, %rdi
	movq	Getword.sptr, %rsi
	movb	$0, %al
	callq	Warn
	movq	$0, Getword.sptr
.LBB201_17:
	jmp	.LBB201_21
.LBB201_18:
	movq	Getword.sptr, %rdi
	callq	IsReal
	cmpl	$0, %eax
	jne	.LBB201_20
# %bb.19:
	movabsq	$.L.str.11.518, %rdi
	movq	Getword.sptr, %rsi
	movb	$0, %al
	callq	Warn
	movq	$0, Getword.sptr
.LBB201_20:
	jmp	.LBB201_21
.LBB201_21:
	movq	Getword.sptr, %rax
	movq	%rax, -16(%rbp)
.LBB201_22:
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end201:
	.size	Getword, .Lfunc_end201-Getword
	.cfi_endproc
                                        # -- End function
	.globl	Getline                 # -- Begin function Getline
	.p2align	4, 0x90
	.type	Getline,@function
Getline:                                # @Getline
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -40(%rbp)
.LBB202_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_4 Depth 2
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-40(%rbp), %rdx
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB202_3
# %bb.2:
	movq	$0, -32(%rbp)
	jmp	.LBB202_11
.LBB202_3:                              #   in Loop: Header=BB202_1 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB202_4:                              #   Parent Loop BB202_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB202_6
# %bb.5:                                #   in Loop: Header=BB202_4 Depth=2
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB202_4
.LBB202_6:                              #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_7
.LBB202_7:                              #   in Loop: Header=BB202_1 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$35, %ecx
	je	.LBB202_9
# %bb.8:                                #   in Loop: Header=BB202_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	sete	%al
.LBB202_9:                              #   in Loop: Header=BB202_1 Depth=1
	testb	$1, %al
	jne	.LBB202_1
# %bb.10:
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB202_11:
	movq	-32(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end202:
	.size	Getline, .Lfunc_end202-Getline
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SetAutocuts
.LCPI203_0:
	.quad	5183643170566569984     # double 3.4028234663852886E+38
	.text
	.globl	SetAutocuts
	.p2align	4, 0x90
	.type	SetAutocuts,@function
SetAutocuts:                            # @SetAutocuts
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$1, 32(%rax)
	jne	.LBB203_4
# %bb.1:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	jne	.LBB203_3
# %bb.2:
	movl	$0, -20(%rbp)
	jmp	.LBB203_15
.LBB203_3:
	movsd	.LCPI203_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movss	112(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, (%rax)
	movq	-16(%rbp), %rax
	movss	116(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, 16(%rax)
	movq	-8(%rbp), %rax
	movsd	%xmm0, 24(%rax)
	movq	-8(%rbp), %rax
	movsd	%xmm0, 8(%rax)
	jmp	.LBB203_14
.LBB203_4:
	movq	-8(%rbp), %rax
	cmpl	$2, 32(%rax)
	jne	.LBB203_8
# %bb.5:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4096, %eax             # imm = 0x1000
	cmpl	$0, %eax
	jne	.LBB203_7
# %bb.6:
	movl	$0, -20(%rbp)
	jmp	.LBB203_15
.LBB203_7:
	movsd	.LCPI203_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movss	128(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, (%rax)
	movq	-16(%rbp), %rax
	movss	132(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, 16(%rax)
	movq	-8(%rbp), %rax
	movsd	%xmm0, 24(%rax)
	movq	-8(%rbp), %rax
	movsd	%xmm0, 8(%rax)
	jmp	.LBB203_13
.LBB203_8:
	movq	-8(%rbp), %rax
	cmpl	$3, 32(%rax)
	jne	.LBB203_12
# %bb.9:
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB203_11
# %bb.10:
	movl	$0, -20(%rbp)
	jmp	.LBB203_15
.LBB203_11:
	movsd	.LCPI203_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movss	120(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, (%rax)
	movq	-16(%rbp), %rax
	movss	124(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, 16(%rax)
	movq	-8(%rbp), %rax
	movsd	%xmm0, 24(%rax)
	movq	-8(%rbp), %rax
	movsd	%xmm0, 8(%rax)
.LBB203_12:
	jmp	.LBB203_13
.LBB203_13:
	jmp	.LBB203_14
.LBB203_14:
	movl	$1, -20(%rbp)
.LBB203_15:
	movl	-20(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end203:
	.size	SetAutocuts, .Lfunc_end203-SetAutocuts
	.cfi_endproc
                                        # -- End function
	.globl	P7Handmodelmaker        # -- Begin function P7Handmodelmaker
	.p2align	4, 0x90
	.type	P7Handmodelmaker,@function
P7Handmodelmaker:                       # @P7Handmodelmaker
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	jne	.LBB204_2
# %bb.1:
	movabsq	$.L.str.521, %rdi
	movb	$0, %al
	callq	Die
.LBB204_2:
	movabsq	$.L.str.1.522, %rdi
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$111, %esi
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -4(%rbp)
.LBB204_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB204_13
# %bb.4:                                #   in Loop: Header=BB204_3 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB204_10
# %bb.5:                                #   in Loop: Header=BB204_3 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB204_10
# %bb.6:                                #   in Loop: Header=BB204_3 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB204_10
# %bb.7:                                #   in Loop: Header=BB204_3 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB204_10
# %bb.8:                                #   in Loop: Header=BB204_3 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB204_10
# %bb.9:                                #   in Loop: Header=BB204_3 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB204_11
.LBB204_10:                             #   in Loop: Header=BB204_3 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$8, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB204_11:                             #   in Loop: Header=BB204_3 Depth=1
	jmp	.LBB204_12
.LBB204_12:                             #   in Loop: Header=BB204_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_3
.LBB204_13:
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	matassign2hmm
	movq	-24(%rbp), %rdi
	callq	free
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end204:
	.size	P7Handmodelmaker, .Lfunc_end204-P7Handmodelmaker
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function matassign2hmm
	.type	matassign2hmm,@function
matassign2hmm:                          # @matassign2hmm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -56(%rbp)
	movl	$0, -28(%rbp)
	movl	$1, -4(%rbp)
.LBB205_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB205_6
# %bb.2:                                #   in Loop: Header=BB205_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB205_4
# %bb.3:                                #   in Loop: Header=BB205_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB205_4:                              #   in Loop: Header=BB205_1 Depth=1
	jmp	.LBB205_5
.LBB205_5:                              #   in Loop: Header=BB205_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_1
.LBB205_6:
	cmpl	$0, -28(%rbp)
	jne	.LBB205_8
# %bb.7:
	movabsq	$.L.str.2.523, %rdi
	movb	$0, %al
	callq	Die
.LBB205_8:
	movl	$1, -4(%rbp)
.LBB205_9:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB205_11
# %bb.10:                               #   in Loop: Header=BB205_9 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	setle	%al
.LBB205_11:                             #   in Loop: Header=BB205_9 Depth=1
	testb	$1, %al
	jne	.LBB205_12
	jmp	.LBB205_14
.LBB205_12:                             #   in Loop: Header=BB205_9 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$16, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.13:                               #   in Loop: Header=BB205_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_9
.LBB205_14:
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB205_16
# %bb.15:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$2, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB205_16:
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB205_17:                             # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB205_19
# %bb.18:                               #   in Loop: Header=BB205_17 Depth=1
	cmpl	$0, -4(%rbp)
	setg	%al
.LBB205_19:                             #   in Loop: Header=BB205_17 Depth=1
	testb	$1, %al
	jne	.LBB205_20
	jmp	.LBB205_22
.LBB205_20:                             #   in Loop: Header=BB205_17 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$32, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.21:                               #   in Loop: Header=BB205_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_17
.LBB205_22:
	cmpl	$0, -4(%rbp)
	jle	.LBB205_24
# %bb.23:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$4, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB205_24:
	leaq	-48(%rbp), %r8
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	28(%rax), %esi
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	movq	-24(%rbp), %rcx
	callq	fake_tracebacks
	movl	-28(%rbp), %edi
	callq	AllocPlan7
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	ZeroPlan7
	movl	$0, -8(%rbp)
.LBB205_25:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB205_28
# %bb.26:                               #   in Loop: Header=BB205_25 Depth=1
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	P7TraceCount
# %bb.27:                               #   in Loop: Header=BB205_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_25
.LBB205_28:
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	annotate_model
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB205_30
# %bb.29:
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	free
.LBB205_30:
	movabsq	$.L.str.1.522, %rdi
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$564, %esi              # imm = 0x234
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movl	$0, -4(%rbp)
.LBB205_31:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB205_34
# %bb.32:                               #   in Loop: Header=BB205_31 Depth=1
	movl	$46, %eax
	movl	$120, %ecx
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movl	(%rdx,%rsi,4), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	88(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.33:                               #   in Loop: Header=BB205_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_31
.LBB205_34:
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	24(%rcx), %rcx
	movb	$0, (%rax,%rcx)
	cmpq	$0, -56(%rbp)
	je	.LBB205_36
# %bb.35:
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB205_41
.LBB205_36:
	movl	$0, -8(%rbp)
.LBB205_37:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB205_40
# %bb.38:                               #   in Loop: Header=BB205_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	P7FreeTrace
# %bb.39:                               #   in Loop: Header=BB205_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_37
.LBB205_40:
	movq	-48(%rbp), %rdi
	callq	free
.LBB205_41:
	cmpq	$0, -64(%rbp)
	je	.LBB205_43
# %bb.42:
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB205_44
.LBB205_43:
	movq	-40(%rbp), %rdi
	callq	FreePlan7
.LBB205_44:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end205:
	.size	matassign2hmm, .Lfunc_end205-matassign2hmm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fake_tracebacks
	.type	fake_tracebacks,@function
fake_tracebacks:                        # @fake_tracebacks
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movabsq	$.L.str.1.522, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -60(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -72(%rbp)
	movslq	-64(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$607, %esi              # imm = 0x25F
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB206_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_3 Depth 2
                                        #       Child Loop BB206_43 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB206_50
# %bb.2:                                #   in Loop: Header=BB206_1 Depth=1
	movl	-60(%rbp), %edi
	addl	$6, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	P7AllocTrace
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movb	$4, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movb	$5, 1(%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	$0, 4(%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movl	$0, 4(%rax)
	movl	$1, -28(%rbp)
	movl	$0, -44(%rbp)
	movl	$2, -8(%rbp)
	movl	$0, -12(%rbp)
.LBB206_3:                              #   Parent Loop BB206_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB206_43 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB206_48
# %bb.4:                                #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB206_6
# %bb.5:                                #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$6, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB206_6:                              #   in Loop: Header=BB206_3 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB206_13
# %bb.7:                                #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB206_13
# %bb.8:                                #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB206_13
# %bb.9:                                #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB206_13
# %bb.10:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB206_13
# %bb.11:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB206_13
# %bb.12:                               #   in Loop: Header=BB206_3 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB206_41
.LBB206_13:                             #   in Loop: Header=BB206_3 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB206_17
# %bb.14:                               #   in Loop: Header=BB206_3 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	je	.LBB206_16
# %bb.15:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB206_16:                             #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_40
.LBB206_17:                             #   in Loop: Header=BB206_3 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	je	.LBB206_24
# %bb.18:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB206_24
# %bb.19:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB206_24
# %bb.20:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB206_24
# %bb.21:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB206_24
# %bb.22:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB206_24
# %bb.23:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB206_39
.LBB206_24:                             #   in Loop: Header=BB206_3 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$32, %eax
	cmpl	$0, %eax
	je	.LBB206_31
# %bb.25:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB206_31
# %bb.26:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB206_31
# %bb.27:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB206_31
# %bb.28:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB206_31
# %bb.29:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB206_31
# %bb.30:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB206_38
.LBB206_31:                             #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB206_37
# %bb.32:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB206_37
# %bb.33:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB206_37
# %bb.34:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB206_37
# %bb.35:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB206_37
# %bb.36:                               #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB206_37:                             #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_38
.LBB206_38:                             #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_39
.LBB206_39:                             #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_40
.LBB206_40:                             #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_41
.LBB206_41:                             #   in Loop: Header=BB206_3 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB206_46
# %bb.42:                               #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_43
.LBB206_43:                             #   Parent Loop BB206_1 Depth=1
                                        #     Parent Loop BB206_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$2, %eax
	jne	.LBB206_45
# %bb.44:                               #   in Loop: Header=BB206_43 Depth=3
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB206_43
.LBB206_45:                             #   in Loop: Header=BB206_3 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB206_46:                             #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_47
.LBB206_47:                             #   in Loop: Header=BB206_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_3
.LBB206_48:                             #   in Loop: Header=BB206_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$9, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-44(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	trace_doctor
# %bb.49:                               #   in Loop: Header=BB206_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_1
.LBB206_50:
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end206:
	.size	fake_tracebacks, .Lfunc_end206-fake_tracebacks
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function annotate_model
	.type	annotate_model,@function
annotate_model:                         # @annotate_model
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB207_11
# %bb.1:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movb	$32, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_10
# %bb.3:                                #   in Loop: Header=BB207_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_8
# %bb.4:                                #   in Loop: Header=BB207_2 Depth=1
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB207_6
# %bb.5:                                #   in Loop: Header=BB207_2 Depth=1
	movl	$46, %eax
	jmp	.LBB207_7
.LBB207_6:                              #   in Loop: Header=BB207_2 Depth=1
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
.LBB207_7:                              #   in Loop: Header=BB207_2 Depth=1
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB207_8:                              #   in Loop: Header=BB207_2 Depth=1
	jmp	.LBB207_9
.LBB207_9:                              #   in Loop: Header=BB207_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_2
.LBB207_10:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, 456(%rax)
.LBB207_11:
	movq	-32(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB207_22
# %bb.12:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movb	$32, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_13:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_21
# %bb.14:                               #   in Loop: Header=BB207_13 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_19
# %bb.15:                               #   in Loop: Header=BB207_13 Depth=1
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB207_17
# %bb.16:                               #   in Loop: Header=BB207_13 Depth=1
	movl	$46, %eax
	jmp	.LBB207_18
.LBB207_17:                             #   in Loop: Header=BB207_13 Depth=1
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
.LBB207_18:                             #   in Loop: Header=BB207_13 Depth=1
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB207_19:                             #   in Loop: Header=BB207_13 Depth=1
	jmp	.LBB207_20
.LBB207_20:                             #   in Loop: Header=BB207_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_13
.LBB207_21:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$8, %ecx
	movl	%ecx, 456(%rax)
.LBB207_22:
	movq	-32(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB207_33
# %bb.23:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movb	$32, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_24:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_32
# %bb.25:                               #   in Loop: Header=BB207_24 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_30
# %bb.26:                               #   in Loop: Header=BB207_24 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB207_28
# %bb.27:                               #   in Loop: Header=BB207_24 Depth=1
	movl	$46, %eax
	jmp	.LBB207_29
.LBB207_28:                             #   in Loop: Header=BB207_24 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
.LBB207_29:                             #   in Loop: Header=BB207_24 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB207_30:                             #   in Loop: Header=BB207_24 Depth=1
	jmp	.LBB207_31
.LBB207_31:                             #   in Loop: Header=BB207_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_24
.LBB207_32:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$8192, %ecx             # imm = 0x2000
	movl	%ecx, 456(%rax)
.LBB207_33:
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_34:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_39
# %bb.35:                               #   in Loop: Header=BB207_34 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_37
# %bb.36:                               #   in Loop: Header=BB207_34 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB207_37:                             #   in Loop: Header=BB207_34 Depth=1
	jmp	.LBB207_38
.LBB207_38:                             #   in Loop: Header=BB207_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_34
.LBB207_39:
	movabsq	$.L.str.3.524, %rsi
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$256, %ecx              # imm = 0x100
	movl	%ecx, 456(%rax)
	movq	-32(%rbp), %rdi
	callq	MSAGetGC
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB207_56
# %bb.40:
	movabsq	$.L.str.1.522, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$896, %esi              # imm = 0x380
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_41:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_55
# %bb.42:                               #   in Loop: Header=BB207_41 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_53
# %bb.43:                               #   in Loop: Header=BB207_41 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB207_45
# %bb.44:                               #   in Loop: Header=BB207_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$48, %eax
	movq	-16(%rbp), %rcx
	movq	96(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_52
.LBB207_45:                             #   in Loop: Header=BB207_41 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB207_47
# %bb.46:                               #   in Loop: Header=BB207_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$97, %eax
	addl	$10, %eax
	movq	-16(%rbp), %rcx
	movq	96(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_51
.LBB207_47:                             #   in Loop: Header=BB207_41 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB207_49
# %bb.48:                               #   in Loop: Header=BB207_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$65, %eax
	addl	$10, %eax
	movq	-16(%rbp), %rcx
	movq	96(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_50
.LBB207_49:                             #   in Loop: Header=BB207_41 Depth=1
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$-1, (%rax,%rcx,4)
.LBB207_50:                             #   in Loop: Header=BB207_41 Depth=1
	jmp	.LBB207_51
.LBB207_51:                             #   in Loop: Header=BB207_41 Depth=1
	jmp	.LBB207_52
.LBB207_52:                             #   in Loop: Header=BB207_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB207_53:                             #   in Loop: Header=BB207_41 Depth=1
	jmp	.LBB207_54
.LBB207_54:                             #   in Loop: Header=BB207_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_41
.LBB207_55:
	jmp	.LBB207_56
.LBB207_56:
	movabsq	$.L.str.4.525, %rsi
	movq	-32(%rbp), %rdi
	callq	MSAGetGC
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB207_73
# %bb.57:
	movabsq	$.L.str.1.522, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$911, %esi              # imm = 0x38F
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_58:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_72
# %bb.59:                               #   in Loop: Header=BB207_58 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_70
# %bb.60:                               #   in Loop: Header=BB207_58 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB207_62
# %bb.61:                               #   in Loop: Header=BB207_58 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$48, %eax
	movq	-16(%rbp), %rcx
	movq	104(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_69
.LBB207_62:                             #   in Loop: Header=BB207_58 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB207_64
# %bb.63:                               #   in Loop: Header=BB207_58 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$97, %eax
	addl	$10, %eax
	movq	-16(%rbp), %rcx
	movq	104(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_68
.LBB207_64:                             #   in Loop: Header=BB207_58 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB207_66
# %bb.65:                               #   in Loop: Header=BB207_58 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$65, %eax
	addl	$10, %eax
	movq	-16(%rbp), %rcx
	movq	104(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_67
.LBB207_66:                             #   in Loop: Header=BB207_58 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$-1, (%rax,%rcx,4)
.LBB207_67:                             #   in Loop: Header=BB207_58 Depth=1
	jmp	.LBB207_68
.LBB207_68:                             #   in Loop: Header=BB207_58 Depth=1
	jmp	.LBB207_69
.LBB207_69:                             #   in Loop: Header=BB207_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB207_70:                             #   in Loop: Header=BB207_58 Depth=1
	jmp	.LBB207_71
.LBB207_71:                             #   in Loop: Header=BB207_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_58
.LBB207_72:
	jmp	.LBB207_73
.LBB207_73:
	movabsq	$.L.str.5.526, %rsi
	movq	-32(%rbp), %rdi
	callq	MSAGetGC
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB207_90
# %bb.74:
	movabsq	$.L.str.1.522, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$926, %esi              # imm = 0x39E
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movl	$1, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB207_75:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB207_89
# %bb.76:                               #   in Loop: Header=BB207_75 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_87
# %bb.77:                               #   in Loop: Header=BB207_75 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB207_79
# %bb.78:                               #   in Loop: Header=BB207_75 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$48, %eax
	movq	-16(%rbp), %rcx
	movq	88(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_86
.LBB207_79:                             #   in Loop: Header=BB207_75 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB207_81
# %bb.80:                               #   in Loop: Header=BB207_75 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$97, %eax
	addl	$10, %eax
	movq	-16(%rbp), %rcx
	movq	88(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_85
.LBB207_81:                             #   in Loop: Header=BB207_75 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB207_83
# %bb.82:                               #   in Loop: Header=BB207_75 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$65, %eax
	addl	$10, %eax
	movq	-16(%rbp), %rcx
	movq	88(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB207_84
.LBB207_83:                             #   in Loop: Header=BB207_75 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$-1, (%rax,%rcx,4)
.LBB207_84:                             #   in Loop: Header=BB207_75 Depth=1
	jmp	.LBB207_85
.LBB207_85:                             #   in Loop: Header=BB207_75 Depth=1
	jmp	.LBB207_86
.LBB207_86:                             #   in Loop: Header=BB207_75 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB207_87:                             #   in Loop: Header=BB207_75 Depth=1
	jmp	.LBB207_88
.LBB207_88:                             #   in Loop: Header=BB207_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_75
.LBB207_89:
	jmp	.LBB207_90
.LBB207_90:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end207:
	.size	annotate_model, .Lfunc_end207-annotate_model
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function trace_doctor
	.type	trace_doctor,@function
trace_doctor:                           # @trace_doctor
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
.LBB208_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB208_31
# %bb.2:                                #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$2, %eax
	jne	.LBB208_5
# %bb.3:                                #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB208_5
# %bb.4:                                #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB208_30
.LBB208_5:                              #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB208_8
# %bb.6:                                #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$2, %eax
	jne	.LBB208_8
# %bb.7:                                #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_29
.LBB208_8:                              #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB208_11
# %bb.9:                                #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB208_11
# %bb.10:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_28
.LBB208_11:                             #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB208_14
# %bb.12:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$7, %eax
	jne	.LBB208_14
# %bb.13:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_27
.LBB208_14:                             #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB208_19
# %bb.15:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$7, %eax
	jne	.LBB208_19
# %bb.16:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	jne	.LBB208_19
# %bb.17:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB208_19
# %bb.18:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$6, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_26
.LBB208_19:                             #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$7, %eax
	jne	.LBB208_24
# %bb.20:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB208_24
# %bb.21:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	jne	.LBB208_24
# %bb.22:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	jne	.LBB208_24
# %bb.23:                               #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-8(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$7, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movb	$8, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_25
.LBB208_24:                             #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB208_25:                             #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_26
.LBB208_26:                             #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_27
.LBB208_27:                             #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_28
.LBB208_28:                             #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_29
.LBB208_29:                             #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_30
.LBB208_30:                             #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_1
.LBB208_31:
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpq	$0, -48(%rbp)
	je	.LBB208_33
# %bb.32:
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB208_33:
	cmpq	$0, -40(%rbp)
	je	.LBB208_35
# %bb.34:
	movl	-20(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB208_35:
	popq	%rbp
	retq
.Lfunc_end208:
	.size	trace_doctor, .Lfunc_end208-trace_doctor
	.cfi_endproc
                                        # -- End function
	.globl	P7Fastmodelmaker        # -- Begin function P7Fastmodelmaker
	.p2align	4, 0x90
	.type	P7Fastmodelmaker,@function
P7Fastmodelmaker:                       # @P7Fastmodelmaker
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.1.522, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -64(%rbp)
	movss	%xmm0, -36(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$172, %esi
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -4(%rbp)
.LBB209_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_3 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB209_17
# %bb.2:                                #   in Loop: Header=BB209_1 Depth=1
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB209_3:                              #   Parent Loop BB209_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB209_12
# %bb.4:                                #   in Loop: Header=BB209_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB209_9
# %bb.5:                                #   in Loop: Header=BB209_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB209_9
# %bb.6:                                #   in Loop: Header=BB209_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB209_9
# %bb.7:                                #   in Loop: Header=BB209_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB209_9
# %bb.8:                                #   in Loop: Header=BB209_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB209_10
.LBB209_9:                              #   in Loop: Header=BB209_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB209_10:                             #   in Loop: Header=BB209_3 Depth=2
	jmp	.LBB209_11
.LBB209_11:                             #   in Loop: Header=BB209_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB209_3
.LBB209_12:                             #   in Loop: Header=BB209_1 Depth=1
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	ucomiss	-36(%rbp), %xmm0
	jbe	.LBB209_14
# %bb.13:                               #   in Loop: Header=BB209_1 Depth=1
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$8, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB209_15
.LBB209_14:                             #   in Loop: Header=BB209_1 Depth=1
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB209_15:                             #   in Loop: Header=BB209_1 Depth=1
	jmp	.LBB209_16
.LBB209_16:                             #   in Loop: Header=BB209_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_1
.LBB209_17:
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movq	-48(%rbp), %r8
	callq	matassign2hmm
	movq	-32(%rbp), %rdi
	callq	free
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end209:
	.size	P7Fastmodelmaker, .Lfunc_end209-P7Fastmodelmaker
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function P7Maxmodelmaker
.LCPI210_0:
	.quad	-4556649414143246336    # double -9999
.LCPI210_1:
	.quad	4609176140017200175     # double 1.44269504
.LCPI210_2:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI210_3:
	.long	1056964608              # float 0.5
.LCPI210_4:
	.long	4286578687              # float -3.40282347E+38
	.text
	.globl	P7Maxmodelmaker
	.p2align	4, 0x90
	.type	P7Maxmodelmaker,@function
P7Maxmodelmaker:                        # @P7Maxmodelmaker
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$504, %rsp              # imm = 0x1F8
	.cfi_offset %rbx, -24
	movabsq	$.L.str.1.522, %rax
	movq	%rdi, -24(%rbp)
	movq	%rsi, -208(%rbp)
	movss	%xmm0, -148(%rbp)
	movq	%rdx, -80(%rbp)
	movq	%rcx, -176(%rbp)
	movss	%xmm1, -36(%rbp)
	movss	%xmm2, -56(%rbp)
	movq	%r8, -200(%rbp)
	movq	%r9, -192(%rbp)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$255, %esi
	callq	sre_malloc
	movabsq	$.L.str.1.522, %rdi
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	sre_malloc
	movabsq	$.L.str.1.522, %rdi
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$257, %esi              # imm = 0x101
	callq	sre_malloc
	movabsq	$.L.str.1.522, %rdi
	movq	%rax, -168(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$258, %esi              # imm = 0x102
	callq	sre_malloc
	movabsq	$.L.str.1.522, %rdi
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rdx
	shlq	$2, %rdx
	movl	$259, %esi              # imm = 0x103
	callq	sre_malloc
	movq	%rax, -160(%rbp)
	movl	$0, -12(%rbp)
.LBB210_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB210_4
# %bb.2:                                #   in Loop: Header=BB210_1 Depth=1
	movabsq	$.L.str.1.522, %rdi
	movslq	Alphabet_size, %rdx
	shlq	$2, %rdx
	movl	$261, %esi              # imm = 0x105
	callq	sre_malloc
	movq	-72(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
# %bb.3:                                #   in Loop: Header=BB210_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_1
.LBB210_4:
	movl	$0, -12(%rbp)
.LBB210_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_7 Depth 2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB210_18
# %bb.6:                                #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -16(%rbp)
.LBB210_7:                              #   Parent Loop BB210_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB210_16
# %bb.8:                                #   in Loop: Header=BB210_7 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB210_14
# %bb.9:                                #   in Loop: Header=BB210_7 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB210_14
# %bb.10:                               #   in Loop: Header=BB210_7 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB210_14
# %bb.11:                               #   in Loop: Header=BB210_7 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB210_14
# %bb.12:                               #   in Loop: Header=BB210_7 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB210_14
# %bb.13:                               #   in Loop: Header=BB210_7 Depth=2
	movq	-72(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rbx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	SymbolIndex
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movss	(%rcx,%rdx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	%rbx, %rdi
	movsbl	%al, %esi
	callq	P7CountSymbol
.LBB210_14:                             #   in Loop: Header=BB210_7 Depth=2
	jmp	.LBB210_15
.LBB210_15:                             #   in Loop: Header=BB210_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_7
.LBB210_16:                             #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_17
.LBB210_17:                             #   in Loop: Header=BB210_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_5
.LBB210_18:
	xorps	%xmm0, %xmm0
	movss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB210_20
# %bb.19:
	movss	-56(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_21
.LBB210_20:
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_21
.LBB210_21:
	leaq	-336(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -56(%rbp)
	movq	-80(%rbp), %rsi
	addq	$24016, %rsi            # imm = 0x5DD0
	movl	Alphabet_size, %edx
	callq	FCopy
	leaq	-336(%rbp), %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	28(%rax), %esi
	callq	FSum
	movss	%xmm0, -180(%rbp)
	movl	$0, -28(%rbp)
.LBB210_22:                             # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB210_28
# %bb.23:                               #   in Loop: Header=BB210_22 Depth=1
	xorps	%xmm0, %xmm0
	movslq	-28(%rbp), %rax
	movss	-336(%rbp,%rax,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-176(%rbp), %rax
	movslq	-28(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB210_25
# %bb.24:                               #   in Loop: Header=BB210_22 Depth=1
	movslq	-28(%rbp), %rax
	movss	-336(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-176(%rbp), %rax
	movslq	-28(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_26
.LBB210_25:                             #   in Loop: Header=BB210_22 Depth=1
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_26
.LBB210_26:                             #   in Loop: Header=BB210_22 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movslq	-28(%rbp), %rax
	movss	%xmm0, -336(%rbp,%rax,4)
# %bb.27:                               #   in Loop: Header=BB210_22 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB210_22
.LBB210_28:
	movq	-24(%rbp), %rdi
	callq	estimate_model_length
	xorps	%xmm0, %xmm0
	movsd	.LCPI210_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	.LCPI210_3(%rip), %xmm2 # xmm2 = mem[0],zero,zero,zero
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm3
	cvtss2sd	%xmm3, %xmm3
	movaps	%xmm1, %xmm4
	divsd	%xmm3, %xmm4
	cvtsd2ss	%xmm4, %xmm3
	movss	%xmm3, -212(%rbp)
	movss	%xmm2, -52(%rbp)
	movl	-140(%rbp), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	divsd	%xmm2, %xmm1
	cvtsd2ss	%xmm1, %xmm1
	movss	%xmm1, -48(%rbp)
	movss	-52(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB210_30
# %bb.29:
	movss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_31
.LBB210_30:
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_31
.LBB210_31:
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -52(%rbp)
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_33
# %bb.32:
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_34
.LBB210_33:
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_34
.LBB210_34:
	movss	.LCPI210_3(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -48(%rbp)
	movss	%xmm1, -148(%rbp)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB210_35:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_37 Depth 2
	cmpl	$1, -32(%rbp)
	jl	.LBB210_50
# %bb.36:                               #   in Loop: Header=BB210_35 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -16(%rbp)
.LBB210_37:                             #   Parent Loop BB210_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB210_46
# %bb.38:                               #   in Loop: Header=BB210_37 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB210_43
# %bb.39:                               #   in Loop: Header=BB210_37 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB210_43
# %bb.40:                               #   in Loop: Header=BB210_37 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB210_43
# %bb.41:                               #   in Loop: Header=BB210_37 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB210_43
# %bb.42:                               #   in Loop: Header=BB210_37 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB210_44
.LBB210_43:                             #   in Loop: Header=BB210_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB210_44:                             #   in Loop: Header=BB210_37 Depth=2
	jmp	.LBB210_45
.LBB210_45:                             #   in Loop: Header=BB210_37 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_37
.LBB210_46:                             #   in Loop: Header=BB210_35 Depth=1
	movl	-88(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	-148(%rbp), %xmm1       # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jb	.LBB210_48
# %bb.47:
	jmp	.LBB210_51
.LBB210_48:                             #   in Loop: Header=BB210_35 Depth=1
	jmp	.LBB210_49
.LBB210_49:                             #   in Loop: Header=BB210_35 Depth=1
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB210_35
.LBB210_50:                             # %.loopexit1
	jmp	.LBB210_51
.LBB210_51:
	xorps	%xmm0, %xmm0
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-168(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -16(%rbp)
.LBB210_52:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_54 Depth 2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB210_66
# %bb.53:                               #   in Loop: Header=BB210_52 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB210_54:                             #   Parent Loop BB210_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jle	.LBB210_61
# %bb.55:                               #   in Loop: Header=BB210_54 Depth=2
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$32, %ecx
	je	.LBB210_60
# %bb.56:                               #   in Loop: Header=BB210_54 Depth=2
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$46, %ecx
	je	.LBB210_60
# %bb.57:                               #   in Loop: Header=BB210_54 Depth=2
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$95, %ecx
	je	.LBB210_60
# %bb.58:                               #   in Loop: Header=BB210_54 Depth=2
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$45, %ecx
	je	.LBB210_60
# %bb.59:                               #   in Loop: Header=BB210_54 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	sete	%al
.LBB210_60:                             #   in Loop: Header=BB210_54 Depth=2
.LBB210_61:                             #   in Loop: Header=BB210_54 Depth=2
	testb	$1, %al
	jne	.LBB210_62
	jmp	.LBB210_64
.LBB210_62:                             #   in Loop: Header=BB210_54 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$95, (%rax,%rcx)
# %bb.63:                               #   in Loop: Header=BB210_54 Depth=2
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_54
.LBB210_64:                             #   in Loop: Header=BB210_52 Depth=1
	jmp	.LBB210_65
.LBB210_65:                             #   in Loop: Header=BB210_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_52
.LBB210_66:
	movl	-32(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB210_67:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_69 Depth 2
                                        #     Child Loop BB210_76 Depth 2
                                        #     Child Loop BB210_80 Depth 2
                                        #       Child Loop BB210_109 Depth 3
	cmpl	$0, -12(%rbp)
	jle	.LBB210_123
# %bb.68:                               #   in Loop: Header=BB210_67 Depth=1
	leaq	-416(%rbp), %rdi
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	Alphabet_size, %edx
	callq	FCopy
	leaq	-416(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movq	-80(%rbp), %rax
	movl	6408(%rax), %edx
	movq	-80(%rbp), %rcx
	addq	$6412, %rcx             # imm = 0x190C
	movq	-80(%rbp), %r8
	addq	$7212, %r8              # imm = 0x1C2C
	xorl	%r9d, %r9d
	callq	P7PriorifyEmissionVector
	movl	$0, -28(%rbp)
.LBB210_69:                             #   Parent Loop BB210_67 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB210_75
# %bb.70:                               #   in Loop: Header=BB210_69 Depth=2
	xorps	%xmm0, %xmm0
	movslq	-28(%rbp), %rax
	movss	-416(%rbp,%rax,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-176(%rbp), %rax
	movslq	-28(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB210_72
# %bb.71:                               #   in Loop: Header=BB210_69 Depth=2
	movslq	-28(%rbp), %rax
	movss	-416(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-176(%rbp), %rax
	movslq	-28(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_73
.LBB210_72:                             #   in Loop: Header=BB210_69 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_73
.LBB210_73:                             #   in Loop: Header=BB210_69 Depth=2
	cvtsd2ss	%xmm0, %xmm0
	movslq	-28(%rbp), %rax
	movss	%xmm0, -416(%rbp,%rax,4)
# %bb.74:                               #   in Loop: Header=BB210_69 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB210_69
.LBB210_75:                             #   in Loop: Header=BB210_67 Depth=1
	leaq	-496(%rbp), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -16(%rbp)
.LBB210_76:                             #   Parent Loop BB210_67 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB210_79
# %bb.77:                               #   in Loop: Header=BB210_76 Depth=2
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.78:                               #   in Loop: Header=BB210_76 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_76
.LBB210_79:                             #   in Loop: Header=BB210_67 Depth=1
	movss	.LCPI210_4(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
.LBB210_80:                             #   Parent Loop BB210_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_109 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jg	.LBB210_120
# %bb.81:                               #   in Loop: Header=BB210_80 Depth=2
	leaq	-256(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-24(%rbp), %rcx
	movl	28(%rcx), %esi
	movq	-160(%rbp), %rdx
	movl	-12(%rbp), %ecx
	movl	-40(%rbp), %r8d
	movq	-24(%rbp), %rbx
	movq	16(%rbx), %r9
	movq	%rax, (%rsp)
	callq	build_cij
	movl	%eax, -132(%rbp)
	cmpl	$-1, -132(%rbp)
	jne	.LBB210_83
# %bb.82:                               #   in Loop: Header=BB210_67 Depth=1
	jmp	.LBB210_121
.LBB210_83:                             #   in Loop: Header=BB210_80 Depth=2
	cmpl	$1, -132(%rbp)
	jne	.LBB210_108
# %bb.84:                               #   in Loop: Header=BB210_80 Depth=2
	leaq	-256(%rbp), %rsi
	leaq	-128(%rbp), %rdi
	movl	$7, %edx
	callq	FCopy
	leaq	-128(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movq	-80(%rbp), %rdx
	addq	$8, %rdx
	callq	P7PriorifyTransitionVector
	leaq	-128(%rbp), %rdi
	movl	$3, %esi
	callq	FNorm
	xorps	%xmm0, %xmm0
	movss	-128(%rbp), %xmm1       # xmm1 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB210_86
# %bb.85:                               #   in Loop: Header=BB210_80 Depth=2
	movss	-128(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_87
.LBB210_86:                             #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_87
.LBB210_87:                             #   in Loop: Header=BB210_80 Depth=2
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -128(%rbp)
	movss	-124(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_89
# %bb.88:                               #   in Loop: Header=BB210_80 Depth=2
	movss	-124(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_90
.LBB210_89:                             #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_90
.LBB210_90:                             #   in Loop: Header=BB210_80 Depth=2
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -124(%rbp)
	movss	-120(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_92
# %bb.91:                               #   in Loop: Header=BB210_80 Depth=2
	movss	-120(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_93
.LBB210_92:                             #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_93
.LBB210_93:                             #   in Loop: Header=BB210_80 Depth=2
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -120(%rbp)
	movss	-116(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_95
# %bb.94:                               #   in Loop: Header=BB210_80 Depth=2
	movss	-116(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_96
.LBB210_95:                             #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_96
.LBB210_96:                             #   in Loop: Header=BB210_80 Depth=2
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -116(%rbp)
	movss	-112(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_98
# %bb.97:                               #   in Loop: Header=BB210_80 Depth=2
	movss	-112(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_99
.LBB210_98:                             #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_99
.LBB210_99:                             #   in Loop: Header=BB210_80 Depth=2
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -112(%rbp)
	movss	-108(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_101
# %bb.100:                              #   in Loop: Header=BB210_80 Depth=2
	movss	-108(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	divss	-36(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_102
.LBB210_101:                            #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_102
.LBB210_102:                            #   in Loop: Header=BB210_80 Depth=2
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -108(%rbp)
	movss	-104(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	ucomiss	%xmm1, %xmm0
	jbe	.LBB210_104
# %bb.103:                              #   in Loop: Header=BB210_80 Depth=2
	movss	-104(%rbp), %xmm0       # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI210_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB210_105
.LBB210_104:                            #   in Loop: Header=BB210_80 Depth=2
	movsd	.LCPI210_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB210_105
.LBB210_105:                            #   in Loop: Header=BB210_80 Depth=2
	leaq	-256(%rbp), %rsi
	leaq	-128(%rbp), %rdi
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -104(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -84(%rbp)        # 4-byte Spill
	movl	$7, %edx
	callq	FDot
	leaq	-496(%rbp), %rsi
	leaq	-336(%rbp), %rdi
	movss	-84(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	addss	%xmm0, %xmm1
	movss	%xmm1, -84(%rbp)        # 4-byte Spill
	movl	Alphabet_size, %edx
	callq	FDot
	movss	-84(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	addss	%xmm0, %xmm1
	movss	%xmm1, -44(%rbp)
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	ucomiss	(%rax,%rcx,4), %xmm0
	jbe	.LBB210_107
# %bb.106:                              #   in Loop: Header=BB210_80 Depth=2
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	-40(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB210_107:                            #   in Loop: Header=BB210_80 Depth=2
	jmp	.LBB210_108
.LBB210_108:                            #   in Loop: Header=BB210_80 Depth=2
	leaq	-496(%rbp), %rdi
	movq	-72(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	Alphabet_size, %edx
	callq	FAdd
	movl	$0, -16(%rbp)
.LBB210_109:                            #   Parent Loop BB210_67 Depth=1
                                        #     Parent Loop BB210_80 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB210_118
# %bb.110:                              #   in Loop: Header=BB210_109 Depth=3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB210_116
# %bb.111:                              #   in Loop: Header=BB210_109 Depth=3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB210_116
# %bb.112:                              #   in Loop: Header=BB210_109 Depth=3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB210_116
# %bb.113:                              #   in Loop: Header=BB210_109 Depth=3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB210_116
# %bb.114:                              #   in Loop: Header=BB210_109 Depth=3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB210_116
# %bb.115:                              #   in Loop: Header=BB210_109 Depth=3
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB210_116:                            #   in Loop: Header=BB210_109 Depth=3
	jmp	.LBB210_117
.LBB210_117:                            #   in Loop: Header=BB210_109 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_109
.LBB210_118:                            #   in Loop: Header=BB210_80 Depth=2
	jmp	.LBB210_119
.LBB210_119:                            #   in Loop: Header=BB210_80 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB210_80
.LBB210_120:                            # %.loopexit
                                        #   in Loop: Header=BB210_67 Depth=1
	jmp	.LBB210_121
.LBB210_121:                            #   in Loop: Header=BB210_67 Depth=1
	leaq	-416(%rbp), %rdi
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	Alphabet_size, %edx
	callq	FDot
	movss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	mulss	-180(%rbp), %xmm1
	addss	%xmm1, %xmm0
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
# %bb.122:                              #   in Loop: Header=BB210_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_67
.LBB210_123:
	movss	.LCPI210_4(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -136(%rbp)
	movl	$0, -144(%rbp)
	movl	$1, -12(%rbp)
.LBB210_124:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_126 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jg	.LBB210_140
# %bb.125:                              #   in Loop: Header=BB210_124 Depth=1
	movq	-64(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -44(%rbp)
	movl	$0, -16(%rbp)
.LBB210_126:                            #   Parent Loop BB210_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB210_136
# %bb.127:                              #   in Loop: Header=BB210_126 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB210_132
# %bb.128:                              #   in Loop: Header=BB210_126 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB210_132
# %bb.129:                              #   in Loop: Header=BB210_126 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB210_132
# %bb.130:                              #   in Loop: Header=BB210_126 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB210_132
# %bb.131:                              #   in Loop: Header=BB210_126 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB210_133
.LBB210_132:                            #   in Loop: Header=BB210_126 Depth=2
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addss	-44(%rbp), %xmm0
	movss	%xmm0, -44(%rbp)
	jmp	.LBB210_134
.LBB210_133:                            #   in Loop: Header=BB210_126 Depth=2
	movss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addss	-44(%rbp), %xmm0
	movss	%xmm0, -44(%rbp)
.LBB210_134:                            #   in Loop: Header=BB210_126 Depth=2
	jmp	.LBB210_135
.LBB210_135:                            #   in Loop: Header=BB210_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_126
.LBB210_136:                            #   in Loop: Header=BB210_124 Depth=1
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	ucomiss	-136(%rbp), %xmm0
	jbe	.LBB210_138
# %bb.137:                              #   in Loop: Header=BB210_124 Depth=1
	movss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -136(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB210_138:                            #   in Loop: Header=BB210_124 Depth=1
	jmp	.LBB210_139
.LBB210_139:                            #   in Loop: Header=BB210_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_124
.LBB210_140:
	movq	-96(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -12(%rbp)
.LBB210_141:                            # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB210_144
# %bb.142:                              #   in Loop: Header=BB210_141 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$8, (%rax,%rcx,4)
# %bb.143:                              #   in Loop: Header=BB210_141 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_141
.LBB210_144:
	movl	-144(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB210_145:                            # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB210_148
# %bb.146:                              #   in Loop: Header=BB210_145 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	andl	$-9, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.147:                              #   in Loop: Header=BB210_145 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_145
.LBB210_148:
	movq	-24(%rbp), %rdi
	movq	-208(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-200(%rbp), %rcx
	movq	-192(%rbp), %r8
	callq	matassign2hmm
	movl	$1, -12(%rbp)
.LBB210_149:                            # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jg	.LBB210_152
# %bb.150:                              #   in Loop: Header=BB210_149 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.151:                              #   in Loop: Header=BB210_149 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_149
.LBB210_152:
	movq	-72(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-168(%rbp), %rdi
	callq	free
	movq	-96(%rbp), %rdi
	callq	free
	movq	-160(%rbp), %rdi
	callq	free
	addq	$504, %rsp              # imm = 0x1F8
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end210:
	.size	P7Maxmodelmaker, .Lfunc_end210-P7Maxmodelmaker
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function estimate_model_length
	.type	estimate_model_length,@function
estimate_model_length:                  # @estimate_model_length
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -24(%rbp)
	movss	%xmm0, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB211_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB211_4
# %bb.2:                                #   in Loop: Header=BB211_1 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)        # 4-byte Spill
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	DealignedLength
	cvtsi2ssl	%eax, %xmm0
	movss	-28(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	mulss	%xmm0, %xmm1
	addss	-12(%rbp), %xmm1
	movss	%xmm1, -12(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB211_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_1
.LBB211_4:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-8(%rbp), %xmm0
	cvttss2si	%xmm0, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end211:
	.size	estimate_model_length, .Lfunc_end211-estimate_model_length
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function build_cij
	.type	build_cij,@function
build_cij:                              # @build_cij
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	16(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movl	%esi, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movq	%r9, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	movq	16(%rbp), %rdi
	movl	$8, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -4(%rbp)
.LBB212_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB212_46
# %bb.2:                                #   in Loop: Header=BB212_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB212_16
# %bb.3:                                #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB212_8
# %bb.4:                                #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB212_8
# %bb.5:                                #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB212_8
# %bb.6:                                #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB212_8
# %bb.7:                                #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB212_9
.LBB212_8:
	movl	$-1, -36(%rbp)
	jmp	.LBB212_47
.LBB212_9:                              #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB212_14
# %bb.10:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB212_14
# %bb.11:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB212_14
# %bb.12:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB212_14
# %bb.13:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB212_15
.LBB212_14:
	movl	$0, -36(%rbp)
	jmp	.LBB212_47
.LBB212_15:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	16(%rbp), %rax
	addss	4(%rax), %xmm0
	movss	%xmm0, 4(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movq	16(%rbp), %rax
	addss	16(%rax), %xmm0
	movss	%xmm0, 16(%rax)
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	16(%rbp), %rax
	addss	12(%rax), %xmm0
	movss	%xmm0, 12(%rax)
	jmp	.LBB212_44
.LBB212_16:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB212_32
# %bb.17:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB212_32
# %bb.18:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB212_32
# %bb.19:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB212_32
# %bb.20:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB212_32
# %bb.21:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	jne	.LBB212_23
# %bb.22:                               #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_31
.LBB212_23:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB212_28
# %bb.24:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB212_28
# %bb.25:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB212_28
# %bb.26:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB212_28
# %bb.27:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB212_29
.LBB212_28:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	16(%rbp), %rax
	addss	8(%rax), %xmm0
	movss	%xmm0, 8(%rax)
	jmp	.LBB212_30
.LBB212_29:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	16(%rbp), %rax
	addss	(%rax), %xmm0
	movss	%xmm0, (%rax)
.LBB212_30:                             #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_31
.LBB212_31:                             #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_43
.LBB212_32:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	jne	.LBB212_34
# %bb.33:                               #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_45
.LBB212_34:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB212_39
# %bb.35:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB212_39
# %bb.36:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB212_39
# %bb.37:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB212_39
# %bb.38:                               #   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB212_40
.LBB212_39:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	16(%rbp), %rax
	addss	24(%rax), %xmm0
	movss	%xmm0, 24(%rax)
	jmp	.LBB212_41
.LBB212_40:                             #   in Loop: Header=BB212_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	16(%rbp), %rax
	addss	20(%rax), %xmm0
	movss	%xmm0, 20(%rax)
.LBB212_41:                             #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_42
.LBB212_42:                             #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_43
.LBB212_43:                             #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_44
.LBB212_44:                             #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_45
.LBB212_45:                             #   in Loop: Header=BB212_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_1
.LBB212_46:
	movl	$1, -36(%rbp)
.LBB212_47:
	movl	-36(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end212:
	.size	build_cij, .Lfunc_end212-build_cij
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function MSAAlloc
.LCPI213_0:
	.long	3212836864              # float -1
	.text
	.globl	MSAAlloc
	.p2align	4, 0x90
	.type	MSAAlloc,@function
MSAAlloc:                               # @MSAAlloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.529, %rax
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rax, %rdi
	movl	$68, %esi
	movl	$360, %edx              # imm = 0x168
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	%rax, -8(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$3, %rdx
	movl	$69, %esi
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movslq	-16(%rbp), %rdx
	shlq	$3, %rdx
	movl	$70, %esi
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movl	$71, %esi
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 328(%rcx)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movl	$72, %esi
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	$0, -12(%rbp)
.LBB213_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB213_7
# %bb.2:                                #   in Loop: Header=BB213_1 Depth=1
	movss	.LCPI213_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	cmpl	$0, -20(%rbp)
	je	.LBB213_4
# %bb.3:                                #   in Loop: Header=BB213_1 Depth=1
	movabsq	$.L.str.529, %rdi
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$80, %esi
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB213_5
.LBB213_4:                              #   in Loop: Header=BB213_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB213_5:                              #   in Loop: Header=BB213_1 Depth=1
	jmp	.LBB213_6
.LBB213_6:                              #   in Loop: Header=BB213_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_1
.LBB213_7:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 320(%rcx)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 324(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 88(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 336(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 120(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 344(%rax)
	callq	GKIInit
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 352(%rax)
	movl	$0, -12(%rbp)
.LBB213_8:                              # =>This Inner Loop Header: Depth=1
	cmpl	$6, -12(%rbp)
	jge	.LBB213_11
# %bb.9:                                #   in Loop: Header=BB213_8 Depth=1
	xorps	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, 128(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, 152(%rax,%rcx,4)
# %bb.10:                               #   in Loop: Header=BB213_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_8
.LBB213_11:
	movq	-8(%rbp), %rax
	movq	$0, 176(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 184(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 188(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 192(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 200(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 208(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 216(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 224(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 232(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 240(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 248(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 256(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 264(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 272(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 280(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 288(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 296(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 304(%rax)
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end213:
	.size	MSAAlloc, .Lfunc_end213-MSAAlloc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function MSAExpand
.LCPI214_0:
	.long	3212836864              # float -1
	.text
	.globl	MSAExpand
	.p2align	4, 0x90
	.type	MSAExpand,@function
MSAExpand:                              # @MSAExpand
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.529, %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	movl	324(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	320(%rdx), %ecx
	movl	%ecx, 320(%rdx)
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-8(%rbp), %rcx
	movslq	320(%rcx), %rcx
	shlq	$3, %rcx
	movq	%rax, %rdi
	movl	$162, %esi
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$163, %esi
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movq	328(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$164, %esi
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 328(%rcx)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$2, %rcx
	movl	$165, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB214_2
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$168, %esi
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-8(%rbp), %rax
	movq	336(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$2, %rcx
	movl	$169, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
.LBB214_2:
	movq	-8(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB214_4
# %bb.3:
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$172, %esi
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 120(%rcx)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$2, %rcx
	movl	$173, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 344(%rcx)
.LBB214_4:
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB214_6
# %bb.5:
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$176, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
.LBB214_6:
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB214_8
# %bb.7:
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$178, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
.LBB214_8:
	movq	-8(%rbp), %rax
	movl	320(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	324(%rcx), %eax
	movl	%eax, -12(%rbp)
.LBB214_9:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB214_29
# %bb.10:                               #   in Loop: Header=BB214_9 Depth=1
	movss	.LCPI214_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB214_12
# %bb.11:                               #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB214_12:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB214_14
# %bb.13:                               #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB214_14:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB214_16
# %bb.15:                               #   in Loop: Header=BB214_9 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$0, %rcx
	movl	$189, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB214_17
.LBB214_16:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB214_17:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB214_22
# %bb.18:                               #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB214_20
# %bb.19:                               #   in Loop: Header=BB214_9 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$0, %rcx
	movl	$195, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	112(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB214_21
.LBB214_20:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB214_21:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB214_22:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB214_27
# %bb.23:                               #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB214_25
# %bb.24:                               #   in Loop: Header=BB214_9 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$0, %rcx
	movl	$201, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB214_26
.LBB214_25:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB214_26:                             #   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB214_27:                             #   in Loop: Header=BB214_9 Depth=1
	jmp	.LBB214_28
.LBB214_28:                             #   in Loop: Header=BB214_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_9
.LBB214_29:
	movq	-8(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB214_41
# %bb.30:
	movl	$0, -12(%rbp)
.LBB214_31:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_34 Depth 2
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	240(%rcx), %eax
	jge	.LBB214_40
# %bb.32:                               #   in Loop: Header=BB214_31 Depth=1
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB214_38
# %bb.33:                               #   in Loop: Header=BB214_31 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$217, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	224(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	320(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	324(%rcx), %eax
	movl	%eax, -16(%rbp)
.LBB214_34:                             #   Parent Loop BB214_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB214_37
# %bb.35:                               #   in Loop: Header=BB214_34 Depth=2
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.36:                               #   in Loop: Header=BB214_34 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_34
.LBB214_37:                             #   in Loop: Header=BB214_31 Depth=1
	jmp	.LBB214_38
.LBB214_38:                             #   in Loop: Header=BB214_31 Depth=1
	jmp	.LBB214_39
.LBB214_39:                             #   in Loop: Header=BB214_31 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_31
.LBB214_40:
	jmp	.LBB214_41
.LBB214_41:
	movq	-8(%rbp), %rax
	cmpq	$0, 288(%rax)
	je	.LBB214_53
# %bb.42:
	movl	$0, -12(%rbp)
.LBB214_43:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_46 Depth 2
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	304(%rcx), %eax
	jge	.LBB214_52
# %bb.44:                               #   in Loop: Header=BB214_43 Depth=1
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB214_50
# %bb.45:                               #   in Loop: Header=BB214_43 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rcx
	shlq	$3, %rcx
	movl	$232, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	288(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	320(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	324(%rcx), %eax
	movl	%eax, -16(%rbp)
.LBB214_46:                             #   Parent Loop BB214_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB214_49
# %bb.47:                               #   in Loop: Header=BB214_46 Depth=2
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.48:                               #   in Loop: Header=BB214_46 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB214_46
.LBB214_49:                             #   in Loop: Header=BB214_43 Depth=1
	jmp	.LBB214_50
.LBB214_50:                             #   in Loop: Header=BB214_43 Depth=1
	jmp	.LBB214_51
.LBB214_51:                             #   in Loop: Header=BB214_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_43
.LBB214_52:
	jmp	.LBB214_53
.LBB214_53:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end214:
	.size	MSAExpand, .Lfunc_end214-MSAExpand
	.cfi_endproc
                                        # -- End function
	.globl	MSAFree                 # -- Begin function MSAFree
	.p2align	4, 0x90
	.type	MSAFree,@function
MSAFree:                                # @MSAFree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	je	.LBB215_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	328(%rax), %rdi
	callq	free
.LBB215_2:
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB215_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB215_4:
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB215_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free
.LBB215_6:
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB215_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free
.LBB215_8:
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB215_10
# %bb.9:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free
.LBB215_10:
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB215_12
# %bb.11:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB215_12:
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB215_14
# %bb.13:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB215_14:
	movq	-8(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB215_16
# %bb.15:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	free
.LBB215_16:
	movq	-8(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB215_18
# %bb.17:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	free
.LBB215_18:
	movq	-8(%rbp), %rax
	cmpq	$0, 336(%rax)
	je	.LBB215_20
# %bb.19:
	movq	-8(%rbp), %rax
	movq	336(%rax), %rdi
	callq	free
.LBB215_20:
	movq	-8(%rbp), %rax
	cmpq	$0, 344(%rax)
	je	.LBB215_22
# %bb.21:
	movq	-8(%rbp), %rax
	movq	344(%rax), %rdi
	callq	free
.LBB215_22:
	movq	-8(%rbp), %rax
	movq	176(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	184(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	192(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	208(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	200(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	208(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	240(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	224(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	240(%rax), %esi
	movq	-8(%rbp), %rax
	movl	28(%rax), %edx
	callq	Free3DArray
	movq	-8(%rbp), %rax
	movq	248(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	272(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	256(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	272(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	280(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	304(%rax), %esi
	callq	Free2DArray
	movq	-8(%rbp), %rax
	movq	288(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	304(%rax), %esi
	movq	-8(%rbp), %rax
	movl	28(%rax), %edx
	callq	Free3DArray
	movq	-8(%rbp), %rax
	movq	312(%rax), %rdi
	callq	GKIFree
	movq	-8(%rbp), %rax
	movq	232(%rax), %rdi
	callq	GKIFree
	movq	-8(%rbp), %rax
	movq	264(%rax), %rdi
	callq	GKIFree
	movq	-8(%rbp), %rax
	movq	296(%rax), %rdi
	callq	GKIFree
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end215:
	.size	MSAFree, .Lfunc_end215-MSAFree
	.cfi_endproc
                                        # -- End function
	.globl	MSASetSeqAccession      # -- Begin function MSASetSeqAccession
	.p2align	4, 0x90
	.type	MSASetSeqAccession,@function
MSASetSeqAccession:                     # @MSASetSeqAccession
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 96(%rax)
	jne	.LBB216_6
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movq	-16(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$310, %esi              # imm = 0x136
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movl	$0, -4(%rbp)
.LBB216_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB216_5
# %bb.3:                                #   in Loop: Header=BB216_2 Depth=1
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.4:                                #   in Loop: Header=BB216_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB216_2
.LBB216_5:
	jmp	.LBB216_6
.LBB216_6:
	movq	-32(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	96(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end216:
	.size	MSASetSeqAccession, .Lfunc_end216-MSASetSeqAccession
	.cfi_endproc
                                        # -- End function
	.globl	MSASetSeqDescription    # -- Begin function MSASetSeqDescription
	.p2align	4, 0x90
	.type	MSASetSeqDescription,@function
MSASetSeqDescription:                   # @MSASetSeqDescription
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 104(%rax)
	jne	.LBB217_6
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movq	-16(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$335, %esi              # imm = 0x14F
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movl	$0, -4(%rbp)
.LBB217_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB217_5
# %bb.3:                                #   in Loop: Header=BB217_2 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.4:                                #   in Loop: Header=BB217_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_2
.LBB217_5:
	jmp	.LBB217_6
.LBB217_6:
	movq	-32(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	104(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end217:
	.size	MSASetSeqDescription, .Lfunc_end217-MSASetSeqDescription
	.cfi_endproc
                                        # -- End function
	.globl	MSAAddComment           # -- Begin function MSAAddComment
	.p2align	4, 0x90
	.type	MSAAddComment,@function
MSAAddComment:                          # @MSAAddComment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 176(%rax)
	jne	.LBB218_2
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movl	$362, %esi              # imm = 0x16A
	movl	$80, %edx
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 176(%rcx)
	movq	-8(%rbp), %rax
	movl	$10, 188(%rax)
.LBB218_2:
	movq	-8(%rbp), %rax
	movl	184(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	188(%rcx), %eax
	jne	.LBB218_4
# %bb.3:
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movl	188(%rax), %ecx
	addl	$10, %ecx
	movl	%ecx, 188(%rax)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	188(%rax), %rcx
	shlq	$3, %rcx
	movl	$367, %esi              # imm = 0x16F
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 176(%rcx)
.LBB218_4:
	movq	-16(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	176(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	184(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	184(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 184(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end218:
	.size	MSAAddComment, .Lfunc_end218-MSAAddComment
	.cfi_endproc
                                        # -- End function
	.globl	MSAAddGF                # -- Begin function MSAAddGF
	.p2align	4, 0x90
	.type	MSAAddGF,@function
MSAAddGF:                               # @MSAAddGF
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	jne	.LBB219_2
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movl	$395, %esi              # imm = 0x18B
	movl	$80, %edx
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 192(%rcx)
	movl	$396, %esi              # imm = 0x18C
	movl	$80, %edx
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 200(%rcx)
	movq	-8(%rbp), %rax
	movl	$10, 212(%rax)
.LBB219_2:
	movq	-8(%rbp), %rax
	movl	208(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	212(%rcx), %eax
	jne	.LBB219_4
# %bb.3:
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movl	212(%rax), %ecx
	addl	$10, %ecx
	movl	%ecx, 212(%rax)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	212(%rax), %rcx
	shlq	$3, %rcx
	movl	$401, %esi              # imm = 0x191
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 192(%rcx)
	movq	-8(%rbp), %rax
	movq	200(%rax), %rdx
	movq	-8(%rbp), %rax
	movslq	212(%rax), %rcx
	shlq	$3, %rcx
	movl	$402, %esi              # imm = 0x192
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 200(%rcx)
.LBB219_4:
	movq	-24(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	208(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	200(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	208(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	208(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 208(%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end219:
	.size	MSAAddGF, .Lfunc_end219-MSAAddGF
	.cfi_endproc
                                        # -- End function
	.globl	MSAAddGS                # -- Begin function MSAAddGS
	.p2align	4, 0x90
	.type	MSAAddGS,@function
MSAAddGS:                               # @MSAAddGS
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 216(%rax)
	jne	.LBB220_6
# %bb.1:
	callq	GKIInit
	movq	-8(%rbp), %rcx
	movq	%rax, 232(%rcx)
	movq	-8(%rbp), %rax
	movq	232(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	GKIStoreKey
	movabsq	$.L.str.529, %rdi
	movl	%eax, -16(%rbp)
	movl	$447, %esi              # imm = 0x1BF
	movl	$8, %edx
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 216(%rcx)
	movl	$448, %esi              # imm = 0x1C0
	movl	$8, %edx
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 224(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$449, %esi              # imm = 0x1C1
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	224(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$0, -12(%rbp)
.LBB220_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB220_5
# %bb.3:                                #   in Loop: Header=BB220_2 Depth=1
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.4:                                #   in Loop: Header=BB220_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_2
.LBB220_5:
	jmp	.LBB220_13
.LBB220_6:
	movq	-8(%rbp), %rax
	movq	232(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	GKIKeyIndex
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB220_12
# %bb.7:
	movq	-8(%rbp), %rax
	movq	232(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	GKIStoreKey
	movabsq	$.L.str.529, %rdi
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	240(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$463, %esi              # imm = 0x1CF
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 216(%rcx)
	movq	-8(%rbp), %rax
	movq	224(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	240(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$464, %esi              # imm = 0x1D0
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 224(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$465, %esi              # imm = 0x1D1
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	224(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	240(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -12(%rbp)
.LBB220_8:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB220_11
# %bb.9:                                #   in Loop: Header=BB220_8 Depth=1
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	240(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.10:                               #   in Loop: Header=BB220_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_8
.LBB220_11:
	jmp	.LBB220_12
.LBB220_12:
	jmp	.LBB220_13
.LBB220_13:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	240(%rcx), %eax
	jne	.LBB220_15
# %bb.14:
	movq	-32(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	216(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	240(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 240(%rax)
.LBB220_15:
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	jne	.LBB220_17
# %bb.16:
	movq	-48(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	224(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB220_22
.LBB220_17:
	movabsq	$.L.str.1.536, %rdx
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-20(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	sre_strcat
	movl	%eax, -36(%rbp)
	cmpl	$0, %eax
	jge	.LBB220_19
# %bb.18:
	movabsq	$.L.str.2.537, %rdi
	movb	$0, %al
	callq	Die
.LBB220_19:
	movq	-8(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-20(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-36(%rbp), %esi
	movq	-48(%rbp), %rdx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	sre_strcat
	cmpl	$0, %eax
	jge	.LBB220_21
# %bb.20:
	movabsq	$.L.str.2.537, %rdi
	movb	$0, %al
	callq	Die
.LBB220_21:
	jmp	.LBB220_22
.LBB220_22:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end220:
	.size	MSAAddGS, .Lfunc_end220-MSAAddGS
	.cfi_endproc
                                        # -- End function
	.globl	MSAAppendGC             # -- Begin function MSAAppendGC
	.p2align	4, 0x90
	.type	MSAAppendGC,@function
MSAAppendGC:                            # @MSAAppendGC
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 248(%rax)
	jne	.LBB221_2
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movl	$517, %esi              # imm = 0x205
	movl	$8, %edx
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 248(%rcx)
	movl	$518, %esi              # imm = 0x206
	movl	$8, %edx
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 256(%rcx)
	callq	GKIInit
	movq	-8(%rbp), %rcx
	movq	%rax, 264(%rcx)
	movq	-8(%rbp), %rax
	movq	264(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	GKIStoreKey
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	256(%rax), %rax
	movq	$0, (%rax)
	jmp	.LBB221_5
.LBB221_2:
	movq	-8(%rbp), %rax
	movq	264(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	GKIKeyIndex
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB221_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	264(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	GKIStoreKey
	movabsq	$.L.str.529, %rdi
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	248(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	272(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$533, %esi              # imm = 0x215
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 248(%rcx)
	movq	-8(%rbp), %rax
	movq	256(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	272(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$534, %esi              # imm = 0x216
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 256(%rcx)
	movq	-8(%rbp), %rax
	movq	256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
.LBB221_4:
	jmp	.LBB221_5
.LBB221_5:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	272(%rcx), %eax
	jne	.LBB221_7
# %bb.6:
	movq	-24(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	248(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	272(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 272(%rax)
.LBB221_7:
	movq	-8(%rbp), %rax
	movq	256(%rax), %rdi
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rdx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	sre_strcat
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end221:
	.size	MSAAppendGC, .Lfunc_end221-MSAAppendGC
	.cfi_endproc
                                        # -- End function
	.globl	MSAGetGC                # -- Begin function MSAGetGC
	.p2align	4, 0x90
	.type	MSAGetGC,@function
MSAGetGC:                               # @MSAGetGC
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 264(%rax)
	jne	.LBB222_2
# %bb.1:
	movq	$0, -16(%rbp)
	jmp	.LBB222_5
.LBB222_2:
	movq	-8(%rbp), %rax
	movq	264(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	GKIKeyIndex
	movl	%eax, -20(%rbp)
	cmpl	$0, %eax
	jge	.LBB222_4
# %bb.3:
	movq	$0, -16(%rbp)
	jmp	.LBB222_5
.LBB222_4:
	movq	-8(%rbp), %rax
	movq	256(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
.LBB222_5:
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end222:
	.size	MSAGetGC, .Lfunc_end222-MSAGetGC
	.cfi_endproc
                                        # -- End function
	.globl	MSAAppendGR             # -- Begin function MSAAppendGR
	.p2align	4, 0x90
	.type	MSAAppendGR,@function
MSAAppendGR:                            # @MSAAppendGR
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 280(%rax)
	jne	.LBB223_6
# %bb.1:
	movabsq	$.L.str.529, %rdi
	movl	$601, %esi              # imm = 0x259
	movl	$8, %edx
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 280(%rcx)
	movl	$602, %esi              # imm = 0x25A
	movl	$8, %edx
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 288(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$603, %esi              # imm = 0x25B
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	288(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$0, -12(%rbp)
.LBB223_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB223_5
# %bb.3:                                #   in Loop: Header=BB223_2 Depth=1
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.4:                                #   in Loop: Header=BB223_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_2
.LBB223_5:
	callq	GKIInit
	movq	-8(%rbp), %rcx
	movq	%rax, 296(%rcx)
	movq	-8(%rbp), %rax
	movq	296(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	GKIStoreKey
	movl	%eax, -16(%rbp)
	jmp	.LBB223_13
.LBB223_6:
	movq	-8(%rbp), %rax
	movq	296(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	GKIKeyIndex
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB223_12
# %bb.7:
	movq	-8(%rbp), %rax
	movq	296(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	GKIStoreKey
	movabsq	$.L.str.529, %rdi
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	280(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	304(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$620, %esi              # imm = 0x26C
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 280(%rcx)
	movq	-8(%rbp), %rax
	movq	288(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	304(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$621, %esi              # imm = 0x26D
	callq	sre_realloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 288(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$622, %esi              # imm = 0x26E
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	288(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	304(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -12(%rbp)
.LBB223_8:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB223_11
# %bb.9:                                #   in Loop: Header=BB223_8 Depth=1
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	304(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
# %bb.10:                               #   in Loop: Header=BB223_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_8
.LBB223_11:
	jmp	.LBB223_12
.LBB223_12:
	jmp	.LBB223_13
.LBB223_13:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	304(%rcx), %eax
	jne	.LBB223_15
# %bb.14:
	movq	-24(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	304(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 304(%rax)
.LBB223_15:
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-28(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rdx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	sre_strcat
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end223:
	.size	MSAAppendGR, .Lfunc_end223-MSAAppendGR
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function MSAVerifyParse
.LCPI224_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI224_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	MSAVerifyParse
	.p2align	4, 0x90
	.type	MSAVerifyParse,@function
MSAVerifyParse:                         # @MSAVerifyParse
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 28(%rax)
	jne	.LBB224_5
# %bb.1:
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB224_3
# %bb.2:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rsi
	jmp	.LBB224_4
.LBB224_3:
	movabsq	$.L.str.4.542, %rsi
	jmp	.LBB224_4
.LBB224_4:
	movabsq	$.L.str.3.543, %rdi
	movb	$0, %al
	callq	Die
.LBB224_5:
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movl	$0, -12(%rbp)
.LBB224_6:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB224_39
# %bb.7:                                #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	jne	.LBB224_12
# %bb.8:                                #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB224_10
# %bb.9:                                #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdx
	jmp	.LBB224_11
.LBB224_10:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.4.542, %rdx
	jmp	.LBB224_11
.LBB224_11:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.5.544, %rdi
	movb	$0, %al
	callq	Die
.LBB224_12:                             #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB224_18
# %bb.13:                               #   in Loop: Header=BB224_6 Depth=1
	movsd	.LCPI224_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jne	.LBB224_18
	jp	.LBB224_18
# %bb.14:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB224_16
# %bb.15:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdx
	jmp	.LBB224_17
.LBB224_16:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.4.542, %rdx
	jmp	.LBB224_17
.LBB224_17:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.6.545, %rdi
	movb	$0, %al
	callq	Die
.LBB224_18:                             #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-8(%rbp), %rcx
	cmpl	24(%rcx), %eax
	je	.LBB224_23
# %bb.19:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB224_21
# %bb.20:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %r8
	jmp	.LBB224_22
.LBB224_21:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.4.542, %r8
	jmp	.LBB224_22
.LBB224_22:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.7.546, %rdi
	movb	$0, %al
	callq	Die
.LBB224_23:                             #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB224_30
# %bb.24:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB224_30
# %bb.25:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-8(%rbp), %rcx
	cmpl	24(%rcx), %eax
	je	.LBB224_30
# %bb.26:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB224_28
# %bb.27:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %r8
	jmp	.LBB224_29
.LBB224_28:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.4.542, %r8
	jmp	.LBB224_29
.LBB224_29:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.8.547, %rdi
	movb	$0, %al
	callq	Die
.LBB224_30:                             #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB224_37
# %bb.31:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB224_37
# %bb.32:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-8(%rbp), %rcx
	cmpl	24(%rcx), %eax
	je	.LBB224_37
# %bb.33:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB224_35
# %bb.34:                               #   in Loop: Header=BB224_6 Depth=1
	movq	-8(%rbp), %rax
	movq	40(%rax), %r8
	jmp	.LBB224_36
.LBB224_35:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.4.542, %r8
	jmp	.LBB224_36
.LBB224_36:                             #   in Loop: Header=BB224_6 Depth=1
	movabsq	$.L.str.9.548, %rdi
	movb	$0, %al
	callq	Die
.LBB224_37:                             #   in Loop: Header=BB224_6 Depth=1
	jmp	.LBB224_38
.LBB224_38:                             #   in Loop: Header=BB224_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB224_6
.LBB224_39:
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB224_45
# %bb.40:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movslq	24(%rcx), %rcx
	cmpq	%rcx, %rax
	je	.LBB224_45
# %bb.41:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %edx
	movq	-8(%rbp), %rcx
	cmpq	$0, 40(%rcx)
	je	.LBB224_43
# %bb.42:
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rcx
	jmp	.LBB224_44
.LBB224_43:
	movabsq	$.L.str.4.542, %rcx
	jmp	.LBB224_44
.LBB224_44:
	movabsq	$.L.str.10.549, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB224_45:
	movq	-8(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB224_51
# %bb.46:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movslq	24(%rcx), %rcx
	cmpq	%rcx, %rax
	je	.LBB224_51
# %bb.47:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %edx
	movq	-8(%rbp), %rcx
	cmpq	$0, 40(%rcx)
	je	.LBB224_49
# %bb.48:
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rcx
	jmp	.LBB224_50
.LBB224_49:
	movabsq	$.L.str.4.542, %rcx
	jmp	.LBB224_50
.LBB224_50:
	movabsq	$.L.str.11.550, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB224_51:
	movq	-8(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB224_57
# %bb.52:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movslq	24(%rcx), %rcx
	cmpq	%rcx, %rax
	je	.LBB224_57
# %bb.53:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %edx
	movq	-8(%rbp), %rcx
	cmpq	$0, 40(%rcx)
	je	.LBB224_55
# %bb.54:
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rcx
	jmp	.LBB224_56
.LBB224_55:
	movabsq	$.L.str.4.542, %rcx
	jmp	.LBB224_56
.LBB224_56:
	movabsq	$.L.str.12.551, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB224_57:
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB224_59
# %bb.58:
	movss	.LCPI224_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %esi
	callq	FSet
.LBB224_59:
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	je	.LBB224_61
# %bb.60:
	movq	-8(%rbp), %rax
	movq	328(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 328(%rax)
.LBB224_61:
	movq	-8(%rbp), %rax
	cmpq	$0, 336(%rax)
	je	.LBB224_63
# %bb.62:
	movq	-8(%rbp), %rax
	movq	336(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 336(%rax)
.LBB224_63:
	movq	-8(%rbp), %rax
	cmpq	$0, 344(%rax)
	je	.LBB224_65
# %bb.64:
	movq	-8(%rbp), %rax
	movq	344(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 344(%rax)
.LBB224_65:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end224:
	.size	MSAVerifyParse, .Lfunc_end224-MSAVerifyParse
	.cfi_endproc
                                        # -- End function
	.globl	MSAFileOpen             # -- Begin function MSAFileOpen
	.p2align	4, 0x90
	.type	MSAFileOpen,@function
MSAFileOpen:                            # @MSAFileOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$64, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$.L.str.529, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -80(%rbp)
	movq	%rax, %rdi
	movl	$760, %esi              # imm = 0x2F8
	movl	$64, %edx
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rdi
	movl	$.L.str.13.552, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB225_2
# %bb.1:
	movabsq	$.L.str.14.553, %rdi
	movq	stdin, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 52(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 48(%rax)
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-24(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 40(%rax)
	jmp	.LBB225_9
.LBB225_2:
	movabsq	$.L.str.15.554, %rsi
	movq	-40(%rbp), %rdi
	callq	fopen
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	je	.LBB225_4
# %bb.3:
	movabsq	$.L.str.529, %rbx
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	shlq	$0, %rax
	movq	%rbx, %rdi
	movl	$806, %esi              # imm = 0x326
	movq	%rax, %rdx
	callq	sre_malloc
	movabsq	$.L.str.16.555, %rsi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB225_8
.LBB225_4:
	leaq	-64(%rbp), %rdx
	movq	-40(%rbp), %rdi
	movq	-80(%rbp), %rsi
	callq	EnvFileOpen
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	je	.LBB225_6
# %bb.5:
	movq	-64(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	FileConcat
	movabsq	$.L.str.529, %r14
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	%rax, %rbx
	addq	$5, %rbx
	shlq	$0, %rbx
	movq	%r14, %rdi
	movl	$813, %esi              # imm = 0x32D
	movq	%rbx, %rdx
	callq	sre_malloc
	movabsq	$.L.str.16.555, %rsi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rdi
	callq	free
	jmp	.LBB225_7
.LBB225_6:
	movq	$0, -72(%rbp)
	jmp	.LBB225_17
.LBB225_7:
	jmp	.LBB225_8
.LBB225_8:
	movq	-24(%rbp), %rax
	movl	$0, 52(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-40(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-24(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-48(%rbp), %rdi
	movq	-24(%rbp), %rsi
	addq	$40, %rsi
	callq	SSIOpen
	movq	-48(%rbp), %rdi
	callq	free
.LBB225_9:
	cmpl	$0, -28(%rbp)
	jne	.LBB225_16
# %bb.10:
	movq	-24(%rbp), %rax
	cmpl	$1, 52(%rax)
	je	.LBB225_12
# %bb.11:
	movq	-24(%rbp), %rax
	cmpl	$0, 48(%rax)
	je	.LBB225_13
.LBB225_12:
	movabsq	$.L.str.17.556, %rdi
	movb	$0, %al
	callq	Die
.LBB225_13:
	movq	-24(%rbp), %rdi
	callq	MSAFileFormat
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB225_15
# %bb.14:
	movabsq	$.L.str.18.557, %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB225_15:
	jmp	.LBB225_16
.LBB225_16:
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB225_17:
	movq	-72(%rbp), %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end225:
	.size	MSAFileOpen, .Lfunc_end225-MSAFileOpen
	.cfi_endproc
                                        # -- End function
	.globl	MSAFileFormat           # -- Begin function MSAFileFormat
	.p2align	4, 0x90
	.type	MSAFileFormat,@function
MSAFileFormat:                          # @MSAFileFormat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	SeqfileFormat
	movl	%eax, -12(%rbp)
	cmpl	$7, -12(%rbp)
	jne	.LBB226_2
# %bb.1:
	movl	$105, -12(%rbp)
.LBB226_2:
	cmpl	$0, -12(%rbp)
	je	.LBB226_5
# %bb.3:
	cmpl	$100, -12(%rbp)
	jg	.LBB226_5
# %bb.4:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rbx
	movl	-12(%rbp), %edi
	callq	SeqfileFormat2String
	movabsq	$.L.str.21.558, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB226_5:
	movl	-12(%rbp), %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end226:
	.size	MSAFileFormat, .Lfunc_end226-MSAFileFormat
	.cfi_endproc
                                        # -- End function
	.globl	MSAFileRewind           # -- Begin function MSAFileRewind
	.p2align	4, 0x90
	.type	MSAFileRewind,@function
MSAFileRewind:                          # @MSAFileRewind
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 48(%rax)
	jne	.LBB227_2
# %bb.1:
	movq	-16(%rbp), %rax
	cmpl	$0, 52(%rax)
	je	.LBB227_3
.LBB227_2:
	movl	$0, -4(%rbp)
	jmp	.LBB227_4
.LBB227_3:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	rewind
	movl	$1, -4(%rbp)
.LBB227_4:
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end227:
	.size	MSAFileRewind, .Lfunc_end227-MSAFileRewind
	.cfi_endproc
                                        # -- End function
	.globl	MSAFilePositionByKey    # -- Begin function MSAFilePositionByKey
	.p2align	4, 0x90
	.type	MSAFilePositionByKey,@function
MSAFilePositionByKey:                   # @MSAFilePositionByKey
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB228_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB228_7
.LBB228_2:
	leaq	-28(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	SSIGetOffsetByName
	cmpl	$0, %eax
	je	.LBB228_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB228_7
.LBB228_4:
	leaq	-48(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	SSISetFilePosition
	cmpl	$0, %eax
	je	.LBB228_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB228_7
.LBB228_6:
	movl	$1, -4(%rbp)
.LBB228_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end228:
	.size	MSAFilePositionByKey, .Lfunc_end228-MSAFilePositionByKey
	.cfi_endproc
                                        # -- End function
	.globl	MSAFilePositionByIndex  # -- Begin function MSAFilePositionByIndex
	.p2align	4, 0x90
	.type	MSAFilePositionByIndex,@function
MSAFilePositionByIndex:                 # @MSAFilePositionByIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB229_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB229_7
.LBB229_2:
	leaq	-24(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	movl	-20(%rbp), %esi
	callq	SSIGetOffsetByNumber
	cmpl	$0, %eax
	je	.LBB229_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB229_7
.LBB229_4:
	leaq	-40(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	SSISetFilePosition
	cmpl	$0, %eax
	je	.LBB229_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB229_7
.LBB229_6:
	movl	$1, -4(%rbp)
.LBB229_7:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end229:
	.size	MSAFilePositionByIndex, .Lfunc_end229-MSAFilePositionByIndex
	.cfi_endproc
                                        # -- End function
	.globl	MSAFileRead             # -- Begin function MSAFileRead
	.p2align	4, 0x90
	.type	MSAFileRead,@function
MSAFileRead:                            # @MSAFileRead
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	$0, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	addl	$-101, %eax
	movl	%eax, %ecx
	subl	$5, %ecx
	ja	.LBB230_8
# %bb.1:
	movq	.LJTI230_0(,%rax,8), %rax
	jmpq	*%rax
.LBB230_2:
	movq	-16(%rbp), %rdi
	callq	ReadStockholm
	movq	%rax, -8(%rbp)
	jmp	.LBB230_9
.LBB230_3:
	movq	-16(%rbp), %rdi
	callq	ReadMSF
	movq	%rax, -8(%rbp)
	jmp	.LBB230_9
.LBB230_4:
	movq	-16(%rbp), %rdi
	callq	ReadA2M
	movq	%rax, -8(%rbp)
	jmp	.LBB230_9
.LBB230_5:
	movq	-16(%rbp), %rdi
	callq	ReadClustal
	movq	%rax, -8(%rbp)
	jmp	.LBB230_9
.LBB230_6:
	movq	-16(%rbp), %rdi
	callq	ReadSELEX
	movq	%rax, -8(%rbp)
	jmp	.LBB230_9
.LBB230_7:
	movq	-16(%rbp), %rdi
	callq	ReadPhylip
	movq	%rax, -8(%rbp)
	jmp	.LBB230_9
.LBB230_8:
	movabsq	$.L.str.19.559, %rdi
	movb	$0, %al
	callq	Die
.LBB230_9:
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end230:
	.size	MSAFileRead, .Lfunc_end230-MSAFileRead
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI230_0:
	.quad	.LBB230_2
	.quad	.LBB230_6
	.quad	.LBB230_3
	.quad	.LBB230_5
	.quad	.LBB230_4
	.quad	.LBB230_7
                                        # -- End function
	.text
	.globl	MSAFileClose            # -- Begin function MSAFileClose
	.p2align	4, 0x90
	.type	MSAFileClose,@function
MSAFileClose:                           # @MSAFileClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 52(%rax)
	jne	.LBB231_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fclose
.LBB231_2:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB231_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB231_4:
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB231_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	SSIClose
.LBB231_6:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB231_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
.LBB231_8:
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end231:
	.size	MSAFileClose, .Lfunc_end231-MSAFileClose
	.cfi_endproc
                                        # -- End function
	.globl	MSAFileGetLine          # -- Begin function MSAFileGetLine
	.p2align	4, 0x90
	.type	MSAFileGetLine,@function
MSAFileGetLine:                         # @MSAFileGetLine
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$24, %rdi
	movq	-8(%rbp), %rsi
	addq	$32, %rsi
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	callq	sre_fgets
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB232_2
# %bb.1:
	movq	$0, -16(%rbp)
	jmp	.LBB232_3
.LBB232_2:
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
.LBB232_3:
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end232:
	.size	MSAFileGetLine, .Lfunc_end232-MSAFileGetLine
	.cfi_endproc
                                        # -- End function
	.globl	MSAFileWrite            # -- Begin function MSAFileWrite
	.p2align	4, 0x90
	.type	MSAFileWrite,@function
MSAFileWrite:                           # @MSAFileWrite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	-20(%rbp), %eax
	addl	$-101, %eax
	movl	%eax, %ecx
	subl	$5, %ecx
	ja	.LBB233_11
# %bb.1:
	movq	.LJTI233_0(,%rax,8), %rax
	jmpq	*%rax
.LBB233_2:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WriteA2M
	jmp	.LBB233_12
.LBB233_3:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WriteClustal
	jmp	.LBB233_12
.LBB233_4:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WriteMSF
	jmp	.LBB233_12
.LBB233_5:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WritePhylip
	jmp	.LBB233_12
.LBB233_6:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WriteSELEX
	jmp	.LBB233_12
.LBB233_7:
	cmpl	$0, -24(%rbp)
	je	.LBB233_9
# %bb.8:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WriteStockholmOneBlock
	jmp	.LBB233_10
.LBB233_9:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	WriteStockholm
.LBB233_10:
	jmp	.LBB233_12
.LBB233_11:
	movabsq	$.L.str.20.562, %rdi
	movl	-20(%rbp), %esi
	movb	$0, %al
	callq	Die
.LBB233_12:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end233:
	.size	MSAFileWrite, .Lfunc_end233-MSAFileWrite
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI233_0:
	.quad	.LBB233_7
	.quad	.LBB233_6
	.quad	.LBB233_4
	.quad	.LBB233_3
	.quad	.LBB233_2
	.quad	.LBB233_5
                                        # -- End function
	.text
	.globl	MSAGetSeqidx            # -- Begin function MSAGetSeqidx
	.p2align	4, 0x90
	.type	MSAGetSeqidx,@function
MSAGetSeqidx:                           # @MSAGetSeqidx
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jl	.LBB234_4
# %bb.1:
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB234_4
# %bb.2:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB234_4
# %bb.3:
	movl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB234_9
.LBB234_4:
	movq	-16(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	GKIKeyIndex
	movl	%eax, -4(%rbp)
	cmpl	$0, %eax
	jl	.LBB234_6
# %bb.5:
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB234_9
.LBB234_6:
	movq	-16(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	GKIStoreKey
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jl	.LBB234_8
# %bb.7:
	movq	-16(%rbp), %rdi
	callq	MSAExpand
.LBB234_8:
	movq	-32(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB234_9:
	movl	-20(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end234:
	.size	MSAGetSeqidx, .Lfunc_end234-MSAGetSeqidx
	.cfi_endproc
                                        # -- End function
	.globl	MSAFromAINFO            # -- Begin function MSAFromAINFO
	.p2align	4, 0x90
	.type	MSAFromAINFO,@function
MSAFromAINFO:                           # @MSAFromAINFO
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edi
	movq	-24(%rbp), %rax
	movl	4(%rax), %esi
	callq	MSAAlloc
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
.LBB235_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_9 Depth 2
                                        #     Child Loop BB235_17 Depth 2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jge	.LBB235_24
# %bb.2:                                #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	addq	$4, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	GKIStoreKey
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB235_4
# %bb.3:                                #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	40(%rax), %rdx
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdx
	addq	$132, %rdx
	callq	MSASetSeqAccession
.LBB235_4:                              #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB235_6
# %bb.5:                                #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	40(%rax), %rdx
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdx
	addq	$196, %rdx
	callq	MSASetSeqDescription
.LBB235_6:                              #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB235_14
# %bb.7:                                #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	jne	.LBB235_13
# %bb.8:                                #   in Loop: Header=BB235_1 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$1055, %esi             # imm = 0x41F
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$2, %rdx
	movl	$1056, %esi             # imm = 0x420
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
	movl	$0, -28(%rbp)
.LBB235_9:                              #   Parent Loop BB235_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB235_12
# %bb.10:                               #   in Loop: Header=BB235_9 Depth=2
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.11:                               #   in Loop: Header=BB235_9 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB235_9
.LBB235_12:                             #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_13
.LBB235_13:                             #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rax
	movl	24(%rax), %esi
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	344(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	112(%rax), %rcx
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rcx
	callq	MakeAlignedString
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	336(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB235_14:                             #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB235_22
# %bb.15:                               #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 120(%rax)
	jne	.LBB235_21
# %bb.16:                               #   in Loop: Header=BB235_1 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$1068, %esi             # imm = 0x42C
	callq	sre_malloc
	movabsq	$.L.str.529, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 120(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$2, %rdx
	movl	$1069, %esi             # imm = 0x42D
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 344(%rcx)
	movl	$0, -28(%rbp)
.LBB235_17:                             #   Parent Loop BB235_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB235_20
# %bb.18:                               #   in Loop: Header=BB235_17 Depth=2
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.19:                               #   in Loop: Header=BB235_17 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB235_17
.LBB235_20:                             #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_21
.LBB235_21:                             #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rax
	movl	24(%rax), %esi
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	352(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	120(%rax), %rcx
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rcx
	callq	MakeAlignedString
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	344(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB235_22:                             #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_23
.LBB235_23:                             #   in Loop: Header=BB235_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_1
.LBB235_24:
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movq	64(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-24(%rbp), %rax
	movq	72(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB235_26
# %bb.25:
	movq	-24(%rbp), %rax
	movss	80(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 128(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 152(%rax)
	movq	-24(%rbp), %rax
	movss	84(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 132(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 156(%rax)
.LBB235_26:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB235_28
# %bb.27:
	movq	-24(%rbp), %rax
	movss	88(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 144(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 168(%rax)
	movq	-24(%rbp), %rax
	movss	92(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 148(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 172(%rax)
.LBB235_28:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB235_30
# %bb.29:
	movq	-24(%rbp), %rax
	movss	96(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 136(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 160(%rax)
	movq	-24(%rbp), %rax
	movss	100(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 140(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 164(%rax)
.LBB235_30:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end235:
	.size	MSAFromAINFO, .Lfunc_end235-MSAFromAINFO
	.cfi_endproc
                                        # -- End function
	.globl	MSAMingap               # -- Begin function MSAMingap
	.p2align	4, 0x90
	.type	MSAMingap,@function
MSAMingap:                              # @MSAMingap
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.529, %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movslq	24(%rcx), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$1157, %esi             # imm = 0x485
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB236_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_3 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB236_18
# %bb.2:                                #   in Loop: Header=BB236_1 Depth=1
	movl	$0, -8(%rbp)
.LBB236_3:                              #   Parent Loop BB236_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB236_12
# %bb.4:                                #   in Loop: Header=BB236_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB236_10
# %bb.5:                                #   in Loop: Header=BB236_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB236_10
# %bb.6:                                #   in Loop: Header=BB236_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB236_10
# %bb.7:                                #   in Loop: Header=BB236_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB236_10
# %bb.8:                                #   in Loop: Header=BB236_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB236_10
# %bb.9:                                #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_13
.LBB236_10:                             #   in Loop: Header=BB236_3 Depth=2
	jmp	.LBB236_11
.LBB236_11:                             #   in Loop: Header=BB236_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB236_3
.LBB236_12:                             # %.loopexit
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_13
.LBB236_13:                             #   in Loop: Header=BB236_1 Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jne	.LBB236_15
# %bb.14:                               #   in Loop: Header=BB236_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB236_16
.LBB236_15:                             #   in Loop: Header=BB236_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB236_16:                             #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_17
.LBB236_17:                             #   in Loop: Header=BB236_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB236_1
.LBB236_18:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	MSAShorterAlignment
	movq	-24(%rbp), %rdi
	callq	free
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end236:
	.size	MSAMingap, .Lfunc_end236-MSAMingap
	.cfi_endproc
                                        # -- End function
	.globl	MSAShorterAlignment     # -- Begin function MSAShorterAlignment
	.p2align	4, 0x90
	.type	MSAShorterAlignment,@function
MSAShorterAlignment:                    # @MSAShorterAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -24(%rbp)
.LBB237_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_6 Depth 2
                                        #       Child Loop BB237_14 Depth 3
                                        #     Child Loop BB237_28 Depth 2
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB237_34
# %bb.2:                                #   in Loop: Header=BB237_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB237_4
# %bb.3:                                #   in Loop: Header=BB237_1 Depth=1
	jmp	.LBB237_33
.LBB237_4:                              #   in Loop: Header=BB237_1 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB237_32
# %bb.5:                                #   in Loop: Header=BB237_1 Depth=1
	movl	$0, -4(%rbp)
.LBB237_6:                              #   Parent Loop BB237_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_14 Depth 3
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB237_21
# %bb.7:                                #   in Loop: Header=BB237_6 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB237_10
# %bb.8:                                #   in Loop: Header=BB237_6 Depth=2
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB237_10
# %bb.9:                                #   in Loop: Header=BB237_6 Depth=2
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	112(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB237_10:                             #   in Loop: Header=BB237_6 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB237_13
# %bb.11:                               #   in Loop: Header=BB237_6 Depth=2
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB237_13
# %bb.12:                               #   in Loop: Header=BB237_6 Depth=2
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	120(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB237_13:                             #   in Loop: Header=BB237_6 Depth=2
	movl	$0, -20(%rbp)
.LBB237_14:                             #   Parent Loop BB237_1 Depth=1
                                        #     Parent Loop BB237_6 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	304(%rcx), %eax
	jge	.LBB237_19
# %bb.15:                               #   in Loop: Header=BB237_14 Depth=3
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB237_17
# %bb.16:                               #   in Loop: Header=BB237_14 Depth=3
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	288(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB237_17:                             #   in Loop: Header=BB237_14 Depth=3
	jmp	.LBB237_18
.LBB237_18:                             #   in Loop: Header=BB237_14 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB237_14
.LBB237_19:                             #   in Loop: Header=BB237_6 Depth=2
	jmp	.LBB237_20
.LBB237_20:                             #   in Loop: Header=BB237_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_6
.LBB237_21:                             #   in Loop: Header=BB237_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB237_23
# %bb.22:                               #   in Loop: Header=BB237_1 Depth=1
	movq	-16(%rbp), %rax
	movq	72(%rax), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB237_23:                             #   in Loop: Header=BB237_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB237_25
# %bb.24:                               #   in Loop: Header=BB237_1 Depth=1
	movq	-16(%rbp), %rax
	movq	80(%rax), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB237_25:                             #   in Loop: Header=BB237_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB237_27
# %bb.26:                               #   in Loop: Header=BB237_1 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	88(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB237_27:                             #   in Loop: Header=BB237_1 Depth=1
	movl	$0, -20(%rbp)
.LBB237_28:                             #   Parent Loop BB237_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	272(%rcx), %eax
	jge	.LBB237_31
# %bb.29:                               #   in Loop: Header=BB237_28 Depth=2
	movq	-16(%rbp), %rax
	movq	256(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	256(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.30:                               #   in Loop: Header=BB237_28 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB237_28
.LBB237_31:                             #   in Loop: Header=BB237_1 Depth=1
	jmp	.LBB237_32
.LBB237_32:                             #   in Loop: Header=BB237_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB237_33:                             #   in Loop: Header=BB237_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB237_1
.LBB237_34:
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movl	$0, -4(%rbp)
.LBB237_35:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_43 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB237_50
# %bb.36:                               #   in Loop: Header=BB237_35 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB237_39
# %bb.37:                               #   in Loop: Header=BB237_35 Depth=1
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB237_39
# %bb.38:                               #   in Loop: Header=BB237_35 Depth=1
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB237_39:                             #   in Loop: Header=BB237_35 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB237_42
# %bb.40:                               #   in Loop: Header=BB237_35 Depth=1
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB237_42
# %bb.41:                               #   in Loop: Header=BB237_35 Depth=1
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB237_42:                             #   in Loop: Header=BB237_35 Depth=1
	movl	$0, -20(%rbp)
.LBB237_43:                             #   Parent Loop BB237_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	304(%rcx), %eax
	jge	.LBB237_48
# %bb.44:                               #   in Loop: Header=BB237_43 Depth=2
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB237_46
# %bb.45:                               #   in Loop: Header=BB237_43 Depth=2
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB237_46:                             #   in Loop: Header=BB237_43 Depth=2
	jmp	.LBB237_47
.LBB237_47:                             #   in Loop: Header=BB237_43 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB237_43
.LBB237_48:                             #   in Loop: Header=BB237_35 Depth=1
	jmp	.LBB237_49
.LBB237_49:                             #   in Loop: Header=BB237_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_35
.LBB237_50:
	movq	-16(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB237_52
# %bb.51:
	movq	-16(%rbp), %rax
	movq	72(%rax), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB237_52:
	movq	-16(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB237_54
# %bb.53:
	movq	-16(%rbp), %rax
	movq	80(%rax), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB237_54:
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB237_56
# %bb.55:
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB237_56:
	movl	$0, -20(%rbp)
.LBB237_57:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	272(%rcx), %eax
	jge	.LBB237_60
# %bb.58:                               #   in Loop: Header=BB237_57 Depth=1
	movq	-16(%rbp), %rax
	movq	256(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.59:                               #   in Loop: Header=BB237_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB237_57
.LBB237_60:
	popq	%rbp
	retq
.Lfunc_end237:
	.size	MSAShorterAlignment, .Lfunc_end237-MSAShorterAlignment
	.cfi_endproc
                                        # -- End function
	.globl	MSANogap                # -- Begin function MSANogap
	.p2align	4, 0x90
	.type	MSANogap,@function
MSANogap:                               # @MSANogap
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.529, %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movslq	24(%rcx), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$1189, %esi             # imm = 0x4A5
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB238_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_3 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB238_18
# %bb.2:                                #   in Loop: Header=BB238_1 Depth=1
	movl	$0, -8(%rbp)
.LBB238_3:                              #   Parent Loop BB238_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB238_12
# %bb.4:                                #   in Loop: Header=BB238_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB238_9
# %bb.5:                                #   in Loop: Header=BB238_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB238_9
# %bb.6:                                #   in Loop: Header=BB238_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB238_9
# %bb.7:                                #   in Loop: Header=BB238_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB238_9
# %bb.8:                                #   in Loop: Header=BB238_3 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB238_10
.LBB238_9:                              #   in Loop: Header=BB238_1 Depth=1
	jmp	.LBB238_13
.LBB238_10:                             #   in Loop: Header=BB238_3 Depth=2
	jmp	.LBB238_11
.LBB238_11:                             #   in Loop: Header=BB238_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB238_3
.LBB238_12:                             # %.loopexit
                                        #   in Loop: Header=BB238_1 Depth=1
	jmp	.LBB238_13
.LBB238_13:                             #   in Loop: Header=BB238_1 Depth=1
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jne	.LBB238_15
# %bb.14:                               #   in Loop: Header=BB238_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	jmp	.LBB238_16
.LBB238_15:                             #   in Loop: Header=BB238_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB238_16:                             #   in Loop: Header=BB238_1 Depth=1
	jmp	.LBB238_17
.LBB238_17:                             #   in Loop: Header=BB238_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB238_1
.LBB238_18:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	MSAShorterAlignment
	movq	-24(%rbp), %rdi
	callq	free
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end238:
	.size	MSANogap, .Lfunc_end238-MSANogap
	.cfi_endproc
                                        # -- End function
	.globl	MSASmallerAlignment     # -- Begin function MSASmallerAlignment
	.p2align	4, 0x90
	.type	MSASmallerAlignment,@function
MSASmallerAlignment:                    # @MSASmallerAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB239_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB239_6
# %bb.2:                                #   in Loop: Header=BB239_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB239_4
# %bb.3:                                #   in Loop: Header=BB239_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB239_4:                              #   in Loop: Header=BB239_1 Depth=1
	jmp	.LBB239_5
.LBB239_5:                              #   in Loop: Header=BB239_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB239_1
.LBB239_6:
	cmpl	$0, -36(%rbp)
	jne	.LBB239_8
# %bb.7:
	movq	-48(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB239_33
.LBB239_8:
	movl	-36(%rbp), %edi
	xorl	%esi, %esi
	callq	MSAAlloc
	movq	%rax, -16(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB239_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB239_28
# %bb.10:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB239_26
# %bb.11:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movl	24(%rax), %esi
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movl	24(%rax), %esi
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	GKIStoreKey
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB239_13
# %bb.12:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	MSASetSeqAccession
.LBB239_13:                             #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB239_15
# %bb.14:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	MSASetSeqDescription
.LBB239_15:                             #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB239_20
# %bb.16:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB239_20
# %bb.17:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	jne	.LBB239_19
# %bb.18:                               #   in Loop: Header=BB239_9 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rdx
	shlq	$3, %rdx
	movl	$1333, %esi             # imm = 0x535
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
.LBB239_19:                             #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	112(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB239_20:                             #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB239_25
# %bb.21:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB239_25
# %bb.22:                               #   in Loop: Header=BB239_9 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	jne	.LBB239_24
# %bb.23:                               #   in Loop: Header=BB239_9 Depth=1
	movabsq	$.L.str.529, %rdi
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rdx
	shlq	$3, %rdx
	movl	$1338, %esi             # imm = 0x53A
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 120(%rcx)
.LBB239_24:                             #   in Loop: Header=BB239_9 Depth=1
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	120(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB239_25:                             #   in Loop: Header=BB239_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB239_26:                             #   in Loop: Header=BB239_9 Depth=1
	jmp	.LBB239_27
.LBB239_27:                             #   in Loop: Header=BB239_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB239_9
.LBB239_28:
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-24(%rbp), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-24(%rbp), %rax
	movq	64(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	72(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movl	$0, -32(%rbp)
.LBB239_29:                             # =>This Inner Loop Header: Depth=1
	cmpl	$6, -32(%rbp)
	jge	.LBB239_32
# %bb.30:                               #   in Loop: Header=BB239_29 Depth=1
	movq	-24(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movss	128(%rax,%rcx,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movss	%xmm0, 128(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	152(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, 152(%rcx,%rdx,4)
# %bb.31:                               #   in Loop: Header=BB239_29 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB239_29
.LBB239_32:
	movq	-16(%rbp), %rax
	movq	328(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rdi
	callq	MSAMingap
	movq	-16(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB239_33:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end239:
	.size	MSASmallerAlignment, .Lfunc_end239-MSASmallerAlignment
	.cfi_endproc
                                        # -- End function
	.globl	MSAGetSeqAccession      # -- Begin function MSAGetSeqAccession
	.p2align	4, 0x90
	.type	MSAGetSeqAccession,@function
MSAGetSeqAccession:                     # @MSAGetSeqAccession
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB240_3
# %bb.1:
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB240_3
# %bb.2:
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB240_4
.LBB240_3:
	movq	$0, -24(%rbp)
.LBB240_4:
	movq	-24(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end240:
	.size	MSAGetSeqAccession, .Lfunc_end240-MSAGetSeqAccession
	.cfi_endproc
                                        # -- End function
	.globl	MSAGetSeqDescription    # -- Begin function MSAGetSeqDescription
	.p2align	4, 0x90
	.type	MSAGetSeqDescription,@function
MSAGetSeqDescription:                   # @MSAGetSeqDescription
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB241_3
# %bb.1:
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB241_3
# %bb.2:
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB241_4
.LBB241_3:
	movq	$0, -24(%rbp)
.LBB241_4:
	movq	-24(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end241:
	.size	MSAGetSeqDescription, .Lfunc_end241-MSAGetSeqDescription
	.cfi_endproc
                                        # -- End function
	.globl	MSAGetSeqSS             # -- Begin function MSAGetSeqSS
	.p2align	4, 0x90
	.type	MSAGetSeqSS,@function
MSAGetSeqSS:                            # @MSAGetSeqSS
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB242_3
# %bb.1:
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB242_3
# %bb.2:
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB242_4
.LBB242_3:
	movq	$0, -24(%rbp)
.LBB242_4:
	movq	-24(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end242:
	.size	MSAGetSeqSS, .Lfunc_end242-MSAGetSeqSS
	.cfi_endproc
                                        # -- End function
	.globl	MSAGetSeqSA             # -- Begin function MSAGetSeqSA
	.p2align	4, 0x90
	.type	MSAGetSeqSA,@function
MSAGetSeqSA:                            # @MSAGetSeqSA
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB243_3
# %bb.1:
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB243_3
# %bb.2:
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB243_4
.LBB243_3:
	movq	$0, -24(%rbp)
.LBB243_4:
	movq	-24(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end243:
	.size	MSAGetSeqSA, .Lfunc_end243-MSAGetSeqSA
	.cfi_endproc
                                        # -- End function
	.globl	MSAAverageSequenceLength # -- Begin function MSAAverageSequenceLength
	.p2align	4, 0x90
	.type	MSAAverageSequenceLength,@function
MSAAverageSequenceLength:               # @MSAAverageSequenceLength
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -24(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB244_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB244_4
# %bb.2:                                #   in Loop: Header=BB244_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	DealignedLength
	cvtsi2ssl	%eax, %xmm0
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB244_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB244_1
.LBB244_4:
	movq	-24(%rbp), %rax
	cmpl	$0, 28(%rax)
	jne	.LBB244_6
# %bb.5:
	xorps	%xmm0, %xmm0
	movss	%xmm0, -12(%rbp)
	jmp	.LBB244_7
.LBB244_6:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -12(%rbp)
.LBB244_7:
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end244:
	.size	MSAAverageSequenceLength, .Lfunc_end244-MSAAverageSequenceLength
	.cfi_endproc
                                        # -- End function
	.globl	ReadMSF                 # -- Begin function ReadMSF
	.p2align	4, 0x90
	.type	ReadMSF,@function
ReadMSF:                                # @ReadMSF
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB245_2
# %bb.1:
	movq	$0, -56(%rbp)
	jmp	.LBB245_86
.LBB245_2:
	movq	-40(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_4
# %bb.3:
	movq	$0, -56(%rbp)
	jmp	.LBB245_86
.LBB245_4:
	movl	$10, %edi
	xorl	%esi, %esi
	callq	MSAAlloc
	movabsq	$.L.str.567, %rsi
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rdi
	movl	$23, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB245_8
# %bb.5:
	movq	-24(%rbp), %rax
	movl	$3, 36(%rax)
	movq	-40(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_7
# %bb.6:
	movq	$0, -56(%rbp)
	jmp	.LBB245_86
.LBB245_7:
	jmp	.LBB245_13
.LBB245_8:
	movabsq	$.L.str.1.568, %rsi
	movq	-16(%rbp), %rdi
	movl	$23, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB245_12
# %bb.9:
	movq	-24(%rbp), %rax
	movl	$2, 36(%rax)
	movq	-40(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_11
# %bb.10:
	movq	$0, -56(%rbp)
	jmp	.LBB245_86
.LBB245_11:
	jmp	.LBB245_12
.LBB245_12:
	jmp	.LBB245_13
.LBB245_13:
	jmp	.LBB245_14
.LBB245_14:                             # =>This Inner Loop Header: Depth=1
	movabsq	$.L.str.2.569, %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB245_27
# %bb.15:                               #   in Loop: Header=BB245_14 Depth=1
	movabsq	$.L.str.3.570, %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB245_27
# %bb.16:                               #   in Loop: Header=BB245_14 Depth=1
	movabsq	$.L.str.4.571, %rdi
	movq	-16(%rbp), %rsi
	movl	$3, %edx
	callq	Strparse
	cmpl	$0, %eax
	je	.LBB245_27
# %bb.17:
	movq	sqd_parse(%rip), %rdi
	callq	atoi
	movl	%eax, -88(%rbp)
	movq	sqd_parse+8(%rip), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$78, %ecx
	je	.LBB245_20
	jmp	.LBB245_18
.LBB245_18:
	movl	%eax, %ecx
	subl	$80, %ecx
	je	.LBB245_21
	jmp	.LBB245_19
.LBB245_19:
	subl	$88, %eax
	je	.LBB245_22
	jmp	.LBB245_23
.LBB245_20:
	movl	$2, -48(%rbp)
	jmp	.LBB245_24
.LBB245_21:
	movl	$3, -48(%rbp)
	jmp	.LBB245_24
.LBB245_22:
	movl	$0, -48(%rbp)
	jmp	.LBB245_24
.LBB245_23:
	movl	$0, -48(%rbp)
.LBB245_24:
	movq	sqd_parse+24, %rdi
	callq	atoi
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB245_26
# %bb.25:
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 36(%rcx)
.LBB245_26:
	jmp	.LBB245_32
.LBB245_27:                             #   in Loop: Header=BB245_14 Depth=1
	movq	-16(%rbp), %rdi
	callq	IsBlankline
	cmpl	$0, %eax
	jne	.LBB245_29
# %bb.28:                               #   in Loop: Header=BB245_14 Depth=1
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	MSAAddComment
.LBB245_29:                             #   in Loop: Header=BB245_14 Depth=1
	jmp	.LBB245_30
.LBB245_30:                             #   in Loop: Header=BB245_14 Depth=1
	movq	-40(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_14
# %bb.31:                               # %.loopexit2
	jmp	.LBB245_32
.LBB245_32:
	jmp	.LBB245_33
.LBB245_33:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_35 Depth 2
	movq	-40(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB245_57
# %bb.34:                               #   in Loop: Header=BB245_33 Depth=1
	jmp	.LBB245_35
.LBB245_35:                             #   Parent Loop BB245_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB245_37
# %bb.36:                               #   in Loop: Header=BB245_35 Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$9, %ecx
	jne	.LBB245_38
.LBB245_37:                             #   in Loop: Header=BB245_35 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	setne	%al
.LBB245_38:                             #   in Loop: Header=BB245_35 Depth=2
	testb	$1, %al
	jne	.LBB245_39
	jmp	.LBB245_40
.LBB245_39:                             #   in Loop: Header=BB245_35 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB245_35
.LBB245_40:                             #   in Loop: Header=BB245_33 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$10, %eax
	jne	.LBB245_43
# %bb.41:                               #   in Loop: Header=BB245_33 Depth=1
	jmp	.LBB245_42
.LBB245_42:                             # %.backedge1
                                        #   in Loop: Header=BB245_33 Depth=1
	jmp	.LBB245_33
.LBB245_43:                             #   in Loop: Header=BB245_33 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$33, %eax
	jne	.LBB245_45
# %bb.44:                               #   in Loop: Header=BB245_33 Depth=1
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	MSAAddComment
	jmp	.LBB245_55
.LBB245_45:                             #   in Loop: Header=BB245_33 Depth=1
	movabsq	$.L.str.5.572, %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	je	.LBB245_51
# %bb.46:                               #   in Loop: Header=BB245_33 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.6.573, %rsi
	leaq	-44(%rbp), %rdx
	movq	-32(%rbp), %rax
	addq	$5, %rax
	movq	%rax, -32(%rbp)
	callq	sre_strtok
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-64(%rbp), %rsi
	callq	GKIStoreKey
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jl	.LBB245_48
# %bb.47:                               #   in Loop: Header=BB245_33 Depth=1
	movq	-24(%rbp), %rdi
	callq	MSAExpand
.LBB245_48:                             #   in Loop: Header=BB245_33 Depth=1
	movq	-64(%rbp), %rdi
	movl	-44(%rbp), %esi
	callq	sre_strdup
	movabsq	$.L.str.7.574, %rsi
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-32(%rbp), %rdi
	callq	strstr
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_50
# %bb.49:                               #   in Loop: Header=BB245_33 Depth=1
	movabsq	$.L.str.8.575, %rdi
	movq	-40(%rbp), %rax
	movl	16(%rax), %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rcx
	movb	$0, %al
	callq	Die
.LBB245_50:                             #   in Loop: Header=BB245_33 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.6.573, %rsi
	leaq	-44(%rbp), %rdx
	movq	-32(%rbp), %rax
	addq	$7, %rax
	movq	%rax, -32(%rbp)
	callq	sre_strtok
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	32(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 32(%rax)
	jmp	.LBB245_54
.LBB245_51:
	movabsq	$.L.str.9.576, %rsi
	movq	-16(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB245_53
# %bb.52:
	jmp	.LBB245_58
.LBB245_53:
	movabsq	$.L.str.10.577, %rdi
	movq	-40(%rbp), %rax
	movl	16(%rax), %esi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rcx
	movb	$0, %al
	callq	Die
	movl	$5, squid_errno
	movq	$0, -56(%rbp)
	jmp	.LBB245_86
.LBB245_54:                             #   in Loop: Header=BB245_33 Depth=1
	jmp	.LBB245_55
.LBB245_55:                             #   in Loop: Header=BB245_33 Depth=1
	jmp	.LBB245_56
.LBB245_56:                             #   in Loop: Header=BB245_33 Depth=1
	jmp	.LBB245_42
.LBB245_57:                             # %.loopexit
	jmp	.LBB245_58
.LBB245_58:
	jmp	.LBB245_59
.LBB245_59:                             # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB245_71
# %bb.60:                               #   in Loop: Header=BB245_59 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.6.573, %rsi
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -80(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_63
# %bb.61:                               #   in Loop: Header=BB245_59 Depth=1
	jmp	.LBB245_62
.LBB245_62:                             # %.backedge
                                        #   in Loop: Header=BB245_59 Depth=1
	jmp	.LBB245_59
.LBB245_63:                             #   in Loop: Header=BB245_59 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.11.578, %rsi
	leaq	-44(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -72(%rbp)
	cmpq	$0, %rax
	jne	.LBB245_65
# %bb.64:                               #   in Loop: Header=BB245_59 Depth=1
	jmp	.LBB245_62
.LBB245_65:                             #   in Loop: Header=BB245_59 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-80(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB245_68
# %bb.66:                               #   in Loop: Header=BB245_59 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-72(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB245_68
# %bb.67:                               #   in Loop: Header=BB245_59 Depth=1
	jmp	.LBB245_62
.LBB245_68:                             #   in Loop: Header=BB245_59 Depth=1
	movq	-24(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-80(%rbp), %rsi
	callq	GKIKeyIndex
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jge	.LBB245_70
# %bb.69:                               #   in Loop: Header=BB245_59 Depth=1
	jmp	.LBB245_62
.LBB245_70:                             #   in Loop: Header=BB245_59 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-24(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-72(%rbp), %rdx
	movl	-44(%rbp), %ecx
	callq	sre_strcat
	movq	-24(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB245_62
.LBB245_71:
	movl	$0, -4(%rbp)
.LBB245_72:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_76 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB245_85
# %bb.73:                               #   in Loop: Header=BB245_72 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	jne	.LBB245_75
# %bb.74:                               #   in Loop: Header=BB245_72 Depth=1
	movabsq	$.L.str.12.579, %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movb	$0, %al
	callq	Die
.LBB245_75:                             #   in Loop: Header=BB245_72 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -16(%rbp)
.LBB245_76:                             #   Parent Loop BB245_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB245_83
# %bb.77:                               #   in Loop: Header=BB245_76 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB245_79
# %bb.78:                               #   in Loop: Header=BB245_76 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$9, %eax
	jne	.LBB245_80
.LBB245_79:                             #   in Loop: Header=BB245_76 Depth=2
	movq	-24(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB245_81
.LBB245_80:                             #   in Loop: Header=BB245_76 Depth=2
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movq	-32(%rbp), %rcx
	movb	%al, (%rcx)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
.LBB245_81:                             #   in Loop: Header=BB245_76 Depth=2
	jmp	.LBB245_82
.LBB245_82:                             #   in Loop: Header=BB245_76 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB245_76
.LBB245_83:                             #   in Loop: Header=BB245_72 Depth=1
	movq	-32(%rbp), %rax
	movb	$0, (%rax)
# %bb.84:                               #   in Loop: Header=BB245_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB245_72
.LBB245_85:
	movq	-24(%rbp), %rdi
	callq	MSAVerifyParse
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB245_86:
	movq	-56(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end245:
	.size	ReadMSF, .Lfunc_end245-ReadMSF
	.cfi_endproc
                                        # -- End function
	.globl	WriteMSF                # -- Begin function WriteMSF
	.p2align	4, 0x90
	.type	WriteMSF,@function
WriteMSF:                               # @WriteMSF
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movabsq	$.L.str.13.582, %rax
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rcx
	movslq	28(%rcx), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$273, %esi              # imm = 0x111
	callq	sre_malloc
	movabsq	$.L.str.13.582, %rdi
	movq	%rax, -88(%rbp)
	movq	-56(%rbp), %rax
	movslq	28(%rax), %rdx
	shlq	$3, %rdx
	movl	$274, %esi              # imm = 0x112
	callq	sre_malloc
	movq	%rax, -104(%rbp)
	movl	$0, -44(%rbp)
.LBB246_1:                              # =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_4
# %bb.2:                                #   in Loop: Header=BB246_1 Depth=1
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-56(%rbp), %rax
	movl	24(%rax), %esi
	callq	sre_strdup
	movq	-88(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-104(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB246_1 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_1
.LBB246_4:
	movl	$0, -44(%rbp)
.LBB246_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_7 Depth 2
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_16
# %bb.6:                                #   in Loop: Header=BB246_5 Depth=1
	movq	-104(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
.LBB246_7:                              #   Parent Loop BB246_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB246_14
# %bb.8:                                #   in Loop: Header=BB246_7 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	jne	.LBB246_12
# %bb.9:                                #   in Loop: Header=BB246_7 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB246_12
# %bb.10:                               #   in Loop: Header=BB246_7 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB246_12
# %bb.11:                               #   in Loop: Header=BB246_7 Depth=2
	movq	-64(%rbp), %rax
	movb	$95, (%rax)
.LBB246_12:                             #   in Loop: Header=BB246_7 Depth=2
	jmp	.LBB246_13
.LBB246_13:                             #   in Loop: Header=BB246_7 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB246_7
.LBB246_14:                             #   in Loop: Header=BB246_5 Depth=1
	jmp	.LBB246_15
.LBB246_15:                             #   in Loop: Header=BB246_5 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_5
.LBB246_16:
	movl	$0, -44(%rbp)
.LBB246_17:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_19 Depth 2
                                        #     Child Loop BB246_30 Depth 2
                                        #     Child Loop BB246_40 Depth 2
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_52
# %bb.18:                               #   in Loop: Header=BB246_17 Depth=1
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
.LBB246_19:                             #   Parent Loop BB246_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-64(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB246_26
# %bb.20:                               #   in Loop: Header=BB246_19 Depth=2
	movb	$1, %al
	movq	-64(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$32, %ecx
	je	.LBB246_25
# %bb.21:                               #   in Loop: Header=BB246_19 Depth=2
	movb	$1, %al
	movq	-64(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$46, %ecx
	je	.LBB246_25
# %bb.22:                               #   in Loop: Header=BB246_19 Depth=2
	movb	$1, %al
	movq	-64(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$95, %ecx
	je	.LBB246_25
# %bb.23:                               #   in Loop: Header=BB246_19 Depth=2
	movb	$1, %al
	movq	-64(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$45, %ecx
	je	.LBB246_25
# %bb.24:                               #   in Loop: Header=BB246_19 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	sete	%al
.LBB246_25:                             #   in Loop: Header=BB246_19 Depth=2
.LBB246_26:                             #   in Loop: Header=BB246_19 Depth=2
	testb	$1, %al
	jne	.LBB246_27
	jmp	.LBB246_29
.LBB246_27:                             #   in Loop: Header=BB246_19 Depth=2
	movq	-64(%rbp), %rax
	movb	$126, (%rax)
# %bb.28:                               #   in Loop: Header=BB246_19 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB246_19
.LBB246_29:                             #   in Loop: Header=BB246_17 Depth=1
	jmp	.LBB246_30
.LBB246_30:                             #   Parent Loop BB246_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB246_39
# %bb.31:                               #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB246_36
# %bb.32:                               #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	je	.LBB246_36
# %bb.33:                               #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB246_36
# %bb.34:                               #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB246_36
# %bb.35:                               #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	jne	.LBB246_37
.LBB246_36:                             #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	movb	$46, (%rax)
.LBB246_37:                             #   in Loop: Header=BB246_30 Depth=2
	jmp	.LBB246_38
.LBB246_38:                             #   in Loop: Header=BB246_30 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB246_30
.LBB246_39:                             #   in Loop: Header=BB246_17 Depth=1
	movq	-56(%rbp), %rax
	movl	24(%rax), %eax
	subl	$1, %eax
	movl	%eax, -48(%rbp)
.LBB246_40:                             #   Parent Loop BB246_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	cmpl	$0, -48(%rbp)
	jle	.LBB246_47
# %bb.41:                               #   in Loop: Header=BB246_40 Depth=2
	movb	$1, %al
	movq	-88(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-48(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$32, %ecx
	je	.LBB246_46
# %bb.42:                               #   in Loop: Header=BB246_40 Depth=2
	movb	$1, %al
	movq	-88(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-48(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$46, %ecx
	je	.LBB246_46
# %bb.43:                               #   in Loop: Header=BB246_40 Depth=2
	movb	$1, %al
	movq	-88(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-48(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$95, %ecx
	je	.LBB246_46
# %bb.44:                               #   in Loop: Header=BB246_40 Depth=2
	movb	$1, %al
	movq	-88(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-48(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$45, %ecx
	je	.LBB246_46
# %bb.45:                               #   in Loop: Header=BB246_40 Depth=2
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	sete	%al
.LBB246_46:                             #   in Loop: Header=BB246_40 Depth=2
.LBB246_47:                             #   in Loop: Header=BB246_40 Depth=2
	testb	$1, %al
	jne	.LBB246_48
	jmp	.LBB246_50
.LBB246_48:                             #   in Loop: Header=BB246_40 Depth=2
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movb	$126, (%rax,%rcx)
# %bb.49:                               #   in Loop: Header=BB246_40 Depth=2
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB246_40
.LBB246_50:                             #   in Loop: Header=BB246_17 Depth=1
	jmp	.LBB246_51
.LBB246_51:                             #   in Loop: Header=BB246_17 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_17
.LBB246_52:
	movl	$0, -76(%rbp)
	movl	$0, -44(%rbp)
.LBB246_53:                             # =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_58
# %bb.54:                               #   in Loop: Header=BB246_53 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -80(%rbp)
	cmpl	-76(%rbp), %eax
	jle	.LBB246_56
# %bb.55:                               #   in Loop: Header=BB246_53 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB246_56:                             #   in Loop: Header=BB246_53 Depth=1
	jmp	.LBB246_57
.LBB246_57:                             #   in Loop: Header=BB246_53 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_53
.LBB246_58:
	movq	-56(%rbp), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB246_60
# %bb.59:
	movq	-56(%rbp), %rax
	movq	(%rax), %rdi
	movq	-56(%rbp), %rax
	movl	28(%rax), %esi
	callq	GuessAlignmentSeqtype
	movq	-56(%rbp), %rcx
	movl	%eax, 36(%rcx)
.LBB246_60:
	movq	-56(%rbp), %rax
	cmpl	$2, 36(%rax)
	jne	.LBB246_62
# %bb.61:
	movabsq	$.L.str.14.583, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB246_72
.LBB246_62:
	movq	-56(%rbp), %rax
	cmpl	$1, 36(%rax)
	jne	.LBB246_64
# %bb.63:
	movabsq	$.L.str.14.583, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB246_71
.LBB246_64:
	movq	-56(%rbp), %rax
	cmpl	$3, 36(%rax)
	jne	.LBB246_66
# %bb.65:
	movabsq	$.L.str.15.584, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB246_70
.LBB246_66:
	movq	-56(%rbp), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB246_68
# %bb.67:
	movabsq	$.L.str.16.585, %rdi
	movb	$0, %al
	callq	Die
	jmp	.LBB246_69
.LBB246_68:
	movabsq	$.L.str.17.586, %rdi
	movq	-56(%rbp), %rax
	movl	36(%rax), %esi
	movb	$0, %al
	callq	Die
.LBB246_69:
	jmp	.LBB246_70
.LBB246_70:
	jmp	.LBB246_71
.LBB246_71:
	jmp	.LBB246_72
.LBB246_72:
	movq	-56(%rbp), %rax
	cmpl	$0, 184(%rax)
	jle	.LBB246_78
# %bb.73:
	movl	$0, -44(%rbp)
.LBB246_74:                             # =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	184(%rcx), %eax
	jge	.LBB246_77
# %bb.75:                               #   in Loop: Header=BB246_74 Depth=1
	movabsq	$.L.str.18.587, %rsi
	movq	-72(%rbp), %rdi
	movq	-56(%rbp), %rax
	movq	176(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movb	$0, %al
	callq	fprintf
# %bb.76:                               #   in Loop: Header=BB246_74 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_74
.LBB246_77:
	movabsq	$.L.str.11.578, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB246_78:
	xorl	%edi, %edi
	callq	time
	leaq	-112(%rbp), %rdi
	leaq	-240(%rbp), %rbx
	movq	%rax, -112(%rbp)
	callq	localtime
	movabsq	$.L.str.19.588, %rdx
	movq	%rbx, %rdi
	movl	$64, %esi
	movq	%rax, %rcx
	callq	strftime
	cmpq	$0, %rax
	jne	.LBB246_80
# %bb.79:
	movabsq	$.L.str.20.589, %rdi
	movb	$0, %al
	callq	Die
.LBB246_80:
	movq	-72(%rbp), %r14
	movq	-56(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB246_82
# %bb.81:
	movq	-56(%rbp), %rax
	movq	40(%rax), %r12
	jmp	.LBB246_83
.LBB246_82:
	movabsq	$.L.str.22.590, %r12
	jmp	.LBB246_83
.LBB246_83:
	leaq	-240(%rbp), %r15
	movl	$80, %ebx
	movl	$78, %eax
	movq	-56(%rbp), %rcx
	movl	24(%rcx), %r13d
	movq	-56(%rbp), %rcx
	movl	36(%rcx), %ecx
	cmpl	$2, %ecx
	cmovel	%eax, %ebx
	movq	-88(%rbp), %rdi
	movq	-56(%rbp), %rax
	movl	28(%rax), %esi
	callq	GCGMultchecksum
	movabsq	$.L.str.21.591, %rsi
	movq	%r14, %rdi
	movq	%r12, %rdx
	movl	%r13d, %ecx
	movl	%ebx, %r8d
	movq	%r15, %r9
	movl	%eax, (%rsp)
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.11.578, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -44(%rbp)
.LBB246_84:                             # =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_87
# %bb.85:                               #   in Loop: Header=BB246_84 Depth=1
	movq	-72(%rbp), %r12
	movl	-76(%rbp), %r14d
	movl	-76(%rbp), %r15d
	movq	-104(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %r13
	movq	-56(%rbp), %rax
	movl	24(%rax), %ebx
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-56(%rbp), %rax
	movl	24(%rax), %esi
	callq	GCGchecksum
	movabsq	$.L.str.23.592, %rsi
	movq	-56(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movss	(%rcx,%rdx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	%r12, %rdi
	movl	%r14d, %edx
	movl	%r15d, %ecx
	movq	%r13, %r8
	movl	%ebx, %r9d
	movl	%eax, (%rsp)
	movb	$1, %al
	callq	fprintf
# %bb.86:                               #   in Loop: Header=BB246_84 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_84
.LBB246_87:
	movabsq	$.L.str.11.578, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.24.593, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -48(%rbp)
.LBB246_88:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_96 Depth 2
                                        #       Child Loop BB246_98 Depth 3
	movl	-48(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB246_107
# %bb.89:                               #   in Loop: Header=BB246_88 Depth=1
	movabsq	$.L.str.11.578, %rsi
	movq	-72(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	-48(%rbp), %eax
	addl	$50, %eax
	movq	-56(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB246_91
# %bb.90:                               #   in Loop: Header=BB246_88 Depth=1
	movq	-56(%rbp), %rax
	movl	24(%rax), %eax
	subl	-48(%rbp), %eax
	jmp	.LBB246_92
.LBB246_91:                             #   in Loop: Header=BB246_88 Depth=1
	movl	$50, %eax
	jmp	.LBB246_92
.LBB246_92:                             #   in Loop: Header=BB246_88 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$10, -80(%rbp)
	jle	.LBB246_94
# %bb.93:                               #   in Loop: Header=BB246_88 Depth=1
	movabsq	$.L.str.25.594, %rsi
	movabsq	$.L.str.26.595, %rcx
	movl	$10, %r10d
	movq	-72(%rbp), %rdi
	movl	-76(%rbp), %ebx
	movl	-48(%rbp), %r8d
	addl	$1, %r8d
	movl	-80(%rbp), %r9d
	movl	-80(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	%r10d
	addl	%eax, %r9d
	subl	$12, %r9d
	movl	-48(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%ebx, %edx
	movq	%rcx, (%rsp)
	movl	%eax, 8(%rsp)
	movb	$0, %al
	callq	fprintf
	jmp	.LBB246_95
.LBB246_94:                             #   in Loop: Header=BB246_88 Depth=1
	movabsq	$.L.str.27.596, %rsi
	movabsq	$.L.str.26.595, %rcx
	movq	-72(%rbp), %rdi
	movl	-76(%rbp), %edx
	movl	-48(%rbp), %r8d
	addl	$1, %r8d
	movb	$0, %al
	callq	fprintf
.LBB246_95:                             #   in Loop: Header=BB246_88 Depth=1
	movl	$0, -44(%rbp)
.LBB246_96:                             #   Parent Loop BB246_88 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB246_98 Depth 3
	movl	-44(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_105
# %bb.97:                               #   in Loop: Header=BB246_96 Depth=2
	movabsq	$.L.str.28.597, %rsi
	movq	-72(%rbp), %rdi
	movl	-76(%rbp), %edx
	movq	-104(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movb	$0, %al
	callq	fprintf
	leaq	-176(%rbp), %rdi
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-48(%rbp), %rax
	addq	%rax, %rsi
	movl	$50, %edx
	callq	strncpy
	movb	$0, -126(%rbp)
	movl	$0, -92(%rbp)
.LBB246_98:                             #   Parent Loop BB246_88 Depth=1
                                        #     Parent Loop BB246_96 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB246_103
# %bb.99:                               #   in Loop: Header=BB246_98 Depth=3
	movl	$10, %ecx
	movl	-92(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB246_101
# %bb.100:                              #   in Loop: Header=BB246_98 Depth=3
	movq	-72(%rbp), %rsi
	movl	$32, %edi
	callq	fputc
.LBB246_101:                            #   in Loop: Header=BB246_98 Depth=3
	movslq	-92(%rbp), %rax
	movsbl	-176(%rbp,%rax), %edi
	movq	-72(%rbp), %rsi
	callq	fputc
# %bb.102:                              #   in Loop: Header=BB246_98 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB246_98
.LBB246_103:                            #   in Loop: Header=BB246_96 Depth=2
	movq	-72(%rbp), %rsi
	movl	$10, %edi
	callq	fputc
# %bb.104:                              #   in Loop: Header=BB246_96 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB246_96
.LBB246_105:                            #   in Loop: Header=BB246_88 Depth=1
	jmp	.LBB246_106
.LBB246_106:                            #   in Loop: Header=BB246_88 Depth=1
	movl	-48(%rbp), %eax
	addl	$50, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB246_88
.LBB246_107:
	movq	-88(%rbp), %rdi
	movq	-56(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	movq	-104(%rbp), %rdi
	movq	-56(%rbp), %rax
	movl	28(%rax), %esi
	callq	Free2DArray
	addq	$216, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end246:
	.size	WriteMSF, .Lfunc_end246-WriteMSF
	.cfi_endproc
                                        # -- End function
	.globl	ReadPhylip              # -- Begin function ReadPhylip
	.p2align	4, 0x90
	.type	ReadPhylip,@function
ReadPhylip:                             # @ReadPhylip
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB247_2
# %bb.1:
	movq	$0, -72(%rbp)
	jmp	.LBB247_26
.LBB247_2:
	movl	$0, -8(%rbp)
	movl	$0, -56(%rbp)
.LBB247_3:                              # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB247_12
# %bb.4:                                #   in Loop: Header=BB247_3 Depth=1
	leaq	-16(%rbp), %rdi
	movabsq	$.L.str.600, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB247_6
# %bb.5:                                #   in Loop: Header=BB247_3 Depth=1
	jmp	.LBB247_3
.LBB247_6:
	leaq	-16(%rbp), %rdi
	movabsq	$.L.str.600, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB247_8
# %bb.7:
	movabsq	$.L.str.1.601, %rdi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB247_8:
	movq	-48(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	je	.LBB247_10
# %bb.9:
	movq	-64(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	jne	.LBB247_11
.LBB247_10:
	movabsq	$.L.str.2.602, %rdi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB247_11:
	movq	-48(%rbp), %rdi
	callq	atoi
	movl	%eax, -8(%rbp)
	movq	-64(%rbp), %rdi
	callq	atoi
	movl	%eax, -56(%rbp)
	jmp	.LBB247_13
.LBB247_12:                             # %.loopexit
	jmp	.LBB247_13
.LBB247_13:
	movl	-8(%rbp), %edi
	xorl	%esi, %esi
	callq	MSAAlloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -36(%rbp)
.LBB247_14:                             # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB247_25
# %bb.15:                               #   in Loop: Header=BB247_14 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB247_18
# %bb.16:                               #   in Loop: Header=BB247_14 Depth=1
	jmp	.LBB247_17
.LBB247_17:                             # %.backedge
                                        #   in Loop: Header=BB247_14 Depth=1
	jmp	.LBB247_14
.LBB247_18:                             #   in Loop: Header=BB247_14 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB247_20
# %bb.19:                               #   in Loop: Header=BB247_14 Depth=1
	leaq	-83(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	$10, %edx
	callq	strncpy
	leaq	-83(%rbp), %rsi
	movb	$0, -73(%rbp)
	movq	-24(%rbp), %rax
	movq	312(%rax), %rdi
	callq	GKIStoreKey
	leaq	-83(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	addq	$10, %rax
	movq	%rax, -16(%rbp)
.LBB247_20:                             #   in Loop: Header=BB247_14 Depth=1
	leaq	-16(%rbp), %rdi
	movabsq	$.L.str.600, %rsi
	leaq	-52(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB247_22
# %bb.21:                               #   in Loop: Header=BB247_14 Depth=1
	movabsq	$.L.str.3.603, %rdi
	movq	-32(%rbp), %rax
	movl	16(%rax), %esi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movb	$0, %al
	callq	Die
.LBB247_22:                             #   in Loop: Header=BB247_14 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-24(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-48(%rbp), %rdx
	movl	-52(%rbp), %ecx
	callq	sre_strcat
	movq	-24(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB247_24
# %bb.23:                               #   in Loop: Header=BB247_14 Depth=1
	movl	$0, -4(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB247_24:                             #   in Loop: Header=BB247_14 Depth=1
	jmp	.LBB247_17
.LBB247_25:
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-24(%rbp), %rdi
	callq	MSAVerifyParse
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB247_26:
	movq	-72(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end247:
	.size	ReadPhylip, .Lfunc_end247-ReadPhylip
	.cfi_endproc
                                        # -- End function
	.globl	WritePhylip             # -- Begin function WritePhylip
	.p2align	4, 0x90
	.type	WritePhylip,@function
WritePhylip:                            # @WritePhylip
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movabsq	$.L.str.4.606, %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$50, -12(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	28(%rcx), %edx
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	movq	%rax, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB248_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_5 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB248_13
# %bb.2:                                #   in Loop: Header=BB248_1 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB248_4
# %bb.3:                                #   in Loop: Header=BB248_1 Depth=1
	movabsq	$.L.str.5.607, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB248_4:                              #   in Loop: Header=BB248_1 Depth=1
	movl	$0, -8(%rbp)
.LBB248_5:                              #   Parent Loop BB248_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB248_11
# %bb.6:                                #   in Loop: Header=BB248_5 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movslq	-12(%rbp), %rdx
	callq	strncpy
	movslq	-12(%rbp), %rax
	movb	$0, -96(%rbp,%rax)
	cmpl	$0, -4(%rbp)
	jle	.LBB248_8
# %bb.7:                                #   in Loop: Header=BB248_5 Depth=2
	movabsq	$.L.str.6.608, %rsi
	leaq	-96(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB248_9
.LBB248_8:                              #   in Loop: Header=BB248_5 Depth=2
	movabsq	$.L.str.7.609, %rsi
	leaq	-96(%rbp), %rcx
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rdx
	movb	$0, %al
	callq	fprintf
.LBB248_9:                              #   in Loop: Header=BB248_5 Depth=2
	jmp	.LBB248_10
.LBB248_10:                             #   in Loop: Header=BB248_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB248_5
.LBB248_11:                             #   in Loop: Header=BB248_1 Depth=1
	jmp	.LBB248_12
.LBB248_12:                             #   in Loop: Header=BB248_1 Depth=1
	movl	-12(%rbp), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_1
.LBB248_13:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end248:
	.size	WritePhylip, .Lfunc_end248-WritePhylip
	.cfi_endproc
                                        # -- End function
	.globl	AllocPlan7              # -- Begin function AllocPlan7
	.p2align	4, 0x90
	.type	AllocPlan7,@function
AllocPlan7:                             # @AllocPlan7
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	callq	AllocPlan7Shell
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	AllocPlan7Body
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end249:
	.size	AllocPlan7, .Lfunc_end249-AllocPlan7
	.cfi_endproc
                                        # -- End function
	.globl	AllocPlan7Shell         # -- Begin function AllocPlan7Shell
	.p2align	4, 0x90
	.type	AllocPlan7Shell,@function
AllocPlan7Shell:                        # @AllocPlan7Shell
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.616, %rdi
	movl	$54, %esi
	movl	$464, %edx              # imm = 0x1D0
	callq	sre_malloc
	xorps	%xmm0, %xmm0
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 136(%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 56(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 80(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 88(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 116(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 112(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 124(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 120(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 132(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 128(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 144(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 152(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 160(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 328(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 320(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 312(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 392(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 392(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 384(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 208(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 216(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 408(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 368(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 416(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 376(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 424(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 432(%rax)
	movq	-8(%rbp), %rax
	movl	$-987654321, 440(%rax)  # imm = 0xC521974F
	movq	-8(%rbp), %rax
	movl	$-987654321, 444(%rax)  # imm = 0xC521974F
	movq	-8(%rbp), %rax
	movss	%xmm0, 448(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 452(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 456(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end250:
	.size	AllocPlan7Shell, .Lfunc_end250-AllocPlan7Shell
	.cfi_endproc
                                        # -- End function
	.globl	AllocPlan7Body          # -- Begin function AllocPlan7Body
	.p2align	4, 0x90
	.type	AllocPlan7Body,@function
AllocPlan7Body:                         # @AllocPlan7Body
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.616, %rax
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 136(%rdx)
	movl	-4(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$111, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$112, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$113, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$114, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movslq	-4(%rbp), %rdx
	shlq	$3, %rdx
	movl	$116, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 144(%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$3, %rdx
	movl	$117, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 152(%rcx)
	movslq	-4(%rbp), %rdx
	shlq	$3, %rdx
	movl	$118, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 160(%rcx)
	imull	$7, -4(%rbp), %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$119, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	144(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	imull	$20, %eax, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$120, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	152(%rcx), %rcx
	movq	%rax, (%rcx)
	imull	$20, -4(%rbp), %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$121, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$123, %esi
	movl	$56, %edx
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movl	$124, %esi
	movl	$192, %edx
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 320(%rcx)
	movl	$125, %esi
	movl	$192, %edx
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 328(%rcx)
	imull	$7, -4(%rbp), %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$126, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 384(%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	imull	$24, %eax, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$127, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 392(%rcx)
	imull	$24, -4(%rbp), %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$128, %esi
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	392(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	320(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	400(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movq	%rax, (%rcx)
	movl	$1, -24(%rbp)
.LBB251_1:                              # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jg	.LBB251_6
# %bb.2:                                #   in Loop: Header=BB251_1 Depth=1
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movq	(%rax), %rax
	imull	$20, -24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	152(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	-24(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB251_4
# %bb.3:                                #   in Loop: Header=BB251_1 Depth=1
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movq	(%rax), %rax
	imull	$20, -24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	(%rax), %rax
	imull	$7, -24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	144(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_4:                              #   in Loop: Header=BB251_1 Depth=1
	jmp	.LBB251_5
.LBB251_5:                              #   in Loop: Header=BB251_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB251_1
.LBB251_6:
	movl	$1, -20(%rbp)
.LBB251_7:                              # =>This Inner Loop Header: Depth=1
	cmpl	$24, -20(%rbp)
	jge	.LBB251_10
# %bb.8:                                #   in Loop: Header=BB251_7 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	movl	-4(%rbp), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	320(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	328(%rax), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	imull	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.9:                                #   in Loop: Header=BB251_7 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_7
.LBB251_10:
	movl	$0, -20(%rbp)
.LBB251_11:                             # =>This Inner Loop Header: Depth=1
	cmpl	$7, -20(%rbp)
	jge	.LBB251_14
# %bb.12:                               #   in Loop: Header=BB251_11 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	imull	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.13:                               #   in Loop: Header=BB251_11 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_11
.LBB251_14:
	movl	$0, -20(%rbp)
.LBB251_15:                             # =>This Inner Loop Header: Depth=1
	cmpl	$7, -20(%rbp)
	jge	.LBB251_18
# %bb.16:                               #   in Loop: Header=BB251_15 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
# %bb.17:                               #   in Loop: Header=BB251_15 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_15
.LBB251_18:
	movabsq	$.L.str.616, %rdi
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$157, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 208(%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$158, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 216(%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$160, %esi
	callq	sre_malloc
	movabsq	$.L.str.616, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 408(%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$161, %esi
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 416(%rcx)
	movq	-16(%rbp), %rax
	movq	408(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 368(%rcx)
	movq	-16(%rbp), %rax
	movq	416(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 376(%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end251:
	.size	AllocPlan7Body, .Lfunc_end251-AllocPlan7Body
	.cfi_endproc
                                        # -- End function
	.globl	FreePlan7               # -- Begin function FreePlan7
	.p2align	4, 0x90
	.type	FreePlan7,@function
FreePlan7:                              # @FreePlan7
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB252_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
.LBB252_2:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB252_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
.LBB252_4:
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB252_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB252_6:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB252_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB252_8:
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB252_10
# %bb.9:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
.LBB252_10:
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB252_12
# %bb.11:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free
.LBB252_12:
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB252_14
# %bb.13:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free
.LBB252_14:
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB252_16
# %bb.15:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB252_16:
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB252_18
# %bb.17:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB252_18:
	movq	-8(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB252_20
# %bb.19:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	free
.LBB252_20:
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB252_22
# %bb.21:
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	free
.LBB252_22:
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB252_24
# %bb.23:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	callq	free
.LBB252_24:
	movq	-8(%rbp), %rax
	cmpq	$0, 408(%rax)
	je	.LBB252_26
# %bb.25:
	movq	-8(%rbp), %rax
	movq	408(%rax), %rdi
	callq	free
.LBB252_26:
	movq	-8(%rbp), %rax
	cmpq	$0, 208(%rax)
	je	.LBB252_28
# %bb.27:
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	callq	free
.LBB252_28:
	movq	-8(%rbp), %rax
	cmpq	$0, 416(%rax)
	je	.LBB252_30
# %bb.29:
	movq	-8(%rbp), %rax
	movq	416(%rax), %rdi
	callq	free
.LBB252_30:
	movq	-8(%rbp), %rax
	cmpq	$0, 216(%rax)
	je	.LBB252_32
# %bb.31:
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	callq	free
.LBB252_32:
	movq	-8(%rbp), %rax
	cmpq	$0, 392(%rax)
	je	.LBB252_34
# %bb.33:
	movq	-8(%rbp), %rax
	movq	392(%rax), %rdi
	callq	free
.LBB252_34:
	movq	-8(%rbp), %rax
	cmpq	$0, 400(%rax)
	je	.LBB252_36
# %bb.35:
	movq	-8(%rbp), %rax
	movq	400(%rax), %rdi
	callq	free
.LBB252_36:
	movq	-8(%rbp), %rax
	cmpq	$0, 384(%rax)
	je	.LBB252_38
# %bb.37:
	movq	-8(%rbp), %rax
	movq	384(%rax), %rdi
	callq	free
.LBB252_38:
	movq	-8(%rbp), %rax
	cmpq	$0, 152(%rax)
	je	.LBB252_40
# %bb.39:
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movq	(%rax), %rdi
	callq	free
.LBB252_40:
	movq	-8(%rbp), %rax
	cmpq	$0, 160(%rax)
	je	.LBB252_42
# %bb.41:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	(%rax), %rdi
	callq	free
.LBB252_42:
	movq	-8(%rbp), %rax
	cmpq	$0, 144(%rax)
	je	.LBB252_44
# %bb.43:
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movq	(%rax), %rdi
	callq	free
.LBB252_44:
	movq	-8(%rbp), %rax
	cmpq	$0, 320(%rax)
	je	.LBB252_46
# %bb.45:
	movq	-8(%rbp), %rax
	movq	320(%rax), %rdi
	callq	free
.LBB252_46:
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	je	.LBB252_48
# %bb.47:
	movq	-8(%rbp), %rax
	movq	328(%rax), %rdi
	callq	free
.LBB252_48:
	movq	-8(%rbp), %rax
	cmpq	$0, 312(%rax)
	je	.LBB252_50
# %bb.49:
	movq	-8(%rbp), %rax
	movq	312(%rax), %rdi
	callq	free
.LBB252_50:
	movq	-8(%rbp), %rax
	cmpq	$0, 152(%rax)
	je	.LBB252_52
# %bb.51:
	movq	-8(%rbp), %rax
	movq	152(%rax), %rdi
	callq	free
.LBB252_52:
	movq	-8(%rbp), %rax
	cmpq	$0, 160(%rax)
	je	.LBB252_54
# %bb.53:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rdi
	callq	free
.LBB252_54:
	movq	-8(%rbp), %rax
	cmpq	$0, 144(%rax)
	je	.LBB252_56
# %bb.55:
	movq	-8(%rbp), %rax
	movq	144(%rax), %rdi
	callq	free
.LBB252_56:
	movq	-8(%rbp), %rax
	cmpq	$0, 424(%rax)
	je	.LBB252_58
# %bb.57:
	movq	-8(%rbp), %rax
	movq	424(%rax), %rdi
	callq	free
.LBB252_58:
	movq	-8(%rbp), %rax
	cmpq	$0, 432(%rax)
	je	.LBB252_60
# %bb.59:
	movq	-8(%rbp), %rax
	movq	432(%rax), %rdi
	callq	free
.LBB252_60:
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end252:
	.size	FreePlan7, .Lfunc_end252-FreePlan7
	.cfi_endproc
                                        # -- End function
	.globl	ZeroPlan7               # -- Begin function ZeroPlan7
	.p2align	4, 0x90
	.type	ZeroPlan7,@function
ZeroPlan7:                              # @ZeroPlan7
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	$1, -4(%rbp)
.LBB253_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB253_4
# %bb.2:                                #   in Loop: Header=BB253_1 Depth=1
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$7, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
# %bb.3:                                #   in Loop: Header=BB253_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_1
.LBB253_4:
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 168(%rax)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$4, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movq	-16(%rbp), %rax
	movq	216(%rax), %rdi
	addq	$4, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -4(%rbp)
.LBB253_5:                              # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB253_8
# %bb.6:                                #   in Loop: Header=BB253_5 Depth=1
	movq	-16(%rbp), %rdi
	addq	$172, %rdi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	$2, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
# %bb.7:                                #   in Loop: Header=BB253_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_5
.LBB253_8:
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-33, %ecx
	movl	%ecx, 456(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end253:
	.size	ZeroPlan7, .Lfunc_end253-ZeroPlan7
	.cfi_endproc
                                        # -- End function
	.globl	Plan7SetName            # -- Begin function Plan7SetName
	.p2align	4, 0x90
	.type	Plan7SetName,@function
Plan7SetName:                           # @Plan7SetName
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB254_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
.LBB254_2:
	movq	-16(%rbp), %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	StringChop
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end254:
	.size	Plan7SetName, .Lfunc_end254-Plan7SetName
	.cfi_endproc
                                        # -- End function
	.globl	Plan7SetAccession       # -- Begin function Plan7SetAccession
	.p2align	4, 0x90
	.type	Plan7SetAccession,@function
Plan7SetAccession:                      # @Plan7SetAccession
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB255_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
.LBB255_2:
	movq	-16(%rbp), %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	StringChop
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$512, %ecx              # imm = 0x200
	movl	%ecx, 456(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end255:
	.size	Plan7SetAccession, .Lfunc_end255-Plan7SetAccession
	.cfi_endproc
                                        # -- End function
	.globl	Plan7SetDescription     # -- Begin function Plan7SetDescription
	.p2align	4, 0x90
	.type	Plan7SetDescription,@function
Plan7SetDescription:                    # @Plan7SetDescription
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB256_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB256_2:
	movq	-16(%rbp), %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	StringChop
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 456(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end256:
	.size	Plan7SetDescription, .Lfunc_end256-Plan7SetDescription
	.cfi_endproc
                                        # -- End function
	.globl	Plan7ComlogAppend       # -- Begin function Plan7ComlogAppend
	.p2align	4, 0x90
	.type	Plan7ComlogAppend,@function
Plan7ComlogAppend:                      # @Plan7ComlogAppend
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB257_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_4
# %bb.2:                                #   in Loop: Header=BB257_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movslq	-16(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -16(%rbp)
# %bb.3:                                #   in Loop: Header=BB257_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB257_1
.LBB257_4:
	movq	-24(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB257_6
# %bb.5:
	movabsq	$.L.str.616, %rbx
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	callq	strlen
	movslq	-16(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdx
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$0, %rcx
	movq	%rbx, %rdi
	movl	$296, %esi              # imm = 0x128
	callq	sre_realloc
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	jmp	.LBB257_7
.LBB257_6:
	movabsq	$.L.str.616, %rdi
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$300, %esi              # imm = 0x12C
	callq	sre_malloc
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movb	$0, (%rax)
.LBB257_7:
	movabsq	$.L.str.1.629, %rsi
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	callq	strcat
	movl	$0, -12(%rbp)
.LBB257_8:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_13
# %bb.9:                                #   in Loop: Header=BB257_8 Depth=1
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	strcat
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB257_11
# %bb.10:                               #   in Loop: Header=BB257_8 Depth=1
	movabsq	$.L.str.2.630, %rsi
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	callq	strcat
.LBB257_11:                             #   in Loop: Header=BB257_8 Depth=1
	jmp	.LBB257_12
.LBB257_12:                             #   in Loop: Header=BB257_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB257_8
.LBB257_13:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end257:
	.size	Plan7ComlogAppend, .Lfunc_end257-Plan7ComlogAppend
	.cfi_endproc
                                        # -- End function
	.globl	Plan7SetCtime           # -- Begin function Plan7SetCtime
	.p2align	4, 0x90
	.type	Plan7SetCtime,@function
Plan7SetCtime:                          # @Plan7SetCtime
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	xorl	%edi, %edi
	callq	time
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB258_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB258_2:
	leaq	-16(%rbp), %rdi
	callq	ctime
	movq	%rax, %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	StringChop
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end258:
	.size	Plan7SetCtime, .Lfunc_end258-Plan7SetCtime
	.cfi_endproc
                                        # -- End function
	.globl	Plan7SetNullModel       # -- Begin function Plan7SetNullModel
	.p2align	4, 0x90
	.type	Plan7SetNullModel,@function
Plan7SetNullModel:                      # @Plan7SetNullModel
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB259_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB259_4
# %bb.2:                                #   in Loop: Header=BB259_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, 224(%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB259_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_1
.LBB259_4:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	%xmm0, 304(%rax)
	popq	%rbp
	retq
.Lfunc_end259:
	.size	Plan7SetNullModel, .Lfunc_end259-Plan7SetNullModel
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function P7Logoddsify
.LCPI260_0:
	.quad	-4556649414143246336    # double -9999
.LCPI260_2:
	.quad	4607182418800017408     # double 1
.LCPI260_3:
	.quad	4602678819172646912     # double 0.5
.LCPI260_4:
	.quad	4654059855333610918     # double 1442.6950400000001
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI260_1:
	.long	1065353216              # float 1
	.text
	.globl	P7Logoddsify
	.p2align	4, 0x90
	.type	P7Logoddsify,@function
P7Logoddsify:                           # @P7Logoddsify
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	456(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB260_2
# %bb.1:
	jmp	.LBB260_73
.LBB260_2:
	movl	$1, -4(%rbp)
.LBB260_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_5 Depth 2
                                        #     Child Loop BB260_11 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB260_18
# %bb.4:                                #   in Loop: Header=BB260_3 Depth=1
	movl	$0, -20(%rbp)
.LBB260_5:                              #   Parent Loop BB260_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB260_10
# %bb.6:                                #   in Loop: Header=BB260_5 Depth=2
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	320(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB260_8
# %bb.7:                                #   in Loop: Header=BB260_5 Depth=2
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movss	224(%rax,%rcx,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB260_8:                              #   in Loop: Header=BB260_5 Depth=2
	jmp	.LBB260_9
.LBB260_9:                              #   in Loop: Header=BB260_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB260_5
.LBB260_10:                             #   in Loop: Header=BB260_3 Depth=1
	movl	Alphabet_size, %eax
	movl	%eax, -20(%rbp)
.LBB260_11:                             #   Parent Loop BB260_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	Alphabet_iupac, %eax
	jge	.LBB260_16
# %bb.12:                               #   in Loop: Header=BB260_11 Depth=2
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rsi
	addq	$224, %rsi
	movl	-20(%rbp), %edx
	callq	DegenerateSymbolScore
	movq	-16(%rbp), %rcx
	movq	320(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB260_14
# %bb.13:                               #   in Loop: Header=BB260_11 Depth=2
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rsi
	addq	$224, %rsi
	movl	-20(%rbp), %edx
	callq	DegenerateSymbolScore
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB260_14:                             #   in Loop: Header=BB260_11 Depth=2
	jmp	.LBB260_15
.LBB260_15:                             #   in Loop: Header=BB260_11 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB260_11
.LBB260_16:                             #   in Loop: Header=BB260_3 Depth=1
	jmp	.LBB260_17
.LBB260_17:                             #   in Loop: Header=BB260_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB260_3
.LBB260_18:
	movl	$1, -4(%rbp)
.LBB260_19:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB260_22
# %bb.20:                               #   in Loop: Header=BB260_19 Depth=1
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI260_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI260_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	48(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.21:                               #   in Loop: Header=BB260_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB260_19
.LBB260_22:
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_24
# %bb.23:
	movq	-16(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	jmp	.LBB260_25
.LBB260_24:
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB260_25
.LBB260_25:
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -24(%rbp)
	movl	$1, -4(%rbp)
.LBB260_26:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB260_49
# %bb.27:                               #   in Loop: Header=BB260_26 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_29
# %bb.28:                               #   in Loop: Header=BB260_26 Depth=1
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	jmp	.LBB260_30
.LBB260_29:                             #   in Loop: Header=BB260_26 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB260_30
.LBB260_30:                             #   in Loop: Header=BB260_26 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -40(%rbp)
	cmpl	$1, -4(%rbp)
	jle	.LBB260_44
# %bb.31:                               #   in Loop: Header=BB260_26 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-24(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_44
# %bb.32:                               #   in Loop: Header=BB260_26 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movss	20(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_40
# %bb.33:                               #   in Loop: Header=BB260_26 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB260_38
# %bb.34:                               #   in Loop: Header=BB260_26 Depth=1
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	jbe	.LBB260_36
# %bb.35:                               #   in Loop: Header=BB260_26 Depth=1
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	jmp	.LBB260_37
.LBB260_36:                             #   in Loop: Header=BB260_26 Depth=1
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
.LBB260_37:                             #   in Loop: Header=BB260_26 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -40(%rbp)
	jmp	.LBB260_39
.LBB260_38:                             #   in Loop: Header=BB260_26 Depth=1
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)        # 4-byte Spill
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm1
	movss	-32(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	callq	LogSum
	movss	%xmm0, -40(%rbp)
.LBB260_39:                             #   in Loop: Header=BB260_26 Depth=1
	jmp	.LBB260_40
.LBB260_40:                             #   in Loop: Header=BB260_26 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movss	24(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_42
# %bb.41:                               #   in Loop: Header=BB260_26 Depth=1
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	jmp	.LBB260_43
.LBB260_42:                             #   in Loop: Header=BB260_26 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB260_43
.LBB260_43:                             #   in Loop: Header=BB260_26 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -24(%rbp)
.LBB260_44:                             #   in Loop: Header=BB260_26 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_46
# %bb.45:                               #   in Loop: Header=BB260_26 Depth=1
	movss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	.LCPI260_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI260_4(%rip), %xmm2 # xmm2 = mem[0],zero
	movsd	-32(%rbp), %xmm3        # 8-byte Reload
                                        # xmm3 = mem[0],zero
	subsd	%xmm0, %xmm3
	mulsd	%xmm3, %xmm2
	addsd	%xmm2, %xmm1
	movaps	%xmm1, %xmm0
	callq	floor
	cvttsd2si	%xmm0, %eax
	movq	-16(%rbp), %rcx
	movq	368(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB260_47
.LBB260_46:                             #   in Loop: Header=BB260_26 Depth=1
	movq	-16(%rbp), %rax
	movq	368(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
.LBB260_47:                             #   in Loop: Header=BB260_26 Depth=1
	jmp	.LBB260_48
.LBB260_48:                             #   in Loop: Header=BB260_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB260_26
.LBB260_49:
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	376(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
	movss	%xmm0, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB260_50:                             # =>This Inner Loop Header: Depth=1
	cmpl	$1, -4(%rbp)
	jl	.LBB260_72
# %bb.51:                               #   in Loop: Header=BB260_50 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_53
# %bb.52:                               #   in Loop: Header=BB260_50 Depth=1
	movq	-16(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	jmp	.LBB260_54
.LBB260_53:                             #   in Loop: Header=BB260_50 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB260_54
.LBB260_54:                             #   in Loop: Header=BB260_50 Depth=1
	movsd	.LCPI260_0(%rip), %xmm1 # xmm1 = mem[0],zero
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm1, %xmm0
	jbe	.LBB260_67
# %bb.55:                               #   in Loop: Header=BB260_50 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	8(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_63
# %bb.56:                               #   in Loop: Header=BB260_50 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB260_61
# %bb.57:                               #   in Loop: Header=BB260_50 Depth=1
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	jbe	.LBB260_59
# %bb.58:                               #   in Loop: Header=BB260_50 Depth=1
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	jmp	.LBB260_60
.LBB260_59:                             #   in Loop: Header=BB260_50 Depth=1
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
.LBB260_60:                             #   in Loop: Header=BB260_50 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
	jmp	.LBB260_62
.LBB260_61:                             #   in Loop: Header=BB260_50 Depth=1
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)        # 4-byte Spill
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm1
	movss	-32(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	callq	LogSum
	movss	%xmm0, -36(%rbp)
.LBB260_62:                             #   in Loop: Header=BB260_50 Depth=1
	jmp	.LBB260_63
.LBB260_63:                             #   in Loop: Header=BB260_50 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	24(%rax), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_65
# %bb.64:                               #   in Loop: Header=BB260_50 Depth=1
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	jmp	.LBB260_66
.LBB260_65:                             #   in Loop: Header=BB260_50 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB260_66
.LBB260_66:                             #   in Loop: Header=BB260_50 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -24(%rbp)
.LBB260_67:                             #   in Loop: Header=BB260_50 Depth=1
	movsd	.LCPI260_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB260_69
# %bb.68:                               #   in Loop: Header=BB260_50 Depth=1
	movsd	.LCPI260_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI260_4(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-36(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	callq	floor
	cvttsd2si	%xmm0, %eax
	jmp	.LBB260_70
.LBB260_69:                             #   in Loop: Header=BB260_50 Depth=1
	movl	$3307312975, %eax       # imm = 0xC521974F
	jmp	.LBB260_70
.LBB260_70:                             #   in Loop: Header=BB260_50 Depth=1
	movq	-16(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               #   in Loop: Header=BB260_50 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB260_50
.LBB260_72:
	movq	-16(%rbp), %rax
	movss	176(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI260_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movl	%eax, 340(%rcx)
	movq	-16(%rbp), %rax
	movss	172(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI260_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movl	%eax, 336(%rcx)
	movq	-16(%rbp), %rax
	movss	184(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI260_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movl	%eax, 348(%rcx)
	movq	-16(%rbp), %rax
	movss	180(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movl	%eax, 344(%rcx)
	movq	-16(%rbp), %rax
	movss	192(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI260_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	-16(%rbp), %rcx
	movl	%eax, 356(%rcx)
	movq	-16(%rbp), %rax
	movss	188(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm1
	cvtsd2ss	%xmm1, %xmm1
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movl	%eax, 352(%rcx)
	movq	-16(%rbp), %rax
	movss	200(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI260_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movl	%eax, 364(%rcx)
	movq	-16(%rbp), %rax
	movss	196(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movl	%eax, 360(%rcx)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 456(%rax)
.LBB260_73:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end260:
	.size	P7Logoddsify, .Lfunc_end260-P7Logoddsify
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function DegenerateSymbolScore
.LCPI261_0:
	.quad	4652007308841189376     # double 1000
.LCPI261_1:
	.quad	-4556649414143246336    # double -9999
.LCPI261_2:
	.quad	4609176140017200175     # double 1.44269504
	.text
	.globl	DegenerateSymbolScore
	.p2align	4, 0x90
	.type	DegenerateSymbolScore,@function
DegenerateSymbolScore:                  # @DegenerateSymbolScore
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movss	%xmm0, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB261_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB261_9
# %bb.2:                                #   in Loop: Header=BB261_1 Depth=1
	movabsq	$Degenerate, %rax
	movslq	-28(%rbp), %rcx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB261_7
# %bb.3:                                #   in Loop: Header=BB261_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB261_5
# %bb.4:                                #   in Loop: Header=BB261_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm2, -48(%rbp)        # 8-byte Spill
	callq	log
	movsd	-48(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	movsd	.LCPI261_2(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	jmp	.LBB261_6
.LBB261_5:                              #   in Loop: Header=BB261_1 Depth=1
	movsd	.LCPI261_1(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB261_6
.LBB261_6:                              #   in Loop: Header=BB261_1 Depth=1
	mulsd	%xmm0, %xmm2
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	addsd	%xmm2, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -12(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
.LBB261_7:                              #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_8
.LBB261_8:                              #   in Loop: Header=BB261_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_1
.LBB261_9:
	movsd	.LCPI261_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end261:
	.size	DegenerateSymbolScore, .Lfunc_end261-DegenerateSymbolScore
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Plan7Renormalize
.LCPI262_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7Renormalize
	.p2align	4, 0x90
	.type	Plan7Renormalize,@function
Plan7Renormalize:                       # @Plan7Renormalize
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	$1, -4(%rbp)
.LBB262_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB262_4
# %bb.2:                                #   in Loop: Header=BB262_1 Depth=1
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
# %bb.3:                                #   in Loop: Header=BB262_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_1
.LBB262_4:
	movl	$1, -4(%rbp)
.LBB262_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB262_8
# %bb.6:                                #   in Loop: Header=BB262_5 Depth=1
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
# %bb.7:                                #   in Loop: Header=BB262_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_5
.LBB262_8:
	movq	-16(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$4, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	callq	FSum
	movsd	.LCPI262_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	-16(%rbp), %rax
	addss	168(%rax), %xmm0
	movss	%xmm0, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$4, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	callq	FScale
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, 168(%rax)
	movl	$1, -4(%rbp)
.LBB262_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB262_12
# %bb.10:                               #   in Loop: Header=BB262_9 Depth=1
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$3, %esi
	callq	FSum
	movsd	.LCPI262_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	-16(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movl	$3, %esi
	callq	FScale
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	addq	$12, %rdi
	movl	$2, %esi
	callq	FNorm
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	addq	$20, %rdi
	movl	$2, %esi
	callq	FNorm
# %bb.11:                               #   in Loop: Header=BB262_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_9
.LBB262_12:
	movq	-16(%rbp), %rdi
	addq	$224, %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
	movl	$0, -24(%rbp)
.LBB262_13:                             # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB262_16
# %bb.14:                               #   in Loop: Header=BB262_13 Depth=1
	movq	-16(%rbp), %rdi
	addq	$172, %rdi
	movslq	-24(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	$2, %esi
	callq	FNorm
# %bb.15:                               #   in Loop: Header=BB262_13 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB262_13
.LBB262_16:
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	(%rax), %rax
	movss	%xmm0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	(%rax), %rax
	movss	%xmm0, 20(%rax)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$32, %ecx
	movl	%ecx, 456(%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end262:
	.size	Plan7Renormalize, .Lfunc_end262-Plan7Renormalize
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Plan7RenormalizeExits
.LCPI263_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7RenormalizeExits
	.p2align	4, 0x90
	.type	Plan7RenormalizeExits,@function
Plan7RenormalizeExits:                  # @Plan7RenormalizeExits
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	$1, -4(%rbp)
.LBB263_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB263_4
# %bb.2:                                #   in Loop: Header=BB263_1 Depth=1
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	$3, %esi
	callq	FSum
	movsd	.LCPI263_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	%xmm0, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm2
	addss	%xmm2, %xmm0
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movl	$3, %esi
	callq	FScale
# %bb.3:                                #   in Loop: Header=BB263_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_1
.LBB263_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end263:
	.size	Plan7RenormalizeExits, .Lfunc_end263-Plan7RenormalizeExits
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function Plan7NakedConfig
.LCPI264_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI264_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7NakedConfig
	.p2align	4, 0x90
	.type	Plan7NakedConfig,@function
Plan7NakedConfig:                       # @Plan7NakedConfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorps	%xmm0, %xmm0
	movss	.LCPI264_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movss	%xmm1, 172(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 176(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 180(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 184(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 188(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 192(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 196(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 200(%rax)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movsd	.LCPI264_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	addq	$4, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI264_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-8(%rbp), %rdi
	callq	Plan7RenormalizeExits
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end264:
	.size	Plan7NakedConfig, .Lfunc_end264-Plan7NakedConfig
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function Plan7GlobalConfig
.LCPI265_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI265_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7GlobalConfig
	.p2align	4, 0x90
	.type	Plan7GlobalConfig,@function
Plan7GlobalConfig:                      # @Plan7GlobalConfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorps	%xmm1, %xmm1
	movss	.LCPI265_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movsd	.LCPI265_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm3        # xmm3 = mem[0],zero,zero,zero
	cvtss2sd	%xmm3, %xmm3
	movaps	%xmm2, %xmm4
	subsd	%xmm3, %xmm4
	cvtsd2ss	%xmm4, %xmm3
	movq	-8(%rbp), %rax
	movss	%xmm3, 172(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm3        # xmm3 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm3, 176(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 180(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 184(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm3        # xmm3 = mem[0],zero,zero,zero
	cvtss2sd	%xmm3, %xmm3
	subsd	%xmm3, %xmm2
	cvtsd2ss	%xmm2, %xmm2
	movq	-8(%rbp), %rax
	movss	%xmm2, 188(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm2, 192(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 196(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 200(%rax)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movsd	.LCPI265_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	addq	$4, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI265_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-8(%rbp), %rdi
	callq	Plan7RenormalizeExits
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end265:
	.size	Plan7GlobalConfig, .Lfunc_end265-Plan7GlobalConfig
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function Plan7LSConfig
.LCPI266_0:
	.long	1065353216              # float 1
.LCPI266_2:
	.long	1056964608              # float 0.5
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI266_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7LSConfig
	.p2align	4, 0x90
	.type	Plan7LSConfig,@function
Plan7LSConfig:                          # @Plan7LSConfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movsd	.LCPI266_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	.LCPI266_2(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	movaps	%xmm0, %xmm3
	subsd	%xmm2, %xmm3
	cvtsd2ss	%xmm3, %xmm2
	movq	-8(%rbp), %rax
	movss	%xmm2, 172(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm2, 176(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 180(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 184(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movaps	%xmm0, %xmm2
	subsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movq	-8(%rbp), %rax
	movss	%xmm1, 188(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm1, 192(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 196(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 200(%rax)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movsd	.LCPI266_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	addq	$4, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI266_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-8(%rbp), %rdi
	callq	Plan7RenormalizeExits
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end266:
	.size	Plan7LSConfig, .Lfunc_end266-Plan7LSConfig
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function Plan7SWConfig
.LCPI267_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI267_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7SWConfig
	.p2align	4, 0x90
	.type	Plan7SWConfig,@function
Plan7SWConfig:                          # @Plan7SWConfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movsd	.LCPI267_1(%rip), %xmm2 # xmm2 = mem[0],zero
	xorps	%xmm3, %xmm3
	movss	.LCPI267_0(%rip), %xmm4 # xmm4 = mem[0],zero,zero,zero
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -20(%rbp)
	movss	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rax
	movaps	%xmm4, %xmm0
	subss	304(%rax), %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 172(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 176(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 180(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 184(%rax)
	movq	-8(%rbp), %rax
	movaps	%xmm4, %xmm0
	subss	304(%rax), %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 188(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 192(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 196(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 200(%rax)
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm2, %xmm1
	subsd	%xmm0, %xmm1
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm2, %xmm3
	subsd	%xmm0, %xmm3
	mulsd	%xmm3, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm2
	mulsd	%xmm2, %xmm0
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI267_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB267_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB267_4
# %bb.2:                                #   in Loop: Header=BB267_1 Depth=1
	movsd	.LCPI267_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movss	-16(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm3
	mulss	%xmm3, %xmm2
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB267_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_1
.LBB267_4:
	movq	-8(%rbp), %rdi
	callq	Plan7RenormalizeExits
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end267:
	.size	Plan7SWConfig, .Lfunc_end267-Plan7SWConfig
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function Plan7FSConfig
.LCPI268_0:
	.long	1065353216              # float 1
.LCPI268_2:
	.long	1056964608              # float 0.5
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI268_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	Plan7FSConfig
	.p2align	4, 0x90
	.type	Plan7FSConfig,@function
Plan7FSConfig:                          # @Plan7FSConfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movsd	.LCPI268_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movss	.LCPI268_0(%rip), %xmm3 # xmm3 = mem[0],zero,zero,zero
	movss	.LCPI268_2(%rip), %xmm4 # xmm4 = mem[0],zero,zero,zero
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -20(%rbp)
	movss	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rax
	movaps	%xmm3, %xmm0
	subss	304(%rax), %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 172(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 176(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 180(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 184(%rax)
	movq	-8(%rbp), %rax
	subss	304(%rax), %xmm3
	movq	-8(%rbp), %rax
	movss	%xmm3, 188(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 192(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm2, %xmm1
	subsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movss	%xmm0, 196(%rax)
	movq	-8(%rbp), %rax
	movss	304(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movss	%xmm0, 200(%rax)
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm2, %xmm1
	subsd	%xmm0, %xmm1
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movaps	%xmm2, %xmm3
	subsd	%xmm0, %xmm3
	mulsd	%xmm3, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	subsd	%xmm1, %xmm2
	mulsd	%xmm2, %xmm0
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI268_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB268_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB268_4
# %bb.2:                                #   in Loop: Header=BB268_1 Depth=1
	movsd	.LCPI268_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-16(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movss	-16(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cvtsi2ssl	%eax, %xmm3
	mulss	%xmm3, %xmm2
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB268_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_1
.LBB268_4:
	movq	-8(%rbp), %rdi
	callq	Plan7RenormalizeExits
	movq	-8(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end268:
	.size	Plan7FSConfig, .Lfunc_end268-Plan7FSConfig
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Plan7ESTConfig
.LCPI269_0:
	.quad	4602678819172646912     # double 0.5
.LCPI269_1:
	.quad	4607182418800017408     # double 1
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI269_2:
	.long	1065353216              # float 1
.LCPI269_3:
	.long	1056964608              # float 0.5
.LCPI269_4:
	.long	1065305418              # float 0.997151017
.LCPI269_5:
	.long	993703510               # float 0.00284900283
	.text
	.globl	Plan7ESTConfig
	.p2align	4, 0x90
	.type	Plan7ESTConfig,@function
Plan7ESTConfig:                         # @Plan7ESTConfig
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movsd	.LCPI269_0(%rip), %xmm2 # xmm2 = mem[0],zero
	movsd	.LCPI269_1(%rip), %xmm8 # xmm8 = mem[0],zero
	movss	.LCPI269_3(%rip), %xmm4 # xmm4 = mem[0],zero,zero,zero
	xorps	%xmm5, %xmm5
	movss	.LCPI269_2(%rip), %xmm6 # xmm6 = mem[0],zero,zero,zero
	movss	.LCPI269_4(%rip), %xmm7 # xmm7 = mem[0],zero,zero,zero
	movss	.LCPI269_5(%rip), %xmm3 # xmm3 = mem[0],zero,zero,zero
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -56(%rbp)
	movss	%xmm0, -32(%rbp)
	movss	%xmm1, -28(%rbp)
	movq	$0, -48(%rbp)
	movq	-16(%rbp), %rax
	movss	%xmm3, 172(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm7, 176(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm6, 180(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm5, 184(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm3, 188(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm7, 192(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm6, 196(%rax)
	movq	-16(%rbp), %rax
	movss	%xmm5, 200(%rax)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm4, 4(%rax)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	subsd	%xmm8, %xmm0
	divsd	%xmm0, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	callq	FSet
	movsd	.LCPI269_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI269_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	.LCPI269_2(%rip), %xmm2 # xmm2 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	216(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm2, (%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	216(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	movq	-16(%rbp), %rax
	movl	136(%rax), %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm1, %xmm2
	divsd	%xmm2, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	callq	FSet
	movl	$1, -20(%rbp)
.LBB269_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_3 Depth 2
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jg	.LBB269_8
# %bb.2:                                #   in Loop: Header=BB269_1 Depth=1
	movl	$0, -4(%rbp)
.LBB269_3:                              #   Parent Loop BB269_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$64, -4(%rbp)
	jge	.LBB269_6
# %bb.4:                                #   in Loop: Header=BB269_3 Depth=2
	movsd	.LCPI269_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	cvtss2sd	%xmm1, %xmm1
	movss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	movss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -24(%rbp)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movsd	.LCPI269_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rcx
	movq	424(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm1
	cvtss2sd	%xmm1, %xmm1
	movss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	movss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -24(%rbp)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movq	432(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.5:                                #   in Loop: Header=BB269_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_3
.LBB269_6:                              #   in Loop: Header=BB269_1 Depth=1
	movss	.LCPI269_2(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	424(%rax), %rax
	movq	512(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movss	.LCPI269_2(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rcx
	movl	%eax, 440(%rcx)
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movq	-16(%rbp), %rcx
	movl	%eax, 444(%rcx)
# %bb.7:                                #   in Loop: Header=BB269_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB269_1
.LBB269_8:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end269:
	.size	Plan7ESTConfig, .Lfunc_end269-Plan7ESTConfig
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PrintPlan7Stats
.LCPI270_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	PrintPlan7Stats
	.p2align	4, 0x90
	.type	PrintPlan7Stats,@function
PrintPlan7Stats:                        # @PrintPlan7Stats
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	%r8, -56(%rbp)
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	P7Logoddsify
	movq	-48(%rbp), %rdi
	movq	-64(%rbp), %rax
	movq	(%rax), %rsi
	movq	-56(%rbp), %rax
	movq	(%rax), %rdx
	callq	P7TraceScore
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
	movss	%xmm0, -32(%rbp)
	movss	%xmm0, -12(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	mulss	-4(%rbp), %xmm0
	movss	%xmm0, -24(%rbp)
	movl	$1, -16(%rbp)
.LBB270_1:                              # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB270_8
# %bb.2:                                #   in Loop: Header=BB270_1 Depth=1
	movq	-48(%rbp), %rdi
	movq	-64(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	P7TraceScore
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addss	-12(%rbp), %xmm0
	movss	%xmm0, -12(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	mulss	-4(%rbp), %xmm0
	addss	-24(%rbp), %xmm0
	movss	%xmm0, -24(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	ucomiss	-32(%rbp), %xmm0
	jbe	.LBB270_4
# %bb.3:                                #   in Loop: Header=BB270_1 Depth=1
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)
.LBB270_4:                              #   in Loop: Header=BB270_1 Depth=1
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB270_6
# %bb.5:                                #   in Loop: Header=BB270_1 Depth=1
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
.LBB270_6:                              #   in Loop: Header=BB270_1 Depth=1
	jmp	.LBB270_7
.LBB270_7:                              #   in Loop: Header=BB270_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB270_1
.LBB270_8:
	cmpl	$1, -20(%rbp)
	jle	.LBB270_13
# %bb.9:
	xorps	%xmm0, %xmm0
	movsd	.LCPI270_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	movss	-12(%rbp), %xmm3        # xmm3 = mem[0],zero,zero,zero
	mulss	-12(%rbp), %xmm3
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm4
	divss	%xmm4, %xmm3
	subss	%xmm3, %xmm2
	cvtss2sd	%xmm2, %xmm2
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm3
	cvtss2sd	%xmm3, %xmm3
	subsd	%xmm1, %xmm3
	divsd	%xmm3, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movss	%xmm1, -8(%rbp)
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB270_11
# %bb.10:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	sqrt
	jmp	.LBB270_12
.LBB270_11:
	xorps	%xmm0, %xmm0
	jmp	.LBB270_12
.LBB270_12:
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -8(%rbp)
	jmp	.LBB270_14
.LBB270_13:
	xorps	%xmm0, %xmm0
	movss	%xmm0, -8(%rbp)
.LBB270_14:
	movabsq	$.L.str.3.641, %rsi
	movq	-40(%rbp), %rdi
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movl	-20(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.4.642, %rsi
	movq	-40(%rbp), %rdi
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.5.643, %rsi
	movq	-40(%rbp), %rdi
	movss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movabsq	$.L.str.6.644, %rsi
	movq	-40(%rbp), %rdi
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end270:
	.size	PrintPlan7Stats, .Lfunc_end270-PrintPlan7Stats
	.cfi_endproc
                                        # -- End function
	.globl	Plan9toPlan7            # -- Begin function Plan9toPlan7
	.p2align	4, 0x90
	.type	Plan9toPlan7,@function
Plan9toPlan7:                           # @Plan9toPlan7
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %edi
	callq	AllocPlan7
	movq	%rax, -16(%rbp)
	movl	$1, -4(%rbp)
.LBB271_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB271_4
# %bb.2:                                #   in Loop: Header=BB271_1 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, (%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 8(%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 4(%rax)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 20(%rax)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 24(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 12(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	%xmm0, 16(%rax)
# %bb.3:                                #   in Loop: Header=BB271_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB271_1
.LBB271_4:
	movl	$1, -4(%rbp)
.LBB271_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_7 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jg	.LBB271_12
# %bb.6:                                #   in Loop: Header=BB271_5 Depth=1
	movl	$0, -8(%rbp)
.LBB271_7:                              #   Parent Loop BB271_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB271_10
# %bb.8:                                #   in Loop: Header=BB271_7 Depth=2
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	12(%rax,%rcx,4), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.9:                                #   in Loop: Header=BB271_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB271_7
.LBB271_10:                             #   in Loop: Header=BB271_5 Depth=1
	jmp	.LBB271_11
.LBB271_11:                             #   in Loop: Header=BB271_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB271_5
.LBB271_12:
	movl	$1, -4(%rbp)
.LBB271_13:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_15 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB271_20
# %bb.14:                               #   in Loop: Header=BB271_13 Depth=1
	movl	$0, -8(%rbp)
.LBB271_15:                             #   Parent Loop BB271_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB271_18
# %bb.16:                               #   in Loop: Header=BB271_15 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	12(%rax,%rcx,4), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.17:                               #   in Loop: Header=BB271_15 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB271_15
.LBB271_18:                             #   in Loop: Header=BB271_13 Depth=1
	jmp	.LBB271_19
.LBB271_19:                             #   in Loop: Header=BB271_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB271_13
.LBB271_20:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movss	8(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	addss	(%rax), %xmm1
	divss	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 168(%rax)
	movq	-16(%rbp), %rdi
	addq	$224, %rdi
	movq	-16(%rbp), %rsi
	addq	$304, %rsi              # imm = 0x130
	callq	P7DefaultNullModel
	movl	$0, -8(%rbp)
.LBB271_21:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB271_24
# %bb.22:                               #   in Loop: Header=BB271_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	32(%rax,%rcx,4), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, 224(%rax,%rcx,4)
# %bb.23:                               #   in Loop: Header=BB271_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB271_21
.LBB271_24:
	movq	-24(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB271_26
# %bb.25:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	112(%rax), %rsi
	callq	Plan7SetName
.LBB271_26:
	movq	-24(%rbp), %rax
	movl	144(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB271_28
# %bb.27:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	120(%rax), %rsi
	callq	strcpy
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, 456(%rax)
.LBB271_28:
	movq	-24(%rbp), %rax
	movl	144(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB271_30
# %bb.29:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	128(%rax), %rsi
	callq	strcpy
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$8, %ecx
	movl	%ecx, 456(%rax)
.LBB271_30:
	movq	-16(%rbp), %rdi
	callq	Plan7LSConfig
	movq	-16(%rbp), %rdi
	callq	Plan7Renormalize
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	orl	$32, %ecx
	movl	%ecx, 456(%rax)
	movq	-16(%rbp), %rax
	movl	456(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 456(%rax)
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end271:
	.size	Plan9toPlan7, .Lfunc_end271-Plan9toPlan7
	.cfi_endproc
                                        # -- End function
	.globl	P9AllocHMM              # -- Begin function P9AllocHMM
	.p2align	4, 0x90
	.type	P9AllocHMM,@function
P9AllocHMM:                             # @P9AllocHMM
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.649, %rax
	movl	%edi, -4(%rbp)
	movq	%rax, %rdi
	movl	$35, %esi
	movl	$152, %edx
	callq	sre_malloc
	movabsq	$.L.str.649, %rdi
	movq	%rax, -16(%rbp)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	cltq
	imulq	$92, %rax, %rdx
	movl	$36, %esi
	callq	sre_malloc
	movabsq	$.L.str.649, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	cltq
	imulq	$92, %rax, %rdx
	movl	$37, %esi
	callq	sre_malloc
	movabsq	$.L.str.649, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	cltq
	imulq	$92, %rax, %rdx
	movl	$38, %esi
	callq	sre_malloc
	movabsq	$.L.str.649, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$39, %esi
	callq	sre_malloc
	movabsq	$.L.str.649, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 120(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$40, %esi
	callq	sre_malloc
	movabsq	$.L.str.649, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 128(%rcx)
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	shlq	$2, %rdx
	movl	$41, %esi
	callq	sre_malloc
	movabsq	$.L.str.1.650, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 136(%rcx)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	callq	Strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 144(%rax)
	movq	-16(%rbp), %rdi
	callq	P9ZeroHMM
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end272:
	.size	P9AllocHMM, .Lfunc_end272-P9AllocHMM
	.cfi_endproc
                                        # -- End function
	.globl	P9ZeroHMM               # -- Begin function P9ZeroHMM
	.p2align	4, 0x90
	.type	P9ZeroHMM,@function
P9ZeroHMM:                              # @P9ZeroHMM
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB273_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_3 Depth 2
                                        #     Child Loop BB273_7 Depth 2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB273_12
# %bb.2:                                #   in Loop: Header=BB273_1 Depth=1
	movl	$0, -12(%rbp)
.LBB273_3:                              #   Parent Loop BB273_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -12(%rbp)
	jge	.LBB273_6
# %bb.4:                                #   in Loop: Header=BB273_3 Depth=2
	xorps	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB273_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB273_3
.LBB273_6:                              #   in Loop: Header=BB273_1 Depth=1
	movl	$0, -8(%rbp)
.LBB273_7:                              #   Parent Loop BB273_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB273_10
# %bb.8:                                #   in Loop: Header=BB273_7 Depth=2
	xorps	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, 12(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, 12(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$92, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, 12(%rax,%rcx,4)
# %bb.9:                                #   in Loop: Header=BB273_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB273_7
.LBB273_10:                             #   in Loop: Header=BB273_1 Depth=1
	jmp	.LBB273_11
.LBB273_11:                             #   in Loop: Header=BB273_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB273_1
.LBB273_12:
	popq	%rbp
	retq
.Lfunc_end273:
	.size	P9ZeroHMM, .Lfunc_end273-P9ZeroHMM
	.cfi_endproc
                                        # -- End function
	.globl	P9FreeHMM               # -- Begin function P9FreeHMM
	.p2align	4, 0x90
	.type	P9FreeHMM,@function
P9FreeHMM:                              # @P9FreeHMM
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB274_2
# %bb.1:
	movl	$0, -12(%rbp)
	jmp	.LBB274_9
.LBB274_2:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	128(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	136(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB274_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB274_4:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB274_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
.LBB274_6:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB274_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB274_8:
	movq	-8(%rbp), %rdi
	callq	free
	movl	$1, -12(%rbp)
.LBB274_9:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end274:
	.size	P9FreeHMM, .Lfunc_end274-P9FreeHMM
	.cfi_endproc
                                        # -- End function
	.globl	P9Renormalize           # -- Begin function P9Renormalize
	.p2align	4, 0x90
	.type	P9Renormalize,@function
P9Renormalize:                          # @P9Renormalize
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB275_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jg	.LBB275_8
# %bb.2:                                #   in Loop: Header=BB275_1 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-4(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movl	$3, %esi
	callq	FNorm
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-4(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movl	$3, %esi
	callq	FNorm
	cmpl	$0, -4(%rbp)
	jle	.LBB275_4
# %bb.3:                                #   in Loop: Header=BB275_1 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-4(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	movl	$3, %esi
	callq	FNorm
.LBB275_4:                              #   in Loop: Header=BB275_1 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB275_6
# %bb.5:                                #   in Loop: Header=BB275_1 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movslq	-4(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$12, %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
.LBB275_6:                              #   in Loop: Header=BB275_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movslq	-4(%rbp), %rax
	imulq	$92, %rax, %rax
	addq	%rax, %rdi
	addq	$12, %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
# %bb.7:                                #   in Loop: Header=BB275_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_1
.LBB275_8:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end275:
	.size	P9Renormalize, .Lfunc_end275-P9Renormalize
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P9DefaultNullModel
.LCPI276_0:
	.long	1048576000              # float 0.25
	.text
	.globl	P9DefaultNullModel
	.p2align	4, 0x90
	.type	P9DefaultNullModel,@function
P9DefaultNullModel:                     # @P9DefaultNullModel
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	cmpl	$3, Alphabet_type
	jne	.LBB276_6
# %bb.1:
	movl	$0, -4(%rbp)
.LBB276_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB276_5
# %bb.3:                                #   in Loop: Header=BB276_2 Depth=1
	movslq	-4(%rbp), %rax
	movss	aafq(,%rax,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.4:                                #   in Loop: Header=BB276_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_2
.LBB276_5:
	jmp	.LBB276_14
.LBB276_6:
	cmpl	$2, Alphabet_type
	jne	.LBB276_12
# %bb.7:
	movl	$0, -4(%rbp)
.LBB276_8:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB276_11
# %bb.9:                                #   in Loop: Header=BB276_8 Depth=1
	movss	.LCPI276_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.10:                               #   in Loop: Header=BB276_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_8
.LBB276_11:
	jmp	.LBB276_13
.LBB276_12:
	movabsq	$.L.str.2.657, %rdi
	movb	$0, %al
	callq	Die
.LBB276_13:
	jmp	.LBB276_14
.LBB276_14:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end276:
	.size	P9DefaultNullModel, .Lfunc_end276-P9DefaultNullModel
	.cfi_endproc
                                        # -- End function
	.globl	P7OptimalAccuracy       # -- Begin function P7OptimalAccuracy
	.p2align	4, 0x90
	.type	P7OptimalAccuracy,@function
P7OptimalAccuracy:                      # @P7OptimalAccuracy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-32(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	%rax, %rcx
	callq	P7Forward
	leaq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-24(%rbp), %rdx
	callq	P7Backward
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %r8
	callq	P7EmitterPosterior
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rax
	movl	136(%rax), %esi
	movq	-16(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-56(%rbp), %r8
	callq	P7FillOptimalAccuracy
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rdi
	callq	FreePlan7Matrix
	movq	-16(%rbp), %rdi
	callq	FreePlan7Matrix
	movsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	cvtsd2ss	%xmm0, %xmm0
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end277:
	.size	P7OptimalAccuracy, .Lfunc_end277-P7OptimalAccuracy
	.cfi_endproc
                                        # -- End function
	.globl	P7Backward              # -- Begin function P7Backward
	.p2align	4, 0x90
	.type	P7Backward,@function
P7Backward:                             # @P7Backward
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	leaq	-40(%rbp), %rax
	leaq	-48(%rbp), %rbx
	leaq	-64(%rbp), %r8
	leaq	-56(%rbp), %r9
	movq	%rdi, -72(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %esi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	AllocPlan7Matrix
	movq	%rax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	352(%rax), %eax
	movq	-40(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	344(%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	136(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB278_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$1, -12(%rbp)
	jl	.LBB278_4
# %bb.2:                                #   in Loop: Header=BB278_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	376(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	320(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-64(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.3:                                #   in Loop: Header=BB278_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_1
.LBB278_4:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movl	-28(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB278_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_7 Depth 2
                                        #     Child Loop BB278_12 Depth 2
	cmpl	$0, -16(%rbp)
	jl	.LBB278_18
# %bb.6:                                #   in Loop: Header=BB278_5 Depth=1
	movq	-40(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	356(%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB278_7:                              #   Parent Loop BB278_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$1, -12(%rbp)
	jl	.LBB278_10
# %bb.8:                                #   in Loop: Header=BB278_7 Depth=2
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                #   in Loop: Header=BB278_7 Depth=2
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_7
.LBB278_10:                             #   in Loop: Header=BB278_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-24(%rbp), %rax
	addl	360(%rax), %edi
	movq	-40(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %esi
	movq	-24(%rbp), %rax
	addl	364(%rax), %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %edi
	movq	-24(%rbp), %rax
	addl	344(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %esi
	movq	-24(%rbp), %rax
	addl	348(%rax), %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-24(%rbp), %rax
	addl	336(%rax), %edi
	movq	-40(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %esi
	movq	-24(%rbp), %rax
	addl	340(%rax), %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
	cmpl	$0, -16(%rbp)
	jle	.LBB278_16
# %bb.11:                               #   in Loop: Header=BB278_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	376(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-24(%rbp), %rcx
	movq	320(%rcx), %rcx
	movq	-72(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movsbl	(%rdx,%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	136(%rax), %eax
	subl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB278_12:                             #   Parent Loop BB278_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$1, -12(%rbp)
	jl	.LBB278_15
# %bb.13:                               #   in Loop: Header=BB278_12 Depth=2
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %edi
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%eax, %ebx
	movq	-64(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%ebx, %edi
	movl	%eax, %esi
	callq	ILogsum
	movq	-48(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	320(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-64(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movq	328(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movslq	-12(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.14:                               #   in Loop: Header=BB278_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_12
.LBB278_15:                             #   in Loop: Header=BB278_5 Depth=1
	jmp	.LBB278_16
.LBB278_16:                             #   in Loop: Header=BB278_5 Depth=1
	jmp	.LBB278_17
.LBB278_17:                             #   in Loop: Header=BB278_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB278_5
.LBB278_18:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %eax
	movl	%eax, -76(%rbp)
	cmpq	$0, -96(%rbp)
	je	.LBB278_20
# %bb.19:
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB278_21
.LBB278_20:
	movq	-88(%rbp), %rdi
	callq	FreePlan7Matrix
.LBB278_21:
	movl	-76(%rbp), %edi
	callq	Scorify
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end278:
	.size	P7Backward, .Lfunc_end278-P7Backward
	.cfi_endproc
                                        # -- End function
	.globl	P7EmitterPosterior      # -- Begin function P7EmitterPosterior
	.p2align	4, 0x90
	.type	P7EmitterPosterior,@function
P7EmitterPosterior:                     # @P7EmitterPosterior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	%edi, -60(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB279_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_3 Depth 2
	cmpl	$1, -12(%rbp)
	jl	.LBB279_8
# %bb.2:                                #   in Loop: Header=BB279_1 Depth=1
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	356(%rcx), %eax
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	8(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	364(%rcx), %eax
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	12(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	addl	340(%rcx), %eax
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	16(%rcx), %eax
	subl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movl	$1, -16(%rbp)
.LBB279_3:                              #   Parent Loop BB279_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB279_6
# %bb.4:                                #   in Loop: Header=BB279_3 Depth=2
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%ebx, %edi
	movl	%eax, %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	(%rcx,%rdx,4), %esi
	subl	%eax, %esi
	movl	%esi, (%rcx,%rdx,4)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movslq	-16(%rbp), %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	(%rcx,%rdx,4), %esi
	subl	%eax, %esi
	movl	%esi, (%rcx,%rdx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.5:                                #   in Loop: Header=BB279_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB279_3
.LBB279_6:                              #   in Loop: Header=BB279_1 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	addl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	136(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movl	%ebx, %edi
	movl	%eax, %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	movslq	136(%rdx), %rdx
	movl	(%rcx,%rdx,4), %esi
	subl	%eax, %esi
	movl	%esi, (%rcx,%rdx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.7:                                #   in Loop: Header=BB279_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB279_1
.LBB279_8:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end279:
	.size	P7EmitterPosterior, .Lfunc_end279-P7EmitterPosterior
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7FillOptimalAccuracy
.LCPI280_0:
	.long	1065353216              # float 1
	.text
	.globl	P7FillOptimalAccuracy
	.p2align	4, 0x90
	.type	P7FillOptimalAccuracy,@function
P7FillOptimalAccuracy:                  # @P7FillOptimalAccuracy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	%edi, -56(%rbp)
	movl	%esi, -52(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
	movq	%r8, -80(%rbp)
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movl	$0, -8(%rbp)
.LBB280_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jg	.LBB280_4
# %bb.2:                                #   in Loop: Header=BB280_1 Depth=1
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
# %bb.3:                                #   in Loop: Header=BB280_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_1
.LBB280_4:
	movl	$1, -4(%rbp)
.LBB280_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_7 Depth 2
                                        #     Child Loop BB280_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jg	.LBB280_48
# %bb.6:                                #   in Loop: Header=BB280_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movl	$1, -8(%rbp)
.LBB280_7:                              #   Parent Loop BB280_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jg	.LBB280_26
# %bb.8:                                #   in Loop: Header=BB280_7 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_10
# %bb.9:                                #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_10:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_12
# %bb.11:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_12:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_14
# %bb.13:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_14:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_16
# %bb.15:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_16:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_18
# %bb.17:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_18:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_20
# %bb.19:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_20:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$-987654321, (%rax,%rcx,4) # imm = 0xC521974F
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_22
# %bb.21:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_22:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB280_24
# %bb.23:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB280_24:                             #   in Loop: Header=BB280_7 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.25:                               #   in Loop: Header=BB280_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_7
.LBB280_26:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 16(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %edi
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %esi
	callq	ILogsum
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB280_28
# %bb.27:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 16(%rcx)
.LBB280_28:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 4(%rax)    # imm = 0xC521974F
	movl	$1, -8(%rbp)
.LBB280_29:                             #   Parent Loop BB280_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jg	.LBB280_34
# %bb.30:                               #   in Loop: Header=BB280_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB280_32
# %bb.31:                               #   in Loop: Header=BB280_29 Depth=2
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
.LBB280_32:                             #   in Loop: Header=BB280_29 Depth=2
	jmp	.LBB280_33
.LBB280_33:                             #   in Loop: Header=BB280_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_29
.LBB280_34:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 12(%rax)   # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %edi
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %esi
	callq	ILogsum
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB280_36
# %bb.35:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB280_36:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	12(%rcx), %eax
	jle	.LBB280_38
# %bb.37:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 12(%rcx)
.LBB280_38:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, (%rax)     # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB280_40
# %bb.39:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB280_40:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB280_42
# %bb.41:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB280_42:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-987654321, 8(%rax)    # imm = 0xC521974F
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %edi
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %esi
	callq	ILogsum
	movl	%eax, -12(%rbp)
	cmpl	$-987654321, %eax       # imm = 0xC521974F
	jle	.LBB280_44
# %bb.43:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB280_44:                             #   in Loop: Header=BB280_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	8(%rcx), %eax
	jle	.LBB280_46
# %bb.45:                               #   in Loop: Header=BB280_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB280_46:                             #   in Loop: Header=BB280_5 Depth=1
	jmp	.LBB280_47
.LBB280_47:                             #   in Loop: Header=BB280_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB280_5
.LBB280_48:
	movq	-24(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpq	$0, -80(%rbp)
	je	.LBB280_50
# %bb.49:
	leaq	-88(%rbp), %r8
	movl	-56(%rbp), %edi
	movl	-52(%rbp), %esi
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rcx
	callq	P7OptimalAccuracyTrace
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB280_50:
	movss	.LCPI280_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movl	-12(%rbp), %edi
	callq	Score2Prob
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end280:
	.size	P7FillOptimalAccuracy, .Lfunc_end280-P7FillOptimalAccuracy
	.cfi_endproc
                                        # -- End function
	.globl	P7OptimalAccuracyTrace  # -- Begin function P7OptimalAccuracyTrace
	.p2align	4, 0x90
	.type	P7OptimalAccuracyTrace,@function
P7OptimalAccuracyTrace:                 # @P7OptimalAccuracyTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	leaq	-32(%rbp), %rax
	movl	%edi, -60(%rbp)
	movl	%esi, -100(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -88(%rbp)
	movq	%r8, -112(%rbp)
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	addl	$6, %ecx
	movl	%ecx, -48(%rbp)
	movl	-48(%rbp), %edi
	movq	%rax, %rsi
	callq	P7AllocTrace
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movb	$9, (%rax)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movb	$8, 1(%rax)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	$0, 4(%rax)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, 4(%rax)
	movl	$2, -16(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB281_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_62 Depth 2
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$4, %eax
	je	.LBB281_92
# %bb.2:                                #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB281_88
# %bb.3:                                #   in Loop: Header=BB281_1 Depth=1
	movq	.LJTI281_0(,%rax,8), %rax
	jmpq	*%rax
.LBB281_4:                              #   in Loop: Header=BB281_1 Depth=1
	movq	-72(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ebx
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_8
# %bb.5:                                #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_8
# %bb.6:                                #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB281_8
# %bb.7:                                #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_22
.LBB281_8:                              #   in Loop: Header=BB281_1 Depth=1
	movl	-44(%rbp), %ebx
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_12
# %bb.9:                                #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_12
# %bb.10:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB281_12
# %bb.11:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_21
.LBB281_12:                             #   in Loop: Header=BB281_1 Depth=1
	movl	-44(%rbp), %ebx
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_16
# %bb.13:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_16
# %bb.14:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$1, -20(%rbp)
	jle	.LBB281_16
# %bb.15:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_20
.LBB281_16:                             #   in Loop: Header=BB281_1 Depth=1
	movl	-44(%rbp), %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_18
# %bb.17:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$6, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_19
.LBB281_18:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_19:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_20
.LBB281_20:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_21
.LBB281_21:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_22
.LBB281_22:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_23:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB281_27
# %bb.24:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_27
# %bb.25:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB281_27
# %bb.26:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_32
.LBB281_27:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-80(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB281_30
# %bb.28:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$1, -20(%rbp)
	jle	.LBB281_30
# %bb.29:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_31
.LBB281_30:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_31:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_32
.LBB281_32:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_33:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-96(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ebx
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_37
# %bb.34:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_37
# %bb.35:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB281_37
# %bb.36:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_43
.LBB281_37:                             #   in Loop: Header=BB281_1 Depth=1
	movl	-44(%rbp), %ebx
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_41
# %bb.38:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_41
# %bb.39:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB281_41
# %bb.40:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$3, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_42
.LBB281_41:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_42:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_43
.LBB281_43:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_44:                             #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB281_47
# %bb.45:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$-987654321, 16(%rax)   # imm = 0xC521974F
	jne	.LBB281_47
# %bb.46:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$4, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_53
.LBB281_47:                             #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_51
# %bb.48:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %edi
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_51
# %bb.49:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_51
# %bb.50:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-16(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_52
.LBB281_51:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_52:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_53
.LBB281_53:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_54:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB281_56
# %bb.55:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$5, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_60
.LBB281_56:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	12(%rcx), %eax
	jne	.LBB281_58
# %bb.57:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$10, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_59
.LBB281_58:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_59:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_60
.LBB281_60:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_61:                             #   in Loop: Header=BB281_1 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB281_62:                             #   Parent Loop BB281_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$1, -20(%rbp)
	jl	.LBB281_68
# %bb.63:                               #   in Loop: Header=BB281_62 Depth=2
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB281_66
# %bb.64:                               #   in Loop: Header=BB281_62 Depth=2
	cmpl	$0, -12(%rbp)
	jle	.LBB281_66
# %bb.65:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_69
.LBB281_66:                             #   in Loop: Header=BB281_62 Depth=2
	jmp	.LBB281_67
.LBB281_67:                             #   in Loop: Header=BB281_62 Depth=2
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB281_62
.LBB281_68:                             # %.loopexit
                                        #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_69
.LBB281_69:                             #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -20(%rbp)
	jg	.LBB281_71
# %bb.70:                               #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_71:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_72:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ebx
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %edi
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_75
# %bb.73:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_75
# %bb.74:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-16(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_79
.LBB281_75:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB281_77
# %bb.76:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_78
.LBB281_77:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.1.659, %rdi
	movb	$0, %al
	callq	Die
.LBB281_78:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_79
.LBB281_79:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_80:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %ebx
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %edi
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %esi
	callq	ILogsum
	cmpl	%eax, %ebx
	jne	.LBB281_83
# %bb.81:                               #   in Loop: Header=BB281_1 Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB281_83
# %bb.82:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$10, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rcx
	movl	-16(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB281_87
.LBB281_83:                             #   in Loop: Header=BB281_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB281_85
# %bb.84:                               #   in Loop: Header=BB281_1 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	$7, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB281_86
.LBB281_85:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.1.659, %rdi
	movb	$0, %al
	callq	Die
.LBB281_86:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_87
.LBB281_87:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_89
.LBB281_88:                             #   in Loop: Header=BB281_1 Depth=1
	movabsq	$.L.str.658, %rdi
	movb	$0, %al
	callq	Die
.LBB281_89:                             #   in Loop: Header=BB281_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jne	.LBB281_91
# %bb.90:                               #   in Loop: Header=BB281_1 Depth=1
	movl	-60(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	callq	P7ReallocTrace
.LBB281_91:                             #   in Loop: Header=BB281_1 Depth=1
	jmp	.LBB281_1
.LBB281_92:
	movl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rdi
	callq	P7ReverseTrace
	movq	-32(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end281:
	.size	P7OptimalAccuracyTrace, .Lfunc_end281-P7OptimalAccuracyTrace
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI281_0:
	.quad	.LBB281_4
	.quad	.LBB281_23
	.quad	.LBB281_33
	.quad	.LBB281_88
	.quad	.LBB281_44
	.quad	.LBB281_54
	.quad	.LBB281_61
	.quad	.LBB281_72
	.quad	.LBB281_88
	.quad	.LBB281_80
                                        # -- End function
	.text
	.globl	PostalCode              # -- Begin function PostalCode
	.p2align	4, 0x90
	.type	PostalCode,@function
PostalCode:                             # @PostalCode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.2.660, %rax
	movl	%edi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$692, %esi              # imm = 0x2B4
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB282_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB282_13
# %bb.2:                                #   in Loop: Header=BB282_1 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB282_4
# %bb.3:                                #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_12
.LBB282_4:                              #   in Loop: Header=BB282_1 Depth=1
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB282_11
# %bb.5:                                #   in Loop: Header=BB282_1 Depth=1
	movq	.LJTI282_0(,%rax,8), %rax
	jmpq	*%rax
.LBB282_6:                              #   in Loop: Header=BB282_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	score2postcode
	movq	-16(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB282_11
.LBB282_7:                              #   in Loop: Header=BB282_1 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	score2postcode
	movq	-16(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB282_11
.LBB282_8:                              #   in Loop: Header=BB282_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	16(%rax), %edi
	callq	score2postcode
	movq	-16(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB282_11
.LBB282_9:                              #   in Loop: Header=BB282_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %edi
	callq	score2postcode
	movq	-16(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB282_11
.LBB282_10:                             #   in Loop: Header=BB282_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	12(%rax), %edi
	callq	score2postcode
	movq	-16(%rbp), %rcx
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB282_11:                             #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_12
.LBB282_12:                             #   in Loop: Header=BB282_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB282_1
.LBB282_13:
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end282:
	.size	PostalCode, .Lfunc_end282-PostalCode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI282_0:
	.quad	.LBB282_6
	.quad	.LBB282_11
	.quad	.LBB282_7
	.quad	.LBB282_11
	.quad	.LBB282_8
	.quad	.LBB282_11
	.quad	.LBB282_11
	.quad	.LBB282_9
	.quad	.LBB282_11
	.quad	.LBB282_10
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function score2postcode
.LCPI283_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI283_1:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	score2postcode,@function
score2postcode:                         # @score2postcode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movss	.LCPI283_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	callq	Score2Prob
	cvtss2sd	%xmm0, %xmm0
	movsd	.LCPI283_1(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movb	%al, -1(%rbp)
	movsbl	-1(%rbp), %eax
	cmpl	$9, %eax
	jle	.LBB283_2
# %bb.1:
	movl	$42, %eax
	jmp	.LBB283_3
.LBB283_2:
	movsbl	-1(%rbp), %eax
	addl	$48, %eax
.LBB283_3:
	movsbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end283:
	.size	score2postcode, .Lfunc_end283-score2postcode
	.cfi_endproc
                                        # -- End function
	.globl	P7AllocPrior            # -- Begin function P7AllocPrior
	.p2align	4, 0x90
	.type	P7AllocPrior,@function
P7AllocPrior:                           # @P7AllocPrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$.L.str.661, %rdi
	movl	$37, %esi
	movl	$40016, %edx            # imm = 0x9C50
	callq	sre_malloc
	popq	%rbp
	retq
.Lfunc_end284:
	.size	P7AllocPrior, .Lfunc_end284-P7AllocPrior
	.cfi_endproc
                                        # -- End function
	.globl	P7FreePrior             # -- Begin function P7FreePrior
	.p2align	4, 0x90
	.type	P7FreePrior,@function
P7FreePrior:                            # @P7FreePrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end285:
	.size	P7FreePrior, .Lfunc_end285-P7FreePrior
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7LaplacePrior
.LCPI286_0:
	.long	1065353216              # float 1
	.text
	.globl	P7LaplacePrior
	.p2align	4, 0x90
	.type	P7LaplacePrior,@function
P7LaplacePrior:                         # @P7LaplacePrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	P7AllocPrior
	movss	.LCPI286_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 8(%rax)
	movq	-8(%rbp), %rdi
	addq	$808, %rdi              # imm = 0x328
	movl	$8, %esi
	callq	FSet
	movss	.LCPI286_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	$1, 6408(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 6412(%rax)
	movq	-8(%rbp), %rdi
	addq	$7212, %rdi             # imm = 0x1C2C
	movl	Alphabet_size, %esi
	callq	FSet
	movss	.LCPI286_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	$1, 23212(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 23216(%rax)
	movq	-8(%rbp), %rdi
	addq	$24016, %rdi            # imm = 0x5DD0
	movl	Alphabet_size, %esi
	callq	FSet
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end286:
	.size	P7LaplacePrior, .Lfunc_end286-P7LaplacePrior
	.cfi_endproc
                                        # -- End function
	.globl	P7DefaultPrior          # -- Begin function P7DefaultPrior
	.p2align	4, 0x90
	.type	P7DefaultPrior,@function
P7DefaultPrior:                         # @P7DefaultPrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	Alphabet_type(%rip), %eax
	testl	%eax, %eax
	je	.LBB287_5
	jmp	.LBB287_1
.LBB287_1:
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB287_4
	jmp	.LBB287_2
.LBB287_2:
	subl	$3, %eax
	jne	.LBB287_6
	jmp	.LBB287_3
.LBB287_3:
	callq	default_amino_prior
	movq	%rax, -8(%rbp)
	jmp	.LBB287_7
.LBB287_4:
	callq	default_nucleic_prior
	movq	%rax, -8(%rbp)
	jmp	.LBB287_7
.LBB287_5:
	movabsq	$.L.str.1.662, %rdi
	movb	$0, %al
	callq	Die
.LBB287_6:
	movq	$0, -8(%rbp)
.LBB287_7:
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end287:
	.size	P7DefaultPrior, .Lfunc_end287-P7DefaultPrior
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function default_amino_prior
.LCPI288_0:
	.long	1058021573              # float 0.563000023
.LCPI288_1:
	.long	1063678850              # float 0.900200009
.LCPI288_2:
	.long	1040730974              # float 0.133100003
.LCPI288_3:
	.long	1042207369              # float 0.155100003
.LCPI288_4:
	.long	1012739867              # float 0.0135000004
.LCPI288_5:
	.long	1021557971              # float 0.0277999993
.LCPI288_6:
	.long	1061895432              # float 0.793900012
.LCPI288_7:
	.long	1065353216              # float 1
.LCPI288_8:
	.long	1132888064              # float 269
.LCPI288_9:
	.long	1120665600              # float 102
.LCPI288_10:
	.long	1140621312              # float 505
.LCPI288_11:
	.long	1142669312              # float 623
.LCPI288_12:
	.long	1147633664              # float 926
.LCPI288_13:
	.long	1141489664              # float 551
.LCPI288_14:
	.long	1137672192              # float 415
.LCPI288_15:
	.long	1143062528              # float 647
.LCPI288_16:
	.long	1141440512              # float 548
.LCPI288_17:
	.long	1125056512              # float 143
.LCPI288_18:
	.long	1143537664              # float 676
.LCPI288_19:
	.long	1143717888              # float 687
.LCPI288_20:
	.long	1136230400              # float 371
.LCPI288_21:
	.long	1131479040              # float 241
.LCPI288_22:
	.long	1147240448              # float 902
.LCPI288_23:
	.long	1134329856              # float 313
.LCPI288_24:
	.long	1143128064              # float 651
.LCPI288_25:
	.long	1123024896              # float 120
.LCPI288_26:
	.long	1143619584              # float 681
	.text
	.p2align	4, 0x90
	.type	default_amino_prior,@function
default_amino_prior:                    # @default_amino_prior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	callq	P7AllocPrior
	movss	.LCPI288_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	.LCPI288_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movss	.LCPI288_2(%rip), %xmm2 # xmm2 = mem[0],zero,zero,zero
	movss	.LCPI288_3(%rip), %xmm3 # xmm3 = mem[0],zero,zero,zero
	movss	.LCPI288_4(%rip), %xmm4 # xmm4 = mem[0],zero,zero,zero
	movss	.LCPI288_5(%rip), %xmm5 # xmm5 = mem[0],zero,zero,zero
	movss	.LCPI288_6(%rip), %xmm6 # xmm6 = mem[0],zero,zero,zero
	movss	.LCPI288_7(%rip), %xmm7 # xmm7 = mem[0],zero,zero,zero
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm7, 8(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm6, 808(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm5, 812(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 816(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 820(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm2, 824(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 828(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 832(%rax)
	movq	-8(%rbp), %rax
	movl	$9, 6408(%rax)
	movl	$0, -12(%rbp)
.LBB288_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_3 Depth 2
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	6408(%rcx), %eax
	jge	.LBB288_8
# %bb.2:                                #   in Loop: Header=BB288_1 Depth=1
	movslq	-12(%rbp), %rax
	movss	default_amino_prior.defmq(,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, 6412(%rax,%rcx,4)
	movl	$0, -16(%rbp)
.LBB288_3:                              #   Parent Loop BB288_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$20, -16(%rbp)
	jge	.LBB288_6
# %bb.4:                                #   in Loop: Header=BB288_3 Depth=2
	movabsq	$default_amino_prior.defm, %rax
	movslq	-12(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	addq	$7212, %rax             # imm = 0x1C2C
	movslq	-12(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.5:                                #   in Loop: Header=BB288_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB288_3
.LBB288_6:                              #   in Loop: Header=BB288_1 Depth=1
	jmp	.LBB288_7
.LBB288_7:                              #   in Loop: Header=BB288_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB288_1
.LBB288_8:
	movss	.LCPI288_8(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)        # 4-byte Spill
	movss	.LCPI288_9(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)        # 4-byte Spill
	movss	.LCPI288_10(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -24(%rbp)        # 4-byte Spill
	movss	.LCPI288_11(%rip), %xmm8 # xmm8 = mem[0],zero,zero,zero
	movss	.LCPI288_12(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -20(%rbp)        # 4-byte Spill
	movss	.LCPI288_13(%rip), %xmm12 # xmm12 = mem[0],zero,zero,zero
	movss	.LCPI288_14(%rip), %xmm13 # xmm13 = mem[0],zero,zero,zero
	movss	.LCPI288_15(%rip), %xmm14 # xmm14 = mem[0],zero,zero,zero
	movss	.LCPI288_16(%rip), %xmm15 # xmm15 = mem[0],zero,zero,zero
	movss	.LCPI288_17(%rip), %xmm11 # xmm11 = mem[0],zero,zero,zero
	movss	.LCPI288_18(%rip), %xmm10 # xmm10 = mem[0],zero,zero,zero
	movss	.LCPI288_19(%rip), %xmm9 # xmm9 = mem[0],zero,zero,zero
	movss	.LCPI288_20(%rip), %xmm5 # xmm5 = mem[0],zero,zero,zero
	movss	.LCPI288_21(%rip), %xmm6 # xmm6 = mem[0],zero,zero,zero
	movss	.LCPI288_22(%rip), %xmm7 # xmm7 = mem[0],zero,zero,zero
	movss	.LCPI288_23(%rip), %xmm4 # xmm4 = mem[0],zero,zero,zero
	movss	.LCPI288_24(%rip), %xmm3 # xmm3 = mem[0],zero,zero,zero
	movss	.LCPI288_25(%rip), %xmm2 # xmm2 = mem[0],zero,zero,zero
	movss	.LCPI288_26(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movss	.LCPI288_7(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	$1, 23212(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 23216(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 24016(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm2, 24020(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm8, 24024(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 24028(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 24032(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm7, 24036(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm6, 24040(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm5, 24044(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm9, 24048(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm10, 24052(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm11, 24056(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm15, 24060(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm14, 24064(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm13, 24068(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm12, 24072(%rax)
	movq	-8(%rbp), %rax
	movss	-20(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, 24076(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm8, 24080(%rax)
	movq	-8(%rbp), %rax
	movss	-24(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, 24084(%rax)
	movq	-8(%rbp), %rax
	movss	-28(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, 24088(%rax)
	movq	-8(%rbp), %rax
	movss	-32(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, 24092(%rax)
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end288:
	.size	default_amino_prior, .Lfunc_end288-default_amino_prior
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function default_nucleic_prior
.LCPI289_0:
	.long	1065353216              # float 1
.LCPI289_1:
	.long	1058021573              # float 0.563000023
.LCPI289_2:
	.long	1063678850              # float 0.900200009
.LCPI289_3:
	.long	1040730974              # float 0.133100003
.LCPI289_4:
	.long	1042207369              # float 0.155100003
.LCPI289_5:
	.long	1012739867              # float 0.0135000004
.LCPI289_6:
	.long	1021557971              # float 0.0277999993
.LCPI289_7:
	.long	1061895432              # float 0.793900012
	.text
	.p2align	4, 0x90
	.type	default_nucleic_prior,@function
default_nucleic_prior:                  # @default_nucleic_prior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	P7AllocPrior
	movss	.LCPI289_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	.LCPI289_1(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movss	.LCPI289_2(%rip), %xmm2 # xmm2 = mem[0],zero,zero,zero
	movss	.LCPI289_3(%rip), %xmm3 # xmm3 = mem[0],zero,zero,zero
	movss	.LCPI289_4(%rip), %xmm4 # xmm4 = mem[0],zero,zero,zero
	movss	.LCPI289_5(%rip), %xmm5 # xmm5 = mem[0],zero,zero,zero
	movss	.LCPI289_6(%rip), %xmm6 # xmm6 = mem[0],zero,zero,zero
	movss	.LCPI289_7(%rip), %xmm7 # xmm7 = mem[0],zero,zero,zero
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 8(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm7, 808(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm6, 812(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm5, 816(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm4, 820(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm3, 824(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm2, 828(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm1, 832(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 6408(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 6412(%rax)
	movq	-8(%rbp), %rdi
	addq	$7212, %rdi             # imm = 0x1C2C
	movl	Alphabet_size, %esi
	callq	FSet
	movss	.LCPI289_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movl	$1, 23212(%rax)
	movq	-8(%rbp), %rax
	movss	%xmm0, 23216(%rax)
	movq	-8(%rbp), %rdi
	addq	$24016, %rdi            # imm = 0x5DD0
	movl	Alphabet_size, %esi
	callq	FSet
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end289:
	.size	default_nucleic_prior, .Lfunc_end289-default_nucleic_prior
	.cfi_endproc
                                        # -- End function
	.globl	P7ReadPrior             # -- Begin function P7ReadPrior
	.p2align	4, 0x90
	.type	P7ReadPrior,@function
P7ReadPrior:                            # @P7ReadPrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.2.663, %rsi
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB290_2
# %bb.1:
	movabsq	$.L.str.3.664, %rdi
	movq	-40(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB290_2:
	callq	P7AllocPrior
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	s2upper
	movq	-32(%rbp), %rdi
	movl	$.L.str.4.665, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB290_4
# %bb.3:
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB290_5
.LBB290_4:
	movabsq	$.L.str.5.666, %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB290_5:
	movq	-24(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	s2upper
	movq	-32(%rbp), %rdi
	movl	$.L.str.6.667, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB290_9
# %bb.6:
	cmpl	$3, Alphabet_type
	je	.LBB290_8
# %bb.7:
	movabsq	$.L.str.7.668, %rdi
	movq	-40(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB290_8:
	jmp	.LBB290_15
.LBB290_9:
	movq	-32(%rbp), %rdi
	movl	$.L.str.8.669, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB290_13
# %bb.10:
	cmpl	$2, Alphabet_type
	je	.LBB290_12
# %bb.11:
	movabsq	$.L.str.9.670, %rdi
	movq	-40(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB290_12:
	jmp	.LBB290_14
.LBB290_13:
	movabsq	$.L.str.10.671, %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	Die
.LBB290_14:
	jmp	.LBB290_15
.LBB290_15:
	movq	-24(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atoi
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jge	.LBB290_17
# %bb.16:
	movabsq	$.L.str.11.672, %rdi
	movq	-16(%rbp), %rax
	movl	4(%rax), %esi
	movb	$0, %al
	callq	Die
.LBB290_17:
	movq	-16(%rbp), %rax
	cmpl	$200, 4(%rax)
	jle	.LBB290_19
# %bb.18:
	movabsq	$.L.str.12.673, %rdi
	movl	$200, %esi
	movb	$0, %al
	callq	Die
.LBB290_19:
	movl	$0, -4(%rbp)
.LBB290_20:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_22 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB290_27
# %bb.21:                               #   in Loop: Header=BB290_20 Depth=1
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, 8(%rax,%rcx,4)
	movl	$0, -8(%rbp)
.LBB290_22:                             #   Parent Loop BB290_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$7, -8(%rbp)
	jge	.LBB290_25
# %bb.23:                               #   in Loop: Header=BB290_22 Depth=2
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.24:                               #   in Loop: Header=BB290_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_22
.LBB290_25:                             #   in Loop: Header=BB290_20 Depth=1
	jmp	.LBB290_26
.LBB290_26:                             #   in Loop: Header=BB290_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_20
.LBB290_27:
	movq	-24(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atoi
	movq	-16(%rbp), %rcx
	movl	%eax, 6408(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 6408(%rax)
	jge	.LBB290_29
# %bb.28:
	movabsq	$.L.str.13.674, %rdi
	movq	-16(%rbp), %rax
	movl	6408(%rax), %esi
	movb	$0, %al
	callq	Die
.LBB290_29:
	movq	-16(%rbp), %rax
	cmpl	$200, 6408(%rax)
	jle	.LBB290_31
# %bb.30:
	movabsq	$.L.str.14.675, %rdi
	movq	-16(%rbp), %rax
	movl	6408(%rax), %esi
	movl	$200, %edx
	movb	$0, %al
	callq	Die
.LBB290_31:
	movl	$0, -4(%rbp)
.LBB290_32:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_34 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	6408(%rcx), %eax
	jge	.LBB290_39
# %bb.33:                               #   in Loop: Header=BB290_32 Depth=1
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, 6412(%rax,%rcx,4)
	movl	$0, -8(%rbp)
.LBB290_34:                             #   Parent Loop BB290_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB290_37
# %bb.35:                               #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	addq	$7212, %rax             # imm = 0x1C2C
	movslq	-4(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.36:                               #   in Loop: Header=BB290_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_34
.LBB290_37:                             #   in Loop: Header=BB290_32 Depth=1
	jmp	.LBB290_38
.LBB290_38:                             #   in Loop: Header=BB290_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_32
.LBB290_39:
	movq	-24(%rbp), %rdi
	movl	$1, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atoi
	movq	-16(%rbp), %rcx
	movl	%eax, 23212(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 23212(%rax)
	jge	.LBB290_41
# %bb.40:
	movabsq	$.L.str.15.676, %rdi
	movq	-16(%rbp), %rax
	movl	23212(%rax), %esi
	movb	$0, %al
	callq	Die
.LBB290_41:
	movq	-16(%rbp), %rax
	cmpl	$200, 23212(%rax)
	jle	.LBB290_43
# %bb.42:
	movabsq	$.L.str.16.677, %rdi
	movq	-16(%rbp), %rax
	movl	23212(%rax), %esi
	movl	$200, %edx
	movb	$0, %al
	callq	Die
.LBB290_43:
	movl	$0, -4(%rbp)
.LBB290_44:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_46 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	23212(%rcx), %eax
	jge	.LBB290_51
# %bb.45:                               #   in Loop: Header=BB290_44 Depth=1
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, 23216(%rax,%rcx,4)
	movl	$0, -8(%rbp)
.LBB290_46:                             #   Parent Loop BB290_44 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB290_49
# %bb.47:                               #   in Loop: Header=BB290_46 Depth=2
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	addq	$24016, %rax            # imm = 0x5DD0
	movslq	-4(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.48:                               #   in Loop: Header=BB290_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_46
.LBB290_49:                             #   in Loop: Header=BB290_44 Depth=1
	jmp	.LBB290_50
.LBB290_50:                             #   in Loop: Header=BB290_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_44
.LBB290_51:
	movq	-24(%rbp), %rdi
	callq	fclose
	movq	-16(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end290:
	.size	P7ReadPrior, .Lfunc_end290-P7ReadPrior
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PAMPrior
.LCPI291_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	PAMPrior
	.p2align	4, 0x90
	.type	PAMPrior,@function
PAMPrior:                               # @PAMPrior
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movss	%xmm0, -48(%rbp)
	cmpl	$3, Alphabet_type
	je	.LBB291_2
# %bb.1:
	movabsq	$.L.str.17.678, %rdi
	movb	$0, %al
	callq	Die
.LBB291_2:
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB291_4
# %bb.3:
	movabsq	$.L.str.18.679, %rdi
	movb	$0, %al
	callq	Die
.LBB291_4:
	movq	-16(%rbp), %rax
	cmpl	$1, 23212(%rax)
	je	.LBB291_6
# %bb.5:
	movabsq	$.L.str.19.680, %rdi
	movb	$0, %al
	callq	Die
.LBB291_6:
	movabsq	$.L.str.20.681, %rdi
	movq	-24(%rbp), %rsi
	callq	FileConcat
	movabsq	$.L.str.2.663, %rsi
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rdi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB291_10
# %bb.7:
	movabsq	$.L.str.21.682, %rsi
	movq	-24(%rbp), %rdi
	xorl	%edx, %edx
	callq	EnvFileOpen
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB291_10
# %bb.8:
	movabsq	$.L.str.21.682, %rsi
	movq	-64(%rbp), %rdi
	xorl	%edx, %edx
	callq	EnvFileOpen
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB291_10
# %bb.9:
	movabsq	$.L.str.22.683, %rdi
	movq	-24(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB291_10:
	leaq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	movq	-32(%rbp), %rdi
	callq	ParsePAMFile
	cmpl	$0, %eax
	jne	.LBB291_12
# %bb.11:
	movabsq	$.L.str.23.684, %rdi
	movq	-24(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB291_12:
	movq	-32(%rbp), %rdi
	callq	fclose
	movq	-64(%rbp), %rdi
	callq	free
	movq	-16(%rbp), %rax
	movl	$1, (%rax)
	movq	-16(%rbp), %rax
	movl	$20, 6408(%rax)
	movl	$0, -4(%rbp)
.LBB291_13:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_15 Depth 2
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB291_20
# %bb.14:                               #   in Loop: Header=BB291_13 Depth=1
	movl	$0, -8(%rbp)
.LBB291_15:                             #   Parent Loop BB291_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB291_18
# %bb.16:                               #   in Loop: Header=BB291_15 Depth=2
	movslq	-4(%rbp), %rax
	movsbl	Alphabet(,%rax), %eax
	subl	$65, %eax
	movl	%eax, -40(%rbp)
	movslq	-8(%rbp), %rax
	movsbl	Alphabet(,%rax), %eax
	subl	$65, %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movss	aafq(,%rax,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -72(%rbp)        # 8-byte Spill
	movq	-56(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm0
	mulss	-44(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movsd	-72(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	addq	$7212, %rax             # imm = 0x1C2C
	movslq	-4(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.17:                               #   in Loop: Header=BB291_15 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_15
.LBB291_18:                             #   in Loop: Header=BB291_13 Depth=1
	jmp	.LBB291_19
.LBB291_19:                             #   in Loop: Header=BB291_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_13
.LBB291_20:
	movl	$0, -4(%rbp)
.LBB291_21:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB291_24
# %bb.22:                               #   in Loop: Header=BB291_21 Depth=1
	movsd	.LCPI291_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	Alphabet_size, %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, 6412(%rax,%rcx,4)
	movq	-16(%rbp), %rdi
	addq	$7212, %rdi             # imm = 0x1C2C
	movslq	-4(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
	movq	-16(%rbp), %rdi
	addq	$7212, %rdi             # imm = 0x1C2C
	movslq	-4(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movl	Alphabet_size, %esi
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	FScale
# %bb.23:                               #   in Loop: Header=BB291_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_21
.LBB291_24:
	movq	-56(%rbp), %rdi
	movl	$27, %esi
	callq	Free2DArray
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end291:
	.size	PAMPrior, .Lfunc_end291-PAMPrior
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7DefaultNullModel
.LCPI292_0:
	.long	1065336456              # float 0.999001026
.LCPI292_2:
	.long	1065305418              # float 0.997151017
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI292_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	P7DefaultNullModel
	.p2align	4, 0x90
	.type	P7DefaultNullModel,@function
P7DefaultNullModel:                     # @P7DefaultNullModel
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$3, Alphabet_type
	jne	.LBB292_6
# %bb.1:
	movl	$0, -4(%rbp)
.LBB292_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB292_5
# %bb.3:                                #   in Loop: Header=BB292_2 Depth=1
	movslq	-4(%rbp), %rax
	movss	aafq(,%rax,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.4:                                #   in Loop: Header=BB292_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_2
.LBB292_5:
	movss	.LCPI292_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	%xmm0, (%rax)
	jmp	.LBB292_11
.LBB292_6:
	movl	$0, -4(%rbp)
.LBB292_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB292_10
# %bb.8:                                #   in Loop: Header=BB292_7 Depth=1
	movsd	.LCPI292_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	Alphabet_size, %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.9:                                #   in Loop: Header=BB292_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_7
.LBB292_10:
	movss	.LCPI292_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movss	%xmm0, (%rax)
.LBB292_11:
	popq	%rbp
	retq
.Lfunc_end292:
	.size	P7DefaultNullModel, .Lfunc_end292-P7DefaultNullModel
	.cfi_endproc
                                        # -- End function
	.globl	P7ReadNullModel         # -- Begin function P7ReadNullModel
	.p2align	4, 0x90
	.type	P7ReadNullModel,@function
P7ReadNullModel:                        # @P7ReadNullModel
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.2.663, %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-32(%rbp), %rdi
	movq	%rax, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB293_2
# %bb.1:
	movabsq	$.L.str.24.687, %rdi
	movq	-32(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB293_2:
	movq	-24(%rbp), %rdi
	movl	$4, %esi
	callq	Getword
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB293_4
# %bb.3:
	jmp	.LBB293_24
.LBB293_4:
	movq	-16(%rbp), %rdi
	callq	s2upper
	movq	-16(%rbp), %rdi
	movl	$.L.str.8.669, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB293_6
# %bb.5:
	movl	$2, -4(%rbp)
	jmp	.LBB293_10
.LBB293_6:
	movq	-16(%rbp), %rdi
	movl	$.L.str.6.667, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB293_8
# %bb.7:
	movl	$3, -4(%rbp)
	jmp	.LBB293_9
.LBB293_8:
	jmp	.LBB293_24
.LBB293_9:
	jmp	.LBB293_10
.LBB293_10:
	cmpl	$0, Alphabet_type
	jne	.LBB293_12
# %bb.11:
	movl	-4(%rbp), %edi
	callq	SetAlphabet
	jmp	.LBB293_15
.LBB293_12:
	movl	Alphabet_type, %eax
	cmpl	-4(%rbp), %eax
	je	.LBB293_14
# %bb.13:
	movabsq	$.L.str.25.688, %rdi
	movq	-32(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB293_14:
	jmp	.LBB293_15
.LBB293_15:
	movl	$0, -8(%rbp)
.LBB293_16:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB293_21
# %bb.17:                               #   in Loop: Header=BB293_16 Depth=1
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB293_19
# %bb.18:
	jmp	.LBB293_24
.LBB293_19:                             #   in Loop: Header=BB293_16 Depth=1
	movq	-16(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.20:                               #   in Loop: Header=BB293_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_16
.LBB293_21:
	movq	-24(%rbp), %rdi
	movl	$2, %esi
	callq	Getword
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB293_23
# %bb.22:
	jmp	.LBB293_24
.LBB293_23:
	movq	-16(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, (%rax)
	movq	-24(%rbp), %rdi
	callq	fclose
	jmp	.LBB293_25
.LBB293_24:
	movq	-24(%rbp), %rdi
	callq	fclose
	movabsq	$.L.str.26.689, %rdi
	movq	-32(%rbp), %rsi
	movb	$0, %al
	callq	Die
.LBB293_25:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end293:
	.size	P7ReadNullModel, .Lfunc_end293-P7ReadNullModel
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7PriorifyHMM
.LCPI294_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI294_1:
	.quad	4607182418800017408     # double 1
.LCPI294_2:
	.quad	4611686018427387904     # double 2
	.text
	.globl	P7PriorifyHMM
	.p2align	4, 0x90
	.type	P7PriorifyHMM,@function
P7PriorifyHMM:                          # @P7PriorifyHMM
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$2432, %rsp             # imm = 0x980
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rdi
	addq	$8, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movq	-8(%rbp), %rax
	movq	216(%rax), %rdi
	addq	$4, %rdi
	movq	-8(%rbp), %rax
	movl	136(%rax), %esi
	subl	$1, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI294_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movsd	.LCPI294_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI294_2(%rip), %xmm2 # xmm2 = mem[0],zero
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm3        # xmm3 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	addss	4(%rax), %xmm3
	cvtss2sd	%xmm3, %xmm3
	addsd	%xmm2, %xmm3
	cvtsd2ss	%xmm3, %xmm2
	movss	%xmm2, -28(%rbp)
	movq	-8(%rbp), %rax
	movss	168(%rax), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm1, %xmm2
	movss	-28(%rbp), %xmm3        # xmm3 = mem[0],zero,zero,zero
	cvtss2sd	%xmm3, %xmm3
	divsd	%xmm3, %xmm2
	cvtsd2ss	%xmm2, %xmm2
	movq	-8(%rbp), %rax
	movss	%xmm2, 168(%rax)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	4(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm1, %xmm2
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm2
	cvtsd2ss	%xmm2, %xmm1
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	movss	%xmm1, 4(%rax)
	movq	-8(%rbp), %rax
	movq	216(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	$1, -12(%rbp)
.LBB294_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	136(%rcx), %eax
	jge	.LBB294_22
# %bb.2:                                #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB294_7
# %bb.3:                                #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jl	.LBB294_7
# %bb.4:                                #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jl	.LBB294_6
# %bb.5:                                #   in Loop: Header=BB294_1 Depth=1
	movabsq	$.L.str.27.690, %rdi
	movb	$0, %al
	callq	Die
.LBB294_6:                              #   in Loop: Header=BB294_1 Depth=1
	leaq	-2432(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	4(%rax), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI294_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-12(%rbp), %rcx
	movslq	(%rax,%rcx,4), %rax
	movss	%xmm0, -2432(%rbp,%rax,4)
	jmp	.LBB294_8
.LBB294_7:                              #   in Loop: Header=BB294_1 Depth=1
	leaq	-2432(%rbp), %rdi
	movq	-24(%rbp), %rsi
	addq	$8, %rsi
	movq	-24(%rbp), %rax
	movl	4(%rax), %edx
	callq	FCopy
.LBB294_8:                              #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB294_13
# %bb.9:                                #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jl	.LBB294_13
# %bb.10:                               #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	cmpl	6408(%rcx), %eax
	jl	.LBB294_12
# %bb.11:                               #   in Loop: Header=BB294_1 Depth=1
	movabsq	$.L.str.28.691, %rdi
	movb	$0, %al
	callq	Die
.LBB294_12:                             #   in Loop: Header=BB294_1 Depth=1
	leaq	-832(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	6408(%rax), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI294_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-12(%rbp), %rcx
	movslq	(%rax,%rcx,4), %rax
	movss	%xmm0, -832(%rbp,%rax,4)
	jmp	.LBB294_14
.LBB294_13:                             #   in Loop: Header=BB294_1 Depth=1
	leaq	-832(%rbp), %rdi
	movq	-24(%rbp), %rsi
	addq	$6412, %rsi             # imm = 0x190C
	movq	-24(%rbp), %rax
	movl	6408(%rax), %edx
	callq	FCopy
.LBB294_14:                             #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB294_19
# %bb.15:                               #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jl	.LBB294_19
# %bb.16:                               #   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	cmpl	23212(%rcx), %eax
	jl	.LBB294_18
# %bb.17:                               #   in Loop: Header=BB294_1 Depth=1
	movabsq	$.L.str.29.692, %rdi
	movb	$0, %al
	callq	Die
.LBB294_18:                             #   in Loop: Header=BB294_1 Depth=1
	leaq	-1632(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	23212(%rax), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI294_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-12(%rbp), %rcx
	movslq	(%rax,%rcx,4), %rax
	movss	%xmm0, -1632(%rbp,%rax,4)
	jmp	.LBB294_20
.LBB294_19:                             #   in Loop: Header=BB294_1 Depth=1
	leaq	-1632(%rbp), %rdi
	movq	-24(%rbp), %rsi
	addq	$23216, %rsi            # imm = 0x5AB0
	movq	-24(%rbp), %rax
	movl	23212(%rax), %edx
	callq	FCopy
.LBB294_20:                             #   in Loop: Header=BB294_1 Depth=1
	leaq	-2432(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	callq	P7PriorifyTransitionVector
	leaq	-832(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rdi
	movq	-24(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	6408(%rax), %edx
	movq	-24(%rbp), %r8
	addq	$7212, %r8              # imm = 0x1C2C
	xorl	%r9d, %r9d
	callq	P7PriorifyEmissionVector
	leaq	-1632(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rdi
	movq	-24(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	23212(%rax), %edx
	movq	-24(%rbp), %r8
	addq	$24016, %r8             # imm = 0x5DD0
	xorl	%r9d, %r9d
	callq	P7PriorifyEmissionVector
# %bb.21:                               #   in Loop: Header=BB294_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_1
.LBB294_22:
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB294_27
# %bb.23:
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jl	.LBB294_27
# %bb.24:
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	cmpl	6408(%rcx), %eax
	jl	.LBB294_26
# %bb.25:
	movabsq	$.L.str.28.691, %rdi
	movb	$0, %al
	callq	Die
.LBB294_26:
	leaq	-832(%rbp), %rdi
	movq	-24(%rbp), %rax
	movl	6408(%rax), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movss	.LCPI294_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movslq	(%rax,%rcx,4), %rax
	movss	%xmm0, -832(%rbp,%rax,4)
	jmp	.LBB294_28
.LBB294_27:
	leaq	-832(%rbp), %rdi
	movq	-24(%rbp), %rsi
	addq	$6412, %rsi             # imm = 0x190C
	movq	-24(%rbp), %rax
	movl	6408(%rax), %edx
	callq	FCopy
.LBB294_28:
	leaq	-832(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movq	-8(%rbp), %rdx
	movslq	136(%rdx), %rdx
	movq	(%rax,%rdx,8), %rdi
	movq	-24(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	6408(%rax), %edx
	movq	-24(%rbp), %r8
	addq	$7212, %r8              # imm = 0x1C2C
	xorl	%r9d, %r9d
	callq	P7PriorifyEmissionVector
	movq	-8(%rbp), %rdi
	callq	Plan7Renormalize
	addq	$2432, %rsp             # imm = 0x980
	popq	%rbp
	retq
.Lfunc_end294:
	.size	P7PriorifyHMM, .Lfunc_end294-P7PriorifyHMM
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7PriorifyTransitionVector
.LCPI295_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI295_1:
	.quad	-4571373524106608640    # double -999
	.text
	.globl	P7PriorifyTransitionVector
	.p2align	4, 0x90
	.type	P7PriorifyTransitionVector,@function
P7PriorifyTransitionVector:             # @P7PriorifyTransitionVector
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$864, %rsp              # imm = 0x360
	movss	.LCPI295_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -56(%rbp)
	movss	%xmm0, -864(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB295_2
# %bb.1:
	movq	-16(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB295_11
.LBB295_2:
	movq	-16(%rbp), %rax
	cmpl	$1, 6408(%rax)
	jle	.LBB295_11
# %bb.3:
	movl	$0, -4(%rbp)
.LBB295_4:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB295_10
# %bb.5:                                #   in Loop: Header=BB295_4 Depth=1
	xorps	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB295_7
# %bb.6:                                #   in Loop: Header=BB295_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	jmp	.LBB295_8
.LBB295_7:                              #   in Loop: Header=BB295_4 Depth=1
	movsd	.LCPI295_1(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB295_8
.LBB295_8:                              #   in Loop: Header=BB295_4 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movslq	-4(%rbp), %rax
	movss	%xmm0, -864(%rbp,%rax,4)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rdx
	addq	$808, %rdx              # imm = 0x328
	movslq	-4(%rbp), %rax
	imulq	$28, %rax, %rax
	addq	%rax, %rdx
	movl	$3, %esi
	callq	Logp_cvec
	movslq	-4(%rbp), %rax
	addss	-864(%rbp,%rax,4), %xmm0
	movss	%xmm0, -864(%rbp,%rax,4)
	movq	-24(%rbp), %rdi
	addq	$12, %rdi
	movq	-16(%rbp), %rdx
	addq	$808, %rdx              # imm = 0x328
	movslq	-4(%rbp), %rax
	imulq	$28, %rax, %rax
	addq	%rax, %rdx
	addq	$12, %rdx
	movl	$2, %esi
	callq	Logp_cvec
	movslq	-4(%rbp), %rax
	addss	-864(%rbp,%rax,4), %xmm0
	movss	%xmm0, -864(%rbp,%rax,4)
	movq	-24(%rbp), %rdi
	addq	$20, %rdi
	movq	-16(%rbp), %rdx
	addq	$808, %rdx              # imm = 0x328
	movslq	-4(%rbp), %rax
	imulq	$28, %rax, %rax
	addq	%rax, %rdx
	addq	$20, %rdx
	movl	$2, %esi
	callq	Logp_cvec
	movslq	-4(%rbp), %rax
	addss	-864(%rbp,%rax,4), %xmm0
	movss	%xmm0, -864(%rbp,%rax,4)
# %bb.9:                                #   in Loop: Header=BB295_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_4
.LBB295_10:
	leaq	-864(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	4(%rax), %esi
	callq	LogNorm
.LBB295_11:
	movq	-24(%rbp), %rdi
	movl	$3, %esi
	callq	FSum
	movss	%xmm0, -48(%rbp)
	movq	-24(%rbp), %rax
	movss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	addss	16(%rax), %xmm0
	movss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	movss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	addss	24(%rax), %xmm0
	movss	%xmm0, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB295_12:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_14 Depth 2
	cmpl	$7, -8(%rbp)
	jge	.LBB295_25
# %bb.13:                               #   in Loop: Header=BB295_12 Depth=1
	xorps	%xmm0, %xmm0
	movss	%xmm0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB295_14:                             #   Parent Loop BB295_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB295_23
# %bb.15:                               #   in Loop: Header=BB295_14 Depth=2
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	jb	.LBB295_18
	jmp	.LBB295_16
.LBB295_16:                             #   in Loop: Header=BB295_14 Depth=2
	movl	%eax, %ecx
	addl	$-3, %ecx
	subl	$2, %ecx
	jb	.LBB295_19
	jmp	.LBB295_17
.LBB295_17:                             #   in Loop: Header=BB295_14 Depth=2
	addl	$-5, %eax
	subl	$2, %eax
	jb	.LBB295_20
	jmp	.LBB295_21
.LBB295_18:                             #   in Loop: Header=BB295_14 Depth=2
	movslq	-4(%rbp), %rax
	movss	-864(%rbp,%rax,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	mulss	%xmm0, %xmm1
	movss	%xmm1, -36(%rbp)        # 4-byte Spill
	movss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -32(%rbp)        # 4-byte Spill
	movq	-16(%rbp), %rdi
	addq	$808, %rdi              # imm = 0x328
	movslq	-4(%rbp), %rax
	imulq	$28, %rax, %rax
	addq	%rax, %rdi
	movl	$3, %esi
	callq	FSum
	movss	-32(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	addss	%xmm0, %xmm1
	movss	-36(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	divss	%xmm1, %xmm0
	addss	-28(%rbp), %xmm0
	movss	%xmm0, -28(%rbp)
	jmp	.LBB295_21
.LBB295_19:                             #   in Loop: Header=BB295_14 Depth=2
	movslq	-4(%rbp), %rax
	movss	-864(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm1
	mulss	%xmm1, %xmm0
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	addss	12(%rax), %xmm1
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	addss	16(%rax), %xmm1
	divss	%xmm1, %xmm0
	addss	-28(%rbp), %xmm0
	movss	%xmm0, -28(%rbp)
	jmp	.LBB295_21
.LBB295_20:                             #   in Loop: Header=BB295_14 Depth=2
	movslq	-4(%rbp), %rax
	movss	-864(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm1
	mulss	%xmm1, %xmm0
	movss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	addss	20(%rax), %xmm1
	movq	-16(%rbp), %rax
	addq	$808, %rax              # imm = 0x328
	movslq	-4(%rbp), %rcx
	imulq	$28, %rcx, %rcx
	addq	%rcx, %rax
	addss	24(%rax), %xmm1
	divss	%xmm1, %xmm0
	addss	-28(%rbp), %xmm0
	movss	%xmm0, -28(%rbp)
.LBB295_21:                             #   in Loop: Header=BB295_14 Depth=2
	jmp	.LBB295_22
.LBB295_22:                             #   in Loop: Header=BB295_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_14
.LBB295_23:                             #   in Loop: Header=BB295_12 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.24:                               #   in Loop: Header=BB295_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_12
.LBB295_25:
	movq	-24(%rbp), %rdi
	movl	$3, %esi
	callq	FNorm
	movq	-24(%rbp), %rdi
	addq	$12, %rdi
	movl	$2, %esi
	callq	FNorm
	movq	-24(%rbp), %rdi
	addq	$20, %rdi
	movl	$2, %esi
	callq	FNorm
	addq	$864, %rsp              # imm = 0x360
	popq	%rbp
	retq
.Lfunc_end295:
	.size	P7PriorifyTransitionVector, .Lfunc_end295-P7PriorifyTransitionVector
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function P7PriorifyEmissionVector
.LCPI296_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI296_1:
	.quad	-4571373524106608640    # double -999
	.text
	.globl	P7PriorifyEmissionVector
	.p2align	4, 0x90
	.type	P7PriorifyEmissionVector,@function
P7PriorifyEmissionVector:               # @P7PriorifyEmissionVector
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$864, %rsp              # imm = 0x360
	movss	.LCPI296_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -48(%rbp)
	movss	%xmm0, -864(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB296_10
# %bb.1:
	cmpl	$1, -12(%rbp)
	jle	.LBB296_10
# %bb.2:
	movl	$0, -4(%rbp)
.LBB296_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB296_9
# %bb.4:                                #   in Loop: Header=BB296_3 Depth=1
	xorps	%xmm0, %xmm0
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB296_6
# %bb.5:                                #   in Loop: Header=BB296_3 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	jmp	.LBB296_7
.LBB296_6:                              #   in Loop: Header=BB296_3 Depth=1
	movsd	.LCPI296_1(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB296_7
.LBB296_7:                              #   in Loop: Header=BB296_3 Depth=1
	cvtsd2ss	%xmm0, %xmm0
	movslq	-4(%rbp), %rax
	movss	%xmm0, -864(%rbp,%rax,4)
	movq	-24(%rbp), %rdi
	movl	Alphabet_size, %esi
	movq	-32(%rbp), %rdx
	movslq	-4(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdx
	callq	Logp_cvec
	movslq	-4(%rbp), %rax
	addss	-864(%rbp,%rax,4), %xmm0
	movss	%xmm0, -864(%rbp,%rax,4)
# %bb.8:                                #   in Loop: Header=BB296_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_3
.LBB296_9:
	leaq	-864(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	LogNorm
	jmp	.LBB296_18
.LBB296_10:
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB296_17
# %bb.11:
	cmpl	$1, -12(%rbp)
	jle	.LBB296_17
# %bb.12:
	movl	$0, -4(%rbp)
.LBB296_13:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB296_16
# %bb.14:                               #   in Loop: Header=BB296_13 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movslq	-4(%rbp), %rax
	movss	%xmm0, -864(%rbp,%rax,4)
# %bb.15:                               #   in Loop: Header=BB296_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_13
.LBB296_16:
	leaq	-864(%rbp), %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
.LBB296_17:
	jmp	.LBB296_18
.LBB296_18:
	movq	-24(%rbp), %rdi
	movl	Alphabet_size, %esi
	callq	FSum
	movss	%xmm0, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB296_19:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_21 Depth 2
	movl	-8(%rbp), %eax
	cmpl	Alphabet_size, %eax
	jge	.LBB296_26
# %bb.20:                               #   in Loop: Header=BB296_19 Depth=1
	xorps	%xmm0, %xmm0
	movss	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB296_21:                             #   Parent Loop BB296_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB296_24
# %bb.22:                               #   in Loop: Header=BB296_21 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movl	Alphabet_size, %esi
	callq	FSum
	movss	%xmm0, -36(%rbp)
	movslq	-4(%rbp), %rax
	movss	-864(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$80, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm1
	mulss	%xmm1, %xmm0
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	addss	-36(%rbp), %xmm1
	divss	%xmm1, %xmm0
	addss	-16(%rbp), %xmm0
	movss	%xmm0, -16(%rbp)
# %bb.23:                               #   in Loop: Header=BB296_21 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_21
.LBB296_24:                             #   in Loop: Header=BB296_19 Depth=1
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.25:                               #   in Loop: Header=BB296_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_19
.LBB296_26:
	movq	-24(%rbp), %rdi
	movl	Alphabet_size, %esi
	callq	FNorm
	cmpq	$0, -48(%rbp)
	je	.LBB296_32
# %bb.27:
	movl	$0, -4(%rbp)
.LBB296_28:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB296_31
# %bb.29:                               #   in Loop: Header=BB296_28 Depth=1
	movslq	-4(%rbp), %rax
	movss	-864(%rbp,%rax,4), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.30:                               #   in Loop: Header=BB296_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_28
.LBB296_31:
	jmp	.LBB296_32
.LBB296_32:
	addq	$864, %rsp              # imm = 0x360
	popq	%rbp
	retq
.Lfunc_end296:
	.size	P7PriorifyEmissionVector, .Lfunc_end296-P7PriorifyEmissionVector
	.cfi_endproc
                                        # -- End function
	.globl	revcomp                 # -- Begin function revcomp
	.p2align	4, 0x90
	.type	revcomp,@function
revcomp:                                # @revcomp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB297_2
# %bb.1:
	movq	$0, -32(%rbp)
	jmp	.LBB297_29
.LBB297_2:
	cmpq	$0, -40(%rbp)
	jne	.LBB297_4
# %bb.3:
	movq	$0, -32(%rbp)
	jmp	.LBB297_29
.LBB297_4:
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	StrReverse
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB297_5:                              # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB297_28
# %bb.6:                                #   in Loop: Header=BB297_5 Depth=1
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movsbl	-1(%rbp), %edi
	callq	sre_toupper
	movb	%al, -1(%rbp)
	movsbl	-1(%rbp), %eax
	addl	$-65, %eax
	movl	%eax, %ecx
	subl	$24, %ecx
	ja	.LBB297_23
# %bb.7:                                #   in Loop: Header=BB297_5 Depth=1
	movq	.LJTI297_0(,%rax,8), %rax
	jmpq	*%rax
.LBB297_8:                              #   in Loop: Header=BB297_5 Depth=1
	movb	$84, -1(%rbp)
	jmp	.LBB297_24
.LBB297_9:                              #   in Loop: Header=BB297_5 Depth=1
	movb	$71, -1(%rbp)
	jmp	.LBB297_24
.LBB297_10:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$67, -1(%rbp)
	jmp	.LBB297_24
.LBB297_11:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$65, -1(%rbp)
	jmp	.LBB297_24
.LBB297_12:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$65, -1(%rbp)
	jmp	.LBB297_24
.LBB297_13:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$89, -1(%rbp)
	jmp	.LBB297_24
.LBB297_14:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$82, -1(%rbp)
	jmp	.LBB297_24
.LBB297_15:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$75, -1(%rbp)
	jmp	.LBB297_24
.LBB297_16:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$77, -1(%rbp)
	jmp	.LBB297_24
.LBB297_17:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$83, -1(%rbp)
	jmp	.LBB297_24
.LBB297_18:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$87, -1(%rbp)
	jmp	.LBB297_24
.LBB297_19:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$68, -1(%rbp)
	jmp	.LBB297_24
.LBB297_20:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$72, -1(%rbp)
	jmp	.LBB297_24
.LBB297_21:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$86, -1(%rbp)
	jmp	.LBB297_24
.LBB297_22:                             #   in Loop: Header=BB297_5 Depth=1
	movb	$66, -1(%rbp)
	jmp	.LBB297_24
.LBB297_23:                             #   in Loop: Header=BB297_5 Depth=1
	jmp	.LBB297_24
.LBB297_24:                             #   in Loop: Header=BB297_5 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB297_26
# %bb.25:                               #   in Loop: Header=BB297_5 Depth=1
	movsbl	-1(%rbp), %edi
	callq	sre_tolower
	movb	%al, -1(%rbp)
.LBB297_26:                             #   in Loop: Header=BB297_5 Depth=1
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.27:                               #   in Loop: Header=BB297_5 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB297_5
.LBB297_28:
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB297_29:
	movq	-32(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end297:
	.size	revcomp, .Lfunc_end297-revcomp
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI297_0:
	.quad	.LBB297_8
	.quad	.LBB297_21
	.quad	.LBB297_9
	.quad	.LBB297_20
	.quad	.LBB297_23
	.quad	.LBB297_23
	.quad	.LBB297_10
	.quad	.LBB297_19
	.quad	.LBB297_23
	.quad	.LBB297_23
	.quad	.LBB297_16
	.quad	.LBB297_23
	.quad	.LBB297_15
	.quad	.LBB297_23
	.quad	.LBB297_23
	.quad	.LBB297_23
	.quad	.LBB297_23
	.quad	.LBB297_13
	.quad	.LBB297_17
	.quad	.LBB297_11
	.quad	.LBB297_12
	.quad	.LBB297_22
	.quad	.LBB297_18
	.quad	.LBB297_23
	.quad	.LBB297_14
                                        # -- End function
	.text
	.globl	rkcomp                  # -- Begin function rkcomp
	.p2align	4, 0x90
	.type	rkcomp,@function
rkcomp:                                 # @rkcomp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	$0, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -28(%rbp)
	cltq
	cmpq	$16, %rax
	jbe	.LBB298_2
# %bb.1:
	movq	$0, -24(%rbp)
	jmp	.LBB298_13
.LBB298_2:
	leaq	-64(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	seqencode
	cmpl	$0, %eax
	jne	.LBB298_4
# %bb.3:
	movq	$0, -24(%rbp)
	jmp	.LBB298_13
.LBB298_4:
	movl	$0, -4(%rbp)
.LBB298_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB298_8
# %bb.6:                                #   in Loop: Header=BB298_5 Depth=1
	movq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rax, -16(%rbp)
	movslq	-4(%rbp), %rax
	movsbq	-64(%rbp,%rax), %rax
	orq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.7:                                #   in Loop: Header=BB298_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_5
.LBB298_8:
	jmp	.LBB298_9
.LBB298_9:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpq	$16, %rax
	jae	.LBB298_12
# %bb.10:                               #   in Loop: Header=BB298_9 Depth=1
	movq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	orq	$15, %rax
	movq	%rax, -16(%rbp)
# %bb.11:                               #   in Loop: Header=BB298_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_9
.LBB298_12:
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB298_13:
	movq	-24(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end298:
	.size	rkcomp, .Lfunc_end298-rkcomp
	.cfi_endproc
                                        # -- End function
	.globl	rkseq                   # -- Begin function rkseq
	.p2align	4, 0x90
	.type	rkseq,@function
rkseq:                                  # @rkseq
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -8(%rbp)
	movq	$0, -16(%rbp)
.LBB299_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$16, -16(%rbp)
	jae	.LBB299_6
# %bb.2:                                #   in Loop: Header=BB299_1 Depth=1
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB299_4
# %bb.3:
	jmp	.LBB299_7
.LBB299_4:                              #   in Loop: Header=BB299_1 Depth=1
	movq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movsbq	(%rax,%rcx), %rax
	orq	-8(%rbp), %rax
	movq	%rax, -8(%rbp)
# %bb.5:                                #   in Loop: Header=BB299_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB299_1
.LBB299_6:                              # %.loopexit
	jmp	.LBB299_7
.LBB299_7:
	jmp	.LBB299_8
.LBB299_8:                              # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movsbl	15(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB299_12
# %bb.9:                                #   in Loop: Header=BB299_8 Depth=1
	movq	-48(%rbp), %rax
	andq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jne	.LBB299_11
# %bb.10:
	movq	-24(%rbp), %rax
	movl	%eax, -28(%rbp)
	jmp	.LBB299_19
.LBB299_11:                             #   in Loop: Header=BB299_8 Depth=1
	movq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movsbq	16(%rax,%rcx), %rax
	orq	-8(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB299_8
.LBB299_12:
	movq	$0, -16(%rbp)
.LBB299_13:                             # =>This Inner Loop Header: Depth=1
	cmpq	$16, -16(%rbp)
	jae	.LBB299_18
# %bb.14:                               #   in Loop: Header=BB299_13 Depth=1
	movq	-8(%rbp), %rax
	orq	$15, %rax
	movq	%rax, -8(%rbp)
	movq	-48(%rbp), %rax
	andq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jne	.LBB299_16
# %bb.15:
	movq	-24(%rbp), %rax
	movl	%eax, -28(%rbp)
	jmp	.LBB299_19
.LBB299_16:                             #   in Loop: Header=BB299_13 Depth=1
	movq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
# %bb.17:                               #   in Loop: Header=BB299_13 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB299_13
.LBB299_18:
	movl	$-1, -28(%rbp)
.LBB299_19:
	movl	-28(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end299:
	.size	rkseq, .Lfunc_end299-rkseq
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function ReadSELEX
.LCPI300_0:
	.long	1065353216              # float 1
	.text
	.globl	ReadSELEX
	.p2align	4, 0x90
	.type	ReadSELEX,@function
ReadSELEX:                              # @ReadSELEX
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$8456, %rsp             # imm = 0x2108
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, -152(%rbp)
	movl	$0, -92(%rbp)
	movq	$0, -80(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -132(%rbp)
	movq	-152(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB300_2
# %bb.1:
	movq	$0, -160(%rbp)
	jmp	.LBB300_274
.LBB300_2:
	movq	-152(%rbp), %rax
	cmpl	$0, 48(%rax)
	jne	.LBB300_4
# %bb.3:
	movq	-152(%rbp), %rax
	cmpl	$0, 52(%rax)
	je	.LBB300_5
.LBB300_4:
	movabsq	$.L.str.699, %rdi
	movb	$0, %al
	callq	Die
.LBB300_5:
	leaq	-272(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -128(%rbp)
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	InitAinfo
.LBB300_6:                              # =>This Inner Loop Header: Depth=1
	leaq	-4368(%rbp), %rdi
	movq	-128(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB300_8
# %bb.7:
	movl	$2, squid_errno
	movq	$0, -160(%rbp)
	jmp	.LBB300_274
.LBB300_8:                              #   in Loop: Header=BB300_6 Depth=1
	leaq	-4368(%rbp), %rsi
	leaq	-8464(%rbp), %rdi
	callq	strcpy
	movsbl	-4368(%rbp), %eax
	cmpl	$35, %eax
	jne	.LBB300_15
# %bb.9:                                #   in Loop: Header=BB300_6 Depth=1
	movabsq	$.L.str.1.700, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_11
# %bb.10:                               #   in Loop: Header=BB300_6 Depth=1
	movl	$1, -136(%rbp)
	jmp	.LBB300_14
.LBB300_11:                             #   in Loop: Header=BB300_6 Depth=1
	movabsq	$.L.str.2.701, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_13
# %bb.12:                               #   in Loop: Header=BB300_6 Depth=1
	movl	$1, -132(%rbp)
.LBB300_13:                             #   in Loop: Header=BB300_6 Depth=1
	jmp	.LBB300_14
.LBB300_14:                             #   in Loop: Header=BB300_6 Depth=1
	jmp	.LBB300_15
.LBB300_15:                             #   in Loop: Header=BB300_6 Depth=1
	jmp	.LBB300_16
.LBB300_16:                             #   in Loop: Header=BB300_6 Depth=1
	movabsq	$.L.str.3.702, %rsi
	leaq	-8464(%rbp), %rdi
	callq	strtok
	movb	$1, %cl
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	je	.LBB300_18
# %bb.17:                               #   in Loop: Header=BB300_6 Depth=1
	movabsq	$commentsyms, %rdi
	movq	-64(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	setne	%cl
.LBB300_18:                             #   in Loop: Header=BB300_6 Depth=1
	testb	$1, %cl
	jne	.LBB300_6
# %bb.19:
	movl	$0, -68(%rbp)
	movl	$0, -144(%rbp)
.LBB300_20:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_25 Depth 2
                                        #       Child Loop BB300_38 Depth 3
                                        #       Child Loop BB300_45 Depth 3
                                        #     Child Loop BB300_70 Depth 2
	movq	-128(%rbp), %rdi
	callq	feof
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB300_21
	jmp	.LBB300_78
.LBB300_21:                             #   in Loop: Header=BB300_20 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB300_23
# %bb.22:                               #   in Loop: Header=BB300_20 Depth=1
	movabsq	$.L.str.4.703, %rdi
	movl	$151, %esi
	movl	$8, %edx
	callq	sre_malloc
	movq	%rax, -80(%rbp)
	jmp	.LBB300_24
.LBB300_23:                             #   in Loop: Header=BB300_20 Depth=1
	movabsq	$.L.str.4.703, %rdi
	movq	-80(%rbp), %rdx
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	movl	$153, %esi
	callq	sre_realloc
	movq	%rax, -80(%rbp)
.LBB300_24:                             #   in Loop: Header=BB300_20 Depth=1
	movq	-80(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$4097, (%rax,%rcx,8)    # imm = 0x1001
	movq	-80(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$-1, 4(%rax,%rcx,8)
	movl	$0, -84(%rbp)
.LBB300_25:                             #   Parent Loop BB300_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_38 Depth 3
                                        #       Child Loop BB300_45 Depth 3
	cmpq	$0, -64(%rbp)
	je	.LBB300_64
# %bb.26:                               #   in Loop: Header=BB300_25 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB300_31
# %bb.27:                               #   in Loop: Header=BB300_25 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB300_29
# %bb.28:                               #   in Loop: Header=BB300_25 Depth=2
	movabsq	$.L.str.4.703, %rdi
	movl	$164, %esi
	movl	$360, %edx              # imm = 0x168
	callq	sre_malloc
	movq	-40(%rbp), %rcx
	movq	%rax, 40(%rcx)
	jmp	.LBB300_30
.LBB300_29:                             #   in Loop: Header=BB300_25 Depth=2
	movabsq	$.L.str.4.703, %rdi
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdx
	movl	-84(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$360, %rax, %rcx        # imm = 0x168
	movl	$166, %esi
	callq	sre_realloc
	movq	-40(%rbp), %rcx
	movq	%rax, 40(%rcx)
.LBB300_30:                             #   in Loop: Header=BB300_25 Depth=2
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	$0, (%rax)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-84(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-64(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
	jmp	.LBB300_34
.LBB300_31:                             #   in Loop: Header=BB300_25 Depth=2
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-84(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	addq	$4, %rdi
	movq	-64(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB300_33
# %bb.32:                               #   in Loop: Header=BB300_25 Depth=2
	movl	$1, -144(%rbp)
.LBB300_33:                             #   in Loop: Header=BB300_25 Depth=2
	jmp	.LBB300_34
.LBB300_34:                             #   in Loop: Header=BB300_25 Depth=2
	movabsq	$.L.str.3.702, %rsi
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB300_44
# %bb.35:                               #   in Loop: Header=BB300_25 Depth=2
	leaq	-8464(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rax, %rcx
	movq	-80(%rbp), %rax
	movslq	-68(%rbp), %rdx
	movslq	(%rax,%rdx,8), %rax
	cmpq	%rax, %rcx
	jge	.LBB300_37
# %bb.36:                               #   in Loop: Header=BB300_25 Depth=2
	leaq	-8464(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rax, %rcx
	movq	-80(%rbp), %rax
	movslq	-68(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,8)
.LBB300_37:                             #   in Loop: Header=BB300_25 Depth=2
	leaq	-4368(%rbp), %rbx
	movq	%rbx, %rdi
	callq	strlen
	addq	%rax, %rbx
	addq	$-1, %rbx
	movq	%rbx, -48(%rbp)
.LBB300_38:                             #   Parent Loop BB300_20 Depth=1
                                        #     Parent Loop BB300_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movabsq	$.L.str.3.702, %rdi
	movq	-48(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB300_41
# %bb.39:                               #   in Loop: Header=BB300_38 Depth=3
	jmp	.LBB300_40
.LBB300_40:                             #   in Loop: Header=BB300_38 Depth=3
	movq	-48(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB300_38
.LBB300_41:                             #   in Loop: Header=BB300_25 Depth=2
	leaq	-4368(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rax, %rcx
	movq	-80(%rbp), %rax
	movslq	-68(%rbp), %rdx
	movslq	4(%rax,%rdx,8), %rax
	cmpq	%rax, %rcx
	jle	.LBB300_43
# %bb.42:                               #   in Loop: Header=BB300_25 Depth=2
	leaq	-4368(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rax, %rcx
	movq	-80(%rbp), %rax
	movslq	-68(%rbp), %rdx
	movl	%ecx, 4(%rax,%rdx,8)
.LBB300_43:                             #   in Loop: Header=BB300_25 Depth=2
	jmp	.LBB300_44
.LBB300_44:                             #   in Loop: Header=BB300_25 Depth=2
	jmp	.LBB300_45
.LBB300_45:                             #   Parent Loop BB300_20 Depth=1
                                        #     Parent Loop BB300_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leaq	-4368(%rbp), %rdi
	movq	-128(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB300_47
# %bb.46:                               #   in Loop: Header=BB300_25 Depth=2
	movq	$0, -64(%rbp)
	jmp	.LBB300_63
.LBB300_47:                             #   in Loop: Header=BB300_45 Depth=3
	movabsq	$.L.str.5.704, %r14
	leaq	-4368(%rbp), %rbx
	leaq	-8464(%rbp), %rdi
	movq	%rbx, %rsi
	callq	strcpy
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_49
# %bb.48:                               #   in Loop: Header=BB300_45 Depth=3
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movl	-84(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %ecx
	orl	$512, %ecx              # imm = 0x200
	movl	%ecx, (%rax)
	jmp	.LBB300_58
.LBB300_49:                             #   in Loop: Header=BB300_45 Depth=3
	movabsq	$.L.str.6.705, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_51
# %bb.50:                               #   in Loop: Header=BB300_45 Depth=3
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movl	-84(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %ecx
	orl	$1024, %ecx             # imm = 0x400
	movl	%ecx, (%rax)
	jmp	.LBB300_57
.LBB300_51:                             #   in Loop: Header=BB300_45 Depth=3
	movabsq	$.L.str.1.700, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_53
# %bb.52:                               #   in Loop: Header=BB300_45 Depth=3
	movl	$1, -136(%rbp)
	jmp	.LBB300_56
.LBB300_53:                             #   in Loop: Header=BB300_45 Depth=3
	movabsq	$.L.str.2.701, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_55
# %bb.54:                               #   in Loop: Header=BB300_45 Depth=3
	movl	$1, -132(%rbp)
.LBB300_55:                             #   in Loop: Header=BB300_45 Depth=3
	jmp	.LBB300_56
.LBB300_56:                             #   in Loop: Header=BB300_45 Depth=3
	jmp	.LBB300_57
.LBB300_57:                             #   in Loop: Header=BB300_45 Depth=3
	jmp	.LBB300_58
.LBB300_58:                             #   in Loop: Header=BB300_45 Depth=3
	movabsq	$.L.str.3.702, %rsi
	leaq	-8464(%rbp), %rdi
	callq	strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_60
# %bb.59:                               #   in Loop: Header=BB300_25 Depth=2
	jmp	.LBB300_63
.LBB300_60:                             #   in Loop: Header=BB300_45 Depth=3
	jmp	.LBB300_61
.LBB300_61:                             #   in Loop: Header=BB300_45 Depth=3
	movabsq	$commentsyms, %rdi
	movq	-64(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB300_45
# %bb.62:                               # %.loopexit
                                        #   in Loop: Header=BB300_25 Depth=2
	jmp	.LBB300_63
.LBB300_63:                             #   in Loop: Header=BB300_25 Depth=2
	jmp	.LBB300_25
.LBB300_64:                             #   in Loop: Header=BB300_20 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB300_66
# %bb.65:                               #   in Loop: Header=BB300_20 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB300_69
.LBB300_66:                             #   in Loop: Header=BB300_20 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-92(%rbp), %eax
	je	.LBB300_68
# %bb.67:                               #   in Loop: Header=BB300_20 Depth=1
	movabsq	$.L.str.7.706, %rdi
	movb	$0, %al
	callq	Die
.LBB300_68:                             #   in Loop: Header=BB300_20 Depth=1
	jmp	.LBB300_69
.LBB300_69:                             #   in Loop: Header=BB300_20 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB300_70:                             #   Parent Loop BB300_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-4368(%rbp), %rdi
	movq	-128(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB300_72
# %bb.71:                               #   in Loop: Header=BB300_20 Depth=1
	movq	$0, -64(%rbp)
	jmp	.LBB300_77
.LBB300_72:                             #   in Loop: Header=BB300_70 Depth=2
	leaq	-4368(%rbp), %rsi
	leaq	-8464(%rbp), %rdi
	callq	strcpy
# %bb.73:                               #   in Loop: Header=BB300_70 Depth=2
	movabsq	$.L.str.3.702, %rsi
	leaq	-8464(%rbp), %rdi
	callq	strtok
	movb	$1, %cl
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	je	.LBB300_75
# %bb.74:                               #   in Loop: Header=BB300_70 Depth=2
	movabsq	$commentsyms, %rdi
	movq	-64(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	setne	%cl
.LBB300_75:                             #   in Loop: Header=BB300_70 Depth=2
	testb	$1, %cl
	jne	.LBB300_70
# %bb.76:                               # %.loopexit2
                                        #   in Loop: Header=BB300_20 Depth=1
	jmp	.LBB300_77
.LBB300_77:                             #   in Loop: Header=BB300_20 Depth=1
	jmp	.LBB300_20
.LBB300_78:
	movl	$0, -72(%rbp)
	movl	$0, -52(%rbp)
.LBB300_79:                             # =>This Inner Loop Header: Depth=1
	movl	-52(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB300_82
# %bb.80:                               #   in Loop: Header=BB300_79 Depth=1
	movq	-80(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movl	4(%rax,%rcx,8), %eax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,8), %eax
	addl	$1, %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.81:                               #   in Loop: Header=BB300_79 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB300_79
.LBB300_82:
	movq	-128(%rbp), %rdi
	callq	rewind
	movabsq	$.L.str.4.703, %rdi
	movslq	-92(%rbp), %rdx
	shlq	$3, %rdx
	movl	$247, %esi
	callq	sre_malloc
	movq	%rax, -112(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB300_84
# %bb.83:
	movabsq	$.L.str.4.703, %rdi
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$249, %esi
	callq	sre_malloc
	movq	-40(%rbp), %rcx
	movq	%rax, 24(%rcx)
.LBB300_84:
	cmpl	$0, -132(%rbp)
	je	.LBB300_86
# %bb.85:
	movabsq	$.L.str.4.703, %rdi
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$251, %esi
	callq	sre_malloc
	movq	-40(%rbp), %rcx
	movq	%rax, 32(%rcx)
.LBB300_86:
	movl	$0, -100(%rbp)
.LBB300_87:                             # =>This Inner Loop Header: Depth=1
	movl	-100(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB300_94
# %bb.88:                               #   in Loop: Header=BB300_87 Depth=1
	movabsq	$.L.str.4.703, %rdi
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$257, %esi              # imm = 0x101
	callq	sre_malloc
	movq	-112(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-100(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB300_90
# %bb.89:                               #   in Loop: Header=BB300_87 Depth=1
	movabsq	$.L.str.4.703, %rdi
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$259, %esi              # imm = 0x103
	callq	sre_malloc
	movq	-40(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-100(%rbp), %rdx
	imulq	$360, %rdx, %rdx        # imm = 0x168
	addq	%rdx, %rcx
	movq	%rax, 344(%rcx)
.LBB300_90:                             #   in Loop: Header=BB300_87 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-100(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB300_92
# %bb.91:                               #   in Loop: Header=BB300_87 Depth=1
	movabsq	$.L.str.4.703, %rdi
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$261, %esi              # imm = 0x105
	callq	sre_malloc
	movq	-40(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-100(%rbp), %rdx
	imulq	$360, %rdx, %rdx        # imm = 0x168
	addq	%rdx, %rcx
	movq	%rax, 352(%rcx)
.LBB300_92:                             #   in Loop: Header=BB300_87 Depth=1
	jmp	.LBB300_93
.LBB300_93:                             #   in Loop: Header=BB300_87 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB300_87
.LBB300_94:
	movabsq	$.L.str.4.703, %rdi
	movl	-72(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-92(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movslq	-92(%rbp), %rdx
	shlq	$2, %rdx
	movl	$266, %esi              # imm = 0x10A
	callq	sre_malloc
	movss	.LCPI300_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-40(%rbp), %rax
	movq	16(%rax), %rdi
	movl	-92(%rbp), %esi
	callq	FSet
	movl	$0, -88(%rbp)
.LBB300_95:                             # =>This Inner Loop Header: Depth=1
	leaq	-4368(%rbp), %rdi
	movq	-128(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB300_97
# %bb.96:                               #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.7.706, %rdi
	movb	$0, %al
	callq	Die
.LBB300_97:                             #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.3.702, %r14
	leaq	-8464(%rbp), %rbx
	leaq	-4368(%rbp), %rsi
	movq	%rbx, %rdi
	callq	strcpy
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_100
# %bb.98:                               #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_99
.LBB300_99:                             # %.backedge1
                                        #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_95
.LBB300_100:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.8.707, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_103
# %bb.101:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.9.708, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB300_103
# %bb.102:                              #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	Strdup
	movq	-40(%rbp), %rcx
	movq	%rax, 72(%rcx)
	jmp	.LBB300_168
.LBB300_103:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.10.709, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_106
# %bb.104:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.9.708, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB300_106
# %bb.105:                              #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	Strdup
	movq	-40(%rbp), %rcx
	movq	%rax, 48(%rcx)
	jmp	.LBB300_167
.LBB300_106:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.11.710, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_109
# %bb.107:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.9.708, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB300_109
# %bb.108:                              #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	Strdup
	movq	-40(%rbp), %rcx
	movq	%rax, 64(%rcx)
	jmp	.LBB300_166
.LBB300_109:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.12.711, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_112
# %bb.110:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.9.708, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB300_112
# %bb.111:                              #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	Strdup
	movq	-40(%rbp), %rcx
	movq	%rax, 56(%rcx)
	jmp	.LBB300_165
.LBB300_112:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.13.712, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_118
# %bb.113:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.3.702, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_115
# %bb.114:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.14.713, %rdi
	movb	$0, %al
	callq	Die
.LBB300_115:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.3.702, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 96(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_117
# %bb.116:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.14.713, %rdi
	movb	$0, %al
	callq	Die
.LBB300_117:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 100(%rax)
	movq	-40(%rbp), %rax
	movl	(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB300_164
.LBB300_118:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.15.714, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_124
# %bb.119:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.3.702, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_121
# %bb.120:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.16.715, %rdi
	movb	$0, %al
	callq	Die
.LBB300_121:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.3.702, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 80(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_123
# %bb.122:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.16.715, %rdi
	movb	$0, %al
	callq	Die
.LBB300_123:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 84(%rax)
	movq	-40(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB300_163
.LBB300_124:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.17.716, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_130
# %bb.125:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.3.702, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_127
# %bb.126:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.18.717, %rdi
	movb	$0, %al
	callq	Die
.LBB300_127:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.3.702, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 88(%rax)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_129
# %bb.128:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.18.717, %rdi
	movb	$0, %al
	callq	Die
.LBB300_129:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 92(%rax)
	movq	-40(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB300_162
.LBB300_130:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.19.718, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_152
# %bb.131:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.3.702, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_133
# %bb.132:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.20.719, %rdi
	movb	$0, %al
	callq	Die
.LBB300_133:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	40(%rax), %rsi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rsi
	addq	$4, %rsi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB300_135
# %bb.134:                              #   in Loop: Header=BB300_95 Depth=1
	movl	$1, -144(%rbp)
.LBB300_135:                            #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.3.702, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_137
# %bb.136:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.20.719, %rdi
	movb	$0, %al
	callq	Die
.LBB300_137:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	IsReal
	cmpl	$0, %eax
	jne	.LBB300_139
# %bb.138:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.21.720, %rdi
	movb	$0, %al
	callq	Die
.LBB300_139:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-48(%rbp), %rdi
	callq	atof
	movabsq	$.L.str.3.702, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-88(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_141
# %bb.140:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.22.721, %rdi
	movb	$0, %al
	callq	Die
.LBB300_141:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	$2, %edx
	callq	SetSeqinfoString
	movabsq	$.L.str.3.702, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_143
# %bb.142:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.22.721, %rdi
	movb	$0, %al
	callq	Die
.LBB300_143:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	$4, %edx
	callq	SetSeqinfoString
	movabsq	$.L.str.23.722, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_145
# %bb.144:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.22.721, %rdi
	movb	$0, %al
	callq	Die
.LBB300_145:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	$16, %edx
	callq	SetSeqinfoString
	movabsq	$.L.str.23.722, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_147
# %bb.146:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.22.721, %rdi
	movb	$0, %al
	callq	Die
.LBB300_147:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	$32, %edx
	callq	SetSeqinfoString
	movabsq	$.L.str.24.723, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_149
# %bb.148:                              #   in Loop: Header=BB300_95 Depth=1
	movabsq	$.L.str.22.721, %rdi
	movb	$0, %al
	callq	Die
.LBB300_149:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	$256, %edx              # imm = 0x100
	callq	SetSeqinfoString
	movabsq	$.L.str.9.708, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB300_151
# %bb.150:                              #   in Loop: Header=BB300_95 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rdi
	movslq	-88(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB300_151:                            #   in Loop: Header=BB300_95 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB300_161
.LBB300_152:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.1.700, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_154
# %bb.153:
	jmp	.LBB300_169
.LBB300_154:                            #   in Loop: Header=BB300_95 Depth=1
	movq	-64(%rbp), %rdi
	movl	$.L.str.2.701, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_156
# %bb.155:
	jmp	.LBB300_169
.LBB300_156:                            #   in Loop: Header=BB300_95 Depth=1
	movabsq	$commentsyms, %rdi
	movq	-64(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB300_158
# %bb.157:
	jmp	.LBB300_169
.LBB300_158:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_159
.LBB300_159:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_160
.LBB300_160:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_161
.LBB300_161:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_162
.LBB300_162:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_163
.LBB300_163:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_164
.LBB300_164:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_165
.LBB300_165:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_166
.LBB300_166:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_167
.LBB300_167:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_168
.LBB300_168:                            #   in Loop: Header=BB300_95 Depth=1
	jmp	.LBB300_99
.LBB300_169:
	movl	$0, -116(%rbp)
	movl	$0, -52(%rbp)
.LBB300_170:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_172 Depth 2
                                        #       Child Loop BB300_198 Depth 3
                                        #     Child Loop BB300_209 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB300_221
# %bb.171:                              #   in Loop: Header=BB300_170 Depth=1
	movl	$0, -28(%rbp)
.LBB300_172:                            #   Parent Loop BB300_170 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_198 Depth 3
	cmpq	$0, -64(%rbp)
	je	.LBB300_208
# %bb.173:                              #   in Loop: Header=BB300_172 Depth=2
	movq	-64(%rbp), %rdi
	movl	$.L.str.1.700, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_177
# %bb.174:                              #   in Loop: Header=BB300_172 Depth=2
	movl	$46, %eax
	leaq	-4368(%rbp), %r14
	movq	-40(%rbp), %rax
	movq	24(%rax), %rbx
	movl	-116(%rbp), %r15d
	movq	-64(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	(%rcx,%rdx,8), %r8d
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	4(%rcx,%rdx,8), %r9d
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%eax, %edx
	movq	%r14, %rcx
	movl	$46, (%rsp)
	callq	copy_alignment_line
	cmpl	$0, %eax
	jne	.LBB300_176
# %bb.175:                              #   in Loop: Header=BB300_172 Depth=2
	movabsq	$.L.str.25.724, %rdi
	movb	$0, %al
	callq	Die
.LBB300_176:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_197
.LBB300_177:                            #   in Loop: Header=BB300_172 Depth=2
	movq	-64(%rbp), %rdi
	movl	$.L.str.2.701, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_181
# %bb.178:                              #   in Loop: Header=BB300_172 Depth=2
	movl	$46, %eax
	leaq	-4368(%rbp), %r14
	movq	-40(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-116(%rbp), %r15d
	movq	-64(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	(%rcx,%rdx,8), %r8d
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	4(%rcx,%rdx,8), %r9d
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%eax, %edx
	movq	%r14, %rcx
	movl	$46, (%rsp)
	callq	copy_alignment_line
	cmpl	$0, %eax
	jne	.LBB300_180
# %bb.179:                              #   in Loop: Header=BB300_172 Depth=2
	movabsq	$.L.str.26.725, %rdi
	movb	$0, %al
	callq	Die
.LBB300_180:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_196
.LBB300_181:                            #   in Loop: Header=BB300_172 Depth=2
	movq	-64(%rbp), %rdi
	movl	$.L.str.5.704, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_185
# %bb.182:                              #   in Loop: Header=BB300_172 Depth=2
	movl	$46, %eax
	leaq	-4368(%rbp), %r14
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movl	-28(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	344(%rax), %rbx
	movl	-116(%rbp), %r15d
	movq	-64(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	(%rcx,%rdx,8), %r8d
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	4(%rcx,%rdx,8), %r9d
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%eax, %edx
	movq	%r14, %rcx
	movl	$46, (%rsp)
	callq	copy_alignment_line
	cmpl	$0, %eax
	jne	.LBB300_184
# %bb.183:                              #   in Loop: Header=BB300_172 Depth=2
	movabsq	$.L.str.27.726, %rdi
	movb	$0, %al
	callq	Die
.LBB300_184:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_195
.LBB300_185:                            #   in Loop: Header=BB300_172 Depth=2
	movq	-64(%rbp), %rdi
	movl	$.L.str.6.705, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_189
# %bb.186:                              #   in Loop: Header=BB300_172 Depth=2
	movl	$46, %eax
	leaq	-4368(%rbp), %r14
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movl	-28(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	352(%rax), %rbx
	movl	-116(%rbp), %r15d
	movq	-64(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	(%rcx,%rdx,8), %r8d
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	4(%rcx,%rdx,8), %r9d
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%eax, %edx
	movq	%r14, %rcx
	movl	$46, (%rsp)
	callq	copy_alignment_line
	cmpl	$0, %eax
	jne	.LBB300_188
# %bb.187:                              #   in Loop: Header=BB300_172 Depth=2
	movabsq	$.L.str.28.727, %rdi
	movb	$0, %al
	callq	Die
.LBB300_188:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_194
.LBB300_189:                            #   in Loop: Header=BB300_172 Depth=2
	movabsq	$.L.str.29.728, %rsi
	movq	-64(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB300_193
# %bb.190:                              #   in Loop: Header=BB300_172 Depth=2
	movl	$46, %eax
	leaq	-4368(%rbp), %r14
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rbx
	movl	-116(%rbp), %r15d
	movq	-64(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	(%rcx,%rdx,8), %r8d
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	4(%rcx,%rdx,8), %r9d
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%eax, %edx
	movq	%r14, %rcx
	movl	$46, (%rsp)
	callq	copy_alignment_line
	cmpl	$0, %eax
	jne	.LBB300_192
# %bb.191:                              #   in Loop: Header=BB300_172 Depth=2
	movabsq	$.L.str.30.729, %rdi
	movb	$0, %al
	callq	Die
.LBB300_192:                            #   in Loop: Header=BB300_172 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB300_193:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_194
.LBB300_194:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_195
.LBB300_195:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_196
.LBB300_196:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_197
.LBB300_197:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_198
.LBB300_198:                            #   Parent Loop BB300_170 Depth=1
                                        #     Parent Loop BB300_172 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leaq	-4368(%rbp), %rdi
	movq	$0, -64(%rbp)
	movq	-128(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB300_200
# %bb.199:                              #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_207
.LBB300_200:                            #   in Loop: Header=BB300_198 Depth=3
	movabsq	$.L.str.3.702, %r14
	leaq	-8464(%rbp), %rbx
	leaq	-4368(%rbp), %rsi
	movq	%rbx, %rdi
	callq	strcpy
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_202
# %bb.201:                              #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_207
.LBB300_202:                            #   in Loop: Header=BB300_198 Depth=3
	movabsq	$.L.str.29.728, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_204
# %bb.203:                              #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_207
.LBB300_204:                            #   in Loop: Header=BB300_198 Depth=3
	movabsq	$commentsyms, %rdi
	movq	-64(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB300_206
# %bb.205:                              #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_207
.LBB300_206:                            #   in Loop: Header=BB300_198 Depth=3
	jmp	.LBB300_198
.LBB300_207:                            #   in Loop: Header=BB300_172 Depth=2
	jmp	.LBB300_172
.LBB300_208:                            #   in Loop: Header=BB300_170 Depth=1
	movq	-80(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movl	4(%rax,%rcx,8), %eax
	movq	-80(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,8), %eax
	addl	$1, %eax
	addl	-116(%rbp), %eax
	movl	%eax, -116(%rbp)
.LBB300_209:                            #   Parent Loop BB300_170 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-4368(%rbp), %rdi
	movq	-128(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB300_211
# %bb.210:                              #   in Loop: Header=BB300_170 Depth=1
	jmp	.LBB300_219
.LBB300_211:                            #   in Loop: Header=BB300_209 Depth=2
	movabsq	$.L.str.3.702, %r14
	leaq	-8464(%rbp), %rbx
	leaq	-4368(%rbp), %rsi
	movq	%rbx, %rdi
	callq	strcpy
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB300_214
# %bb.212:                              #   in Loop: Header=BB300_209 Depth=2
	jmp	.LBB300_213
.LBB300_213:                            # %.backedge
                                        #   in Loop: Header=BB300_209 Depth=2
	jmp	.LBB300_209
.LBB300_214:                            #   in Loop: Header=BB300_209 Depth=2
	movabsq	$.L.str.29.728, %rsi
	leaq	-4368(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB300_216
# %bb.215:                              #   in Loop: Header=BB300_170 Depth=1
	jmp	.LBB300_219
.LBB300_216:                            #   in Loop: Header=BB300_209 Depth=2
	movabsq	$commentsyms, %rdi
	movq	-64(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB300_218
# %bb.217:                              #   in Loop: Header=BB300_170 Depth=1
	jmp	.LBB300_219
.LBB300_218:                            #   in Loop: Header=BB300_209 Depth=2
	jmp	.LBB300_213
.LBB300_219:                            #   in Loop: Header=BB300_170 Depth=1
	jmp	.LBB300_220
.LBB300_220:                            #   in Loop: Header=BB300_170 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB300_170
.LBB300_221:
	movl	$0, -28(%rbp)
.LBB300_222:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_225 Depth 2
                                        #     Child Loop BB300_237 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB300_249
# %bb.223:                              #   in Loop: Header=BB300_222 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB300_235
# %bb.224:                              #   in Loop: Header=BB300_222 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -56(%rbp)
.LBB300_225:                            #   Parent Loop BB300_222 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB300_234
# %bb.226:                              #   in Loop: Header=BB300_225 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB300_232
# %bb.227:                              #   in Loop: Header=BB300_225 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB300_232
# %bb.228:                              #   in Loop: Header=BB300_225 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB300_232
# %bb.229:                              #   in Loop: Header=BB300_225 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB300_232
# %bb.230:                              #   in Loop: Header=BB300_225 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB300_232
# %bb.231:                              #   in Loop: Header=BB300_225 Depth=2
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	344(%rax), %rax
	movslq	-56(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-40(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	imulq	$360, %rdx, %rdx        # imm = 0x168
	addq	%rdx, %rcx
	movq	344(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB300_232:                            #   in Loop: Header=BB300_225 Depth=2
	jmp	.LBB300_233
.LBB300_233:                            #   in Loop: Header=BB300_225 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB300_225
.LBB300_234:                            #   in Loop: Header=BB300_222 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	344(%rax), %rax
	movslq	-96(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB300_235:                            #   in Loop: Header=BB300_222 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB300_247
# %bb.236:                              #   in Loop: Header=BB300_222 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -56(%rbp)
.LBB300_237:                            #   Parent Loop BB300_222 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB300_246
# %bb.238:                              #   in Loop: Header=BB300_237 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB300_244
# %bb.239:                              #   in Loop: Header=BB300_237 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB300_244
# %bb.240:                              #   in Loop: Header=BB300_237 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB300_244
# %bb.241:                              #   in Loop: Header=BB300_237 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB300_244
# %bb.242:                              #   in Loop: Header=BB300_237 Depth=2
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB300_244
# %bb.243:                              #   in Loop: Header=BB300_237 Depth=2
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	352(%rax), %rax
	movslq	-56(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-40(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	imulq	$360, %rdx, %rdx        # imm = 0x168
	addq	%rdx, %rcx
	movq	352(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB300_244:                            #   in Loop: Header=BB300_237 Depth=2
	jmp	.LBB300_245
.LBB300_245:                            #   in Loop: Header=BB300_237 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB300_237
.LBB300_246:                            #   in Loop: Header=BB300_222 Depth=1
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	352(%rax), %rax
	movslq	-96(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB300_247:                            #   in Loop: Header=BB300_222 Depth=1
	jmp	.LBB300_248
.LBB300_248:                            #   in Loop: Header=BB300_222 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB300_222
.LBB300_249:
	movq	-40(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB300_251
# %bb.250:
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-72(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB300_251:
	movq	-40(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB300_253
# %bb.252:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-72(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB300_253:
	movl	$0, -28(%rbp)
.LBB300_254:                            # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB300_257
# %bb.255:                              #   in Loop: Header=BB300_254 Depth=1
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.256:                              #   in Loop: Header=BB300_254 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB300_254
.LBB300_257:
	movl	$0, -28(%rbp)
.LBB300_258:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_260 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB300_271
# %bb.259:                              #   in Loop: Header=BB300_258 Depth=1
	movl	$0, -140(%rbp)
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
.LBB300_260:                            #   Parent Loop BB300_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB300_269
# %bb.261:                              #   in Loop: Header=BB300_260 Depth=2
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB300_267
# %bb.262:                              #   in Loop: Header=BB300_260 Depth=2
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	je	.LBB300_267
# %bb.263:                              #   in Loop: Header=BB300_260 Depth=2
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB300_267
# %bb.264:                              #   in Loop: Header=BB300_260 Depth=2
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB300_267
# %bb.265:                              #   in Loop: Header=BB300_260 Depth=2
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	je	.LBB300_267
# %bb.266:                              #   in Loop: Header=BB300_260 Depth=2
	movl	-140(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -140(%rbp)
.LBB300_267:                            #   in Loop: Header=BB300_260 Depth=2
	jmp	.LBB300_268
.LBB300_268:                            #   in Loop: Header=BB300_260 Depth=2
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB300_260
.LBB300_269:                            #   in Loop: Header=BB300_258 Depth=1
	movl	-140(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	imulq	$360, %rdx, %rdx        # imm = 0x168
	addq	%rdx, %rcx
	movl	%eax, 324(%rcx)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %ecx
	orl	$64, %ecx
	movl	%ecx, (%rax)
# %bb.270:                              #   in Loop: Header=BB300_258 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB300_258
.LBB300_271:
	movq	-80(%rbp), %rdi
	callq	free
	cmpl	$0, -144(%rbp)
	je	.LBB300_273
# %bb.272:
	movabsq	$.L.str.31.730, %rdi
	movq	-152(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Warn
.LBB300_273:
	movq	-112(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	MSAFromAINFO
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rdi
	callq	MSAVerifyParse
	movq	-112(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	FreeAlignment
	movq	-168(%rbp), %rax
	movq	%rax, -160(%rbp)
.LBB300_274:
	movq	-160(%rbp), %rax
	addq	$8456, %rsp             # imm = 0x2108
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end300:
	.size	ReadSELEX, .Lfunc_end300-ReadSELEX
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_alignment_line
	.type	copy_alignment_line,@function
copy_alignment_line:                    # @copy_alignment_line
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	16(%rbp), %al
	movq	%rdi, -64(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -36(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB301_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB301_6
# %bb.2:                                #   in Loop: Header=BB301_1 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB301_4
# %bb.3:                                #   in Loop: Header=BB301_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
.LBB301_4:                              #   in Loop: Header=BB301_1 Depth=1
	jmp	.LBB301_5
.LBB301_5:                              #   in Loop: Header=BB301_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_1
.LBB301_6:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB301_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB301_24
# %bb.8:                                #   in Loop: Header=BB301_7 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$9, %eax
	jne	.LBB301_10
# %bb.9:
	movabsq	$.L.str.47.731, %rdi
	movb	$0, %al
	callq	Warn
	movl	$0, -32(%rbp)
	jmp	.LBB301_25
.LBB301_10:                             #   in Loop: Header=BB301_7 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.LBB301_12
# %bb.11:                               #   in Loop: Header=BB301_7 Depth=1
	movb	16(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, (%rcx)
	jmp	.LBB301_20
.LBB301_12:                             #   in Loop: Header=BB301_7 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB301_14
# %bb.13:                               #   in Loop: Header=BB301_7 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$10, %eax
	jne	.LBB301_15
.LBB301_14:                             #   in Loop: Header=BB301_7 Depth=1
	movb	16(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, (%rcx)
	jmp	.LBB301_19
.LBB301_15:                             #   in Loop: Header=BB301_7 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	jne	.LBB301_17
# %bb.16:                               #   in Loop: Header=BB301_7 Depth=1
	movb	16(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, (%rcx)
	jmp	.LBB301_18
.LBB301_17:                             #   in Loop: Header=BB301_7 Depth=1
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movq	-24(%rbp), %rcx
	movb	%al, (%rcx)
.LBB301_18:                             #   in Loop: Header=BB301_7 Depth=1
	jmp	.LBB301_19
.LBB301_19:                             #   in Loop: Header=BB301_7 Depth=1
	jmp	.LBB301_20
.LBB301_20:                             #   in Loop: Header=BB301_7 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB301_22
# %bb.21:                               #   in Loop: Header=BB301_7 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
.LBB301_22:                             #   in Loop: Header=BB301_7 Depth=1
	jmp	.LBB301_23
.LBB301_23:                             #   in Loop: Header=BB301_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_7
.LBB301_24:
	movl	$1, -32(%rbp)
.LBB301_25:
	movl	-32(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end301:
	.size	copy_alignment_line, .Lfunc_end301-copy_alignment_line
	.cfi_endproc
                                        # -- End function
	.globl	WriteSELEX              # -- Begin function WriteSELEX
	.p2align	4, 0x90
	.type	WriteSELEX,@function
WriteSELEX:                             # @WriteSELEX
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movl	$50, %edx
	callq	actually_write_selex
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end302:
	.size	WriteSELEX, .Lfunc_end302-WriteSELEX
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function actually_write_selex
	.type	actually_write_selex,@function
actually_write_selex:                   # @actually_write_selex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$101, %eax
	movslq	%eax, %rdi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -48(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB303_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB303_6
# %bb.2:                                #   in Loop: Header=BB303_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -52(%rbp)
	cmpl	-20(%rbp), %eax
	jle	.LBB303_4
# %bb.3:                                #   in Loop: Header=BB303_1 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB303_4:                              #   in Loop: Header=BB303_1 Depth=1
	jmp	.LBB303_5
.LBB303_5:                              #   in Loop: Header=BB303_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_1
.LBB303_6:
	cmpl	$6, -20(%rbp)
	jge	.LBB303_8
# %bb.7:
	movl	$6, -20(%rbp)
.LBB303_8:
	movl	$0, -4(%rbp)
.LBB303_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	184(%rcx), %eax
	jge	.LBB303_12
# %bb.10:                               #   in Loop: Header=BB303_9 Depth=1
	movabsq	$.L.str.33.734, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	176(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movb	$0, %al
	callq	fprintf
# %bb.11:                               #   in Loop: Header=BB303_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_9
.LBB303_12:
	movq	-16(%rbp), %rax
	cmpl	$0, 184(%rax)
	jle	.LBB303_14
# %bb.13:
	movabsq	$.L.str.9.708, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB303_14:
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB303_16
# %bb.15:
	movabsq	$.L.str.34.735, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB303_16:
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB303_18
# %bb.17:
	movabsq	$.L.str.35.736, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB303_18:
	movq	-16(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB303_20
# %bb.19:
	movabsq	$.L.str.36.737, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB303_20:
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB303_22
# %bb.21:
	movabsq	$.L.str.37.738, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB303_22:
	movq	-16(%rbp), %rax
	cmpl	$0, 160(%rax)
	je	.LBB303_25
# %bb.23:
	movq	-16(%rbp), %rax
	cmpl	$0, 164(%rax)
	je	.LBB303_25
# %bb.24:
	movabsq	$.L.str.38.739, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	136(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	140(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
	jmp	.LBB303_28
.LBB303_25:
	movq	-16(%rbp), %rax
	cmpl	$0, 160(%rax)
	je	.LBB303_27
# %bb.26:
	movabsq	$.L.str.39.740, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	136(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB303_27:
	jmp	.LBB303_28
.LBB303_28:
	movq	-16(%rbp), %rax
	cmpl	$0, 168(%rax)
	je	.LBB303_31
# %bb.29:
	movq	-16(%rbp), %rax
	cmpl	$0, 172(%rax)
	je	.LBB303_31
# %bb.30:
	movabsq	$.L.str.40.741, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	144(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	148(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
	jmp	.LBB303_34
.LBB303_31:
	movq	-16(%rbp), %rax
	cmpl	$0, 168(%rax)
	je	.LBB303_33
# %bb.32:
	movabsq	$.L.str.41.742, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	144(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB303_33:
	jmp	.LBB303_34
.LBB303_34:
	movq	-16(%rbp), %rax
	cmpl	$0, 152(%rax)
	je	.LBB303_37
# %bb.35:
	movq	-16(%rbp), %rax
	cmpl	$0, 156(%rax)
	je	.LBB303_37
# %bb.36:
	movabsq	$.L.str.42.743, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	128(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	132(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
	jmp	.LBB303_40
.LBB303_37:
	movq	-16(%rbp), %rax
	cmpl	$0, 152(%rax)
	je	.LBB303_39
# %bb.38:
	movabsq	$.L.str.43.744, %rsi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	128(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB303_39:
	jmp	.LBB303_40
.LBB303_40:
	movl	$0, -4(%rbp)
.LBB303_41:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB303_52
# %bb.42:                               #   in Loop: Header=BB303_41 Depth=1
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rsi
	movq	(%rax,%rsi,8), %r8
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rsi
	movss	(%rax,%rsi,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB303_45
# %bb.43:                               #   in Loop: Header=BB303_41 Depth=1
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rsi
	cmpq	$0, (%rax,%rsi,8)
	je	.LBB303_45
# %bb.44:                               #   in Loop: Header=BB303_41 Depth=1
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rsi
	movq	(%rax,%rsi,8), %r10
	jmp	.LBB303_46
.LBB303_45:                             #   in Loop: Header=BB303_41 Depth=1
	movabsq	$.L.str.45.745, %r10
	jmp	.LBB303_46
.LBB303_46:                             #   in Loop: Header=BB303_41 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB303_49
# %bb.47:                               #   in Loop: Header=BB303_41 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rsi
	cmpq	$0, (%rax,%rsi,8)
	je	.LBB303_49
# %bb.48:                               #   in Loop: Header=BB303_41 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rsi
	movq	(%rax,%rsi,8), %r11
	jmp	.LBB303_50
.LBB303_49:                             #   in Loop: Header=BB303_41 Depth=1
	movabsq	$.L.str.45.745, %r11
	jmp	.LBB303_50
.LBB303_50:                             #   in Loop: Header=BB303_41 Depth=1
	movabsq	$.L.str.44.746, %rsi
	movabsq	$.L.str.45.745, %r9
	xorl	%eax, %eax
	movq	%r10, (%rsp)
	movl	$0, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	$0, 24(%rsp)
	movq	%r11, 32(%rsp)
	movb	$1, %al
	callq	fprintf
# %bb.51:                               #   in Loop: Header=BB303_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_41
.LBB303_52:
	movabsq	$.L.str.9.708, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -36(%rbp)
.LBB303_53:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_61 Depth 2
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB303_72
# %bb.54:                               #   in Loop: Header=BB303_53 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB303_56
# %bb.55:                               #   in Loop: Header=BB303_53 Depth=1
	movabsq	$.L.str.9.708, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB303_56:                             #   in Loop: Header=BB303_53 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB303_58
# %bb.57:                               #   in Loop: Header=BB303_53 Depth=1
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	72(%rax), %rsi
	movslq	-36(%rbp), %rax
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.46.747, %rsi
	movabsq	$.L.str.1.700, %r8
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB303_58:                             #   in Loop: Header=BB303_53 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB303_60
# %bb.59:                               #   in Loop: Header=BB303_53 Depth=1
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rsi
	movslq	-36(%rbp), %rax
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.46.747, %rsi
	movabsq	$.L.str.2.701, %r8
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB303_60:                             #   in Loop: Header=BB303_53 Depth=1
	movl	$0, -4(%rbp)
.LBB303_61:                             #   Parent Loop BB303_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB303_70
# %bb.62:                               #   in Loop: Header=BB303_61 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-36(%rbp), %rax
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.46.747, %rsi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB303_65
# %bb.63:                               #   in Loop: Header=BB303_61 Depth=2
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB303_65
# %bb.64:                               #   in Loop: Header=BB303_61 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-36(%rbp), %rax
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.46.747, %rsi
	movabsq	$.L.str.5.704, %r8
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB303_65:                             #   in Loop: Header=BB303_61 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB303_68
# %bb.66:                               #   in Loop: Header=BB303_61 Depth=2
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB303_68
# %bb.67:                               #   in Loop: Header=BB303_61 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-36(%rbp), %rax
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.46.747, %rsi
	movabsq	$.L.str.6.705, %r8
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-32(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB303_68:                             #   in Loop: Header=BB303_61 Depth=2
	jmp	.LBB303_69
.LBB303_69:                             #   in Loop: Header=BB303_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_61
.LBB303_70:                             #   in Loop: Header=BB303_53 Depth=1
	jmp	.LBB303_71
.LBB303_71:                             #   in Loop: Header=BB303_53 Depth=1
	movl	-24(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB303_53
.LBB303_72:
	movq	-48(%rbp), %rdi
	callq	free
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end303:
	.size	actually_write_selex, .Lfunc_end303-actually_write_selex
	.cfi_endproc
                                        # -- End function
	.globl	WriteSELEXOneBlock      # -- Begin function WriteSELEXOneBlock
	.p2align	4, 0x90
	.type	WriteSELEXOneBlock,@function
WriteSELEXOneBlock:                     # @WriteSELEXOneBlock
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	callq	actually_write_selex
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end304:
	.size	WriteSELEXOneBlock, .Lfunc_end304-WriteSELEXOneBlock
	.cfi_endproc
                                        # -- End function
	.globl	DealignAseqs            # -- Begin function DealignAseqs
	.p2align	4, 0x90
	.type	DealignAseqs,@function
DealignAseqs:                           # @DealignAseqs
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.4.703, %rax
	movq	%rdi, -32(%rbp)
	movl	%esi, -36(%rbp)
	movq	%rdx, -64(%rbp)
	movslq	-36(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$738, %esi              # imm = 0x2E2
	callq	sre_malloc
	movq	%rax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB305_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB305_14
# %bb.2:                                #   in Loop: Header=BB305_1 Depth=1
	movabsq	$.L.str.4.703, %rbx
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movq	%rbx, %rdi
	movl	$744, %esi              # imm = 0x2E8
	callq	sre_malloc
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
.LBB305_3:                              #   Parent Loop BB305_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB305_12
# %bb.4:                                #   in Loop: Header=BB305_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB305_10
# %bb.5:                                #   in Loop: Header=BB305_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB305_10
# %bb.6:                                #   in Loop: Header=BB305_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB305_10
# %bb.7:                                #   in Loop: Header=BB305_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB305_10
# %bb.8:                                #   in Loop: Header=BB305_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB305_10
# %bb.9:                                #   in Loop: Header=BB305_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB305_10:                             #   in Loop: Header=BB305_3 Depth=2
	jmp	.LBB305_11
.LBB305_11:                             #   in Loop: Header=BB305_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB305_3
.LBB305_12:                             #   in Loop: Header=BB305_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.13:                               #   in Loop: Header=BB305_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB305_1
.LBB305_14:
	movq	-48(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end305:
	.size	DealignAseqs, .Lfunc_end305-DealignAseqs
	.cfi_endproc
                                        # -- End function
	.globl	IsSELEXFormat           # -- Begin function IsSELEXFormat
	.p2align	4, 0x90
	.type	IsSELEXFormat,@function
IsSELEXFormat:                          # @IsSELEXFormat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$4128, %rsp             # imm = 0x1020
	movabsq	$.L.str.32.748, %rsi
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fopen
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB306_2
# %bb.1:
	movl	$4, squid_errno
	movl	$0, -8(%rbp)
	jmp	.LBB306_50
.LBB306_2:
	movl	$0, -4(%rbp)
.LBB306_3:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$500, -4(%rbp)          # imm = 0x1F4
	jge	.LBB306_5
# %bb.4:                                #   in Loop: Header=BB306_3 Depth=1
	leaq	-4128(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	$4096, %esi             # imm = 0x1000
	callq	fgets
	cmpq	$0, %rax
	setne	%al
.LBB306_5:                              #   in Loop: Header=BB306_3 Depth=1
	testb	$1, %al
	jne	.LBB306_6
	jmp	.LBB306_48
.LBB306_6:                              #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.8.707, %rsi
	leaq	-4128(%rbp), %rdi
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_8
# %bb.7:
	jmp	.LBB306_49
.LBB306_8:                              #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.10.709, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_10
# %bb.9:
	jmp	.LBB306_49
.LBB306_10:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.11.710, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_12
# %bb.11:
	jmp	.LBB306_49
.LBB306_12:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.12.711, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_14
# %bb.13:
	jmp	.LBB306_49
.LBB306_14:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.13.712, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_16
# %bb.15:
	jmp	.LBB306_49
.LBB306_16:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.15.714, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_18
# %bb.17:
	jmp	.LBB306_49
.LBB306_18:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.17.716, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_20
# %bb.19:
	jmp	.LBB306_49
.LBB306_20:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.19.718, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_22
# %bb.21:
	jmp	.LBB306_49
.LBB306_22:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.5.704, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_24
# %bb.23:
	jmp	.LBB306_49
.LBB306_24:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.1.700, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_26
# %bb.25:
	jmp	.LBB306_49
.LBB306_26:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.2.701, %rsi
	leaq	-4128(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB306_28
# %bb.27:
	jmp	.LBB306_49
.LBB306_28:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_29
.LBB306_29:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_30
.LBB306_30:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_31
.LBB306_31:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_32
.LBB306_32:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_33
.LBB306_33:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_34
.LBB306_34:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_35
.LBB306_35:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_36
.LBB306_36:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_37
.LBB306_37:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_38
.LBB306_38:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$commentsyms, %rdi
	movsbl	-4128(%rbp), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB306_41
# %bb.39:                               #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_40
.LBB306_40:                             # %.backedge
                                        #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_3
.LBB306_41:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.3.702, %rsi
	leaq	-4128(%rbp), %rdi
	callq	strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB306_43
# %bb.42:                               #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_40
.LBB306_43:                             #   in Loop: Header=BB306_3 Depth=1
	movabsq	$.L.str.9.708, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB306_45
# %bb.44:                               #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_40
.LBB306_45:                             #   in Loop: Header=BB306_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	Seqtype
	cmpl	$0, %eax
	jne	.LBB306_47
# %bb.46:
	movq	-16(%rbp), %rdi
	callq	fclose
	movl	$0, -8(%rbp)
	jmp	.LBB306_50
.LBB306_47:                             #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_40
.LBB306_48:
	jmp	.LBB306_49
.LBB306_49:
	movq	-16(%rbp), %rdi
	callq	fclose
	movl	$1, -8(%rbp)
.LBB306_50:
	movl	-8(%rbp), %eax
	addq	$4128, %rsp             # imm = 0x1020
	popq	%rbp
	retq
.Lfunc_end306:
	.size	IsSELEXFormat, .Lfunc_end306-IsSELEXFormat
	.cfi_endproc
                                        # -- End function
	.globl	seqcmp                  # -- Begin function seqcmp
	.p2align	4, 0x90
	.type	seqcmp,@function
seqcmp:                                 # @seqcmp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB307_1:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB307_4
# %bb.2:                                #   in Loop: Header=BB307_1 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB307_4
# %bb.3:                                #   in Loop: Header=BB307_1 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setle	%al
.LBB307_4:                              #   in Loop: Header=BB307_1 Depth=1
	testb	$1, %al
	jne	.LBB307_5
	jmp	.LBB307_8
.LBB307_5:                              #   in Loop: Header=BB307_1 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %ecx
	andl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	%ecx, %eax
	je	.LBB307_7
# %bb.6:                                #   in Loop: Header=BB307_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB307_7:                              #   in Loop: Header=BB307_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB307_1
.LBB307_8:
	jmp	.LBB307_9
.LBB307_9:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB307_11
# %bb.10:                               #   in Loop: Header=BB307_9 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setle	%al
.LBB307_11:                             #   in Loop: Header=BB307_9 Depth=1
	testb	$1, %al
	jne	.LBB307_12
	jmp	.LBB307_13
.LBB307_12:                             #   in Loop: Header=BB307_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_9
.LBB307_13:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end307:
	.size	seqcmp, .Lfunc_end307-seqcmp
	.cfi_endproc
                                        # -- End function
	.globl	seqncmp                 # -- Begin function seqncmp
	.p2align	4, 0x90
	.type	seqncmp,@function
seqncmp:                                # @seqncmp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB308_1:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB308_3
# %bb.2:                                #   in Loop: Header=BB308_1 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -8(%rbp)
	cmpl	$0, %eax
	setne	%al
.LBB308_3:                              #   in Loop: Header=BB308_1 Depth=1
	testb	$1, %al
	jne	.LBB308_4
	jmp	.LBB308_8
.LBB308_4:                              #   in Loop: Header=BB308_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	andl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	%ecx, %eax
	je	.LBB308_7
# %bb.5:                                #   in Loop: Header=BB308_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	cmpl	-28(%rbp), %eax
	jle	.LBB308_7
# %bb.6:
	movl	-4(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB308_15
.LBB308_7:                              #   in Loop: Header=BB308_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB308_1
.LBB308_8:
	jmp	.LBB308_9
.LBB308_9:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movl	-8(%rbp), %ecx
	movl	%ecx, %edx
	addl	$-1, %edx
	movl	%edx, -8(%rbp)
	cmpl	$0, %ecx
	je	.LBB308_12
# %bb.10:                               #   in Loop: Header=BB308_9 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB308_12
# %bb.11:                               #   in Loop: Header=BB308_9 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setle	%al
.LBB308_12:                             #   in Loop: Header=BB308_9 Depth=1
	testb	$1, %al
	jne	.LBB308_13
	jmp	.LBB308_14
.LBB308_13:                             #   in Loop: Header=BB308_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_9
.LBB308_14:
	movl	-4(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB308_15:
	movl	-32(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end308:
	.size	seqncmp, .Lfunc_end308-seqncmp
	.cfi_endproc
                                        # -- End function
	.globl	seqencode               # -- Begin function seqencode
	.p2align	4, 0x90
	.type	seqencode,@function
seqencode:                              # @seqencode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB309_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB309_5 Depth 2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB309_14
# %bb.2:                                #   in Loop: Header=BB309_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB309_4
# %bb.3:                                #   in Loop: Header=BB309_1 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %edi
	callq	toupper
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
.LBB309_4:                              #   in Loop: Header=BB309_1 Depth=1
	movl	$0, -4(%rbp)
.LBB309_5:                              #   Parent Loop BB309_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	-4(%rbp), %rdx
	movsbl	iupac(,%rdx,4), %edx
	cmpl	%edx, %ecx
	je	.LBB309_7
# %bb.6:                                #   in Loop: Header=BB309_5 Depth=2
	cmpl	$17, -4(%rbp)
	setle	%al
.LBB309_7:                              #   in Loop: Header=BB309_5 Depth=2
	testb	$1, %al
	jne	.LBB309_8
	jmp	.LBB309_10
.LBB309_8:                              #   in Loop: Header=BB309_5 Depth=2
	jmp	.LBB309_9
.LBB309_9:                              #   in Loop: Header=BB309_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB309_5
.LBB309_10:                             #   in Loop: Header=BB309_1 Depth=1
	cmpl	$17, -4(%rbp)
	jle	.LBB309_12
# %bb.11:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
	movl	$0, -28(%rbp)
	jmp	.LBB309_15
.LBB309_12:                             #   in Loop: Header=BB309_1 Depth=1
	movslq	-4(%rbp), %rax
	movb	iupac+2(,%rax,4), %al
	movq	-24(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.13:                               #   in Loop: Header=BB309_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB309_1
.LBB309_14:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
	movl	$1, -28(%rbp)
.LBB309_15:
	movl	-28(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end309:
	.size	seqencode, .Lfunc_end309-seqencode
	.cfi_endproc
                                        # -- End function
	.globl	coded_revcomp           # -- Begin function coded_revcomp
	.p2align	4, 0x90
	.type	coded_revcomp,@function
coded_revcomp:                          # @coded_revcomp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	strlen
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	addq	-48(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -40(%rbp)
	movq	$0, -32(%rbp)
.LBB310_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_3 Depth 2
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jge	.LBB310_13
# %bb.2:                                #   in Loop: Header=BB310_1 Depth=1
	movl	$0, -4(%rbp)
.LBB310_3:                              #   Parent Loop BB310_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	-4(%rbp), %rdx
	movsbl	iupac+2(,%rdx,4), %edx
	cmpl	%edx, %ecx
	je	.LBB310_5
# %bb.4:                                #   in Loop: Header=BB310_3 Depth=2
	cmpl	$17, -4(%rbp)
	setl	%al
.LBB310_5:                              #   in Loop: Header=BB310_3 Depth=2
	testb	$1, %al
	jne	.LBB310_6
	jmp	.LBB310_8
.LBB310_6:                              #   in Loop: Header=BB310_3 Depth=2
	jmp	.LBB310_7
.LBB310_7:                              #   in Loop: Header=BB310_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_3
.LBB310_8:                              #   in Loop: Header=BB310_1 Depth=1
	cmpl	$17, -4(%rbp)
	jle	.LBB310_10
# %bb.9:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movl	$0, -20(%rbp)
	jmp	.LBB310_14
.LBB310_10:                             #   in Loop: Header=BB310_1 Depth=1
	movslq	-4(%rbp), %rax
	movb	iupac+3(,%rax,4), %al
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.11:                               #   in Loop: Header=BB310_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -40(%rbp)
# %bb.12:                               #   in Loop: Header=BB310_1 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB310_1
.LBB310_13:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movl	$1, -20(%rbp)
.LBB310_14:
	movl	-20(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end310:
	.size	coded_revcomp, .Lfunc_end310-coded_revcomp
	.cfi_endproc
                                        # -- End function
	.globl	seqdecode               # -- Begin function seqdecode
	.p2align	4, 0x90
	.type	seqdecode,@function
seqdecode:                              # @seqdecode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB311_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB311_3 Depth 2
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB311_12
# %bb.2:                                #   in Loop: Header=BB311_1 Depth=1
	movl	$0, -4(%rbp)
.LBB311_3:                              #   Parent Loop BB311_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	-4(%rbp), %rdx
	movsbl	iupac+2(,%rdx,4), %edx
	cmpl	%edx, %ecx
	je	.LBB311_5
# %bb.4:                                #   in Loop: Header=BB311_3 Depth=2
	cmpl	$17, -4(%rbp)
	setl	%al
.LBB311_5:                              #   in Loop: Header=BB311_3 Depth=2
	testb	$1, %al
	jne	.LBB311_6
	jmp	.LBB311_8
.LBB311_6:                              #   in Loop: Header=BB311_3 Depth=2
	jmp	.LBB311_7
.LBB311_7:                              #   in Loop: Header=BB311_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_3
.LBB311_8:                              #   in Loop: Header=BB311_1 Depth=1
	cmpl	$17, -4(%rbp)
	jle	.LBB311_10
# %bb.9:
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$88, (%rax,%rcx)
	movl	$0, -12(%rbp)
	jmp	.LBB311_13
.LBB311_10:                             #   in Loop: Header=BB311_1 Depth=1
	movslq	-4(%rbp), %rax
	movb	iupac(,%rax,4), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.11:                               #   in Loop: Header=BB311_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_1
.LBB311_12:
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, -12(%rbp)
.LBB311_13:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end311:
	.size	seqdecode, .Lfunc_end311-seqdecode
	.cfi_endproc
                                        # -- End function
	.globl	seqndecode              # -- Begin function seqndecode
	.p2align	4, 0x90
	.type	seqndecode,@function
seqndecode:                             # @seqndecode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB312_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB312_3 Depth 2
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, %eax
	jl	.LBB312_12
# %bb.2:                                #   in Loop: Header=BB312_1 Depth=1
	movl	$0, -4(%rbp)
.LBB312_3:                              #   Parent Loop BB312_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	-4(%rbp), %rdx
	movsbl	iupac+2(,%rdx,4), %edx
	cmpl	%edx, %ecx
	je	.LBB312_5
# %bb.4:                                #   in Loop: Header=BB312_3 Depth=2
	cmpl	$17, -4(%rbp)
	setl	%al
.LBB312_5:                              #   in Loop: Header=BB312_3 Depth=2
	testb	$1, %al
	jne	.LBB312_6
	jmp	.LBB312_8
.LBB312_6:                              #   in Loop: Header=BB312_3 Depth=2
	jmp	.LBB312_7
.LBB312_7:                              #   in Loop: Header=BB312_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB312_3
.LBB312_8:                              #   in Loop: Header=BB312_1 Depth=1
	cmpl	$17, -4(%rbp)
	jle	.LBB312_10
# %bb.9:
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$88, (%rax,%rcx)
	movl	$0, -16(%rbp)
	jmp	.LBB312_13
.LBB312_10:                             #   in Loop: Header=BB312_1 Depth=1
	movslq	-4(%rbp), %rax
	movb	iupac(,%rax,4), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.11:                               #   in Loop: Header=BB312_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB312_1
.LBB312_12:
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, -16(%rbp)
.LBB312_13:
	movl	-16(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end312:
	.size	seqndecode, .Lfunc_end312-seqndecode
	.cfi_endproc
                                        # -- End function
	.globl	StrShuffle              # -- Begin function StrShuffle
	.p2align	4, 0x90
	.type	StrShuffle,@function
StrShuffle:                             # @StrShuffle
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rax
	cmpq	-32(%rbp), %rax
	je	.LBB313_2
# %bb.1:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
.LBB313_2:
	movq	-16(%rbp), %rdi
	callq	strlen
	movl	%eax, -8(%rbp)
.LBB313_3:                              # =>This Inner Loop Header: Depth=1
	cmpl	$1, -8(%rbp)
	jle	.LBB313_6
# %bb.4:                                #   in Loop: Header=BB313_3 Depth=1
	callq	sre_random
	movl	-8(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1(%rbp)
	movq	-16(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
# %bb.5:                                #   in Loop: Header=BB313_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB313_3
.LBB313_6:
	movl	$1, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end313:
	.size	StrShuffle, .Lfunc_end313-StrShuffle
	.cfi_endproc
                                        # -- End function
	.globl	StrDPShuffle            # -- Begin function StrDPShuffle
	.p2align	4, 0x90
	.type	StrDPShuffle,@function
StrDPShuffle:                           # @StrDPShuffle
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -80(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	strlen
	movl	%eax, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB314_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_6
# %bb.2:                                #   in Loop: Header=BB314_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	jne	.LBB314_4
# %bb.3:
	movl	$0, -68(%rbp)
	jmp	.LBB314_69
.LBB314_4:                              #   in Loop: Header=BB314_1 Depth=1
	jmp	.LBB314_5
.LBB314_5:                              #   in Loop: Header=BB314_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_1
.LBB314_6:
	movabsq	$.L.str.751, %rdi
	movl	$127, %esi
	movl	$208, %edx
	callq	sre_malloc
	movabsq	$.L.str.751, %rdi
	movq	%rax, -24(%rbp)
	movl	$128, %esi
	movl	$104, %edx
	callq	sre_malloc
	movq	%rax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB314_7:                              # =>This Inner Loop Header: Depth=1
	cmpl	$26, -4(%rbp)
	jge	.LBB314_10
# %bb.8:                                #   in Loop: Header=BB314_7 Depth=1
	movabsq	$.L.str.751, %rdi
	movl	-32(%rbp), %eax
	subl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$131, %esi
	callq	sre_malloc
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.9:                                #   in Loop: Header=BB314_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_7
.LBB314_10:
	movq	-56(%rbp), %rax
	movsbl	(%rax), %edi
	callq	toupper
	subl	$65, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -8(%rbp)
.LBB314_11:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_14
# %bb.12:                               #   in Loop: Header=BB314_11 Depth=1
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	subl	$65, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
# %bb.13:                               #   in Loop: Header=BB314_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_11
.LBB314_14:
	movq	-56(%rbp), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	subl	$65, %eax
	movb	%al, -9(%rbp)
	movl	$0, -44(%rbp)
.LBB314_15:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_17 Depth 2
                                        #     Child Loop BB314_24 Depth 2
                                        #     Child Loop BB314_28 Depth 2
                                        #       Child Loop BB314_30 Depth 3
                                        #     Child Loop BB314_38 Depth 2
	cmpl	$0, -44(%rbp)
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB314_16
	jmp	.LBB314_48
.LBB314_16:                             #   in Loop: Header=BB314_15 Depth=1
	movl	$0, -4(%rbp)
.LBB314_17:                             #   Parent Loop BB314_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -4(%rbp)
	jge	.LBB314_23
# %bb.18:                               #   in Loop: Header=BB314_17 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB314_20
# %bb.19:                               #   in Loop: Header=BB314_17 Depth=2
	movl	-4(%rbp), %eax
	movsbl	-9(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB314_21
.LBB314_20:                             #   in Loop: Header=BB314_17 Depth=2
	jmp	.LBB314_22
.LBB314_21:                             #   in Loop: Header=BB314_17 Depth=2
	callq	sre_random
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB314_22:                             #   in Loop: Header=BB314_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_17
.LBB314_23:                             #   in Loop: Header=BB314_15 Depth=1
	movl	$0, -4(%rbp)
.LBB314_24:                             #   Parent Loop BB314_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -4(%rbp)
	jge	.LBB314_27
# %bb.25:                               #   in Loop: Header=BB314_24 Depth=2
	movslq	-4(%rbp), %rax
	movb	$0, -112(%rbp,%rax)
# %bb.26:                               #   in Loop: Header=BB314_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_24
.LBB314_27:                             #   in Loop: Header=BB314_15 Depth=1
	movl	$1, -48(%rbp)
	movsbl	-9(%rbp), %eax
	cltq
	movb	$1, -112(%rbp,%rax)
.LBB314_28:                             #   Parent Loop BB314_15 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB314_30 Depth 3
	cmpl	$0, -48(%rbp)
	je	.LBB314_37
# %bb.29:                               #   in Loop: Header=BB314_28 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB314_30:                             #   Parent Loop BB314_15 Depth=1
                                        #     Parent Loop BB314_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$26, -4(%rbp)
	jge	.LBB314_36
# %bb.31:                               #   in Loop: Header=BB314_30 Depth=3
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -16(%rbp)
	movslq	-4(%rbp), %rax
	movsbl	-112(%rbp,%rax), %eax
	cmpl	$0, %eax
	jne	.LBB314_34
# %bb.32:                               #   in Loop: Header=BB314_30 Depth=3
	movslq	-16(%rbp), %rax
	movsbl	-112(%rbp,%rax), %eax
	cmpl	$1, %eax
	jne	.LBB314_34
# %bb.33:                               #   in Loop: Header=BB314_30 Depth=3
	movslq	-4(%rbp), %rax
	movb	$1, -112(%rbp,%rax)
	movl	$1, -48(%rbp)
.LBB314_34:                             #   in Loop: Header=BB314_30 Depth=3
	jmp	.LBB314_35
.LBB314_35:                             #   in Loop: Header=BB314_30 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_30
.LBB314_36:                             #   in Loop: Header=BB314_28 Depth=2
	jmp	.LBB314_28
.LBB314_37:                             #   in Loop: Header=BB314_15 Depth=1
	movl	$1, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB314_38:                             #   Parent Loop BB314_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -4(%rbp)
	jge	.LBB314_46
# %bb.39:                               #   in Loop: Header=BB314_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB314_41
# %bb.40:                               #   in Loop: Header=BB314_38 Depth=2
	movl	-4(%rbp), %eax
	movsbl	-9(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB314_42
.LBB314_41:                             #   in Loop: Header=BB314_38 Depth=2
	jmp	.LBB314_45
.LBB314_42:                             #   in Loop: Header=BB314_38 Depth=2
	movslq	-4(%rbp), %rax
	movsbl	-112(%rbp,%rax), %eax
	cmpl	$0, %eax
	jne	.LBB314_44
# %bb.43:                               #   in Loop: Header=BB314_15 Depth=1
	movl	$0, -44(%rbp)
	jmp	.LBB314_47
.LBB314_44:                             #   in Loop: Header=BB314_38 Depth=2
	jmp	.LBB314_45
.LBB314_45:                             #   in Loop: Header=BB314_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_38
.LBB314_46:                             # %.loopexit
                                        #   in Loop: Header=BB314_15 Depth=1
	jmp	.LBB314_47
.LBB314_47:                             #   in Loop: Header=BB314_15 Depth=1
	jmp	.LBB314_15
.LBB314_48:
	movl	$0, -4(%rbp)
.LBB314_49:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_51 Depth 2
	cmpl	$26, -4(%rbp)
	jge	.LBB314_56
# %bb.50:                               #   in Loop: Header=BB314_49 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB314_51:                             #   Parent Loop BB314_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$1, -28(%rbp)
	jle	.LBB314_54
# %bb.52:                               #   in Loop: Header=BB314_51 Depth=2
	callq	sre_random
	movl	-28(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
# %bb.53:                               #   in Loop: Header=BB314_51 Depth=2
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB314_51
.LBB314_54:                             #   in Loop: Header=BB314_49 Depth=1
	jmp	.LBB314_55
.LBB314_55:                             #   in Loop: Header=BB314_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_49
.LBB314_56:
	movabsq	$.L.str.751, %rdi
	movl	$240, %esi
	movl	$104, %edx
	callq	sre_malloc
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB314_57:                             # =>This Inner Loop Header: Depth=1
	cmpl	$26, -4(%rbp)
	jge	.LBB314_60
# %bb.58:                               #   in Loop: Header=BB314_57 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.59:                               #   in Loop: Header=BB314_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_57
.LBB314_60:
	movl	$0, -8(%rbp)
	movq	-56(%rbp), %rax
	movsbl	(%rax), %edi
	callq	toupper
	subl	$65, %eax
	movl	%eax, -4(%rbp)
.LBB314_61:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	addl	$65, %eax
	movq	-80(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -16(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB314_63
# %bb.62:
	jmp	.LBB314_64
.LBB314_63:                             #   in Loop: Header=BB314_61 Depth=1
	jmp	.LBB314_61
.LBB314_64:
	movsbl	-9(%rbp), %eax
	addl	$65, %eax
	movq	-80(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	-4(%rbp), %eax
	movsbl	-9(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB314_66
# %bb.65:
	movabsq	$.L.str.1.752, %rdi
	movb	$0, %al
	callq	Die
.LBB314_66:
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	je	.LBB314_68
# %bb.67:
	movabsq	$.L.str.2.753, %rdi
	movl	-8(%rbp), %esi
	movl	-32(%rbp), %edx
	movb	$0, %al
	callq	Die
.LBB314_68:
	movq	-24(%rbp), %rdi
	movl	$26, %esi
	callq	Free2DArray
	movq	-40(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movl	$1, -68(%rbp)
.LBB314_69:
	movl	-68(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end314:
	.size	StrDPShuffle, .Lfunc_end314-StrDPShuffle
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function StrMarkov0
.LCPI315_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	StrMarkov0
	.p2align	4, 0x90
	.type	StrMarkov0,@function
StrMarkov0:                             # @StrMarkov0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB315_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB315_6
# %bb.2:                                #   in Loop: Header=BB315_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	jne	.LBB315_4
# %bb.3:
	movl	$0, -12(%rbp)
	jmp	.LBB315_15
.LBB315_4:                              #   in Loop: Header=BB315_1 Depth=1
	jmp	.LBB315_5
.LBB315_5:                              #   in Loop: Header=BB315_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_1
.LBB315_6:
	leaq	-144(%rbp), %rdi
	movl	$26, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -4(%rbp)
.LBB315_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB315_10
# %bb.8:                                #   in Loop: Header=BB315_7 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	movsd	.LCPI315_0(%rip), %xmm0 # xmm0 = mem[0],zero
	subl	$65, %eax
	cltq
	movss	-144(%rbp,%rax,4), %xmm1 # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -144(%rbp,%rax,4)
# %bb.9:                                #   in Loop: Header=BB315_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_7
.LBB315_10:
	leaq	-144(%rbp), %rdi
	movl	$26, %esi
	callq	FNorm
	movl	$0, -4(%rbp)
.LBB315_11:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB315_14
# %bb.12:                               #   in Loop: Header=BB315_11 Depth=1
	leaq	-144(%rbp), %rdi
	movl	$26, %esi
	callq	FChoose
	addl	$65, %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.13:                               #   in Loop: Header=BB315_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_11
.LBB315_14:
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, -12(%rbp)
.LBB315_15:
	movl	-12(%rbp), %eax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end315:
	.size	StrMarkov0, .Lfunc_end315-StrMarkov0
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function StrMarkov1
.LCPI316_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	StrMarkov1
	.p2align	4, 0x90
	.type	StrMarkov1,@function
StrMarkov1:                             # @StrMarkov1
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$2752, %rsp             # imm = 0xAC0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB316_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB316_6
# %bb.2:                                #   in Loop: Header=BB316_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	jne	.LBB316_4
# %bb.3:
	movl	$0, -20(%rbp)
	jmp	.LBB316_23
.LBB316_4:                              #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_5
.LBB316_5:                              #   in Loop: Header=BB316_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_1
.LBB316_6:
	movl	$0, -4(%rbp)
.LBB316_7:                              # =>This Inner Loop Header: Depth=1
	cmpl	$26, -4(%rbp)
	jge	.LBB316_10
# %bb.8:                                #   in Loop: Header=BB316_7 Depth=1
	leaq	-2752(%rbp), %rdi
	movslq	-4(%rbp), %rax
	imulq	$104, %rax, %rax
	addq	%rax, %rdi
	movl	$26, %esi
	xorps	%xmm0, %xmm0
	callq	FSet
# %bb.9:                                #   in Loop: Header=BB316_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_7
.LBB316_10:
	movq	-32(%rbp), %rax
	movsbl	(%rax), %edi
	callq	toupper
	subl	$65, %eax
	movl	%eax, -4(%rbp)
	movl	%eax, -44(%rbp)
	movl	$1, -8(%rbp)
.LBB316_11:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB316_14
# %bb.12:                               #   in Loop: Header=BB316_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	movsd	.LCPI316_0(%rip), %xmm0 # xmm0 = mem[0],zero
	leaq	-2752(%rbp), %rcx
	subl	$65, %eax
	movl	%eax, -12(%rbp)
	movslq	-4(%rbp), %rax
	imulq	$104, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movss	(%rcx,%rax,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, (%rcx,%rax,4)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
# %bb.13:                               #   in Loop: Header=BB316_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_11
.LBB316_14:
	movl	$0, -4(%rbp)
.LBB316_15:                             # =>This Inner Loop Header: Depth=1
	cmpl	$26, -4(%rbp)
	jge	.LBB316_18
# %bb.16:                               #   in Loop: Header=BB316_15 Depth=1
	leaq	-2752(%rbp), %rdi
	movslq	-4(%rbp), %rax
	imulq	$104, %rax, %rax
	addq	%rax, %rdi
	movl	$26, %esi
	callq	FNorm
# %bb.17:                               #   in Loop: Header=BB316_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_15
.LBB316_18:
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$65, %eax
	movq	-40(%rbp), %rcx
	movb	%al, (%rcx)
	movl	$1, -8(%rbp)
.LBB316_19:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB316_22
# %bb.20:                               #   in Loop: Header=BB316_19 Depth=1
	leaq	-2752(%rbp), %rdi
	movslq	-4(%rbp), %rax
	imulq	$104, %rax, %rax
	addq	%rax, %rdi
	movl	$26, %esi
	callq	FChoose
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$65, %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
# %bb.21:                               #   in Loop: Header=BB316_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_19
.LBB316_22:
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, -20(%rbp)
.LBB316_23:
	movl	-20(%rbp), %eax
	addq	$2752, %rsp             # imm = 0xAC0
	popq	%rbp
	retq
.Lfunc_end316:
	.size	StrMarkov1, .Lfunc_end316-StrMarkov1
	.cfi_endproc
                                        # -- End function
	.globl	StrReverse              # -- Begin function StrReverse
	.p2align	4, 0x90
	.type	StrReverse,@function
StrReverse:                             # @StrReverse
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB317_1:                              # =>This Inner Loop Header: Depth=1
	movl	$2, %ecx
	movl	-4(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	%eax, %esi
	jge	.LBB317_4
# %bb.2:                                #   in Loop: Header=BB317_1 Depth=1
	movq	-24(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -5(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movb	-5(%rbp), %al
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.3:                                #   in Loop: Header=BB317_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_1
.LBB317_4:
	movl	$2, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB317_6
# %bb.5:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB317_6:
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end317:
	.size	StrReverse, .Lfunc_end317-StrReverse
	.cfi_endproc
                                        # -- End function
	.globl	StrRegionalShuffle      # -- Begin function StrRegionalShuffle
	.p2align	4, 0x90
	.type	StrRegionalShuffle,@function
StrRegionalShuffle:                     # @StrRegionalShuffle
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -32(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpq	-56(%rbp), %rax
	je	.LBB318_2
# %bb.1:
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcpy
.LBB318_2:
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB318_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_8 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB318_13
# %bb.4:                                #   in Loop: Header=BB318_3 Depth=1
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_6
# %bb.5:                                #   in Loop: Header=BB318_3 Depth=1
	movl	-36(%rbp), %eax
	subl	$1, %eax
	jmp	.LBB318_7
.LBB318_6:                              #   in Loop: Header=BB318_3 Depth=1
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	subl	$1, %eax
.LBB318_7:                              #   in Loop: Header=BB318_3 Depth=1
	movl	%eax, -20(%rbp)
.LBB318_8:                              #   Parent Loop BB318_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jle	.LBB318_11
# %bb.9:                                #   in Loop: Header=BB318_8 Depth=2
	movl	-12(%rbp), %ebx
	callq	sre_random
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	addl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -13(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-32(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movb	-13(%rbp), %al
	movq	-32(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.10:                               #   in Loop: Header=BB318_8 Depth=2
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_8
.LBB318_11:                             #   in Loop: Header=BB318_3 Depth=1
	jmp	.LBB318_12
.LBB318_12:                             #   in Loop: Header=BB318_3 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_3
.LBB318_13:
	movl	$1, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end318:
	.size	StrRegionalShuffle, .Lfunc_end318-StrRegionalShuffle
	.cfi_endproc
                                        # -- End function
	.globl	AlignmentShuffle        # -- Begin function AlignmentShuffle
	.p2align	4, 0x90
	.type	AlignmentShuffle,@function
AlignmentShuffle:                       # @AlignmentShuffle
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB319_6
# %bb.1:
	movl	$0, -4(%rbp)
.LBB319_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_5
# %bb.3:                                #   in Loop: Header=BB319_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	strcpy
# %bb.4:                                #   in Loop: Header=BB319_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_2
.LBB319_5:
	jmp	.LBB319_6
.LBB319_6:
	movl	$0, -4(%rbp)
.LBB319_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_10
# %bb.8:                                #   in Loop: Header=BB319_7 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.9:                                #   in Loop: Header=BB319_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_7
.LBB319_10:
	jmp	.LBB319_11
.LBB319_11:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_13 Depth 2
	cmpl	$1, -8(%rbp)
	jle	.LBB319_18
# %bb.12:                               #   in Loop: Header=BB319_11 Depth=1
	callq	sre_random
	movl	-8(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB319_13:                             #   Parent Loop BB319_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_16
# %bb.14:                               #   in Loop: Header=BB319_13 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movb	-9(%rbp), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
# %bb.15:                               #   in Loop: Header=BB319_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_13
.LBB319_16:                             #   in Loop: Header=BB319_11 Depth=1
	jmp	.LBB319_17
.LBB319_17:                             #   in Loop: Header=BB319_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_11
.LBB319_18:
	movl	$1, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end319:
	.size	AlignmentShuffle, .Lfunc_end319-AlignmentShuffle
	.cfi_endproc
                                        # -- End function
	.globl	AlignmentBootstrap      # -- Begin function AlignmentBootstrap
	.p2align	4, 0x90
	.type	AlignmentBootstrap,@function
AlignmentBootstrap:                     # @AlignmentBootstrap
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB320_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB320_8
# %bb.2:                                #   in Loop: Header=BB320_1 Depth=1
	callq	sre_random
	movl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB320_3:                              #   Parent Loop BB320_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB320_6
# %bb.4:                                #   in Loop: Header=BB320_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.5:                                #   in Loop: Header=BB320_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_3
.LBB320_6:                              #   in Loop: Header=BB320_1 Depth=1
	jmp	.LBB320_7
.LBB320_7:                              #   in Loop: Header=BB320_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_1
.LBB320_8:
	movl	$0, -4(%rbp)
.LBB320_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB320_12
# %bb.10:                               #   in Loop: Header=BB320_9 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.11:                               #   in Loop: Header=BB320_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_9
.LBB320_12:
	movl	$1, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end320:
	.size	AlignmentBootstrap, .Lfunc_end320-AlignmentBootstrap
	.cfi_endproc
                                        # -- End function
	.globl	QRNAShuffle             # -- Begin function QRNAShuffle
	.p2align	4, 0x90
	.type	QRNAShuffle,@function
QRNAShuffle:                            # @QRNAShuffle
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-88(%rbp), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB321_2
# %bb.1:
	movq	-88(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
.LBB321_2:
	movq	-80(%rbp), %rax
	cmpq	-48(%rbp), %rax
	je	.LBB321_4
# %bb.3:
	movq	-80(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	strcpy
.LBB321_4:
	movabsq	$.L.str.751, %rbx
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -96(%rbp)
	movslq	-96(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rbx, %rdi
	movl	$572, %esi              # imm = 0x23C
	callq	sre_malloc
	movabsq	$.L.str.751, %rdi
	movq	%rax, -56(%rbp)
	movslq	-96(%rbp), %rdx
	shlq	$2, %rdx
	movl	$573, %esi              # imm = 0x23D
	callq	sre_malloc
	movabsq	$.L.str.751, %rdi
	movq	%rax, -72(%rbp)
	movslq	-96(%rbp), %rdx
	shlq	$2, %rdx
	movl	$574, %esi              # imm = 0x23E
	callq	sre_malloc
	movq	%rax, -64(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB321_5:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB321_45
# %bb.6:                                #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB321_11
# %bb.7:                                #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB321_11
# %bb.8:                                #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB321_11
# %bb.9:                                #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB321_11
# %bb.10:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB321_17
.LBB321_11:                             #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB321_16
# %bb.12:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB321_16
# %bb.13:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB321_16
# %bb.14:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB321_16
# %bb.15:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB321_17
.LBB321_16:                             #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_44
.LBB321_17:                             #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB321_28
# %bb.18:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB321_28
# %bb.19:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB321_28
# %bb.20:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB321_28
# %bb.21:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB321_28
# %bb.22:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB321_28
# %bb.23:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB321_28
# %bb.24:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB321_28
# %bb.25:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB321_28
# %bb.26:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB321_28
# %bb.27:                               #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB321_42
.LBB321_28:                             #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB321_33
# %bb.29:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB321_33
# %bb.30:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB321_33
# %bb.31:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB321_33
# %bb.32:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB321_34
.LBB321_33:                             #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB321_41
.LBB321_34:                             #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB321_39
# %bb.35:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB321_39
# %bb.36:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB321_39
# %bb.37:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB321_39
# %bb.38:                               #   in Loop: Header=BB321_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB321_40
.LBB321_39:                             #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB321_40:                             #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_41
.LBB321_41:                             #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_42
.LBB321_42:                             #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_43
.LBB321_43:                             #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_44
.LBB321_44:                             #   in Loop: Header=BB321_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_5
.LBB321_45:
	jmp	.LBB321_46
.LBB321_46:                             # =>This Inner Loop Header: Depth=1
	cmpl	$1, -32(%rbp)
	jle	.LBB321_49
# %bb.47:                               #   in Loop: Header=BB321_46 Depth=1
	callq	sre_random
	movl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -20(%rbp)
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -14(%rbp)
	movq	-80(%rbp), %rax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -13(%rbp)
	movq	-56(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rcx
	movl	-32(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-88(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-80(%rbp), %rax
	movq	-56(%rbp), %rcx
	movl	-32(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-80(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-56(%rbp), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movb	-14(%rbp), %al
	movq	-88(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movl	-32(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movb	-13(%rbp), %al
	movq	-80(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movl	-32(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-56(%rbp), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.48:                               #   in Loop: Header=BB321_46 Depth=1
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB321_46
.LBB321_49:
	jmp	.LBB321_50
.LBB321_50:                             # =>This Inner Loop Header: Depth=1
	cmpl	$1, -28(%rbp)
	jle	.LBB321_53
# %bb.51:                               #   in Loop: Header=BB321_50 Depth=1
	callq	sre_random
	movl	-28(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -20(%rbp)
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -14(%rbp)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -13(%rbp)
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-72(%rbp), %rax
	movl	-28(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movb	-14(%rbp), %al
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movl	-28(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movb	-13(%rbp), %al
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movl	-28(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-92(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.52:                               #   in Loop: Header=BB321_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB321_50
.LBB321_53:
	jmp	.LBB321_54
.LBB321_54:                             # =>This Inner Loop Header: Depth=1
	cmpl	$1, -24(%rbp)
	jle	.LBB321_57
# %bb.55:                               #   in Loop: Header=BB321_54 Depth=1
	callq	sre_random
	movl	-24(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -20(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -14(%rbp)
	movq	-80(%rbp), %rax
	movq	-64(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -13(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rcx
	movl	-24(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-88(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-80(%rbp), %rax
	movq	-64(%rbp), %rcx
	movl	-24(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-80(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-64(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movb	-14(%rbp), %al
	movq	-88(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movb	-13(%rbp), %al
	movq	-80(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movl	-24(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-92(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-24(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               #   in Loop: Header=BB321_54 Depth=1
	movl	-24(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB321_54
.LBB321_57:
	movq	-56(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movl	$1, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end321:
	.size	QRNAShuffle, .Lfunc_end321-QRNAShuffle
	.cfi_endproc
                                        # -- End function
	.globl	Die                     # -- Begin function Die
	.p2align	4, 0x90
	.type	Die,@function
Die:                                    # @Die
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	testb	%al, %al
	je	.LBB322_2
# %bb.1:
	movaps	%xmm0, -144(%rbp)
	movaps	%xmm1, -128(%rbp)
	movaps	%xmm2, -112(%rbp)
	movaps	%xmm3, -96(%rbp)
	movaps	%xmm4, -80(%rbp)
	movaps	%xmm5, -64(%rbp)
	movaps	%xmm6, -48(%rbp)
	movaps	%xmm7, -32(%rbp)
.LBB322_2:
	movq	%r9, -152(%rbp)
	movq	%r8, -160(%rbp)
	movq	%rcx, -168(%rbp)
	movq	%rdx, -176(%rbp)
	movq	%rsi, -184(%rbp)
	movabsq	$.L.str.760, %rsi
	movq	%rdi, -8(%rbp)
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	leaq	-224(%rbp), %rdx
	leaq	-192(%rbp), %rax
	movq	%rax, 16(%rdx)
	leaq	16(%rbp), %rax
	movq	%rax, 8(%rdx)
	movl	$48, 4(%rdx)
	movl	$8, (%rdx)
	movq	stderr, %rdi
	movq	-8(%rbp), %rsi
	callq	vfprintf
	movabsq	$.L.str.1.761, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	callq	fflush
	movl	$1, %edi
	callq	exit
.Lfunc_end322:
	.size	Die, .Lfunc_end322-Die
	.cfi_endproc
                                        # -- End function
	.globl	Warn                    # -- Begin function Warn
	.p2align	4, 0x90
	.type	Warn,@function
Warn:                                   # @Warn
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	testb	%al, %al
	je	.LBB323_2
# %bb.1:
	movaps	%xmm0, -160(%rbp)
	movaps	%xmm1, -144(%rbp)
	movaps	%xmm2, -128(%rbp)
	movaps	%xmm3, -112(%rbp)
	movaps	%xmm4, -96(%rbp)
	movaps	%xmm5, -80(%rbp)
	movaps	%xmm6, -64(%rbp)
	movaps	%xmm7, -48(%rbp)
.LBB323_2:
	movq	%r9, -168(%rbp)
	movq	%r8, -176(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rsi, -200(%rbp)
	movq	%rdi, -8(%rbp)
	movq	stderr(%rip), %rdi
	movl	$.L.str.2.764, %esi
	xorl	%eax, %eax
	callq	fprintf
	leaq	-208(%rbp), %rax
	movq	%rax, -16(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$48, -28(%rbp)
	movl	$8, -32(%rbp)
	movq	stderr(%rip), %rdi
	movq	-8(%rbp), %rsi
	leaq	-32(%rbp), %rdx
	callq	vfprintf
	movq	stderr(%rip), %rdi
	movl	$.L.str.1.761, %esi
	xorl	%eax, %eax
	callq	fprintf
	movq	stderr(%rip), %rdi
	callq	fflush
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end323:
	.size	Warn, .Lfunc_end323-Warn
	.cfi_endproc
                                        # -- End function
	.globl	Panic                   # -- Begin function Panic
	.p2align	4, 0x90
	.type	Panic,@function
Panic:                                  # @Panic
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.3.767, %rax
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	stderr, %rdi
	movq	-16(%rbp), %rdx
	movl	-4(%rbp), %ecx
	movq	%rax, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.4.768, %rdi
	callq	perror
	movl	$1, %edi
	callq	exit
.Lfunc_end324:
	.size	Panic, .Lfunc_end324-Panic
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileOpen             # -- Begin function SeqfileOpen
	.p2align	4, 0x90
	.type	SeqfileOpen,@function
SeqfileOpen:                            # @SeqfileOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rdx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	seqfile_open
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end325:
	.size	SeqfileOpen, .Lfunc_end325-SeqfileOpen
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function seqfile_open
	.type	seqfile_open,@function
seqfile_open:                           # @seqfile_open
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.78.771, %rax
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%rax, %rdi
	movl	$101, %esi
	movl	$176, %edx
	callq	sre_malloc
	movq	%rax, -8(%rbp)
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-8(%rbp), %rax
	movl	$-1, 88(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 92(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 100(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 108(%rax)
	movq	-24(%rbp), %rdi
	movl	$.L.str.52.772, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB326_2
# %bb.1:
	movabsq	$.L.str.110, %rdi
	movq	stdin, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movl	$1, 152(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 148(%rax)
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	jmp	.LBB326_6
.LBB326_2:
	movabsq	$.L.str.111, %rsi
	movq	-24(%rbp), %rdi
	callq	fopen
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	jne	.LBB326_5
# %bb.3:
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	xorl	%edx, %edx
	callq	EnvFileOpen
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	jne	.LBB326_5
# %bb.4:
	movq	$0, -32(%rbp)
	jmp	.LBB326_18
.LBB326_5:
	movq	-8(%rbp), %rax
	movl	$0, 152(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 148(%rax)
	movq	-24(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
.LBB326_6:
	cmpl	$0, -12(%rbp)
	jne	.LBB326_13
# %bb.7:
	movq	-8(%rbp), %rax
	cmpl	$1, 152(%rax)
	je	.LBB326_9
# %bb.8:
	movq	-8(%rbp), %rax
	cmpl	$0, 148(%rax)
	je	.LBB326_10
.LBB326_9:
	movabsq	$.L.str.112, %rdi
	movb	$0, %al
	callq	Die
.LBB326_10:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	SeqfileFormat
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB326_12
# %bb.11:
	movabsq	$.L.str.113, %rdi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB326_12:
	jmp	.LBB326_13
.LBB326_13:
	movq	-8(%rbp), %rax
	movq	$0, 160(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 168(%rax)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 144(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	cmpl	$100, -12(%rbp)
	jle	.LBB326_17
# %bb.14:
	movabsq	$.L.str.78.771, %rdi
	movl	$190, %esi
	movl	$64, %edx
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 168(%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movl	152(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	movl	%eax, 52(%rcx)
	movq	-8(%rbp), %rax
	movl	148(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	movl	%eax, 48(%rcx)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	144(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	movl	%eax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rdi
	callq	MSAFileRead
	movq	-8(%rbp), %rcx
	movq	%rax, 160(%rcx)
	cmpq	$0, %rax
	jne	.LBB326_16
# %bb.15:
	movabsq	$.L.str.114, %rdi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB326_16:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	$0, 352(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB326_18
.LBB326_17:
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB326_18:
	movq	-32(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end326:
	.size	seqfile_open, .Lfunc_end326-seqfile_open
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileFormat           # -- Begin function SeqfileFormat
	.p2align	4, 0x90
	.type	SeqfileFormat,@function
SeqfileFormat:                          # @SeqfileFormat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movl	$0, -12(%rbp)
	movq	$0, -8(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB327_1:                              # =>This Inner Loop Header: Depth=1
	leaq	-8(%rbp), %rdi
	leaq	-60(%rbp), %rsi
	movq	-72(%rbp), %rdx
	callq	sre_fgets
	cmpq	$0, %rax
	je	.LBB327_68
# %bb.2:                                #   in Loop: Header=BB327_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	IsBlankline
	cmpl	$0, %eax
	je	.LBB327_5
# %bb.3:                                #   in Loop: Header=BB327_1 Depth=1
	jmp	.LBB327_4
.LBB327_4:                              # %.backedge
                                        #   in Loop: Header=BB327_1 Depth=1
	jmp	.LBB327_1
.LBB327_5:                              #   in Loop: Header=BB327_1 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB327_28
# %bb.6:                                #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.7.775, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_9
# %bb.7:                                #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.8.776, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_9
# %bb.8:
	movl	$16, -12(%rbp)
	jmp	.LBB327_75
.LBB327_9:                              #   in Loop: Header=BB327_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	jne	.LBB327_11
# %bb.10:
	movl	$7, -12(%rbp)
	jmp	.LBB327_75
.LBB327_11:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.9.777, %rsi
	movq	-8(%rbp), %rdi
	movl	$13, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_13
# %bb.12:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.10.778, %rsi
	movq	-8(%rbp), %rdi
	movl	$13, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_14
.LBB327_13:
	movl	$5, -12(%rbp)
	jmp	.LBB327_75
.LBB327_14:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.11.779, %rsi
	movq	-8(%rbp), %rdi
	movl	$14, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_16
# %bb.15:
	movl	$101, -12(%rbp)
	jmp	.LBB327_75
.LBB327_16:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.12.780, %rsi
	movq	-8(%rbp), %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_19
# %bb.17:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.13.781, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_19
# %bb.18:
	movl	$104, -12(%rbp)
	jmp	.LBB327_75
.LBB327_19:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.14.782, %rsi
	movq	-8(%rbp), %rdi
	movl	$23, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_21
# %bb.20:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.15.783, %rsi
	movq	-8(%rbp), %rdi
	movl	$23, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_22
.LBB327_21:
	movl	$103, -12(%rbp)
	jmp	.LBB327_75
.LBB327_22:                             #   in Loop: Header=BB327_1 Depth=1
	movq	-8(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.16.784, %rsi
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB327_27
# %bb.23:                               #   in Loop: Header=BB327_1 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.16.784, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	je	.LBB327_27
# %bb.24:                               #   in Loop: Header=BB327_1 Depth=1
	movq	-48(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	je	.LBB327_27
# %bb.25:                               #   in Loop: Header=BB327_1 Depth=1
	movq	-40(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	je	.LBB327_27
# %bb.26:
	movq	-56(%rbp), %rdi
	callq	free
	movl	$106, -12(%rbp)
	jmp	.LBB327_75
.LBB327_27:                             #   in Loop: Header=BB327_1 Depth=1
	movq	-56(%rbp), %rdi
	callq	free
.LBB327_28:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.17.785, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.29:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.18.786, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.30:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.19.787, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.31:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.20.788, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.32:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.21.789, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.33:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.22.790, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.34:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.23.791, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.35:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.24.792, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.36:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.25.793, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.37:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.26.794, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_39
# %bb.38:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.27.795, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_40
.LBB327_39:
	movl	$102, -12(%rbp)
	jmp	.LBB327_75
.LBB327_40:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.28.796, %rsi
	movq	-8(%rbp), %rdi
	movl	$3, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_42
# %bb.41:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.29.797, %rsi
	movq	-8(%rbp), %rdi
	movl	$6, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_43
.LBB327_42:
	movl	$12, -12(%rbp)
	jmp	.LBB327_75
.LBB327_43:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.6.798, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_47
# %bb.44:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.30.799, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_47
# %bb.45:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.31.800, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_47
# %bb.46:
	movl	$103, -12(%rbp)
	jmp	.LBB327_75
.LBB327_47:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.32.801, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_50
# %bb.48:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.6.798, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB327_50
# %bb.49:
	movl	$5, -12(%rbp)
	jmp	.LBB327_75
.LBB327_50:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.33.802, %rsi
	movq	-8(%rbp), %rdi
	movl	$6, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_52
# %bb.51:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.34.803, %rsi
	movq	-8(%rbp), %rdi
	movl	$6, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_53
.LBB327_52:
	movl	$2, -12(%rbp)
	jmp	.LBB327_75
.LBB327_53:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.35.804, %rsi
	movq	-8(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB327_55
# %bb.54:                               #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.36.805, %rsi
	movq	-8(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB327_56
.LBB327_55:
	movl	$4, -12(%rbp)
	jmp	.LBB327_75
.LBB327_56:                             #   in Loop: Header=BB327_1 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.16.784, %rsi
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB327_58
# %bb.57:                               #   in Loop: Header=BB327_1 Depth=1
	jmp	.LBB327_4
.LBB327_58:                             #   in Loop: Header=BB327_1 Depth=1
	movabsq	$.L.str.37.806, %rdi
	movq	-48(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB327_60
# %bb.59:                               #   in Loop: Header=BB327_1 Depth=1
	jmp	.LBB327_4
.LBB327_60:                             #   in Loop: Header=BB327_1 Depth=1
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.16.784, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB327_62
# %bb.61:                               #   in Loop: Header=BB327_1 Depth=1
	movl	$1, -20(%rbp)
.LBB327_62:                             #   in Loop: Header=BB327_1 Depth=1
	cmpq	$0, -40(%rbp)
	je	.LBB327_65
# %bb.63:                               #   in Loop: Header=BB327_1 Depth=1
	movq	-40(%rbp), %rdi
	callq	Seqtype
	cmpl	$0, %eax
	jne	.LBB327_65
# %bb.64:                               #   in Loop: Header=BB327_1 Depth=1
	movl	$1, -20(%rbp)
.LBB327_65:                             #   in Loop: Header=BB327_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	cmpl	$300, -16(%rbp)         # imm = 0x12C
	jne	.LBB327_67
# %bb.66:
	jmp	.LBB327_69
.LBB327_67:                             #   in Loop: Header=BB327_1 Depth=1
	jmp	.LBB327_4
.LBB327_68:                             # %.loopexit
	jmp	.LBB327_69
.LBB327_69:
	cmpl	$0, -16(%rbp)
	jne	.LBB327_71
# %bb.70:
	movabsq	$.L.str.38.809, %rdi
	movb	$0, %al
	callq	Die
.LBB327_71:
	cmpl	$1, -20(%rbp)
	jne	.LBB327_73
# %bb.72:
	movl	$0, -12(%rbp)
	jmp	.LBB327_74
.LBB327_73:
	movl	$102, -12(%rbp)
.LBB327_74:
	jmp	.LBB327_75
.LBB327_75:
	cmpq	$0, -8(%rbp)
	je	.LBB327_77
# %bb.76:
	movq	-8(%rbp), %rdi
	callq	free
.LBB327_77:
	movq	-72(%rbp), %rdi
	callq	rewind
	movl	-12(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end327:
	.size	SeqfileFormat, .Lfunc_end327-SeqfileFormat
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function SeqfileGetLine
	.type	SeqfileGetLine,@function
SeqfileGetLine:                         # @SeqfileGetLine
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB328_4
# %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	36(%rax), %esi
	movq	-8(%rbp), %rdx
	addq	$40, %rdx
	callq	SSIGetFilePosition
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	je	.LBB328_3
# %bb.2:
	movabsq	$.L.str.115, %rdi
	movb	$0, %al
	callq	Die
.LBB328_3:
	jmp	.LBB328_4
.LBB328_4:
	movq	-8(%rbp), %rdi
	addq	$24, %rdi
	movq	-8(%rbp), %rsi
	addq	$32, %rsi
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	callq	sre_fgets
	cmpq	$0, %rax
	jne	.LBB328_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movb	$0, (%rax)
.LBB328_6:
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end328:
	.size	SeqfileGetLine, .Lfunc_end328-SeqfileGetLine
	.cfi_endproc
                                        # -- End function
	.globl	Seqtype                 # -- Begin function Seqtype
	.p2align	4, 0x90
	.type	Seqtype,@function
Seqtype:                                # @Seqtype
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -48(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -36(%rbp)
.LBB329_1:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-48(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB329_3
# %bb.2:                                #   in Loop: Header=BB329_1 Depth=1
	cmpl	$300, -36(%rbp)         # imm = 0x12C
	setl	%al
.LBB329_3:                              #   in Loop: Header=BB329_1 Depth=1
	testb	$1, %al
	jne	.LBB329_4
	jmp	.LBB329_28
.LBB329_4:                              #   in Loop: Header=BB329_1 Depth=1
	movq	-48(%rbp), %rax
	movsbl	(%rax), %edi
	callq	sre_toupper
	movb	%al, -1(%rbp)
	movsbl	-1(%rbp), %eax
	cmpl	$32, %eax
	je	.LBB329_26
# %bb.5:                                #   in Loop: Header=BB329_1 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$46, %eax
	je	.LBB329_26
# %bb.6:                                #   in Loop: Header=BB329_1 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$95, %eax
	je	.LBB329_26
# %bb.7:                                #   in Loop: Header=BB329_1 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$45, %eax
	je	.LBB329_26
# %bb.8:                                #   in Loop: Header=BB329_1 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$126, %eax
	je	.LBB329_26
# %bb.9:                                #   in Loop: Header=BB329_1 Depth=1
	movq	protonly, %rdi
	movsbl	-1(%rbp), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB329_11
# %bb.10:                               #   in Loop: Header=BB329_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB329_25
.LBB329_11:                             #   in Loop: Header=BB329_1 Depth=1
	movq	primenuc, %rdi
	movsbl	-1(%rbp), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB329_18
# %bb.12:                               #   in Loop: Header=BB329_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movsbl	-1(%rbp), %eax
	cmpl	$84, %eax
	jne	.LBB329_14
# %bb.13:                               #   in Loop: Header=BB329_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB329_17
.LBB329_14:                             #   in Loop: Header=BB329_1 Depth=1
	movsbl	-1(%rbp), %eax
	cmpl	$85, %eax
	jne	.LBB329_16
# %bb.15:                               #   in Loop: Header=BB329_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB329_16:                             #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_17
.LBB329_17:                             #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_24
.LBB329_18:                             #   in Loop: Header=BB329_1 Depth=1
	movq	aminos, %rdi
	movsbl	-1(%rbp), %esi
	callq	strchr
	cmpq	$0, %rax
	je	.LBB329_20
# %bb.19:                               #   in Loop: Header=BB329_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB329_23
.LBB329_20:                             #   in Loop: Header=BB329_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movsbl	-1(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB329_22
# %bb.21:                               #   in Loop: Header=BB329_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB329_22:                             #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_23
.LBB329_23:                             #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_24
.LBB329_24:                             #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_25
.LBB329_25:                             #   in Loop: Header=BB329_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB329_26:                             #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_27
.LBB329_27:                             #   in Loop: Header=BB329_1 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB329_1
.LBB329_28:
	cmpl	$0, -12(%rbp)
	jle	.LBB329_30
# %bb.29:
	movl	$0, -8(%rbp)
	jmp	.LBB329_37
.LBB329_30:
	cmpl	$0, -32(%rbp)
	jle	.LBB329_32
# %bb.31:
	movl	$3, -8(%rbp)
	jmp	.LBB329_37
.LBB329_32:
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB329_36
# %bb.33:
	movl	-24(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB329_35
# %bb.34:
	movl	$2, -8(%rbp)
	jmp	.LBB329_37
.LBB329_35:
	movl	$1, -8(%rbp)
	jmp	.LBB329_37
.LBB329_36:
	movl	$3, -8(%rbp)
.LBB329_37:
	movl	-8(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end329:
	.size	Seqtype, .Lfunc_end329-Seqtype
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileOpenForIndexing  # -- Begin function SeqfileOpenForIndexing
	.p2align	4, 0x90
	.type	SeqfileOpenForIndexing,@function
SeqfileOpenForIndexing:                 # @SeqfileOpenForIndexing
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movl	%ecx, -4(%rbp)
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	movq	-16(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	seqfile_open
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end330:
	.size	SeqfileOpenForIndexing, .Lfunc_end330-SeqfileOpenForIndexing
	.cfi_endproc
                                        # -- End function
	.globl	SeqfilePosition         # -- Begin function SeqfilePosition
	.p2align	4, 0x90
	.type	SeqfilePosition,@function
SeqfilePosition:                        # @SeqfilePosition
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 152(%rax)
	jne	.LBB331_3
# %bb.1:
	movq	-8(%rbp), %rax
	cmpl	$0, 148(%rax)
	jne	.LBB331_3
# %bb.2:
	movq	-8(%rbp), %rax
	cmpl	$100, 144(%rax)
	jle	.LBB331_4
.LBB331_3:
	movabsq	$.L.str.810, %rdi
	movb	$0, %al
	callq	Die
.LBB331_4:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rsi
	callq	SSISetFilePosition
	cmpl	$0, %eax
	je	.LBB331_6
# %bb.5:
	movabsq	$.L.str.1.811, %rdi
	movb	$0, %al
	callq	Die
.LBB331_6:
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end331:
	.size	SeqfilePosition, .Lfunc_end331-SeqfilePosition
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileRewind           # -- Begin function SeqfileRewind
	.p2align	4, 0x90
	.type	SeqfileRewind,@function
SeqfileRewind:                          # @SeqfileRewind
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 152(%rax)
	jne	.LBB332_2
# %bb.1:
	movq	-8(%rbp), %rax
	cmpl	$0, 148(%rax)
	je	.LBB332_3
.LBB332_2:
	movabsq	$.L.str.2.812, %rdi
	movb	$0, %al
	callq	Die
.LBB332_3:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	rewind
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end332:
	.size	SeqfileRewind, .Lfunc_end332-SeqfileRewind
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileLineParameters   # -- Begin function SeqfileLineParameters
	.p2align	4, 0x90
	.type	SeqfileLineParameters,@function
SeqfileLineParameters:                  # @SeqfileLineParameters
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 88(%rax)
	jle	.LBB333_5
# %bb.1:
	movq	-8(%rbp), %rax
	movl	96(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB333_5
# %bb.2:
	movq	-8(%rbp), %rax
	cmpl	$0, 100(%rax)
	jle	.LBB333_5
# %bb.3:
	movq	-8(%rbp), %rax
	movl	108(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jne	.LBB333_5
# %bb.4:
	movq	-8(%rbp), %rax
	movl	100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movl	88(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB333_6
.LBB333_5:
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB333_6:
	popq	%rbp
	retq
.Lfunc_end333:
	.size	SeqfileLineParameters, .Lfunc_end333-SeqfileLineParameters
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileClose            # -- Begin function SeqfileClose
	.p2align	4, 0x90
	.type	SeqfileClose,@function
SeqfileClose:                           # @SeqfileClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 168(%rax)
	je	.LBB334_6
# %bb.1:
	movq	-8(%rbp), %rax
	cmpq	$0, 160(%rax)
	je	.LBB334_3
# %bb.2:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rdi
	callq	MSAFree
.LBB334_3:
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	cmpq	$0, 24(%rax)
	je	.LBB334_5
# %bb.4:
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB334_5:
	movq	-8(%rbp), %rax
	movq	168(%rax), %rdi
	callq	free
	jmp	.LBB334_9
.LBB334_6:
	movq	-8(%rbp), %rax
	cmpl	$0, 152(%rax)
	jne	.LBB334_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fclose
.LBB334_8:
	jmp	.LBB334_9
.LBB334_9:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB334_11
# %bb.10:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB334_11:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB334_13
# %bb.12:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
.LBB334_13:
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end334:
	.size	SeqfileClose, .Lfunc_end334-SeqfileClose
	.cfi_endproc
                                        # -- End function
	.globl	FreeSequence            # -- Begin function FreeSequence
	.p2align	4, 0x90
	.type	FreeSequence,@function
FreeSequence:                           # @FreeSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB335_2
# %bb.1:
	movq	-16(%rbp), %rdi
	callq	free
.LBB335_2:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB335_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	344(%rax), %rdi
	callq	free
.LBB335_4:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB335_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	352(%rax), %rdi
	callq	free
.LBB335_6:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end335:
	.size	FreeSequence, .Lfunc_end335-FreeSequence
	.cfi_endproc
                                        # -- End function
	.globl	SetSeqinfoString        # -- Begin function SetSeqinfoString
	.p2align	4, 0x90
	.type	SetSeqinfoString,@function
SetSeqinfoString:                       # @SetSeqinfoString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -32(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB336_2
# %bb.1:
	movl	$1, -28(%rbp)
	jmp	.LBB336_53
.LBB336_2:
	jmp	.LBB336_3
.LBB336_3:                              # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	jne	.LBB336_5
# %bb.4:                                #   in Loop: Header=BB336_3 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB336_3
.LBB336_5:
	movq	-16(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movl	%eax, -20(%rbp)
.LBB336_6:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB336_11
# %bb.7:                                #   in Loop: Header=BB336_6 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	jne	.LBB336_9
# %bb.8:
	jmp	.LBB336_12
.LBB336_9:                              #   in Loop: Header=BB336_6 Depth=1
	jmp	.LBB336_10
.LBB336_10:                             #   in Loop: Header=BB336_6 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB336_6
.LBB336_11:                             # %.loopexit
	jmp	.LBB336_12
.LBB336_12:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	$0, 1(%rax,%rcx)
	movl	-32(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB336_19
	jmp	.LBB336_13
.LBB336_13:
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB336_22
	jmp	.LBB336_14
.LBB336_14:
	movl	%eax, %ecx
	subl	$4, %ecx
	je	.LBB336_25
	jmp	.LBB336_15
.LBB336_15:
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB336_28
	jmp	.LBB336_16
.LBB336_16:
	movl	%eax, %ecx
	subl	$16, %ecx
	je	.LBB336_36
	jmp	.LBB336_17
.LBB336_17:
	movl	%eax, %ecx
	subl	$32, %ecx
	je	.LBB336_41
	jmp	.LBB336_18
.LBB336_18:
	subl	$256, %eax              # imm = 0x100
	je	.LBB336_46
	jmp	.LBB336_51
.LBB336_19:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB336_21
# %bb.20:
	movq	-8(%rbp), %rdi
	addq	$4, %rdi
	movq	-16(%rbp), %rsi
	movl	$63, %edx
	callq	strncpy
	movq	-8(%rbp), %rax
	movb	$0, 67(%rax)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
.LBB336_21:
	jmp	.LBB336_52
.LBB336_22:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB336_24
# %bb.23:
	movq	-8(%rbp), %rdi
	addq	$68, %rdi
	movq	-16(%rbp), %rsi
	movl	$63, %edx
	callq	strncpy
	movq	-8(%rbp), %rax
	movb	$0, 131(%rax)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
.LBB336_24:
	jmp	.LBB336_52
.LBB336_25:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB336_27
# %bb.26:
	movq	-8(%rbp), %rdi
	addq	$132, %rdi
	movq	-16(%rbp), %rsi
	movl	$63, %edx
	callq	strncpy
	movq	-8(%rbp), %rax
	movb	$0, 195(%rax)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, (%rax)
.LBB336_27:
	jmp	.LBB336_52
.LBB336_28:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB336_35
# %bb.29:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB336_33
# %bb.30:
	movq	-8(%rbp), %rdi
	addq	$196, %rdi
	callq	strlen
	movl	%eax, -24(%rbp)
	cmpl	$126, -24(%rbp)
	jge	.LBB336_32
# %bb.31:
	movabsq	$.L.str.3.819, %rsi
	movl	$127, %eax
	movq	-8(%rbp), %rdi
	addq	$196, %rdi
	subl	-24(%rbp), %eax
	movslq	%eax, %rdx
	callq	strncat
	movl	$127, %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$196, %rdi
	movq	-16(%rbp), %rsi
	subl	-24(%rbp), %eax
	movslq	%eax, %rdx
	callq	strncat
.LBB336_32:
	jmp	.LBB336_34
.LBB336_33:
	movq	-8(%rbp), %rdi
	addq	$196, %rdi
	movq	-16(%rbp), %rsi
	movl	$127, %edx
	callq	strncpy
.LBB336_34:
	movq	-8(%rbp), %rax
	movb	$0, 323(%rax)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$8, %ecx
	movl	%ecx, (%rax)
.LBB336_35:
	jmp	.LBB336_52
.LBB336_36:
	movq	-16(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	jne	.LBB336_38
# %bb.37:
	movl	$5, squid_errno
	movl	$0, -28(%rbp)
	jmp	.LBB336_53
.LBB336_38:
	movq	-16(%rbp), %rdi
	callq	atoi
	movq	-8(%rbp), %rcx
	movl	%eax, 328(%rcx)
	movq	-8(%rbp), %rax
	cmpl	$0, 328(%rax)
	je	.LBB336_40
# %bb.39:
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$16, %ecx
	movl	%ecx, (%rax)
.LBB336_40:
	jmp	.LBB336_52
.LBB336_41:
	movq	-16(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	jne	.LBB336_43
# %bb.42:
	movl	$5, squid_errno
	movl	$0, -28(%rbp)
	jmp	.LBB336_53
.LBB336_43:
	movq	-16(%rbp), %rdi
	callq	atoi
	movq	-8(%rbp), %rcx
	movl	%eax, 332(%rcx)
	movq	-8(%rbp), %rax
	cmpl	$0, 332(%rax)
	je	.LBB336_45
# %bb.44:
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$32, %ecx
	movl	%ecx, (%rax)
.LBB336_45:
	jmp	.LBB336_52
.LBB336_46:
	movq	-16(%rbp), %rdi
	callq	IsInt
	cmpl	$0, %eax
	jne	.LBB336_48
# %bb.47:
	movl	$5, squid_errno
	movl	$0, -28(%rbp)
	jmp	.LBB336_53
.LBB336_48:
	movq	-16(%rbp), %rdi
	callq	atoi
	movq	-8(%rbp), %rcx
	movl	%eax, 336(%rcx)
	movq	-8(%rbp), %rax
	cmpl	$0, 336(%rax)
	je	.LBB336_50
# %bb.49:
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$256, %ecx              # imm = 0x100
	movl	%ecx, (%rax)
.LBB336_50:
	jmp	.LBB336_52
.LBB336_51:
	movabsq	$.L.str.4.820, %rdi
	movl	-32(%rbp), %esi
	movb	$0, %al
	callq	Die
.LBB336_52:
	movl	$1, -28(%rbp)
.LBB336_53:
	movl	-28(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end336:
	.size	SetSeqinfoString, .Lfunc_end336-SetSeqinfoString
	.cfi_endproc
                                        # -- End function
	.globl	SeqinfoCopy             # -- Begin function SeqinfoCopy
	.p2align	4, 0x90
	.type	SeqinfoCopy,@function
SeqinfoCopy:                            # @SeqinfoCopy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB337_2
# %bb.1:
	movq	-16(%rbp), %rdi
	addq	$4, %rdi
	movq	-8(%rbp), %rsi
	addq	$4, %rsi
	callq	strcpy
.LBB337_2:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB337_4
# %bb.3:
	movq	-16(%rbp), %rdi
	addq	$68, %rdi
	movq	-8(%rbp), %rsi
	addq	$68, %rsi
	callq	strcpy
.LBB337_4:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB337_6
# %bb.5:
	movq	-16(%rbp), %rdi
	addq	$132, %rdi
	movq	-8(%rbp), %rsi
	addq	$132, %rsi
	callq	strcpy
.LBB337_6:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB337_8
# %bb.7:
	movq	-16(%rbp), %rdi
	addq	$196, %rdi
	movq	-8(%rbp), %rsi
	addq	$196, %rsi
	callq	strcpy
.LBB337_8:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$64, %eax
	cmpl	$0, %eax
	je	.LBB337_10
# %bb.9:
	movq	-8(%rbp), %rax
	movl	324(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 324(%rcx)
.LBB337_10:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	je	.LBB337_12
# %bb.11:
	movq	-8(%rbp), %rax
	movl	328(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 328(%rcx)
.LBB337_12:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$32, %eax
	cmpl	$0, %eax
	je	.LBB337_14
# %bb.13:
	movq	-8(%rbp), %rax
	movl	332(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 332(%rcx)
.LBB337_14:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB337_16
# %bb.15:
	movq	-8(%rbp), %rax
	movl	336(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 336(%rcx)
.LBB337_16:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB337_18
# %bb.17:
	movq	-8(%rbp), %rax
	movl	340(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 340(%rcx)
.LBB337_18:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB337_20
# %bb.19:
	movq	-8(%rbp), %rax
	movq	344(%rax), %rdi
	callq	Strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 344(%rcx)
.LBB337_20:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB337_22
# %bb.21:
	movq	-8(%rbp), %rax
	movq	352(%rax), %rdi
	callq	Strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 352(%rcx)
.LBB337_22:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end337:
	.size	SeqinfoCopy, .Lfunc_end337-SeqinfoCopy
	.cfi_endproc
                                        # -- End function
	.globl	ToDNA                   # -- Begin function ToDNA
	.p2align	4, 0x90
	.type	ToDNA,@function
ToDNA:                                  # @ToDNA
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
.LBB338_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB338_9
# %bb.2:                                #   in Loop: Header=BB338_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$85, %eax
	jne	.LBB338_4
# %bb.3:                                #   in Loop: Header=BB338_1 Depth=1
	movq	-8(%rbp), %rax
	movb	$84, (%rax)
	jmp	.LBB338_7
.LBB338_4:                              #   in Loop: Header=BB338_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$117, %eax
	jne	.LBB338_6
# %bb.5:                                #   in Loop: Header=BB338_1 Depth=1
	movq	-8(%rbp), %rax
	movb	$116, (%rax)
.LBB338_6:                              #   in Loop: Header=BB338_1 Depth=1
	jmp	.LBB338_7
.LBB338_7:                              #   in Loop: Header=BB338_1 Depth=1
	jmp	.LBB338_8
.LBB338_8:                              #   in Loop: Header=BB338_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB338_1
.LBB338_9:
	popq	%rbp
	retq
.Lfunc_end338:
	.size	ToDNA, .Lfunc_end338-ToDNA
	.cfi_endproc
                                        # -- End function
	.globl	ToRNA                   # -- Begin function ToRNA
	.p2align	4, 0x90
	.type	ToRNA,@function
ToRNA:                                  # @ToRNA
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
.LBB339_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB339_9
# %bb.2:                                #   in Loop: Header=BB339_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$84, %eax
	jne	.LBB339_4
# %bb.3:                                #   in Loop: Header=BB339_1 Depth=1
	movq	-8(%rbp), %rax
	movb	$85, (%rax)
	jmp	.LBB339_7
.LBB339_4:                              #   in Loop: Header=BB339_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$116, %eax
	jne	.LBB339_6
# %bb.5:                                #   in Loop: Header=BB339_1 Depth=1
	movq	-8(%rbp), %rax
	movb	$117, (%rax)
.LBB339_6:                              #   in Loop: Header=BB339_1 Depth=1
	jmp	.LBB339_7
.LBB339_7:                              #   in Loop: Header=BB339_1 Depth=1
	jmp	.LBB339_8
.LBB339_8:                              #   in Loop: Header=BB339_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB339_1
.LBB339_9:
	popq	%rbp
	retq
.Lfunc_end339:
	.size	ToRNA, .Lfunc_end339-ToRNA
	.cfi_endproc
                                        # -- End function
	.globl	ToIUPAC                 # -- Begin function ToIUPAC
	.p2align	4, 0x90
	.type	ToIUPAC,@function
ToIUPAC:                                # @ToIUPAC
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB340_13
# %bb.1:
	jmp	.LBB340_2
.LBB340_2:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB340_12
# %bb.3:                                #   in Loop: Header=BB340_2 Depth=1
	movabsq	$.L.str.5.823, %rdi
	movq	-8(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB340_10
# %bb.4:                                #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB340_10
# %bb.5:                                #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	je	.LBB340_10
# %bb.6:                                #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB340_10
# %bb.7:                                #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB340_10
# %bb.8:                                #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	je	.LBB340_10
# %bb.9:                                #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	movb	$78, (%rax)
.LBB340_10:                             #   in Loop: Header=BB340_2 Depth=1
	jmp	.LBB340_11
.LBB340_11:                             #   in Loop: Header=BB340_2 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB340_2
.LBB340_12:
	jmp	.LBB340_20
.LBB340_13:
	jmp	.LBB340_14
.LBB340_14:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB340_19
# %bb.15:                               #   in Loop: Header=BB340_14 Depth=1
	movabsq	$.L.str.5.823, %rdi
	movq	-8(%rbp), %rax
	movsbl	(%rax), %esi
	callq	strchr
	cmpq	$0, %rax
	jne	.LBB340_17
# %bb.16:                               #   in Loop: Header=BB340_14 Depth=1
	movq	-8(%rbp), %rax
	movb	$78, (%rax)
.LBB340_17:                             #   in Loop: Header=BB340_14 Depth=1
	jmp	.LBB340_18
.LBB340_18:                             #   in Loop: Header=BB340_14 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB340_14
.LBB340_19:
	jmp	.LBB340_20
.LBB340_20:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end340:
	.size	ToIUPAC, .Lfunc_end340-ToIUPAC
	.cfi_endproc
                                        # -- End function
	.globl	ReadSeq                 # -- Begin function ReadSeq
	.p2align	4, 0x90
	.type	ReadSeq,@function
ReadSeq:                                # @ReadSeq
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -36(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -16(%rbp)
	movl	$0, squid_errno
	movq	-8(%rbp), %rax
	cmpl	$100, 144(%rax)
	jle	.LBB341_20
# %bb.1:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	352(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jl	.LBB341_5
# %bb.2:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rdi
	callq	MSAFree
	movq	-8(%rbp), %rax
	movq	168(%rax), %rdi
	callq	MSAFileRead
	movq	-8(%rbp), %rcx
	movq	%rax, 160(%rcx)
	cmpq	$0, %rax
	jne	.LBB341_4
# %bb.3:
	movl	$0, -20(%rbp)
	jmp	.LBB341_49
.LBB341_4:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	$0, 352(%rax)
.LBB341_5:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	24(%rax), %esi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-8(%rbp), %rcx
	addq	$112, %rcx
	callq	MakeDealignedString
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	strlen
	movq	-8(%rbp), %rcx
	movl	%eax, 136(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB341_7
# %bb.6:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB341_7:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	cmpq	$0, 96(%rax)
	je	.LBB341_10
# %bb.8:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB341_10
# %bb.9:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	$4, %edx
	callq	SetSeqinfoString
.LBB341_10:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	cmpq	$0, 104(%rax)
	je	.LBB341_13
# %bb.11:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB341_13
# %bb.12:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB341_13:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB341_16
# %bb.14:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB341_16
# %bb.15:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	24(%rax), %esi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-16(%rbp), %rcx
	addq	$344, %rcx              # imm = 0x158
	callq	MakeDealignedString
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	orl	$512, %ecx              # imm = 0x200
	movl	%ecx, (%rax)
.LBB341_16:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	cmpq	$0, 120(%rax)
	je	.LBB341_19
# %bb.17:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	120(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB341_19
# %bb.18:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	24(%rax), %esi
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movq	120(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	352(%rcx), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-16(%rbp), %rcx
	addq	$352, %rcx              # imm = 0x160
	callq	MakeDealignedString
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1024, %ecx             # imm = 0x400
	movl	%ecx, (%rax)
.LBB341_19:
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	352(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 352(%rax)
	jmp	.LBB341_46
.LBB341_20:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB341_22
# %bb.21:
	movl	$0, -20(%rbp)
	jmp	.LBB341_49
.LBB341_22:
	movq	-8(%rbp), %rax
	cmpl	$-1, 36(%rax)
	jne	.LBB341_24
# %bb.23:
	movl	$501, %edi              # imm = 0x1F5
	movl	$1, %esi
	callq	calloc
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-8(%rbp), %rax
	movl	$500, 140(%rax)         # imm = 0x1F4
	jmp	.LBB341_25
.LBB341_24:
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 140(%rax)
.LBB341_25:
	movq	-8(%rbp), %rax
	movl	$0, 136(%rax)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 120(%rcx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	144(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$15, %ecx
	ja	.LBB341_42
# %bb.26:
	movq	.LJTI341_0(,%rax,8), %rax
	jmpq	*%rax
.LBB341_27:
	movq	-8(%rbp), %rdi
	callq	readIG
	jmp	.LBB341_43
.LBB341_28:
	movq	-8(%rbp), %rdi
	callq	readStrider
	jmp	.LBB341_43
.LBB341_29:
	movq	-8(%rbp), %rdi
	callq	readGenBank
	jmp	.LBB341_43
.LBB341_30:
	movq	-8(%rbp), %rdi
	callq	readPearson
	jmp	.LBB341_43
.LBB341_31:
	movq	-8(%rbp), %rdi
	callq	readEMBL
	jmp	.LBB341_43
.LBB341_32:
	movq	-8(%rbp), %rdi
	callq	readZuker
	jmp	.LBB341_43
.LBB341_33:
	movq	-8(%rbp), %rdi
	callq	readPIR
	jmp	.LBB341_43
.LBB341_34:
	movq	-8(%rbp), %rdi
	callq	readGCGdata
	jmp	.LBB341_43
.LBB341_35:
	jmp	.LBB341_36
.LBB341_36:                             # =>This Inner Loop Header: Depth=1
	movabsq	$.L.str.6.798, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	cmpq	$0, %rax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB341_38
# %bb.37:                               #   in Loop: Header=BB341_36 Depth=1
	movq	-8(%rbp), %rdi
	callq	readUWGCG
.LBB341_38:                             #   in Loop: Header=BB341_36 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
# %bb.39:                               #   in Loop: Header=BB341_36 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB341_36
# %bb.40:
	jmp	.LBB341_43
.LBB341_41:
	jmp	.LBB341_42
.LBB341_42:
	movl	$5, squid_errno
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
	movl	$0, -20(%rbp)
	jmp	.LBB341_49
.LBB341_43:
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB341_45
# %bb.44:
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	movb	$0, (%rax,%rcx)
.LBB341_45:
	jmp	.LBB341_46
.LBB341_46:
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 324(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	orl	$64, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpl	$0, squid_errno
	jne	.LBB341_48
# %bb.47:
	movl	$1, -20(%rbp)
	jmp	.LBB341_49
.LBB341_48:
	movl	$0, -20(%rbp)
.LBB341_49:
	movl	-20(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end341:
	.size	ReadSeq, .Lfunc_end341-ReadSeq
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI341_0:
	.quad	.LBB341_27
	.quad	.LBB341_29
	.quad	.LBB341_42
	.quad	.LBB341_31
	.quad	.LBB341_35
	.quad	.LBB341_28
	.quad	.LBB341_30
	.quad	.LBB341_32
	.quad	.LBB341_41
	.quad	.LBB341_42
	.quad	.LBB341_42
	.quad	.LBB341_33
	.quad	.LBB341_42
	.quad	.LBB341_42
	.quad	.LBB341_42
	.quad	.LBB341_34
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function readIG
	.type	readIG,@function
readIG:                                 # @readIG
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.LBB342_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
# %bb.2:                                #   in Loop: Header=BB342_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movb	$1, %cl
	cmpl	$0, %eax
	jne	.LBB342_6
# %bb.3:                                #   in Loop: Header=BB342_1 Depth=1
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB342_5
# %bb.4:                                #   in Loop: Header=BB342_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$59, %eax
	setne	%cl
.LBB342_5:                              #   in Loop: Header=BB342_1 Depth=1
.LBB342_6:                              #   in Loop: Header=BB342_1 Depth=1
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB342_1
# %bb.7:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB342_11
# %bb.8:
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB342_10
# %bb.9:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB342_10:
	movabsq	$endIG, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
.LBB342_11:
	jmp	.LBB342_12
.LBB342_12:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movb	$1, %cl
	cmpl	$0, %eax
	jne	.LBB342_16
# %bb.13:                               #   in Loop: Header=BB342_12 Depth=1
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB342_15
# %bb.14:                               #   in Loop: Header=BB342_12 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$59, %eax
	sete	%cl
.LBB342_15:                             #   in Loop: Header=BB342_12 Depth=1
.LBB342_16:                             #   in Loop: Header=BB342_12 Depth=1
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB342_17
	jmp	.LBB342_18
.LBB342_17:                             #   in Loop: Header=BB342_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB342_12
.LBB342_18:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end342:
	.size	readIG, .Lfunc_end342-readIG
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readStrider
	.type	readStrider,@function
readStrider:                            # @readStrider
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.LBB343_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB343_3
# %bb.2:                                #   in Loop: Header=BB343_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$59, %eax
	sete	%cl
.LBB343_3:                              #   in Loop: Header=BB343_1 Depth=1
	testb	$1, %cl
	jne	.LBB343_4
	jmp	.LBB343_9
.LBB343_4:                              #   in Loop: Header=BB343_1 Depth=1
	movabsq	$.L.str.117, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$14, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB343_8
# %bb.5:                                #   in Loop: Header=BB343_1 Depth=1
	movabsq	$.L.str.118.828, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$16, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB343_7
# %bb.6:                                #   in Loop: Header=BB343_1 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB343_7:                              #   in Loop: Header=BB343_1 Depth=1
	jmp	.LBB343_8
.LBB343_8:                              #   in Loop: Header=BB343_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB343_1
.LBB343_9:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB343_11
# %bb.10:
	movabsq	$endStrider, %rsi
	movq	-8(%rbp), %rdx
	movl	$1, %edi
	callq	readLoop
.LBB343_11:
	jmp	.LBB343_12
.LBB343_12:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB343_14
# %bb.13:                               #   in Loop: Header=BB343_12 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$59, %eax
	setne	%cl
.LBB343_14:                             #   in Loop: Header=BB343_12 Depth=1
	testb	$1, %cl
	jne	.LBB343_15
	jmp	.LBB343_16
.LBB343_15:                             #   in Loop: Header=BB343_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB343_12
.LBB343_16:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end343:
	.size	readStrider, .Lfunc_end343-readStrider
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readGenBank
	.type	readGenBank,@function
readGenBank:                            # @readGenBank
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
.LBB344_1:                              # =>This Inner Loop Header: Depth=1
	movabsq	$.L.str.120, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB344_3
# %bb.2:                                #   in Loop: Header=BB344_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB344_1
.LBB344_3:
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB344_5
# %bb.4:
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rdx
	movq	%rdx, 56(%rax)
	movq	48(%rcx), %rcx
	movq	%rcx, 64(%rax)
.LBB344_5:
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$12, %rdi
	callq	strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB344_7
# %bb.6:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB344_7:
	movl	$0, -12(%rbp)
.LBB344_8:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB344_9
	jmp	.LBB344_33
.LBB344_9:                              #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB344_14
# %bb.10:                               #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.121.827, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB344_14
# %bb.11:                               #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.43.826, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$12, %rdi
	callq	strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB344_13
# %bb.12:                               #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB344_13:                             #   in Loop: Header=BB344_8 Depth=1
	movl	$1, -12(%rbp)
	jmp	.LBB344_32
.LBB344_14:                             #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB344_19
# %bb.15:                               #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.122, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB344_19
# %bb.16:                               #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$12, %rdi
	callq	strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB344_18
# %bb.17:                               #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	$4, %edx
	callq	SetSeqinfoString
.LBB344_18:                             #   in Loop: Header=BB344_8 Depth=1
	movl	$0, -12(%rbp)
	jmp	.LBB344_31
.LBB344_19:                             #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB344_24
# %bb.20:                               #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.123, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB344_24
# %bb.21:                               #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$12, %rdi
	callq	strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB344_23
# %bb.22:                               #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	$2, %edx
	callq	SetSeqinfoString
.LBB344_23:                             #   in Loop: Header=BB344_8 Depth=1
	movl	$0, -12(%rbp)
	jmp	.LBB344_30
.LBB344_24:                             #   in Loop: Header=BB344_8 Depth=1
	movabsq	$.L.str.124, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$6, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB344_28
# %bb.25:                               #   in Loop: Header=BB344_8 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB344_27
# %bb.26:                               #   in Loop: Header=BB344_8 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB344_27:                             #   in Loop: Header=BB344_8 Depth=1
	jmp	.LBB344_29
.LBB344_28:
	jmp	.LBB344_34
.LBB344_29:                             #   in Loop: Header=BB344_8 Depth=1
	jmp	.LBB344_30
.LBB344_30:                             #   in Loop: Header=BB344_8 Depth=1
	jmp	.LBB344_31
.LBB344_31:                             #   in Loop: Header=BB344_8 Depth=1
	jmp	.LBB344_32
.LBB344_32:                             #   in Loop: Header=BB344_8 Depth=1
	jmp	.LBB344_8
.LBB344_33:                             # %.loopexit
	jmp	.LBB344_34
.LBB344_34:
	movabsq	$endGB, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	$1, 328(%rax)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movl	%eax, 332(%rcx)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movl	%eax, 336(%rcx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	(%rax), %ecx
	orl	$304, %ecx              # imm = 0x130
	movl	%ecx, (%rax)
.LBB344_35:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movb	$1, %cl
	cmpl	$0, %eax
	jne	.LBB344_39
# %bb.36:                               #   in Loop: Header=BB344_35 Depth=1
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB344_38
# %bb.37:                               #   in Loop: Header=BB344_35 Depth=1
	movabsq	$.L.str.120, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	sete	%cl
.LBB344_38:                             #   in Loop: Header=BB344_35 Depth=1
.LBB344_39:                             #   in Loop: Header=BB344_35 Depth=1
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB344_40
	jmp	.LBB344_41
.LBB344_40:                             #   in Loop: Header=BB344_35 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB344_35
.LBB344_41:
	jmp	.LBB344_42
.LBB344_42:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB344_44
# %bb.43:                               #   in Loop: Header=BB344_42 Depth=1
	movabsq	$.L.str.125, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	setne	%cl
.LBB344_44:                             #   in Loop: Header=BB344_42 Depth=1
	testb	$1, %cl
	jne	.LBB344_45
	jmp	.LBB344_46
.LBB344_45:                             #   in Loop: Header=BB344_42 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB344_42
.LBB344_46:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end344:
	.size	readGenBank, .Lfunc_end344-readGenBank
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readPearson
	.type	readPearson,@function
readPearson:                            # @readPearson
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB345_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rdx
	movq	%rdx, 56(%rax)
	movq	48(%rcx), %rcx
	movq	%rcx, 64(%rax)
.LBB345_2:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	je	.LBB345_4
# %bb.3:
	movabsq	$.L.str.126, %rdi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	16(%rax), %edx
	movb	$0, %al
	callq	Die
.LBB345_4:
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB345_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB345_6:
	movabsq	$.L.str.43.826, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB345_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB345_8:
	movabsq	$endPearson, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
.LBB345_9:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movb	$1, %cl
	cmpl	$0, %eax
	jne	.LBB345_13
# %bb.10:                               #   in Loop: Header=BB345_9 Depth=1
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB345_12
# %bb.11:                               #   in Loop: Header=BB345_9 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	sete	%cl
.LBB345_12:                             #   in Loop: Header=BB345_9 Depth=1
.LBB345_13:                             #   in Loop: Header=BB345_9 Depth=1
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB345_14
	jmp	.LBB345_15
.LBB345_14:                             #   in Loop: Header=BB345_9 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB345_9
.LBB345_15:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end345:
	.size	readPearson, .Lfunc_end345-readPearson
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readEMBL
	.type	readEMBL,@function
readEMBL:                               # @readEMBL
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.LBB346_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB346_3
# %bb.2:                                #   in Loop: Header=BB346_1 Depth=1
	movabsq	$.L.str.127, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%cl
.LBB346_3:                              #   in Loop: Header=BB346_1 Depth=1
	testb	$1, %cl
	jne	.LBB346_4
	jmp	.LBB346_5
.LBB346_4:                              #   in Loop: Header=BB346_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB346_1
.LBB346_5:
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB346_7
# %bb.6:
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rdx
	movq	%rdx, 56(%rax)
	movq	48(%rcx), %rcx
	movq	%rcx, 64(%rax)
.LBB346_7:
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$5, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB346_9
# %bb.8:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$2, %edx
	callq	SetSeqinfoString
.LBB346_9:
	jmp	.LBB346_10
.LBB346_10:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB346_15
# %bb.11:                               #   in Loop: Header=BB346_10 Depth=1
	movabsq	$.L.str.128, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB346_15
# %bb.12:                               #   in Loop: Header=BB346_10 Depth=1
	movabsq	$.L.str.129, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$5, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB346_14
# %bb.13:                               #   in Loop: Header=BB346_10 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$4, %edx
	callq	SetSeqinfoString
.LBB346_14:                             #   in Loop: Header=BB346_10 Depth=1
	jmp	.LBB346_21
.LBB346_15:                             #   in Loop: Header=BB346_10 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB346_20
# %bb.16:                               #   in Loop: Header=BB346_10 Depth=1
	movabsq	$.L.str.130, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	-8(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB346_20
# %bb.17:                               #   in Loop: Header=BB346_10 Depth=1
	movabsq	$.L.str.43.826, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$5, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB346_19
# %bb.18:                               #   in Loop: Header=BB346_10 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB346_19:                             #   in Loop: Header=BB346_10 Depth=1
	jmp	.LBB346_20
.LBB346_20:                             #   in Loop: Header=BB346_10 Depth=1
	jmp	.LBB346_21
.LBB346_21:                             #   in Loop: Header=BB346_10 Depth=1
	jmp	.LBB346_22
.LBB346_22:                             #   in Loop: Header=BB346_10 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB346_24
# %bb.23:                               #   in Loop: Header=BB346_10 Depth=1
	movabsq	$.L.str.131, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%cl
.LBB346_24:                             #   in Loop: Header=BB346_10 Depth=1
	testb	$1, %cl
	jne	.LBB346_10
# %bb.25:
	movabsq	$endEMBL, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
	movq	-8(%rbp), %rax
	cmpl	$-1, 36(%rax)
	jne	.LBB346_33
# %bb.26:
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movq	%rax, -16(%rbp)
.LBB346_27:                             # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB346_32
# %bb.28:                               #   in Loop: Header=BB346_27 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB346_30
# %bb.29:                               #   in Loop: Header=BB346_27 Depth=1
	movq	-16(%rbp), %rax
	movb	$78, (%rax)
.LBB346_30:                             #   in Loop: Header=BB346_27 Depth=1
	jmp	.LBB346_31
.LBB346_31:                             #   in Loop: Header=BB346_27 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB346_27
.LBB346_32:
	jmp	.LBB346_33
.LBB346_33:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	$1, 328(%rax)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movl	%eax, 332(%rcx)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movl	%eax, 336(%rcx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	(%rax), %ecx
	orl	$304, %ecx              # imm = 0x130
	movl	%ecx, (%rax)
.LBB346_34:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB346_36
# %bb.35:                               #   in Loop: Header=BB346_34 Depth=1
	movabsq	$.L.str.127, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%cl
.LBB346_36:                             #   in Loop: Header=BB346_34 Depth=1
	testb	$1, %cl
	jne	.LBB346_37
	jmp	.LBB346_38
.LBB346_37:                             #   in Loop: Header=BB346_34 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB346_34
.LBB346_38:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end346:
	.size	readEMBL, .Lfunc_end346-readEMBL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readZuker
	.type	readZuker,@function
readZuker:                              # @readZuker
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movabsq	$.L.str.16.784, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$6, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB347_2
# %bb.1:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB347_2:
	movabsq	$.L.str.43.826, %rsi
	xorl	%edi, %edi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB347_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
.LBB347_4:
	movabsq	$endZuker, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
.LBB347_5:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	movsbl	(%rdx), %edx
	cmpl	$40, %edx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %edx
	andl	%edx, %ecx
	orl	%ecx, %eax
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB347_6
	jmp	.LBB347_7
.LBB347_6:                              #   in Loop: Header=BB347_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB347_5
.LBB347_7:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end347:
	.size	readZuker, .Lfunc_end347-readZuker
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readPIR
	.type	readPIR,@function
readPIR:                                # @readPIR
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.LBB348_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB348_3
# %bb.2:                                #   in Loop: Header=BB348_1 Depth=1
	movabsq	$.L.str.133, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%cl
.LBB348_3:                              #   in Loop: Header=BB348_1 Depth=1
	testb	$1, %cl
	jne	.LBB348_4
	jmp	.LBB348_5
.LBB348_4:                              #   in Loop: Header=BB348_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB348_1
.LBB348_5:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB348_7
# %bb.6:
	jmp	.LBB348_31
.LBB348_7:
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB348_9
# %bb.8:
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rdx
	movq	%rdx, 56(%rax)
	movq	48(%rcx), %rcx
	movq	%rcx, 64(%rax)
.LBB348_9:
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$15, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB348_11
# %bb.10:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$2, %edx
	callq	SetSeqinfoString
.LBB348_11:
	jmp	.LBB348_12
.LBB348_12:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB348_15
# %bb.13:                               #   in Loop: Header=BB348_12 Depth=1
	movabsq	$.L.str.134, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB348_15
# %bb.14:                               #   in Loop: Header=BB348_12 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rsi
	addq	$15, %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
	jmp	.LBB348_21
.LBB348_15:                             #   in Loop: Header=BB348_12 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	jne	.LBB348_20
# %bb.16:                               #   in Loop: Header=BB348_12 Depth=1
	movabsq	$.L.str.122, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$9, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB348_20
# %bb.17:                               #   in Loop: Header=BB348_12 Depth=1
	movabsq	$.L.str.16.784, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$15, %rdi
	callq	strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	je	.LBB348_19
# %bb.18:                               #   in Loop: Header=BB348_12 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	$4, %edx
	callq	SetSeqinfoString
.LBB348_19:                             #   in Loop: Header=BB348_12 Depth=1
	jmp	.LBB348_20
.LBB348_20:                             #   in Loop: Header=BB348_12 Depth=1
	jmp	.LBB348_21
.LBB348_21:                             #   in Loop: Header=BB348_12 Depth=1
	jmp	.LBB348_22
.LBB348_22:                             #   in Loop: Header=BB348_12 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB348_24
# %bb.23:                               #   in Loop: Header=BB348_12 Depth=1
	movabsq	$.L.str.135, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%cl
.LBB348_24:                             #   in Loop: Header=BB348_12 Depth=1
	testb	$1, %cl
	jne	.LBB348_12
# %bb.25:
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movabsq	$endPIR, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	$1, 328(%rax)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movl	%eax, 332(%rcx)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	movl	%eax, 336(%rcx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movl	(%rax), %ecx
	orl	$304, %ecx              # imm = 0x130
	movl	%ecx, (%rax)
.LBB348_26:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB348_28
# %bb.27:                               #   in Loop: Header=BB348_26 Depth=1
	movabsq	$.L.str.133, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%cl
.LBB348_28:                             #   in Loop: Header=BB348_26 Depth=1
	testb	$1, %cl
	jne	.LBB348_29
	jmp	.LBB348_30
.LBB348_29:                             #   in Loop: Header=BB348_26 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB348_26
.LBB348_30:                             # %.loopexit
	jmp	.LBB348_31
.LBB348_31:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end348:
	.size	readPIR, .Lfunc_end348-readPIR
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readGCGdata
	.type	readGCGdata,@function
readGCGdata:                            # @readGCGdata
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.136, %rax
	movq	%rdi, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rsi
	movq	%rax, %rdi
	movl	$2, %edx
	callq	Strparse
	cmpl	$0, %eax
	je	.LBB349_2
# %bb.1:
	movl	$1, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	sqd_parse+8, %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
	movq	sqd_parse+16, %rdi
	callq	atoi
	movl	%eax, -12(%rbp)
	jmp	.LBB349_6
.LBB349_2:
	movabsq	$.L.str.137, %rdi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rsi
	movl	$1, %edx
	callq	Strparse
	cmpl	$0, %eax
	je	.LBB349_4
# %bb.3:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	sqd_parse+8, %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
	jmp	.LBB349_5
.LBB349_4:
	movabsq	$.L.str.138, %rdi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB349_5:
	jmp	.LBB349_6
.LBB349_6:
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
	cmpl	$0, -16(%rbp)
	je	.LBB349_14
# %bb.7:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	140(%rcx), %eax
	jl	.LBB349_11
# %bb.8:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 140(%rcx)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	140(%rax), %eax
	addl	$4, %eax
	movslq	%eax, %rsi
	shlq	$0, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB349_10
# %bb.9:
	movabsq	$.L.str.139, %rdi
	movb	$0, %al
	callq	Die
.LBB349_10:
	jmp	.LBB349_11
.LBB349_11:
	movl	$4, %ecx
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	movl	-12(%rbp), %eax
	addl	$3, %eax
	cltd
	idivl	%ecx
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	movq	%rax, %rcx
	movl	$4, %esi
	movl	-12(%rbp), %eax
	addl	$3, %eax
	cltd
	idivl	%esi
	cltq
	cmpq	%rax, %rcx
	jae	.LBB349_13
# %bb.12:
	movabsq	$.L.str.140, %rdi
	movb	$0, %al
	callq	Die
.LBB349_13:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 136(%rcx)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	movl	-12(%rbp), %esi
	callq	GCGBinaryToSequence
	jmp	.LBB349_15
.LBB349_14:
	movabsq	$endGCGdata, %rsi
	movq	-8(%rbp), %rdx
	xorl	%edi, %edi
	callq	readLoop
.LBB349_15:
	jmp	.LBB349_16
.LBB349_16:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movb	$1, %cl
	cmpl	$0, %eax
	jne	.LBB349_20
# %bb.17:                               #   in Loop: Header=BB349_16 Depth=1
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB349_19
# %bb.18:                               #   in Loop: Header=BB349_16 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	sete	%cl
.LBB349_19:                             #   in Loop: Header=BB349_16 Depth=1
.LBB349_20:                             #   in Loop: Header=BB349_16 Depth=1
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB349_21
	jmp	.LBB349_22
.LBB349_21:                             #   in Loop: Header=BB349_16 Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	jmp	.LBB349_16
.LBB349_22:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end349:
	.size	readGCGdata, .Lfunc_end349-readGCGdata
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readUWGCG
	.type	readUWGCG,@function
readUWGCG:                              # @readUWGCG
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.141, %rsi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 136(%rax)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB350_2
# %bb.1:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
	jmp	.LBB350_5
.LBB350_2:
	movabsq	$.L.str.6.798, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strstr
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB350_4
# %bb.3:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
.LBB350_4:
	jmp	.LBB350_5
.LBB350_5:
	movabsq	$.L.str.116, %rsi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	strtok
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	je	.LBB350_7
# %bb.6:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movq	-32(%rbp), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
.LBB350_7:
	jmp	.LBB350_8
.LBB350_8:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	cmpl	$0, -12(%rbp)
	jne	.LBB350_10
# %bb.9:                                #   in Loop: Header=BB350_8 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rsi
	callq	addseq
.LBB350_10:                             #   in Loop: Header=BB350_8 Depth=1
	jmp	.LBB350_11
.LBB350_11:                             #   in Loop: Header=BB350_8 Depth=1
	cmpl	$0, -12(%rbp)
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB350_8
# %bb.12:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end350:
	.size	readUWGCG, .Lfunc_end350-readUWGCG
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addseq
	.type	addseq,@function
addseq:                                 # @addseq
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$-1, 36(%rax)
	jne	.LBB351_13
# %bb.1:
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	32(%rcx), %eax
	movq	-8(%rbp), %rcx
	cmpl	140(%rcx), %eax
	jle	.LBB351_6
# %bb.2:
	movq	-8(%rbp), %rax
	cmpl	$500, 32(%rax)          # imm = 0x1F4
	jle	.LBB351_4
# %bb.3:
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	jmp	.LBB351_5
.LBB351_4:
	movl	$500, %eax              # imm = 0x1F4
	jmp	.LBB351_5
.LBB351_5:
	movabsq	$.L.str.78.771, %rdi
	movq	-8(%rbp), %rcx
	addl	140(%rcx), %eax
	movl	%eax, 140(%rcx)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	140(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movl	$524, %esi              # imm = 0x20C
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	140(%rcx), %rcx
	movb	$0, (%rax,%rcx)
.LBB351_6:
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	136(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
.LBB351_7:                              # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB351_12
# %bb.8:                                #   in Loop: Header=BB351_7 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB351_11
# %bb.9:                                #   in Loop: Header=BB351_7 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	jne	.LBB351_11
# %bb.10:                               #   in Loop: Header=BB351_7 Depth=1
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movq	-32(%rbp), %rcx
	movb	%al, (%rcx)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
.LBB351_11:                             #   in Loop: Header=BB351_7 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB351_7
.LBB351_12:
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	112(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, 136(%rcx)
	jmp	.LBB351_44
.LBB351_13:
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB351_14:                             # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB351_19
# %bb.15:                               #   in Loop: Header=BB351_14 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB351_18
# %bb.16:                               #   in Loop: Header=BB351_14 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	jne	.LBB351_18
# %bb.17:                               #   in Loop: Header=BB351_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB351_18:                             #   in Loop: Header=BB351_14 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB351_14
.LBB351_19:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	136(%rcx), %eax
	movl	%eax, 136(%rcx)
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 88(%rax)
	je	.LBB351_31
# %bb.20:
	movq	-8(%rbp), %rax
	cmpl	$0, 92(%rax)
	jle	.LBB351_28
# %bb.21:
	movq	-8(%rbp), %rax
	cmpl	$0, 88(%rax)
	jle	.LBB351_24
# %bb.22:
	movq	-8(%rbp), %rax
	movl	92(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	88(%rcx), %eax
	je	.LBB351_24
# %bb.23:
	movq	-8(%rbp), %rax
	movl	$0, 88(%rax)
	jmp	.LBB351_27
.LBB351_24:
	movq	-8(%rbp), %rax
	cmpl	$-1, 88(%rax)
	jne	.LBB351_26
# %bb.25:
	movq	-8(%rbp), %rax
	movl	92(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB351_26:
	jmp	.LBB351_27
.LBB351_27:
	jmp	.LBB351_28
.LBB351_28:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jle	.LBB351_30
# %bb.29:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 96(%rcx)
.LBB351_30:
	jmp	.LBB351_31
.LBB351_31:
	movq	-8(%rbp), %rax
	cmpl	$0, 100(%rax)
	je	.LBB351_43
# %bb.32:
	movq	-8(%rbp), %rax
	cmpl	$0, 104(%rax)
	jle	.LBB351_40
# %bb.33:
	movq	-8(%rbp), %rax
	cmpl	$0, 100(%rax)
	jle	.LBB351_36
# %bb.34:
	movq	-8(%rbp), %rax
	movl	104(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	100(%rcx), %eax
	je	.LBB351_36
# %bb.35:
	movq	-8(%rbp), %rax
	movl	$0, 100(%rax)
	jmp	.LBB351_39
.LBB351_36:
	movq	-8(%rbp), %rax
	cmpl	$-1, 100(%rax)
	jne	.LBB351_38
# %bb.37:
	movq	-8(%rbp), %rax
	movl	104(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 100(%rcx)
.LBB351_38:
	jmp	.LBB351_39
.LBB351_39:
	jmp	.LBB351_40
.LBB351_40:
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 104(%rcx)
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jle	.LBB351_42
# %bb.41:
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 108(%rcx)
.LBB351_42:
	jmp	.LBB351_43
.LBB351_43:
	jmp	.LBB351_44
.LBB351_44:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end351:
	.size	addseq, .Lfunc_end351-addseq
	.cfi_endproc
                                        # -- End function
	.globl	GCGBinaryToSequence     # -- Begin function GCGBinaryToSequence
	.p2align	4, 0x90
	.type	GCGBinaryToSequence,@function
GCGBinaryToSequence:                    # @GCGBinaryToSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$4, %ecx
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB352_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB352_3 Depth 2
	cmpl	$0, -12(%rbp)
	jl	.LBB352_14
# %bb.2:                                #   in Loop: Header=BB352_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
	movl	$3, -8(%rbp)
.LBB352_3:                              #   Parent Loop BB352_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	jl	.LBB352_12
# %bb.4:                                #   in Loop: Header=BB352_3 Depth=2
	movzbl	-1(%rbp), %eax
	andl	$3, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB352_10
# %bb.5:                                #   in Loop: Header=BB352_3 Depth=2
	movq	.LJTI352_0(,%rax,8), %rax
	jmpq	*%rax
.LBB352_6:                              #   in Loop: Header=BB352_3 Depth=2
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$67, (%rax,%rcx)
	jmp	.LBB352_10
.LBB352_7:                              #   in Loop: Header=BB352_3 Depth=2
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$84, (%rax,%rcx)
	jmp	.LBB352_10
.LBB352_8:                              #   in Loop: Header=BB352_3 Depth=2
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$65, (%rax,%rcx)
	jmp	.LBB352_10
.LBB352_9:                              #   in Loop: Header=BB352_3 Depth=2
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$71, (%rax,%rcx)
.LBB352_10:                             #   in Loop: Header=BB352_3 Depth=2
	movsbl	-1(%rbp), %eax
	sarl	$2, %eax
	movb	%al, -1(%rbp)
# %bb.11:                               #   in Loop: Header=BB352_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB352_3
.LBB352_12:                             #   in Loop: Header=BB352_1 Depth=1
	jmp	.LBB352_13
.LBB352_13:                             #   in Loop: Header=BB352_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB352_1
.LBB352_14:
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, %eax
	popq	%rbp
	retq
.Lfunc_end352:
	.size	GCGBinaryToSequence, .Lfunc_end352-GCGBinaryToSequence
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI352_0:
	.quad	.LBB352_6
	.quad	.LBB352_7
	.quad	.LBB352_8
	.quad	.LBB352_9
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function endGCGdata
	.type	endGCGdata,@function
endGCGdata:                             # @endGCGdata
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end353:
	.size	endGCGdata, .Lfunc_end353-endGCGdata
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function readLoop
	.type	readLoop,@function
readLoop:                               # @readLoop
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 136(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 92(%rax)
	cmpl	$0, -20(%rbp)
	je	.LBB354_4
# %bb.1:
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB354_3
# %bb.2:
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rdx
	movq	%rdx, 72(%rax)
	movq	48(%rcx), %rcx
	movq	%rcx, 80(%rax)
.LBB354_3:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rsi
	callq	addseq
	jmp	.LBB354_9
.LBB354_4:
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jl	.LBB354_8
# %bb.5:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	36(%rax), %esi
	movq	-8(%rbp), %rdx
	addq	$72, %rdx
	callq	SSIGetFilePosition
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	je	.LBB354_7
# %bb.6:
	movabsq	$.L.str.115, %rdi
	movb	$0, %al
	callq	Die
.LBB354_7:
	jmp	.LBB354_8
.LBB354_8:
	jmp	.LBB354_9
.LBB354_9:
	jmp	.LBB354_10
.LBB354_10:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	SeqfileGetLine
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB354_13
# %bb.11:                               #   in Loop: Header=BB354_10 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB354_13
# %bb.12:                               #   in Loop: Header=BB354_10 Depth=1
	movl	$1, -12(%rbp)
.LBB354_13:                             #   in Loop: Header=BB354_10 Depth=1
	leaq	-16(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rdi
	callq	*%rax
	orl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB354_15
# %bb.14:                               #   in Loop: Header=BB354_10 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB354_16
.LBB354_15:                             #   in Loop: Header=BB354_10 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rsi
	callq	addseq
.LBB354_16:                             #   in Loop: Header=BB354_10 Depth=1
	jmp	.LBB354_17
.LBB354_17:                             #   in Loop: Header=BB354_10 Depth=1
	cmpl	$0, -12(%rbp)
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB354_10
# %bb.18:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end354:
	.size	readLoop, .Lfunc_end354-readLoop
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endPIR
	.type	endPIR,@function
endPIR:                                 # @endPIR
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.28.796, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-16(%rbp), %rdi
	movq	%rax, %rsi
	movl	$3, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB355_2
# %bb.1:
	movabsq	$.L.str.133, %rsi
	movq	-16(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB355_3
.LBB355_2:
	movl	$1, -4(%rbp)
	jmp	.LBB355_4
.LBB355_3:
	movl	$0, -4(%rbp)
.LBB355_4:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end355:
	.size	endPIR, .Lfunc_end355-endPIR
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endZuker
	.type	endZuker,@function
endZuker:                               # @endZuker
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$40, %eax
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end356:
	.size	endZuker, .Lfunc_end356-endZuker
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endEMBL
	.type	endEMBL,@function
endEMBL:                                # @endEMBL
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.132, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-16(%rbp), %rdi
	movq	%rax, %rsi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end357:
	.size	endEMBL, .Lfunc_end357-endEMBL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endPearson
	.type	endPearson,@function
endPearson:                             # @endPearson
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$62, %eax
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end358:
	.size	endPearson, .Lfunc_end358-endPearson
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endGB
	.type	endGB,@function
endGB:                                  # @endGB
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.119, %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-8(%rbp), %rdi
	movq	%rax, %rsi
	callq	strstr
	movb	$1, %cl
	cmpq	$0, %rax
	jne	.LBB359_2
# %bb.1:
	movabsq	$.L.str.120, %rsi
	movq	-8(%rbp), %rdi
	callq	strstr
	cmpq	-8(%rbp), %rax
	sete	%cl
.LBB359_2:
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end359:
	.size	endGB, .Lfunc_end359-endGB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endStrider
	.type	endStrider,@function
endStrider:                             # @endStrider
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.119, %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-16(%rbp), %rdi
	movq	%rax, %rsi
	callq	strstr
	cmpq	$0, %rax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end360:
	.size	endStrider, .Lfunc_end360-endStrider
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function endIG
	.type	endIG,@function
endIG:                                  # @endIG
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, (%rax)
	movq	-8(%rbp), %rdi
	movl	$49, %esi
	callq	strchr
	movb	$1, %cl
	cmpq	$0, %rax
	jne	.LBB361_2
# %bb.1:
	movq	-8(%rbp), %rdi
	movl	$50, %esi
	callq	strchr
	cmpq	$0, %rax
	setne	%cl
.LBB361_2:
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end361:
	.size	endIG, .Lfunc_end361-endIG
	.cfi_endproc
                                        # -- End function
	.globl	GCGchecksum             # -- Begin function GCGchecksum
	.p2align	4, 0x90
	.type	GCGchecksum,@function
GCGchecksum:                            # @GCGchecksum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
.LBB362_1:                              # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB362_4
# %bb.2:                                #   in Loop: Header=BB362_1 Depth=1
	movl	$57, %ecx
	movl	-24(%rbp), %r14d
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, %ebx
	addl	$1, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	sre_toupper
	movl	$10000, %ecx            # imm = 0x2710
	imull	%eax, %ebx
	addl	%ebx, %r14d
	movl	%r14d, %eax
	cltd
	idivl	%ecx
	movl	%edx, -24(%rbp)
# %bb.3:                                #   in Loop: Header=BB362_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB362_1
.LBB362_4:
	movl	-24(%rbp), %eax
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end362:
	.size	GCGchecksum, .Lfunc_end362-GCGchecksum
	.cfi_endproc
                                        # -- End function
	.globl	GCGMultchecksum         # -- Begin function GCGMultchecksum
	.p2align	4, 0x90
	.type	GCGMultchecksum,@function
GCGMultchecksum:                        # @GCGMultchecksum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
.LBB363_1:                              # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB363_4
# %bb.2:                                #   in Loop: Header=BB363_1 Depth=1
	movl	-24(%rbp), %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %r14
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movq	%r14, %rdi
	movl	%eax, %esi
	callq	GCGchecksum
	movl	$10000, %ecx            # imm = 0x2710
	addl	%eax, %ebx
	movl	%ebx, %eax
	cltd
	idivl	%ecx
	movl	%edx, -24(%rbp)
# %bb.3:                                #   in Loop: Header=BB363_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB363_1
.LBB363_4:
	movl	-24(%rbp), %eax
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end363:
	.size	GCGMultchecksum, .Lfunc_end363-GCGMultchecksum
	.cfi_endproc
                                        # -- End function
	.globl	GuessAlignmentSeqtype   # -- Begin function GuessAlignmentSeqtype
	.p2align	4, 0x90
	.type	GuessAlignmentSeqtype,@function
GuessAlignmentSeqtype:                  # @GuessAlignmentSeqtype
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -16(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB364_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB364_11
# %bb.2:                                #   in Loop: Header=BB364_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	Seqtype
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB364_6
	jmp	.LBB364_3
.LBB364_3:                              #   in Loop: Header=BB364_1 Depth=1
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB364_5
	jmp	.LBB364_4
.LBB364_4:                              #   in Loop: Header=BB364_1 Depth=1
	subl	$3, %eax
	je	.LBB364_7
	jmp	.LBB364_8
.LBB364_5:                              #   in Loop: Header=BB364_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB364_9
.LBB364_6:                              #   in Loop: Header=BB364_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB364_9
.LBB364_7:                              #   in Loop: Header=BB364_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB364_9
.LBB364_8:                              #   in Loop: Header=BB364_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB364_9:                              #   in Loop: Header=BB364_1 Depth=1
	jmp	.LBB364_10
.LBB364_10:                             #   in Loop: Header=BB364_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB364_1
.LBB364_11:
	cmpl	$0, -20(%rbp)
	je	.LBB364_13
# %bb.12:
	movl	$0, -4(%rbp)
	jmp	.LBB364_22
.LBB364_13:
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB364_15
# %bb.14:
	movl	$3, -4(%rbp)
	jmp	.LBB364_22
.LBB364_15:
	movl	-24(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB364_17
# %bb.16:
	movl	$1, -4(%rbp)
	jmp	.LBB364_22
.LBB364_17:
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB364_19
# %bb.18:
	movl	$2, -4(%rbp)
	jmp	.LBB364_22
.LBB364_19:
	cmpl	$0, -8(%rbp)
	jne	.LBB364_21
# %bb.20:
	movl	$2, -4(%rbp)
	jmp	.LBB364_22
.LBB364_21:
	movl	$3, -4(%rbp)
.LBB364_22:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end364:
	.size	GuessAlignmentSeqtype, .Lfunc_end364-GuessAlignmentSeqtype
	.cfi_endproc
                                        # -- End function
	.globl	WriteSimpleFASTA        # -- Begin function WriteSimpleFASTA
	.p2align	4, 0x90
	.type	WriteSimpleFASTA,@function
WriteSimpleFASTA:                       # @WriteSimpleFASTA
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	movl	%eax, -8(%rbp)
	movb	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	je	.LBB365_2
# %bb.1:
	movq	-16(%rbp), %rcx
	jmp	.LBB365_3
.LBB365_2:
	movabsq	$.L.str.40.835, %rcx
	jmp	.LBB365_3
.LBB365_3:
	movabsq	$.L.str.39.836, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB365_4:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB365_7
# %bb.5:                                #   in Loop: Header=BB365_4 Depth=1
	leaq	-112(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movl	$60, %edx
	callq	strncpy
	movabsq	$.L.str.41.837, %rsi
	leaq	-112(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
# %bb.6:                                #   in Loop: Header=BB365_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$60, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB365_4
.LBB365_7:
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end365:
	.size	WriteSimpleFASTA, .Lfunc_end365-WriteSimpleFASTA
	.cfi_endproc
                                        # -- End function
	.globl	WriteSeq                # -- Begin function WriteSeq
	.p2align	4, 0x90
	.type	WriteSeq,@function
WriteSeq:                               # @WriteSeq
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$336, %rsp              # imm = 0x150
	movq	%rdi, -16(%rbp)
	movl	%esi, -100(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -8(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$50, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$64, %eax
	cmpl	$0, %eax
	je	.LBB366_2
# %bb.1:
	movq	-8(%rbp), %rax
	movslq	324(%rax), %rax
	jmp	.LBB366_3
.LBB366_2:
	movq	-88(%rbp), %rdi
	callq	strlen
.LBB366_3:
	movl	%eax, -24(%rbp)
	cmpl	$100, -100(%rbp)
	jle	.LBB366_5
# %bb.4:
	movabsq	$.L.str.42.838, %rdi
	movb	$0, %al
	callq	Die
.LBB366_5:
	leaq	-66(%rbp), %rdi
	movl	$.L.str.40.835, %esi
	callq	strcpy
	movl	$0, -32(%rbp)
	movq	-88(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	GCGchecksum
	movl	%eax, -52(%rbp)
	movl	-100(%rbp), %eax
	movq	%rax, %rcx
	subq	$16, %rcx
	ja	.LBB366_77
# %bb.6:
	movq	.LJTI366_0(,%rax,8), %rax
	jmpq	*%rax
.LBB366_7:
	leaq	-66(%rbp), %rdi
	movl	$.L.str.43.826, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_8:
	movabsq	$.L.str.44.839, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movl	-24(%rbp), %ecx
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB366_10
# %bb.9:
	movq	-8(%rbp), %rdx
	addq	$132, %rdx
	jmp	.LBB366_11
.LBB366_10:
	movabsq	$.L.str.46.840, %rdx
	jmp	.LBB366_11
.LBB366_11:
	movabsq	$.L.str.45.841, %rsi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_13
# %bb.12:
	movq	-8(%rbp), %rdx
	addq	$196, %rdx
	jmp	.LBB366_14
.LBB366_13:
	movabsq	$.L.str.46.840, %rdx
	jmp	.LBB366_14
.LBB366_14:
	movabsq	$.L.str.47.842, %rsi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB366_16
# %bb.15:
	movq	-8(%rbp), %rdx
	addq	$68, %rdx
	jmp	.LBB366_17
.LBB366_16:
	movabsq	$.L.str.46.840, %rdx
	jmp	.LBB366_17
.LBB366_17:
	movabsq	$.L.str.48.843, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.49.844, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	leaq	-66(%rbp), %rdi
	movl	$11, -40(%rbp)
	movl	$1, -44(%rbp)
	movl	$.L.str.50.845, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_18:
	movabsq	$.L.str.51.846, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movl	-24(%rbp), %ecx
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_20
# %bb.19:
	movq	-8(%rbp), %rdx
	addq	$196, %rdx
	jmp	.LBB366_21
.LBB366_20:
	movabsq	$.L.str.52.772, %rdx
	jmp	.LBB366_21
.LBB366_21:
	movabsq	$.L.str.41.837, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB366_82
.LBB366_22:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB366_24
# %bb.23:
	movq	-8(%rbp), %rdx
	addq	$68, %rdx
	jmp	.LBB366_25
.LBB366_24:
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
.LBB366_25:
	movabsq	$.L.str.53.847, %rsi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_27
# %bb.26:
	movq	-8(%rbp), %rdx
	addq	$196, %rdx
	jmp	.LBB366_28
.LBB366_27:
	movabsq	$.L.str.52.772, %rdx
	jmp	.LBB366_28
.LBB366_28:
	movabsq	$.L.str.54.848, %rsi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB366_30
# %bb.29:
	movq	-8(%rbp), %rdx
	addq	$132, %rdx
	jmp	.LBB366_31
.LBB366_30:
	movabsq	$.L.str.52.772, %rdx
	jmp	.LBB366_31
.LBB366_31:
	movabsq	$.L.str.55.849, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.56.850, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	324(%rax), %edx
	movl	-52(%rbp), %ecx
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.57.851, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.58.852, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	leaq	-66(%rbp), %rdi
	movl	$2, -40(%rbp)
	movl	$1, -44(%rbp)
	movl	$30, -48(%rbp)
	movl	$.L.str.59.853, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_32:
	movabsq	$.L.str.60.854, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movb	$0, %al
	callq	fprintf
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$310, %eax              # imm = 0x136
	cmpl	$0, %eax
	je	.LBB366_49
# %bb.33:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB366_35
# %bb.34:
	movq	-8(%rbp), %rdx
	addq	$68, %rdx
	jmp	.LBB366_36
.LBB366_35:
	movabsq	$.L.str.52.772, %rdx
	jmp	.LBB366_36
.LBB366_36:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB366_38
# %bb.37:
	movq	-8(%rbp), %rcx
	addq	$132, %rcx
	jmp	.LBB366_39
.LBB366_38:
	movabsq	$.L.str.52.772, %rcx
	jmp	.LBB366_39
.LBB366_39:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	je	.LBB366_41
# %bb.40:
	movq	-8(%rbp), %rax
	movl	328(%rax), %r8d
	jmp	.LBB366_42
.LBB366_41:
	xorl	%r8d, %r8d
	jmp	.LBB366_42
.LBB366_42:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$32, %eax
	cmpl	$0, %eax
	je	.LBB366_44
# %bb.43:
	movq	-8(%rbp), %rax
	movl	332(%rax), %r9d
	jmp	.LBB366_45
.LBB366_44:
	xorl	%r9d, %r9d
	jmp	.LBB366_45
.LBB366_45:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB366_47
# %bb.46:
	movq	-8(%rbp), %rax
	movl	336(%rax), %eax
	jmp	.LBB366_48
.LBB366_47:
	xorl	%eax, %eax
	jmp	.LBB366_48
.LBB366_48:
	movabsq	$.L.str.61.855, %rsi
	movl	%eax, (%rsp)
	movb	$0, %al
	callq	fprintf
.LBB366_49:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_51
# %bb.50:
	movabsq	$.L.str.62.856, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$196, %rdx
	movb	$0, %al
	callq	fprintf
.LBB366_51:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB366_53
# %bb.52:
	movabsq	$.L.str.63.857, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$1, -92(%rbp)
	jmp	.LBB366_54
.LBB366_53:
	movabsq	$.L.str.64.858, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB366_54:
	leaq	-66(%rbp), %rdi
	movl	$1, -44(%rbp)
	movl	$.L.str.65.859, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_55:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB366_57
# %bb.56:
	movq	-8(%rbp), %rdx
	addq	$68, %rdx
	jmp	.LBB366_58
.LBB366_57:
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
.LBB366_58:
	movabsq	$.L.str.66.860, %rsi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB366_60
# %bb.59:
	movq	-8(%rbp), %rdx
	addq	$132, %rdx
	jmp	.LBB366_61
.LBB366_60:
	movabsq	$.L.str.52.772, %rdx
	jmp	.LBB366_61
.LBB366_61:
	movabsq	$.L.str.67.861, %rsi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_63
# %bb.62:
	movq	-8(%rbp), %rdx
	addq	$196, %rdx
	jmp	.LBB366_64
.LBB366_63:
	movabsq	$.L.str.52.772, %rdx
	jmp	.LBB366_64
.LBB366_64:
	movabsq	$.L.str.68.862, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.69.863, %rsi
	movq	-16(%rbp), %rdi
	movl	-24(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	leaq	-66(%rbp), %rdi
	movl	$.L.str.50.845, %esi
	callq	strcpy
	movl	$5, -76(%rbp)
	movl	$11, -40(%rbp)
	jmp	.LBB366_82
.LBB366_65:
	movabsq	$.L.str.41.837, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movb	$0, %al
	callq	fprintf
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB366_67
# %bb.66:
	movabsq	$.L.str.45.841, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$132, %rdx
	movb	$0, %al
	callq	fprintf
.LBB366_67:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_69
# %bb.68:
	movabsq	$.L.str.47.842, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$196, %rdx
	movb	$0, %al
	callq	fprintf
.LBB366_69:
	movabsq	$.L.str.70.864, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movl	-24(%rbp), %ecx
	movl	-52(%rbp), %r8d
	movb	$0, %al
	callq	fprintf
	leaq	-66(%rbp), %rdi
	movl	$11, -40(%rbp)
	movl	$1, -44(%rbp)
	movl	$.L.str.43.826, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_70:
	movabsq	$.L.str.71.865, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.72.866, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movl	-24(%rbp), %ecx
	movl	-52(%rbp), %r8d
	movb	$0, %al
	callq	fprintf
	leaq	-66(%rbp), %rdi
	movl	$.L.str.50.845, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_71:
	movl	$1, -72(%rbp)
.LBB366_72:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_74
# %bb.73:
	movq	-8(%rbp), %rcx
	addq	$196, %rcx
	jmp	.LBB366_75
.LBB366_74:
	movabsq	$.L.str.40.835, %rcx
	jmp	.LBB366_75
.LBB366_75:
	movabsq	$.L.str.73.867, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.41.837, %rsi
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movb	$0, %al
	callq	fprintf
	leaq	-66(%rbp), %rdi
	movl	$.L.str.74.868, %esi
	callq	strcpy
	jmp	.LBB366_82
.LBB366_76:
	jmp	.LBB366_82
.LBB366_77:
	jmp	.LBB366_78
.LBB366_78:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	addq	$4, %rdx
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB366_80
# %bb.79:
	movq	-8(%rbp), %rcx
	addq	$196, %rcx
	jmp	.LBB366_81
.LBB366_80:
	movabsq	$.L.str.40.835, %rcx
	jmp	.LBB366_81
.LBB366_81:
	movabsq	$.L.str.39.836, %rsi
	movb	$0, %al
	callq	fprintf
.LBB366_82:
	cmpl	$1, -72(%rbp)
	jne	.LBB366_84
# %bb.83:
	movq	-88(%rbp), %rdi
	callq	s2upper
.LBB366_84:
	cmpl	$2, -72(%rbp)
	jne	.LBB366_86
# %bb.85:
	movq	-88(%rbp), %rdi
	callq	s2lower
.LBB366_86:
	cmpl	$100, -48(%rbp)
	jge	.LBB366_88
# %bb.87:
	movl	-48(%rbp), %eax
	jmp	.LBB366_89
.LBB366_88:
	movl	$100, %eax
	jmp	.LBB366_89
.LBB366_89:
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -20(%rbp)
	movl	$1, -96(%rbp)
	movl	$0, -56(%rbp)
.LBB366_90:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB366_97 Depth 2
                                        #     Child Loop BB366_114 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB366_127
# %bb.91:                               #   in Loop: Header=BB366_90 Depth=1
	cmpl	$0, -32(%rbp)
	jge	.LBB366_93
# %bb.92:                               #   in Loop: Header=BB366_90 Depth=1
	movl	$0, -32(%rbp)
	jmp	.LBB366_102
.LBB366_93:                             #   in Loop: Header=BB366_90 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB366_101
# %bb.94:                               #   in Loop: Header=BB366_90 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB366_96
# %bb.95:                               #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.75.869, %rsi
	movq	-16(%rbp), %rdi
	movl	-96(%rbp), %edx
	movb	$0, %al
	callq	fprintf
.LBB366_96:                             #   in Loop: Header=BB366_90 Depth=1
	movl	$0, -36(%rbp)
.LBB366_97:                             #   Parent Loop BB366_90 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB366_100
# %bb.98:                               #   in Loop: Header=BB366_97 Depth=2
	movq	-16(%rbp), %rsi
	movl	$32, %edi
	callq	fputc
# %bb.99:                               #   in Loop: Header=BB366_97 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB366_97
.LBB366_100:                            #   in Loop: Header=BB366_90 Depth=1
	jmp	.LBB366_101
.LBB366_101:                            #   in Loop: Header=BB366_90 Depth=1
	jmp	.LBB366_102
.LBB366_102:                            #   in Loop: Header=BB366_90 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB366_105
# %bb.103:                              #   in Loop: Header=BB366_90 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-40(%rbp)
	cmpl	$1, %edx
	jne	.LBB366_105
# %bb.104:                              #   in Loop: Header=BB366_90 Depth=1
	movslq	-20(%rbp), %rax
	movb	$32, -208(%rbp,%rax)
	movslq	-20(%rbp), %rax
	movb	$32, -320(%rbp,%rax)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB366_105:                            #   in Loop: Header=BB366_90 Depth=1
	movq	-88(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -208(%rbp,%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB366_107
# %bb.106:                              #   in Loop: Header=BB366_90 Depth=1
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-28(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	jmp	.LBB366_108
.LBB366_107:                            #   in Loop: Header=BB366_90 Depth=1
	movl	$46, %eax
	jmp	.LBB366_108
.LBB366_108:                            #   in Loop: Header=BB366_90 Depth=1
	movslq	-20(%rbp), %rcx
	movb	%al, -320(%rbp,%rcx)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB366_110
# %bb.109:                              #   in Loop: Header=BB366_90 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB366_126
.LBB366_110:                            #   in Loop: Header=BB366_90 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, -320(%rbp,%rax)
	movslq	-20(%rbp), %rax
	movb	$0, -208(%rbp,%rax)
	movl	$0, -20(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$0, -92(%rbp)
	je	.LBB366_121
# %bb.111:                              #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.41.837, %rsi
	leaq	-208(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	cmpl	$0, -44(%rbp)
	je	.LBB366_113
# %bb.112:                              #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.76.870, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB366_113:                            #   in Loop: Header=BB366_90 Depth=1
	movl	$0, -36(%rbp)
.LBB366_114:                            #   Parent Loop BB366_90 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB366_117
# %bb.115:                              #   in Loop: Header=BB366_114 Depth=2
	movq	-16(%rbp), %rsi
	movl	$32, %edi
	callq	fputc
# %bb.116:                              #   in Loop: Header=BB366_114 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB366_114
.LBB366_117:                            #   in Loop: Header=BB366_90 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB366_119
# %bb.118:                              #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.77.871, %rsi
	leaq	-66(%rbp), %rcx
	leaq	-320(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB366_120
.LBB366_119:                            #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.41.837, %rsi
	leaq	-320(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB366_120:                            #   in Loop: Header=BB366_90 Depth=1
	jmp	.LBB366_125
.LBB366_121:                            #   in Loop: Header=BB366_90 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB366_123
# %bb.122:                              #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.77.871, %rsi
	leaq	-66(%rbp), %rcx
	leaq	-208(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB366_124
.LBB366_123:                            #   in Loop: Header=BB366_90 Depth=1
	movabsq	$.L.str.41.837, %rsi
	leaq	-208(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB366_124:                            #   in Loop: Header=BB366_90 Depth=1
	jmp	.LBB366_125
.LBB366_125:                            #   in Loop: Header=BB366_90 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB366_126:                            #   in Loop: Header=BB366_90 Depth=1
	jmp	.LBB366_90
.LBB366_127:
	movl	-56(%rbp), %eax
	addq	$336, %rsp              # imm = 0x150
	popq	%rbp
	retq
.Lfunc_end366:
	.size	WriteSeq, .Lfunc_end366-WriteSeq
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI366_0:
	.quad	.LBB366_7
	.quad	.LBB366_72
	.quad	.LBB366_8
	.quad	.LBB366_77
	.quad	.LBB366_55
	.quad	.LBB366_65
	.quad	.LBB366_70
	.quad	.LBB366_78
	.quad	.LBB366_71
	.quad	.LBB366_77
	.quad	.LBB366_77
	.quad	.LBB366_77
	.quad	.LBB366_22
	.quad	.LBB366_76
	.quad	.LBB366_32
	.quad	.LBB366_77
	.quad	.LBB366_18
                                        # -- End function
	.text
	.globl	ReadMultipleRseqs       # -- Begin function ReadMultipleRseqs
	.p2align	4, 0x90
	.type	ReadMultipleRseqs,@function
ReadMultipleRseqs:                      # @ReadMultipleRseqs
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movabsq	$.L.str.78.771, %rax
	movq	%rdi, -80(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -56(%rbp)
	movl	$0, -8(%rbp)
	movl	$16, -4(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$1732, %esi             # imm = 0x6C4
	callq	sre_malloc
	movabsq	$.L.str.78.771, %rdi
	movq	%rax, -24(%rbp)
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rdx        # imm = 0x168
	movl	$1733, %esi             # imm = 0x6C5
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rdi
	movl	-44(%rbp), %esi
	xorl	%edx, %edx
	callq	SeqfileOpen
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB367_2
# %bb.1:
	movl	$0, -12(%rbp)
	jmp	.LBB367_8
.LBB367_2:
	jmp	.LBB367_3
.LBB367_3:                              # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rdi
	movq	-40(%rbp), %rax
	movl	144(%rax), %esi
	movq	-24(%rbp), %rdx
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdx
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rcx
	callq	ReadSeq
	cmpl	$0, %eax
	je	.LBB367_7
# %bb.4:                                #   in Loop: Header=BB367_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jne	.LBB367_6
# %bb.5:                                #   in Loop: Header=BB367_3 Depth=1
	movabsq	$.L.str.78.771, %rdi
	movl	-4(%rbp), %eax
	addl	$16, %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rdx
	movslq	-4(%rbp), %rcx
	shlq	$3, %rcx
	movl	$1742, %esi             # imm = 0x6CE
	callq	sre_realloc
	movabsq	$.L.str.78.771, %rdi
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdx
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rcx        # imm = 0x168
	movl	$1743, %esi             # imm = 0x6CF
	callq	sre_realloc
	movq	%rax, -32(%rbp)
.LBB367_6:                              #   in Loop: Header=BB367_3 Depth=1
	jmp	.LBB367_3
.LBB367_7:
	movq	-40(%rbp), %rdi
	callq	SeqfileClose
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-8(%rbp), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$1, -12(%rbp)
.LBB367_8:
	movl	-12(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end367:
	.size	ReadMultipleRseqs, .Lfunc_end367-ReadMultipleRseqs
	.cfi_endproc
                                        # -- End function
	.globl	String2SeqfileFormat    # -- Begin function String2SeqfileFormat
	.p2align	4, 0x90
	.type	String2SeqfileFormat,@function
String2SeqfileFormat:                   # @String2SeqfileFormat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movl	$0, -4(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB368_2
# %bb.1:
	movl	$0, -20(%rbp)
	jmp	.LBB368_59
.LBB368_2:
	movq	-32(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	s2upper
	movq	-16(%rbp), %rdi
	movl	$.L.str.79.874, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_4
# %bb.3:
	movl	$7, -4(%rbp)
	jmp	.LBB368_58
.LBB368_4:
	movq	-16(%rbp), %rdi
	movl	$.L.str.80.875, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_6
# %bb.5:
	movl	$2, -4(%rbp)
	jmp	.LBB368_57
.LBB368_6:
	movq	-16(%rbp), %rdi
	movl	$.L.str.81.876, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_8
# %bb.7:
	movl	$4, -4(%rbp)
	jmp	.LBB368_56
.LBB368_8:
	movq	-16(%rbp), %rdi
	movl	$.L.str.82.877, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_10
# %bb.9:
	movl	$5, -4(%rbp)
	jmp	.LBB368_55
.LBB368_10:
	movq	-16(%rbp), %rdi
	movl	$.L.str.83.878, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_12
# %bb.11:
	movl	$16, -4(%rbp)
	jmp	.LBB368_54
.LBB368_12:
	movq	-16(%rbp), %rdi
	movl	$.L.str.84.879, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_14
# %bb.13:
	movl	$13, -4(%rbp)
	jmp	.LBB368_53
.LBB368_14:
	movq	-16(%rbp), %rdi
	movl	$.L.str.85.880, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_16
# %bb.15:
	movl	$1, -4(%rbp)
	jmp	.LBB368_52
.LBB368_16:
	movq	-16(%rbp), %rdi
	movl	$.L.str.86.881, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_18
# %bb.17:
	movl	$6, -4(%rbp)
	jmp	.LBB368_51
.LBB368_18:
	movq	-16(%rbp), %rdi
	movl	$.L.str.87.882, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_20
# %bb.19:
	movl	$9, -4(%rbp)
	jmp	.LBB368_50
.LBB368_20:
	movq	-16(%rbp), %rdi
	movl	$.L.str.88.883, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_22
# %bb.21:
	movl	$8, -4(%rbp)
	jmp	.LBB368_49
.LBB368_22:
	movq	-16(%rbp), %rdi
	movl	$.L.str.89.884, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_24
# %bb.23:
	movl	$12, -4(%rbp)
	jmp	.LBB368_48
.LBB368_24:
	movq	-16(%rbp), %rdi
	movl	$.L.str.90.885, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_26
# %bb.25:
	movl	$14, -4(%rbp)
	jmp	.LBB368_47
.LBB368_26:
	movq	-16(%rbp), %rdi
	movl	$.L.str.91.886, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_28
# %bb.27:
	movl	$101, -4(%rbp)
	jmp	.LBB368_46
.LBB368_28:
	movq	-16(%rbp), %rdi
	movl	$.L.str.92.887, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_30
# %bb.29:
	movl	$102, -4(%rbp)
	jmp	.LBB368_45
.LBB368_30:
	movq	-16(%rbp), %rdi
	movl	$.L.str.93.888, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_32
# %bb.31:
	movl	$103, -4(%rbp)
	jmp	.LBB368_44
.LBB368_32:
	movq	-16(%rbp), %rdi
	movl	$.L.str.12.780, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_34
# %bb.33:
	movl	$104, -4(%rbp)
	jmp	.LBB368_43
.LBB368_34:
	movq	-16(%rbp), %rdi
	movl	$.L.str.94, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_36
# %bb.35:
	movl	$105, -4(%rbp)
	jmp	.LBB368_42
.LBB368_36:
	movq	-16(%rbp), %rdi
	movl	$.L.str.95, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_38
# %bb.37:
	movl	$106, -4(%rbp)
	jmp	.LBB368_41
.LBB368_38:
	movq	-16(%rbp), %rdi
	movl	$.L.str.96, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB368_40
# %bb.39:
	movl	$107, -4(%rbp)
.LBB368_40:
	jmp	.LBB368_41
.LBB368_41:
	jmp	.LBB368_42
.LBB368_42:
	jmp	.LBB368_43
.LBB368_43:
	jmp	.LBB368_44
.LBB368_44:
	jmp	.LBB368_45
.LBB368_45:
	jmp	.LBB368_46
.LBB368_46:
	jmp	.LBB368_47
.LBB368_47:
	jmp	.LBB368_48
.LBB368_48:
	jmp	.LBB368_49
.LBB368_49:
	jmp	.LBB368_50
.LBB368_50:
	jmp	.LBB368_51
.LBB368_51:
	jmp	.LBB368_52
.LBB368_52:
	jmp	.LBB368_53
.LBB368_53:
	jmp	.LBB368_54
.LBB368_54:
	jmp	.LBB368_55
.LBB368_55:
	jmp	.LBB368_56
.LBB368_56:
	jmp	.LBB368_57
.LBB368_57:
	jmp	.LBB368_58
.LBB368_58:
	movq	-16(%rbp), %rdi
	callq	free
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB368_59:
	movl	-20(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end368:
	.size	String2SeqfileFormat, .Lfunc_end368-String2SeqfileFormat
	.cfi_endproc
                                        # -- End function
	.globl	SeqfileFormat2String    # -- Begin function SeqfileFormat2String
	.p2align	4, 0x90
	.type	SeqfileFormat2String,@function
SeqfileFormat2String:                   # @SeqfileFormat2String
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$107, %rcx
	ja	.LBB369_22
# %bb.1:
	movq	.LJTI369_0(,%rax,8), %rax
	jmpq	*%rax
.LBB369_2:
	movabsq	$.L.str.97, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_3:
	movabsq	$.L.str.79.874, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_4:
	movabsq	$.L.str.98, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_5:
	movabsq	$.L.str.81.876, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_6:
	movabsq	$.L.str.82.877, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_7:
	movabsq	$.L.str.99, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_8:
	movabsq	$.L.str.100, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_9:
	movabsq	$.L.str.101, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_10:
	movabsq	$.L.str.102, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_11:
	movabsq	$.L.str.103, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_12:
	movabsq	$.L.str.104, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_13:
	movabsq	$.L.str.89.884, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_14:
	movabsq	$.L.str.90.885, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_15:
	movabsq	$.L.str.105, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_16:
	movabsq	$.L.str.92.887, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_17:
	movabsq	$.L.str.93.888, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_18:
	movabsq	$.L.str.106, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_19:
	movabsq	$.L.str.107, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_20:
	movabsq	$.L.str.108, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_21:
	movabsq	$.L.str.96, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB369_24
.LBB369_22:
	movabsq	$.L.str.109, %rdi
	movb	$0, %al
	callq	Die
# %bb.23:
	movq	$0, -8(%rbp)
.LBB369_24:
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end369:
	.size	SeqfileFormat2String, .Lfunc_end369-SeqfileFormat2String
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI369_0:
	.quad	.LBB369_2
	.quad	.LBB369_9
	.quad	.LBB369_4
	.quad	.LBB369_22
	.quad	.LBB369_5
	.quad	.LBB369_6
	.quad	.LBB369_10
	.quad	.LBB369_3
	.quad	.LBB369_12
	.quad	.LBB369_11
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_13
	.quad	.LBB369_8
	.quad	.LBB369_14
	.quad	.LBB369_22
	.quad	.LBB369_7
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_22
	.quad	.LBB369_15
	.quad	.LBB369_16
	.quad	.LBB369_17
	.quad	.LBB369_18
	.quad	.LBB369_19
	.quad	.LBB369_20
	.quad	.LBB369_21
                                        # -- End function
	.text
	.globl	MSAToSqinfo             # -- Begin function MSAToSqinfo
	.p2align	4, 0x90
	.type	MSAToSqinfo,@function
MSAToSqinfo:                            # @MSAToSqinfo
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.78.771, %rax
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rcx
	movslq	28(%rcx), %rcx
	imulq	$360, %rcx, %rdx        # imm = 0x168
	movq	%rax, %rdi
	movl	$1857, %esi             # imm = 0x741
	callq	sre_malloc
	movq	%rax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB370_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB370_10
# %bb.2:                                #   in Loop: Header=BB370_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rdi
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	$1, %edx
	callq	SetSeqinfoString
	movq	-32(%rbp), %rbx
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rbx
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	MSAGetSeqAccession
	movq	%rbx, %rdi
	movq	%rax, %rsi
	movl	$4, %edx
	callq	SetSeqinfoString
	movq	-32(%rbp), %rbx
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rbx
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	MSAGetSeqDescription
	movq	%rbx, %rdi
	movq	%rax, %rsi
	movl	$8, %edx
	callq	SetSeqinfoString
	movq	-24(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB370_5
# %bb.3:                                #   in Loop: Header=BB370_1 Depth=1
	movq	-24(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB370_5
# %bb.4:                                #   in Loop: Header=BB370_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movl	24(%rax), %esi
	movq	-24(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rcx
	addq	$344, %rcx              # imm = 0x158
	callq	MakeDealignedString
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %ecx
	orl	$512, %ecx              # imm = 0x200
	movl	%ecx, (%rax)
.LBB370_5:                              #   in Loop: Header=BB370_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB370_8
# %bb.6:                                #   in Loop: Header=BB370_1 Depth=1
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB370_8
# %bb.7:                                #   in Loop: Header=BB370_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movl	24(%rax), %esi
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rcx
	addq	$352, %rcx              # imm = 0x160
	callq	MakeDealignedString
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %ecx
	orl	$1024, %ecx             # imm = 0x400
	movl	%ecx, (%rax)
.LBB370_8:                              #   in Loop: Header=BB370_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	DealignedLength
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$360, %rdx, %rdx        # imm = 0x168
	addq	%rdx, %rcx
	movl	%eax, 324(%rcx)
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %ecx
	orl	$64, %ecx
	movl	%ecx, (%rax)
# %bb.9:                                #   in Loop: Header=BB370_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB370_1
.LBB370_10:
	movq	-32(%rbp), %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end370:
	.size	MSAToSqinfo, .Lfunc_end370-MSAToSqinfo
	.cfi_endproc
                                        # -- End function
	.globl	SqdBanner               # -- Begin function SqdBanner
	.p2align	4, 0x90
	.type	SqdBanner,@function
SqdBanner:                              # @SqdBanner
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.891, %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rax, %rsi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.1.892, %rsi
	movabsq	$.L.str.2.893, %rdx
	movabsq	$.L.str.3.894, %rcx
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.891, %rsi
	movabsq	$.L.str.4.895, %rdx
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.891, %rsi
	movabsq	$.L.str.5.896, %rdx
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movabsq	$.L.str.6.897, %rsi
	movq	-8(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end371:
	.size	SqdBanner, .Lfunc_end371-SqdBanner
	.cfi_endproc
                                        # -- End function
	.globl	sre_tolower             # -- Begin function sre_tolower
	.p2align	4, 0x90
	.type	sre_tolower,@function
sre_tolower:                            # @sre_tolower
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB372_2
# %bb.1:
	movl	-4(%rbp), %edi
	callq	tolower
	movl	%eax, -8(%rbp)
	jmp	.LBB372_3
.LBB372_2:
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB372_3:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end372:
	.size	sre_tolower, .Lfunc_end372-sre_tolower
	.cfi_endproc
                                        # -- End function
	.globl	sre_toupper             # -- Begin function sre_toupper
	.p2align	4, 0x90
	.type	sre_toupper,@function
sre_toupper:                            # @sre_toupper
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB373_2
# %bb.1:
	movl	-4(%rbp), %edi
	callq	toupper
	movl	%eax, -8(%rbp)
	jmp	.LBB373_3
.LBB373_2:
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB373_3:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end373:
	.size	sre_toupper, .Lfunc_end373-sre_toupper
	.cfi_endproc
                                        # -- End function
	.globl	Linefit                 # -- Begin function Linefit
	.p2align	4, 0x90
	.type	Linefit,@function
Linefit:                                # @Linefit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -88(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -80(%rbp)
	movss	%xmm0, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB374_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB374_4
# %bb.2:                                #   in Loop: Header=BB374_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-12(%rbp), %xmm0
	movss	%xmm0, -12(%rbp)
# %bb.3:                                #   in Loop: Header=BB374_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB374_1
.LBB374_4:
	xorps	%xmm0, %xmm0
	movl	-24(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	movss	-8(%rbp), %xmm2         # xmm2 = mem[0],zero,zero,zero
	divss	%xmm1, %xmm2
	movss	%xmm2, -8(%rbp)
	movl	-24(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	movss	-12(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	divss	%xmm1, %xmm2
	movss	%xmm2, -12(%rbp)
	movss	%xmm0, -16(%rbp)
	movss	%xmm0, -28(%rbp)
	movss	%xmm0, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB374_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB374_8
# %bb.6:                                #   in Loop: Header=BB374_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm1
	mulss	%xmm1, %xmm0
	addss	-20(%rbp), %xmm0
	movss	%xmm0, -20(%rbp)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	subss	-12(%rbp), %xmm0
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm1
	mulss	%xmm1, %xmm0
	addss	-28(%rbp), %xmm0
	movss	%xmm0, -28(%rbp)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	subss	-8(%rbp), %xmm0
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	subss	-12(%rbp), %xmm1
	mulss	%xmm1, %xmm0
	addss	-16(%rbp), %xmm0
	movss	%xmm0, -16(%rbp)
# %bb.7:                                #   in Loop: Header=BB374_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB374_5
.LBB374_8:
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	divss	-20(%rbp), %xmm0
	movq	-56(%rbp), %rax
	movss	%xmm0, (%rax)
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	mulss	(%rax), %xmm1
	subss	%xmm1, %xmm0
	movq	-88(%rbp), %rax
	movss	%xmm0, (%rax)
	movss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -72(%rbp)        # 8-byte Spill
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	sqrt
	movsd	%xmm0, -64(%rbp)        # 8-byte Spill
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	sqrt
	movsd	-64(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	-72(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-80(%rbp), %rax
	movss	%xmm0, (%rax)
	movl	$1, %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end374:
	.size	Linefit, .Lfunc_end374-Linefit
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function WeightedLinefit
.LCPI375_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	WeightedLinefit
	.p2align	4, 0x90
	.type	WeightedLinefit,@function
WeightedLinefit:                        # @WeightedLinefit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -64(%rbp)
	movq	%rsi, -88(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -68(%rbp)
	movq	%r8, -120(%rbp)
	movq	%r9, -112(%rbp)
	movsd	%xmm0, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm0, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB375_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB375_4
# %bb.2:                                #   in Loop: Header=BB375_1 Depth=1
	movsd	.LCPI375_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	addsd	-56(%rbp), %xmm0
	movsd	%xmm0, -56(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	addsd	-16(%rbp), %xmm0
	movsd	%xmm0, -16(%rbp)
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	addsd	-48(%rbp), %xmm0
	movsd	%xmm0, -48(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	addsd	-40(%rbp), %xmm0
	movsd	%xmm0, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	divss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm0
	addsd	-32(%rbp), %xmm0
	movsd	%xmm0, -32(%rbp)
# %bb.3:                                #   in Loop: Header=BB375_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB375_1
.LBB375_4:
	movsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	mulsd	-40(%rbp), %xmm0
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-16(%rbp), %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, -80(%rbp)
	movsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	mulsd	-48(%rbp), %xmm0
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-32(%rbp), %xmm1
	subsd	%xmm1, %xmm0
	divsd	-80(%rbp), %xmm0
	movsd	%xmm0, -96(%rbp)
	movsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	mulsd	-32(%rbp), %xmm0
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-48(%rbp), %xmm1
	subsd	%xmm1, %xmm0
	divsd	-80(%rbp), %xmm0
	movsd	%xmm0, -104(%rbp)
	movsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	cvtsd2ss	%xmm0, %xmm0
	movq	-120(%rbp), %rax
	movss	%xmm0, (%rax)
	movsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cvtsd2ss	%xmm0, %xmm0
	movq	-112(%rbp), %rax
	movss	%xmm0, (%rax)
	popq	%rbp
	retq
.Lfunc_end375:
	.size	WeightedLinefit, .Lfunc_end375-WeightedLinefit
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Gammln
.LCPI376_0:
	.quad	4607182418800017408     # double 1
.LCPI376_1:
	.quad	4622382067542392832     # double 11
.LCPI376_2:
	.quad	4606452282014866796     # double 0.91893853299999994
.LCPI376_3:
	.quad	4602678819172646912     # double 0.5
.LCPI376_4:
	.quad	4696837138094751744     # double 999999
	.text
	.globl	Gammln
	.p2align	4, 0x90
	.type	Gammln,@function
Gammln:                                 # @Gammln
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorps	%xmm1, %xmm1
	movsd	%xmm0, -48(%rbp)
	ucomisd	-48(%rbp), %xmm1
	jb	.LBB376_2
# %bb.1:
	movsd	.LCPI376_4(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -56(%rbp)
	jmp	.LBB376_7
.LBB376_2:
	movsd	.LCPI376_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI376_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-48(%rbp), %xmm2        # xmm2 = mem[0],zero
	subsd	%xmm0, %xmm2
	movsd	%xmm2, -40(%rbp)
	addsd	-40(%rbp), %xmm1
	movsd	%xmm1, -32(%rbp)
	movsd	%xmm1, -24(%rbp)
	movsd	%xmm0, -16(%rbp)
	movl	$10, -4(%rbp)
.LBB376_3:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -4(%rbp)
	jl	.LBB376_6
# %bb.4:                                #   in Loop: Header=BB376_3 Depth=1
	movsd	.LCPI376_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movslq	-4(%rbp), %rax
	movsd	Gammln.cof(,%rax,8), %xmm1 # xmm1 = mem[0],zero
	divsd	-32(%rbp), %xmm1
	addsd	-16(%rbp), %xmm1
	movsd	%xmm1, -16(%rbp)
	movsd	-32(%rbp), %xmm1        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -32(%rbp)
# %bb.5:                                #   in Loop: Header=BB376_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB376_3
.LBB376_6:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	log
	movsd	.LCPI376_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
	movaps	%xmm1, %xmm0
	addsd	-24(%rbp), %xmm0
	movsd	%xmm0, -24(%rbp)
	addsd	-40(%rbp), %xmm1
	movsd	%xmm1, -64(%rbp)        # 8-byte Spill
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	log
	movsd	.LCPI376_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-64(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	addsd	%xmm2, %xmm1
	subsd	-24(%rbp), %xmm1
	addsd	-16(%rbp), %xmm1
	movsd	%xmm1, -16(%rbp)
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -56(%rbp)
.LBB376_7:
	movsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end376:
	.size	Gammln, .Lfunc_end376-Gammln
	.cfi_endproc
                                        # -- End function
	.globl	FMX2Alloc               # -- Begin function FMX2Alloc
	.p2align	4, 0x90
	.type	FMX2Alloc,@function
FMX2Alloc:                              # @FMX2Alloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.908, %rax
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$172, %esi
	callq	sre_malloc
	movabsq	$.L.str.908, %rdi
	movq	%rax, -24(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$2, %rdx
	movslq	-12(%rbp), %rax
	imulq	%rax, %rdx
	movl	$173, %esi
	callq	sre_malloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB377_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB377_4
# %bb.2:                                #   in Loop: Header=BB377_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB377_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB377_1
.LBB377_4:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end377:
	.size	FMX2Alloc, .Lfunc_end377-FMX2Alloc
	.cfi_endproc
                                        # -- End function
	.globl	FMX2Free                # -- Begin function FMX2Free
	.p2align	4, 0x90
	.type	FMX2Free,@function
FMX2Free:                               # @FMX2Free
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end378:
	.size	FMX2Free, .Lfunc_end378-FMX2Free
	.cfi_endproc
                                        # -- End function
	.globl	DMX2Alloc               # -- Begin function DMX2Alloc
	.p2align	4, 0x90
	.type	DMX2Alloc,@function
DMX2Alloc:                              # @DMX2Alloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.908, %rax
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$190, %esi
	callq	sre_malloc
	movabsq	$.L.str.908, %rdi
	movq	%rax, -24(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	movslq	-12(%rbp), %rax
	imulq	%rax, %rdx
	movl	$191, %esi
	callq	sre_malloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB379_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB379_4
# %bb.2:                                #   in Loop: Header=BB379_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB379_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB379_1
.LBB379_4:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end379:
	.size	DMX2Alloc, .Lfunc_end379-DMX2Alloc
	.cfi_endproc
                                        # -- End function
	.globl	DMX2Free                # -- Begin function DMX2Free
	.p2align	4, 0x90
	.type	DMX2Free,@function
DMX2Free:                               # @DMX2Free
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end380:
	.size	DMX2Free, .Lfunc_end380-DMX2Free
	.cfi_endproc
                                        # -- End function
	.globl	FMX2Multiply            # -- Begin function FMX2Multiply
	.p2align	4, 0x90
	.type	FMX2Multiply,@function
FMX2Multiply:                           # @FMX2Multiply
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -16(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB381_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB381_3 Depth 2
                                        #       Child Loop BB381_5 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB381_12
# %bb.2:                                #   in Loop: Header=BB381_1 Depth=1
	movl	$0, -4(%rbp)
.LBB381_3:                              #   Parent Loop BB381_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB381_5 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB381_10
# %bb.4:                                #   in Loop: Header=BB381_3 Depth=2
	xorps	%xmm0, %xmm0
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB381_5:                              #   Parent Loop BB381_1 Depth=1
                                        #     Parent Loop BB381_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB381_8
# %bb.6:                                #   in Loop: Header=BB381_5 Depth=3
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
# %bb.7:                                #   in Loop: Header=BB381_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB381_5
.LBB381_8:                              #   in Loop: Header=BB381_3 Depth=2
	jmp	.LBB381_9
.LBB381_9:                              #   in Loop: Header=BB381_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB381_3
.LBB381_10:                             #   in Loop: Header=BB381_1 Depth=1
	jmp	.LBB381_11
.LBB381_11:                             #   in Loop: Header=BB381_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB381_1
.LBB381_12:
	popq	%rbp
	retq
.Lfunc_end381:
	.size	FMX2Multiply, .Lfunc_end381-FMX2Multiply
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function IncompleteGamma
.LCPI382_0:
	.quad	4607182418800017408     # double 1
.LCPI382_1:
	.quad	4502148214488346440     # double 9.9999999999999995E-8
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI382_2:
	.quad	9223372036854775807     # double NaN
	.quad	9223372036854775807     # double NaN
	.text
	.globl	IncompleteGamma
	.p2align	4, 0x90
	.type	IncompleteGamma,@function
IncompleteGamma:                        # @IncompleteGamma
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorps	%xmm2, %xmm2
	movsd	%xmm0, -32(%rbp)
	movsd	%xmm1, -24(%rbp)
	ucomisd	-32(%rbp), %xmm2
	jb	.LBB382_2
# %bb.1:
	movabsq	$.L.str.1.911, %rdi
	movb	$0, %al
	callq	Die
.LBB382_2:
	xorps	%xmm0, %xmm0
	ucomisd	-24(%rbp), %xmm0
	jbe	.LBB382_4
# %bb.3:
	movabsq	$.L.str.2.912, %rdi
	movb	$0, %al
	callq	Die
.LBB382_4:
	movsd	.LCPI382_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	addsd	-32(%rbp), %xmm0
	ucomisd	%xmm0, %xmm1
	jbe	.LBB382_14
# %bb.5:
	movsd	.LCPI382_0(%rip), %xmm0 # xmm0 = mem[0],zero
	xorps	%xmm1, %xmm1
	movsd	%xmm1, -64(%rbp)
	movsd	%xmm0, -56(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -40(%rbp)
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -104(%rbp)
	movl	$1, -4(%rbp)
.LBB382_6:                              # =>This Inner Loop Header: Depth=1
	cmpl	$100, -4(%rbp)
	jge	.LBB382_13
# %bb.7:                                #   in Loop: Header=BB382_6 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movl	-4(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	subsd	-32(%rbp), %xmm2
	mulsd	-64(%rbp), %xmm2
	addsd	%xmm2, %xmm1
	movsd	%xmm1, -64(%rbp)
	movsd	-40(%rbp), %xmm1        # xmm1 = mem[0],zero
	movl	-4(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	subsd	-32(%rbp), %xmm2
	mulsd	-56(%rbp), %xmm2
	addsd	%xmm2, %xmm1
	movsd	%xmm1, -56(%rbp)
	movsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-64(%rbp), %xmm1
	movl	-4(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	-16(%rbp), %xmm2
	addsd	%xmm2, %xmm1
	movsd	%xmm1, -16(%rbp)
	movsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-56(%rbp), %xmm1
	movl	-4(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	-40(%rbp), %xmm2
	addsd	%xmm2, %xmm1
	movsd	%xmm1, -40(%rbp)
	movsd	-40(%rbp), %xmm1        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jne	.LBB382_8
	jp	.LBB382_8
	jmp	.LBB382_9
.LBB382_8:                              #   in Loop: Header=BB382_6 Depth=1
	movsd	.LCPI382_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-40(%rbp), %xmm1        # xmm1 = mem[0],zero
	movsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	%xmm1, %xmm2
	movsd	%xmm2, -64(%rbp)
	movsd	-40(%rbp), %xmm1        # xmm1 = mem[0],zero
	movsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	%xmm1, %xmm2
	movsd	%xmm2, -56(%rbp)
	movsd	-40(%rbp), %xmm1        # xmm1 = mem[0],zero
	movsd	-16(%rbp), %xmm2        # xmm2 = mem[0],zero
	divsd	%xmm1, %xmm2
	movsd	%xmm2, -16(%rbp)
	movsd	%xmm0, -40(%rbp)
.LBB382_9:                              #   in Loop: Header=BB382_6 Depth=1
	movsd	.LCPI382_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	subsd	-104(%rbp), %xmm1
	divsd	-16(%rbp), %xmm1
	movaps	.LCPI382_2(%rip), %xmm2 # xmm2 = [nan,nan]
	pand	%xmm2, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB382_11
# %bb.10:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -88(%rbp)        # 8-byte Spill
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	subsd	-24(%rbp), %xmm1
	movsd	%xmm1, -48(%rbp)        # 8-byte Spill
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	Gammln
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	-88(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, -96(%rbp)
	jmp	.LBB382_22
.LBB382_11:                             #   in Loop: Header=BB382_6 Depth=1
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -104(%rbp)
# %bb.12:                               #   in Loop: Header=BB382_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB382_6
.LBB382_13:
	movabsq	$.L.str.3.913, %rdi
	movb	$0, %al
	callq	Die
	jmp	.LBB382_21
.LBB382_14:
	movsd	.LCPI382_0(%rip), %xmm0 # xmm0 = mem[0],zero
	divsd	-32(%rbp), %xmm0
	movsd	%xmm0, -72(%rbp)
	movsd	%xmm0, -80(%rbp)
	movl	$1, -4(%rbp)
.LBB382_15:                             # =>This Inner Loop Header: Depth=1
	cmpl	$10000, -4(%rbp)        # imm = 0x2710
	jge	.LBB382_20
# %bb.16:                               #   in Loop: Header=BB382_15 Depth=1
	movsd	.LCPI382_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movsd	-32(%rbp), %xmm2        # xmm2 = mem[0],zero
	movl	-4(%rbp), %eax
	cvtsi2sdl	%eax, %xmm3
	addsd	%xmm3, %xmm2
	divsd	%xmm2, %xmm1
	mulsd	-72(%rbp), %xmm1
	movsd	%xmm1, -72(%rbp)
	movsd	-72(%rbp), %xmm1        # xmm1 = mem[0],zero
	addsd	-80(%rbp), %xmm1
	movsd	%xmm1, -80(%rbp)
	movsd	-72(%rbp), %xmm1        # xmm1 = mem[0],zero
	divsd	-80(%rbp), %xmm1
	movaps	.LCPI382_2(%rip), %xmm2 # xmm2 = [nan,nan]
	pand	%xmm2, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB382_18
# %bb.17:
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -88(%rbp)        # 8-byte Spill
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	log
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	subsd	-24(%rbp), %xmm1
	movsd	%xmm1, -48(%rbp)        # 8-byte Spill
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	Gammln
	movsd	-48(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	callq	exp
	movsd	.LCPI382_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	-88(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	subsd	%xmm2, %xmm1
	movsd	%xmm1, -96(%rbp)
	jmp	.LBB382_22
.LBB382_18:                             #   in Loop: Header=BB382_15 Depth=1
	jmp	.LBB382_19
.LBB382_19:                             #   in Loop: Header=BB382_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB382_15
.LBB382_20:
	movabsq	$.L.str.4.914, %rdi
	movb	$0, %al
	callq	Die
.LBB382_21:
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -96(%rbp)
.LBB382_22:
	movsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end382:
	.size	IncompleteGamma, .Lfunc_end382-IncompleteGamma
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function sre_random
.LCPI383_0:
	.quad	4634204016564240384     # double 64
	.text
	.globl	sre_random
	.p2align	4, 0x90
	.type	sre_random,@function
sre_random:                             # @sre_random
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$40014, -88(%rbp)       # imm = 0x9C4E
	movq	$2147483563, -32(%rbp)  # imm = 0x7FFFFFAB
	movq	$53668, -48(%rbp)       # imm = 0xD1A4
	movq	$12211, -80(%rbp)       # imm = 0x2FB3
	movq	$40692, -72(%rbp)       # imm = 0x9EF4
	movq	$2147483399, -64(%rbp)  # imm = 0x7FFFFF07
	movq	$52774, -40(%rbp)       # imm = 0xCE26
	movq	$3791, -56(%rbp)        # imm = 0xECF
	cmpl	$0, sre_randseed
	jle	.LBB383_12
# %bb.1:
	movslq	sre_randseed, %rax
	movq	%rax, sre_random.rnd1
	movslq	sre_randseed, %rax
	movq	%rax, sre_random.rnd2
	movl	$0, -4(%rbp)
.LBB383_2:                              # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB383_11
# %bb.3:                                #   in Loop: Header=BB383_2 Depth=1
	movq	-88(%rbp), %rcx
	movq	sre_random.rnd1, %rax
	cqto
	idivq	-48(%rbp)
	imulq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	-80(%rbp), %rcx
	movq	sre_random.rnd1, %rax
	cqto
	idivq	-48(%rbp)
	imulq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movq	-24(%rbp), %rax
	subq	-16(%rbp), %rax
	movq	%rax, sre_random.rnd1
	cmpq	$0, sre_random.rnd1
	jge	.LBB383_5
# %bb.4:                                #   in Loop: Header=BB383_2 Depth=1
	movq	-32(%rbp), %rax
	addq	sre_random.rnd1, %rax
	movq	%rax, sre_random.rnd1
.LBB383_5:                              #   in Loop: Header=BB383_2 Depth=1
	movq	-72(%rbp), %rcx
	movq	sre_random.rnd2, %rax
	cqto
	idivq	-40(%rbp)
	imulq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	-56(%rbp), %rcx
	movq	sre_random.rnd2, %rax
	cqto
	idivq	-40(%rbp)
	imulq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movq	-24(%rbp), %rax
	subq	-16(%rbp), %rax
	movq	%rax, sre_random.rnd2
	cmpq	$0, sre_random.rnd2
	jge	.LBB383_7
# %bb.6:                                #   in Loop: Header=BB383_2 Depth=1
	movq	-64(%rbp), %rax
	addq	sre_random.rnd2, %rax
	movq	%rax, sre_random.rnd2
.LBB383_7:                              #   in Loop: Header=BB383_2 Depth=1
	movq	sre_random.rnd1, %rax
	subq	sre_random.rnd2, %rax
	movslq	-4(%rbp), %rcx
	movq	%rax, sre_random.tbl(,%rcx,8)
	movslq	-4(%rbp), %rax
	cmpq	$0, sre_random.tbl(,%rax,8)
	jge	.LBB383_9
# %bb.8:                                #   in Loop: Header=BB383_2 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addq	sre_random.tbl(,%rcx,8), %rax
	movq	%rax, sre_random.tbl(,%rcx,8)
.LBB383_9:                              #   in Loop: Header=BB383_2 Depth=1
	jmp	.LBB383_10
.LBB383_10:                             #   in Loop: Header=BB383_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB383_2
.LBB383_11:
	movl	$0, sre_randseed
.LBB383_12:
	movq	-88(%rbp), %rcx
	movq	sre_random.rnd1, %rax
	cqto
	idivq	-48(%rbp)
	imulq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	-80(%rbp), %rcx
	movq	sre_random.rnd1, %rax
	cqto
	idivq	-48(%rbp)
	imulq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movq	-24(%rbp), %rax
	subq	-16(%rbp), %rax
	movq	%rax, sre_random.rnd1
	cmpq	$0, sre_random.rnd1
	jge	.LBB383_14
# %bb.13:
	movq	-32(%rbp), %rax
	addq	sre_random.rnd1, %rax
	movq	%rax, sre_random.rnd1
.LBB383_14:
	movq	-72(%rbp), %rcx
	movq	sre_random.rnd2, %rax
	cqto
	idivq	-40(%rbp)
	imulq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	-56(%rbp), %rcx
	movq	sre_random.rnd2, %rax
	cqto
	idivq	-40(%rbp)
	imulq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movq	-24(%rbp), %rax
	subq	-16(%rbp), %rax
	movq	%rax, sre_random.rnd2
	cmpq	$0, sre_random.rnd2
	jge	.LBB383_16
# %bb.15:
	movq	-64(%rbp), %rax
	addq	sre_random.rnd2, %rax
	movq	%rax, sre_random.rnd2
.LBB383_16:
	movsd	.LCPI383_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	sre_random.rnd, %rax
	cvtsi2sdq	%rax, %xmm1
	movq	-32(%rbp), %rax
	cvtsi2sdq	%rax, %xmm2
	divsd	%xmm2, %xmm1
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	movq	sre_random.tbl(,%rax,8), %rax
	movq	%rax, sre_random.rnd
	movq	sre_random.rnd1, %rax
	subq	sre_random.rnd2, %rax
	movslq	-4(%rbp), %rcx
	movq	%rax, sre_random.tbl(,%rcx,8)
	movslq	-4(%rbp), %rax
	cmpq	$0, sre_random.tbl(,%rax,8)
	jge	.LBB383_18
# %bb.17:
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addq	sre_random.tbl(,%rcx,8), %rax
	movq	%rax, sre_random.tbl(,%rcx,8)
.LBB383_18:
	movq	sre_random.rnd, %rax
	cvtsi2sdq	%rax, %xmm0
	movq	-32(%rbp), %rax
	cvtsi2sdq	%rax, %xmm1
	divsd	%xmm1, %xmm0
	popq	%rbp
	retq
.Lfunc_end383:
	.size	sre_random, .Lfunc_end383-sre_random
	.cfi_endproc
                                        # -- End function
	.globl	sre_srandom             # -- Begin function sre_srandom
	.p2align	4, 0x90
	.type	sre_srandom,@function
sre_srandom:                            # @sre_srandom
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jge	.LBB384_2
# %bb.1:
	imull	$4294967295, -4(%rbp), %eax # imm = 0xFFFFFFFF
	movl	%eax, -4(%rbp)
.LBB384_2:
	cmpl	$0, -4(%rbp)
	jne	.LBB384_4
# %bb.3:
	movl	$42, -4(%rbp)
.LBB384_4:
	movl	-4(%rbp), %eax
	movl	%eax, sre_randseed
	popq	%rbp
	retq
.Lfunc_end384:
	.size	sre_srandom, .Lfunc_end384-sre_srandom
	.cfi_endproc
                                        # -- End function
	.globl	sre_random_positive     # -- Begin function sre_random_positive
	.p2align	4, 0x90
	.type	sre_random_positive,@function
sre_random_positive:                    # @sre_random_positive
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
.LBB385_1:                              # =>This Inner Loop Header: Depth=1
	callq	sre_random
	movsd	%xmm0, -8(%rbp)
# %bb.2:                                #   in Loop: Header=BB385_1 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-8(%rbp), %xmm1         # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jne	.LBB385_3
	jp	.LBB385_3
	jmp	.LBB385_1
.LBB385_3:
	movsd	-8(%rbp), %xmm0         # xmm0 = mem[0],zero
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end385:
	.size	sre_random_positive, .Lfunc_end385-sre_random_positive
	.cfi_endproc
                                        # -- End function
	.globl	ExponentialRandom       # -- Begin function ExponentialRandom
	.p2align	4, 0x90
	.type	ExponentialRandom,@function
ExponentialRandom:                      # @ExponentialRandom
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
.LBB386_1:                              # =>This Inner Loop Header: Depth=1
	callq	sre_random
	movsd	%xmm0, -8(%rbp)
# %bb.2:                                #   in Loop: Header=BB386_1 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-8(%rbp), %xmm1         # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jne	.LBB386_3
	jp	.LBB386_3
	jmp	.LBB386_1
.LBB386_3:
	movsd	-8(%rbp), %xmm0         # xmm0 = mem[0],zero
	callq	log
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	%xmm0, %rcx
	xorq	%rax, %rcx
	movq	%rcx, %xmm0
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end386:
	.size	ExponentialRandom, .Lfunc_end386-ExponentialRandom
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Gaussrandom
.LCPI387_0:
	.quad	4602678819172646912     # double 0.5
.LCPI387_1:
	.quad	4607182418800017408     # double 1
.LCPI387_2:
	.quad	4629700416936869888     # double 32
	.text
	.globl	Gaussrandom
	.p2align	4, 0x90
	.type	Gaussrandom,@function
Gaussrandom:                            # @Gaussrandom
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -8(%rbp)
	callq	sre_random
	movsd	.LCPI387_0(%rip), %xmm1 # xmm1 = mem[0],zero
	xorps	%xmm2, %xmm2
	movsd	%xmm0, Gaussrandom.u
	movsd	%xmm2, Gaussrandom.s
	movsd	Gaussrandom.u, %xmm0    # xmm0 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	jbe	.LBB387_2
# %bb.1:
	movsd	.LCPI387_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, Gaussrandom.s
.LBB387_2:
	movsd	.LCPI387_2(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	Gaussrandom.u, %xmm1    # xmm1 = mem[0],zero
	subsd	Gaussrandom.s, %xmm1
	addsd	Gaussrandom.u, %xmm1
	movsd	%xmm1, Gaussrandom.u
	mulsd	Gaussrandom.u, %xmm0
	movsd	%xmm0, Gaussrandom.u
	cvttsd2si	Gaussrandom.u, %rax
	movq	%rax, Gaussrandom.i
	cmpq	$32, Gaussrandom.i
	jne	.LBB387_4
# %bb.3:
	movq	$31, Gaussrandom.i
.LBB387_4:
	cmpq	$0, Gaussrandom.i
	jne	.LBB387_6
# %bb.5:
	jmp	.LBB387_20
.LBB387_6:
	movsd	Gaussrandom.u, %xmm0    # xmm0 = mem[0],zero
	movq	Gaussrandom.i, %rax
	cvtsi2sdq	%rax, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, Gaussrandom.ustar
	movq	Gaussrandom.i, %rax
	movsd	Gaussrandom.a-8(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, Gaussrandom.aa
.LBB387_7:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB387_15 Depth 2
	movsd	Gaussrandom.ustar, %xmm0 # xmm0 = mem[0],zero
	movq	Gaussrandom.i, %rax
	movsd	Gaussrandom.t-8(,%rax,8), %xmm1 # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jb	.LBB387_9
# %bb.8:                                #   in Loop: Header=BB387_7 Depth=1
	jmp	.LBB387_13
.LBB387_9:
	movsd	Gaussrandom.ustar, %xmm0 # xmm0 = mem[0],zero
	movq	Gaussrandom.i, %rax
	subsd	Gaussrandom.t-8(,%rax,8), %xmm0
	movq	Gaussrandom.i, %rax
	mulsd	Gaussrandom.h-8(,%rax,8), %xmm0
	movsd	%xmm0, Gaussrandom.w
.LBB387_10:
	movsd	.LCPI387_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	Gaussrandom.aa, %xmm1   # xmm1 = mem[0],zero
	addsd	Gaussrandom.w, %xmm1
	movsd	%xmm1, Gaussrandom.y
	movsd	Gaussrandom.y, %xmm1    # xmm1 = mem[0],zero
	movsd	%xmm1, Gaussrandom.snorm
	movsd	Gaussrandom.s, %xmm1    # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jne	.LBB387_12
	jp	.LBB387_12
# %bb.11:
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movsd	Gaussrandom.y, %xmm0    # xmm0 = mem[0],zero
	movq	%xmm0, %rcx
	xorq	%rax, %rcx
	movq	%rcx, %xmm0
	movsd	%xmm0, Gaussrandom.snorm
.LBB387_12:
	movsd	-8(%rbp), %xmm0         # xmm0 = mem[0],zero
	mulsd	Gaussrandom.snorm, %xmm0
	addsd	-16(%rbp), %xmm0
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB387_13:                             #   in Loop: Header=BB387_7 Depth=1
	callq	sre_random
	movsd	.LCPI387_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	%xmm0, Gaussrandom.u
	movsd	Gaussrandom.u, %xmm0    # xmm0 = mem[0],zero
	movq	Gaussrandom.i, %rax
	movsd	Gaussrandom.a(,%rax,8), %xmm2 # xmm2 = mem[0],zero
	subsd	Gaussrandom.aa, %xmm2
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, Gaussrandom.w
	mulsd	Gaussrandom.w, %xmm1
	addsd	Gaussrandom.aa, %xmm1
	mulsd	Gaussrandom.w, %xmm1
	movsd	%xmm1, Gaussrandom.tt
	jmp	.LBB387_15
.LBB387_14:                             #   in Loop: Header=BB387_15 Depth=2
	movsd	Gaussrandom.u, %xmm0    # xmm0 = mem[0],zero
	movsd	%xmm0, Gaussrandom.tt
	callq	sre_random
	movsd	%xmm0, Gaussrandom.ustar
.LBB387_15:                             #   Parent Loop BB387_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsd	Gaussrandom.ustar, %xmm0 # xmm0 = mem[0],zero
	ucomisd	Gaussrandom.tt, %xmm0
	jbe	.LBB387_17
# %bb.16:
	jmp	.LBB387_10
.LBB387_17:                             #   in Loop: Header=BB387_15 Depth=2
	callq	sre_random
	movsd	%xmm0, Gaussrandom.u
	movsd	Gaussrandom.ustar, %xmm0 # xmm0 = mem[0],zero
	ucomisd	Gaussrandom.u, %xmm0
	jb	.LBB387_19
# %bb.18:                               #   in Loop: Header=BB387_15 Depth=2
	jmp	.LBB387_14
.LBB387_19:                             #   in Loop: Header=BB387_7 Depth=1
	callq	sre_random
	movsd	%xmm0, Gaussrandom.ustar
	jmp	.LBB387_7
.LBB387_20:
	movq	$6, Gaussrandom.i
	movsd	Gaussrandom.a+248, %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, Gaussrandom.aa
	jmp	.LBB387_22
.LBB387_21:                             #   in Loop: Header=BB387_22 Depth=1
	movq	Gaussrandom.i, %rax
	movsd	Gaussrandom.d-8(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	addsd	Gaussrandom.aa, %xmm0
	movsd	%xmm0, Gaussrandom.aa
	movq	Gaussrandom.i, %rax
	addq	$1, %rax
	movq	%rax, Gaussrandom.i
.LBB387_22:                             # =>This Inner Loop Header: Depth=1
	movsd	.LCPI387_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	Gaussrandom.u, %xmm1    # xmm1 = mem[0],zero
	addsd	Gaussrandom.u, %xmm1
	movsd	%xmm1, Gaussrandom.u
	ucomisd	Gaussrandom.u, %xmm0
	jbe	.LBB387_24
# %bb.23:                               #   in Loop: Header=BB387_22 Depth=1
	jmp	.LBB387_21
.LBB387_24:
	movsd	.LCPI387_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	Gaussrandom.u, %xmm1    # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, Gaussrandom.u
.LBB387_25:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB387_27 Depth 2
	movsd	.LCPI387_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	Gaussrandom.u, %xmm1    # xmm1 = mem[0],zero
	movq	Gaussrandom.i, %rax
	mulsd	Gaussrandom.d-8(,%rax,8), %xmm1
	movsd	%xmm1, Gaussrandom.w
	mulsd	Gaussrandom.w, %xmm0
	addsd	Gaussrandom.aa, %xmm0
	mulsd	Gaussrandom.w, %xmm0
	movsd	%xmm0, Gaussrandom.tt
	jmp	.LBB387_27
.LBB387_26:                             #   in Loop: Header=BB387_27 Depth=2
	movsd	Gaussrandom.u, %xmm0    # xmm0 = mem[0],zero
	movsd	%xmm0, Gaussrandom.tt
.LBB387_27:                             #   Parent Loop BB387_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	sre_random
	movsd	%xmm0, Gaussrandom.ustar
	movsd	Gaussrandom.ustar, %xmm0 # xmm0 = mem[0],zero
	ucomisd	Gaussrandom.tt, %xmm0
	jbe	.LBB387_29
# %bb.28:
	jmp	.LBB387_10
.LBB387_29:                             #   in Loop: Header=BB387_27 Depth=2
	callq	sre_random
	movsd	%xmm0, Gaussrandom.u
	movsd	Gaussrandom.ustar, %xmm0 # xmm0 = mem[0],zero
	ucomisd	Gaussrandom.u, %xmm0
	jb	.LBB387_31
# %bb.30:                               #   in Loop: Header=BB387_27 Depth=2
	jmp	.LBB387_26
.LBB387_31:                             #   in Loop: Header=BB387_25 Depth=1
	callq	sre_random
	movsd	%xmm0, Gaussrandom.u
	jmp	.LBB387_25
.Lfunc_end387:
	.size	Gaussrandom, .Lfunc_end387-Gaussrandom
	.cfi_endproc
                                        # -- End function
	.globl	DChoose                 # -- Begin function DChoose
	.p2align	4, 0x90
	.type	DChoose,@function
DChoose:                                # @DChoose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -8(%rbp)
	callq	sre_random
	xorps	%xmm1, %xmm1
	movsd	%xmm0, -32(%rbp)
	movsd	%xmm1, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB388_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB388_6
# %bb.2:                                #   in Loop: Header=BB388_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	addsd	-24(%rbp), %xmm0
	movsd	%xmm0, -24(%rbp)
	movsd	-32(%rbp), %xmm0        # xmm0 = mem[0],zero
	movsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB388_4
# %bb.3:
	movl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB388_7
.LBB388_4:                              #   in Loop: Header=BB388_1 Depth=1
	jmp	.LBB388_5
.LBB388_5:                              #   in Loop: Header=BB388_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB388_1
.LBB388_6:
	callq	sre_random
	movl	-8(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -12(%rbp)
.LBB388_7:
	movl	-12(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end388:
	.size	DChoose, .Lfunc_end388-DChoose
	.cfi_endproc
                                        # -- End function
	.globl	FChoose                 # -- Begin function FChoose
	.p2align	4, 0x90
	.type	FChoose,@function
FChoose:                                # @FChoose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -12(%rbp)
	callq	sre_random
	xorps	%xmm1, %xmm1
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -20(%rbp)
	movss	%xmm1, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB389_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB389_6
# %bb.2:                                #   in Loop: Header=BB389_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB389_4
# %bb.3:
	movl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB389_7
.LBB389_4:                              #   in Loop: Header=BB389_1 Depth=1
	jmp	.LBB389_5
.LBB389_5:                              #   in Loop: Header=BB389_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB389_1
.LBB389_6:
	callq	sre_random
	movl	-12(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -16(%rbp)
.LBB389_7:
	movl	-16(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end389:
	.size	FChoose, .Lfunc_end389-FChoose
	.cfi_endproc
                                        # -- End function
	.globl	Strdup                  # -- Begin function Strdup
	.p2align	4, 0x90
	.type	Strdup,@function
Strdup:                                 # @Strdup
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB390_2
# %bb.1:
	movq	$0, -16(%rbp)
	jmp	.LBB390_5
.LBB390_2:
	movq	-8(%rbp), %rdi
	callq	strlen
	addq	$1, %rax
	movq	%rax, %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB390_4
# %bb.3:
	movq	$0, -16(%rbp)
	jmp	.LBB390_5
.LBB390_4:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB390_5:
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end390:
	.size	Strdup, .Lfunc_end390-Strdup
	.cfi_endproc
                                        # -- End function
	.globl	StringChop              # -- Begin function StringChop
	.p2align	4, 0x90
	.type	StringChop,@function
StringChop:                             # @StringChop
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	strlen
	subq	$1, %rax
	movl	%eax, -4(%rbp)
.LBB391_1:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jl	.LBB391_3
# %bb.2:                                #   in Loop: Header=BB391_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
.LBB391_3:                              #   in Loop: Header=BB391_1 Depth=1
	testb	$1, %al
	jne	.LBB391_4
	jmp	.LBB391_5
.LBB391_4:                              #   in Loop: Header=BB391_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB391_1
.LBB391_5:
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end391:
	.size	StringChop, .Lfunc_end391-StringChop
	.cfi_endproc
                                        # -- End function
	.globl	Strinsert               # -- Begin function Strinsert
	.p2align	4, 0x90
	.type	Strinsert,@function
Strinsert:                              # @Strinsert
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -32(%rbp)
	movb	%sil, -1(%rbp)
	movl	%edx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB392_1:                              # =>This Inner Loop Header: Depth=1
	cmpb	$0, -1(%rbp)
	je	.LBB392_4
# %bb.2:                                #   in Loop: Header=BB392_1 Depth=1
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -2(%rbp)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	movb	-2(%rbp), %al
	movb	%al, -1(%rbp)
# %bb.3:                                #   in Loop: Header=BB392_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB392_1
.LBB392_4:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movl	$1, %eax
	popq	%rbp
	retq
.Lfunc_end392:
	.size	Strinsert, .Lfunc_end392-Strinsert
	.cfi_endproc
                                        # -- End function
	.globl	Strdelete               # -- Begin function Strdelete
	.p2align	4, 0x90
	.type	Strdelete,@function
Strdelete:                              # @Strdelete
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
.LBB393_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB393_4
# %bb.2:                                #   in Loop: Header=BB393_1 Depth=1
	movq	-8(%rbp), %rax
	movb	1(%rax), %al
	movq	-8(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.3:                                #   in Loop: Header=BB393_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB393_1
.LBB393_4:
	movl	$1, %eax
	popq	%rbp
	retq
.Lfunc_end393:
	.size	Strdelete, .Lfunc_end393-Strdelete
	.cfi_endproc
                                        # -- End function
	.globl	s2lower                 # -- Begin function s2lower
	.p2align	4, 0x90
	.type	s2lower,@function
s2lower:                                # @s2lower
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.LBB394_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB394_4
# %bb.2:                                #   in Loop: Header=BB394_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %edi
	callq	sre_tolower
	movq	-8(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.3:                                #   in Loop: Header=BB394_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB394_1
.LBB394_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end394:
	.size	s2lower, .Lfunc_end394-s2lower
	.cfi_endproc
                                        # -- End function
	.globl	s2upper                 # -- Begin function s2upper
	.p2align	4, 0x90
	.type	s2upper,@function
s2upper:                                # @s2upper
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
.LBB395_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB395_4
# %bb.2:                                #   in Loop: Header=BB395_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %edi
	callq	sre_toupper
	movq	-8(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.3:                                #   in Loop: Header=BB395_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB395_1
.LBB395_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end395:
	.size	s2upper, .Lfunc_end395-s2upper
	.cfi_endproc
                                        # -- End function
	.globl	sre_malloc              # -- Begin function sre_malloc
	.p2align	4, 0x90
	.type	sre_malloc,@function
sre_malloc:                             # @sre_malloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB396_2
# %bb.1:
	movabsq	$.L.str.933, %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	movb	$0, %al
	callq	Die
.LBB396_2:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end396:
	.size	sre_malloc, .Lfunc_end396-sre_malloc
	.cfi_endproc
                                        # -- End function
	.globl	sre_realloc             # -- Begin function sre_realloc
	.p2align	4, 0x90
	.type	sre_realloc,@function
sre_realloc:                            # @sre_realloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	realloc
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB397_2
# %bb.1:
	movabsq	$.L.str.1.936, %rdi
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movl	-4(%rbp), %ecx
	movb	$0, %al
	callq	Die
.LBB397_2:
	movq	-24(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end397:
	.size	sre_realloc, .Lfunc_end397-sre_realloc
	.cfi_endproc
                                        # -- End function
	.globl	Free2DArray             # -- Begin function Free2DArray
	.p2align	4, 0x90
	.type	Free2DArray,@function
Free2DArray:                            # @Free2DArray
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB398_8
# %bb.1:
	movl	$0, -4(%rbp)
.LBB398_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB398_7
# %bb.3:                                #   in Loop: Header=BB398_2 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB398_5
# %bb.4:                                #   in Loop: Header=BB398_2 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
.LBB398_5:                              #   in Loop: Header=BB398_2 Depth=1
	jmp	.LBB398_6
.LBB398_6:                              #   in Loop: Header=BB398_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB398_2
.LBB398_7:
	movq	-16(%rbp), %rdi
	callq	free
.LBB398_8:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end398:
	.size	Free2DArray, .Lfunc_end398-Free2DArray
	.cfi_endproc
                                        # -- End function
	.globl	Free3DArray             # -- Begin function Free3DArray
	.p2align	4, 0x90
	.type	Free3DArray,@function
Free3DArray:                            # @Free3DArray
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB399_14
# %bb.1:
	movl	$0, -4(%rbp)
.LBB399_2:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB399_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB399_13
# %bb.3:                                #   in Loop: Header=BB399_2 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB399_11
# %bb.4:                                #   in Loop: Header=BB399_2 Depth=1
	movl	$0, -8(%rbp)
.LBB399_5:                              #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB399_10
# %bb.6:                                #   in Loop: Header=BB399_5 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB399_8
# %bb.7:                                #   in Loop: Header=BB399_5 Depth=2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
.LBB399_8:                              #   in Loop: Header=BB399_5 Depth=2
	jmp	.LBB399_9
.LBB399_9:                              #   in Loop: Header=BB399_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB399_5
.LBB399_10:                             #   in Loop: Header=BB399_2 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
.LBB399_11:                             #   in Loop: Header=BB399_2 Depth=1
	jmp	.LBB399_12
.LBB399_12:                             #   in Loop: Header=BB399_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB399_2
.LBB399_13:
	movq	-16(%rbp), %rdi
	callq	free
.LBB399_14:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end399:
	.size	Free3DArray, .Lfunc_end399-Free3DArray
	.cfi_endproc
                                        # -- End function
	.globl	RandomSequence          # -- Begin function RandomSequence
	.p2align	4, 0x90
	.type	RandomSequence,@function
RandomSequence:                         # @RandomSequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.2.943, %rax
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$199, %esi
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB400_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB400_4
# %bb.2:                                #   in Loop: Header=BB400_1 Depth=1
	movq	-48(%rbp), %rbx
	movq	-40(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	FChoose
	cltq
	movb	(%rbx,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.3:                                #   in Loop: Header=BB400_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB400_1
.LBB400_4:
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-24(%rbp), %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end400:
	.size	RandomSequence, .Lfunc_end400-RandomSequence
	.cfi_endproc
                                        # -- End function
	.globl	sre_fgets               # -- Begin function sre_fgets
	.p2align	4, 0x90
	.type	sre_fgets,@function
sre_fgets:                              # @sre_fgets
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB401_2
# %bb.1:
	movabsq	$.L.str.2.943, %rdi
	movl	$253, %esi
	movl	$128, %edx
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movl	$128, (%rax)
.LBB401_2:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	(%rax), %esi
	movq	-48(%rbp), %rdx
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB401_4
# %bb.3:
	movq	$0, -32(%rbp)
	jmp	.LBB401_14
.LBB401_4:
	movq	-48(%rbp), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB401_6
# %bb.5:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB401_14
.LBB401_6:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$10, %eax
	jne	.LBB401_8
# %bb.7:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB401_14
.LBB401_8:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB401_9:                              # =>This Inner Loop Header: Depth=1
	movabsq	$.L.str.2.943, %rdi
	movq	-24(%rbp), %rax
	movl	(%rax), %ecx
	addl	$128, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movslq	(%rax), %rcx
	shlq	$0, %rcx
	movl	$283, %esi              # imm = 0x11B
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movl	$129, %esi
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB401_11
# %bb.10:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB401_14
.LBB401_11:                             #   in Loop: Header=BB401_9 Depth=1
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$10, %eax
	jne	.LBB401_13
# %bb.12:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB401_14
.LBB401_13:                             #   in Loop: Header=BB401_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$128, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB401_9
.LBB401_14:
	movq	-32(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end401:
	.size	sre_fgets, .Lfunc_end401-sre_fgets
	.cfi_endproc
                                        # -- End function
	.globl	sre_strcat              # -- Begin function sre_strcat
	.p2align	4, 0x90
	.type	sre_strcat,@function
sre_strcat:                             # @sre_strcat
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jge	.LBB402_5
# %bb.1:
	movq	-16(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.LBB402_3
# %bb.2:
	xorl	%eax, %eax
	jmp	.LBB402_4
.LBB402_3:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
.LBB402_4:
	movl	%eax, -8(%rbp)
	jmp	.LBB402_6
.LBB402_5:
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB402_6:
	cmpl	$0, -20(%rbp)
	jge	.LBB402_11
# %bb.7:
	cmpq	$0, -40(%rbp)
	jne	.LBB402_9
# %bb.8:
	xorl	%eax, %eax
	jmp	.LBB402_10
.LBB402_9:
	movq	-40(%rbp), %rdi
	callq	strlen
.LBB402_10:
	movl	%eax, -4(%rbp)
	jmp	.LBB402_12
.LBB402_11:
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB402_12:
	cmpl	$0, -4(%rbp)
	jne	.LBB402_14
# %bb.13:
	movl	-8(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB402_18
.LBB402_14:
	movq	-16(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.LBB402_16
# %bb.15:
	movabsq	$.L.str.2.943, %rdi
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$344, %esi              # imm = 0x158
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB402_17
.LBB402_16:
	movabsq	$.L.str.2.943, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movl	-8(%rbp), %eax
	addl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$0, %rcx
	movl	$345, %esi              # imm = 0x159
	callq	sre_realloc
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB402_17:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-8(%rbp), %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	callq	memcpy
	movl	-8(%rbp), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB402_18:
	movl	-28(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end402:
	.size	sre_strcat, .Lfunc_end402-sre_strcat
	.cfi_endproc
                                        # -- End function
	.globl	sre_strtok              # -- Begin function sre_strtok
	.p2align	4, 0x90
	.type	sre_strtok,@function
sre_strtok:                             # @sre_strtok
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	strspn
	addq	-8(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	jne	.LBB403_2
# %bb.1:
	movq	$0, -56(%rbp)
	jmp	.LBB403_8
.LBB403_2:
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	strcspn
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB403_4
# %bb.3:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB403_5
.LBB403_4:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB403_5:
	cmpq	$0, -40(%rbp)
	je	.LBB403_7
# %bb.6:
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB403_7:
	movq	-8(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB403_8:
	movq	-56(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end403:
	.size	sre_strtok, .Lfunc_end403-sre_strtok
	.cfi_endproc
                                        # -- End function
	.globl	sre_strdup              # -- Begin function sre_strdup
	.p2align	4, 0x90
	.type	sre_strdup,@function
sre_strdup:                             # @sre_strdup
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB404_2
# %bb.1:
	movq	$0, -32(%rbp)
	jmp	.LBB404_5
.LBB404_2:
	cmpl	$0, -4(%rbp)
	jge	.LBB404_4
# %bb.3:
	movq	-16(%rbp), %rdi
	callq	strlen
	movl	%eax, -4(%rbp)
.LBB404_4:
	movabsq	$.L.str.2.943, %rdi
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$442, %esi              # imm = 0x1BA
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB404_5:
	movq	-32(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end404:
	.size	sre_strdup, .Lfunc_end404-sre_strdup
	.cfi_endproc
                                        # -- End function
	.globl	sre_strncpy             # -- Begin function sre_strncpy
	.p2align	4, 0x90
	.type	sre_strncpy,@function
sre_strncpy:                            # @sre_strncpy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -4(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	strncpy
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end405:
	.size	sre_strncpy, .Lfunc_end405-sre_strncpy
	.cfi_endproc
                                        # -- End function
	.globl	IsBlankline             # -- Begin function IsBlankline
	.p2align	4, 0x90
	.type	IsBlankline,@function
IsBlankline:                            # @IsBlankline
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
.LBB406_1:                              # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB406_6
# %bb.2:                                #   in Loop: Header=BB406_1 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	jne	.LBB406_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB406_7
.LBB406_4:                              #   in Loop: Header=BB406_1 Depth=1
	jmp	.LBB406_5
.LBB406_5:                              #   in Loop: Header=BB406_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB406_1
.LBB406_6:
	movl	$1, -4(%rbp)
.LBB406_7:
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end406:
	.size	IsBlankline, .Lfunc_end406-IsBlankline
	.cfi_endproc
                                        # -- End function
	.globl	SSIOpen                 # -- Begin function SSIOpen
	.p2align	4, 0x90
	.type	SSIOpen,@function
SSIOpen:                                # @SSIOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -16(%rbp)
	movl	$144, %edi
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB407_2
# %bb.1:
	movl	$3, -4(%rbp)
	jmp	.LBB407_5
.LBB407_2:
	movabsq	$.L.str.956, %rsi
	movq	-40(%rbp), %rdi
	callq	fopen
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	jne	.LBB407_4
# %bb.3:
	movq	-16(%rbp), %rdi
	callq	free
	movl	$4, -4(%rbp)
	jmp	.LBB407_5
.LBB407_4:
	movq	-16(%rbp), %rdi
	callq	load_indexfile
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB407_5:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end407:
	.size	SSIOpen, .Lfunc_end407-SSIOpen
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function load_indexfile
	.type	load_indexfile,@function
load_indexfile:                         # @load_indexfile
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-20(%rbp), %rsi
	movq	%rdi, -8(%rbp)
	movl	$6, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 120(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 128(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 136(%rax)
	movq	-8(%rbp), %rax
	movw	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_2
# %bb.1:
	movl	$5, -16(%rbp)
	jmp	.LBB408_69
.LBB408_2:
	movl	-20(%rbp), %eax
	cmpl	v20magic.957, %eax
	je	.LBB408_5
# %bb.3:
	movl	-20(%rbp), %eax
	cmpl	v20swap.958, %eax
	je	.LBB408_5
# %bb.4:
	movl	$5, -16(%rbp)
	jmp	.LBB408_69
.LBB408_5:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_7
# %bb.6:
	jmp	.LBB408_69
.LBB408_7:
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB408_9
# %bb.8:
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB408_10
.LBB408_9:
	movl	$7, -16(%rbp)
	jmp	.LBB408_69
.LBB408_10:
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %edx
	andl	$2, %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	-8(%rbp), %rsi
	movb	%dl, 96(%rsi)
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	-8(%rbp), %rcx
	movb	%al, 97(%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$12, %rsi
	callq	read_i16
	cmpl	$0, %eax
	jne	.LBB408_12
# %bb.11:
	jmp	.LBB408_69
.LBB408_12:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$16, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_14
# %bb.13:
	jmp	.LBB408_69
.LBB408_14:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$20, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_16
# %bb.15:
	jmp	.LBB408_69
.LBB408_16:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$24, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_18
# %bb.17:
	jmp	.LBB408_69
.LBB408_18:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$28, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_20
# %bb.19:
	jmp	.LBB408_69
.LBB408_20:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$32, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_22
# %bb.21:
	jmp	.LBB408_69
.LBB408_22:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$36, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_24
# %bb.23:
	jmp	.LBB408_69
.LBB408_24:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$40, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_26
# %bb.25:
	jmp	.LBB408_69
.LBB408_26:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rsi
	addq	$44, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_28
# %bb.27:
	jmp	.LBB408_69
.LBB408_28:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movb	96(%rax), %al
	movq	-8(%rbp), %rdx
	addq	$48, %rdx
	movsbl	%al, %esi
	callq	read_offset
	cmpl	$0, %eax
	jne	.LBB408_30
# %bb.29:
	jmp	.LBB408_69
.LBB408_30:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movb	96(%rax), %al
	movq	-8(%rbp), %rdx
	addq	$64, %rdx
	movsbl	%al, %esi
	callq	read_offset
	cmpl	$0, %eax
	jne	.LBB408_32
# %bb.31:
	jmp	.LBB408_69
.LBB408_32:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movb	96(%rax), %al
	movq	-8(%rbp), %rdx
	addq	$80, %rdx
	movsbl	%al, %esi
	callq	read_offset
	cmpl	$0, %eax
	jne	.LBB408_34
# %bb.33:
	jmp	.LBB408_69
.LBB408_34:
	movq	-8(%rbp), %rax
	movzwl	12(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB408_36
# %bb.35:
	jmp	.LBB408_69
.LBB408_36:
	movq	-8(%rbp), %rax
	movzwl	12(%rax), %edi
	shlq	$3, %rdi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB408_38
# %bb.37:
	movl	$3, -16(%rbp)
	jmp	.LBB408_69
.LBB408_38:
	movw	$0, -10(%rbp)
.LBB408_39:                             # =>This Inner Loop Header: Depth=1
	movzwl	-10(%rbp), %eax
	movq	-8(%rbp), %rcx
	movzwl	12(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB408_42
# %bb.40:                               #   in Loop: Header=BB408_39 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movzwl	-10(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.41:                               #   in Loop: Header=BB408_39 Depth=1
	movw	-10(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -10(%rbp)
	jmp	.LBB408_39
.LBB408_42:
	movq	-8(%rbp), %rax
	movzwl	12(%rax), %edi
	shlq	$2, %rdi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB408_44
# %bb.43:
	movl	$3, -16(%rbp)
	jmp	.LBB408_69
.LBB408_44:
	movq	-8(%rbp), %rax
	movzwl	12(%rax), %edi
	shlq	$2, %rdi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 120(%rcx)
	cmpq	$0, %rax
	jne	.LBB408_46
# %bb.45:
	movl	$3, -16(%rbp)
	jmp	.LBB408_69
.LBB408_46:
	movq	-8(%rbp), %rax
	movzwl	12(%rax), %edi
	shlq	$2, %rdi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 128(%rcx)
	cmpq	$0, %rax
	jne	.LBB408_48
# %bb.47:
	movl	$3, -16(%rbp)
	jmp	.LBB408_69
.LBB408_48:
	movq	-8(%rbp), %rax
	movzwl	12(%rax), %edi
	shlq	$2, %rdi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 136(%rcx)
	cmpq	$0, %rax
	jne	.LBB408_50
# %bb.49:
	movl	$3, -16(%rbp)
	jmp	.LBB408_69
.LBB408_50:
	movw	$0, -10(%rbp)
.LBB408_51:                             # =>This Inner Loop Header: Depth=1
	movzwl	-10(%rbp), %eax
	movq	-8(%rbp), %rcx
	movzwl	12(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB408_68
# %bb.52:                               #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rsi
	addq	$48, %rsi
	movq	-8(%rbp), %rax
	movl	36(%rax), %edx
	movzwl	-10(%rbp), %ecx
	callq	indexfile_position
	cmpl	$0, %eax
	je	.LBB408_54
# %bb.53:
	jmp	.LBB408_69
.LBB408_54:                             #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rax
	movl	24(%rax), %edi
	shlq	$0, %rdi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	104(%rcx), %rcx
	movzwl	-10(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB408_56
# %bb.55:
	movl	$3, -16(%rbp)
	jmp	.LBB408_69
.LBB408_56:                             #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movzwl	-10(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB408_58
# %bb.57:
	jmp	.LBB408_69
.LBB408_58:                             #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	112(%rax), %rsi
	movzwl	-10(%rbp), %eax
	shlq	$2, %rax
	addq	%rax, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_60
# %bb.59:
	jmp	.LBB408_69
.LBB408_60:                             #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	120(%rax), %rsi
	movzwl	-10(%rbp), %eax
	shlq	$2, %rax
	addq	%rax, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_62
# %bb.61:
	jmp	.LBB408_69
.LBB408_62:                             #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	128(%rax), %rsi
	movzwl	-10(%rbp), %eax
	shlq	$2, %rax
	addq	%rax, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_64
# %bb.63:
	jmp	.LBB408_69
.LBB408_64:                             #   in Loop: Header=BB408_51 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	136(%rax), %rsi
	movzwl	-10(%rbp), %eax
	shlq	$2, %rax
	addq	%rax, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB408_66
# %bb.65:
	jmp	.LBB408_69
.LBB408_66:                             #   in Loop: Header=BB408_51 Depth=1
	jmp	.LBB408_67
.LBB408_67:                             #   in Loop: Header=BB408_51 Depth=1
	movw	-10(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -10(%rbp)
	jmp	.LBB408_51
.LBB408_68:
	movl	$0, -24(%rbp)
	jmp	.LBB408_70
.LBB408_69:
	movq	-8(%rbp), %rdi
	callq	SSIClose
	movl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB408_70:
	movl	-24(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end408:
	.size	load_indexfile, .Lfunc_end408-load_indexfile
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_i32
	.type	read_i32,@function
read_i32:                               # @read_i32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rax, %rdi
	movl	$4, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$1, %rax
	je	.LBB409_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB409_3
.LBB409_2:
	movl	-8(%rbp), %edi
	callq	sre_ntoh32
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB409_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end409:
	.size	read_i32, .Lfunc_end409-read_i32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_i16
	.type	read_i16,@function
read_i16:                               # @read_i16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-2(%rbp), %rax
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rax, %rdi
	movl	$2, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$1, %rax
	je	.LBB410_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB410_3
.LBB410_2:
	movzwl	-2(%rbp), %edi
	callq	sre_ntoh16
	movq	-16(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	$1, -8(%rbp)
.LBB410_3:
	movl	-8(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end410:
	.size	read_i16, .Lfunc_end410-read_i16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_offset
	.type	read_offset,@function
read_offset:                            # @read_offset
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movb	%sil, -1(%rbp)
	movq	%rdx, -16(%rbp)
	movsbl	-1(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB411_4
# %bb.1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	addq	$8, %rsi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB411_3
# %bb.2:
	movl	$0, -8(%rbp)
	jmp	.LBB411_11
.LBB411_3:
	jmp	.LBB411_10
.LBB411_4:
	movsbl	-1(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB411_8
# %bb.5:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	addq	$8, %rsi
	callq	read_i64
	cmpl	$0, %eax
	jne	.LBB411_7
# %bb.6:
	movl	$0, -8(%rbp)
	jmp	.LBB411_11
.LBB411_7:
	jmp	.LBB411_9
.LBB411_8:
	movl	$0, -8(%rbp)
	jmp	.LBB411_11
.LBB411_9:
	jmp	.LBB411_10
.LBB411_10:
	movl	$1, -8(%rbp)
.LBB411_11:
	movl	-8(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end411:
	.size	read_offset, .Lfunc_end411-read_offset
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function indexfile_position
	.type	indexfile_position,@function
indexfile_position:                     # @indexfile_position
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -8(%rbp)
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB412_2
# %bb.1:
	movb	$0, -48(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB412_6
.LBB412_2:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB412_4
# %bb.3:
	movb	$1, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	movl	%ecx, %ecx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB412_5
.LBB412_4:
	movl	$0, -4(%rbp)
	jmp	.LBB412_9
.LBB412_5:
	jmp	.LBB412_6
.LBB412_6:
	leaq	-48(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	(%rax), %rdi
	callq	SSISetFilePosition
	movl	%eax, -28(%rbp)
	cmpl	$0, %eax
	je	.LBB412_8
# %bb.7:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB412_9
.LBB412_8:
	movl	$0, -4(%rbp)
.LBB412_9:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end412:
	.size	indexfile_position, .Lfunc_end412-indexfile_position
	.cfi_endproc
                                        # -- End function
	.globl	SSIClose                # -- Begin function SSIClose
	.p2align	4, 0x90
	.type	SSIClose,@function
SSIClose:                               # @SSIClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB413_4
# %bb.1:
	movq	-8(%rbp), %rdi
	callq	clear_ssifile
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB413_3
# %bb.2:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fclose
.LBB413_3:
	movq	-8(%rbp), %rdi
	callq	free
.LBB413_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end413:
	.size	SSIClose, .Lfunc_end413-SSIClose
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function clear_ssifile
	.type	clear_ssifile,@function
clear_ssifile:                          # @clear_ssifile
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB414_8
# %bb.1:
	movl	$0, -12(%rbp)
.LBB414_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movzwl	12(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB414_7
# %bb.3:                                #   in Loop: Header=BB414_2 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB414_5
# %bb.4:                                #   in Loop: Header=BB414_2 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
.LBB414_5:                              #   in Loop: Header=BB414_2 Depth=1
	jmp	.LBB414_6
.LBB414_6:                              #   in Loop: Header=BB414_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB414_2
.LBB414_7:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	callq	free
.LBB414_8:
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB414_10
# %bb.9:
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
.LBB414_10:
	movq	-8(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB414_12
# %bb.11:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	callq	free
.LBB414_12:
	movq	-8(%rbp), %rax
	cmpq	$0, 128(%rax)
	je	.LBB414_14
# %bb.13:
	movq	-8(%rbp), %rax
	movq	128(%rax), %rdi
	callq	free
.LBB414_14:
	movq	-8(%rbp), %rax
	cmpq	$0, 136(%rax)
	je	.LBB414_16
# %bb.15:
	movq	-8(%rbp), %rax
	movq	136(%rax), %rdi
	callq	free
.LBB414_16:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end414:
	.size	clear_ssifile, .Lfunc_end414-clear_ssifile
	.cfi_endproc
                                        # -- End function
	.globl	SSISetFilePosition      # -- Begin function SSISetFilePosition
	.p2align	4, 0x90
	.type	SSISetFilePosition,@function
SSISetFilePosition:                     # @SSISetFilePosition
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB415_4
# %bb.1:
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	8(%rax), %esi
	xorl	%edx, %edx
	callq	fseek
	cmpl	$0, %eax
	je	.LBB415_3
# %bb.2:
	movl	$8, -4(%rbp)
	jmp	.LBB415_6
.LBB415_3:
	jmp	.LBB415_5
.LBB415_4:
	movl	$7, -4(%rbp)
	jmp	.LBB415_6
.LBB415_5:
	movl	$0, -4(%rbp)
.LBB415_6:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end415:
	.size	SSISetFilePosition, .Lfunc_end415-SSISetFilePosition
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function read_i64
	.type	read_i64,@function
read_i64:                               # @read_i64
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-16(%rbp), %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movl	$8, %esi
	movl	$1, %edx
	callq	fread
	cmpq	$1, %rax
	je	.LBB416_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB416_3
.LBB416_2:
	movq	-16(%rbp), %rdi
	callq	sre_ntoh64
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
.LBB416_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end416:
	.size	read_i64, .Lfunc_end416-read_i64
	.cfi_endproc
                                        # -- End function
	.globl	SSIGetOffsetByName      # -- Begin function SSIGetOffsetByName
	.p2align	4, 0x90
	.type	SSIGetOffsetByName,@function
SSIGetOffsetByName:                     # @SSIGetOffsetByName
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	28(%rax), %edx
	movq	-8(%rbp), %rcx
	addq	$64, %rcx
	movq	-8(%rbp), %rax
	movl	40(%rax), %r8d
	movq	-8(%rbp), %rax
	movl	16(%rax), %r9d
	callq	binary_search
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB417_6
# %bb.1:
	leaq	-18(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	read_i16
	cmpl	$0, %eax
	jne	.LBB417_3
# %bb.2:
	movl	$1, -16(%rbp)
	jmp	.LBB417_17
.LBB417_3:
	movzwl	-18(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movb	97(%rax), %al
	movq	-40(%rbp), %rdx
	movsbl	%al, %esi
	callq	read_offset
	cmpl	$0, %eax
	jne	.LBB417_5
# %bb.4:
	movl	$1, -16(%rbp)
	jmp	.LBB417_17
.LBB417_5:
	movl	$0, -16(%rbp)
	jmp	.LBB417_17
.LBB417_6:
	cmpl	$2, -12(%rbp)
	jne	.LBB417_16
# %bb.7:
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jbe	.LBB417_15
# %bb.8:
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	32(%rax), %edx
	movq	-8(%rbp), %rcx
	addq	$80, %rcx
	movq	-8(%rbp), %rax
	movl	44(%rax), %r8d
	movq	-8(%rbp), %rax
	movl	20(%rax), %r9d
	callq	binary_search
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB417_10
# %bb.9:
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB417_17
.LBB417_10:
	movq	-8(%rbp), %rax
	movl	28(%rax), %edi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB417_12
# %bb.11:
	movl	$3, -16(%rbp)
	jmp	.LBB417_17
.LBB417_12:
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	28(%rax), %edx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	movq	-8(%rbp), %rcx
	movl	28(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB417_14
# %bb.13:
	movl	$1, -16(%rbp)
	jmp	.LBB417_17
.LBB417_14:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rcx
	callq	SSIGetOffsetByName
	movl	%eax, -12(%rbp)
	movq	-32(%rbp), %rdi
	callq	free
.LBB417_15:
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB417_17
.LBB417_16:
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB417_17:
	movl	-16(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end417:
	.size	SSIGetOffsetByName, .Lfunc_end417-SSIGetOffsetByName
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function binary_search
	.type	binary_search,@function
binary_search:                          # @binary_search
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -32(%rbp)
	movq	%rcx, -64(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB418_2
# %bb.1:
	movl	$2, -4(%rbp)
	jmp	.LBB418_25
.LBB418_2:
	movslq	-32(%rbp), %rdi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB418_4
# %bb.3:
	movl	$3, -4(%rbp)
	jmp	.LBB418_25
.LBB418_4:
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB418_5:                              # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	shrl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	callq	indexfile_position
	movl	%eax, -40(%rbp)
	cmpl	$0, %eax
	je	.LBB418_7
# %bb.6:
	movq	-16(%rbp), %rdi
	callq	free
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB418_25
.LBB418_7:                              #   in Loop: Header=BB418_5 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	movslq	-32(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB418_9
# %bb.8:
	movq	-16(%rbp), %rdi
	callq	free
	movl	$1, -4(%rbp)
	jmp	.LBB418_25
.LBB418_9:                              #   in Loop: Header=BB418_5 Depth=1
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	strcmp
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB418_11
# %bb.10:
	jmp	.LBB418_24
.LBB418_11:                             #   in Loop: Header=BB418_5 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jb	.LBB418_13
# %bb.12:
	movq	-16(%rbp), %rdi
	callq	free
	movl	$2, -4(%rbp)
	jmp	.LBB418_25
.LBB418_13:                             #   in Loop: Header=BB418_5 Depth=1
	cmpl	$0, -20(%rbp)
	jge	.LBB418_15
# %bb.14:                               #   in Loop: Header=BB418_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB418_21
.LBB418_15:                             #   in Loop: Header=BB418_5 Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB418_20
# %bb.16:                               #   in Loop: Header=BB418_5 Depth=1
	cmpl	$0, -8(%rbp)
	jne	.LBB418_18
# %bb.17:
	movq	-16(%rbp), %rdi
	callq	free
	movl	$2, -4(%rbp)
	jmp	.LBB418_25
.LBB418_18:                             #   in Loop: Header=BB418_5 Depth=1
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
# %bb.19:                               #   in Loop: Header=BB418_5 Depth=1
	jmp	.LBB418_20
.LBB418_20:                             #   in Loop: Header=BB418_5 Depth=1
	jmp	.LBB418_21
.LBB418_21:                             #   in Loop: Header=BB418_5 Depth=1
	jmp	.LBB418_22
.LBB418_22:                             #   in Loop: Header=BB418_5 Depth=1
	jmp	.LBB418_23
.LBB418_23:                             #   in Loop: Header=BB418_5 Depth=1
	jmp	.LBB418_5
.LBB418_24:
	movq	-16(%rbp), %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB418_25:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end418:
	.size	binary_search, .Lfunc_end418-binary_search
	.cfi_endproc
                                        # -- End function
	.globl	SSIGetOffsetByNumber    # -- Begin function SSIGetOffsetByNumber
	.p2align	4, 0x90
	.type	SSIGetOffsetByNumber,@function
SSIGetOffsetByNumber:                   # @SSIGetOffsetByNumber
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jb	.LBB419_2
# %bb.1:
	movl	$2, -4(%rbp)
	jmp	.LBB419_13
.LBB419_2:
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rsi
	addq	$64, %rsi
	movq	-16(%rbp), %rax
	movl	40(%rax), %edx
	movl	-24(%rbp), %ecx
	callq	indexfile_position
	cmpl	$0, %eax
	je	.LBB419_4
# %bb.3:
	movl	$8, -4(%rbp)
	jmp	.LBB419_13
.LBB419_4:
	movq	-16(%rbp), %rax
	movl	28(%rax), %edi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB419_6
# %bb.5:
	movl	$3, -4(%rbp)
	jmp	.LBB419_13
.LBB419_6:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	28(%rax), %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fread
	movq	-16(%rbp), %rcx
	movl	28(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB419_8
# %bb.7:
	movl	$1, -4(%rbp)
	jmp	.LBB419_13
.LBB419_8:
	leaq	-18(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	read_i16
	cmpl	$0, %eax
	jne	.LBB419_10
# %bb.9:
	movl	$1, -4(%rbp)
	jmp	.LBB419_13
.LBB419_10:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movb	97(%rax), %al
	movq	-40(%rbp), %rdx
	movsbl	%al, %esi
	callq	read_offset
	cmpl	$0, %eax
	jne	.LBB419_12
# %bb.11:
	movl	$1, -4(%rbp)
	jmp	.LBB419_13
.LBB419_12:
	movzwl	-18(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB419_13:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end419:
	.size	SSIGetOffsetByNumber, .Lfunc_end419-SSIGetOffsetByNumber
	.cfi_endproc
                                        # -- End function
	.globl	SSIGetSubseqOffset      # -- Begin function SSIGetSubseqOffset
	.p2align	4, 0x90
	.type	SSIGetSubseqOffset,@function
SSIGetSubseqOffset:                     # @SSIGetSubseqOffset
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -72(%rbp)
	movq	%r9, -16(%rbp)
	movq	-32(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-72(%rbp), %rcx
	callq	SSIGetOffsetByName
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB420_2
# %bb.1:
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB420_28
.LBB420_2:
	movq	-32(%rbp), %rax
	movq	120(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB420_4
# %bb.3:
	movl	$10, -4(%rbp)
	jmp	.LBB420_28
.LBB420_4:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movb	97(%rax), %al
	movq	-16(%rbp), %rdx
	movsbl	%al, %esi
	callq	read_offset
	cmpl	$0, %eax
	jne	.LBB420_6
# %bb.5:
	movl	$1, -4(%rbp)
	jmp	.LBB420_28
.LBB420_6:
	leaq	-60(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	read_i32
	cmpl	$0, %eax
	jne	.LBB420_8
# %bb.7:
	movl	$1, -4(%rbp)
	jmp	.LBB420_28
.LBB420_8:
	movq	-32(%rbp), %rax
	movq	136(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	128(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	-24(%rbp)
	movl	%eax, -36(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB420_10
# %bb.9:
	cmpl	$0, -20(%rbp)
	jne	.LBB420_11
.LBB420_10:
	movl	$10, -4(%rbp)
	jmp	.LBB420_28
.LBB420_11:
	cmpl	$0, -40(%rbp)
	jl	.LBB420_13
# %bb.12:
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jbe	.LBB420_14
.LBB420_13:
	movl	$11, -4(%rbp)
	jmp	.LBB420_28
.LBB420_14:
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB420_21
# %bb.15:
	movq	-32(%rbp), %rax
	movsbl	97(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB420_17
# %bb.16:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movl	-36(%rbp), %eax
	imull	-20(%rbp), %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	-24(%rbp)
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 8(%rax)
	jmp	.LBB420_20
.LBB420_17:
	movq	-32(%rbp), %rax
	movsbl	97(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB420_19
# %bb.18:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-36(%rbp), %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rcx
	movl	-40(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	-24(%rbp)
	movslq	%edx, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, 8(%rax)
.LBB420_19:
	jmp	.LBB420_20
.LBB420_20:
	movl	-48(%rbp), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB420_27
.LBB420_21:
	movq	-32(%rbp), %rax
	movsbl	97(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB420_23
# %bb.22:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movl	-36(%rbp), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB420_26
.LBB420_23:
	movq	-32(%rbp), %rax
	movsbl	97(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB420_25
# %bb.24:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	-36(%rbp), %ecx
	imull	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
.LBB420_25:
	jmp	.LBB420_26
.LBB420_26:
	movl	-36(%rbp), %eax
	imull	-24(%rbp), %eax
	addl	$1, %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB420_27:
	movl	$0, -4(%rbp)
.LBB420_28:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end420:
	.size	SSIGetSubseqOffset, .Lfunc_end420-SSIGetSubseqOffset
	.cfi_endproc
                                        # -- End function
	.globl	SSIFileInfo             # -- Begin function SSIFileInfo
	.p2align	4, 0x90
	.type	SSIFileInfo,@function
SSIFileInfo:                            # @SSIFileInfo
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	cmpl	$0, -4(%rbp)
	jl	.LBB421_2
# %bb.1:
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzwl	12(%rcx), %ecx
	cmpl	%ecx, %eax
	jl	.LBB421_3
.LBB421_2:
	movl	$12, -8(%rbp)
	jmp	.LBB421_4
.LBB421_3:
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -8(%rbp)
.LBB421_4:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end421:
	.size	SSIFileInfo, .Lfunc_end421-SSIFileInfo
	.cfi_endproc
                                        # -- End function
	.globl	SSIRecommendMode        # -- Begin function SSIRecommendMode
	.p2align	4, 0x90
	.type	SSIRecommendMode,@function
SSIRecommendMode:                       # @SSIRecommendMode
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end422:
	.size	SSIRecommendMode, .Lfunc_end422-SSIRecommendMode
	.cfi_endproc
                                        # -- End function
	.globl	SSICreateIndex          # -- Begin function SSICreateIndex
	.p2align	4, 0x90
	.type	SSICreateIndex,@function
SSICreateIndex:                         # @SSICreateIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -12(%rbp)
	movq	$0, -8(%rbp)
	movl	$120, %edi
	callq	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB423_2
# %bb.1:
	jmp	.LBB423_17
.LBB423_2:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$200, 12(%rax)
	cmpl	$1, -12(%rbp)
	jne	.LBB423_4
# %bb.3:
	movabsq	$.L.str.1.969, %rdi
	movb	$0, %al
	callq	Die
.LBB423_4:
	movabsq	$.L.str.3.971, %rax
	movabsq	$.L.str.2.970, %rcx
	movq	-8(%rbp), %rdx
	movq	$0, 16(%rdx)
	movq	-8(%rbp), %rdx
	movq	$0, 24(%rdx)
	movq	-8(%rbp), %rdx
	movq	$0, 32(%rdx)
	movq	-8(%rbp), %rdx
	movq	$0, 40(%rdx)
	movq	-8(%rbp), %rdx
	movl	$0, 48(%rdx)
	movq	-8(%rbp), %rdx
	movw	$0, 52(%rdx)
	movq	-8(%rbp), %rdx
	movq	$0, 56(%rdx)
	movq	-8(%rbp), %rdx
	movl	$0, 64(%rdx)
	movq	-8(%rbp), %rdx
	movl	$0, 68(%rdx)
	movq	-8(%rbp), %rdx
	movq	%rcx, 72(%rdx)
	movq	-8(%rbp), %rcx
	movq	$0, 80(%rcx)
	movq	-8(%rbp), %rcx
	movq	$0, 88(%rcx)
	movq	-8(%rbp), %rcx
	movl	$0, 96(%rcx)
	movq	-8(%rbp), %rcx
	movl	$0, 100(%rcx)
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	movl	$80, %edi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	cmpq	$0, %rax
	jne	.LBB423_6
# %bb.5:
	jmp	.LBB423_17
.LBB423_6:
	movl	$40, %edi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	cmpq	$0, %rax
	jne	.LBB423_8
# %bb.7:
	jmp	.LBB423_17
.LBB423_8:
	movl	$40, %edi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	cmpq	$0, %rax
	jne	.LBB423_10
# %bb.9:
	jmp	.LBB423_17
.LBB423_10:
	movl	$40, %edi
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	cmpq	$0, %rax
	jne	.LBB423_12
# %bb.11:
	jmp	.LBB423_17
.LBB423_12:
	movl	$5600, %edi             # imm = 0x15E0
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	cmpq	$0, %rax
	jne	.LBB423_14
# %bb.13:
	jmp	.LBB423_17
.LBB423_14:
	movl	$5600, %edi             # imm = 0x15E0
	callq	malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 88(%rcx)
	cmpq	$0, %rax
	jne	.LBB423_16
# %bb.15:
	jmp	.LBB423_17
.LBB423_16:
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB423_18
.LBB423_17:
	movq	-8(%rbp), %rdi
	callq	SSIFreeIndex
	movq	$0, -24(%rbp)
.LBB423_18:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end423:
	.size	SSICreateIndex, .Lfunc_end423-SSICreateIndex
	.cfi_endproc
                                        # -- End function
	.globl	SSIFreeIndex            # -- Begin function SSIFreeIndex
	.p2align	4, 0x90
	.type	SSIFreeIndex,@function
SSIFreeIndex:                           # @SSIFreeIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB424_37
# %bb.1:
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB424_19
# %bb.2:
	movl	$0, -4(%rbp)
.LBB424_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jae	.LBB424_6
# %bb.4:                                #   in Loop: Header=BB424_3 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	free
# %bb.5:                                #   in Loop: Header=BB424_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB424_3
.LBB424_6:
	movl	$0, -4(%rbp)
.LBB424_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB424_10
# %bb.8:                                #   in Loop: Header=BB424_7 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	free
# %bb.9:                                #   in Loop: Header=BB424_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB424_7
.LBB424_10:
	movl	$0, -4(%rbp)
.LBB424_11:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB424_14
# %bb.12:                               #   in Loop: Header=BB424_11 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rdi
	callq	free
# %bb.13:                               #   in Loop: Header=BB424_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB424_11
.LBB424_14:
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB424_16
# %bb.15:
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free
.LBB424_16:
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB424_18
# %bb.17:
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	free
.LBB424_18:
	jmp	.LBB424_24
.LBB424_19:
	movq	-16(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB424_21
# %bb.20:
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	fclose
.LBB424_21:
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB424_23
# %bb.22:
	movq	-16(%rbp), %rax
	movq	112(%rax), %rdi
	callq	fclose
.LBB424_23:
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdi
	callq	remove
	movq	-16(%rbp), %rax
	movq	104(%rax), %rdi
	callq	remove
.LBB424_24:
	movl	$0, -4(%rbp)
.LBB424_25:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzwl	52(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB424_28
# %bb.26:                               #   in Loop: Header=BB424_25 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.27:                               #   in Loop: Header=BB424_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB424_25
.LBB424_28:
	movq	-16(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB424_30
# %bb.29:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB424_30:
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB424_32
# %bb.31:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB424_32:
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB424_34
# %bb.33:
	movq	-16(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
.LBB424_34:
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB424_36
# %bb.35:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free
.LBB424_36:
	movq	-16(%rbp), %rdi
	callq	free
.LBB424_37:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end424:
	.size	SSIFreeIndex, .Lfunc_end424-SSIFreeIndex
	.cfi_endproc
                                        # -- End function
	.globl	SSIGetFilePosition      # -- Begin function SSIGetFilePosition
	.p2align	4, 0x90
	.type	SSIGetFilePosition,@function
SSIGetFilePosition:                     # @SSIGetFilePosition
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB425_4
# %bb.1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movq	-24(%rbp), %rdi
	callq	ftell
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$-1, 8(%rax)
	jne	.LBB425_3
# %bb.2:
	movl	$9, -4(%rbp)
	jmp	.LBB425_8
.LBB425_3:
	jmp	.LBB425_7
.LBB425_4:
	cmpl	$1, -8(%rbp)
	je	.LBB425_6
# %bb.5:
	callq	abort
.LBB425_6:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	movl	$7, -4(%rbp)
	jmp	.LBB425_8
.LBB425_7:
	movl	$0, -4(%rbp)
.LBB425_8:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end425:
	.size	SSIGetFilePosition, .Lfunc_end425-SSIGetFilePosition
	.cfi_endproc
                                        # -- End function
	.globl	SSIAddFileToIndex       # -- Begin function SSIAddFileToIndex
	.p2align	4, 0x90
	.type	SSIAddFileToIndex,@function
SSIAddFileToIndex:                      # @SSIAddFileToIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	cmpl	$32767, %eax            # imm = 0x7FFF
	jl	.LBB426_2
# %bb.1:
	movl	$13, -12(%rbp)
	jmp	.LBB426_15
.LBB426_2:
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	cmpl	48(%rcx), %eax
	jbe	.LBB426_4
# %bb.3:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 48(%rcx)
.LBB426_4:
	movq	-32(%rbp), %rdi
	xorl	%esi, %esi
	callq	FileTail
	movl	$10, %ecx
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movzwl	52(%rsi), %esi
	movq	%rax, (%rdx,%rsi,8)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movzwl	52(%rsi), %esi
	movl	%eax, (%rdx,%rsi,4)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rdx
	movzwl	52(%rdx), %edx
	movl	$0, (%rax,%rdx,4)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-8(%rbp), %rdx
	movzwl	52(%rdx), %edx
	movl	$0, (%rax,%rdx,4)
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	movq	-40(%rbp), %rdx
	movl	%eax, (%rdx)
	movq	-8(%rbp), %rax
	movw	52(%rax), %dx
	addw	$1, %dx
	movw	%dx, 52(%rax)
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB426_14
# %bb.5:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	addl	$10, %eax
	movslq	%eax, %rsi
	shlq	$3, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	.LBB426_7
# %bb.6:
	movl	$3, -12(%rbp)
	jmp	.LBB426_15
.LBB426_7:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	addl	$10, %eax
	movslq	%eax, %rsi
	shlq	$2, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	jne	.LBB426_9
# %bb.8:
	movl	$3, -12(%rbp)
	jmp	.LBB426_15
.LBB426_9:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	addl	$10, %eax
	movslq	%eax, %rsi
	shlq	$2, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	jne	.LBB426_11
# %bb.10:
	movl	$3, -12(%rbp)
	jmp	.LBB426_15
.LBB426_11:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	movq	-8(%rbp), %rax
	movzwl	52(%rax), %eax
	addl	$10, %eax
	movslq	%eax, %rsi
	shlq	$2, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB426_13
# %bb.12:
	movl	$3, -12(%rbp)
	jmp	.LBB426_15
.LBB426_13:
	jmp	.LBB426_14
.LBB426_14:
	movl	$0, -12(%rbp)
.LBB426_15:
	movl	-12(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end426:
	.size	SSIAddFileToIndex, .Lfunc_end426-SSIAddFileToIndex
	.cfi_endproc
                                        # -- End function
	.globl	SSISetFileForSubseq     # -- Begin function SSISetFileForSubseq
	.p2align	4, 0x90
	.type	SSISetFileForSubseq,@function
SSISetFileForSubseq:                    # @SSISetFileForSubseq
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	cmpl	$0, -4(%rbp)
	jl	.LBB427_2
# %bb.1:
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movzwl	52(%rcx), %ecx
	cmpl	%ecx, %eax
	jl	.LBB427_3
.LBB427_2:
	movl	$12, -8(%rbp)
	jmp	.LBB427_7
.LBB427_3:
	cmpl	$0, -16(%rbp)
	jle	.LBB427_5
# %bb.4:
	cmpl	$0, -12(%rbp)
	jg	.LBB427_6
.LBB427_5:
	movl	$12, -8(%rbp)
	jmp	.LBB427_7
.LBB427_6:
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -8(%rbp)
.LBB427_7:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end427:
	.size	SSISetFileForSubseq, .Lfunc_end427-SSISetFileForSubseq
	.cfi_endproc
                                        # -- End function
	.globl	SSIAddPrimaryKeyToIndex # -- Begin function SSIAddPrimaryKeyToIndex
	.p2align	4, 0x90
	.type	SSIAddPrimaryKeyToIndex,@function
SSIAddPrimaryKeyToIndex:                # @SSIAddPrimaryKeyToIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -16(%rbp)
	cmpl	$32767, -20(%rbp)       # imm = 0x7FFF
	jl	.LBB428_2
# %bb.1:
	movl	$13, -12(%rbp)
	jmp	.LBB428_36
.LBB428_2:
	movq	-8(%rbp), %rax
	movl	68(%rax), %eax
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	jl	.LBB428_4
# %bb.3:
	movl	$14, -12(%rbp)
	jmp	.LBB428_36
.LBB428_4:
	cmpl	$0, -16(%rbp)
	jle	.LBB428_7
# %bb.5:
	cmpq	$0, -32(%rbp)
	jne	.LBB428_7
# %bb.6:
	callq	abort
.LBB428_7:
	movq	-8(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB428_12
# %bb.8:
	movq	-8(%rbp), %rdi
	callq	current_index_size
	movq	-8(%rbp), %rcx
	movslq	12(%rcx), %rcx
	cmpq	%rcx, %rax
	jb	.LBB428_12
# %bb.9:
	movq	-8(%rbp), %rdi
	callq	activate_external_sort
	cmpl	$0, %eax
	je	.LBB428_11
# %bb.10:
	movl	$4, -12(%rbp)
	jmp	.LBB428_36
.LBB428_11:
	jmp	.LBB428_12
.LBB428_12:
	movq	-56(%rbp), %rdi
	callq	strlen
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	cmpl	64(%rcx), %eax
	jbe	.LBB428_14
# %bb.13:
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 64(%rcx)
.LBB428_14:
	movq	-8(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	.LBB428_25
# %bb.15:
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB428_20
# %bb.16:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movq	-56(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-48(%rbp), %rax
	movl	8(%rax), %r8d
	cmpq	$0, -32(%rbp)
	jne	.LBB428_18
# %bb.17:
	xorl	%eax, %eax
	jmp	.LBB428_19
.LBB428_18:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
.LBB428_19:
	movabsq	$.L.str.4.974, %rsi
	movl	%eax, %r9d
	movslq	-16(%rbp), %rax
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
	jmp	.LBB428_24
.LBB428_20:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movq	-56(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-48(%rbp), %rax
	movq	8(%rax), %r8
	cmpq	$0, -32(%rbp)
	jne	.LBB428_22
# %bb.21:
	xorl	%r9d, %r9d
	jmp	.LBB428_23
.LBB428_22:
	movq	-32(%rbp), %rax
	movq	8(%rax), %r9
.LBB428_23:
	movabsq	$.L.str.5.975, %rsi
	movslq	-16(%rbp), %rax
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
.LBB428_24:
	movq	-8(%rbp), %rax
	movl	68(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 68(%rax)
	movl	$0, -12(%rbp)
	jmp	.LBB428_36
.LBB428_25:
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	68(%rdx), %edx
	imulq	$56, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	jne	.LBB428_27
# %bb.26:
	movl	$3, -12(%rbp)
	jmp	.LBB428_36
.LBB428_27:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	68(%rdx), %edx
	imulq	$56, %rdx, %rdx
	addq	%rdx, %rcx
	movw	%ax, 8(%rcx)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	68(%rcx), %ecx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	-48(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 16(%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 24(%rax)
	cmpq	$0, -32(%rbp)
	je	.LBB428_30
# %bb.28:
	cmpl	$0, -16(%rbp)
	jle	.LBB428_30
# %bb.29:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	68(%rcx), %ecx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 32(%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 40(%rax)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	68(%rdx), %edx
	imulq	$56, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 48(%rcx)
	jmp	.LBB428_31
.LBB428_30:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	68(%rcx), %ecx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	-48(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 32(%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 40(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	68(%rcx), %ecx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 48(%rax)
.LBB428_31:
	movl	$100, %ecx
	movq	-8(%rbp), %rax
	movl	68(%rax), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax)
	movq	-8(%rbp), %rax
	movl	68(%rax), %eax
	xorl	%edx, %edx
	divl	%ecx
	cmpl	$0, %edx
	jne	.LBB428_35
# %bb.32:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	68(%rax), %eax
	addl	$100, %eax
	movl	%eax, %eax
	imulq	$56, %rax, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB428_34
# %bb.33:
	movl	$3, -12(%rbp)
	jmp	.LBB428_36
.LBB428_34:
	jmp	.LBB428_35
.LBB428_35:
	movl	$0, -12(%rbp)
.LBB428_36:
	movl	-12(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end428:
	.size	SSIAddPrimaryKeyToIndex, .Lfunc_end428-SSIAddPrimaryKeyToIndex
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function current_index_size
	.type	current_index_size,@function
current_index_size:                     # @current_index_size
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	48(%rax), %eax
	addl	$16, %eax
	movl	%eax, %eax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB429_2
# %bb.1:
	movq	-8(%rbp), %rax
	movl	64(%rax), %eax
	addl	$22, %eax
	jmp	.LBB429_3
.LBB429_2:
	movq	-8(%rbp), %rax
	movl	64(%rax), %eax
	addl	$14, %eax
.LBB429_3:
	movl	%eax, %eax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	64(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	96(%rcx), %eax
	movl	%eax, %eax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movzwl	52(%rcx), %ecx
	imulq	%rcx, %rax
	addq	$66, %rax
	movq	-32(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	68(%rdx), %edx
	imulq	%rdx, %rcx
	addq	%rcx, %rax
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	100(%rdx), %edx
	imulq	%rdx, %rcx
	addq	%rcx, %rax
	shrq	$20, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end429:
	.size	current_index_size, .Lfunc_end429-current_index_size
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function activate_external_sort
	.type	activate_external_sort,@function
activate_external_sort:                 # @activate_external_sort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	.LBB430_2
# %bb.1:
	movl	$0, -20(%rbp)
	jmp	.LBB430_38
.LBB430_2:
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdi
	callq	FileExists
	cmpl	$0, %eax
	je	.LBB430_4
# %bb.3:
	movl	$1, -20(%rbp)
	jmp	.LBB430_38
.LBB430_4:
	movq	-16(%rbp), %rax
	movq	104(%rax), %rdi
	callq	FileExists
	cmpl	$0, %eax
	je	.LBB430_6
# %bb.5:
	movl	$1, -20(%rbp)
	jmp	.LBB430_38
.LBB430_6:
	movabsq	$.L.str.31.976, %rsi
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdi
	callq	fopen
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB430_8
# %bb.7:
	movl	$1, -20(%rbp)
	jmp	.LBB430_38
.LBB430_8:
	movabsq	$.L.str.31.976, %rsi
	movq	-16(%rbp), %rax
	movq	104(%rax), %rdi
	callq	fopen
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB430_10
# %bb.9:
	movl	$1, -20(%rbp)
	jmp	.LBB430_38
.LBB430_10:
	movl	$0, -4(%rbp)
.LBB430_11:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jae	.LBB430_17
# %bb.12:                               #   in Loop: Header=BB430_11 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB430_14
# %bb.13:                               #   in Loop: Header=BB430_11 Depth=1
	movabsq	$.L.str.32.977, %rsi
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	8(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	56(%rax), %r8
	movslq	-4(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %r8
	movl	24(%r8), %r8d
	movq	-16(%rbp), %rax
	movq	56(%rax), %r9
	movslq	-4(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %r9
	movl	40(%r9), %r9d
	movq	-16(%rbp), %rax
	movq	56(%rax), %r10
	movslq	-4(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %r10
	movl	48(%r10), %eax
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
	jmp	.LBB430_15
.LBB430_14:                             #   in Loop: Header=BB430_11 Depth=1
	movabsq	$.L.str.33.978, %rsi
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	8(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	56(%rax), %r8
	movslq	-4(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %r8
	movq	24(%r8), %r8
	movq	-16(%rbp), %rax
	movq	56(%rax), %r9
	movslq	-4(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %r9
	movq	40(%r9), %r9
	movq	-16(%rbp), %rax
	movq	56(%rax), %r10
	movslq	-4(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %r10
	movl	48(%r10), %eax
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
.LBB430_15:                             #   in Loop: Header=BB430_11 Depth=1
	jmp	.LBB430_16
.LBB430_16:                             #   in Loop: Header=BB430_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB430_11
.LBB430_17:
	movl	$0, -4(%rbp)
.LBB430_18:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB430_21
# %bb.19:                               #   in Loop: Header=BB430_18 Depth=1
	movabsq	$.L.str.6.979, %rsi
	movq	-16(%rbp), %rax
	movq	112(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rcx
	movb	$0, %al
	callq	fprintf
# %bb.20:                               #   in Loop: Header=BB430_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB430_18
.LBB430_21:
	movl	$0, -4(%rbp)
.LBB430_22:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jae	.LBB430_25
# %bb.23:                               #   in Loop: Header=BB430_22 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	free
# %bb.24:                               #   in Loop: Header=BB430_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB430_22
.LBB430_25:
	movl	$0, -4(%rbp)
.LBB430_26:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB430_29
# %bb.27:                               #   in Loop: Header=BB430_26 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	free
# %bb.28:                               #   in Loop: Header=BB430_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB430_26
.LBB430_29:
	movl	$0, -4(%rbp)
.LBB430_30:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB430_33
# %bb.31:                               #   in Loop: Header=BB430_30 Depth=1
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rdi
	callq	free
# %bb.32:                               #   in Loop: Header=BB430_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB430_30
.LBB430_33:
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB430_35
# %bb.34:
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free
.LBB430_35:
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB430_37
# %bb.36:
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	free
.LBB430_37:
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 88(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$0, -20(%rbp)
.LBB430_38:
	movl	-20(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end430:
	.size	activate_external_sort, .Lfunc_end430-activate_external_sort
	.cfi_endproc
                                        # -- End function
	.globl	SSIAddSecondaryKeyToIndex # -- Begin function SSIAddSecondaryKeyToIndex
	.p2align	4, 0x90
	.type	SSIAddSecondaryKeyToIndex,@function
SSIAddSecondaryKeyToIndex:              # @SSIAddSecondaryKeyToIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	100(%rax), %eax
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	jl	.LBB431_2
# %bb.1:
	movl	$14, -12(%rbp)
	jmp	.LBB431_20
.LBB431_2:
	movq	-8(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB431_7
# %bb.3:
	movq	-8(%rbp), %rdi
	callq	current_index_size
	movq	-8(%rbp), %rcx
	movslq	12(%rcx), %rcx
	cmpq	%rcx, %rax
	jb	.LBB431_7
# %bb.4:
	movq	-8(%rbp), %rdi
	callq	activate_external_sort
	cmpl	$0, %eax
	je	.LBB431_6
# %bb.5:
	movl	$4, -12(%rbp)
	jmp	.LBB431_20
.LBB431_6:
	jmp	.LBB431_7
.LBB431_7:
	movq	-24(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jbe	.LBB431_9
# %bb.8:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 96(%rcx)
.LBB431_9:
	movq	-8(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	.LBB431_11
# %bb.10:
	movabsq	$.L.str.6.979, %rsi
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movb	$0, %al
	callq	fprintf
	movq	-8(%rbp), %rax
	movl	100(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 100(%rax)
	movl	$0, -12(%rbp)
	jmp	.LBB431_20
.LBB431_11:
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	88(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	100(%rdx), %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rax, (%rcx)
	cmpq	$0, %rax
	jne	.LBB431_13
# %bb.12:
	movl	$3, -12(%rbp)
	jmp	.LBB431_20
.LBB431_13:
	movq	-32(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-8(%rbp), %rcx
	movq	88(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	100(%rdx), %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rax, 8(%rcx)
	cmpq	$0, %rax
	jne	.LBB431_15
# %bb.14:
	movl	$3, -12(%rbp)
	jmp	.LBB431_20
.LBB431_15:
	movl	$100, %ecx
	movq	-8(%rbp), %rax
	movl	100(%rax), %edx
	addl	$1, %edx
	movl	%edx, 100(%rax)
	movq	-8(%rbp), %rax
	movl	100(%rax), %eax
	xorl	%edx, %edx
	divl	%ecx
	cmpl	$0, %edx
	jne	.LBB431_19
# %bb.16:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	100(%rax), %eax
	addl	$100, %eax
	movl	%eax, %esi
	shlq	$4, %rsi
	callq	realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 88(%rax)
	jne	.LBB431_18
# %bb.17:
	movl	$3, -12(%rbp)
	jmp	.LBB431_20
.LBB431_18:
	jmp	.LBB431_19
.LBB431_19:
	movl	$0, -12(%rbp)
.LBB431_20:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end431:
	.size	SSIAddSecondaryKeyToIndex, .Lfunc_end431-SSIAddSecondaryKeyToIndex
	.cfi_endproc
                                        # -- End function
	.globl	SSIWriteIndex           # -- Begin function SSIWriteIndex
	.p2align	4, 0x90
	.type	SSIWriteIndex,@function
SSIWriteIndex:                          # @SSIWriteIndex
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1232, %rsp             # imm = 0x4D0
	movabsq	$.L.str.7.980, %rax
	movq	%rdi, -136(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-136(%rbp), %rdi
	movq	%rax, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB432_2
# %bb.1:
	movl	$4, -4(%rbp)
	jmp	.LBB432_143
.LBB432_2:
	movl	$0, -52(%rbp)
	movq	-16(%rbp), %rdi
	callq	current_index_size
	cmpq	$2047, %rax             # imm = 0x7FF
	jb	.LBB432_4
# %bb.3:
	movabsq	$.L.str.8.981, %rdi
	movq	-16(%rbp), %rax
	movl	$1, 4(%rax)
	movb	$0, %al
	callq	Die
.LBB432_4:
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	addl	$16, %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB432_6
# %bb.5:
	movq	-16(%rbp), %rax
	movl	64(%rax), %eax
	addl	$22, %eax
	jmp	.LBB432_7
.LBB432_6:
	movq	-16(%rbp), %rax
	movl	64(%rax), %eax
	addl	$14, %eax
.LBB432_7:
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	64(%rcx), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -44(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB432_9
# %bb.8:
	movl	-44(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -44(%rbp)
.LBB432_9:
	movq	-16(%rbp), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB432_11
# %bb.10:
	movl	-44(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -44(%rbp)
.LBB432_11:
	movl	$54, %eax
	movl	$66, %ecx
	movl	-44(%rbp), %edx
	andl	$2, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cltq
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	-72(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movzwl	52(%rdx), %edx
	imull	%edx, %ecx
	movl	%ecx, %ecx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movl	-68(%rbp), %ecx
	movq	-16(%rbp), %rdx
	imull	68(%rdx), %ecx
	movl	%ecx, %ecx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	.LBB432_21
# %bb.12:
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	fclose
	movabsq	$.L.str.9.982, %rsi
	leaq	-1232(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	72(%rax), %rcx
	movb	$0, %al
	callq	sprintf
	leaq	-1232(%rbp), %rdi
	callq	system
	movl	%eax, -52(%rbp)
	cmpl	$0, %eax
	je	.LBB432_14
# %bb.13:
	movl	$16, -4(%rbp)
	jmp	.LBB432_143
.LBB432_14:
	movabsq	$.L.str.10.983, %rsi
	movq	-16(%rbp), %rax
	movq	72(%rax), %rdi
	callq	fopen
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB432_16
# %bb.15:
	movl	$16, -4(%rbp)
	jmp	.LBB432_143
.LBB432_16:
	movq	-16(%rbp), %rax
	movq	112(%rax), %rdi
	callq	fclose
	movabsq	$.L.str.9.982, %rsi
	leaq	-1232(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
	movq	-16(%rbp), %rax
	movq	104(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	104(%rax), %rcx
	movb	$0, %al
	callq	sprintf
	leaq	-1232(%rbp), %rdi
	callq	system
	movl	%eax, -52(%rbp)
	cmpl	$0, %eax
	je	.LBB432_18
# %bb.17:
	movl	$16, -4(%rbp)
	jmp	.LBB432_143
.LBB432_18:
	movabsq	$.L.str.10.983, %rsi
	movq	-16(%rbp), %rax
	movq	104(%rax), %rdi
	callq	fopen
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB432_20
# %bb.19:
	movl	$16, -4(%rbp)
	jmp	.LBB432_143
.LBB432_20:
	jmp	.LBB432_22
.LBB432_21:
	movabsq	$pkeysort, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	68(%rax), %esi
	movl	$56, %edx
	movb	$0, %al
	callq	specqsort
	movabsq	$skeysort, %rcx
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	100(%rax), %esi
	movl	$16, %edx
	movb	$0, %al
	callq	specqsort
.LBB432_22:
	movq	-32(%rbp), %rdi
	movl	v20magic.957, %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_24
# %bb.23:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_24:
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_26
# %bb.25:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_26:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movzwl	52(%rax), %esi
	callq	write_i16
	cmpl	$0, %eax
	jne	.LBB432_28
# %bb.27:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_28:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	68(%rax), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_30
# %bb.29:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_30:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	100(%rax), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_32
# %bb.31:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_32:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_34
# %bb.33:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_34:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	64(%rax), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_36
# %bb.35:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_36:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	96(%rax), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_38
# %bb.37:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_38:
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_40
# %bb.39:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_40:
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_42
# %bb.41:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_42:
	movq	-32(%rbp), %rdi
	movl	-116(%rbp), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_44
# %bb.43:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_44:
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB432_52
# %bb.45:
	movq	-32(%rbp), %rdi
	movq	-104(%rbp), %rsi
                                        # kill: def %esi killed %esi killed %rsi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_47
# %bb.46:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_47:
	movq	-32(%rbp), %rdi
	movq	-96(%rbp), %rsi
                                        # kill: def %esi killed %esi killed %rsi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_49
# %bb.48:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_49:
	movq	-32(%rbp), %rdi
	movq	-128(%rbp), %rsi
                                        # kill: def %esi killed %esi killed %rsi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_51
# %bb.50:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_51:
	jmp	.LBB432_59
.LBB432_52:
	movq	-32(%rbp), %rdi
	movq	-104(%rbp), %rsi
	callq	write_i64
	cmpl	$0, %eax
	jne	.LBB432_54
# %bb.53:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_54:
	movq	-32(%rbp), %rdi
	movq	-96(%rbp), %rsi
	callq	write_i64
	cmpl	$0, %eax
	jne	.LBB432_56
# %bb.55:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_56:
	movq	-32(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	write_i64
	cmpl	$0, %eax
	jne	.LBB432_58
# %bb.57:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_58:
	jmp	.LBB432_59
.LBB432_59:
	movq	-16(%rbp), %rax
	movl	48(%rax), %edi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB432_61
# %bb.60:
	movl	$3, -4(%rbp)
	jmp	.LBB432_143
.LBB432_61:
	movl	$0, -20(%rbp)
.LBB432_62:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzwl	52(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB432_78
# %bb.63:                               #   in Loop: Header=BB432_62 Depth=1
	movl	$0, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jbe	.LBB432_66
# %bb.64:                               #   in Loop: Header=BB432_62 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jbe	.LBB432_66
# %bb.65:                               #   in Loop: Header=BB432_62 Depth=1
	movl	-48(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -48(%rbp)
.LBB432_66:                             #   in Loop: Header=BB432_62 Depth=1
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	strcpy
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	48(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_68
# %bb.67:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_68:                             #   in Loop: Header=BB432_62 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_70
# %bb.69:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_70:                             #   in Loop: Header=BB432_62 Depth=1
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_72
# %bb.71:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_72:                             #   in Loop: Header=BB432_62 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_74
# %bb.73:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_74:                             #   in Loop: Header=BB432_62 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_76
# %bb.75:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_76:                             #   in Loop: Header=BB432_62 Depth=1
	jmp	.LBB432_77
.LBB432_77:                             #   in Loop: Header=BB432_62 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB432_62
.LBB432_78:
	movq	-40(%rbp), %rdi
	callq	free
	movq	-16(%rbp), %rax
	movl	64(%rax), %edi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB432_80
# %bb.79:
	movl	$3, -4(%rbp)
	jmp	.LBB432_143
.LBB432_80:
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	.LBB432_100
# %bb.81:
	movq	$0, -88(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -20(%rbp)
.LBB432_82:                             # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jae	.LBB432_99
# %bb.83:                               #   in Loop: Header=BB432_82 Depth=1
	leaq	-88(%rbp), %rdi
	leaq	-112(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdx
	callq	sre_fgets
	cmpq	$0, %rax
	jne	.LBB432_85
# %bb.84:
	movl	$1, -4(%rbp)
	jmp	.LBB432_143
.LBB432_85:                             #   in Loop: Header=BB432_82 Depth=1
	leaq	-208(%rbp), %rdx
	movq	-88(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movsbl	%al, %esi
	callq	parse_pkey_info
	cmpl	$0, %eax
	je	.LBB432_87
# %bb.86:
	movl	$6, -4(%rbp)
	jmp	.LBB432_143
.LBB432_87:                             #   in Loop: Header=BB432_82 Depth=1
	movq	-40(%rbp), %rdi
	movq	-208(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	64(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	64(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_89
# %bb.88:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_89:                             #   in Loop: Header=BB432_82 Depth=1
	movq	-32(%rbp), %rdi
	movzwl	-200(%rbp), %esi
	callq	write_i16
	cmpl	$0, %eax
	jne	.LBB432_91
# %bb.90:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_91:                             #   in Loop: Header=BB432_82 Depth=1
	leaq	-208(%rbp), %rsi
	movq	-32(%rbp), %rdi
	addq	$16, %rsi
	callq	write_offset
	cmpl	$0, %eax
	jne	.LBB432_93
# %bb.92:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_93:                             #   in Loop: Header=BB432_82 Depth=1
	leaq	-208(%rbp), %rsi
	movq	-32(%rbp), %rdi
	addq	$32, %rsi
	callq	write_offset
	cmpl	$0, %eax
	jne	.LBB432_95
# %bb.94:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_95:                             #   in Loop: Header=BB432_82 Depth=1
	movq	-32(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_97
# %bb.96:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_97:                             #   in Loop: Header=BB432_82 Depth=1
	jmp	.LBB432_98
.LBB432_98:                             #   in Loop: Header=BB432_82 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB432_82
.LBB432_99:
	movq	-88(%rbp), %rdi
	callq	free
	jmp	.LBB432_115
.LBB432_100:
	movl	$0, -20(%rbp)
.LBB432_101:                            # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	68(%rcx), %eax
	jae	.LBB432_114
# %bb.102:                              #   in Loop: Header=BB432_101 Depth=1
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	callq	strcpy
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	64(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	64(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_104
# %bb.103:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_104:                            #   in Loop: Header=BB432_101 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	8(%rax), %esi
	callq	write_i16
	cmpl	$0, %eax
	jne	.LBB432_106
# %bb.105:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_106:                            #   in Loop: Header=BB432_101 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rsi
	movslq	-20(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %rsi
	addq	$16, %rsi
	callq	write_offset
	cmpl	$0, %eax
	jne	.LBB432_108
# %bb.107:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_108:                            #   in Loop: Header=BB432_101 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rsi
	movslq	-20(%rbp), %rax
	imulq	$56, %rax, %rax
	addq	%rax, %rsi
	addq	$32, %rsi
	callq	write_offset
	cmpl	$0, %eax
	jne	.LBB432_110
# %bb.109:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_110:                            #   in Loop: Header=BB432_101 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$56, %rcx, %rcx
	addq	%rcx, %rax
	movl	48(%rax), %esi
	callq	write_i32
	cmpl	$0, %eax
	jne	.LBB432_112
# %bb.111:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_112:                            #   in Loop: Header=BB432_101 Depth=1
	jmp	.LBB432_113
.LBB432_113:                            #   in Loop: Header=BB432_101 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB432_101
.LBB432_114:
	jmp	.LBB432_115
.LBB432_115:
	movq	-16(%rbp), %rax
	cmpl	$0, 100(%rax)
	jbe	.LBB432_142
# %bb.116:
	movq	-16(%rbp), %rax
	movl	96(%rax), %edi
	shlq	$0, %rdi
	callq	malloc
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB432_118
# %bb.117:
	movl	$3, -4(%rbp)
	jmp	.LBB432_143
.LBB432_118:
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	.LBB432_132
# %bb.119:
	movq	$0, -80(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -20(%rbp)
.LBB432_120:                            # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB432_131
# %bb.121:                              #   in Loop: Header=BB432_120 Depth=1
	leaq	-80(%rbp), %rdi
	leaq	-108(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	112(%rax), %rdx
	callq	sre_fgets
	cmpq	$0, %rax
	jne	.LBB432_123
# %bb.122:
	movl	$1, -4(%rbp)
	jmp	.LBB432_143
.LBB432_123:                            #   in Loop: Header=BB432_120 Depth=1
	leaq	-152(%rbp), %rsi
	movq	-80(%rbp), %rdi
	callq	parse_skey_info
	cmpl	$0, %eax
	je	.LBB432_125
# %bb.124:
	movl	$6, -4(%rbp)
	jmp	.LBB432_143
.LBB432_125:                            #   in Loop: Header=BB432_120 Depth=1
	movq	-64(%rbp), %rdi
	movq	-152(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	strcpy
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	96(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_127
# %bb.126:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_127:                            #   in Loop: Header=BB432_120 Depth=1
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	64(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	64(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_129
# %bb.128:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_129:                            #   in Loop: Header=BB432_120 Depth=1
	jmp	.LBB432_130
.LBB432_130:                            #   in Loop: Header=BB432_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB432_120
.LBB432_131:
	movq	-80(%rbp), %rdi
	callq	free
	jmp	.LBB432_141
.LBB432_132:
	movl	$0, -20(%rbp)
.LBB432_133:                            # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	100(%rcx), %eax
	jae	.LBB432_140
# %bb.134:                              #   in Loop: Header=BB432_133 Depth=1
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	callq	strcpy
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rsi
	callq	strcpy
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	96(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_136
# %bb.135:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_136:                            #   in Loop: Header=BB432_133 Depth=1
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	64(%rax), %edx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
	movq	-16(%rbp), %rcx
	movl	64(%rcx), %ecx
	cmpq	%rcx, %rax
	je	.LBB432_138
# %bb.137:
	movl	$15, -4(%rbp)
	jmp	.LBB432_143
.LBB432_138:                            #   in Loop: Header=BB432_133 Depth=1
	jmp	.LBB432_139
.LBB432_139:                            #   in Loop: Header=BB432_133 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB432_133
.LBB432_140:
	jmp	.LBB432_141
.LBB432_141:
	movq	-64(%rbp), %rdi
	callq	free
.LBB432_142:
	movq	-40(%rbp), %rdi
	callq	free
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB432_143:
	movl	-4(%rbp), %eax
	addq	$1232, %rsp             # imm = 0x4D0
	popq	%rbp
	retq
.Lfunc_end432:
	.size	SSIWriteIndex, .Lfunc_end432-SSIWriteIndex
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pkeysort
	.type	pkeysort,@function
pkeysort:                               # @pkeysort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rsi
	callq	strcmp
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end433:
	.size	pkeysort, .Lfunc_end433-pkeysort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function skeysort
	.type	skeysort,@function
skeysort:                               # @skeysort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rsi
	callq	strcmp
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end434:
	.size	skeysort, .Lfunc_end434-skeysort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function write_i32
	.type	write_i32,@function
write_i32:                              # @write_i32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	-4(%rbp), %edi
	callq	sre_hton32
	leaq	-4(%rbp), %rdi
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rcx
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	je	.LBB435_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB435_3
.LBB435_2:
	movl	$1, -8(%rbp)
.LBB435_3:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end435:
	.size	write_i32, .Lfunc_end435-write_i32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function write_i16
	.type	write_i16,@function
write_i16:                              # @write_i16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movw	%si, -2(%rbp)
	movzwl	-2(%rbp), %edi
	callq	sre_hton16
	leaq	-2(%rbp), %rdi
	movw	%ax, -2(%rbp)
	movq	-16(%rbp), %rcx
	movl	$2, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	je	.LBB436_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB436_3
.LBB436_2:
	movl	$1, -8(%rbp)
.LBB436_3:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end436:
	.size	write_i16, .Lfunc_end436-write_i16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function write_i64
	.type	write_i64,@function
write_i64:                              # @write_i64
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	sre_hton64
	leaq	-16(%rbp), %rdi
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rcx
	movl	$8, %esi
	movl	$1, %edx
	callq	fwrite
	cmpq	$1, %rax
	je	.LBB437_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB437_3
.LBB437_2:
	movl	$1, -4(%rbp)
.LBB437_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end437:
	.size	write_i64, .Lfunc_end437-write_i64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_pkey_info
	.type	parse_pkey_info,@function
parse_pkey_info:                        # @parse_pkey_info
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-40(%rbp), %rax
	movabsq	$.L.str.30.984, %rcx
	leaq	-20(%rbp), %r8
	movq	%rdi, -48(%rbp)
	movb	%sil, -1(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %rdx
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB438_2
# %bb.1:
	movl	$6, -8(%rbp)
	jmp	.LBB438_14
.LBB438_2:
	leaq	-40(%rbp), %rdi
	movabsq	$.L.str.30.984, %rsi
	leaq	-20(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB438_4
# %bb.3:
	movl	$6, -8(%rbp)
	jmp	.LBB438_14
.LBB438_4:
	movq	-16(%rbp), %rdi
	callq	atoi
	movq	-32(%rbp), %rcx
	movw	%ax, 8(%rcx)
	movsbl	-1(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB438_10
# %bb.5:
	leaq	-40(%rbp), %rdi
	movabsq	$.L.str.30.984, %rsi
	leaq	-20(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB438_7
# %bb.6:
	movl	$6, -8(%rbp)
	jmp	.LBB438_14
.LBB438_7:
	movb	-1(%rbp), %al
	movq	-32(%rbp), %rcx
	movb	%al, 16(%rcx)
	movq	-16(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	strtoul
	leaq	-40(%rbp), %rdi
	movabsq	$.L.str.30.984, %rsi
	leaq	-20(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB438_9
# %bb.8:
	movl	$6, -8(%rbp)
	jmp	.LBB438_14
.LBB438_9:
	movb	-1(%rbp), %al
	movq	-32(%rbp), %rcx
	movb	%al, 32(%rcx)
	movq	-16(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	strtoul
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB438_11
.LBB438_10:
	movl	$7, -8(%rbp)
	jmp	.LBB438_14
.LBB438_11:
	leaq	-40(%rbp), %rdi
	movabsq	$.L.str.30.984, %rsi
	leaq	-20(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB438_13
# %bb.12:
	movl	$6, -8(%rbp)
	jmp	.LBB438_14
.LBB438_13:
	movq	-16(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	strtoul
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movl	$0, -8(%rbp)
.LBB438_14:
	movl	-8(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end438:
	.size	parse_pkey_info, .Lfunc_end438-parse_pkey_info
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function write_offset
	.type	write_offset,@function
write_offset:                           # @write_offset
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB439_2
# %bb.1:
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	8(%rax), %esi
	callq	write_i32
	movl	%eax, -4(%rbp)
	jmp	.LBB439_5
.LBB439_2:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB439_4
# %bb.3:
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rsi
	callq	write_i64
	movl	%eax, -4(%rbp)
	jmp	.LBB439_5
.LBB439_4:
	callq	abort
.LBB439_5:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end439:
	.size	write_offset, .Lfunc_end439-write_offset
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_skey_info
	.type	parse_skey_info,@function
parse_skey_info:                        # @parse_skey_info
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-32(%rbp), %rax
	movabsq	$.L.str.30.984, %rcx
	leaq	-20(%rbp), %rdx
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB440_2
# %bb.1:
	movl	$6, -4(%rbp)
	jmp	.LBB440_5
.LBB440_2:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.30.984, %rsi
	leaq	-20(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB440_4
# %bb.3:
	movl	$6, -4(%rbp)
	jmp	.LBB440_5
.LBB440_4:
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB440_5:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end440:
	.size	parse_skey_info, .Lfunc_end440-parse_skey_info
	.cfi_endproc
                                        # -- End function
	.globl	SSIErrorString          # -- Begin function SSIErrorString
	.p2align	4, 0x90
	.type	SSIErrorString,@function
SSIErrorString:                         # @SSIErrorString
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$16, %rcx
	ja	.LBB441_19
# %bb.1:
	movq	.LJTI441_0(,%rax,8), %rax
	jmpq	*%rax
.LBB441_2:
	movabsq	$.L.str.11.985, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_3:
	movabsq	$.L.str.12.986, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_4:
	movabsq	$.L.str.13.987, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_5:
	movabsq	$.L.str.14.988, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_6:
	movabsq	$.L.str.15.989, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_7:
	movabsq	$.L.str.16.990, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_8:
	movabsq	$.L.str.17.991, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_9:
	movabsq	$.L.str.18.992, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_10:
	movabsq	$.L.str.19.993, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_11:
	movabsq	$.L.str.20.994, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_12:
	movabsq	$.L.str.21.995, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_13:
	movabsq	$.L.str.22.996, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_14:
	movabsq	$.L.str.23.997, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_15:
	movabsq	$.L.str.24.998, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_16:
	movabsq	$.L.str.25.999, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_17:
	movabsq	$.L.str.26.1000, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_18:
	movabsq	$.L.str.27.1001, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB441_20
.LBB441_19:
	movabsq	$.L.str.28.1002, %rax
	movq	%rax, -8(%rbp)
.LBB441_20:
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end441:
	.size	SSIErrorString, .Lfunc_end441-SSIErrorString
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI441_0:
	.quad	.LBB441_2
	.quad	.LBB441_3
	.quad	.LBB441_4
	.quad	.LBB441_5
	.quad	.LBB441_6
	.quad	.LBB441_7
	.quad	.LBB441_8
	.quad	.LBB441_9
	.quad	.LBB441_10
	.quad	.LBB441_11
	.quad	.LBB441_12
	.quad	.LBB441_13
	.quad	.LBB441_14
	.quad	.LBB441_15
	.quad	.LBB441_16
	.quad	.LBB441_17
	.quad	.LBB441_18
                                        # -- End function
	.text
	.globl	SSIForceExternalSort    # -- Begin function SSIForceExternalSort
	.p2align	4, 0x90
	.type	SSIForceExternalSort,@function
SSIForceExternalSort:                   # @SSIForceExternalSort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	activate_external_sort
	cmpl	$0, %eax
	je	.LBB442_2
# %bb.1:
	movabsq	$.L.str.29.1003, %rdi
	movb	$0, %al
	callq	Die
.LBB442_2:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end442:
	.size	SSIForceExternalSort, .Lfunc_end442-SSIForceExternalSort
	.cfi_endproc
                                        # -- End function
	.globl	InitIntStack            # -- Begin function InitIntStack
	.p2align	4, 0x90
	.type	InitIntStack,@function
InitIntStack:                           # @InitIntStack
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$16, %edi
	callq	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB443_2
# %bb.1:
	movabsq	$.L.str.1006, %rdi
	movabsq	$.L.str.1.1007, %rsi
	movl	$42, %edx
	movb	$0, %al
	callq	Die
.LBB443_2:
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end443:
	.size	InitIntStack, .Lfunc_end443-InitIntStack
	.cfi_endproc
                                        # -- End function
	.globl	PushIntStack            # -- Begin function PushIntStack
	.p2align	4, 0x90
	.type	PushIntStack,@function
PushIntStack:                           # @PushIntStack
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB444_2
# %bb.1:
	movabsq	$.L.str.1006, %rdi
	movabsq	$.L.str.1.1007, %rsi
	movl	$52, %edx
	movb	$0, %al
	callq	Die
.LBB444_2:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 8(%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end444:
	.size	PushIntStack, .Lfunc_end444-PushIntStack
	.cfi_endproc
                                        # -- End function
	.globl	PopIntStack             # -- Begin function PopIntStack
	.p2align	4, 0x90
	.type	PopIntStack,@function
PopIntStack:                            # @PopIntStack
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB445_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB445_3
.LBB445_2:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rdi
	callq	free
	movl	$1, -4(%rbp)
.LBB445_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end445:
	.size	PopIntStack, .Lfunc_end445-PopIntStack
	.cfi_endproc
                                        # -- End function
	.globl	ReverseIntStack         # -- Begin function ReverseIntStack
	.p2align	4, 0x90
	.type	ReverseIntStack,@function
ReverseIntStack:                        # @ReverseIntStack
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	$0, 8(%rax)
.LBB446_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB446_3
# %bb.2:                                #   in Loop: Header=BB446_1 Depth=1
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	jmp	.LBB446_1
.LBB446_3:
	popq	%rbp
	retq
.Lfunc_end446:
	.size	ReverseIntStack, .Lfunc_end446-ReverseIntStack
	.cfi_endproc
                                        # -- End function
	.globl	FreeIntStack            # -- Begin function FreeIntStack
	.p2align	4, 0x90
	.type	FreeIntStack,@function
FreeIntStack:                           # @FreeIntStack
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB447_1:                              # =>This Inner Loop Header: Depth=1
	leaq	-20(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	PopIntStack
	cmpl	$0, %eax
	je	.LBB447_3
# %bb.2:                                #   in Loop: Header=BB447_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB447_1
.LBB447_3:
	movq	-16(%rbp), %rdi
	callq	free
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end447:
	.size	FreeIntStack, .Lfunc_end447-FreeIntStack
	.cfi_endproc
                                        # -- End function
	.globl	ReadStockholm           # -- Begin function ReadStockholm
	.p2align	4, 0x90
	.type	ReadStockholm,@function
ReadStockholm:                          # @ReadStockholm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB448_2
# %bb.1:
	movq	$0, -40(%rbp)
	jmp	.LBB448_55
.LBB448_2:
	movl	$10, %edi
	xorl	%esi, %esi
	callq	MSAAlloc
	movq	%rax, -16(%rbp)
.LBB448_3:                              # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB448_5
# %bb.4:
	movq	-16(%rbp), %rdi
	callq	MSAFree
	movq	$0, -40(%rbp)
	jmp	.LBB448_55
.LBB448_5:                              #   in Loop: Header=BB448_3 Depth=1
	jmp	.LBB448_6
.LBB448_6:                              #   in Loop: Header=BB448_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	IsBlankline
	cmpl	$0, %eax
	jne	.LBB448_3
# %bb.7:
	movabsq	$.L.str.1016, %rsi
	movq	-8(%rbp), %rdi
	movl	$14, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB448_9
# %bb.8:
	movabsq	$.L.str.1.1017, %rdi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rsi
	movb	$0, %al
	callq	Die
.LBB448_9:
	jmp	.LBB448_10
.LBB448_10:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB448_12 Depth 2
	movq	-32(%rbp), %rdi
	callq	MSAFileGetLine
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	je	.LBB448_44
# %bb.11:                               #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_12
.LBB448_12:                             #   Parent Loop BB448_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$32, %ecx
	je	.LBB448_14
# %bb.13:                               #   in Loop: Header=BB448_12 Depth=2
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$9, %eax
	sete	%al
.LBB448_14:                             #   in Loop: Header=BB448_12 Depth=2
	testb	$1, %al
	jne	.LBB448_15
	jmp	.LBB448_16
.LBB448_15:                             #   in Loop: Header=BB448_12 Depth=2
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB448_12
.LBB448_16:                             #   in Loop: Header=BB448_10 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$35, %eax
	jne	.LBB448_30
# %bb.17:                               #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.2.1018, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB448_19
# %bb.18:                               #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	parse_gf
	movl	%eax, -20(%rbp)
	jmp	.LBB448_29
.LBB448_19:                             #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.3.1019, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB448_21
# %bb.20:                               #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	parse_gs
	movl	%eax, -20(%rbp)
	jmp	.LBB448_28
.LBB448_21:                             #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.4.1020, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB448_23
# %bb.22:                               #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	parse_gc
	movl	%eax, -20(%rbp)
	jmp	.LBB448_27
.LBB448_23:                             #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.5.1021, %rsi
	movq	-8(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB448_25
# %bb.24:                               #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	parse_gr
	movl	%eax, -20(%rbp)
	jmp	.LBB448_26
.LBB448_25:                             #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	parse_comment
	movl	%eax, -20(%rbp)
.LBB448_26:                             #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_27
.LBB448_27:                             #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_28
.LBB448_28:                             #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_29
.LBB448_29:                             #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_38
.LBB448_30:                             #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.6.1022, %rsi
	movq	-8(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB448_32
# %bb.31:
	jmp	.LBB448_45
.LBB448_32:                             #   in Loop: Header=BB448_10 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$10, %eax
	jne	.LBB448_35
# %bb.33:                               #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_34
.LBB448_34:                             # %.backedge
                                        #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_10
.LBB448_35:                             #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	parse_sequence
	movl	%eax, -20(%rbp)
# %bb.36:                               #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_37
.LBB448_37:                             #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_38
.LBB448_38:                             #   in Loop: Header=BB448_10 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB448_43
# %bb.39:                               #   in Loop: Header=BB448_10 Depth=1
	movq	-32(%rbp), %rax
	movl	16(%rax), %esi
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB448_41
# %bb.40:                               #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.8.1023, %rcx
	jmp	.LBB448_42
.LBB448_41:                             #   in Loop: Header=BB448_10 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rcx
.LBB448_42:                             #   in Loop: Header=BB448_10 Depth=1
	movabsq	$.L.str.7.1024, %rdi
	movb	$0, %al
	callq	Die
.LBB448_43:                             #   in Loop: Header=BB448_10 Depth=1
	jmp	.LBB448_34
.LBB448_44:                             # %.loopexit
	jmp	.LBB448_45
.LBB448_45:
	cmpq	$0, -8(%rbp)
	jne	.LBB448_51
# %bb.46:
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	.LBB448_51
# %bb.47:
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB448_49
# %bb.48:
	movabsq	$.L.str.8.1023, %rsi
	jmp	.LBB448_50
.LBB448_49:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rsi
.LBB448_50:
	movabsq	$.L.str.9.1025, %rdi
	movb	$0, %al
	callq	Die
.LBB448_51:
	cmpq	$0, -8(%rbp)
	jne	.LBB448_54
# %bb.52:
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	jne	.LBB448_54
# %bb.53:
	movq	-16(%rbp), %rdi
	callq	MSAFree
	movq	$0, -40(%rbp)
	jmp	.LBB448_55
.LBB448_54:
	movq	-16(%rbp), %rdi
	callq	MSAVerifyParse
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB448_55:
	movq	-40(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end448:
	.size	ReadStockholm, .Lfunc_end448-ReadStockholm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_gf
	.type	parse_gf,@function
parse_gf:                               # @parse_gf
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-32(%rbp), %rax
	movabsq	$.L.str.38.1026, %rcx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB449_2
# %bb.1:
	movl	$0, -20(%rbp)
	jmp	.LBB449_47
.LBB449_2:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB449_4
# %bb.3:
	movl	$0, -20(%rbp)
	jmp	.LBB449_47
.LBB449_4:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.13.1027, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB449_6
# %bb.5:
	movl	$0, -20(%rbp)
	jmp	.LBB449_47
.LBB449_6:
	jmp	.LBB449_7
.LBB449_7:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB449_11
# %bb.8:                                #   in Loop: Header=BB449_7 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$32, %ecx
	je	.LBB449_10
# %bb.9:                                #   in Loop: Header=BB449_7 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$9, %eax
	sete	%al
.LBB449_10:                             #   in Loop: Header=BB449_7 Depth=1
.LBB449_11:                             #   in Loop: Header=BB449_7 Depth=1
	testb	$1, %al
	jne	.LBB449_12
	jmp	.LBB449_13
.LBB449_12:                             #   in Loop: Header=BB449_7 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB449_7
.LBB449_13:
	movq	-40(%rbp), %rdi
	movl	$.L.str.39.1037, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_15
# %bb.14:
	movq	-8(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	jmp	.LBB449_46
.LBB449_15:
	movq	-40(%rbp), %rdi
	movl	$.L.str.40.1035, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_17
# %bb.16:
	movq	-8(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	jmp	.LBB449_45
.LBB449_17:
	movq	-40(%rbp), %rdi
	movl	$.L.str.41.1036, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_19
# %bb.18:
	movq	-8(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	jmp	.LBB449_44
.LBB449_19:
	movq	-40(%rbp), %rdi
	movl	$.L.str.42.1038, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_21
# %bb.20:
	movq	-8(%rbp), %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	jmp	.LBB449_43
.LBB449_21:
	movq	-40(%rbp), %rdi
	movl	$.L.str.43.1039, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_27
# %bb.22:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB449_24
# %bb.23:
	movl	$0, -20(%rbp)
	jmp	.LBB449_47
.LBB449_24:
	movq	-8(%rbp), %rdi
	callq	atof
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 136(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 160(%rax)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	je	.LBB449_26
# %bb.25:
	movq	-8(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 140(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 164(%rax)
.LBB449_26:
	jmp	.LBB449_42
.LBB449_27:
	movq	-40(%rbp), %rdi
	movl	$.L.str.44.1040, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_33
# %bb.28:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB449_30
# %bb.29:
	movl	$0, -20(%rbp)
	jmp	.LBB449_47
.LBB449_30:
	movq	-8(%rbp), %rdi
	callq	atof
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 144(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 168(%rax)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	je	.LBB449_32
# %bb.31:
	movq	-8(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 148(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 172(%rax)
.LBB449_32:
	jmp	.LBB449_41
.LBB449_33:
	movq	-40(%rbp), %rdi
	movl	$.L.str.45.1041, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB449_39
# %bb.34:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	jne	.LBB449_36
# %bb.35:
	movl	$0, -20(%rbp)
	jmp	.LBB449_47
.LBB449_36:
	movq	-8(%rbp), %rdi
	callq	atof
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 128(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 152(%rax)
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -8(%rbp)
	cmpq	$0, %rax
	je	.LBB449_38
# %bb.37:
	movq	-8(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	%xmm0, 132(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 156(%rax)
.LBB449_38:
	jmp	.LBB449_40
.LBB449_39:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-8(%rbp), %rdx
	callq	MSAAddGF
.LBB449_40:
	jmp	.LBB449_41
.LBB449_41:
	jmp	.LBB449_42
.LBB449_42:
	jmp	.LBB449_43
.LBB449_43:
	jmp	.LBB449_44
.LBB449_44:
	jmp	.LBB449_45
.LBB449_45:
	jmp	.LBB449_46
.LBB449_46:
	movl	$1, -20(%rbp)
.LBB449_47:
	movl	-20(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end449:
	.size	parse_gf, .Lfunc_end449-parse_gf
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_gs
	.type	parse_gs,@function
parse_gs:                               # @parse_gs
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-32(%rbp), %rax
	movabsq	$.L.str.38.1026, %rcx
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -64(%rbp)
	cmpq	$0, %rax
	jne	.LBB450_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB450_25
.LBB450_2:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB450_4
# %bb.3:
	movl	$0, -8(%rbp)
	jmp	.LBB450_25
.LBB450_4:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB450_6
# %bb.5:
	movl	$0, -8(%rbp)
	jmp	.LBB450_25
.LBB450_6:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.13.1027, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB450_8
# %bb.7:
	movl	$0, -8(%rbp)
	jmp	.LBB450_25
.LBB450_8:
	jmp	.LBB450_9
.LBB450_9:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB450_13
# %bb.10:                               #   in Loop: Header=BB450_9 Depth=1
	movb	$1, %al
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$32, %ecx
	je	.LBB450_12
# %bb.11:                               #   in Loop: Header=BB450_9 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$9, %eax
	sete	%al
.LBB450_12:                             #   in Loop: Header=BB450_9 Depth=1
.LBB450_13:                             #   in Loop: Header=BB450_9 Depth=1
	testb	$1, %al
	jne	.LBB450_14
	jmp	.LBB450_15
.LBB450_14:                             #   in Loop: Header=BB450_9 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB450_9
.LBB450_15:
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	352(%rax), %edx
	addl	$1, %edx
	callq	MSAGetSeqidx
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 352(%rcx)
	movq	-40(%rbp), %rdi
	movl	$.L.str.46.1034, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB450_17
# %bb.16:
	movq	-16(%rbp), %rdi
	callq	atof
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	32(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 32(%rax)
	jmp	.LBB450_24
.LBB450_17:
	movq	-40(%rbp), %rdi
	movl	$.L.str.40.1035, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB450_19
# %bb.18:
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rdx
	callq	MSASetSeqAccession
	jmp	.LBB450_23
.LBB450_19:
	movq	-40(%rbp), %rdi
	movl	$.L.str.41.1036, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB450_21
# %bb.20:
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rdx
	callq	MSASetSeqDescription
	jmp	.LBB450_22
.LBB450_21:
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-16(%rbp), %rcx
	callq	MSAAddGS
.LBB450_22:
	jmp	.LBB450_23
.LBB450_23:
	jmp	.LBB450_24
.LBB450_24:
	movl	$1, -8(%rbp)
.LBB450_25:
	movl	-8(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end450:
	.size	parse_gs, .Lfunc_end450-parse_gs
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_gc
	.type	parse_gc,@function
parse_gc:                               # @parse_gc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-40(%rbp), %rax
	movabsq	$.L.str.38.1026, %rcx
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB451_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB451_16
.LBB451_2:
	leaq	-40(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB451_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB451_16
.LBB451_4:
	leaq	-40(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	leaq	-8(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB451_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB451_16
.LBB451_6:
	movq	-24(%rbp), %rdi
	movl	$.L.str.34.1031, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB451_8
# %bb.7:
	movq	-32(%rbp), %rdi
	addq	$72, %rdi
	movq	-16(%rbp), %rdx
	movl	-8(%rbp), %ecx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strcat
	jmp	.LBB451_15
.LBB451_8:
	movq	-24(%rbp), %rdi
	movl	$.L.str.35.1032, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB451_10
# %bb.9:
	movq	-32(%rbp), %rdi
	addq	$80, %rdi
	movq	-16(%rbp), %rdx
	movl	-8(%rbp), %ecx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strcat
	jmp	.LBB451_14
.LBB451_10:
	movq	-24(%rbp), %rdi
	movl	$.L.str.36.1033, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB451_12
# %bb.11:
	movq	-32(%rbp), %rdi
	addq	$88, %rdi
	movq	-16(%rbp), %rdx
	movl	-8(%rbp), %ecx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strcat
	jmp	.LBB451_13
.LBB451_12:
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	MSAAppendGC
.LBB451_13:
	jmp	.LBB451_14
.LBB451_14:
	jmp	.LBB451_15
.LBB451_15:
	movl	$1, -4(%rbp)
.LBB451_16:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end451:
	.size	parse_gc, .Lfunc_end451-parse_gc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_gr
	.type	parse_gr,@function
parse_gr:                               # @parse_gr
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-32(%rbp), %rax
	movabsq	$.L.str.38.1026, %rcx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -72(%rbp)
	cmpq	$0, %rax
	jne	.LBB452_2
# %bb.1:
	movl	$0, -20(%rbp)
	jmp	.LBB452_27
.LBB452_2:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -56(%rbp)
	cmpq	$0, %rax
	jne	.LBB452_4
# %bb.3:
	movl	$0, -20(%rbp)
	jmp	.LBB452_27
.LBB452_4:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB452_6
# %bb.5:
	movl	$0, -20(%rbp)
	jmp	.LBB452_27
.LBB452_6:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	leaq	-24(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB452_8
# %bb.7:
	movl	$0, -20(%rbp)
	jmp	.LBB452_27
.LBB452_8:
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	352(%rax), %edx
	callq	MSAGetSeqidx
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 352(%rcx)
	movq	-48(%rbp), %rdi
	movl	$.L.str.47.1028, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB452_16
# %bb.9:
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	jne	.LBB452_15
# %bb.10:
	movabsq	$.L.str.10.1029, %rdi
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$561, %esi              # imm = 0x231
	callq	sre_malloc
	movabsq	$.L.str.10.1029, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$2, %rdx
	movl	$562, %esi              # imm = 0x232
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
	movl	$0, -12(%rbp)
.LBB452_11:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB452_14
# %bb.12:                               #   in Loop: Header=BB452_11 Depth=1
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.13:                               #   in Loop: Header=BB452_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB452_11
.LBB452_14:
	jmp	.LBB452_15
.LBB452_15:
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-40(%rbp), %rdx
	movl	-24(%rbp), %ecx
	callq	sre_strcat
	movq	-8(%rbp), %rcx
	movq	336(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB452_26
.LBB452_16:
	movq	-48(%rbp), %rdi
	movl	$.L.str.48.1030, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB452_24
# %bb.17:
	movq	-8(%rbp), %rax
	cmpq	$0, 120(%rax)
	jne	.LBB452_23
# %bb.18:
	movabsq	$.L.str.10.1029, %rdi
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$3, %rdx
	movl	$575, %esi              # imm = 0x23F
	callq	sre_malloc
	movabsq	$.L.str.10.1029, %rdi
	movq	-8(%rbp), %rcx
	movq	%rax, 120(%rcx)
	movq	-8(%rbp), %rax
	movslq	320(%rax), %rdx
	shlq	$2, %rdx
	movl	$576, %esi              # imm = 0x240
	callq	sre_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 344(%rcx)
	movl	$0, -12(%rbp)
.LBB452_19:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	320(%rcx), %eax
	jge	.LBB452_22
# %bb.20:                               #   in Loop: Header=BB452_19 Depth=1
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.21:                               #   in Loop: Header=BB452_19 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB452_19
.LBB452_22:
	jmp	.LBB452_23
.LBB452_23:
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-40(%rbp), %rdx
	movl	-24(%rbp), %ecx
	callq	sre_strcat
	movq	-8(%rbp), %rcx
	movq	344(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB452_25
.LBB452_24:
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-16(%rbp), %edx
	movq	-40(%rbp), %rcx
	callq	MSAAppendGR
.LBB452_25:
	jmp	.LBB452_26
.LBB452_26:
	movl	$1, -20(%rbp)
.LBB452_27:
	movl	-20(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end452:
	.size	parse_gr, .Lfunc_end452-parse_gr
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_comment
	.type	parse_comment,@function
parse_comment:                          # @parse_comment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$10, %eax
	jne	.LBB453_2
# %bb.1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB453_5
.LBB453_2:
	leaq	-16(%rbp), %rdi
	movabsq	$.L.str.13.1027, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB453_4
# %bb.3:
	movl	$0, -4(%rbp)
	jmp	.LBB453_6
.LBB453_4:
	jmp	.LBB453_5
.LBB453_5:
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	MSAAddComment
	movl	$1, -4(%rbp)
.LBB453_6:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end453:
	.size	parse_comment, .Lfunc_end453-parse_comment
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function parse_sequence
	.type	parse_sequence,@function
parse_sequence:                         # @parse_sequence
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-32(%rbp), %rax
	movabsq	$.L.str.38.1026, %rcx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -48(%rbp)
	cmpq	$0, %rax
	jne	.LBB454_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB454_5
.LBB454_2:
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.38.1026, %rsi
	leaq	-20(%rbp), %rdx
	callq	sre_strtok
	movq	%rax, -40(%rbp)
	cmpq	$0, %rax
	jne	.LBB454_4
# %bb.3:
	movl	$0, -8(%rbp)
	jmp	.LBB454_5
.LBB454_4:
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-16(%rbp), %rax
	movl	352(%rax), %edx
	addl	$1, %edx
	callq	MSAGetSeqidx
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 352(%rcx)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movq	-16(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-40(%rbp), %rdx
	movl	-20(%rbp), %ecx
	callq	sre_strcat
	movq	-16(%rbp), %rcx
	movq	328(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	$1, -8(%rbp)
.LBB454_5:
	movl	-8(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end454:
	.size	parse_sequence, .Lfunc_end454-parse_sequence
	.cfi_endproc
                                        # -- End function
	.globl	WriteStockholm          # -- Begin function WriteStockholm
	.p2align	4, 0x90
	.type	WriteStockholm,@function
WriteStockholm:                         # @WriteStockholm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movl	$50, %edx
	callq	actually_write_stockholm
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end455:
	.size	WriteStockholm, .Lfunc_end455-WriteStockholm
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function actually_write_stockholm
	.type	actually_write_stockholm,@function
actually_write_stockholm:               # @actually_write_stockholm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB456_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB456_6
# %bb.2:                                #   in Loop: Header=BB456_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -60(%rbp)
	cmpl	-20(%rbp), %eax
	jle	.LBB456_4
# %bb.3:                                #   in Loop: Header=BB456_1 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB456_4:                              #   in Loop: Header=BB456_1 Depth=1
	jmp	.LBB456_5
.LBB456_5:                              #   in Loop: Header=BB456_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_1
.LBB456_6:
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB456_8
# %bb.7:
	movl	$4, -56(%rbp)
	movl	$2, -24(%rbp)
.LBB456_8:
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB456_10
# %bb.9:
	movl	$4, -56(%rbp)
	movl	$2, -24(%rbp)
.LBB456_10:
	movl	$0, -4(%rbp)
.LBB456_11:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	304(%rcx), %eax
	jge	.LBB456_16
# %bb.12:                               #   in Loop: Header=BB456_11 Depth=1
	movq	-16(%rbp), %rax
	movq	280(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -60(%rbp)
	cmpl	-24(%rbp), %eax
	jle	.LBB456_14
# %bb.13:                               #   in Loop: Header=BB456_11 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB456_14:                             #   in Loop: Header=BB456_11 Depth=1
	jmp	.LBB456_15
.LBB456_15:                             #   in Loop: Header=BB456_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_11
.LBB456_16:
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB456_20
# %bb.17:
	movl	$4, -56(%rbp)
	cmpl	$2, -24(%rbp)
	jge	.LBB456_19
# %bb.18:
	movl	$2, -24(%rbp)
.LBB456_19:
	jmp	.LBB456_20
.LBB456_20:
	movq	-16(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB456_24
# %bb.21:
	movl	$4, -56(%rbp)
	cmpl	$7, -24(%rbp)
	jge	.LBB456_23
# %bb.22:
	movl	$7, -24(%rbp)
.LBB456_23:
	jmp	.LBB456_24
.LBB456_24:
	movq	-16(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB456_28
# %bb.25:
	movl	$4, -56(%rbp)
	cmpl	$7, -24(%rbp)
	jge	.LBB456_27
# %bb.26:
	movl	$7, -24(%rbp)
.LBB456_27:
	jmp	.LBB456_28
.LBB456_28:
	movl	$0, -4(%rbp)
.LBB456_29:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	272(%rcx), %eax
	jge	.LBB456_34
# %bb.30:                               #   in Loop: Header=BB456_29 Depth=1
	movq	-16(%rbp), %rax
	movq	248(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	movl	%eax, -60(%rbp)
	cmpl	-24(%rbp), %eax
	jle	.LBB456_32
# %bb.31:                               #   in Loop: Header=BB456_29 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB456_32:                             #   in Loop: Header=BB456_29 Depth=1
	jmp	.LBB456_33
.LBB456_33:                             #   in Loop: Header=BB456_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_29
.LBB456_34:
	movabsq	$.L.str.10.1029, %rdi
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$61, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$251, %esi
	callq	sre_malloc
	movabsq	$.L.str.11.1044, %rsi
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movl	$0, -4(%rbp)
.LBB456_35:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	184(%rcx), %eax
	jge	.LBB456_38
# %bb.36:                               #   in Loop: Header=BB456_35 Depth=1
	movabsq	$.L.str.12.1045, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	176(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movb	$0, %al
	callq	fprintf
# %bb.37:                               #   in Loop: Header=BB456_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_35
.LBB456_38:
	movq	-16(%rbp), %rax
	cmpl	$0, 184(%rax)
	jle	.LBB456_40
# %bb.39:
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB456_40:
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB456_42
# %bb.41:
	movabsq	$.L.str.14.1046, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB456_42:
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB456_44
# %bb.43:
	movabsq	$.L.str.15.1047, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB456_44:
	movq	-16(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB456_46
# %bb.45:
	movabsq	$.L.str.16.1048, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB456_46:
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB456_48
# %bb.47:
	movabsq	$.L.str.17.1049, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdx
	movb	$0, %al
	callq	fprintf
.LBB456_48:
	movq	-16(%rbp), %rax
	cmpl	$0, 160(%rax)
	je	.LBB456_51
# %bb.49:
	movq	-16(%rbp), %rax
	cmpl	$0, 164(%rax)
	je	.LBB456_51
# %bb.50:
	movabsq	$.L.str.18.1050, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	136(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	140(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
	jmp	.LBB456_54
.LBB456_51:
	movq	-16(%rbp), %rax
	cmpl	$0, 160(%rax)
	je	.LBB456_53
# %bb.52:
	movabsq	$.L.str.19.1051, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	136(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB456_53:
	jmp	.LBB456_54
.LBB456_54:
	movq	-16(%rbp), %rax
	cmpl	$0, 168(%rax)
	je	.LBB456_57
# %bb.55:
	movq	-16(%rbp), %rax
	cmpl	$0, 172(%rax)
	je	.LBB456_57
# %bb.56:
	movabsq	$.L.str.20.1052, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	144(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	148(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
	jmp	.LBB456_60
.LBB456_57:
	movq	-16(%rbp), %rax
	cmpl	$0, 168(%rax)
	je	.LBB456_59
# %bb.58:
	movabsq	$.L.str.21.1053, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	144(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB456_59:
	jmp	.LBB456_60
.LBB456_60:
	movq	-16(%rbp), %rax
	cmpl	$0, 152(%rax)
	je	.LBB456_63
# %bb.61:
	movq	-16(%rbp), %rax
	cmpl	$0, 156(%rax)
	je	.LBB456_63
# %bb.62:
	movabsq	$.L.str.22.1054, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	128(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movss	132(%rax), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movb	$2, %al
	callq	fprintf
	jmp	.LBB456_66
.LBB456_63:
	movq	-16(%rbp), %rax
	cmpl	$0, 152(%rax)
	je	.LBB456_65
# %bb.64:
	movabsq	$.L.str.23.1055, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movss	128(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
.LBB456_65:
	jmp	.LBB456_66
.LBB456_66:
	movl	$0, -4(%rbp)
.LBB456_67:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	208(%rcx), %eax
	jge	.LBB456_70
# %bb.68:                               #   in Loop: Header=BB456_67 Depth=1
	movabsq	$.L.str.24.1056, %rsi
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movb	$0, %al
	callq	fprintf
# %bb.69:                               #   in Loop: Header=BB456_67 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_67
.LBB456_70:
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB456_76
# %bb.71:
	movl	$0, -4(%rbp)
.LBB456_72:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB456_75
# %bb.73:                               #   in Loop: Header=BB456_72 Depth=1
	movabsq	$.L.str.25.1057, %rsi
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-16(%rbp), %rax
	movq	16(%rax), %r9
	movslq	-4(%rbp), %rax
	movss	(%r9,%rax,4), %xmm0     # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
# %bb.74:                               #   in Loop: Header=BB456_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_72
.LBB456_75:
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB456_76:
	movq	-16(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB456_84
# %bb.77:
	movl	$0, -4(%rbp)
.LBB456_78:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB456_83
# %bb.79:                               #   in Loop: Header=BB456_78 Depth=1
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB456_81
# %bb.80:                               #   in Loop: Header=BB456_78 Depth=1
	movabsq	$.L.str.26.1058, %rsi
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-16(%rbp), %rax
	movq	96(%rax), %r9
	movslq	-4(%rbp), %rax
	movq	(%r9,%rax,8), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_81:                             #   in Loop: Header=BB456_78 Depth=1
	jmp	.LBB456_82
.LBB456_82:                             #   in Loop: Header=BB456_78 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_78
.LBB456_83:
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB456_84:
	movq	-16(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB456_92
# %bb.85:
	movl	$0, -4(%rbp)
.LBB456_86:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB456_91
# %bb.87:                               #   in Loop: Header=BB456_86 Depth=1
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB456_89
# %bb.88:                               #   in Loop: Header=BB456_86 Depth=1
	movabsq	$.L.str.27.1059, %rsi
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-16(%rbp), %rax
	movq	104(%rax), %r9
	movslq	-4(%rbp), %rax
	movq	(%r9,%rax,8), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_89:                             #   in Loop: Header=BB456_86 Depth=1
	jmp	.LBB456_90
.LBB456_90:                             #   in Loop: Header=BB456_86 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_86
.LBB456_91:
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB456_92:
	movl	$0, -4(%rbp)
.LBB456_93:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB456_95 Depth 2
                                        #       Child Loop BB456_98 Depth 3
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	240(%rcx), %eax
	jge	.LBB456_105
# %bb.94:                               #   in Loop: Header=BB456_93 Depth=1
	movl	$0, -28(%rbp)
.LBB456_95:                             #   Parent Loop BB456_93 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB456_98 Depth 3
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB456_103
# %bb.96:                               #   in Loop: Header=BB456_95 Depth=2
	movq	-16(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB456_101
# %bb.97:                               #   in Loop: Header=BB456_95 Depth=2
	movq	-16(%rbp), %rax
	movq	224(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
.LBB456_98:                             #   Parent Loop BB456_93 Depth=1
                                        #     Parent Loop BB456_95 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leaq	-80(%rbp), %rdi
	movabsq	$.L.str.13.1027, %rsi
	xorl	%edx, %edx
	callq	sre_strtok
	movq	%rax, -72(%rbp)
	cmpq	$0, %rax
	je	.LBB456_100
# %bb.99:                               #   in Loop: Header=BB456_98 Depth=3
	movabsq	$.L.str.28.1060, %rsi
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-28(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-16(%rbp), %rax
	movq	216(%rax), %r9
	movslq	-4(%rbp), %rax
	movq	(%r9,%rax,8), %r9
	movq	-72(%rbp), %rax
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
	jmp	.LBB456_98
.LBB456_100:                            #   in Loop: Header=BB456_95 Depth=2
	jmp	.LBB456_101
.LBB456_101:                            #   in Loop: Header=BB456_95 Depth=2
	jmp	.LBB456_102
.LBB456_102:                            #   in Loop: Header=BB456_95 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB456_95
.LBB456_103:                            #   in Loop: Header=BB456_93 Depth=1
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
# %bb.104:                              #   in Loop: Header=BB456_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_93
.LBB456_105:
	movl	$0, -52(%rbp)
.LBB456_106:                            # =>This Loop Header: Depth=1
                                        #     Child Loop BB456_110 Depth 2
                                        #       Child Loop BB456_118 Depth 3
                                        #     Child Loop BB456_132 Depth 2
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB456_137
# %bb.107:                              #   in Loop: Header=BB456_106 Depth=1
	cmpl	$0, -52(%rbp)
	jle	.LBB456_109
# %bb.108:                              #   in Loop: Header=BB456_106 Depth=1
	movabsq	$.L.str.13.1027, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB456_109:                            #   in Loop: Header=BB456_106 Depth=1
	movl	$0, -4(%rbp)
.LBB456_110:                            #   Parent Loop BB456_106 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB456_118 Depth 3
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB456_125
# %bb.111:                              #   in Loop: Header=BB456_110 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.29.1061, %rsi
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
	movq	-16(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB456_114
# %bb.112:                              #   in Loop: Header=BB456_110 Depth=2
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB456_114
# %bb.113:                              #   in Loop: Header=BB456_110 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.30.1062, %rsi
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_114:                            #   in Loop: Header=BB456_110 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 120(%rax)
	je	.LBB456_117
# %bb.115:                              #   in Loop: Header=BB456_110 Depth=2
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB456_117
# %bb.116:                              #   in Loop: Header=BB456_110 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	120(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.31.1063, %rsi
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_117:                            #   in Loop: Header=BB456_110 Depth=2
	movl	$0, -28(%rbp)
.LBB456_118:                            #   Parent Loop BB456_106 Depth=1
                                        #     Parent Loop BB456_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	304(%rcx), %eax
	jge	.LBB456_123
# %bb.119:                              #   in Loop: Header=BB456_118 Depth=3
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB456_121
# %bb.120:                              #   in Loop: Header=BB456_118 Depth=3
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.32.1064, %rsi
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %r8
	movslq	-4(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-16(%rbp), %rax
	movq	280(%rax), %r9
	movslq	-28(%rbp), %rax
	movq	(%r9,%rax,8), %r9
	movq	-48(%rbp), %rax
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	fprintf
.LBB456_121:                            #   in Loop: Header=BB456_118 Depth=3
	jmp	.LBB456_122
.LBB456_122:                            #   in Loop: Header=BB456_118 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB456_118
.LBB456_123:                            #   in Loop: Header=BB456_110 Depth=2
	jmp	.LBB456_124
.LBB456_124:                            #   in Loop: Header=BB456_110 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB456_110
.LBB456_125:                            #   in Loop: Header=BB456_106 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB456_127
# %bb.126:                              #   in Loop: Header=BB456_106 Depth=1
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	72(%rax), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.33.1065, %rsi
	movabsq	$.L.str.34.1031, %r8
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_127:                            #   in Loop: Header=BB456_106 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB456_129
# %bb.128:                              #   in Loop: Header=BB456_106 Depth=1
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	80(%rax), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.33.1065, %rsi
	movabsq	$.L.str.35.1032, %r8
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_129:                            #   in Loop: Header=BB456_106 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 88(%rax)
	je	.LBB456_131
# %bb.130:                              #   in Loop: Header=BB456_106 Depth=1
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.33.1065, %rsi
	movabsq	$.L.str.36.1033, %r8
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
.LBB456_131:                            #   in Loop: Header=BB456_106 Depth=1
	movl	$0, -28(%rbp)
.LBB456_132:                            #   Parent Loop BB456_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	272(%rcx), %eax
	jge	.LBB456_135
# %bb.133:                              #   in Loop: Header=BB456_132 Depth=2
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	256(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movslq	-52(%rbp), %rax
	addq	%rax, %rsi
	movslq	-32(%rbp), %rdx
	callq	strncpy
	movabsq	$.L.str.33.1065, %rsi
	movq	-48(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	248(%rax), %r8
	movslq	-28(%rbp), %rax
	movq	(%r8,%rax,8), %r8
	movq	-48(%rbp), %r9
	movb	$0, %al
	callq	fprintf
# %bb.134:                              #   in Loop: Header=BB456_132 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB456_132
.LBB456_135:                            #   in Loop: Header=BB456_106 Depth=1
	jmp	.LBB456_136
.LBB456_136:                            #   in Loop: Header=BB456_106 Depth=1
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB456_106
.LBB456_137:
	movabsq	$.L.str.37.1066, %rsi
	movq	-40(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movq	-48(%rbp), %rdi
	callq	free
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end456:
	.size	actually_write_stockholm, .Lfunc_end456-actually_write_stockholm
	.cfi_endproc
                                        # -- End function
	.globl	WriteStockholmOneBlock  # -- Begin function WriteStockholmOneBlock
	.p2align	4, 0x90
	.type	WriteStockholmOneBlock,@function
WriteStockholmOneBlock:                 # @WriteStockholmOneBlock
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	callq	actually_write_stockholm
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end457:
	.size	WriteStockholmOneBlock, .Lfunc_end457-WriteStockholmOneBlock
	.cfi_endproc
                                        # -- End function
	.globl	AllocTophits            # -- Begin function AllocTophits
	.p2align	4, 0x90
	.type	AllocTophits,@function
AllocTophits:                           # @AllocTophits
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.1071, %rax
	movl	%edi, -4(%rbp)
	movq	%rax, %rdi
	movl	$82, %esi
	movl	$32, %edx
	callq	sre_malloc
	movabsq	$.L.str.1071, %rdi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	$0, (%rax)
	movslq	-4(%rbp), %rax
	imulq	$104, %rax, %rdx
	movl	$84, %esi
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 20(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end458:
	.size	AllocTophits, .Lfunc_end458-AllocTophits
	.cfi_endproc
                                        # -- End function
	.globl	GrowTophits             # -- Begin function GrowTophits
	.p2align	4, 0x90
	.type	GrowTophits,@function
GrowTophits:                            # @GrowTophits
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.1071, %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	-8(%rbp), %rcx
	movl	16(%rcx), %ecx
	movq	-8(%rbp), %rsi
	addl	24(%rsi), %ecx
	movslq	%ecx, %rcx
	imulq	$104, %rcx, %rcx
	movq	%rax, %rdi
	movl	$93, %esi
	callq	sre_realloc
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end459:
	.size	GrowTophits, .Lfunc_end459-GrowTophits
	.cfi_endproc
                                        # -- End function
	.globl	FreeTophits             # -- Begin function FreeTophits
	.p2align	4, 0x90
	.type	FreeTophits,@function
FreeTophits:                            # @FreeTophits
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB460_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB460_12
# %bb.2:                                #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 96(%rax)
	je	.LBB460_4
# %bb.3:                                #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rdi
	callq	FreeFancyAli
.LBB460_4:                              #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 40(%rax)
	je	.LBB460_6
# %bb.5:                                #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	40(%rax), %rdi
	callq	free
.LBB460_6:                              #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 48(%rax)
	je	.LBB460_8
# %bb.7:                                #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	48(%rax), %rdi
	callq	free
.LBB460_8:                              #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 56(%rax)
	je	.LBB460_10
# %bb.9:                                #   in Loop: Header=BB460_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	56(%rax), %rdi
	callq	free
.LBB460_10:                             #   in Loop: Header=BB460_1 Depth=1
	jmp	.LBB460_11
.LBB460_11:                             #   in Loop: Header=BB460_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB460_1
.LBB460_12:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
	movq	-16(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB460_14
# %bb.13:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
.LBB460_14:
	movq	-16(%rbp), %rdi
	callq	free
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end460:
	.size	FreeTophits, .Lfunc_end460-FreeTophits
	.cfi_endproc
                                        # -- End function
	.globl	FreeFancyAli            # -- Begin function FreeFancyAli
	.p2align	4, 0x90
	.type	FreeFancyAli,@function
FreeFancyAli:                           # @FreeFancyAli
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB461_16
# %bb.1:
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB461_3
# %bb.2:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
.LBB461_3:
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB461_5
# %bb.4:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
.LBB461_5:
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB461_7
# %bb.6:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB461_7:
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB461_9
# %bb.8:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
.LBB461_9:
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB461_11
# %bb.10:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	free
.LBB461_11:
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB461_13
# %bb.12:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free
.LBB461_13:
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB461_15
# %bb.14:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free
.LBB461_15:
	movq	-8(%rbp), %rdi
	callq	free
.LBB461_16:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end461:
	.size	FreeFancyAli, .Lfunc_end461-FreeFancyAli
	.cfi_endproc
                                        # -- End function
	.globl	AllocFancyAli           # -- Begin function AllocFancyAli
	.p2align	4, 0x90
	.type	AllocFancyAli,@function
AllocFancyAli:                          # @AllocFancyAli
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.1071, %rdi
	movl	$117, %esi
	movl	$72, %edx
	callq	sre_malloc
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 68(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 64(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end462:
	.size	AllocFancyAli, .Lfunc_end462-AllocFancyAli
	.cfi_endproc
                                        # -- End function
	.globl	RegisterHit             # -- Begin function RegisterHit
	.p2align	4, 0x90
	.type	RegisterHit,@function
RegisterHit:                            # @RegisterHit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	64(%rbp), %rax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -72(%rbp)
	movsd	%xmm1, -64(%rbp)
	movss	%xmm2, -24(%rbp)
	movsd	%xmm3, -56(%rbp)
	movss	%xmm4, -20(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movl	%r8d, -16(%rbp)
	movl	%r9d, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB463_2
# %bb.1:
	movq	-8(%rbp), %rdi
	callq	GrowTophits
.LBB463_2:
	movq	-48(%rbp), %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rax, 40(%rcx)
	movq	-40(%rbp), %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rax, 48(%rcx)
	movq	-32(%rbp), %rdi
	callq	Strdup
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rax, 56(%rcx)
	movsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movsd	%xmm0, (%rax)
	movsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movsd	%xmm0, 16(%rax)
	movss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 8(%rax)
	movsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movsd	%xmm0, 32(%rax)
	movss	-20(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movss	%xmm0, 24(%rax)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 64(%rcx)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 68(%rcx)
	movl	16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 72(%rcx)
	movl	24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 76(%rcx)
	movl	32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 80(%rcx)
	movl	40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 84(%rcx)
	movl	48(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 88(%rcx)
	movl	56(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 92(%rcx)
	movq	64(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	20(%rdx), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end463:
	.size	RegisterHit, .Lfunc_end463-RegisterHit
	.cfi_endproc
                                        # -- End function
	.globl	GetRankedHit            # -- Begin function GetRankedHit
	.p2align	4, 0x90
	.type	GetRankedHit,@function
GetRankedHit:                           # @GetRankedHit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	104(%rbp), %rax
	movq	96(%rbp), %rax
	movq	88(%rbp), %rax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movq	24(%rbp), %rax
	movq	16(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB464_2
# %bb.1:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movsd	16(%rax), %xmm0         # xmm0 = mem[0],zero
	movq	-48(%rbp), %rax
	movsd	%xmm0, (%rax)
.LBB464_2:
	cmpq	$0, -40(%rbp)
	je	.LBB464_4
# %bb.3:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movss	%xmm0, (%rax)
.LBB464_4:
	cmpq	$0, -32(%rbp)
	je	.LBB464_6
# %bb.5:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movsd	32(%rax), %xmm0         # xmm0 = mem[0],zero
	movq	-32(%rbp), %rax
	movsd	%xmm0, (%rax)
.LBB464_6:
	cmpq	$0, -24(%rbp)
	je	.LBB464_8
# %bb.7:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	%xmm0, (%rax)
.LBB464_8:
	cmpq	$0, 16(%rbp)
	je	.LBB464_10
# %bb.9:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	16(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB464_10:
	cmpq	$0, 24(%rbp)
	je	.LBB464_12
# %bb.11:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	24(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB464_12:
	cmpq	$0, 32(%rbp)
	je	.LBB464_14
# %bb.13:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB464_14:
	cmpq	$0, 40(%rbp)
	je	.LBB464_16
# %bb.15:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	64(%rax), %eax
	movq	40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_16:
	cmpq	$0, 48(%rbp)
	je	.LBB464_18
# %bb.17:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	68(%rax), %eax
	movq	48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_18:
	cmpq	$0, 56(%rbp)
	je	.LBB464_20
# %bb.19:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	72(%rax), %eax
	movq	56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_20:
	cmpq	$0, 64(%rbp)
	je	.LBB464_22
# %bb.21:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	76(%rax), %eax
	movq	64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_22:
	cmpq	$0, 72(%rbp)
	je	.LBB464_24
# %bb.23:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	80(%rax), %eax
	movq	72(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_24:
	cmpq	$0, 80(%rbp)
	je	.LBB464_26
# %bb.25:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	84(%rax), %eax
	movq	80(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_26:
	cmpq	$0, 88(%rbp)
	je	.LBB464_28
# %bb.27:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	88(%rax), %eax
	movq	88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_28:
	cmpq	$0, 96(%rbp)
	je	.LBB464_30
# %bb.29:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	92(%rax), %eax
	movq	96(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB464_30:
	cmpq	$0, 104(%rbp)
	je	.LBB464_32
# %bb.31:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	96(%rax), %rax
	movq	104(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB464_32:
	popq	%rbp
	retq
.Lfunc_end464:
	.size	GetRankedHit, .Lfunc_end464-GetRankedHit
	.cfi_endproc
                                        # -- End function
	.globl	TophitsMaxName          # -- Begin function TophitsMaxName
	.p2align	4, 0x90
	.type	TophitsMaxName,@function
TophitsMaxName:                         # @TophitsMaxName
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB465_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB465_6
# %bb.2:                                #   in Loop: Header=BB465_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	40(%rax), %rdi
	callq	strlen
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB465_4
# %bb.3:                                #   in Loop: Header=BB465_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB465_4:                              #   in Loop: Header=BB465_1 Depth=1
	jmp	.LBB465_5
.LBB465_5:                              #   in Loop: Header=BB465_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB465_1
.LBB465_6:
	movl	-8(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end465:
	.size	TophitsMaxName, .Lfunc_end465-TophitsMaxName
	.cfi_endproc
                                        # -- End function
	.globl	hit_comparison          # -- Begin function hit_comparison
	.p2align	4, 0x90
	.type	hit_comparison,@function
hit_comparison:                         # @hit_comparison
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movsd	(%rax), %xmm0           # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movsd	(%rax), %xmm1           # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB466_2
# %bb.1:
	movl	$1, -4(%rbp)
	jmp	.LBB466_9
.LBB466_2:
	movq	-24(%rbp), %rax
	movsd	(%rax), %xmm0           # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	ucomisd	(%rax), %xmm0
	jbe	.LBB466_4
# %bb.3:
	movl	$-1, -4(%rbp)
	jmp	.LBB466_9
.LBB466_4:
	movq	-24(%rbp), %rax
	movsd	(%rax), %xmm0           # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	ucomisd	(%rax), %xmm0
	jne	.LBB466_6
	jp	.LBB466_6
# %bb.5:
	movl	$0, -4(%rbp)
	jmp	.LBB466_9
.LBB466_6:
	jmp	.LBB466_7
.LBB466_7:
	jmp	.LBB466_8
.LBB466_8:
	movl	$0, -4(%rbp)
.LBB466_9:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end466:
	.size	hit_comparison, .Lfunc_end466-hit_comparison
	.cfi_endproc
                                        # -- End function
	.globl	FullSortTophits         # -- Begin function FullSortTophits
	.p2align	4, 0x90
	.type	FullSortTophits,@function
FullSortTophits:                        # @FullSortTophits
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 20(%rax)
	jne	.LBB467_2
# %bb.1:
	jmp	.LBB467_8
.LBB467_2:
	movabsq	$.L.str.1071, %rdi
	movq	-16(%rbp), %rax
	movslq	20(%rax), %rdx
	shlq	$3, %rdx
	movl	$300, %esi              # imm = 0x12C
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$0, -4(%rbp)
.LBB467_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB467_6
# %bb.4:                                #   in Loop: Header=BB467_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.5:                                #   in Loop: Header=BB467_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB467_3
.LBB467_6:
	movq	-16(%rbp), %rax
	cmpl	$1, 20(%rax)
	jle	.LBB467_8
# %bb.7:
	movabsq	$hit_comparison, %rcx
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	20(%rax), %esi
	movl	$8, %edx
	movb	$0, %al
	callq	specqsort
.LBB467_8:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end467:
	.size	FullSortTophits, .Lfunc_end467-FullSortTophits
	.cfi_endproc
                                        # -- End function
	.globl	TophitsReport           # -- Begin function TophitsReport
	.p2align	4, 0x90
	.type	TophitsReport,@function
TophitsReport:                          # @TophitsReport
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movsd	%xmm0, -40(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	movslq	16(%rax), %rax
	imulq	$104, %rax, %rax
	addq	$32, %rax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB468_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB468_26
# %bb.2:                                #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 40(%rax)
	je	.LBB468_4
# %bb.3:                                #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	40(%rax), %rdi
	callq	strlen
	addq	$1, %rax
	movslq	-8(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -8(%rbp)
.LBB468_4:                              #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 48(%rax)
	je	.LBB468_6
# %bb.5:                                #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	48(%rax), %rdi
	callq	strlen
	addq	$1, %rax
	movslq	-8(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -8(%rbp)
.LBB468_6:                              #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 56(%rax)
	je	.LBB468_8
# %bb.7:                                #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	56(%rax), %rdi
	callq	strlen
	addq	$1, %rax
	movslq	-8(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -8(%rbp)
.LBB468_8:                              #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, 96(%rax)
	je	.LBB468_24
# %bb.9:                                #   in Loop: Header=BB468_1 Depth=1
	movslq	-8(%rbp), %rax
	addq	$72, %rax
	movl	%eax, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, (%rax)
	je	.LBB468_11
# %bb.10:                               #   in Loop: Header=BB468_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB468_11:                             #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB468_13
# %bb.12:                               #   in Loop: Header=BB468_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB468_13:                             #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, 16(%rax)
	je	.LBB468_15
# %bb.14:                               #   in Loop: Header=BB468_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB468_15:                             #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, 24(%rax)
	je	.LBB468_17
# %bb.16:                               #   in Loop: Header=BB468_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB468_17:                             #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, 32(%rax)
	je	.LBB468_19
# %bb.18:                               #   in Loop: Header=BB468_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB468_19:                             #   in Loop: Header=BB468_1 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	imulq	$104, %rdx, %rdx
	addq	%rdx, %rcx
	movq	96(%rcx), %rcx
	movl	40(%rcx), %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, 48(%rax)
	je	.LBB468_21
# %bb.20:                               #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	movq	48(%rax), %rdi
	callq	strlen
	addq	$1, %rax
	movslq	-8(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -8(%rbp)
.LBB468_21:                             #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	cmpq	$0, 56(%rax)
	je	.LBB468_23
# %bb.22:                               #   in Loop: Header=BB468_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$104, %rcx, %rcx
	addq	%rcx, %rax
	movq	96(%rax), %rax
	movq	56(%rax), %rdi
	callq	strlen
	addq	$1, %rax
	movslq	-8(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, -8(%rbp)
.LBB468_23:                             #   in Loop: Header=BB468_1 Depth=1
	jmp	.LBB468_24
.LBB468_24:                             #   in Loop: Header=BB468_1 Depth=1
	jmp	.LBB468_25
.LBB468_25:                             #   in Loop: Header=BB468_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB468_1
.LBB468_26:
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB468_27:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	20(%rcx), %eax
	jge	.LBB468_32
# %bb.28:                               #   in Loop: Header=BB468_27 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movsd	16(%rax), %xmm0         # xmm0 = mem[0],zero
	movl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	ucomisd	-40(%rbp), %xmm0
	jb	.LBB468_30
# %bb.29:
	jmp	.LBB468_33
.LBB468_30:                             #   in Loop: Header=BB468_27 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.31:                               #   in Loop: Header=BB468_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB468_27
.LBB468_32:                             # %.loopexit
	jmp	.LBB468_33
.LBB468_33:
	movabsq	$.L.str.1.1082, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.2.1083, %rdi
	movq	-24(%rbp), %rax
	movl	20(%rax), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.3.1084, %rdi
	movl	-28(%rbp), %esi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.4.1085, %rdi
	movl	$1000, %ecx             # imm = 0x3E8
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movb	$0, %al
	callq	printf
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end468:
	.size	TophitsReport, .Lfunc_end468-TophitsReport
	.cfi_endproc
                                        # -- End function
	.globl	P7AllocTrace            # -- Begin function P7AllocTrace
	.p2align	4, 0x90
	.type	P7AllocTrace,@function
P7AllocTrace:                           # @P7AllocTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$.L.str.1088, %rax
	movl	%edi, -4(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rax, %rdi
	movl	$40, %esi
	movl	$32, %edx
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	%rax, -16(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$0, %rdx
	movl	$41, %esi
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movslq	-4(%rbp), %rdx
	shlq	$2, %rdx
	movl	$42, %esi
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movslq	-4(%rbp), %rdx
	shlq	$2, %rdx
	movl	$43, %esi
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end469:
	.size	P7AllocTrace, .Lfunc_end469-P7AllocTrace
	.cfi_endproc
                                        # -- End function
	.globl	P7ReallocTrace          # -- Begin function P7ReallocTrace
	.p2align	4, 0x90
	.type	P7ReallocTrace,@function
P7ReallocTrace:                         # @P7ReallocTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.1088, %rax
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rdx
	movslq	-4(%rbp), %rcx
	shlq	$0, %rcx
	movq	%rax, %rdi
	movl	$49, %esi
	callq	sre_realloc
	movabsq	$.L.str.1088, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdx
	movslq	-4(%rbp), %rcx
	shlq	$2, %rcx
	movl	$50, %esi
	callq	sre_realloc
	movabsq	$.L.str.1088, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdx
	movslq	-4(%rbp), %rcx
	shlq	$2, %rcx
	movl	$51, %esi
	callq	sre_realloc
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end470:
	.size	P7ReallocTrace, .Lfunc_end470-P7ReallocTrace
	.cfi_endproc
                                        # -- End function
	.globl	P7FreeTrace             # -- Begin function P7FreeTrace
	.p2align	4, 0x90
	.type	P7FreeTrace,@function
P7FreeTrace:                            # @P7FreeTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB471_2
# %bb.1:
	jmp	.LBB471_3
.LBB471_2:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rdi
	callq	free
.LBB471_3:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end471:
	.size	P7FreeTrace, .Lfunc_end471-P7FreeTrace
	.cfi_endproc
                                        # -- End function
	.globl	TraceSet                # -- Begin function TraceSet
	.p2align	4, 0x90
	.type	TraceSet,@function
TraceSet:                               # @TraceSet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movb	%dl, -1(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	popq	%rbp
	retq
.Lfunc_end472:
	.size	TraceSet, .Lfunc_end472-TraceSet
	.cfi_endproc
                                        # -- End function
	.globl	MergeTraceArrays        # -- Begin function MergeTraceArrays
	.p2align	4, 0x90
	.type	MergeTraceArrays,@function
MergeTraceArrays:                       # @MergeTraceArrays
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.1088, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$110, %esi
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB473_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB473_4
# %bb.2:                                #   in Loop: Header=BB473_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                #   in Loop: Header=BB473_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB473_1
.LBB473_4:
	movl	$0, -4(%rbp)
.LBB473_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB473_8
# %bb.6:                                #   in Loop: Header=BB473_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movl	-8(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.7:                                #   in Loop: Header=BB473_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB473_5
.LBB473_8:
	movq	-40(%rbp), %rdi
	callq	free
	movq	-32(%rbp), %rdi
	callq	free
	movq	-24(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end473:
	.size	MergeTraceArrays, .Lfunc_end473-MergeTraceArrays
	.cfi_endproc
                                        # -- End function
	.globl	P7ReverseTrace          # -- Begin function P7ReverseTrace
	.p2align	4, 0x90
	.type	P7ReverseTrace,@function
P7ReverseTrace:                         # @P7ReverseTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.1088, %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	movslq	(%rcx), %rdx
	shlq	$0, %rdx
	movq	%rax, %rdi
	movl	$149, %esi
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movslq	(%rax), %rdx
	shlq	$2, %rdx
	movl	$150, %esi
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movslq	(%rax), %rdx
	shlq	$2, %rdx
	movl	$151, %esi
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB474_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB474_4
# %bb.2:                                #   in Loop: Header=BB474_1 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                #   in Loop: Header=BB474_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB474_1
.LBB474_4:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	free
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end474:
	.size	P7ReverseTrace, .Lfunc_end474-P7ReverseTrace
	.cfi_endproc
                                        # -- End function
	.globl	P7TraceCount            # -- Begin function P7TraceCount
	.p2align	4, 0x90
	.type	P7TraceCount,@function
P7TraceCount:                           # @P7TraceCount
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movss	%xmm0, -28(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB475_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB475_66
# %bb.2:                                #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB475_4
# %bb.3:                                #   in Loop: Header=BB475_1 Depth=1
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-56(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movsbl	%al, %esi
	callq	P7CountSymbol
	jmp	.LBB475_7
.LBB475_4:                              #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB475_6
# %bb.5:                                #   in Loop: Header=BB475_1 Depth=1
	movq	-40(%rbp), %rax
	movq	160(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-56(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movsbl	%al, %esi
	callq	P7CountSymbol
.LBB475_6:                              #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_7
.LBB475_7:                              #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB475_63
# %bb.8:                                #   in Loop: Header=BB475_1 Depth=1
	movq	.LJTI475_0(,%rax,8), %rax
	jmpq	*%rax
.LBB475_9:                              #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_10:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$5, %ecx
	je	.LBB475_13
	jmp	.LBB475_11
.LBB475_11:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$6, %eax
	jne	.LBB475_14
	jmp	.LBB475_12
.LBB475_12:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	172(%rax), %xmm0
	movss	%xmm0, 172(%rax)
	jmp	.LBB475_15
.LBB475_13:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	176(%rax), %xmm0
	movss	%xmm0, 176(%rax)
	jmp	.LBB475_15
.LBB475_14:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_15:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_16:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB475_18
	jmp	.LBB475_17
.LBB475_17:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$2, %eax
	je	.LBB475_19
	jmp	.LBB475_20
.LBB475_18:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movslq	(%rcx,%rdx,4), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB475_21
.LBB475_19:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	168(%rax), %xmm0
	movss	%xmm0, 168(%rax)
	jmp	.LBB475_21
.LBB475_20:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_21:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_22:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB475_28
# %bb.23:                               #   in Loop: Header=BB475_1 Depth=1
	movq	.LJTI475_1(,%rax,8), %rax
	jmpq	*%rax
.LBB475_24:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	(%rax), %xmm0
	movss	%xmm0, (%rax)
	jmp	.LBB475_29
.LBB475_25:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	4(%rax), %xmm0
	movss	%xmm0, 4(%rax)
	jmp	.LBB475_29
.LBB475_26:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	8(%rax), %xmm0
	movss	%xmm0, 8(%rax)
	jmp	.LBB475_29
.LBB475_27:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB475_29
.LBB475_28:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_29:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_30:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB475_32
	jmp	.LBB475_31
.LBB475_31:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$3, %eax
	je	.LBB475_33
	jmp	.LBB475_34
.LBB475_32:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	12(%rax), %xmm0
	movss	%xmm0, 12(%rax)
	jmp	.LBB475_35
.LBB475_33:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	16(%rax), %xmm0
	movss	%xmm0, 16(%rax)
	jmp	.LBB475_35
.LBB475_34:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_35:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_36:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB475_39
	jmp	.LBB475_37
.LBB475_37:                             #   in Loop: Header=BB475_1 Depth=1
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB475_40
	jmp	.LBB475_38
.LBB475_38:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$7, %eax
	je	.LBB475_41
	jmp	.LBB475_42
.LBB475_39:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	20(%rax), %xmm0
	movss	%xmm0, 20(%rax)
	jmp	.LBB475_43
.LBB475_40:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	addss	24(%rax), %xmm0
	movss	%xmm0, 24(%rax)
	jmp	.LBB475_43
.LBB475_41:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_43
.LBB475_42:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_43:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_44:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB475_46
	jmp	.LBB475_45
.LBB475_45:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$10, %eax
	je	.LBB475_47
	jmp	.LBB475_48
.LBB475_46:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	180(%rax), %xmm0
	movss	%xmm0, 180(%rax)
	jmp	.LBB475_49
.LBB475_47:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	184(%rax), %xmm0
	movss	%xmm0, 184(%rax)
	jmp	.LBB475_49
.LBB475_48:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_49:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_50:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	je	.LBB475_52
	jmp	.LBB475_51
.LBB475_51:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$10, %eax
	je	.LBB475_53
	jmp	.LBB475_54
.LBB475_52:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	196(%rax), %xmm0
	movss	%xmm0, 196(%rax)
	jmp	.LBB475_55
.LBB475_53:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	200(%rax), %xmm0
	movss	%xmm0, 200(%rax)
	jmp	.LBB475_55
.LBB475_54:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_55:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_56:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	1(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB475_59
	jmp	.LBB475_57
.LBB475_57:                             #   in Loop: Header=BB475_1 Depth=1
	subl	$9, %eax
	jne	.LBB475_60
	jmp	.LBB475_58
.LBB475_58:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	188(%rax), %xmm0
	movss	%xmm0, 188(%rax)
	jmp	.LBB475_61
.LBB475_59:                             #   in Loop: Header=BB475_1 Depth=1
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	addss	192(%rax), %xmm0
	movss	%xmm0, 192(%rax)
	jmp	.LBB475_61
.LBB475_60:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movq	%rax, %rbx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.1.1099, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
.LBB475_61:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_62:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_64
.LBB475_63:                             #   in Loop: Header=BB475_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.2.1100, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB475_64:                             #   in Loop: Header=BB475_1 Depth=1
	jmp	.LBB475_65
.LBB475_65:                             #   in Loop: Header=BB475_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB475_1
.LBB475_66:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end475:
	.size	P7TraceCount, .Lfunc_end475-P7TraceCount
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI475_0:
	.quad	.LBB475_22
	.quad	.LBB475_36
	.quad	.LBB475_30
	.quad	.LBB475_9
	.quad	.LBB475_10
	.quad	.LBB475_16
	.quad	.LBB475_44
	.quad	.LBB475_56
	.quad	.LBB475_62
	.quad	.LBB475_50
.LJTI475_1:
	.quad	.LBB475_24
	.quad	.LBB475_26
	.quad	.LBB475_25
	.quad	.LBB475_28
	.quad	.LBB475_28
	.quad	.LBB475_28
	.quad	.LBB475_27
                                        # -- End function
	.text
	.globl	P7TraceScore            # -- Begin function P7TraceScore
	.p2align	4, 0x90
	.type	P7TraceScore,@function
P7TraceScore:                           # @P7TraceScore
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -16(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB476_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB476_9
# %bb.2:                                #   in Loop: Header=BB476_1 Depth=1
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB476_4
# %bb.3:                                #   in Loop: Header=BB476_1 Depth=1
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB476_7
.LBB476_4:                              #   in Loop: Header=BB476_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jne	.LBB476_6
# %bb.5:                                #   in Loop: Header=BB476_1 Depth=1
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB476_6:                              #   in Loop: Header=BB476_1 Depth=1
	jmp	.LBB476_7
.LBB476_7:                              #   in Loop: Header=BB476_1 Depth=1
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %r9b
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %edx
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	(%rcx,%rsi), %cl
	movq	-16(%rbp), %rsi
	movq	16(%rsi), %rsi
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	(%rsi,%rax,4), %r8d
	movsbl	%r9b, %esi
	movsbl	%cl, %ecx
	callq	TransitionScoreLookup
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
# %bb.8:                                #   in Loop: Header=BB476_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB476_1
.LBB476_9:
	movl	-8(%rbp), %edi
	callq	Scorify
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end476:
	.size	P7TraceScore, .Lfunc_end476-P7TraceScore
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function TransitionScoreLookup
.LCPI477_0:
	.long	1065353216              # float 1
	.text
	.globl	TransitionScoreLookup
	.p2align	4, 0x90
	.type	TransitionScoreLookup,@function
TransitionScoreLookup:                  # @TransitionScoreLookup
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -24(%rbp)
	movb	%sil, -10(%rbp)
	movl	%edx, -28(%rbp)
	movb	%cl, -9(%rbp)
	movl	%r8d, -32(%rbp)
	movsbl	-10(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB477_56
# %bb.1:
	movq	.LJTI477_0(,%rax,8), %rax
	jmpq	*%rax
.LBB477_2:
	movl	$0, -16(%rbp)
	jmp	.LBB477_58
.LBB477_3:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$5, %ecx
	je	.LBB477_6
	jmp	.LBB477_4
.LBB477_4:
	subl	$6, %eax
	jne	.LBB477_7
	jmp	.LBB477_5
.LBB477_5:
	movq	-24(%rbp), %rax
	movl	336(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_6:
	movq	-24(%rbp), %rax
	movl	340(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_7:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.8:
	jmp	.LBB477_57
.LBB477_9:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB477_11
	jmp	.LBB477_10
.LBB477_10:
	subl	$2, %eax
	je	.LBB477_12
	jmp	.LBB477_13
.LBB477_11:
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_12:
	movss	.LCPI477_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movss	168(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	Prob2Score
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_13:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.14:
	jmp	.LBB477_57
.LBB477_15:
	movsbl	-9(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB477_21
# %bb.16:
	movq	.LJTI477_1(,%rax,8), %rax
	jmpq	*%rax
.LBB477_17:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_18:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_19:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_20:
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_21:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.22:
	jmp	.LBB477_57
.LBB477_23:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB477_25
	jmp	.LBB477_24
.LBB477_24:
	subl	$3, %eax
	je	.LBB477_26
	jmp	.LBB477_27
.LBB477_25:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	24(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_26:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	32(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_27:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.28:
	jmp	.LBB477_57
.LBB477_29:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB477_32
	jmp	.LBB477_30
.LBB477_30:
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB477_33
	jmp	.LBB477_31
.LBB477_31:
	subl	$7, %eax
	je	.LBB477_34
	jmp	.LBB477_35
.LBB477_32:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	40(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_33:
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_34:
	movl	$0, -16(%rbp)
	jmp	.LBB477_58
.LBB477_35:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.36:
	jmp	.LBB477_57
.LBB477_37:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB477_39
	jmp	.LBB477_38
.LBB477_38:
	subl	$10, %eax
	je	.LBB477_40
	jmp	.LBB477_41
.LBB477_39:
	movq	-24(%rbp), %rax
	movl	344(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_40:
	movq	-24(%rbp), %rax
	movl	348(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_41:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.42:
	jmp	.LBB477_57
.LBB477_43:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	je	.LBB477_45
	jmp	.LBB477_44
.LBB477_44:
	subl	$10, %eax
	je	.LBB477_46
	jmp	.LBB477_47
.LBB477_45:
	movq	-24(%rbp), %rax
	movl	360(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_46:
	movq	-24(%rbp), %rax
	movl	364(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_47:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.48:
	jmp	.LBB477_57
.LBB477_49:
	movsbl	-9(%rbp), %eax
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB477_52
	jmp	.LBB477_50
.LBB477_50:
	subl	$9, %eax
	jne	.LBB477_53
	jmp	.LBB477_51
.LBB477_51:
	movq	-24(%rbp), %rax
	movl	352(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_52:
	movq	-24(%rbp), %rax
	movl	356(%rax), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB477_58
.LBB477_53:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movq	%rax, %rbx
	movsbl	-9(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.7.1105, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	Die
# %bb.54:
	jmp	.LBB477_57
.LBB477_55:
	movl	$0, -16(%rbp)
	jmp	.LBB477_58
.LBB477_56:
	movsbl	-10(%rbp), %edi
	callq	Statetype
	movabsq	$.L.str.2.1100, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB477_57:
	movl	$0, -16(%rbp)
.LBB477_58:
	movl	-16(%rbp), %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end477:
	.size	TransitionScoreLookup, .Lfunc_end477-TransitionScoreLookup
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI477_0:
	.quad	.LBB477_15
	.quad	.LBB477_29
	.quad	.LBB477_23
	.quad	.LBB477_2
	.quad	.LBB477_3
	.quad	.LBB477_9
	.quad	.LBB477_37
	.quad	.LBB477_49
	.quad	.LBB477_55
	.quad	.LBB477_43
.LJTI477_1:
	.quad	.LBB477_17
	.quad	.LBB477_19
	.quad	.LBB477_18
	.quad	.LBB477_21
	.quad	.LBB477_21
	.quad	.LBB477_21
	.quad	.LBB477_20
                                        # -- End function
	.text
	.globl	P7Traces2Alignment      # -- Begin function P7Traces2Alignment
	.p2align	4, 0x90
	.type	P7Traces2Alignment,@function
P7Traces2Alignment:                     # @P7Traces2Alignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	16(%rbp), %eax
	movabsq	$.L.str.1088, %rax
	movq	%rdi, -96(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -40(%rbp)
	movq	%r9, -64(%rbp)
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$408, %esi              # imm = 0x198
	callq	sre_malloc
	movq	%rax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB478_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB478_4
# %bb.2:                                #   in Loop: Header=BB478_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB478_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB478_1
.LBB478_4:
	movl	$0, -4(%rbp)
.LBB478_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB478_7 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB478_33
# %bb.6:                                #   in Loop: Header=BB478_5 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB478_7:                              #   Parent Loop BB478_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB478_31
# %bb.8:                                #   in Loop: Header=BB478_7 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB478_28
# %bb.9:                                #   in Loop: Header=BB478_7 Depth=2
	movq	.LJTI478_0(,%rax,8), %rax
	jmpq	*%rax
.LBB478_10:                             #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB478_29
.LBB478_11:                             #   in Loop: Header=BB478_7 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$5, %eax
	jne	.LBB478_13
# %bb.12:                               #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB478_13:                             #   in Loop: Header=BB478_7 Depth=2
	jmp	.LBB478_29
.LBB478_14:                             #   in Loop: Header=BB478_7 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$8, %eax
	jne	.LBB478_16
# %bb.15:                               #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB478_16:                             #   in Loop: Header=BB478_7 Depth=2
	jmp	.LBB478_29
.LBB478_17:                             #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	movq	-48(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	16(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB478_19
# %bb.18:                               #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	movq	-48(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	16(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB478_19:                             #   in Loop: Header=BB478_7 Depth=2
	movl	$0, -16(%rbp)
	jmp	.LBB478_29
.LBB478_20:                             #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB478_22
# %bb.21:                               #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB478_22:                             #   in Loop: Header=BB478_7 Depth=2
	movl	$0, -16(%rbp)
	jmp	.LBB478_29
.LBB478_23:                             #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jle	.LBB478_25
# %bb.24:                               #   in Loop: Header=BB478_7 Depth=2
	movl	-16(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB478_25:                             #   in Loop: Header=BB478_7 Depth=2
	jmp	.LBB478_29
.LBB478_26:                             #   in Loop: Header=BB478_7 Depth=2
	jmp	.LBB478_29
.LBB478_27:                             #   in Loop: Header=BB478_7 Depth=2
	movabsq	$.L.str.3.1106, %rdi
	movb	$0, %al
	callq	Die
.LBB478_28:                             #   in Loop: Header=BB478_7 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	Statetype
	movabsq	$.L.str.4.1107, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	Die
.LBB478_29:                             #   in Loop: Header=BB478_7 Depth=2
	jmp	.LBB478_30
.LBB478_30:                             #   in Loop: Header=BB478_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB478_7
.LBB478_31:                             #   in Loop: Header=BB478_5 Depth=1
	jmp	.LBB478_32
.LBB478_32:                             #   in Loop: Header=BB478_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB478_5
.LBB478_33:
	cmpl	$0, 16(%rbp)
	je	.LBB478_41
# %bb.34:
	movl	$0, -8(%rbp)
.LBB478_35:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB478_40
# %bb.36:                               #   in Loop: Header=BB478_35 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jle	.LBB478_38
# %bb.37:                               #   in Loop: Header=BB478_35 Depth=1
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB478_38:                             #   in Loop: Header=BB478_35 Depth=1
	jmp	.LBB478_39
.LBB478_39:                             #   in Loop: Header=BB478_35 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB478_35
.LBB478_40:
	jmp	.LBB478_41
.LBB478_41:
	movabsq	$.L.str.1088, %rdi
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$453, %esi              # imm = 0x1C5
	callq	sre_malloc
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$1, -8(%rbp)
.LBB478_42:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB478_45
# %bb.43:                               #   in Loop: Header=BB478_42 Depth=1
	movl	-36(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.44:                               #   in Loop: Header=BB478_42 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB478_42
.LBB478_45:
	movl	-52(%rbp), %edi
	movl	-36(%rbp), %esi
	callq	MSAAlloc
	movq	%rax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB478_46:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB478_48 Depth 2
                                        #     Child Loop BB478_52 Depth 2
                                        #     Child Loop BB478_56 Depth 2
                                        #     Child Loop BB478_83 Depth 2
                                        #       Child Loop BB478_86 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB478_95
# %bb.47:                               #   in Loop: Header=BB478_46 Depth=1
	movl	$0, -12(%rbp)
.LBB478_48:                             #   Parent Loop BB478_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB478_51
# %bb.49:                               #   in Loop: Header=BB478_48 Depth=2
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$46, (%rax,%rcx)
# %bb.50:                               #   in Loop: Header=BB478_48 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB478_48
.LBB478_51:                             #   in Loop: Header=BB478_46 Depth=1
	movl	$1, -8(%rbp)
.LBB478_52:                             #   Parent Loop BB478_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB478_55
# %bb.53:                               #   in Loop: Header=BB478_52 Depth=2
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	$45, (%rax,%rcx)
# %bb.54:                               #   in Loop: Header=BB478_52 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB478_52
.LBB478_55:                             #   in Loop: Header=BB478_46 Depth=1
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB478_56:                             #   Parent Loop BB478_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB478_81
# %bb.57:                               #   in Loop: Header=BB478_56 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$1, -56(%rbp)
	jne	.LBB478_59
# %bb.58:                               #   in Loop: Header=BB478_56 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movq	-96(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movb	Alphabet(,%rax), %al
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB478_79
.LBB478_59:                             #   in Loop: Header=BB478_56 Depth=2
	cmpl	$2, -56(%rbp)
	jne	.LBB478_61
# %bb.60:                               #   in Loop: Header=BB478_56 Depth=2
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB478_78
.LBB478_61:                             #   in Loop: Header=BB478_56 Depth=2
	cmpl	$3, -56(%rbp)
	jne	.LBB478_66
# %bb.62:                               #   in Loop: Header=BB478_56 Depth=2
	cmpl	$0, 16(%rbp)
	je	.LBB478_64
# %bb.63:                               #   in Loop: Header=BB478_56 Depth=2
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$42, (%rax,%rcx)
	jmp	.LBB478_65
.LBB478_64:                             #   in Loop: Header=BB478_56 Depth=2
	movq	-96(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movsbl	Alphabet(,%rax), %edi
	callq	tolower
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB478_65:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_77
.LBB478_66:                             #   in Loop: Header=BB478_56 Depth=2
	cmpl	$5, -56(%rbp)
	je	.LBB478_68
# %bb.67:                               #   in Loop: Header=BB478_56 Depth=2
	cmpl	$8, -56(%rbp)
	jne	.LBB478_73
.LBB478_68:                             #   in Loop: Header=BB478_56 Depth=2
	cmpl	$0, -84(%rbp)
	jle	.LBB478_73
# %bb.69:                               #   in Loop: Header=BB478_56 Depth=2
	cmpl	$0, 16(%rbp)
	je	.LBB478_71
# %bb.70:                               #   in Loop: Header=BB478_56 Depth=2
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$42, (%rax,%rcx)
	jmp	.LBB478_72
.LBB478_71:                             #   in Loop: Header=BB478_56 Depth=2
	movq	-96(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movsbl	Alphabet(,%rax), %edi
	callq	tolower
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB478_72:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_76
.LBB478_73:                             #   in Loop: Header=BB478_56 Depth=2
	cmpl	$7, -56(%rbp)
	jne	.LBB478_75
# %bb.74:                               #   in Loop: Header=BB478_56 Depth=2
	movq	-72(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB478_75:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_76
.LBB478_76:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_77
.LBB478_77:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_78
.LBB478_78:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_79
.LBB478_79:                             #   in Loop: Header=BB478_56 Depth=2
	jmp	.LBB478_80
.LBB478_80:                             #   in Loop: Header=BB478_56 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB478_56
.LBB478_81:                             #   in Loop: Header=BB478_46 Depth=1
	cmpl	$0, 16(%rbp)
	jne	.LBB478_93
# %bb.82:                               #   in Loop: Header=BB478_46 Depth=1
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	rightjustify
	movl	$1, -8(%rbp)
.LBB478_83:                             #   Parent Loop BB478_46 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB478_86 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB478_92
# %bb.84:                               #   in Loop: Header=BB478_83 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jle	.LBB478_90
# %bb.85:                               #   in Loop: Header=BB478_83 Depth=2
	movl	$0, -16(%rbp)
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB478_86:                             #   Parent Loop BB478_46 Depth=1
                                        #     Parent Loop BB478_83 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB478_89
# %bb.87:                               #   in Loop: Header=BB478_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.88:                               #   in Loop: Header=BB478_86 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB478_86
.LBB478_89:                             #   in Loop: Header=BB478_83 Depth=2
	movl	$2, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	%rax, %rdi
	addq	$1, %rdi
	movslq	-16(%rbp), %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	subl	-16(%rbp), %esi
	callq	rightjustify
.LBB478_90:                             #   in Loop: Header=BB478_83 Depth=2
	jmp	.LBB478_91
.LBB478_91:                             #   in Loop: Header=BB478_83 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB478_83
.LBB478_92:                             #   in Loop: Header=BB478_46 Depth=1
	jmp	.LBB478_93
.LBB478_93:                             #   in Loop: Header=BB478_46 Depth=1
	jmp	.LBB478_94
.LBB478_94:                             #   in Loop: Header=BB478_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB478_46
.LBB478_95:
	movabsq	$.L.str.1088, %rdi
	movl	-52(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movl	$529, %esi              # imm = 0x211
	movl	$10, %edx
	callq	sre_malloc
	movabsq	$.L.str.5.1108, %rsi
	movabsq	$.L.str.6.1109, %rdx
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rdi
	movb	$0, %al
	callq	sprintf
	movl	$0, -4(%rbp)
.LBB478_96:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB478_111
# %bb.97:                               #   in Loop: Header=BB478_96 Depth=1
	movq	-80(%rbp), %rdi
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdi
	addq	$4, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	sre_strdup
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB478_99
# %bb.98:                               #   in Loop: Header=BB478_96 Depth=1
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-80(%rbp), %rdx
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdx
	addq	$132, %rdx
	callq	MSASetSeqAccession
.LBB478_99:                             #   in Loop: Header=BB478_96 Depth=1
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB478_101
# %bb.100:                              #   in Loop: Header=BB478_96 Depth=1
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-80(%rbp), %rdx
	movslq	-4(%rbp), %rax
	imulq	$360, %rax, %rax        # imm = 0x168
	addq	%rax, %rdx
	addq	$196, %rdx
	callq	MSASetSeqDescription
.LBB478_101:                            #   in Loop: Header=BB478_96 Depth=1
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$512, %eax              # imm = 0x200
	cmpl	$0, %eax
	je	.LBB478_105
# %bb.102:                              #   in Loop: Header=BB478_96 Depth=1
	movq	-32(%rbp), %rax
	cmpq	$0, 112(%rax)
	jne	.LBB478_104
# %bb.103:                              #   in Loop: Header=BB478_96 Depth=1
	movabsq	$.L.str.1088, %rdi
	movslq	-52(%rbp), %rdx
	shlq	$3, %rdx
	movl	$541, %esi              # imm = 0x21D
	callq	sre_malloc
	movq	-32(%rbp), %rcx
	movq	%rax, 112(%rcx)
.LBB478_104:                            #   in Loop: Header=BB478_96 Depth=1
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-36(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	344(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	112(%rax), %rcx
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rcx
	callq	MakeAlignedString
.LBB478_105:                            #   in Loop: Header=BB478_96 Depth=1
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movl	(%rax), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB478_109
# %bb.106:                              #   in Loop: Header=BB478_96 Depth=1
	movq	-32(%rbp), %rax
	cmpq	$0, 120(%rax)
	jne	.LBB478_108
# %bb.107:                              #   in Loop: Header=BB478_96 Depth=1
	movabsq	$.L.str.1088, %rdi
	movslq	-52(%rbp), %rdx
	shlq	$3, %rdx
	movl	$546, %esi              # imm = 0x222
	callq	sre_malloc
	movq	-32(%rbp), %rcx
	movq	%rax, 120(%rcx)
.LBB478_108:                            #   in Loop: Header=BB478_96 Depth=1
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-36(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$360, %rcx, %rcx        # imm = 0x168
	addq	%rcx, %rax
	movq	352(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	120(%rax), %rcx
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rcx
	callq	MakeAlignedString
.LBB478_109:                            #   in Loop: Header=BB478_96 Depth=1
	movq	-104(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.110:                              #   in Loop: Header=BB478_96 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB478_96
.LBB478_111:
	movabsq	$.L.str.1088, %rdi
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$555, %esi              # imm = 0x22B
	callq	sre_malloc
	movq	-32(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movl	$0, -12(%rbp)
.LBB478_112:                            # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB478_115
# %bb.113:                              #   in Loop: Header=BB478_112 Depth=1
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	$46, (%rax,%rcx)
# %bb.114:                              #   in Loop: Header=BB478_112 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB478_112
.LBB478_115:
	movl	$1, -8(%rbp)
.LBB478_116:                            # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB478_119
# %bb.117:                              #   in Loop: Header=BB478_116 Depth=1
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	$120, (%rax,%rcx)
# %bb.118:                              #   in Loop: Header=BB478_116 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB478_116
.LBB478_119:
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-48(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rdi
	callq	free
	movq	-32(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end478:
	.size	P7Traces2Alignment, .Lfunc_end478-P7Traces2Alignment
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI478_0:
	.quad	.LBB478_17
	.quad	.LBB478_17
	.quad	.LBB478_10
	.quad	.LBB478_26
	.quad	.LBB478_11
	.quad	.LBB478_20
	.quad	.LBB478_26
	.quad	.LBB478_14
	.quad	.LBB478_23
	.quad	.LBB478_27
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function rightjustify
	.type	rightjustify,@function
rightjustify:                           # @rightjustify
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-20(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB479_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -4(%rbp)
	jl	.LBB479_10
# %bb.2:                                #   in Loop: Header=BB479_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB479_7
# %bb.3:                                #   in Loop: Header=BB479_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB479_7
# %bb.4:                                #   in Loop: Header=BB479_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB479_7
# %bb.5:                                #   in Loop: Header=BB479_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB479_7
# %bb.6:                                #   in Loop: Header=BB479_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB479_8
.LBB479_7:                              #   in Loop: Header=BB479_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB479_9
.LBB479_8:                              #   in Loop: Header=BB479_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$-1, %edx
	movl	%edx, -4(%rbp)
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$-1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB479_9:                              #   in Loop: Header=BB479_1 Depth=1
	jmp	.LBB479_1
.LBB479_10:
	jmp	.LBB479_11
.LBB479_11:                             # =>This Inner Loop Header: Depth=1
	cmpl	$0, -8(%rbp)
	jl	.LBB479_13
# %bb.12:                               #   in Loop: Header=BB479_11 Depth=1
	movq	-16(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	%ecx, %edx
	addl	$-1, %edx
	movl	%edx, -8(%rbp)
	movslq	%ecx, %rcx
	movb	$46, (%rax,%rcx)
	jmp	.LBB479_11
.LBB479_13:
	popq	%rbp
	retq
.Lfunc_end479:
	.size	rightjustify, .Lfunc_end479-rightjustify
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function CreateFancyAli
.LCPI480_0:
	.long	1063675494              # float 0.899999976
.LCPI480_1:
	.long	1056964608              # float 0.5
	.text
	.globl	CreateFancyAli
	.p2align	4, 0x90
	.type	CreateFancyAli,@function
CreateFancyAli:                         # @CreateFancyAli
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	callq	AllocFancyAli
	movabsq	$.L.str.1088, %rdi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$680, %esi              # imm = 0x2A8
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$681, %esi              # imm = 0x2A9
	callq	sre_malloc
	movabsq	$.L.str.1088, %rdi
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$682, %esi              # imm = 0x2AA
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rax
	movslq	(%rax), %rdx
	movl	$32, %esi
	callq	memset
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-24(%rbp), %rax
	movslq	(%rax), %rdx
	movl	$32, %esi
	callq	memset
	movq	-16(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-24(%rbp), %rax
	movslq	(%rax), %rdx
	movl	$32, %esi
	callq	memset
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB480_2
# %bb.1:
	movabsq	$.L.str.1088, %rdi
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$690, %esi              # imm = 0x2B2
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rax
	movslq	(%rax), %rdx
	movl	$32, %esi
	callq	memset
.LBB480_2:
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB480_4
# %bb.3:
	movabsq	$.L.str.1088, %rdi
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$695, %esi              # imm = 0x2B7
	callq	sre_malloc
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rax
	movslq	(%rax), %rdx
	movl	$32, %esi
	callq	memset
.LBB480_4:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	Strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-56(%rbp), %rdi
	callq	Strdup
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	cmpl	$3, Alphabet_type
	jne	.LBB480_6
# %bb.5:
	movss	.LCPI480_1(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -40(%rbp)
	jmp	.LBB480_7
.LBB480_6:
	movss	.LCPI480_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -40(%rbp)
.LBB480_7:
	movl	$0, -4(%rbp)
.LBB480_8:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB480_13
# %bb.9:                                #   in Loop: Header=BB480_8 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB480_11
# %bb.10:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB480_14
.LBB480_11:                             #   in Loop: Header=BB480_8 Depth=1
	jmp	.LBB480_12
.LBB480_12:                             #   in Loop: Header=BB480_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB480_8
.LBB480_13:                             # %.loopexit1
	jmp	.LBB480_14
.LBB480_14:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB480_15:                             # =>This Inner Loop Header: Depth=1
	cmpl	$0, -4(%rbp)
	jl	.LBB480_20
# %bb.16:                               #   in Loop: Header=BB480_15 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB480_18
# %bb.17:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 68(%rcx)
	jmp	.LBB480_21
.LBB480_18:                             #   in Loop: Header=BB480_15 Depth=1
	jmp	.LBB480_19
.LBB480_19:                             #   in Loop: Header=BB480_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB480_15
.LBB480_20:                             # %.loopexit
	jmp	.LBB480_21
.LBB480_21:
	movl	$0, -4(%rbp)
.LBB480_22:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB480_58
# %bb.23:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$9, %ecx
	ja	.LBB480_55
# %bb.24:                               #   in Loop: Header=BB480_22 Depth=1
	movq	.LJTI480_0(,%rax,8), %rax
	jmpq	*%rax
.LBB480_25:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$42, (%rax,%rcx)
	jmp	.LBB480_56
.LBB480_26:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$45, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB480_28
# %bb.27:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movsbl	Alphabet(,%rax), %edi
	callq	tolower
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_28:                             #   in Loop: Header=BB480_22 Depth=1
	jmp	.LBB480_56
.LBB480_29:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$62, (%rax,%rcx)
	jmp	.LBB480_56
.LBB480_30:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$60, (%rax,%rcx)
	jmp	.LBB480_56
.LBB480_31:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB480_33
# %bb.32:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_33:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB480_35
# %bb.34:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_35:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FArgMax
	movl	%eax, -36(%rbp)
	movslq	-36(%rbp), %rax
	movb	Alphabet(,%rax), %al
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB480_37
# %bb.36:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	tolower
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_37:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB480_41
# %bb.38:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movb	Alphabet(,%rax), %al
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB480_40
# %bb.39:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	tolower
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_40:                             #   in Loop: Header=BB480_22 Depth=1
	jmp	.LBB480_44
.LBB480_41:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	320(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	24(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB480_43
# %bb.42:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$43, (%rax,%rcx)
.LBB480_43:                             #   in Loop: Header=BB480_22 Depth=1
	jmp	.LBB480_44
.LBB480_44:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movb	Alphabet(,%rax), %al
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB480_56
.LBB480_45:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB480_47
# %bb.46:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_47:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB480_49
# %bb.48:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_49:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	Alphabet_size, %esi
	callq	FArgMax
	movl	%eax, -36(%rbp)
	movslq	-36(%rbp), %rax
	movb	Alphabet(,%rax), %al
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-32(%rbp), %rax
	movq	152(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB480_51
# %bb.50:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	tolower
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB480_51:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$45, (%rax,%rcx)
	jmp	.LBB480_56
.LBB480_52:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$46, (%rax,%rcx)
	movq	-32(%rbp), %rax
	movq	328(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	24(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jle	.LBB480_54
# %bb.53:                               #   in Loop: Header=BB480_22 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$43, (%rax,%rcx)
.LBB480_54:                             #   in Loop: Header=BB480_22 Depth=1
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movsbl	(%rax,%rcx), %eax
	cltq
	movsbl	Alphabet(,%rax), %edi
	callq	tolower
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB480_56
.LBB480_55:                             #   in Loop: Header=BB480_22 Depth=1
	movabsq	$.L.str.8.1112, %rdi
	movb	$0, %al
	callq	Die
.LBB480_56:                             #   in Loop: Header=BB480_22 Depth=1
	jmp	.LBB480_57
.LBB480_57:                             #   in Loop: Header=BB480_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB480_22
.LBB480_58:
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB480_60
# %bb.59:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB480_60:
	movq	-32(%rbp), %rax
	movl	456(%rax), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB480_62
# %bb.61:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
.LBB480_62:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end480:
	.size	CreateFancyAli, .Lfunc_end480-CreateFancyAli
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI480_0:
	.quad	.LBB480_31
	.quad	.LBB480_45
	.quad	.LBB480_52
	.quad	.LBB480_25
	.quad	.LBB480_26
	.quad	.LBB480_29
	.quad	.LBB480_30
	.quad	.LBB480_26
	.quad	.LBB480_25
	.quad	.LBB480_26
                                        # -- End function
	.text
	.globl	PrintFancyAli           # -- Begin function PrintFancyAli
	.p2align	4, 0x90
	.type	PrintFancyAli,@function
PrintFancyAli:                          # @PrintFancyAli
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movb	$0, -46(%rbp)
	movq	-16(%rbp), %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB481_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB481_3 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	40(%rcx), %eax
	jge	.LBB481_29
# %bb.2:                                #   in Loop: Header=BB481_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB481_3:                              #   Parent Loop BB481_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB481_5
# %bb.4:                                #   in Loop: Header=BB481_3 Depth=2
	movl	-20(%rbp), %eax
	movl	-4(%rbp), %ecx
	addl	$50, %ecx
	cmpl	%ecx, %eax
	setl	%al
.LBB481_5:                              #   in Loop: Header=BB481_3 Depth=2
	testb	$1, %al
	jne	.LBB481_6
	jmp	.LBB481_14
.LBB481_6:                              #   in Loop: Header=BB481_3 Depth=2
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB481_12
# %bb.7:                                #   in Loop: Header=BB481_3 Depth=2
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB481_12
# %bb.8:                                #   in Loop: Header=BB481_3 Depth=2
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB481_12
# %bb.9:                                #   in Loop: Header=BB481_3 Depth=2
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB481_12
# %bb.10:                               #   in Loop: Header=BB481_3 Depth=2
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB481_12
# %bb.11:                               #   in Loop: Header=BB481_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB481_12:                             #   in Loop: Header=BB481_3 Depth=2
	jmp	.LBB481_13
.LBB481_13:                             #   in Loop: Header=BB481_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB481_3
.LBB481_14:                             #   in Loop: Header=BB481_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB481_16
# %bb.15:                               #   in Loop: Header=BB481_1 Depth=1
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movl	$50, %edx
	callq	strncpy
	movabsq	$.L.str.9.1115, %rsi
	movabsq	$.L.str.10.1116, %rdx
	leaq	-96(%rbp), %rcx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB481_16:                             #   in Loop: Header=BB481_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB481_18
# %bb.17:                               #   in Loop: Header=BB481_1 Depth=1
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movl	$50, %edx
	callq	strncpy
	movabsq	$.L.str.9.1115, %rsi
	movabsq	$.L.str.11.1117, %rdx
	leaq	-96(%rbp), %rcx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB481_18:                             #   in Loop: Header=BB481_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB481_20
# %bb.19:                               #   in Loop: Header=BB481_1 Depth=1
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movl	$50, %edx
	callq	strncpy
	movabsq	$.L.str.9.1115, %rsi
	movabsq	$.L.str.12.1118, %rdx
	leaq	-96(%rbp), %rcx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB481_20:                             #   in Loop: Header=BB481_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB481_22
# %bb.21:                               #   in Loop: Header=BB481_1 Depth=1
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	24(%rax), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movl	$50, %edx
	callq	strncpy
	movabsq	$.L.str.9.1115, %rsi
	movabsq	$.L.str.12.1118, %rdx
	leaq	-96(%rbp), %rcx
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB481_22:                             #   in Loop: Header=BB481_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB481_27
# %bb.23:                               #   in Loop: Header=BB481_1 Depth=1
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	32(%rax), %rsi
	movslq	-4(%rbp), %rax
	addq	%rax, %rsi
	movl	$50, %edx
	callq	strncpy
	movl	-24(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB481_25
# %bb.24:                               #   in Loop: Header=BB481_1 Depth=1
	movabsq	$.L.str.13.1119, %rsi
	leaq	-96(%rbp), %r8
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdx
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %r9d
	movb	$0, %al
	callq	fprintf
	jmp	.LBB481_26
.LBB481_25:                             #   in Loop: Header=BB481_1 Depth=1
	movabsq	$.L.str.14.1120, %rsi
	movabsq	$.L.str.15.1121, %rcx
	leaq	-96(%rbp), %r8
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdx
	movq	%rcx, %r9
	movb	$0, %al
	callq	fprintf
.LBB481_26:                             #   in Loop: Header=BB481_1 Depth=1
	jmp	.LBB481_27
.LBB481_27:                             #   in Loop: Header=BB481_1 Depth=1
	jmp	.LBB481_28
.LBB481_28:                             #   in Loop: Header=BB481_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$50, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB481_1
.LBB481_29:
	movq	-32(%rbp), %rdi
	callq	fflush
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end481:
	.size	PrintFancyAli, .Lfunc_end481-PrintFancyAli
	.cfi_endproc
                                        # -- End function
	.globl	TraceDecompose          # -- Begin function TraceDecompose
	.p2align	4, 0x90
	.type	TraceDecompose,@function
TraceDecompose:                         # @TraceDecompose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB482_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB482_6
# %bb.2:                                #   in Loop: Header=BB482_1 Depth=1
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB482_4
# %bb.3:                                #   in Loop: Header=BB482_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB482_4:                              #   in Loop: Header=BB482_1 Depth=1
	jmp	.LBB482_5
.LBB482_5:                              #   in Loop: Header=BB482_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB482_1
.LBB482_6:
	cmpl	$0, -28(%rbp)
	jne	.LBB482_8
# %bb.7:
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	$0, (%rax)
	jmp	.LBB482_26
.LBB482_8:
	movabsq	$.L.str.1088, %rdi
	movslq	-28(%rbp), %rdx
	shlq	$3, %rdx
	movl	$893, %esi              # imm = 0x37D
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -12(%rbp)
.LBB482_9:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB482_12 Depth 2
                                        #     Child Loop BB482_19 Depth 2
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB482_25
# %bb.10:                               #   in Loop: Header=BB482_9 Depth=1
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB482_23
# %bb.11:                               #   in Loop: Header=BB482_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB482_12:                             #   Parent Loop BB482_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB482_17
# %bb.13:                               #   in Loop: Header=BB482_12 Depth=2
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$7, %eax
	jne	.LBB482_15
# %bb.14:                               #   in Loop: Header=BB482_9 Depth=1
	jmp	.LBB482_18
.LBB482_15:                             #   in Loop: Header=BB482_12 Depth=2
	jmp	.LBB482_16
.LBB482_16:                             #   in Loop: Header=BB482_12 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB482_12
.LBB482_17:                             # %.loopexit
                                        #   in Loop: Header=BB482_9 Depth=1
	jmp	.LBB482_18
.LBB482_18:                             #   in Loop: Header=BB482_9 Depth=1
	movl	-4(%rbp), %edi
	subl	-12(%rbp), %edi
	addl	$5, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	P7AllocTrace
	movl	-4(%rbp), %eax
	subl	-12(%rbp), %eax
	addl	$5, %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movb	$4, (%rax)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movb	$5, 1(%rax)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	$0, 4(%rax)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movl	$0, 4(%rax)
	movl	$2, -4(%rbp)
.LBB482_19:                             #   Parent Loop BB482_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$7, %eax
	jne	.LBB482_21
# %bb.20:                               #   in Loop: Header=BB482_9 Depth=1
	jmp	.LBB482_22
.LBB482_21:                             #   in Loop: Header=BB482_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB482_19
.LBB482_22:                             #   in Loop: Header=BB482_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$8, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	$9, (%rax,%rcx)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB482_23:                             #   in Loop: Header=BB482_9 Depth=1
	jmp	.LBB482_24
.LBB482_24:                             #   in Loop: Header=BB482_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB482_9
.LBB482_25:
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB482_26:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end482:
	.size	TraceDecompose, .Lfunc_end482-TraceDecompose
	.cfi_endproc
                                        # -- End function
	.globl	TraceDomainNumber       # -- Begin function TraceDomainNumber
	.p2align	4, 0x90
	.type	TraceDomainNumber,@function
TraceDomainNumber:                      # @TraceDomainNumber
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB483_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB483_6
# %bb.2:                                #   in Loop: Header=BB483_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$6, %eax
	jne	.LBB483_4
# %bb.3:                                #   in Loop: Header=BB483_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB483_4:                              #   in Loop: Header=BB483_1 Depth=1
	jmp	.LBB483_5
.LBB483_5:                              #   in Loop: Header=BB483_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB483_1
.LBB483_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end483:
	.size	TraceDomainNumber, .Lfunc_end483-TraceDomainNumber
	.cfi_endproc
                                        # -- End function
	.globl	TraceSimpleBounds       # -- Begin function TraceSimpleBounds
	.p2align	4, 0x90
	.type	TraceSimpleBounds,@function
TraceSimpleBounds:                      # @TraceSimpleBounds
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -40(%rbp)
	movl	$-1, -20(%rbp)
	movl	$-1, -28(%rbp)
	movl	$-1, -24(%rbp)
	movl	$-1, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB484_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB484_10
# %bb.2:                                #   in Loop: Header=BB484_1 Depth=1
	cmpl	$-1, -24(%rbp)
	jne	.LBB484_6
# %bb.3:                                #   in Loop: Header=BB484_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	je	.LBB484_5
# %bb.4:                                #   in Loop: Header=BB484_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$2, %eax
	jne	.LBB484_6
.LBB484_5:                              #   in Loop: Header=BB484_1 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -24(%rbp)
.LBB484_6:                              #   in Loop: Header=BB484_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB484_8
# %bb.7:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB484_11
.LBB484_8:                              #   in Loop: Header=BB484_1 Depth=1
	jmp	.LBB484_9
.LBB484_9:                              #   in Loop: Header=BB484_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB484_1
.LBB484_10:                             # %.loopexit1
	jmp	.LBB484_11
.LBB484_11:
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB484_14
# %bb.12:
	cmpl	$-1, -32(%rbp)
	je	.LBB484_14
# %bb.13:
	cmpl	$-1, -24(%rbp)
	jne	.LBB484_15
.LBB484_14:
	movabsq	$.L.str.16.1126, %rdi
	movb	$0, %al
	callq	Die
.LBB484_15:
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB484_16:                             # =>This Inner Loop Header: Depth=1
	cmpl	$0, -4(%rbp)
	jl	.LBB484_25
# %bb.17:                               #   in Loop: Header=BB484_16 Depth=1
	cmpl	$-1, -20(%rbp)
	jne	.LBB484_21
# %bb.18:                               #   in Loop: Header=BB484_16 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	je	.LBB484_20
# %bb.19:                               #   in Loop: Header=BB484_16 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$2, %eax
	jne	.LBB484_21
.LBB484_20:                             #   in Loop: Header=BB484_16 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -20(%rbp)
.LBB484_21:                             #   in Loop: Header=BB484_16 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jne	.LBB484_23
# %bb.22:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB484_26
.LBB484_23:                             #   in Loop: Header=BB484_16 Depth=1
	jmp	.LBB484_24
.LBB484_24:                             #   in Loop: Header=BB484_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB484_16
.LBB484_25:                             # %.loopexit
	jmp	.LBB484_26
.LBB484_26:
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB484_29
# %bb.27:
	cmpl	$-1, -28(%rbp)
	je	.LBB484_29
# %bb.28:
	cmpl	$-1, -20(%rbp)
	jne	.LBB484_30
.LBB484_29:
	movabsq	$.L.str.16.1126, %rdi
	movb	$0, %al
	callq	Die
.LBB484_30:
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end484:
	.size	TraceSimpleBounds, .Lfunc_end484-TraceSimpleBounds
	.cfi_endproc
                                        # -- End function
	.globl	MasterTraceFromMap      # -- Begin function MasterTraceFromMap
	.p2align	4, 0x90
	.type	MasterTraceFromMap,@function
MasterTraceFromMap:                     # @MasterTraceFromMap
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-16(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %edi
	addl	$6, %edi
	movq	%rax, %rsi
	callq	P7AllocTrace
	movl	$0, -4(%rbp)
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$4, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$5, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -8(%rbp)
.LBB485_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB485_4
# %bb.2:                                #   in Loop: Header=BB485_1 Depth=1
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %r8d
	movl	$5, %edx
	xorl	%ecx, %ecx
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.3:                                #   in Loop: Header=BB485_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB485_1
.LBB485_4:
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$6, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -20(%rbp)
.LBB485_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB485_7 Depth 2
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB485_12
# %bb.6:                                #   in Loop: Header=BB485_5 Depth=1
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-20(%rbp), %ecx
	movl	-8(%rbp), %r8d
	movl	$1, %edx
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB485_7:                              #   Parent Loop BB485_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB485_10
# %bb.8:                                #   in Loop: Header=BB485_7 Depth=2
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-20(%rbp), %ecx
	movl	-8(%rbp), %r8d
	movl	$3, %edx
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.9:                                #   in Loop: Header=BB485_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB485_7
.LBB485_10:                             #   in Loop: Header=BB485_5 Depth=1
	jmp	.LBB485_11
.LBB485_11:                             #   in Loop: Header=BB485_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB485_5
.LBB485_12:
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	movl	$1, %edx
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$7, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$8, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB485_13:                             # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB485_16
# %bb.14:                               #   in Loop: Header=BB485_13 Depth=1
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %r8d
	movl	$8, %edx
	xorl	%ecx, %ecx
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.15:                               #   in Loop: Header=BB485_13 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB485_13
.LBB485_16:
	movq	-16(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$9, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end485:
	.size	MasterTraceFromMap, .Lfunc_end485-MasterTraceFromMap
	.cfi_endproc
                                        # -- End function
	.globl	ImposeMasterTrace       # -- Begin function ImposeMasterTrace
	.p2align	4, 0x90
	.type	ImposeMasterTrace,@function
ImposeMasterTrace:                      # @ImposeMasterTrace
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.1088, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -52(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -64(%rbp)
	movslq	-52(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movl	$1126, %esi             # imm = 0x466
	callq	sre_malloc
	movq	%rax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB486_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB486_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB486_37
# %bb.2:                                #   in Loop: Header=BB486_1 Depth=1
	movq	-24(%rbp), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	P7AllocTrace
	movl	$0, -12(%rbp)
	movl	$1, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB486_3:                              #   Parent Loop BB486_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB486_35
# %bb.4:                                #   in Loop: Header=BB486_3 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB486_33
# %bb.5:                                #   in Loop: Header=BB486_3 Depth=2
	movq	.LJTI486_0(,%rax,8), %rax
	jmpq	*%rax
.LBB486_6:                              #   in Loop: Header=BB486_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movsbl	%al, %edx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB486_33
.LBB486_7:                              #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB486_12
# %bb.8:                                #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB486_12
# %bb.9:                                #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB486_12
# %bb.10:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB486_12
# %bb.11:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	jne	.LBB486_13
.LBB486_12:                             #   in Loop: Header=BB486_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	movl	$2, %edx
	xorl	%r8d, %r8d
	callq	TraceSet
	jmp	.LBB486_14
.LBB486_13:                             #   in Loop: Header=BB486_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	movl	-28(%rbp), %r8d
	movl	$1, %edx
	callq	TraceSet
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB486_14:                             #   in Loop: Header=BB486_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB486_33
.LBB486_15:                             #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB486_21
# %bb.16:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB486_21
# %bb.17:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB486_21
# %bb.18:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB486_21
# %bb.19:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB486_21
# %bb.20:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	movl	-28(%rbp), %r8d
	movl	$3, %edx
	callq	TraceSet
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB486_21:                             #   in Loop: Header=BB486_3 Depth=2
	jmp	.LBB486_33
.LBB486_22:                             #   in Loop: Header=BB486_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB486_24
# %bb.23:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	TraceSet
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB486_31
.LBB486_24:                             #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB486_30
# %bb.25:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB486_30
# %bb.26:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB486_30
# %bb.27:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB486_30
# %bb.28:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB486_30
# %bb.29:                               #   in Loop: Header=BB486_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movl	-28(%rbp), %r8d
	movsbl	%al, %edx
	xorl	%ecx, %ecx
	callq	TraceSet
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB486_30:                             #   in Loop: Header=BB486_3 Depth=2
	jmp	.LBB486_31
.LBB486_31:                             #   in Loop: Header=BB486_3 Depth=2
	jmp	.LBB486_33
.LBB486_32:                             #   in Loop: Header=BB486_3 Depth=2
	movabsq	$.L.str.17.1127, %rdi
	movb	$0, %al
	callq	Die
.LBB486_33:                             #   in Loop: Header=BB486_3 Depth=2
	jmp	.LBB486_34
.LBB486_34:                             #   in Loop: Header=BB486_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB486_3
.LBB486_35:                             #   in Loop: Header=BB486_1 Depth=1
	movl	-12(%rbp), %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
# %bb.36:                               #   in Loop: Header=BB486_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB486_1
.LBB486_37:
	movq	-48(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end486:
	.size	ImposeMasterTrace, .Lfunc_end486-ImposeMasterTrace
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI486_0:
	.quad	.LBB486_32
	.quad	.LBB486_7
	.quad	.LBB486_6
	.quad	.LBB486_15
	.quad	.LBB486_6
	.quad	.LBB486_22
	.quad	.LBB486_6
	.quad	.LBB486_6
	.quad	.LBB486_22
	.quad	.LBB486_6
	.quad	.LBB486_22
                                        # -- End function
	.text
	.globl	Translate               # -- Begin function Translate
	.p2align	4, 0x90
	.type	Translate,@function
Translate:                              # @Translate
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB487_2
# %bb.1:
	movl	$2, squid_errno
	movq	$0, -48(%rbp)
	jmp	.LBB487_27
.LBB487_2:
	movq	-16(%rbp), %rdi
	callq	strlen
	addq	$1, %rax
	movq	%rax, %rdi
	movl	$1, %esi
	callq	calloc
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB487_4
# %bb.3:
	movabsq	$.L.str.1128, %rdi
	movb	$0, %al
	callq	Die
.LBB487_4:
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB487_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB487_10 Depth 2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB487_8
# %bb.6:                                #   in Loop: Header=BB487_5 Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movsbl	1(%rcx), %ecx
	cmpl	$0, %ecx
	je	.LBB487_8
# %bb.7:                                #   in Loop: Header=BB487_5 Depth=1
	movq	-16(%rbp), %rax
	movsbl	2(%rax), %eax
	cmpl	$0, %eax
	setne	%al
.LBB487_8:                              #   in Loop: Header=BB487_5 Depth=1
	testb	$1, %al
	jne	.LBB487_9
	jmp	.LBB487_26
.LBB487_9:                              #   in Loop: Header=BB487_5 Depth=1
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
.LBB487_10:                             #   Parent Loop BB487_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -8(%rbp)
	jge	.LBB487_23
# %bb.11:                               #   in Loop: Header=BB487_10 Depth=2
	movl	-4(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-65, %eax
	movl	%eax, %ecx
	subl	$52, %ecx
	ja	.LBB487_18
# %bb.12:                               #   in Loop: Header=BB487_10 Depth=2
	movq	.LJTI487_0(,%rax,8), %rax
	jmpq	*%rax
.LBB487_13:                             #   in Loop: Header=BB487_10 Depth=2
	jmp	.LBB487_19
.LBB487_14:                             #   in Loop: Header=BB487_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB487_19
.LBB487_15:                             #   in Loop: Header=BB487_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB487_19
.LBB487_16:                             #   in Loop: Header=BB487_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB487_19
.LBB487_17:                             #   in Loop: Header=BB487_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB487_19
.LBB487_18:                             #   in Loop: Header=BB487_10 Depth=2
	movl	$64, -4(%rbp)
.LBB487_19:                             #   in Loop: Header=BB487_10 Depth=2
	cmpl	$64, -4(%rbp)
	jne	.LBB487_21
# %bb.20:                               #   in Loop: Header=BB487_5 Depth=1
	jmp	.LBB487_24
.LBB487_21:                             #   in Loop: Header=BB487_10 Depth=2
	jmp	.LBB487_22
.LBB487_22:                             #   in Loop: Header=BB487_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB487_10
.LBB487_23:                             # %.loopexit
                                        #   in Loop: Header=BB487_5 Depth=1
	jmp	.LBB487_24
.LBB487_24:                             #   in Loop: Header=BB487_5 Depth=1
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	strlen
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               #   in Loop: Header=BB487_5 Depth=1
	movq	-16(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB487_5
.LBB487_26:
	movq	-32(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB487_27:
	movq	-48(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end487:
	.size	Translate, .Lfunc_end487-Translate
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI487_0:
	.quad	.LBB487_13
	.quad	.LBB487_18
	.quad	.LBB487_14
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_15
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_16
	.quad	.LBB487_17
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_13
	.quad	.LBB487_18
	.quad	.LBB487_14
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_15
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_18
	.quad	.LBB487_16
	.quad	.LBB487_17
                                        # -- End function
	.text
	.globl	IsInt                   # -- Begin function IsInt
	.p2align	4, 0x90
	.type	IsInt,@function
IsInt:                                  # @IsInt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -16(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB488_2
# %bb.1:
	movl	$6, squid_errno
	movl	$0, -12(%rbp)
	jmp	.LBB488_31
.LBB488_2:
	jmp	.LBB488_3
.LBB488_3:                              # =>This Inner Loop Header: Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB488_5
# %bb.4:                                #   in Loop: Header=BB488_3 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB488_3
.LBB488_5:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB488_7
# %bb.6:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$43, %eax
	jne	.LBB488_8
.LBB488_7:
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
.LBB488_8:
	movabsq	$.L.str.1131, %rsi
	movq	-8(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB488_10
# %bb.9:
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpl	$2, %eax
	jg	.LBB488_12
.LBB488_10:
	movabsq	$.L.str.1.1132, %rsi
	movq	-8(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB488_13
# %bb.11:
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpl	$2, %eax
	jle	.LBB488_13
.LBB488_12:
	movq	-8(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	movl	$1, -16(%rbp)
	jmp	.LBB488_17
.LBB488_13:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$48, %eax
	jne	.LBB488_16
# %bb.14:
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpl	$1, %eax
	jle	.LBB488_16
# %bb.15:
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
.LBB488_16:
	jmp	.LBB488_17
.LBB488_17:
	cmpl	$0, -16(%rbp)
	jne	.LBB488_24
# %bb.18:
	jmp	.LBB488_19
.LBB488_19:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB488_23
# %bb.20:                               #   in Loop: Header=BB488_19 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	jne	.LBB488_22
# %bb.21:
	movl	$0, -12(%rbp)
	jmp	.LBB488_31
.LBB488_22:                             #   in Loop: Header=BB488_19 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB488_19
.LBB488_23:
	jmp	.LBB488_30
.LBB488_24:
	jmp	.LBB488_25
.LBB488_25:                             # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB488_29
# %bb.26:                               #   in Loop: Header=BB488_25 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$4096, %eax             # imm = 0x1000
	cmpl	$0, %eax
	jne	.LBB488_28
# %bb.27:
	movl	$0, -12(%rbp)
	jmp	.LBB488_31
.LBB488_28:                             #   in Loop: Header=BB488_25 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB488_25
.LBB488_29:
	jmp	.LBB488_30
.LBB488_30:
	movl	$1, -12(%rbp)
.LBB488_31:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end488:
	.size	IsInt, .Lfunc_end488-IsInt
	.cfi_endproc
                                        # -- End function
	.globl	IsReal                  # -- Begin function IsReal
	.p2align	4, 0x90
	.type	IsReal,@function
IsReal:                                 # @IsReal
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB489_2
# %bb.1:
	movl	$0, -12(%rbp)
	jmp	.LBB489_39
.LBB489_2:
	jmp	.LBB489_3
.LBB489_3:                              # =>This Inner Loop Header: Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB489_5
# %bb.4:                                #   in Loop: Header=BB489_3 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB489_3
.LBB489_5:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB489_7
# %bb.6:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$43, %eax
	jne	.LBB489_8
.LBB489_7:
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
.LBB489_8:
	jmp	.LBB489_9
.LBB489_9:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB489_31
# %bb.10:                               #   in Loop: Header=BB489_9 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB489_12
# %bb.11:                               #   in Loop: Header=BB489_9 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB489_30
.LBB489_12:                             #   in Loop: Header=BB489_9 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	jne	.LBB489_19
# %bb.13:                               #   in Loop: Header=BB489_9 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB489_15
# %bb.14:
	movl	$0, -12(%rbp)
	jmp	.LBB489_39
.LBB489_15:                             #   in Loop: Header=BB489_9 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB489_17
# %bb.16:
	movl	$0, -12(%rbp)
	jmp	.LBB489_39
.LBB489_17:                             #   in Loop: Header=BB489_9 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
# %bb.18:                               #   in Loop: Header=BB489_9 Depth=1
	jmp	.LBB489_29
.LBB489_19:                             #   in Loop: Header=BB489_9 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$101, %eax
	je	.LBB489_21
# %bb.20:                               #   in Loop: Header=BB489_9 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$69, %eax
	jne	.LBB489_25
.LBB489_21:                             #   in Loop: Header=BB489_9 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB489_23
# %bb.22:
	movl	$0, -12(%rbp)
	jmp	.LBB489_39
.LBB489_23:                             #   in Loop: Header=BB489_9 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.24:                               #   in Loop: Header=BB489_9 Depth=1
	jmp	.LBB489_28
.LBB489_25:                             #   in Loop: Header=BB489_9 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB489_27
# %bb.26:
	jmp	.LBB489_32
.LBB489_27:                             #   in Loop: Header=BB489_9 Depth=1
	jmp	.LBB489_28
.LBB489_28:                             #   in Loop: Header=BB489_9 Depth=1
	jmp	.LBB489_29
.LBB489_29:                             #   in Loop: Header=BB489_9 Depth=1
	jmp	.LBB489_30
.LBB489_30:                             #   in Loop: Header=BB489_9 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB489_9
.LBB489_31:                             # %.loopexit
	jmp	.LBB489_32
.LBB489_32:
	jmp	.LBB489_33
.LBB489_33:                             # =>This Inner Loop Header: Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB489_35
# %bb.34:                               #   in Loop: Header=BB489_33 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB489_33
.LBB489_35:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB489_38
# %bb.36:
	cmpl	$0, -20(%rbp)
	je	.LBB489_38
# %bb.37:
	movl	$1, -12(%rbp)
	jmp	.LBB489_39
.LBB489_38:
	movl	$0, -12(%rbp)
.LBB489_39:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end489:
	.size	IsReal, .Lfunc_end489-IsReal
	.cfi_endproc
                                        # -- End function
	.globl	Byteswap                # -- Begin function Byteswap
	.p2align	4, 0x90
	.type	Byteswap,@function
Byteswap:                               # @Byteswap
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB490_1:                              # =>This Inner Loop Header: Depth=1
	movl	$2, %ecx
	movl	-4(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	%eax, %esi
	jge	.LBB490_4
# %bb.2:                                #   in Loop: Header=BB490_1 Depth=1
	movq	-24(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -5(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movb	-5(%rbp), %al
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.3:                                #   in Loop: Header=BB490_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB490_1
.LBB490_4:
	popq	%rbp
	retq
.Lfunc_end490:
	.size	Byteswap, .Lfunc_end490-Byteswap
	.cfi_endproc
                                        # -- End function
	.globl	sre_ntoh16              # -- Begin function sre_ntoh16
	.p2align	4, 0x90
	.type	sre_ntoh16,@function
sre_ntoh16:                             # @sre_ntoh16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	%di, -2(%rbp)
	movzwl	-2(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end491:
	.size	sre_ntoh16, .Lfunc_end491-sre_ntoh16
	.cfi_endproc
                                        # -- End function
	.globl	sre_ntoh32              # -- Begin function sre_ntoh32
	.p2align	4, 0x90
	.type	sre_ntoh32,@function
sre_ntoh32:                             # @sre_ntoh32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end492:
	.size	sre_ntoh32, .Lfunc_end492-sre_ntoh32
	.cfi_endproc
                                        # -- End function
	.globl	sre_hton16              # -- Begin function sre_hton16
	.p2align	4, 0x90
	.type	sre_hton16,@function
sre_hton16:                             # @sre_hton16
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	%di, -2(%rbp)
	movzwl	-2(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end493:
	.size	sre_hton16, .Lfunc_end493-sre_hton16
	.cfi_endproc
                                        # -- End function
	.globl	sre_hton32              # -- Begin function sre_hton32
	.p2align	4, 0x90
	.type	sre_hton32,@function
sre_hton32:                             # @sre_hton32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end494:
	.size	sre_hton32, .Lfunc_end494-sre_hton32
	.cfi_endproc
                                        # -- End function
	.globl	sre_ntoh64              # -- Begin function sre_ntoh64
	.p2align	4, 0x90
	.type	sre_ntoh64,@function
sre_ntoh64:                             # @sre_ntoh64
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end495:
	.size	sre_ntoh64, .Lfunc_end495-sre_ntoh64
	.cfi_endproc
                                        # -- End function
	.globl	sre_hton64              # -- Begin function sre_hton64
	.p2align	4, 0x90
	.type	sre_hton64,@function
sre_hton64:                             # @sre_hton64
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end496:
	.size	sre_hton64, .Lfunc_end496-sre_hton64
	.cfi_endproc
                                        # -- End function
	.globl	specqsort               # -- Begin function specqsort
	.p2align	4, 0x90
	.type	specqsort,@function
specqsort:                              # @specqsort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -76(%rbp)
	movq	%rcx, -88(%rbp)
	cmpl	$1, -52(%rbp)
	jg	.LBB497_2
# %bb.1:
	jmp	.LBB497_31
.LBB497_2:
	movl	-76(%rbp), %eax
	movl	%eax, qsz
	movq	-88(%rbp), %rax
	movq	%rax, qcmp
	movl	qsz, %eax
	shll	$2, %eax
	movl	%eax, thresh
	imull	$6, qsz, %eax
	movl	%eax, mthresh
	movq	-48(%rbp), %rax
	movl	-52(%rbp), %ecx
	imull	qsz, %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB497_4
# %bb.3:
	movq	-48(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	qst
	movq	-48(%rbp), %rax
	movslq	thresh, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB497_5
.LBB497_4:
	movq	-72(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB497_5:
	movq	-48(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -16(%rbp)
.LBB497_6:                              # =>This Inner Loop Header: Depth=1
	movl	qsz, %eax
	movq	-32(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -32(%rbp)
	cmpq	-24(%rbp), %rcx
	jae	.LBB497_10
# %bb.7:                                #   in Loop: Header=BB497_6 Depth=1
	movq	qcmp, %rcx
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movb	$0, %al
	callq	*%rcx
	cmpl	$0, %eax
	jle	.LBB497_9
# %bb.8:                                #   in Loop: Header=BB497_6 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB497_9:                              #   in Loop: Header=BB497_6 Depth=1
	jmp	.LBB497_6
.LBB497_10:
	movq	-16(%rbp), %rax
	cmpq	-48(%rbp), %rax
	je	.LBB497_15
# %bb.11:
	movq	-48(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movslq	qsz, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
.LBB497_12:                             # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB497_14
# %bb.13:                               #   in Loop: Header=BB497_12 Depth=1
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movq	-40(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movb	%al, (%rcx)
	movb	-1(%rbp), %al
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%al, (%rcx)
	jmp	.LBB497_12
.LBB497_14:
	jmp	.LBB497_15
.LBB497_15:
	movq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB497_16:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB497_18 Depth 2
                                        #     Child Loop BB497_22 Depth 2
                                        #       Child Loop BB497_24 Depth 3
	movl	qsz, %eax
	movq	-64(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	%rcx, -24(%rbp)
	cmpq	-72(%rbp), %rcx
	jae	.LBB497_30
# %bb.17:                               #   in Loop: Header=BB497_16 Depth=1
	jmp	.LBB497_18
.LBB497_18:                             #   Parent Loop BB497_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	qcmp, %rcx
	movl	qsz, %edx
	movq	-24(%rbp), %rdi
	movslq	%edx, %rdx
	subq	%rdx, %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)
	movq	-64(%rbp), %rsi
	movb	$0, %al
	callq	*%rcx
	cmpl	$0, %eax
	jle	.LBB497_20
# %bb.19:                               #   in Loop: Header=BB497_18 Depth=2
	jmp	.LBB497_18
.LBB497_20:                             #   in Loop: Header=BB497_16 Depth=1
	movl	qsz, %eax
	movq	-24(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -24(%rbp)
	cmpq	-64(%rbp), %rcx
	je	.LBB497_29
# %bb.21:                               #   in Loop: Header=BB497_16 Depth=1
	movq	-64(%rbp), %rax
	movslq	qsz, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
.LBB497_22:                             #   Parent Loop BB497_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB497_24 Depth 3
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	cmpq	-64(%rbp), %rax
	jb	.LBB497_28
# %bb.23:                               #   in Loop: Header=BB497_22 Depth=2
	movq	-32(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	%rax, -40(%rbp)
.LBB497_24:                             #   Parent Loop BB497_16 Depth=1
                                        #     Parent Loop BB497_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movl	qsz, %ecx
	movq	-16(%rbp), %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	addq	%rax, %rdx
	movq	%rdx, -16(%rbp)
	cmpq	-24(%rbp), %rdx
	jb	.LBB497_27
# %bb.25:                               #   in Loop: Header=BB497_24 Depth=3
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movq	-40(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.26:                               #   in Loop: Header=BB497_24 Depth=3
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB497_24
.LBB497_27:                             #   in Loop: Header=BB497_22 Depth=2
	movb	-1(%rbp), %al
	movq	-40(%rbp), %rcx
	movb	%al, (%rcx)
	jmp	.LBB497_22
.LBB497_28:                             #   in Loop: Header=BB497_16 Depth=1
	jmp	.LBB497_29
.LBB497_29:                             #   in Loop: Header=BB497_16 Depth=1
	jmp	.LBB497_16
.LBB497_30:                             # %.loopexit
	jmp	.LBB497_31
.LBB497_31:
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end497:
	.size	specqsort, .Lfunc_end497-specqsort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function qst
	.type	qst,@function
qst:                                    # @qst
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, -28(%rbp)
.LBB498_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB498_14 Depth 2
                                        #     Child Loop BB498_19 Depth 2
                                        #       Child Loop BB498_20 Depth 3
                                        #       Child Loop BB498_25 Depth 3
                                        #       Child Loop BB498_37 Depth 3
	movq	-56(%rbp), %rcx
	movl	qsz, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	qsz
	sarl	$1, %eax
	imull	%eax, %esi
	movslq	%esi, %rax
	addq	%rax, %rcx
	movq	%rcx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	mthresh, %eax
	jl	.LBB498_18
# %bb.2:                                #   in Loop: Header=BB498_1 Depth=1
	movq	qcmp, %rcx
	movq	-56(%rbp), %rdi
	movq	%rdi, -48(%rbp)
	movq	-24(%rbp), %rsi
	movb	$0, %al
	callq	*%rcx
	cmpl	$0, %eax
	jle	.LBB498_4
# %bb.3:                                #   in Loop: Header=BB498_1 Depth=1
	movq	-48(%rbp), %rax
	jmp	.LBB498_5
.LBB498_4:                              #   in Loop: Header=BB498_1 Depth=1
	movq	-24(%rbp), %rax
.LBB498_5:                              #   in Loop: Header=BB498_1 Depth=1
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	movq	qcmp, %rdx
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movslq	qsz, %rax
	subq	%rax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -72(%rbp)
	movb	$0, %al
	callq	*%rdx
	cmpl	$0, %eax
	jle	.LBB498_12
# %bb.6:                                #   in Loop: Header=BB498_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB498_8
# %bb.7:                                #   in Loop: Header=BB498_1 Depth=1
	movq	-24(%rbp), %rax
	jmp	.LBB498_9
.LBB498_8:                              #   in Loop: Header=BB498_1 Depth=1
	movq	-48(%rbp), %rax
.LBB498_9:                              #   in Loop: Header=BB498_1 Depth=1
	movq	%rax, -16(%rbp)
	movq	qcmp, %rcx
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movb	$0, %al
	callq	*%rcx
	cmpl	$0, %eax
	jge	.LBB498_11
# %bb.10:                               #   in Loop: Header=BB498_1 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB498_11:                             #   in Loop: Header=BB498_1 Depth=1
	jmp	.LBB498_12
.LBB498_12:                             #   in Loop: Header=BB498_1 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB498_17
# %bb.13:                               #   in Loop: Header=BB498_1 Depth=1
	movl	qsz, %eax
	movl	%eax, -32(%rbp)
.LBB498_14:                             #   Parent Loop BB498_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movb	%al, (%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movb	%al, (%rcx)
# %bb.15:                               #   in Loop: Header=BB498_14 Depth=2
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, %eax
	jne	.LBB498_14
# %bb.16:                               #   in Loop: Header=BB498_1 Depth=1
	jmp	.LBB498_17
.LBB498_17:                             #   in Loop: Header=BB498_1 Depth=1
	jmp	.LBB498_18
.LBB498_18:                             #   in Loop: Header=BB498_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-64(%rbp), %rcx
	movslq	qsz, %rdx
	subq	%rdx, %rax
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
.LBB498_19:                             #   Parent Loop BB498_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB498_20 Depth 3
                                        #       Child Loop BB498_25 Depth 3
                                        #       Child Loop BB498_37 Depth 3
	jmp	.LBB498_20
.LBB498_20:                             #   Parent Loop BB498_1 Depth=1
                                        #     Parent Loop BB498_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	cmpq	-40(%rbp), %rcx
	jae	.LBB498_22
# %bb.21:                               #   in Loop: Header=BB498_20 Depth=3
	movq	qcmp, %rcx
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movb	$0, %al
	callq	*%rcx
	cmpl	$0, %eax
	setle	%al
.LBB498_22:                             #   in Loop: Header=BB498_20 Depth=3
	testb	$1, %al
	jne	.LBB498_23
	jmp	.LBB498_24
.LBB498_23:                             #   in Loop: Header=BB498_20 Depth=3
	movl	qsz, %eax
	movq	-24(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -24(%rbp)
	jmp	.LBB498_20
.LBB498_24:                             #   in Loop: Header=BB498_19 Depth=2
	jmp	.LBB498_25
.LBB498_25:                             #   Parent Loop BB498_1 Depth=1
                                        #     Parent Loop BB498_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-16(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jbe	.LBB498_32
# %bb.26:                               #   in Loop: Header=BB498_25 Depth=3
	movq	qcmp, %rcx
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movb	$0, %al
	callq	*%rcx
	cmpl	$0, %eax
	jg	.LBB498_28
# %bb.27:                               #   in Loop: Header=BB498_25 Depth=3
	xorl	%eax, %eax
	movl	qsz, %ecx
	movq	-16(%rbp), %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	addq	%rax, %rdx
	movq	%rdx, -16(%rbp)
	jmp	.LBB498_25
.LBB498_28:                             #   in Loop: Header=BB498_19 Depth=2
	movq	-24(%rbp), %rax
	movslq	qsz, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB498_30
# %bb.29:                               #   in Loop: Header=BB498_19 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB498_31
.LBB498_30:                             #   in Loop: Header=BB498_19 Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movl	qsz, %ecx
	movq	-16(%rbp), %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	addq	%rax, %rdx
	movq	%rdx, -16(%rbp)
.LBB498_31:                             #   in Loop: Header=BB498_19 Depth=2
	jmp	.LBB498_36
.LBB498_32:                             #   in Loop: Header=BB498_19 Depth=2
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB498_34
# %bb.33:                               #   in Loop: Header=BB498_1 Depth=1
	jmp	.LBB498_40
.LBB498_34:                             #   in Loop: Header=BB498_19 Depth=2
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	%rcx, -72(%rbp)
	movl	qsz, %ecx
	movq	-16(%rbp), %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	addq	%rax, %rdx
	movq	%rdx, -16(%rbp)
# %bb.35:                               #   in Loop: Header=BB498_19 Depth=2
	jmp	.LBB498_36
.LBB498_36:                             #   in Loop: Header=BB498_19 Depth=2
	movl	qsz, %eax
	movl	%eax, -32(%rbp)
.LBB498_37:                             #   Parent Loop BB498_1 Depth=1
                                        #     Parent Loop BB498_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-24(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -1(%rbp)
	movq	-48(%rbp), %rax
	movb	(%rax), %al
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movb	%al, (%rcx)
	movb	-1(%rbp), %al
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -48(%rbp)
	movb	%al, (%rcx)
# %bb.38:                               #   in Loop: Header=BB498_37 Depth=3
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, %eax
	jne	.LBB498_37
# %bb.39:                               #   in Loop: Header=BB498_19 Depth=2
	movq	-72(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB498_19
.LBB498_40:                             #   in Loop: Header=BB498_1 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movslq	qsz, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, -28(%rbp)
	movq	-64(%rbp), %rcx
	movq	-24(%rbp), %rdx
	subq	%rdx, %rcx
	movl	%ecx, -76(%rbp)
	cmpl	%ecx, %eax
	jg	.LBB498_44
# %bb.41:                               #   in Loop: Header=BB498_1 Depth=1
	movl	-28(%rbp), %eax
	cmpl	thresh, %eax
	jl	.LBB498_43
# %bb.42:                               #   in Loop: Header=BB498_1 Depth=1
	movq	-56(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	qst
.LBB498_43:                             #   in Loop: Header=BB498_1 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB498_47
.LBB498_44:                             #   in Loop: Header=BB498_1 Depth=1
	movl	-76(%rbp), %eax
	cmpl	thresh, %eax
	jl	.LBB498_46
# %bb.45:                               #   in Loop: Header=BB498_1 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	qst
.LBB498_46:                             #   in Loop: Header=BB498_1 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB498_47:                             #   in Loop: Header=BB498_1 Depth=1
	jmp	.LBB498_48
.LBB498_48:                             #   in Loop: Header=BB498_1 Depth=1
	movl	-28(%rbp), %eax
	cmpl	thresh, %eax
	jge	.LBB498_1
# %bb.49:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end498:
	.size	qst, .Lfunc_end498-qst
	.cfi_endproc
                                        # -- End function
	.globl	DSet                    # -- Begin function DSet
	.p2align	4, 0x90
	.type	DSet,@function
DSet:                                   # @DSet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB499_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB499_4
# %bb.2:                                #   in Loop: Header=BB499_1 Depth=1
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	%xmm0, (%rax,%rcx,8)
# %bb.3:                                #   in Loop: Header=BB499_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB499_1
.LBB499_4:
	popq	%rbp
	retq
.Lfunc_end499:
	.size	DSet, .Lfunc_end499-DSet
	.cfi_endproc
                                        # -- End function
	.globl	FSet                    # -- Begin function FSet
	.p2align	4, 0x90
	.type	FSet,@function
FSet:                                   # @FSet
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB500_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB500_4
# %bb.2:                                #   in Loop: Header=BB500_1 Depth=1
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB500_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB500_1
.LBB500_4:
	popq	%rbp
	retq
.Lfunc_end500:
	.size	FSet, .Lfunc_end500-FSet
	.cfi_endproc
                                        # -- End function
	.globl	DScale                  # -- Begin function DScale
	.p2align	4, 0x90
	.type	DScale,@function
DScale:                                 # @DScale
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB501_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB501_4
# %bb.2:                                #   in Loop: Header=BB501_1 Depth=1
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulsd	(%rax,%rcx,8), %xmm0
	movsd	%xmm0, (%rax,%rcx,8)
# %bb.3:                                #   in Loop: Header=BB501_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB501_1
.LBB501_4:
	popq	%rbp
	retq
.Lfunc_end501:
	.size	DScale, .Lfunc_end501-DScale
	.cfi_endproc
                                        # -- End function
	.globl	FScale                  # -- Begin function FScale
	.p2align	4, 0x90
	.type	FScale,@function
FScale:                                 # @FScale
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB502_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB502_4
# %bb.2:                                #   in Loop: Header=BB502_1 Depth=1
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB502_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB502_1
.LBB502_4:
	popq	%rbp
	retq
.Lfunc_end502:
	.size	FScale, .Lfunc_end502-FScale
	.cfi_endproc
                                        # -- End function
	.globl	DSum                    # -- Begin function DSum
	.p2align	4, 0x90
	.type	DSum,@function
DSum:                                   # @DSum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB503_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB503_4
# %bb.2:                                #   in Loop: Header=BB503_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	addsd	-16(%rbp), %xmm0
	movsd	%xmm0, -16(%rbp)
# %bb.3:                                #   in Loop: Header=BB503_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB503_1
.LBB503_4:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	popq	%rbp
	retq
.Lfunc_end503:
	.size	DSum, .Lfunc_end503-DSum
	.cfi_endproc
                                        # -- End function
	.globl	FSum                    # -- Begin function FSum
	.p2align	4, 0x90
	.type	FSum,@function
FSum:                                   # @FSum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB504_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB504_4
# %bb.2:                                #   in Loop: Header=BB504_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB504_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB504_1
.LBB504_4:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	popq	%rbp
	retq
.Lfunc_end504:
	.size	FSum, .Lfunc_end504-FSum
	.cfi_endproc
                                        # -- End function
	.globl	DAdd                    # -- Begin function DAdd
	.p2align	4, 0x90
	.type	DAdd,@function
DAdd:                                   # @DAdd
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB505_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB505_4
# %bb.2:                                #   in Loop: Header=BB505_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addsd	(%rax,%rcx,8), %xmm0
	movsd	%xmm0, (%rax,%rcx,8)
# %bb.3:                                #   in Loop: Header=BB505_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB505_1
.LBB505_4:
	popq	%rbp
	retq
.Lfunc_end505:
	.size	DAdd, .Lfunc_end505-DAdd
	.cfi_endproc
                                        # -- End function
	.globl	FAdd                    # -- Begin function FAdd
	.p2align	4, 0x90
	.type	FAdd,@function
FAdd:                                   # @FAdd
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB506_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB506_4
# %bb.2:                                #   in Loop: Header=BB506_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB506_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB506_1
.LBB506_4:
	popq	%rbp
	retq
.Lfunc_end506:
	.size	FAdd, .Lfunc_end506-FAdd
	.cfi_endproc
                                        # -- End function
	.globl	DCopy                   # -- Begin function DCopy
	.p2align	4, 0x90
	.type	DCopy,@function
DCopy:                                  # @DCopy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB507_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB507_4
# %bb.2:                                #   in Loop: Header=BB507_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	%xmm0, (%rax,%rcx,8)
# %bb.3:                                #   in Loop: Header=BB507_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB507_1
.LBB507_4:
	popq	%rbp
	retq
.Lfunc_end507:
	.size	DCopy, .Lfunc_end507-DCopy
	.cfi_endproc
                                        # -- End function
	.globl	FCopy                   # -- Begin function FCopy
	.p2align	4, 0x90
	.type	FCopy,@function
FCopy:                                  # @FCopy
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB508_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB508_4
# %bb.2:                                #   in Loop: Header=BB508_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB508_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB508_1
.LBB508_4:
	popq	%rbp
	retq
.Lfunc_end508:
	.size	FCopy, .Lfunc_end508-FCopy
	.cfi_endproc
                                        # -- End function
	.globl	DDot                    # -- Begin function DDot
	.p2align	4, 0x90
	.type	DDot,@function
DDot:                                   # @DDot
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB509_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB509_4
# %bb.2:                                #   in Loop: Header=BB509_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulsd	(%rax,%rcx,8), %xmm0
	addsd	-16(%rbp), %xmm0
	movsd	%xmm0, -16(%rbp)
# %bb.3:                                #   in Loop: Header=BB509_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB509_1
.LBB509_4:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	popq	%rbp
	retq
.Lfunc_end509:
	.size	DDot, .Lfunc_end509-DDot
	.cfi_endproc
                                        # -- End function
	.globl	FDot                    # -- Begin function FDot
	.p2align	4, 0x90
	.type	FDot,@function
FDot:                                   # @FDot
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movss	%xmm0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB510_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB510_4
# %bb.2:                                #   in Loop: Header=BB510_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	mulss	(%rax,%rcx,4), %xmm0
	addss	-8(%rbp), %xmm0
	movss	%xmm0, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB510_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB510_1
.LBB510_4:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	popq	%rbp
	retq
.Lfunc_end510:
	.size	FDot, .Lfunc_end510-FDot
	.cfi_endproc
                                        # -- End function
	.globl	DMax                    # -- Begin function DMax
	.p2align	4, 0x90
	.type	DMax,@function
DMax:                                   # @DMax
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movsd	(%rax), %xmm0           # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
	movl	$1, -4(%rbp)
.LBB511_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB511_6
# %bb.2:                                #   in Loop: Header=BB511_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	ucomisd	-16(%rbp), %xmm0
	jbe	.LBB511_4
# %bb.3:                                #   in Loop: Header=BB511_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
.LBB511_4:                              #   in Loop: Header=BB511_1 Depth=1
	jmp	.LBB511_5
.LBB511_5:                              #   in Loop: Header=BB511_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB511_1
.LBB511_6:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	popq	%rbp
	retq
.Lfunc_end511:
	.size	DMax, .Lfunc_end511-DMax
	.cfi_endproc
                                        # -- End function
	.globl	FMax                    # -- Begin function FMax
	.p2align	4, 0x90
	.type	FMax,@function
FMax:                                   # @FMax
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rax
	movss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB512_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB512_6
# %bb.2:                                #   in Loop: Header=BB512_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	ucomiss	-8(%rbp), %xmm0
	jbe	.LBB512_4
# %bb.3:                                #   in Loop: Header=BB512_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
.LBB512_4:                              #   in Loop: Header=BB512_1 Depth=1
	jmp	.LBB512_5
.LBB512_5:                              #   in Loop: Header=BB512_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB512_1
.LBB512_6:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	popq	%rbp
	retq
.Lfunc_end512:
	.size	FMax, .Lfunc_end512-FMax
	.cfi_endproc
                                        # -- End function
	.globl	DMin                    # -- Begin function DMin
	.p2align	4, 0x90
	.type	DMin,@function
DMin:                                   # @DMin
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movsd	(%rax), %xmm0           # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
	movl	$1, -4(%rbp)
.LBB513_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB513_6
# %bb.2:                                #   in Loop: Header=BB513_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB513_4
# %bb.3:                                #   in Loop: Header=BB513_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
.LBB513_4:                              #   in Loop: Header=BB513_1 Depth=1
	jmp	.LBB513_5
.LBB513_5:                              #   in Loop: Header=BB513_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB513_1
.LBB513_6:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	popq	%rbp
	retq
.Lfunc_end513:
	.size	DMin, .Lfunc_end513-DMin
	.cfi_endproc
                                        # -- End function
	.globl	FMin                    # -- Begin function FMin
	.p2align	4, 0x90
	.type	FMin,@function
FMin:                                   # @FMin
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rax
	movss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB514_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB514_6
# %bb.2:                                #   in Loop: Header=BB514_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-8(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB514_4
# %bb.3:                                #   in Loop: Header=BB514_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -8(%rbp)
.LBB514_4:                              #   in Loop: Header=BB514_1 Depth=1
	jmp	.LBB514_5
.LBB514_5:                              #   in Loop: Header=BB514_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB514_1
.LBB514_6:
	movss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	popq	%rbp
	retq
.Lfunc_end514:
	.size	FMin, .Lfunc_end514-FMin
	.cfi_endproc
                                        # -- End function
	.globl	DArgMax                 # -- Begin function DArgMax
	.p2align	4, 0x90
	.type	DArgMax,@function
DArgMax:                                # @DArgMax
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB515_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB515_6
# %bb.2:                                #   in Loop: Header=BB515_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	ucomisd	(%rax,%rcx,8), %xmm0
	jbe	.LBB515_4
# %bb.3:                                #   in Loop: Header=BB515_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB515_4:                              #   in Loop: Header=BB515_1 Depth=1
	jmp	.LBB515_5
.LBB515_5:                              #   in Loop: Header=BB515_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB515_1
.LBB515_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end515:
	.size	DArgMax, .Lfunc_end515-DArgMax
	.cfi_endproc
                                        # -- End function
	.globl	FArgMax                 # -- Begin function FArgMax
	.p2align	4, 0x90
	.type	FArgMax,@function
FArgMax:                                # @FArgMax
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB516_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB516_6
# %bb.2:                                #   in Loop: Header=BB516_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	ucomiss	(%rax,%rcx,4), %xmm0
	jbe	.LBB516_4
# %bb.3:                                #   in Loop: Header=BB516_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB516_4:                              #   in Loop: Header=BB516_1 Depth=1
	jmp	.LBB516_5
.LBB516_5:                              #   in Loop: Header=BB516_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB516_1
.LBB516_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end516:
	.size	FArgMax, .Lfunc_end516-FArgMax
	.cfi_endproc
                                        # -- End function
	.globl	DArgMin                 # -- Begin function DArgMin
	.p2align	4, 0x90
	.type	DArgMin,@function
DArgMin:                                # @DArgMin
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB517_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB517_6
# %bb.2:                                #   in Loop: Header=BB517_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm1    # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB517_4
# %bb.3:                                #   in Loop: Header=BB517_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB517_4:                              #   in Loop: Header=BB517_1 Depth=1
	jmp	.LBB517_5
.LBB517_5:                              #   in Loop: Header=BB517_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB517_1
.LBB517_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end517:
	.size	DArgMin, .Lfunc_end517-DArgMin
	.cfi_endproc
                                        # -- End function
	.globl	FArgMin                 # -- Begin function FArgMin
	.p2align	4, 0x90
	.type	FArgMin,@function
FArgMin:                                # @FArgMin
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$1, -4(%rbp)
.LBB518_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB518_6
# %bb.2:                                #   in Loop: Header=BB518_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB518_4
# %bb.3:                                #   in Loop: Header=BB518_1 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB518_4:                              #   in Loop: Header=BB518_1 Depth=1
	jmp	.LBB518_5
.LBB518_5:                              #   in Loop: Header=BB518_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB518_1
.LBB518_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end518:
	.size	FArgMin, .Lfunc_end518-FArgMin
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function DNorm
.LCPI519_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	DNorm
	.p2align	4, 0x90
	.type	DNorm,@function
DNorm:                                  # @DNorm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	DSum
	xorps	%xmm1, %xmm1
	movsd	%xmm0, -24(%rbp)
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	jne	.LBB519_1
	jp	.LBB519_1
	jmp	.LBB519_6
.LBB519_1:
	movl	$0, -4(%rbp)
.LBB519_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB519_5
# %bb.3:                                #   in Loop: Header=BB519_2 Depth=1
	movsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm1    # xmm1 = mem[0],zero
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rax,%rcx,8)
# %bb.4:                                #   in Loop: Header=BB519_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB519_2
.LBB519_5:
	jmp	.LBB519_11
.LBB519_6:
	movl	$0, -4(%rbp)
.LBB519_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB519_10
# %bb.8:                                #   in Loop: Header=BB519_7 Depth=1
	movsd	.LCPI519_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	%xmm0, (%rax,%rcx,8)
# %bb.9:                                #   in Loop: Header=BB519_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB519_7
.LBB519_10:
	jmp	.LBB519_11
.LBB519_11:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end519:
	.size	DNorm, .Lfunc_end519-DNorm
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FNorm
.LCPI520_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	FNorm
	.p2align	4, 0x90
	.type	FNorm,@function
FNorm:                                  # @FNorm
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movq	-24(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	FSum
	xorps	%xmm1, %xmm1
	movss	%xmm0, -12(%rbp)
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	ucomisd	%xmm1, %xmm0
	jne	.LBB520_1
	jp	.LBB520_1
	jmp	.LBB520_6
.LBB520_1:
	movl	$0, -4(%rbp)
.LBB520_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB520_5
# %bb.3:                                #   in Loop: Header=BB520_2 Depth=1
	movss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, (%rax,%rcx,4)
# %bb.4:                                #   in Loop: Header=BB520_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB520_2
.LBB520_5:
	jmp	.LBB520_11
.LBB520_6:
	movl	$0, -4(%rbp)
.LBB520_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB520_10
# %bb.8:                                #   in Loop: Header=BB520_7 Depth=1
	movsd	.LCPI520_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.9:                                #   in Loop: Header=BB520_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB520_7
.LBB520_10:
	jmp	.LBB520_11
.LBB520_11:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end520:
	.size	FNorm, .Lfunc_end520-FNorm
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function DLog
.LCPI521_0:
	.quad	-4503599627370497       # double -1.7976931348623157E+308
	.text
	.globl	DLog
	.p2align	4, 0x90
	.type	DLog,@function
DLog:                                   # @DLog
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB521_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB521_7
# %bb.2:                                #   in Loop: Header=BB521_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm1    # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB521_4
# %bb.3:                                #   in Loop: Header=BB521_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	callq	log
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	%xmm0, (%rax,%rcx,8)
	jmp	.LBB521_5
.LBB521_4:                              #   in Loop: Header=BB521_1 Depth=1
	movsd	.LCPI521_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	%xmm0, (%rax,%rcx,8)
.LBB521_5:                              #   in Loop: Header=BB521_1 Depth=1
	jmp	.LBB521_6
.LBB521_6:                              #   in Loop: Header=BB521_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB521_1
.LBB521_7:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end521:
	.size	DLog, .Lfunc_end521-DLog
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function FLog
.LCPI522_0:
	.long	4286578687              # float -3.40282347E+38
	.text
	.globl	FLog
	.p2align	4, 0x90
	.type	FLog,@function
FLog:                                   # @FLog
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB522_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB522_7
# %bb.2:                                #   in Loop: Header=BB522_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB522_4
# %bb.3:                                #   in Loop: Header=BB522_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB522_5
.LBB522_4:                              #   in Loop: Header=BB522_1 Depth=1
	movss	.LCPI522_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB522_5:                              #   in Loop: Header=BB522_1 Depth=1
	jmp	.LBB522_6
.LBB522_6:                              #   in Loop: Header=BB522_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB522_1
.LBB522_7:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end522:
	.size	FLog, .Lfunc_end522-FLog
	.cfi_endproc
                                        # -- End function
	.globl	DExp                    # -- Begin function DExp
	.p2align	4, 0x90
	.type	DExp,@function
DExp:                                   # @DExp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB523_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB523_4
# %bb.2:                                #   in Loop: Header=BB523_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	callq	exp
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	%xmm0, (%rax,%rcx,8)
# %bb.3:                                #   in Loop: Header=BB523_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB523_1
.LBB523_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end523:
	.size	DExp, .Lfunc_end523-DExp
	.cfi_endproc
                                        # -- End function
	.globl	FExp                    # -- Begin function FExp
	.p2align	4, 0x90
	.type	FExp,@function
FExp:                                   # @FExp
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB524_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB524_4
# %bb.2:                                #   in Loop: Header=BB524_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	cvtsd2ss	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB524_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB524_1
.LBB524_4:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end524:
	.size	FExp, .Lfunc_end524-FExp
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function DLogSum
.LCPI525_0:
	.quad	4632233691727265792     # double 50
	.text
	.globl	DLogSum
	.p2align	4, 0x90
	.type	DLogSum,@function
DLogSum:                                # @DLogSum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	DMax
	xorps	%xmm1, %xmm1
	movsd	%xmm0, -32(%rbp)
	movsd	%xmm1, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB525_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB525_6
# %bb.2:                                #   in Loop: Header=BB525_1 Depth=1
	movsd	.LCPI525_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm1    # xmm1 = mem[0],zero
	movsd	-32(%rbp), %xmm2        # xmm2 = mem[0],zero
	subsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB525_4
# %bb.3:                                #   in Loop: Header=BB525_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	subsd	-32(%rbp), %xmm0
	callq	exp
	addsd	-16(%rbp), %xmm0
	movsd	%xmm0, -16(%rbp)
.LBB525_4:                              #   in Loop: Header=BB525_1 Depth=1
	jmp	.LBB525_5
.LBB525_5:                              #   in Loop: Header=BB525_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB525_1
.LBB525_6:
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	callq	log
	addsd	-32(%rbp), %xmm0
	movsd	%xmm0, -16(%rbp)
	movsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end525:
	.size	DLogSum, .Lfunc_end525-DLogSum
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FLogSum
.LCPI526_0:
	.quad	4632233691727265792     # double 50
	.text
	.globl	FLogSum
	.p2align	4, 0x90
	.type	FLogSum,@function
FLogSum:                                # @FLogSum
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	FMax
	xorps	%xmm1, %xmm1
	movss	%xmm0, -12(%rbp)
	movss	%xmm1, -4(%rbp)
	movl	$0, -8(%rbp)
.LBB526_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB526_6
# %bb.2:                                #   in Loop: Header=BB526_1 Depth=1
	movsd	.LCPI526_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	movss	-12(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB526_4
# %bb.3:                                #   in Loop: Header=BB526_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	subss	-12(%rbp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	callq	exp
	movss	-4(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, -4(%rbp)
.LBB526_4:                              #   in Loop: Header=BB526_1 Depth=1
	jmp	.LBB526_5
.LBB526_5:                              #   in Loop: Header=BB526_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB526_1
.LBB526_6:
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	callq	log
	movss	-12(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end526:
	.size	FLogSum, .Lfunc_end526-FLogSum
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function GSCWeights
.LCPI527_0:
	.long	1065353216              # float 1
	.text
	.globl	GSCWeights
	.p2align	4, 0x90
	.type	GSCWeights,@function
GSCWeights:                             # @GSCWeights
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -64(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -56(%rbp)
	cmpl	$1, -4(%rbp)
	jne	.LBB527_2
# %bb.1:
	movss	.LCPI527_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movss	%xmm0, (%rax)
	jmp	.LBB527_13
.LBB527_2:
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	MakeDiffMx
	leaq	-40(%rbp), %rcx
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$2, %edx
	callq	Cluster
	cmpl	$0, %eax
	jne	.LBB527_4
# %bb.3:
	movabsq	$.L.str.1165, %rdi
	movb	$0, %al
	callq	Die
.LBB527_4:
	movabsq	$.L.str.1.1166, %rdi
	movl	-4(%rbp), %eax
	shll	$1, %eax
	subl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$67, %esi
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -32(%rbp)
	movl	-4(%rbp), %eax
	shll	$1, %eax
	subl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$68, %esi
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	shll	$1, %eax
	subl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	movl	$69, %esi
	callq	sre_malloc
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB527_5:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB527_8
# %bb.6:                                #   in Loop: Header=BB527_5 Depth=1
	xorps	%xmm0, %xmm0
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.7:                                #   in Loop: Header=BB527_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB527_5
.LBB527_8:
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %r8d
	callq	upweight
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %r8
	movl	-4(%rbp), %r9d
	callq	downweight
	movl	$0, -8(%rbp)
.LBB527_9:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB527_12
# %bb.10:                               #   in Loop: Header=BB527_9 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.11:                               #   in Loop: Header=BB527_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB527_9
.LBB527_12:
	movq	-48(%rbp), %rdi
	callq	FMX2Free
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	FreePhylo
	movq	-32(%rbp), %rdi
	callq	free
	movq	-24(%rbp), %rdi
	callq	free
	movq	-16(%rbp), %rdi
	callq	free
.LBB527_13:
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end527:
	.size	GSCWeights, .Lfunc_end527-GSCWeights
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function upweight
	.type	upweight,@function
upweight:                               # @upweight
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movl	%r8d, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.LBB528_2
# %bb.1:
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %r8d
	callq	upweight
.LBB528_2:
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.LBB528_4
# %bb.3:
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %r8d
	callq	upweight
.LBB528_4:
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	addss	16(%rax), %xmm0
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm0
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	addss	20(%rax), %xmm0
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end528:
	.size	upweight, .Lfunc_end528-upweight
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function downweight
.LCPI529_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	downweight,@function
downweight:                             # @downweight
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorps	%xmm0, %xmm0
	movq	%rdi, -56(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -24(%rbp)
	movl	%r9d, -4(%rbp)
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm1
	cvtss2sd	%xmm1, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB529_2
# %bb.1:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm2    # xmm2 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm2
	divss	%xmm2, %xmm1
	mulss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm2    # xmm2 = mem[0],zero,zero,zero
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	addss	(%rax,%rcx,4), %xmm2
	divss	%xmm2, %xmm1
	mulss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	jmp	.LBB529_9
.LBB529_2:
	movl	-16(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB529_4
# %bb.3:
	movq	-56(%rbp), %rax
	movl	-16(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %eax
	cvtsi2sdl	%eax, %xmm0
	jmp	.LBB529_5
.LBB529_4:
	movsd	.LCPI529_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB529_5
.LBB529_5:
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -32(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB529_7
# %bb.6:
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movl	32(%rax), %eax
	cvtsi2sdl	%eax, %xmm0
	jmp	.LBB529_8
.LBB529_7:
	movsd	.LCPI529_0(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB529_8
.LBB529_8:
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	mulss	-32(%rbp), %xmm0
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	addss	-28(%rbp), %xmm1
	divss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	mulss	-28(%rbp), %xmm0
	movss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	addss	-28(%rbp), %xmm1
	divss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
.LBB529_9:
	movl	-16(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB529_11
# %bb.10:
	movq	-56(%rbp), %rdi
	movl	-8(%rbp), %esi
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movq	-24(%rbp), %r8
	movl	-16(%rbp), %r9d
	callq	downweight
.LBB529_11:
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB529_13
# %bb.12:
	movq	-56(%rbp), %rdi
	movl	-8(%rbp), %esi
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movq	-24(%rbp), %r8
	movl	-12(%rbp), %r9d
	callq	downweight
.LBB529_13:
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end529:
	.size	downweight, .Lfunc_end529-downweight
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function VoronoiWeights
.LCPI530_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI530_1:
	.quad	4607182418800017408     # double 1
.LCPI530_2:
	.quad	4611686018427387904     # double 2
	.text
	.globl	VoronoiWeights
	.p2align	4, 0x90
	.type	VoronoiWeights,@function
VoronoiWeights:                         # @VoronoiWeights
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movq	%rcx, -88(%rbp)
	cmpl	$1, -24(%rbp)
	jne	.LBB530_2
# %bb.1:
	movss	.LCPI530_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-88(%rbp), %rax
	movss	%xmm0, (%rax)
	jmp	.LBB530_79
.LBB530_2:
	leaq	-120(%rbp), %rdx
	movl	$50, -92(%rbp)
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	simple_diffmx
	cmpl	$0, %eax
	jne	.LBB530_4
# %bb.3:
	movabsq	$.L.str.2.1167, %rdi
	movb	$0, %al
	callq	Die
.LBB530_4:
	movabsq	$.L.str.1.1166, %rdi
	movslq	-24(%rbp), %rdx
	shlq	$2, %rdx
	movl	$184, %esi
	callq	sre_malloc
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB530_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB530_7 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB530_16
# %bb.6:                                #   in Loop: Header=BB530_5 Depth=1
	movss	.LCPI530_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
	movl	$0, -20(%rbp)
.LBB530_7:                              #   Parent Loop BB530_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB530_14
# %bb.8:                                #   in Loop: Header=BB530_7 Depth=2
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB530_10
# %bb.9:                                #   in Loop: Header=BB530_7 Depth=2
	jmp	.LBB530_13
.LBB530_10:                             #   in Loop: Header=BB530_7 Depth=2
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB530_12
# %bb.11:                               #   in Loop: Header=BB530_7 Depth=2
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
.LBB530_12:                             #   in Loop: Header=BB530_7 Depth=2
	jmp	.LBB530_13
.LBB530_13:                             #   in Loop: Header=BB530_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB530_7
.LBB530_14:                             #   in Loop: Header=BB530_5 Depth=1
	movsd	.LCPI530_2(%rip), %xmm0 # xmm0 = mem[0],zero
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.15:                               #   in Loop: Header=BB530_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB530_5
.LBB530_16:
	movq	-120(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	Free2DArray
	movabsq	$.L.str.1.1166, %rdi
	movslq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movl	$198, %esi
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -80(%rbp)
	movslq	-32(%rbp), %rdx
	shlq	$2, %rdx
	movl	$199, %esi
	callq	sre_malloc
	movq	%rax, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB530_17:                             # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB530_20
# %bb.18:                               #   in Loop: Header=BB530_17 Depth=1
	movabsq	$.L.str.1.1166, %rdi
	movl	$201, %esi
	movl	$27, %edx
	callq	sre_malloc
	movq	-80(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.19:                               #   in Loop: Header=BB530_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB530_17
.LBB530_20:
	movl	$0, -16(%rbp)
.LBB530_21:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB530_23 Depth 2
                                        #     Child Loop BB530_40 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB530_49
# %bb.22:                               #   in Loop: Header=BB530_21 Depth=1
	leaq	-240(%rbp), %rdi
	xorl	%esi, %esi
	movl	$108, %edx
	callq	memset
	movl	$0, -12(%rbp)
.LBB530_23:                             #   Parent Loop BB530_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB530_39
# %bb.24:                               #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB530_36
# %bb.25:                               #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$46, %eax
	je	.LBB530_36
# %bb.26:                               #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$95, %eax
	je	.LBB530_36
# %bb.27:                               #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	je	.LBB530_36
# %bb.28:                               #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$126, %eax
	je	.LBB530_36
# %bb.29:                               #   in Loop: Header=BB530_23 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB530_31
# %bb.30:                               #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$65, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB530_32
.LBB530_31:                             #   in Loop: Header=BB530_23 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	subl	$97, %eax
	movl	%eax, -56(%rbp)
.LBB530_32:                             #   in Loop: Header=BB530_23 Depth=2
	cmpl	$0, -56(%rbp)
	jl	.LBB530_35
# %bb.33:                               #   in Loop: Header=BB530_23 Depth=2
	cmpl	$26, -56(%rbp)
	jge	.LBB530_35
# %bb.34:                               #   in Loop: Header=BB530_23 Depth=2
	movslq	-56(%rbp), %rax
	movl	$1, -240(%rbp,%rax,4)
.LBB530_35:                             #   in Loop: Header=BB530_23 Depth=2
	jmp	.LBB530_37
.LBB530_36:                             #   in Loop: Header=BB530_23 Depth=2
	movl	$1, -136(%rbp)
.LBB530_37:                             #   in Loop: Header=BB530_23 Depth=2
	jmp	.LBB530_38
.LBB530_38:                             #   in Loop: Header=BB530_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB530_23
.LBB530_39:                             #   in Loop: Header=BB530_21 Depth=1
	movq	-64(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -20(%rbp)
.LBB530_40:                             #   Parent Loop BB530_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -20(%rbp)
	jge	.LBB530_45
# %bb.41:                               #   in Loop: Header=BB530_40 Depth=2
	movslq	-20(%rbp), %rax
	cmpl	$0, -240(%rbp,%rax,4)
	je	.LBB530_43
# %bb.42:                               #   in Loop: Header=BB530_40 Depth=2
	movl	-20(%rbp), %eax
	addl	$65, %eax
	movq	-80(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-64(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB530_43:                             #   in Loop: Header=BB530_40 Depth=2
	jmp	.LBB530_44
.LBB530_44:                             #   in Loop: Header=BB530_40 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB530_40
.LBB530_45:                             #   in Loop: Header=BB530_21 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB530_47
# %bb.46:                               #   in Loop: Header=BB530_21 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movb	$32, (%rax,%rcx)
	movq	-64(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB530_47:                             #   in Loop: Header=BB530_21 Depth=1
	jmp	.LBB530_48
.LBB530_48:                             #   in Loop: Header=BB530_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB530_21
.LBB530_49:
	movabsq	$.L.str.1.1166, %rdi
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$0, %rdx
	movl	$268, %esi              # imm = 0x10C
	callq	sre_malloc
	movq	%rax, -104(%rbp)
	movl	$42, -52(%rbp)
	movq	-88(%rbp), %rdi
	movl	-24(%rbp), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -68(%rbp)
.LBB530_50:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB530_52 Depth 2
                                        #     Child Loop BB530_59 Depth 2
	movl	-68(%rbp), %eax
	movl	-92(%rbp), %ecx
	imull	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB530_74
# %bb.51:                               #   in Loop: Header=BB530_50 Depth=1
	movl	$0, -16(%rbp)
.LBB530_52:                             #   Parent Loop BB530_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB530_58
# %bb.53:                               #   in Loop: Header=BB530_52 Depth=2
	movq	-64(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB530_55
# %bb.54:                               #   in Loop: Header=BB530_52 Depth=2
	movl	$32, %eax
	jmp	.LBB530_56
.LBB530_55:                             #   in Loop: Header=BB530_52 Depth=2
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rbx
	callq	sre_random
	movq	-64(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	cltq
	movsbl	(%rbx,%rax), %eax
.LBB530_56:                             #   in Loop: Header=BB530_52 Depth=2
	movq	-104(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.57:                               #   in Loop: Header=BB530_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB530_52
.LBB530_58:                             #   in Loop: Header=BB530_50 Depth=1
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	callq	sre_random
	movss	.LCPI530_0(%rip), %xmm1 # xmm1 = mem[0],zero,zero,zero
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -72(%rbp)
	movss	%xmm1, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB530_59:                             #   Parent Loop BB530_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB530_71
# %bb.60:                               #   in Loop: Header=BB530_59 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-104(%rbp), %rsi
	callq	simple_distance
	movss	%xmm0, -36(%rbp)
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB530_62
# %bb.61:                               #   in Loop: Header=BB530_50 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB530_72
.LBB530_62:                             #   in Loop: Header=BB530_59 Depth=2
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB530_64
# %bb.63:                               #   in Loop: Header=BB530_59 Depth=2
	callq	sre_random
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -72(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
	jmp	.LBB530_69
.LBB530_64:                             #   in Loop: Header=BB530_59 Depth=2
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	ucomiss	-28(%rbp), %xmm0
	jne	.LBB530_68
	jp	.LBB530_68
# %bb.65:                               #   in Loop: Header=BB530_59 Depth=2
	callq	sre_random
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -96(%rbp)
	movss	-96(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	ucomiss	-72(%rbp), %xmm0
	jbe	.LBB530_67
# %bb.66:                               #   in Loop: Header=BB530_59 Depth=2
	movss	-96(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -72(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -28(%rbp)
.LBB530_67:                             #   in Loop: Header=BB530_59 Depth=2
	jmp	.LBB530_68
.LBB530_68:                             #   in Loop: Header=BB530_59 Depth=2
	jmp	.LBB530_69
.LBB530_69:                             #   in Loop: Header=BB530_59 Depth=2
	jmp	.LBB530_70
.LBB530_70:                             #   in Loop: Header=BB530_59 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB530_59
.LBB530_71:                             # %.loopexit
                                        #   in Loop: Header=BB530_50 Depth=1
	jmp	.LBB530_72
.LBB530_72:                             #   in Loop: Header=BB530_50 Depth=1
	movsd	.LCPI530_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-88(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, (%rax,%rcx,4)
# %bb.73:                               #   in Loop: Header=BB530_50 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB530_50
.LBB530_74:
	movl	$0, -12(%rbp)
.LBB530_75:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB530_78
# %bb.76:                               #   in Loop: Header=BB530_75 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm0    # xmm0 = mem[0],zero,zero,zero
	movl	-92(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.77:                               #   in Loop: Header=BB530_75 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB530_75
.LBB530_78:
	movq	-104(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-112(%rbp), %rdi
	callq	free
	movq	-80(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	Free2DArray
.LBB530_79:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end530:
	.size	VoronoiWeights, .Lfunc_end530-VoronoiWeights
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function simple_diffmx
	.type	simple_diffmx,@function
simple_diffmx:                          # @simple_diffmx
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -40(%rbp)
	movslq	-12(%rbp), %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	jne	.LBB531_2
# %bb.1:
	movabsq	$.L.str.5.1168, %rdi
	movb	$0, %al
	callq	Die
.LBB531_2:
	movl	$0, -4(%rbp)
.LBB531_3:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB531_8
# %bb.4:                                #   in Loop: Header=BB531_3 Depth=1
	movslq	-12(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB531_6
# %bb.5:                                #   in Loop: Header=BB531_3 Depth=1
	movabsq	$.L.str.5.1168, %rdi
	movb	$0, %al
	callq	Die
.LBB531_6:                              #   in Loop: Header=BB531_3 Depth=1
	jmp	.LBB531_7
.LBB531_7:                              #   in Loop: Header=BB531_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB531_3
.LBB531_8:
	movl	$0, -4(%rbp)
.LBB531_9:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB531_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB531_16
# %bb.10:                               #   in Loop: Header=BB531_9 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB531_11:                             #   Parent Loop BB531_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB531_14
# %bb.12:                               #   in Loop: Header=BB531_11 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	simple_distance
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.13:                               #   in Loop: Header=BB531_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB531_11
.LBB531_14:                             #   in Loop: Header=BB531_9 Depth=1
	jmp	.LBB531_15
.LBB531_15:                             #   in Loop: Header=BB531_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB531_9
.LBB531_16:
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end531:
	.size	simple_diffmx, .Lfunc_end531-simple_diffmx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function simple_distance
	.type	simple_distance,@function
simple_distance:                        # @simple_distance
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB532_1:                              # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB532_17
# %bb.2:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB532_12
# %bb.3:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	je	.LBB532_12
# %bb.4:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB532_12
# %bb.5:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB532_12
# %bb.6:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	je	.LBB532_12
# %bb.7:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	je	.LBB532_12
# %bb.8:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$46, %eax
	je	.LBB532_12
# %bb.9:                                #   in Loop: Header=BB532_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$95, %eax
	je	.LBB532_12
# %bb.10:                               #   in Loop: Header=BB532_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	je	.LBB532_12
# %bb.11:                               #   in Loop: Header=BB532_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$126, %eax
	jne	.LBB532_13
.LBB532_12:                             #   in Loop: Header=BB532_1 Depth=1
	jmp	.LBB532_16
.LBB532_13:                             #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %ecx
	cmpl	%ecx, %eax
	je	.LBB532_15
# %bb.14:                               #   in Loop: Header=BB532_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB532_15:                             #   in Loop: Header=BB532_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB532_16:                             #   in Loop: Header=BB532_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB532_1
.LBB532_17:
	cmpl	$0, -12(%rbp)
	jle	.LBB532_19
# %bb.18:
	movl	-28(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movl	-12(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	jmp	.LBB532_20
.LBB532_19:
	xorps	%xmm0, %xmm0
	jmp	.LBB532_20
.LBB532_20:
	cvtsd2ss	%xmm0, %xmm0
	popq	%rbp
	retq
.Lfunc_end532:
	.size	simple_distance, .Lfunc_end532-simple_distance
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function BlosumWeights
.LCPI533_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI533_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	BlosumWeights
	.p2align	4, 0x90
	.type	BlosumWeights,@function
BlosumWeights:                          # @BlosumWeights
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	-32(%rbp), %rax
	leaq	-12(%rbp), %r8
	movq	%rdi, -56(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -40(%rbp)
	movss	%xmm0, -36(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-56(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-40(%rbp), %edx
	movss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	%rax, %rcx
	callq	SingleLinkCluster
	movss	.LCPI533_0(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	FSet
	movabsq	$.L.str.1.1166, %rdi
	movslq	-12(%rbp), %rdx
	shlq	$2, %rdx
	movl	$403, %esi              # imm = 0x193
	callq	sre_malloc
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB533_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB533_4
# %bb.2:                                #   in Loop: Header=BB533_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB533_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB533_1
.LBB533_4:
	movl	$0, -4(%rbp)
.LBB533_5:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB533_8
# %bb.6:                                #   in Loop: Header=BB533_5 Depth=1
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
# %bb.7:                                #   in Loop: Header=BB533_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB533_5
.LBB533_8:
	movl	$0, -4(%rbp)
.LBB533_9:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB533_12
# %bb.10:                               #   in Loop: Header=BB533_9 Depth=1
	movsd	.LCPI533_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movss	%xmm0, (%rax,%rcx,4)
# %bb.11:                               #   in Loop: Header=BB533_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB533_9
.LBB533_12:
	movq	-24(%rbp), %rdi
	callq	free
	movq	-32(%rbp), %rdi
	callq	free
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end533:
	.size	BlosumWeights, .Lfunc_end533-BlosumWeights
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SingleLinkCluster
.LCPI534_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	SingleLinkCluster
	.p2align	4, 0x90
	.type	SingleLinkCluster,@function
SingleLinkCluster:                      # @SingleLinkCluster
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movabsq	$.L.str.1.1166, %rax
	movq	%rdi, -64(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -84(%rbp)
	movss	%xmm0, -48(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -72(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$716, %esi              # imm = 0x2CC
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -32(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movl	$717, %esi              # imm = 0x2CD
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -40(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$2, %rdx
	movl	$718, %esi              # imm = 0x2CE
	callq	sre_malloc
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB534_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB534_4
# %bb.2:                                #   in Loop: Header=BB534_1 Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                #   in Loop: Header=BB534_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB534_1
.LBB534_4:
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -24(%rbp)
.LBB534_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB534_7 Depth 2
                                        #       Child Loop BB534_9 Depth 3
	cmpl	$0, -12(%rbp)
	jle	.LBB534_16
# %bb.6:                                #   in Loop: Header=BB534_5 Depth=1
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB534_7:                              #   Parent Loop BB534_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB534_9 Depth 3
	cmpl	$0, -8(%rbp)
	jle	.LBB534_15
# %bb.8:                                #   in Loop: Header=BB534_7 Depth=2
	movq	-40(%rbp), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB534_9:                              #   Parent Loop BB534_5 Depth=1
                                        #     Parent Loop BB534_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$0, -4(%rbp)
	jl	.LBB534_14
# %bb.10:                               #   in Loop: Header=BB534_9 Depth=3
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-64(%rbp), %rax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	simple_distance
	movsd	.LCPI534_0(%rip), %xmm1 # xmm1 = mem[0],zero
	cvtss2sd	%xmm0, %xmm0
	movss	-48(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	cvtss2sd	%xmm2, %xmm2
	subsd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	jb	.LBB534_12
# %bb.11:                               #   in Loop: Header=BB534_9 Depth=3
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB534_12:                             #   in Loop: Header=BB534_9 Depth=3
	jmp	.LBB534_13
.LBB534_13:                             #   in Loop: Header=BB534_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB534_9
.LBB534_14:                             #   in Loop: Header=BB534_7 Depth=2
	jmp	.LBB534_7
.LBB534_15:                             #   in Loop: Header=BB534_5 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB534_5
.LBB534_16:
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
	movq	-56(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end534:
	.size	SingleLinkCluster, .Lfunc_end534-SingleLinkCluster
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function PositionBasedWeights
.LCPI535_0:
	.quad	4607182418800017408     # double 1
	.text
	.globl	PositionBasedWeights
	.p2align	4, 0x90
	.type	PositionBasedWeights,@function
PositionBasedWeights:                   # @PositionBasedWeights
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -60(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rdi
	movl	-24(%rbp), %esi
	xorps	%xmm0, %xmm0
	callq	FSet
	movl	$0, -20(%rbp)
.LBB535_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB535_3 Depth 2
                                        #     Child Loop BB535_7 Depth 2
                                        #     Child Loop BB535_13 Depth 2
                                        #     Child Loop BB535_19 Depth 2
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB535_26
# %bb.2:                                #   in Loop: Header=BB535_1 Depth=1
	movl	$0, -16(%rbp)
.LBB535_3:                              #   Parent Loop BB535_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -16(%rbp)
	jge	.LBB535_6
# %bb.4:                                #   in Loop: Header=BB535_3 Depth=2
	movslq	-16(%rbp), %rax
	movl	$0, -176(%rbp,%rax,4)
# %bb.5:                                #   in Loop: Header=BB535_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB535_3
.LBB535_6:                              #   in Loop: Header=BB535_1 Depth=1
	movl	$0, -12(%rbp)
.LBB535_7:                              #   Parent Loop BB535_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB535_12
# %bb.8:                                #   in Loop: Header=BB535_7 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB535_10
# %bb.9:                                #   in Loop: Header=BB535_7 Depth=2
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	subl	$65, %eax
	cltq
	movl	-176(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -176(%rbp,%rax,4)
.LBB535_10:                             #   in Loop: Header=BB535_7 Depth=2
	jmp	.LBB535_11
.LBB535_11:                             #   in Loop: Header=BB535_7 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB535_7
.LBB535_12:                             #   in Loop: Header=BB535_1 Depth=1
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB535_13:                             #   Parent Loop BB535_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$26, -16(%rbp)
	jge	.LBB535_18
# %bb.14:                               #   in Loop: Header=BB535_13 Depth=2
	movslq	-16(%rbp), %rax
	cmpl	$0, -176(%rbp,%rax,4)
	jle	.LBB535_16
# %bb.15:                               #   in Loop: Header=BB535_13 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB535_16:                             #   in Loop: Header=BB535_13 Depth=2
	jmp	.LBB535_17
.LBB535_17:                             #   in Loop: Header=BB535_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB535_13
.LBB535_18:                             #   in Loop: Header=BB535_1 Depth=1
	movl	$0, -12(%rbp)
.LBB535_19:                             #   Parent Loop BB535_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB535_24
# %bb.20:                               #   in Loop: Header=BB535_19 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB535_22
# %bb.21:                               #   in Loop: Header=BB535_19 Depth=2
	movl	-28(%rbp), %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	toupper
	movsd	.LCPI535_0(%rip), %xmm0 # xmm0 = mem[0],zero
	subl	$65, %eax
	cltq
	imull	-176(%rbp,%rax,4), %ebx
	cvtsi2ssl	%ebx, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	cvtss2sd	%xmm1, %xmm1
	addsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	movss	%xmm0, (%rax,%rcx,4)
.LBB535_22:                             #   in Loop: Header=BB535_19 Depth=2
	jmp	.LBB535_23
.LBB535_23:                             #   in Loop: Header=BB535_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB535_19
.LBB535_24:                             #   in Loop: Header=BB535_1 Depth=1
	jmp	.LBB535_25
.LBB535_25:                             #   in Loop: Header=BB535_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB535_1
.LBB535_26:
	movl	$0, -12(%rbp)
.LBB535_27:                             # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB535_30
# %bb.28:                               #   in Loop: Header=BB535_27 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	DealignedLength
	cvtsi2ssl	%eax, %xmm0
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movss	(%rax,%rcx,4), %xmm1    # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, (%rax,%rcx,4)
# %bb.29:                               #   in Loop: Header=BB535_27 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB535_27
.LBB535_30:
	movl	-24(%rbp), %eax
	cvtsi2ssl	%eax, %xmm0
	movss	%xmm0, -52(%rbp)        # 4-byte Spill
	movq	-40(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	FSum
	movss	-52(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	divss	%xmm0, %xmm1
	movss	%xmm1, -56(%rbp)
	movq	-40(%rbp), %rdi
	movl	-24(%rbp), %esi
	movss	-56(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	callq	FScale
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end535:
	.size	PositionBasedWeights, .Lfunc_end535-PositionBasedWeights
	.cfi_endproc
                                        # -- End function
	.globl	FilterAlignment         # -- Begin function FilterAlignment
	.p2align	4, 0x90
	.type	FilterAlignment,@function
FilterAlignment:                        # @FilterAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.1.1166, %rax
	movq	%rdi, -16(%rbp)
	movss	%xmm0, -52(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-16(%rbp), %rcx
	movslq	28(%rcx), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$532, %esi              # imm = 0x214
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rdx
	shlq	$2, %rdx
	movl	$533, %esi              # imm = 0x215
	callq	sre_malloc
	movq	%rax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB536_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB536_4
# %bb.2:                                #   in Loop: Header=BB536_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB536_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB536_1
.LBB536_4:
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB536_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB536_7 Depth 2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB536_17
# %bb.6:                                #   in Loop: Header=BB536_5 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB536_7:                              #   Parent Loop BB536_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB536_12
# %bb.8:                                #   in Loop: Header=BB536_7 Depth=2
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	PairwiseIdentity
	movss	%xmm0, -28(%rbp)
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	ucomiss	-52(%rbp), %xmm0
	jbe	.LBB536_10
# %bb.9:                                #   in Loop: Header=BB536_5 Depth=1
	movabsq	$.L.str.3.1169, %rdi
	movl	$1, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	cvtss2sd	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rdx
	movb	$1, %al
	callq	printf
	jmp	.LBB536_13
.LBB536_10:                             #   in Loop: Header=BB536_7 Depth=2
	jmp	.LBB536_11
.LBB536_11:                             #   in Loop: Header=BB536_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB536_7
.LBB536_12:                             # %.loopexit
                                        #   in Loop: Header=BB536_5 Depth=1
	jmp	.LBB536_13
.LBB536_13:                             #   in Loop: Header=BB536_5 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB536_15
# %bb.14:                               #   in Loop: Header=BB536_5 Depth=1
	movl	-4(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB536_15:                             #   in Loop: Header=BB536_5 Depth=1
	jmp	.LBB536_16
.LBB536_16:                             #   in Loop: Header=BB536_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB536_5
.LBB536_17:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	MSASmallerAlignment
	movq	-48(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end536:
	.size	FilterAlignment, .Lfunc_end536-FilterAlignment
	.cfi_endproc
                                        # -- End function
	.globl	SampleAlignment         # -- Begin function SampleAlignment
	.p2align	4, 0x90
	.type	SampleAlignment,@function
SampleAlignment:                        # @SampleAlignment
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$.L.str.1.1166, %rax
	movq	%rdi, -16(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-16(%rbp), %rcx
	movslq	28(%rcx), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movl	$596, %esi              # imm = 0x254
	callq	sre_malloc
	movabsq	$.L.str.1.1166, %rdi
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rdx
	shlq	$2, %rdx
	movl	$597, %esi              # imm = 0x255
	callq	sre_malloc
	movq	%rax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB537_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB537_4
# %bb.2:                                #   in Loop: Header=BB537_1 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.3:                                #   in Loop: Header=BB537_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB537_1
.LBB537_4:
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	28(%rcx), %eax
	jl	.LBB537_6
# %bb.5:
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB537_6:
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB537_7:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB537_10
# %bb.8:                                #   in Loop: Header=BB537_7 Depth=1
	callq	sre_random
	movabsq	$.L.str.4.1170, %rdi
	movl	-28(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movq	(%rax,%rcx,8), %rdx
	movb	$0, %al
	callq	printf
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	$-1, %ecx
	movl	%ecx, -28(%rbp)
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.9:                                #   in Loop: Header=BB537_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB537_7
.LBB537_10:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	MSASmallerAlignment
	movq	-24(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end537:
	.size	SampleAlignment, .Lfunc_end537-SampleAlignment
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	" \t\n"
	.size	.L.str, 4

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"Blank name in A2M file %s (line %d)\n"
	.size	.L.str.1, 37

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"\n"
	.size	.L.str.2, 2

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.zero	1
	.size	.L.str.4, 1

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	">%s %s\n"
	.size	.L.str.3, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"%s\n"
	.size	.L.str.5, 4

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"aligneval.c"
	.size	.L.str.6, 12

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"alignio.c"
	.size	.L.str.7, 10

	.type	.L.str.1.8,@object      # @.str.1.8
.L.str.1.8:
	.asciz	" \t\n"
	.size	.L.str.1.8, 4

	.type	.L.str.2.9,@object      # @.str.2.9
.L.str.2.9:
	.asciz	"%*s%-10.10s %5d %s %5d\n"
	.size	.L.str.2.9, 24

	.type	.L.str.3.10,@object     # @.str.3.10
.L.str.3.10:
	.zero	1
	.size	.L.str.3.10, 1

	.type	.L.str.4.11,@object     # @.str.4.11
.L.str.4.11:
	.asciz	"%*s                 %s\n"
	.size	.L.str.4.11, 24

	.type	.L.str.5.12,@object     # @.str.5.12
.L.str.5.12:
	.asciz	"\n"
	.size	.L.str.5.12, 2

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"No such alphabet type"
	.size	.L.str.13, 22

	.type	.L.str.1.14,@object     # @.str.1.14
.L.str.1.14:
	.asciz	"Looks like nucleic acid sequence, hope that's right"
	.size	.L.str.1.14, 52

	.type	.L.str.2.15,@object     # @.str.2.15
.L.str.2.15:
	.asciz	"Looks like amino acid sequence, hope that's right"
	.size	.L.str.2.15, 50

	.type	.L.str.3.16,@object     # @.str.3.16
.L.str.3.16:
	.asciz	"Sorry, I can't tell if that's protein or DNA"
	.size	.L.str.3.16, 45

	.type	.L.str.4.17,@object     # @.str.4.17
.L.str.4.17:
	.asciz	"An alphabet type conflict occurred.\nYou probably mixed a DNA seq file with a protein model, or vice versa."
	.size	.L.str.4.17, 107

	.type	.L.str.5.18,@object     # @.str.5.18
.L.str.5.18:
	.asciz	"ACDEFGHIKLMNPQRSTVWYUBZX"
	.size	.L.str.5.18, 25

	.type	.L.str.6.19,@object     # @.str.6.19
.L.str.6.19:
	.asciz	"S"
	.size	.L.str.6.19, 2

	.type	.L.str.7.20,@object     # @.str.7.20
.L.str.7.20:
	.asciz	"ND"
	.size	.L.str.7.20, 3

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"QE"
	.size	.L.str.8, 3

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"ACDEFGHIKLMNPQRSTVWY"
	.size	.L.str.9, 21

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"ACGTUNRYMKSWHBVDX"
	.size	.L.str.10, 18

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"T"
	.size	.L.str.11, 2

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"ACGT"
	.size	.L.str.12, 5

	.type	.L.str.13.21,@object    # @.str.13.21
.L.str.13.21:
	.asciz	"AG"
	.size	.L.str.13.21, 3

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"CT"
	.size	.L.str.14, 3

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"AC"
	.size	.L.str.15, 3

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"GT"
	.size	.L.str.16, 3

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"CG"
	.size	.L.str.17, 3

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"AT"
	.size	.L.str.18, 3

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"ACT"
	.size	.L.str.19, 4

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"CGT"
	.size	.L.str.20, 4

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"ACG"
	.size	.L.str.21, 4

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"AGT"
	.size	.L.str.22, 4

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"No support for non-nucleic or protein alphabets"
	.size	.L.str.23, 48

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"alphabet.c"
	.size	.L.str.24, 11

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"CLUSTAL"
	.size	.L.str.25, 8

	.type	.L.str.1.26,@object     # @.str.1.26
.L.str.1.26:
	.asciz	"multiple sequence alignment"
	.size	.L.str.1.26, 28

	.type	.L.str.2.27,@object     # @.str.2.27
.L.str.2.27:
	.asciz	" \t\n"
	.size	.L.str.2.27, 4

	.type	.L.str.3.28,@object     # @.str.3.28
.L.str.3.28:
	.asciz	"\n"
	.size	.L.str.3.28, 2

	.type	.L.str.4.29,@object     # @.str.4.29
.L.str.4.29:
	.asciz	".*:"
	.size	.L.str.4.29, 4

	.type	.L.str.5.30,@object     # @.str.5.30
.L.str.5.30:
	.asciz	"Parse failed at line %d, file %s: possibly using spaces as gaps"
	.size	.L.str.5.30, 64

	.type	.L.str.6.31,@object     # @.str.6.31
.L.str.6.31:
	.asciz	"CLUSTAL W(1.5) multiple sequence alignment\n"
	.size	.L.str.6.31, 44

	.type	.L.str.7.32,@object     # @.str.7.32
.L.str.7.32:
	.asciz	"%*s %s\n"
	.size	.L.str.7.32, 8

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"cluster.c"
	.size	.L.str.33, 10

	.type	.L.str.1.34,@object     # @.str.1.34
.L.str.1.34:
	.asciz	"AllocPhylo() failed"
	.size	.L.str.1.34, 20

	.type	.L.str.2.35,@object     # @.str.2.35
.L.str.2.35:
	.asciz	","
	.size	.L.str.2.35, 2

	.type	.L.str.3.36,@object     # @.str.3.36
.L.str.3.36:
	.asciz	"%s:%.5f"
	.size	.L.str.3.36, 8

	.type	.L.str.4.37,@object     # @.str.4.37
.L.str.4.37:
	.asciz	",\n"
	.size	.L.str.4.37, 3

	.type	.L.str.5.38,@object     # @.str.5.38
.L.str.5.38:
	.asciz	"("
	.size	.L.str.5.38, 2

	.type	.L.str.6.39,@object     # @.str.6.39
.L.str.6.39:
	.asciz	");\n"
	.size	.L.str.6.39, 4

	.type	.L.str.7.40,@object     # @.str.7.40
.L.str.7.40:
	.asciz	"):%.5f"
	.size	.L.str.7.40, 7

	.type	.L.str.8.41,@object     # @.str.8.41
.L.str.8.41:
	.asciz	"Interior node %d (code %d)\n"
	.size	.L.str.8.41, 28

	.type	.L.str.9.42,@object     # @.str.9.42
.L.str.9.42:
	.asciz	"\tParent: %d (code %d)\n"
	.size	.L.str.9.42, 23

	.type	.L.str.11.43,@object    # @.str.11.43
.L.str.11.43:
	.asciz	"interior"
	.size	.L.str.11.43, 9

	.type	.L.str.10.44,@object    # @.str.10.44
.L.str.10.44:
	.asciz	"\tLeft:   %d (%s) %f\n"
	.size	.L.str.10.44, 21

	.type	.L.str.12.45,@object    # @.str.12.45
.L.str.12.45:
	.asciz	"\tRight:   %d (%s) %f\n"
	.size	.L.str.12.45, 22

	.type	.L.str.13.46,@object    # @.str.13.46
.L.str.13.46:
	.asciz	"\tHeight:  %f\n"
	.size	.L.str.13.46, 14

	.type	.L.str.14.47,@object    # @.str.14.47
.L.str.14.47:
	.asciz	"\tIncludes:%d seqs\n"
	.size	.L.str.14.47, 19

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"core_algorithms.c"
	.size	.L.str.48, 18

	.type	.L.str.1.49,@object     # @.str.1.49
.L.str.1.49:
	.asciz	"there's trouble with RAMLIMIT if you grow in both M and N."
	.size	.L.str.1.49, 59

	.type	.L.str.2.50,@object     # @.str.2.50
.L.str.2.50:
	.asciz	"traceback failed"
	.size	.L.str.2.50, 17

	.type	.L.str.3.51,@object     # @.str.3.51
.L.str.3.51:
	.asciz	"Traceback failed."
	.size	.L.str.3.51, 18

	.type	.L.str.4.52,@object     # @.str.4.52
.L.str.4.52:
	.asciz	"Bogus state %s"
	.size	.L.str.4.52, 15

	.type	.L.str.7.53,@object     # @.str.7.53
.L.str.7.53:
	.asciz	"you can't init get_wee_midpt with a %s\n"
	.size	.L.str.7.53, 40

	.type	.L.str.5.54,@object     # @.str.5.54
.L.str.5.54:
	.asciz	"HMMER: Bad state (%s) in ShadowTrace()\n"
	.size	.L.str.5.54, 40

	.type	.L.str.6.55,@object     # @.str.6.55
.L.str.6.55:
	.asciz	"TraceDecompose() screwup"
	.size	.L.str.6.55, 25

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"BLOSUM Clustered Scoring Matrix"
	.size	.L.str.56, 32

	.type	.L.str.1.57,@object     # @.str.1.57
.L.str.1.57:
	.asciz	"substitution matrix,"
	.size	.L.str.1.57, 21

	.type	.L.str.2.58,@object     # @.str.2.58
.L.str.2.58:
	.asciz	" \t\n"
	.size	.L.str.2.58, 4

	.type	.L.str.3.59,@object     # @.str.3.59
.L.str.3.59:
	.asciz	"calloc failed"
	.size	.L.str.3.59, 14

	.type	.L.str.4.60,@object     # @.str.4.60
.L.str.4.60:
	.asciz	"Failed to parse PAM matrix scale factor. Defaulting to ln(2)/2!"
	.size	.L.str.4.60, 64

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"S"
	.size	.L.str.63, 2

	.type	.L.str.1.64,@object     # @.str.1.64
.L.str.1.64:
	.asciz	"N"
	.size	.L.str.1.64, 2

	.type	.L.str.2.65,@object     # @.str.2.65
.L.str.2.65:
	.asciz	"B"
	.size	.L.str.2.65, 2

	.type	.L.str.3.66,@object     # @.str.3.66
.L.str.3.66:
	.asciz	"M"
	.size	.L.str.3.66, 2

	.type	.L.str.4.67,@object     # @.str.4.67
.L.str.4.67:
	.asciz	"D"
	.size	.L.str.4.67, 2

	.type	.L.str.5.68,@object     # @.str.5.68
.L.str.5.68:
	.asciz	"I"
	.size	.L.str.5.68, 2

	.type	.L.str.6.69,@object     # @.str.6.69
.L.str.6.69:
	.asciz	"E"
	.size	.L.str.6.69, 2

	.type	.L.str.7.70,@object     # @.str.7.70
.L.str.7.70:
	.asciz	"J"
	.size	.L.str.7.70, 2

	.type	.L.str.8.71,@object     # @.str.8.71
.L.str.8.71:
	.asciz	"C"
	.size	.L.str.8.71, 2

	.type	.L.str.9.72,@object     # @.str.9.72
.L.str.9.72:
	.asciz	"T"
	.size	.L.str.9.72, 2

	.type	.L.str.10.73,@object    # @.str.10.73
.L.str.10.73:
	.asciz	"BOGUS"
	.size	.L.str.10.73, 6

	.type	.L.str.11.74,@object    # @.str.11.74
.L.str.11.74:
	.asciz	"protein"
	.size	.L.str.11.74, 8

	.type	.L.str.12.75,@object    # @.str.12.75
.L.str.12.75:
	.asciz	"nucleic acid"
	.size	.L.str.12.75, 13

	.type	.L.str.13.76,@object    # @.str.13.76
.L.str.13.76:
	.asciz	"unknown"
	.size	.L.str.13.76, 8

	.type	.L.str.14.77,@object    # @.str.14.77
.L.str.14.77:
	.asciz	" [ trace is NULL ]\n"
	.size	.L.str.14.77, 20

	.type	.L.str.15.78,@object    # @.str.15.78
.L.str.15.78:
	.asciz	"st  node   rpos  - traceback len %d\n"
	.size	.L.str.15.78, 37

	.type	.L.str.16.79,@object    # @.str.16.79
.L.str.16.79:
	.asciz	"--  ---- ------\n"
	.size	.L.str.16.79, 17

	.type	.L.str.17.80,@object    # @.str.17.80
.L.str.17.80:
	.asciz	"%1s  %4d %6d\n"
	.size	.L.str.17.80, 14

	.type	.L.str.18.81,@object    # @.str.18.81
.L.str.18.81:
	.asciz	"oi, you can't print scores from that hmm, it's not ready."
	.size	.L.str.18.81, 58

	.type	.L.str.19.82,@object    # @.str.19.82
.L.str.19.82:
	.asciz	"st  node   rpos  transit emission - traceback len %d\n"
	.size	.L.str.19.82, 54

	.type	.L.str.20.83,@object    # @.str.20.83
.L.str.20.83:
	.asciz	"--  ---- ------  ------- --------\n"
	.size	.L.str.20.83, 35

	.type	.L.str.21.84,@object    # @.str.21.84
.L.str.21.84:
	.asciz	"%1s  %4d %6d  %7d"
	.size	.L.str.21.84, 18

	.type	.L.str.22.85,@object    # @.str.22.85
.L.str.22.85:
	.asciz	" %8d %c"
	.size	.L.str.22.85, 8

	.type	.L.str.23.86,@object    # @.str.23.86
.L.str.23.86:
	.asciz	" %8s %c"
	.size	.L.str.23.86, 8

	.type	.L.str.24.87,@object    # @.str.24.87
.L.str.24.87:
	.asciz	"-"
	.size	.L.str.24.87, 2

	.type	.L.str.25.88,@object    # @.str.25.88
.L.str.25.88:
	.asciz	"\n"
	.size	.L.str.25.88, 2

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"                 ------- --------\n"
	.size	.L.str.26, 35

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"           total: %6d\n\n"
	.size	.L.str.27, 24

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Dirichlet\n"
	.size	.L.str.28, 11

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"PAM\n"
	.size	.L.str.29, 5

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"No such strategy."
	.size	.L.str.30, 18

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"Amino\n"
	.size	.L.str.31, 7

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"Nucleic\n"
	.size	.L.str.32, 9

	.type	.L.str.33.89,@object    # @.str.33.89
.L.str.33.89:
	.asciz	"\n%d\n"
	.size	.L.str.33.89, 5

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"%.4f\n"
	.size	.L.str.34, 6

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	"%.4f "
	.size	.L.str.35, 6

	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"unknown state"
	.size	.L.str.90, 14

	.type	.L.str.13.91,@object    # @.str.13.91
.L.str.13.91:
	.asciz	"M%d"
	.size	.L.str.13.91, 4

	.type	.L.str.14.92,@object    # @.str.14.92
.L.str.14.92:
	.asciz	"D%d"
	.size	.L.str.14.92, 4

	.type	.L.str.15.93,@object    # @.str.15.93
.L.str.15.93:
	.asciz	"I%d"
	.size	.L.str.15.93, 4

	.type	.L.str.16.94,@object    # @.str.16.94
.L.str.16.94:
	.asciz	"S"
	.size	.L.str.16.94, 2

	.type	.L.str.17.95,@object    # @.str.17.95
.L.str.17.95:
	.asciz	"N"
	.size	.L.str.17.95, 2

	.type	.L.str.18.96,@object    # @.str.18.96
.L.str.18.96:
	.asciz	"B"
	.size	.L.str.18.96, 2

	.type	.L.str.19.97,@object    # @.str.19.97
.L.str.19.97:
	.asciz	"E"
	.size	.L.str.19.97, 2

	.type	.L.str.20.98,@object    # @.str.20.98
.L.str.20.98:
	.asciz	"C"
	.size	.L.str.20.98, 2

	.type	.L.str.21.99,@object    # @.str.21.99
.L.str.21.99:
	.asciz	"J"
	.size	.L.str.21.99, 2

	.type	.L.str.22.100,@object   # @.str.22.100
.L.str.22.100:
	.asciz	"T"
	.size	.L.str.22.100, 2

	.type	.L.str.23.101,@object   # @.str.23.101
.L.str.23.101:
	.asciz	"bad transition"
	.size	.L.str.23.101, 15

	.type	.L.str.24.102,@object   # @.str.24.102
.L.str.24.102:
	.asciz	"%d\t%s\t%d\t%s\t%-14.7g\t"
	.size	.L.str.24.102, 21

	.type	.L.str.25.103,@object   # @.str.25.103
.L.str.25.103:
	.asciz	"*"
	.size	.L.str.25.103, 2

	.type	.L.str.26.104,@object   # @.str.26.104
.L.str.26.104:
	.asciz	"\t"
	.size	.L.str.26.104, 2

	.type	.L.str.27.105,@object   # @.str.27.105
.L.str.27.105:
	.asciz	"\n"
	.size	.L.str.27.105, 2

	.type	.L.str.1.106,@object    # @.str.1.106
.L.str.1.106:
	.asciz	"         *      "
	.size	.L.str.1.106, 17

	.type	.L.str.2.107,@object    # @.str.2.107
.L.str.2.107:
	.asciz	"    %c      "
	.size	.L.str.2.107, 13

	.type	.L.str.3.108,@object    # @.str.3.108
.L.str.3.108:
	.asciz	"\nN    "
	.size	.L.str.3.108, 7

	.type	.L.str.4.109,@object    # @.str.4.109
.L.str.4.109:
	.asciz	"\nM%-3d "
	.size	.L.str.4.109, 8

	.type	.L.str.5.110,@object    # @.str.5.110
.L.str.5.110:
	.asciz	"\nI%-3d "
	.size	.L.str.5.110, 8

	.type	.L.str.6.111,@object    # @.str.6.111
.L.str.6.111:
	.asciz	"\nE    "
	.size	.L.str.6.111, 7

	.type	.L.str.7.112,@object    # @.str.7.112
.L.str.7.112:
	.asciz	"\nC    "
	.size	.L.str.7.112, 7

	.type	.L.str.8.113,@object    # @.str.8.113
.L.str.8.113:
	.asciz	"\nJ    "
	.size	.L.str.8.113, 7

	.type	.L.str.9.114,@object    # @.str.9.114
.L.str.9.114:
	.asciz	"\nB    "
	.size	.L.str.9.114, 7

	.type	.L.str.10.115,@object   # @.str.10.115
.L.str.10.115:
	.asciz	"\nD%-3d "
	.size	.L.str.10.115, 8

	.type	.L.str.11.116,@object   # @.str.11.116
.L.str.11.116:
	.asciz	"\n\n"
	.size	.L.str.11.116, 3

	.type	.L.str.12.117,@object   # @.str.12.117
.L.str.12.117:
	.asciz	"%- #11.3e"
	.size	.L.str.12.117, 10

	.type	.L.str.118,@object      # @.str.118
.L.str.118:
	.asciz	"emit.c"
	.size	.L.str.118, 7

	.type	.L.str.1.119,@object    # @.str.1.119
.L.str.1.119:
	.asciz	"never happens"
	.size	.L.str.1.119, 14

	.type	.L.str.2.120,@object    # @.str.2.120
.L.str.2.120:
	.asciz	"can't happen."
	.size	.L.str.2.120, 14

	.type	.L.str.121,@object      # @.str.121
.L.str.121:
	.asciz	"Profile %s will have more than 1000 positions. GCG won't read it; Compugen will."
	.size	.L.str.121, 81

	.type	.L.str.1.122,@object    # @.str.1.122
.L.str.1.122:
	.asciz	"!!AA_PROFILE 1.0\n"
	.size	.L.str.1.122, 18

	.type	.L.str.2.123,@object    # @.str.2.123
.L.str.2.123:
	.asciz	"!!NA_PROFILE 1.0\n"
	.size	.L.str.2.123, 18

	.type	.L.str.3.124,@object    # @.str.3.124
.L.str.3.124:
	.asciz	"No support for profiles with non-biological alphabets"
	.size	.L.str.3.124, 54

	.type	.L.str.4.125,@object    # @.str.4.125
.L.str.4.125:
	.asciz	"(Peptide) "
	.size	.L.str.4.125, 11

	.type	.L.str.5.126,@object    # @.str.5.126
.L.str.5.126:
	.asciz	"(Nucleotide) "
	.size	.L.str.5.126, 14

	.type	.L.str.8.127,@object    # @.str.8.127
.L.str.8.127:
	.zero	1
	.size	.L.str.8.127, 1

	.type	.L.str.6.128,@object    # @.str.6.128
.L.str.6.128:
	.asciz	"HMMCONVERT v%s Length: %d %s|%s|%s\n"
	.size	.L.str.6.128, 36

	.type	.L.str.7.129,@object    # @.str.7.129
.L.str.7.129:
	.asciz	"2.3"
	.size	.L.str.7.129, 4

	.type	.L.str.9.130,@object    # @.str.9.130
.L.str.9.130:
	.asciz	"   Profile converted from a profile HMM using HMMER v%s emulation.\n"
	.size	.L.str.9.130, 68

	.type	.L.str.10.131,@object   # @.str.10.131
.L.str.10.131:
	.asciz	"   Compugen XSW extended profile format.\n"
	.size	.L.str.10.131, 42

	.type	.L.str.11.132,@object   # @.str.11.132
.L.str.11.132:
	.asciz	"   Use -model=xsw.model -nonor -noave -gapop=10 -gapext=1 -qgapop=10 -qgapext=1\n"
	.size	.L.str.11.132, 81

	.type	.L.str.12.133,@object   # @.str.12.133
.L.str.12.133:
	.asciz	"      with om on the Compugen BIC to get the closest approximation to HMMER bit scores.\n"
	.size	.L.str.12.133, 89

	.type	.L.str.13.134,@object   # @.str.13.134
.L.str.13.134:
	.asciz	"   WARNING: There is a loss of information in this conversion.\n"
	.size	.L.str.13.134, 64

	.type	.L.str.14.135,@object   # @.str.14.135
.L.str.14.135:
	.asciz	"      Neither the scores nor even the rank order of hits will be precisely\n"
	.size	.L.str.14.135, 76

	.type	.L.str.15.136,@object   # @.str.15.136
.L.str.15.136:
	.asciz	"      preserved in a comparison of HMMER hmmsearch to GCG profilesearch.\n"
	.size	.L.str.15.136, 74

	.type	.L.str.16.137,@object   # @.str.16.137
.L.str.16.137:
	.asciz	"      The profile score is an approximation of the (single-hit) HMMER score.\n\n"
	.size	.L.str.16.137, 79

	.type	.L.str.17.138,@object   # @.str.17.138
.L.str.17.138:
	.asciz	"   Use -nonor -noave -gap=10 -len=1 with profilesearch and friends\n"
	.size	.L.str.17.138, 68

	.type	.L.str.18.139,@object   # @.str.18.139
.L.str.18.139:
	.asciz	"      to get the closest approximation to HMMER bit scores.\n"
	.size	.L.str.18.139, 61

	.type	.L.str.19.140,@object   # @.str.19.140
.L.str.19.140:
	.asciz	"Cons"
	.size	.L.str.19.140, 5

	.type	.L.str.20.141,@object   # @.str.20.141
.L.str.20.141:
	.asciz	"    %c "
	.size	.L.str.20.141, 8

	.type	.L.str.21.142,@object   # @.str.21.142
.L.str.21.142:
	.asciz	"  Gap   Len  QGap  Qlen ..\n"
	.size	.L.str.21.142, 28

	.type	.L.str.22.143,@object   # @.str.22.143
.L.str.22.143:
	.asciz	"  Gap   Len ..\n"
	.size	.L.str.22.143, 16

	.type	.L.str.23.144,@object   # @.str.23.144
.L.str.23.144:
	.asciz	"! %d\n"
	.size	.L.str.23.144, 6

	.type	.L.str.24.145,@object   # @.str.24.145
.L.str.24.145:
	.asciz	" %c  "
	.size	.L.str.24.145, 6

	.type	.L.str.25.146,@object   # @.str.25.146
.L.str.25.146:
	.asciz	"%5d "
	.size	.L.str.25.146, 5

	.type	.L.str.26.147,@object   # @.str.26.147
.L.str.26.147:
	.asciz	"%5d %5d %5d %5d\n"
	.size	.L.str.26.147, 17

	.type	.L.str.27.148,@object   # @.str.27.148
.L.str.27.148:
	.asciz	"%5d %5d\n"
	.size	.L.str.27.148, 9

	.type	.L.str.28.149,@object   # @.str.28.149
.L.str.28.149:
	.asciz	" *  "
	.size	.L.str.28.149, 5

	.type	.L.str.29.150,@object   # @.str.29.150
.L.str.29.150:
	.asciz	"\n"
	.size	.L.str.29.150, 2

	.type	.L.str.151,@object      # @.str.151
.L.str.151:
	.asciz	"Courier"
	.size	.L.str.151, 8

	.type	.L.str.1.152,@object    # @.str.1.152
.L.str.1.152:
	.asciz	"No EPS fmt if alignment is >50 columns"
	.size	.L.str.1.152, 39

	.type	.L.str.2.153,@object    # @.str.2.153
.L.str.2.153:
	.asciz	"Alignment too wide to write in EPS"
	.size	.L.str.2.153, 35

	.type	.L.str.3.154,@object    # @.str.3.154
.L.str.3.154:
	.asciz	"Too many seqs to write in EPS"
	.size	.L.str.3.154, 30

	.type	.L.str.4.155,@object    # @.str.4.155
.L.str.4.155:
	.asciz	"%%!PS-Adobe-3.0 EPSF-3.0\n"
	.size	.L.str.4.155, 26

	.type	.L.str.5.156,@object    # @.str.5.156
.L.str.5.156:
	.asciz	"%%%%BoundingBox: %d %d %d %d\n"
	.size	.L.str.5.156, 30

	.type	.L.str.6.157,@object    # @.str.6.157
.L.str.6.157:
	.asciz	"%%%%Pages: 1\n"
	.size	.L.str.6.157, 14

	.type	.L.str.7.158,@object    # @.str.7.158
.L.str.7.158:
	.asciz	"%%%%EndComments\n"
	.size	.L.str.7.158, 17

	.type	.L.str.8.159,@object    # @.str.8.159
.L.str.8.159:
	.asciz	"/%s findfont\n"
	.size	.L.str.8.159, 14

	.type	.L.str.9.160,@object    # @.str.9.160
.L.str.9.160:
	.asciz	"%d scalefont\n"
	.size	.L.str.9.160, 14

	.type	.L.str.10.161,@object   # @.str.10.161
.L.str.10.161:
	.asciz	"setfont\n"
	.size	.L.str.10.161, 9

	.type	.L.str.11.162,@object   # @.str.11.162
.L.str.11.162:
	.asciz	"newpath\n"
	.size	.L.str.11.162, 9

	.type	.L.str.12.163,@object   # @.str.12.163
.L.str.12.163:
	.asciz	"%d %d moveto\n"
	.size	.L.str.12.163, 14

	.type	.L.str.13.164,@object   # @.str.13.164
.L.str.13.164:
	.asciz	"(%s) show\n"
	.size	.L.str.13.164, 11

	.type	.L.str.14.165,@object   # @.str.14.165
.L.str.14.165:
	.asciz	"(%c) show\n"
	.size	.L.str.14.165, 11

	.type	.L.str.168,@object      # @.str.168
.L.str.168:
	.asciz	"file.c"
	.size	.L.str.168, 7

	.type	.L.str.1.169,@object    # @.str.1.169
.L.str.1.169:
	.asciz	"%s%c%s"
	.size	.L.str.1.169, 7

	.type	.L.str.2.170,@object    # @.str.2.170
.L.str.2.170:
	.asciz	"%s.%s"
	.size	.L.str.2.170, 6

	.type	.L.str.3.171,@object    # @.str.3.171
.L.str.3.171:
	.asciz	":"
	.size	.L.str.3.171, 2

	.type	.L.str.4.172,@object    # @.str.4.172
.L.str.4.172:
	.asciz	"r"
	.size	.L.str.4.172, 2

	.type	Getopt.optind,@object   # @Getopt.optind
	.data
	.p2align	2
Getopt.optind:
	.long	1                       # 0x1
	.size	Getopt.optind, 4

	.type	.L.str.173,@object      # @.str.173
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.173:
	.asciz	"-"
	.size	.L.str.173, 2

	.type	.L.str.1.174,@object    # @.str.1.174
.L.str.1.174:
	.asciz	"--"
	.size	.L.str.1.174, 3

	.type	Getopt.optptr,@object   # @Getopt.optptr
	.local	Getopt.optptr
	.comm	Getopt.optptr,8,8
	.type	.L.str.2.175,@object    # @.str.2.175
.L.str.2.175:
	.asciz	"Option \"%s\" is ambiguous; please be more specific.\n%s"
	.size	.L.str.2.175, 54

	.type	.L.str.3.176,@object    # @.str.3.176
.L.str.3.176:
	.asciz	"No such option \"%s\".\n%s"
	.size	.L.str.3.176, 24

	.type	.L.str.4.177,@object    # @.str.4.177
.L.str.4.177:
	.asciz	"Option %s requires an argument\n%s"
	.size	.L.str.4.177, 34

	.type	.L.str.5.178,@object    # @.str.5.178
.L.str.5.178:
	.asciz	"Option %s does not take an argument\n%s"
	.size	.L.str.5.178, 39

	.type	.L.str.6.179,@object    # @.str.6.179
.L.str.6.179:
	.asciz	"No such option \"%c\".\n%s"
	.size	.L.str.6.179, 24

	.type	.L.str.7.180,@object    # @.str.7.180
.L.str.7.180:
	.asciz	"Option %s requires an integer argument\n%s"
	.size	.L.str.7.180, 42

	.type	.L.str.8.181,@object    # @.str.8.181
.L.str.8.181:
	.asciz	"Option %s requires a numerical argument\n%s"
	.size	.L.str.8.181, 43

	.type	.L.str.9.182,@object    # @.str.9.182
.L.str.9.182:
	.asciz	"Option %s requires a single-character argument\n%s"
	.size	.L.str.9.182, 50

	.type	.L.str.7.183,@object    # @.str.7.183
.L.str.7.183:
	.asciz	"bad primelevel in gki_alloc()"
	.size	.L.str.7.183, 30

	.type	.L.str.184,@object      # @.str.184
.L.str.184:
	.asciz	"gki.c"
	.size	.L.str.184, 6

	.type	gki_primes,@object      # @gki_primes
	.data
	.p2align	4
gki_primes:
	.long	101                     # 0x65
	.long	1009                    # 0x3f1
	.long	10007                   # 0x2717
	.long	100003                  # 0x186a3
	.size	gki_primes, 16

	.type	.L.str.1.187,@object    # @.str.1.187
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.187:
	.asciz	"Total keys:        %d\n"
	.size	.L.str.1.187, 23

	.type	.L.str.2.188,@object    # @.str.2.188
.L.str.2.188:
	.asciz	"Hash table size:   %d\n"
	.size	.L.str.2.188, 23

	.type	.L.str.3.189,@object    # @.str.3.189
.L.str.3.189:
	.asciz	"Average occupancy: %.1f\n"
	.size	.L.str.3.189, 25

	.type	.L.str.4.190,@object    # @.str.4.190
.L.str.4.190:
	.asciz	"Unoccupied slots:  %d\n"
	.size	.L.str.4.190, 23

	.type	.L.str.5.191,@object    # @.str.5.191
.L.str.5.191:
	.asciz	"Most in one slot:  %d\n"
	.size	.L.str.5.191, 23

	.type	.L.str.6.192,@object    # @.str.6.192
.L.str.6.192:
	.asciz	"Least in one slot: %d\n"
	.size	.L.str.6.192, 23

	.type	.L.str.193,@object      # @.str.193
.L.str.193:
	.asciz	"gsi.c"
	.size	.L.str.193, 6

	.type	.L.str.1.194,@object    # @.str.1.194
.L.str.1.194:
	.asciz	"r"
	.size	.L.str.1.194, 2

	.type	.L.str.2.195,@object    # @.str.2.195
.L.str.2.195:
	.asciz	"GSI"
	.size	.L.str.2.195, 4

	.type	.L.str.3.196,@object    # @.str.3.196
.L.str.3.196:
	.asciz	"File name too long to be indexed."
	.size	.L.str.3.196, 34

	.type	.L.str.4.197,@object    # @.str.4.197
.L.str.4.197:
	.asciz	"key too long in GSI index"
	.size	.L.str.4.197, 26

	.type	.L.str.5.198,@object    # @.str.5.198
.L.str.5.198:
	.asciz	"too many files in GSI index"
	.size	.L.str.5.198, 28

	.type	.L.str.6.199,@object    # @.str.6.199
.L.str.6.199:
	.asciz	"offset too big in GSI index"
	.size	.L.str.6.199, 28

	.type	.L.str.7.200,@object    # @.str.7.200
.L.str.7.200:
	.asciz	"Too many files in GSI index."
	.size	.L.str.7.200, 29

	.type	.L.str.8.201,@object    # @.str.8.201
.L.str.8.201:
	.asciz	"Too many keys in GSI index."
	.size	.L.str.8.201, 28

	.type	.L.str.11.202,@object   # @.str.11.202
.L.str.11.202:
	.asciz	"GSI: file index out of range"
	.size	.L.str.11.202, 29

	.type	.L.str.13.203,@object   # @.str.13.203
.L.str.13.203:
	.asciz	"GSI: offset out of range"
	.size	.L.str.13.203, 25

	.type	.L.str.12.204,@object   # @.str.12.204
.L.str.12.204:
	.asciz	"GSI: format index out of range"
	.size	.L.str.12.204, 31

	.type	.L.str.9.205,@object    # @.str.9.205
.L.str.9.205:
	.asciz	"GSI: nfiles out of range"
	.size	.L.str.9.205, 25

	.type	.L.str.10.206,@object   # @.str.10.206
.L.str.10.206:
	.asciz	"GSI: nkeys out of range"
	.size	.L.str.10.206, 24

	.type	.L.str.207,@object      # @.str.207
.L.str.207:
	.asciz	"histogram.c"
	.size	.L.str.207, 12

	.type	.L.str.1.208,@object    # @.str.1.208
.L.str.1.208:
	.asciz	"AddToHistogram(): Can't add to a fitted histogram\n"
	.size	.L.str.1.208, 51

	.type	.L.str.2.209,@object    # @.str.2.209
.L.str.2.209:
	.asciz	"%5s %6s %6s  (one = represents %d sequences)\n"
	.size	.L.str.2.209, 46

	.type	.L.str.3.210,@object    # @.str.3.210
.L.str.3.210:
	.asciz	"score"
	.size	.L.str.3.210, 6

	.type	.L.str.4.211,@object    # @.str.4.211
.L.str.4.211:
	.asciz	"obs"
	.size	.L.str.4.211, 4

	.type	.L.str.5.212,@object    # @.str.5.212
.L.str.5.212:
	.asciz	"exp"
	.size	.L.str.5.212, 4

	.type	.L.str.6.213,@object    # @.str.6.213
.L.str.6.213:
	.asciz	"%5s %6s %6s\n"
	.size	.L.str.6.213, 13

	.type	.L.str.7.214,@object    # @.str.7.214
.L.str.7.214:
	.asciz	"-----"
	.size	.L.str.7.214, 6

	.type	.L.str.8.215,@object    # @.str.8.215
.L.str.8.215:
	.asciz	"---"
	.size	.L.str.8.215, 4

	.type	.L.str.9.216,@object    # @.str.9.216
.L.str.9.216:
	.asciz	"<%4d %6d %6s|"
	.size	.L.str.9.216, 14

	.type	.L.str.10.217,@object   # @.str.10.217
.L.str.10.217:
	.asciz	"-"
	.size	.L.str.10.217, 2

	.type	.L.str.11.218,@object   # @.str.11.218
.L.str.11.218:
	.asciz	"oops"
	.size	.L.str.11.218, 5

	.type	.L.str.12.219,@object   # @.str.12.219
.L.str.12.219:
	.asciz	">%4d %6d %6s|"
	.size	.L.str.12.219, 14

	.type	.L.str.13.220,@object   # @.str.13.220
.L.str.13.220:
	.asciz	"%5d %6d %6d|"
	.size	.L.str.13.220, 13

	.type	.L.str.14.221,@object   # @.str.14.221
.L.str.14.221:
	.asciz	"%5d %6d %6s|"
	.size	.L.str.14.221, 13

	.type	.L.str.15.222,@object   # @.str.15.222
.L.str.15.222:
	.asciz	"\n\n%% No statistical fit available\n"
	.size	.L.str.15.222, 35

	.type	.L.str.16.223,@object   # @.str.16.223
.L.str.16.223:
	.asciz	"\n\n%% Statistical details of theoretical EVD fit:\n"
	.size	.L.str.16.223, 50

	.type	.L.str.17.224,@object   # @.str.17.224
.L.str.17.224:
	.asciz	"              mu = %10.4f\n"
	.size	.L.str.17.224, 27

	.type	.L.str.18.225,@object   # @.str.18.225
.L.str.18.225:
	.asciz	"          lambda = %10.4f\n"
	.size	.L.str.18.225, 27

	.type	.L.str.19.226,@object   # @.str.19.226
.L.str.19.226:
	.asciz	"chi-sq statistic = %10.4f\n"
	.size	.L.str.19.226, 27

	.type	.L.str.20.227,@object   # @.str.20.227
.L.str.20.227:
	.asciz	"  P(chi-square)  = %10.4g\n"
	.size	.L.str.20.227, 27

	.type	.L.str.21.228,@object   # @.str.21.228
.L.str.21.228:
	.asciz	"\n\n%% Statistical details of theoretical Gaussian fit:\n"
	.size	.L.str.21.228, 55

	.type	.L.str.22.229,@object   # @.str.22.229
.L.str.22.229:
	.asciz	"            mean = %10.4f\n"
	.size	.L.str.22.229, 27

	.type	.L.str.23.230,@object   # @.str.23.230
.L.str.23.230:
	.asciz	"              sd = %10.4f\n"
	.size	.L.str.23.230, 27

	.type	.L.str.24.231,@object   # @.str.24.231
.L.str.24.231:
	.asciz	"%-6d %f\n"
	.size	.L.str.24.231, 9

	.type	.L.str.25.232,@object   # @.str.25.232
.L.str.25.232:
	.asciz	"&\n"
	.size	.L.str.25.232, 3

	.type	OPTIONS,@object         # @OPTIONS
	.data
	.p2align	4
OPTIONS:
	.quad	.L.str.8.241
	.long	1                       # 0x1
	.long	0                       # 0x0
	.quad	.L.str.233
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	.L.str.1.234
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	.L.str.2.235
	.long	0                       # 0x0
	.long	4                       # 0x4
	.quad	.L.str.3.236
	.long	0                       # 0x0
	.long	2                       # 0x2
	.quad	.L.str.4.237
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	.L.str.5.238
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.6.239
	.long	0                       # 0x0
	.long	2                       # 0x2
	.quad	.L.str.7.240
	.long	0                       # 0x0
	.long	1                       # 0x1
	.size	OPTIONS, 144

	.type	usage,@object           # @usage
	.p2align	4
usage:
	.asciz	"Usage: hmmcalibrate [-options] <hmmfile>\nAvailable options are:\n  -h             : print short usage and version info, then exit\n"
	.size	usage, 130

	.type	.L.str.233,@object      # @.str.233
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.233:
	.asciz	"--cpu"
	.size	.L.str.233, 6

	.type	.L.str.1.234,@object    # @.str.1.234
.L.str.1.234:
	.asciz	"--fixed"
	.size	.L.str.1.234, 8

	.type	.L.str.2.235,@object    # @.str.2.235
.L.str.2.235:
	.asciz	"--histfile"
	.size	.L.str.2.235, 11

	.type	.L.str.3.236,@object    # @.str.3.236
.L.str.3.236:
	.asciz	"--mean"
	.size	.L.str.3.236, 7

	.type	.L.str.4.237,@object    # @.str.4.237
.L.str.4.237:
	.asciz	"--num"
	.size	.L.str.4.237, 6

	.type	.L.str.5.238,@object    # @.str.5.238
.L.str.5.238:
	.asciz	"--pvm"
	.size	.L.str.5.238, 6

	.type	.L.str.6.239,@object    # @.str.6.239
.L.str.6.239:
	.asciz	"--sd"
	.size	.L.str.6.239, 5

	.type	.L.str.7.240,@object    # @.str.7.240
.L.str.7.240:
	.asciz	"--seed"
	.size	.L.str.7.240, 7

	.type	.L.str.8.241,@object    # @.str.8.241
.L.str.8.241:
	.asciz	"-h"
	.size	.L.str.8.241, 3

	.type	banner,@object          # @banner
	.data
	.p2align	4
banner:
	.asciz	"hmmcalibrate -- calibrate HMM search statistics"
	.size	banner, 48

	.type	experts,@object         # @experts
	.p2align	4
experts:
	.asciz	"  --cpu <n>      : run <n> threads in parallel (if threaded)\n  --fixed <n>    : fix random sequence length at <n>\n  --histfile <f> : save histogram(s) to file <f>\n  --mean <x>     : set random seq length mean at <x> [350]\n  --num <n>      : set number of sampled seqs to <n> [5000]\n  --pvm          : run on a Parallel Virtual Machine (PVM)\n  --sd <x>       : set random seq length std. dev to <x> [350]\n  --seed <n>     : set random seed to <n> [time()]\n"
	.size	experts, 456

	.type	.L.str.9.242,@object    # @.str.9.242
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9.242:
	.asciz	"Incorrect number of arguments.\n%s\n"
	.size	.L.str.9.242, 35

	.type	.L.str.10.243,@object   # @.str.10.243
.L.str.10.243:
	.asciz	"PVM support is not compiled into HMMER; --pvm doesn't work."
	.size	.L.str.10.243, 60

	.type	.L.str.11.244,@object   # @.str.11.244
.L.str.11.244:
	.asciz	"Posix threads support is not compiled into HMMER; --cpu doesn't have any effect"
	.size	.L.str.11.244, 80

	.type	.L.str.12.245,@object   # @.str.12.245
.L.str.12.245:
	.asciz	"failed to open HMM file %s for reading."
	.size	.L.str.12.245, 40

	.type	.L.str.13.246,@object   # @.str.13.246
.L.str.13.246:
	.asciz	"w"
	.size	.L.str.13.246, 2

	.type	.L.str.14.247,@object   # @.str.14.247
.L.str.14.247:
	.asciz	"Failed to open histogram save file %s for writing\n"
	.size	.L.str.14.247, 51

	.type	.L.str.15.248,@object   # @.str.15.248
.L.str.15.248:
	.asciz	"hmmcalibrate.c"
	.size	.L.str.15.248, 15

	.type	.L.str.16.249,@object   # @.str.16.249
.L.str.16.249:
	.asciz	".new"
	.size	.L.str.16.249, 5

	.type	.L.str.17.250,@object   # @.str.17.250
.L.str.17.250:
	.asciz	"wb"
	.size	.L.str.17.250, 3

	.type	.L.str.18.251,@object   # @.str.18.251
.L.str.18.251:
	.asciz	"HMM file:                 %s\n"
	.size	.L.str.18.251, 30

	.type	.L.str.19.252,@object   # @.str.19.252
.L.str.19.252:
	.asciz	"Length fixed to:          %d\n"
	.size	.L.str.19.252, 30

	.type	.L.str.20.253,@object   # @.str.20.253
.L.str.20.253:
	.asciz	"Length distribution mean: %.0f\n"
	.size	.L.str.20.253, 32

	.type	.L.str.21.254,@object   # @.str.21.254
.L.str.21.254:
	.asciz	"Length distribution s.d.: %.0f\n"
	.size	.L.str.21.254, 32

	.type	.L.str.22.255,@object   # @.str.22.255
.L.str.22.255:
	.asciz	"Number of samples:        %d\n"
	.size	.L.str.22.255, 30

	.type	.L.str.23.256,@object   # @.str.23.256
.L.str.23.256:
	.asciz	"random seed:              %d\n"
	.size	.L.str.23.256, 30

	.type	.L.str.25.257,@object   # @.str.25.257
.L.str.25.257:
	.asciz	"[not saved]"
	.size	.L.str.25.257, 12

	.type	.L.str.24.258,@object   # @.str.24.258
.L.str.24.258:
	.asciz	"histogram(s) saved to:    %s\n"
	.size	.L.str.24.258, 30

	.type	.L.str.26.259,@object   # @.str.26.259
.L.str.26.259:
	.asciz	"PVM:                      ACTIVE\n"
	.size	.L.str.26.259, 34

	.type	.L.str.27.260,@object   # @.str.27.260
.L.str.27.260:
	.asciz	"POSIX threads:            %d\n"
	.size	.L.str.27.260, 30

	.type	.L.str.28.261,@object   # @.str.28.261
.L.str.28.261:
	.asciz	"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n"
	.size	.L.str.28.261, 66

	.type	.L.str.29.262,@object   # @.str.29.262
.L.str.29.262:
	.asciz	"HMM file may be corrupt or in incorrect format; parse failed"
	.size	.L.str.29.262, 61

	.type	.L.str.30.263,@object   # @.str.30.263
.L.str.30.263:
	.asciz	"wait. that can't happen. I didn't do anything."
	.size	.L.str.30.263, 47

	.type	.L.str.31.264,@object   # @.str.31.264
.L.str.31.264:
	.asciz	"fit failed; --num may be set too small?\n"
	.size	.L.str.31.264, 41

	.type	.L.str.32.265,@object   # @.str.32.265
.L.str.32.265:
	.asciz	"HMM    : %s\n"
	.size	.L.str.32.265, 13

	.type	.L.str.33.266,@object   # @.str.33.266
.L.str.33.266:
	.asciz	"mu     : %12f\n"
	.size	.L.str.33.266, 15

	.type	.L.str.34.267,@object   # @.str.34.267
.L.str.34.267:
	.asciz	"lambda : %12f\n"
	.size	.L.str.34.267, 15

	.type	.L.str.35.268,@object   # @.str.35.268
.L.str.35.268:
	.asciz	"max    : %12f\n"
	.size	.L.str.35.268, 15

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"//\n"
	.size	.L.str.36, 4

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"HMM: %s\n"
	.size	.L.str.37, 9

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"Ouch. Temporary file %s appeared during the run."
	.size	.L.str.38, 49

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"Ouch. Temporary file %s couldn't be opened for writing."
	.size	.L.str.39, 56

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"Ran out of HMMs too early in pass 2"
	.size	.L.str.40, 36

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"HMM file %s was corrupted? Parse failed in pass 2"
	.size	.L.str.41, 50

	.type	.L.str.271,@object      # @.str.271
.L.str.271:
	.asciz	"hmmio.c"
	.size	.L.str.271, 8

	.type	.L.str.1.272,@object    # @.str.1.272
.L.str.1.272:
	.asciz	"r"
	.size	.L.str.1.272, 2

	.type	.L.str.2.273,@object    # @.str.2.273
.L.str.2.273:
	.asciz	"%s.ssi"
	.size	.L.str.2.273, 7

	.type	.L.str.3.274,@object    # @.str.3.274
.L.str.3.274:
	.asciz	"SSIRecommendMode() failed"
	.size	.L.str.3.274, 26

	.type	.L.str.4.275,@object    # @.str.4.275
.L.str.4.275:
	.asciz	"SSIGetFilePosition() failed"
	.size	.L.str.4.275, 28

	.type	v20magic,@object        # @v20magic
	.data
	.p2align	2
v20magic:
	.long	3907906997              # 0xe8ededb5
	.size	v20magic, 4

	.type	v20swap,@object         # @v20swap
	.p2align	2
v20swap:
	.long	3052269032              # 0xb5edede8
	.size	v20swap, 4

	.type	v19magic,@object        # @v19magic
	.p2align	2
v19magic:
	.long	3907906996              # 0xe8ededb4
	.size	v19magic, 4

	.type	v19swap,@object         # @v19swap
	.p2align	2
v19swap:
	.long	3035491816              # 0xb4edede8
	.size	v19swap, 4

	.type	v17magic,@object        # @v17magic
	.p2align	2
v17magic:
	.long	3907906995              # 0xe8ededb3
	.size	v17magic, 4

	.type	v17swap,@object         # @v17swap
	.p2align	2
v17swap:
	.long	3018714600              # 0xb3edede8
	.size	v17swap, 4

	.type	v11magic,@object        # @v11magic
	.p2align	2
v11magic:
	.long	3907906994              # 0xe8ededb2
	.size	v11magic, 4

	.type	v11swap,@object         # @v11swap
	.p2align	2
v11swap:
	.long	3001937384              # 0xb2edede8
	.size	v11swap, 4

	.type	v10magic,@object        # @v10magic
	.p2align	2
v10magic:
	.long	3907906993              # 0xe8ededb1
	.size	v10magic, 4

	.type	v10swap,@object         # @v10swap
	.p2align	2
v10swap:
	.long	2985160168              # 0xb1edede8
	.size	v10swap, 4

	.type	.L.str.5.278,@object    # @.str.5.278
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5.278:
	.asciz	"%s appears to be a binary but format is not recognized\nIt may be from a HMMER version more recent than yours,\nor may be a different kind of binary altogether.\n"
	.size	.L.str.5.278, 160

	.type	.L.str.6.279,@object    # @.str.6.279
.L.str.6.279:
	.asciz	"HMMER2.0"
	.size	.L.str.6.279, 9

	.type	.L.str.7.280,@object    # @.str.7.280
.L.str.7.280:
	.asciz	"HMMER v1.9"
	.size	.L.str.7.280, 11

	.type	.L.str.8.281,@object    # @.str.8.281
.L.str.8.281:
	.asciz	"# HMM v1.7"
	.size	.L.str.8.281, 11

	.type	.L.str.9.282,@object    # @.str.9.282
.L.str.9.282:
	.asciz	"# HMM v1.1"
	.size	.L.str.9.282, 11

	.type	.L.str.10.283,@object   # @.str.10.283
.L.str.10.283:
	.asciz	"# HMM v1.0"
	.size	.L.str.10.283, 11

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"1.0 ASCII HMMs unsupported"
	.size	.L.str.91, 27

	.type	.L.str.90.284,@object   # @.str.90.284
.L.str.90.284:
	.asciz	"1.1 ASCII HMMs unsupported"
	.size	.L.str.90.284, 27

	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"[converted from an old Plan9 HMM]"
	.size	.L.str.84, 34

	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	" \t\n"
	.size	.L.str.72, 4

	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"A nonbiological alphabet size of %d; so I can't convert plan9 to plan7"
	.size	.L.str.85, 71

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"Alphabet mismatch error.\nI thought we were working with %s, but tried to read a %s HMM.\n"
	.size	.L.str.65, 89

	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"malloc failed for reading hmm in\n"
	.size	.L.str.86, 34

	.type	.L.str.21.285,@object   # @.str.21.285
.L.str.21.285:
	.asciz	"yes"
	.size	.L.str.21.285, 4

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"###MATCH_STATE"
	.size	.L.str.87, 15

	.type	.L.str.34.286,@object   # @.str.34.286
.L.str.34.286:
	.asciz	"\n"
	.size	.L.str.34.286, 2

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"###INSERT_STATE"
	.size	.L.str.88, 16

	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"###DELETE_STATE"
	.size	.L.str.89, 16

	.type	.L.str.63.287,@object   # @.str.63.287
.L.str.63.287:
	.asciz	"AMINO"
	.size	.L.str.63.287, 6

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"NUCLEIC"
	.size	.L.str.64, 8

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"null"
	.size	.L.str.83, 5

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"NAME "
	.size	.L.str.57, 6

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"ACC  "
	.size	.L.str.58, 6

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"DESC "
	.size	.L.str.59, 6

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"LENG "
	.size	.L.str.60, 6

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"NSEQ "
	.size	.L.str.61, 6

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"ALPH "
	.size	.L.str.62, 6

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"RF   "
	.size	.L.str.66, 6

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	"CS   "
	.size	.L.str.67, 6

	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"MAP  "
	.size	.L.str.68, 6

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"COM  "
	.size	.L.str.69, 6

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"DATE "
	.size	.L.str.70, 6

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"GA   "
	.size	.L.str.71, 6

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"TC   "
	.size	.L.str.73, 6

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	"NC   "
	.size	.L.str.74, 6

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"XT   "
	.size	.L.str.75, 6

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"NULT "
	.size	.L.str.76, 6

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"NULE "
	.size	.L.str.77, 6

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"ALPH must precede NULE in HMM save files"
	.size	.L.str.78, 41

	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"EVD  "
	.size	.L.str.79, 6

	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	"CKSUM"
	.size	.L.str.80, 6

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"HMM  "
	.size	.L.str.81, 6

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"//"
	.size	.L.str.82, 3

	.type	.L.str.11.294,@object   # @.str.11.294
.L.str.11.294:
	.asciz	"HMMER2.0  [%s]\n"
	.size	.L.str.11.294, 16

	.type	.L.str.12.295,@object   # @.str.12.295
.L.str.12.295:
	.asciz	"2.3"
	.size	.L.str.12.295, 4

	.type	.L.str.13.296,@object   # @.str.13.296
.L.str.13.296:
	.asciz	"NAME  %s\n"
	.size	.L.str.13.296, 10

	.type	.L.str.14.297,@object   # @.str.14.297
.L.str.14.297:
	.asciz	"ACC   %s\n"
	.size	.L.str.14.297, 10

	.type	.L.str.15.298,@object   # @.str.15.298
.L.str.15.298:
	.asciz	"DESC  %s\n"
	.size	.L.str.15.298, 10

	.type	.L.str.16.299,@object   # @.str.16.299
.L.str.16.299:
	.asciz	"LENG  %d\n"
	.size	.L.str.16.299, 10

	.type	.L.str.18.300,@object   # @.str.18.300
.L.str.18.300:
	.asciz	"Amino"
	.size	.L.str.18.300, 6

	.type	.L.str.19.301,@object   # @.str.19.301
.L.str.19.301:
	.asciz	"Nucleic"
	.size	.L.str.19.301, 8

	.type	.L.str.17.302,@object   # @.str.17.302
.L.str.17.302:
	.asciz	"ALPH  %s\n"
	.size	.L.str.17.302, 10

	.type	.L.str.22.303,@object   # @.str.22.303
.L.str.22.303:
	.asciz	"no"
	.size	.L.str.22.303, 3

	.type	.L.str.20.304,@object   # @.str.20.304
.L.str.20.304:
	.asciz	"RF    %s\n"
	.size	.L.str.20.304, 10

	.type	.L.str.23.305,@object   # @.str.23.305
.L.str.23.305:
	.asciz	"CS    %s\n"
	.size	.L.str.23.305, 10

	.type	.L.str.24.306,@object   # @.str.24.306
.L.str.24.306:
	.asciz	"MAP   %s\n"
	.size	.L.str.24.306, 10

	.type	.L.str.25.307,@object   # @.str.25.307
.L.str.25.307:
	.asciz	"COM   "
	.size	.L.str.25.307, 7

	.type	.L.str.26.308,@object   # @.str.26.308
.L.str.26.308:
	.asciz	"NSEQ  %d\n"
	.size	.L.str.26.308, 10

	.type	.L.str.27.309,@object   # @.str.27.309
.L.str.27.309:
	.asciz	"DATE  %s\n"
	.size	.L.str.27.309, 10

	.type	.L.str.28.310,@object   # @.str.28.310
.L.str.28.310:
	.asciz	"CKSUM %d\n"
	.size	.L.str.28.310, 10

	.type	.L.str.29.311,@object   # @.str.29.311
.L.str.29.311:
	.asciz	"GA    %.1f %.1f\n"
	.size	.L.str.29.311, 17

	.type	.L.str.30.312,@object   # @.str.30.312
.L.str.30.312:
	.asciz	"TC    %.1f %.1f\n"
	.size	.L.str.30.312, 17

	.type	.L.str.31.313,@object   # @.str.31.313
.L.str.31.313:
	.asciz	"NC    %.1f %.1f\n"
	.size	.L.str.31.313, 17

	.type	.L.str.32.314,@object   # @.str.32.314
.L.str.32.314:
	.asciz	"XT     "
	.size	.L.str.32.314, 8

	.type	.L.str.33.315,@object   # @.str.33.315
.L.str.33.315:
	.asciz	"%6s "
	.size	.L.str.33.315, 5

	.type	.L.str.35.316,@object   # @.str.35.316
.L.str.35.316:
	.asciz	"NULT  "
	.size	.L.str.35.316, 7

	.type	.L.str.36.317,@object   # @.str.36.317
.L.str.36.317:
	.asciz	"%6s\n"
	.size	.L.str.36.317, 5

	.type	.L.str.37.318,@object   # @.str.37.318
.L.str.37.318:
	.asciz	"NULE  "
	.size	.L.str.37.318, 7

	.type	.L.str.38.319,@object   # @.str.38.319
.L.str.38.319:
	.asciz	"EVD   %10f %10f\n"
	.size	.L.str.38.319, 17

	.type	.L.str.39.320,@object   # @.str.39.320
.L.str.39.320:
	.asciz	"HMM      "
	.size	.L.str.39.320, 10

	.type	.L.str.40.321,@object   # @.str.40.321
.L.str.40.321:
	.asciz	"  %c    "
	.size	.L.str.40.321, 9

	.type	.L.str.41.322,@object   # @.str.41.322
.L.str.41.322:
	.asciz	"       %6s %6s %6s %6s %6s %6s %6s %6s %6s\n"
	.size	.L.str.41.322, 44

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"m->m"
	.size	.L.str.42, 5

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"m->i"
	.size	.L.str.43, 5

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"m->d"
	.size	.L.str.44, 5

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"i->m"
	.size	.L.str.45, 5

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"i->i"
	.size	.L.str.46, 5

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"d->m"
	.size	.L.str.47, 5

	.type	.L.str.48.323,@object   # @.str.48.323
.L.str.48.323:
	.asciz	"d->d"
	.size	.L.str.48.323, 5

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"b->m"
	.size	.L.str.49, 5

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"m->e"
	.size	.L.str.50, 5

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"       %6s %6s "
	.size	.L.str.51, 16

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"*"
	.size	.L.str.52, 2

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	" %5d "
	.size	.L.str.53, 6

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"%5d"
	.size	.L.str.54, 4

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	" %5c "
	.size	.L.str.55, 6

	.type	.L.str.56.324,@object   # @.str.56.324
.L.str.56.324:
	.asciz	"//\n"
	.size	.L.str.56.324, 4

	.type	prob2ascii.buffer,@object # @prob2ascii.buffer
	.local	prob2ascii.buffer
	.comm	prob2ascii.buffer,8,1
	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"%6d"
	.size	.L.str.92, 4

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"%s%s\n"
	.size	.L.str.93, 6

	.type	Alphabet_type,@object   # @Alphabet_type
	.comm	Alphabet_type,4,4
	.type	Alphabet,@object        # @Alphabet
	.comm	Alphabet,25,16
	.type	Alphabet_size,@object   # @Alphabet_size
	.comm	Alphabet_size,4,4
	.type	Alphabet_iupac,@object  # @Alphabet_iupac
	.comm	Alphabet_iupac,4,4
	.type	Degenerate,@object      # @Degenerate
	.comm	Degenerate,480,16
	.type	DegenCount,@object      # @DegenCount
	.comm	DegenCount,96,16
	.type	OPTIONS.339,@object     # @OPTIONS.339
	.data
	.p2align	4
OPTIONS.339:
	.quad	.L.str.17.358
	.long	1                       # 0x1
	.long	0                       # 0x0
	.quad	.L.str.341
	.long	1                       # 0x1
	.long	1                       # 0x1
	.quad	.L.str.1.342
	.long	1                       # 0x1
	.long	2                       # 0x2
	.quad	.L.str.2.343
	.long	1                       # 0x1
	.long	2                       # 0x2
	.quad	.L.str.3.344
	.long	1                       # 0x1
	.long	1                       # 0x1
	.quad	.L.str.4.345
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.5.346
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	.L.str.6.347
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.7.348
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.8.349
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.9.350
	.long	0                       # 0x0
	.long	2                       # 0x2
	.quad	.L.str.10.351
	.long	0                       # 0x0
	.long	2                       # 0x2
	.quad	.L.str.11.352
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.15.356
	.long	0                       # 0x0
	.long	4                       # 0x4
	.quad	.L.str.12.353
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.13.354
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str.14.355
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	OPTIONS.339, 272

	.type	usage.340,@object       # @usage.340
	.p2align	4
usage.340:
	.asciz	"Usage: hmmsearch [-options] <hmmfile> <sequence file or database>\n  Available options are:\n   -h        : help; print brief help on version and usage\n   -A <n>    : sets alignment output limit to <n> best domain alignments\n   -E <x>    : sets E value cutoff (globE) to <= x\n   -T <x>    : sets T bit threshold (globT) to >= x\n   -Z <n>    : sets Z (# seqs) for E-value calculation\n"
	.size	usage.340, 382

	.type	.L.str.341,@object      # @.str.341
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.341:
	.asciz	"-A"
	.size	.L.str.341, 3

	.type	.L.str.1.342,@object    # @.str.1.342
.L.str.1.342:
	.asciz	"-E"
	.size	.L.str.1.342, 3

	.type	.L.str.2.343,@object    # @.str.2.343
.L.str.2.343:
	.asciz	"-T"
	.size	.L.str.2.343, 3

	.type	.L.str.3.344,@object    # @.str.3.344
.L.str.3.344:
	.asciz	"-Z"
	.size	.L.str.3.344, 3

	.type	.L.str.4.345,@object    # @.str.4.345
.L.str.4.345:
	.asciz	"--compat"
	.size	.L.str.4.345, 9

	.type	.L.str.5.346,@object    # @.str.5.346
.L.str.5.346:
	.asciz	"--cpu"
	.size	.L.str.5.346, 6

	.type	.L.str.6.347,@object    # @.str.6.347
.L.str.6.347:
	.asciz	"--cut_ga"
	.size	.L.str.6.347, 9

	.type	.L.str.7.348,@object    # @.str.7.348
.L.str.7.348:
	.asciz	"--cut_nc"
	.size	.L.str.7.348, 9

	.type	.L.str.8.349,@object    # @.str.8.349
.L.str.8.349:
	.asciz	"--cut_tc"
	.size	.L.str.8.349, 9

	.type	.L.str.9.350,@object    # @.str.9.350
.L.str.9.350:
	.asciz	"--domE"
	.size	.L.str.9.350, 7

	.type	.L.str.10.351,@object   # @.str.10.351
.L.str.10.351:
	.asciz	"--domT"
	.size	.L.str.10.351, 7

	.type	.L.str.11.352,@object   # @.str.11.352
.L.str.11.352:
	.asciz	"--forward"
	.size	.L.str.11.352, 10

	.type	.L.str.12.353,@object   # @.str.12.353
.L.str.12.353:
	.asciz	"--null2"
	.size	.L.str.12.353, 8

	.type	.L.str.13.354,@object   # @.str.13.354
.L.str.13.354:
	.asciz	"--pvm"
	.size	.L.str.13.354, 6

	.type	.L.str.14.355,@object   # @.str.14.355
.L.str.14.355:
	.asciz	"--xnu"
	.size	.L.str.14.355, 6

	.type	.L.str.15.356,@object   # @.str.15.356
.L.str.15.356:
	.asciz	"--informat"
	.size	.L.str.15.356, 11

	.type	.L.str.16.357,@object   # @.str.16.357
.L.str.16.357:
	.asciz	"unrecognized sequence file format \"%s\""
	.size	.L.str.16.357, 39

	.type	.L.str.17.358,@object   # @.str.17.358
.L.str.17.358:
	.asciz	"-h"
	.size	.L.str.17.358, 3

	.type	banner.359,@object      # @banner.359
	.data
	.p2align	4
banner.359:
	.asciz	"hmmsearch - search a sequence database with a profile HMM"
	.size	banner.359, 58

	.type	experts.360,@object     # @experts.360
	.p2align	4
experts.360:
	.asciz	"   --compat       : make best effort to use last version's output style\n   --cpu <n>      : run <n> threads in parallel (if threaded)\n   --cut_ga       : use Pfam GA gathering threshold cutoffs\n   --cut_nc       : use Pfam NC noise threshold cutoffs\n   --cut_tc       : use Pfam TC trusted threshold cutoffs\n   --domE <x>     : sets domain Eval cutoff (2nd threshold) to <= x\n   --domT <x>     : sets domain T bit thresh (2nd threshold) to >= x\n   --forward      : use the full Forward() algorithm instead of Viterbi\n   --informat <s> : sequence file is in format <s>\n   --null2        : turn OFF the post hoc second null model\n   --pvm          : run on a Parallel Virtual Machine (PVM)\n   --xnu          : turn ON XNU filtering of target protein sequences\n"
	.size	experts.360, 759

	.type	.L.str.18.361,@object   # @.str.18.361
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.18.361:
	.asciz	"Incorrect number of arguments.\n%s\n"
	.size	.L.str.18.361, 35

	.type	.L.str.19.362,@object   # @.str.19.362
.L.str.19.362:
	.asciz	"PVM support is not compiled into your HMMER software; --pvm doesn't work."
	.size	.L.str.19.362, 74

	.type	.L.str.20.363,@object   # @.str.20.363
.L.str.20.363:
	.asciz	"POSIX threads support is not compiled into HMMER; --cpu doesn't have any effect"
	.size	.L.str.20.363, 80

	.type	.L.str.21.364,@object   # @.str.21.364
.L.str.21.364:
	.asciz	"^.*\\.gz$"
	.size	.L.str.21.364, 9

	.type	.L.str.22.365,@object   # @.str.22.365
.L.str.22.365:
	.asciz	"-"
	.size	.L.str.22.365, 2

	.type	.L.str.23.366,@object   # @.str.23.366
.L.str.23.366:
	.asciz	"BLASTDB"
	.size	.L.str.23.366, 8

	.type	.L.str.24.367,@object   # @.str.24.367
.L.str.24.367:
	.asciz	"Failed to open sequence database file %s\n%s\n"
	.size	.L.str.24.367, 45

	.type	.L.str.25.368,@object   # @.str.25.368
.L.str.25.368:
	.asciz	"HMMERDB"
	.size	.L.str.25.368, 8

	.type	.L.str.26.369,@object   # @.str.26.369
.L.str.26.369:
	.asciz	"Failed to open HMM file %s\n%s"
	.size	.L.str.26.369, 30

	.type	.L.str.27.370,@object   # @.str.27.370
.L.str.27.370:
	.asciz	"Failed to read any HMMs from %s\n"
	.size	.L.str.27.370, 33

	.type	.L.str.28.371,@object   # @.str.28.371
.L.str.28.371:
	.asciz	"HMM file %s corrupt or in incorrect format? Parse failed"
	.size	.L.str.28.371, 57

	.type	.L.str.29.372,@object   # @.str.29.372
.L.str.29.372:
	.asciz	"The HMM is a DNA model, and you can't use the --xnu filter on DNA data"
	.size	.L.str.29.372, 71

	.type	.L.str.30.373,@object   # @.str.30.373
.L.str.30.373:
	.asciz	"HMM %s did not contain the GA, TC, or NC cutoffs you needed"
	.size	.L.str.30.373, 60

	.type	.L.str.31.374,@object   # @.str.31.374
.L.str.31.374:
	.asciz	"HMM file:                   %s [%s]\n"
	.size	.L.str.31.374, 37

	.type	.L.str.32.375,@object   # @.str.32.375
.L.str.32.375:
	.asciz	"Sequence database:          %s\n"
	.size	.L.str.32.375, 32

	.type	.L.str.33.376,@object   # @.str.33.376
.L.str.33.376:
	.asciz	"PVM:                        ACTIVE\n"
	.size	.L.str.33.376, 36

	.type	.L.str.34.377,@object   # @.str.34.377
.L.str.34.377:
	.asciz	"per-sequence score cutoff:  "
	.size	.L.str.34.377, 29

	.type	.L.str.35.378,@object   # @.str.35.378
.L.str.35.378:
	.asciz	"[none]\n"
	.size	.L.str.35.378, 8

	.type	.L.str.36.379,@object   # @.str.36.379
.L.str.36.379:
	.asciz	">= %.1f"
	.size	.L.str.36.379, 8

	.type	.L.str.37.380,@object   # @.str.37.380
.L.str.37.380:
	.asciz	" [GA1]\n"
	.size	.L.str.37.380, 8

	.type	.L.str.38.381,@object   # @.str.38.381
.L.str.38.381:
	.asciz	" [NC1]\n"
	.size	.L.str.38.381, 8

	.type	.L.str.39.382,@object   # @.str.39.382
.L.str.39.382:
	.asciz	" [TC1]\n"
	.size	.L.str.39.382, 8

	.type	.L.str.40.383,@object   # @.str.40.383
.L.str.40.383:
	.asciz	"\n"
	.size	.L.str.40.383, 2

	.type	.L.str.41.384,@object   # @.str.41.384
.L.str.41.384:
	.asciz	"per-domain score cutoff:    "
	.size	.L.str.41.384, 29

	.type	.L.str.42.385,@object   # @.str.42.385
.L.str.42.385:
	.asciz	" [GA2]\n"
	.size	.L.str.42.385, 8

	.type	.L.str.43.386,@object   # @.str.43.386
.L.str.43.386:
	.asciz	" [NC2]\n"
	.size	.L.str.43.386, 8

	.type	.L.str.44.387,@object   # @.str.44.387
.L.str.44.387:
	.asciz	" [TC2]\n"
	.size	.L.str.44.387, 8

	.type	.L.str.45.388,@object   # @.str.45.388
.L.str.45.388:
	.asciz	"per-sequence Eval cutoff:   "
	.size	.L.str.45.388, 29

	.type	.L.str.46.389,@object   # @.str.46.389
.L.str.46.389:
	.asciz	"<= %-10.2g\n"
	.size	.L.str.46.389, 12

	.type	.L.str.47.390,@object   # @.str.47.390
.L.str.47.390:
	.asciz	"per-domain Eval cutoff:     "
	.size	.L.str.47.390, 29

	.type	.L.str.48.391,@object   # @.str.48.391
.L.str.48.391:
	.asciz	"<= %10.2g\n"
	.size	.L.str.48.391, 11

	.type	.L.str.49.392,@object   # @.str.49.392
.L.str.49.392:
	.asciz	"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
	.size	.L.str.49.392, 65

	.type	.L.str.51.394,@object   # @.str.51.394
.L.str.51.394:
	.zero	1
	.size	.L.str.51.394, 1

	.type	.L.str.50.395,@object   # @.str.50.395
.L.str.50.395:
	.asciz	"\nQuery HMM: %s|%s|%s\n"
	.size	.L.str.50.395, 22

	.type	.L.str.52.396,@object   # @.str.52.396
.L.str.52.396:
	.asciz	"\nQuery HMM:   %s\n"
	.size	.L.str.52.396, 18

	.type	.L.str.54.397,@object   # @.str.54.397
.L.str.54.397:
	.asciz	"[none]"
	.size	.L.str.54.397, 7

	.type	.L.str.53.398,@object   # @.str.53.398
.L.str.53.398:
	.asciz	"Accession:   %s\n"
	.size	.L.str.53.398, 17

	.type	.L.str.55.399,@object   # @.str.55.399
.L.str.55.399:
	.asciz	"Description: %s\n"
	.size	.L.str.55.399, 17

	.type	.L.str.56.400,@object   # @.str.56.400
.L.str.56.400:
	.asciz	"  [HMM has been calibrated; E-values are empirical estimates]\n"
	.size	.L.str.56.400, 63

	.type	.L.str.57.401,@object   # @.str.57.401
.L.str.57.401:
	.asciz	"  [No calibration for HMM; E-values are upper bounds]\n"
	.size	.L.str.57.401, 55

	.type	.L.str.58.402,@object   # @.str.58.402
.L.str.58.402:
	.asciz	"\nAlignments of top-scoring domains:\n"
	.size	.L.str.58.402, 37

	.type	.L.str.59.403,@object   # @.str.59.403
.L.str.59.403:
	.asciz	"%s: domain %d of %d, from %d to %d: score %.1f, E = %.2g\n"
	.size	.L.str.59.403, 58

	.type	.L.str.60.404,@object   # @.str.60.404
.L.str.60.404:
	.asciz	"\t[no hits above thresholds]\n"
	.size	.L.str.60.404, 29

	.type	.L.str.61.405,@object   # @.str.61.405
.L.str.61.405:
	.asciz	"\t[output cut off at A = %d top alignments]\n"
	.size	.L.str.61.405, 44

	.type	.L.str.62.406,@object   # @.str.62.406
.L.str.62.406:
	.asciz	"\nTotal sequences searched: %d\n"
	.size	.L.str.62.406, 31

	.type	.L.str.64.407,@object   # @.str.64.407
.L.str.64.407:
	.asciz	"No threads support"
	.size	.L.str.64.407, 19

	.type	.L.str.63.408,@object   # @.str.63.408
.L.str.63.408:
	.asciz	"No PVM support"
	.size	.L.str.63.408, 15

	.type	sqd_parse,@object       # @sqd_parse
	.comm	sqd_parse,80,16
	.type	.L.str.411,@object      # @.str.411
.L.str.411:
	.asciz	"Strparse(): ntok must be <= %d"
	.size	.L.str.411, 31

	.type	.L.str.1.412,@object    # @.str.1.412
.L.str.1.412:
	.asciz	"regexp compilation failed."
	.size	.L.str.1.412, 27

	.type	.L.str.2.413,@object    # @.str.2.413
.L.str.2.413:
	.asciz	"hsregex.c"
	.size	.L.str.2.413, 10

	.type	.L.str.6.414,@object    # @.str.6.414
.L.str.6.414:
	.asciz	"NULL argument to sqd_regexec"
	.size	.L.str.6.414, 29

	.type	.L.str.7.415,@object    # @.str.7.415
.L.str.7.415:
	.asciz	"corrupted regexp"
	.size	.L.str.7.415, 17

	.type	.L.str.25.416,@object   # @.str.25.416
.L.str.25.416:
	.asciz	"regexp corruption"
	.size	.L.str.25.416, 18

	.type	.L.str.26.417,@object   # @.str.26.417
.L.str.26.417:
	.asciz	"corrupted pointers"
	.size	.L.str.26.417, 19

	.type	.L.str.27.418,@object   # @.str.27.418
.L.str.27.418:
	.asciz	"internal error: bad call of regrepeat"
	.size	.L.str.27.418, 38

	.type	.L.str.11.419,@object   # @.str.11.419
.L.str.11.419:
	.asciz	"regexp(3): %s\n"
	.size	.L.str.11.419, 15

	.type	.L.str.3.420,@object    # @.str.3.420
.L.str.3.420:
	.asciz	"NULL argument to sqd_regcomp"
	.size	.L.str.3.420, 29

	.type	.L.str.4.421,@object    # @.str.4.421
.L.str.4.421:
	.asciz	"regexp too big"
	.size	.L.str.4.421, 15

	.type	.L.str.5.422,@object    # @.str.5.422
.L.str.5.422:
	.asciz	"out of space"
	.size	.L.str.5.422, 13

	.type	.L.str.12.423,@object   # @.str.12.423
.L.str.12.423:
	.asciz	"too many ()"
	.size	.L.str.12.423, 12

	.type	.L.str.13.424,@object   # @.str.13.424
.L.str.13.424:
	.asciz	"unterminated ()"
	.size	.L.str.13.424, 16

	.type	.L.str.14.425,@object   # @.str.14.425
.L.str.14.425:
	.asciz	"unmatched ()"
	.size	.L.str.14.425, 13

	.type	.L.str.15.426,@object   # @.str.15.426
.L.str.15.426:
	.asciz	"internal error: junk on end"
	.size	.L.str.15.426, 28

	.type	.L.str.16.427,@object   # @.str.16.427
.L.str.16.427:
	.asciz	"*+ operand could be empty"
	.size	.L.str.16.427, 26

	.type	.L.str.17.428,@object   # @.str.17.428
.L.str.17.428:
	.asciz	"nested *?+"
	.size	.L.str.17.428, 11

	.type	.L.str.18.429,@object   # @.str.18.429
.L.str.18.429:
	.asciz	"invalid [] range"
	.size	.L.str.18.429, 17

	.type	.L.str.19.430,@object   # @.str.19.430
.L.str.19.430:
	.asciz	"unmatched []"
	.size	.L.str.19.430, 13

	.type	.L.str.20.431,@object   # @.str.20.431
.L.str.20.431:
	.asciz	"internal error: \\0|) unexpected"
	.size	.L.str.20.431, 32

	.type	.L.str.21.432,@object   # @.str.21.432
.L.str.21.432:
	.asciz	"?+* follows nothing"
	.size	.L.str.21.432, 20

	.type	.L.str.22.433,@object   # @.str.22.433
.L.str.22.433:
	.asciz	"trailing \\"
	.size	.L.str.22.433, 11

	.type	.L.str.23.434,@object   # @.str.23.434
.L.str.23.434:
	.asciz	"^$.[()|?+*\\"
	.size	.L.str.23.434, 12

	.type	.L.str.24.435,@object   # @.str.24.435
.L.str.24.435:
	.asciz	"internal error: strcspn 0"
	.size	.L.str.24.435, 26

	.type	.L.str.8.438,@object    # @.str.8.438
.L.str.8.438:
	.asciz	"NULL parameter to sqd_regsub"
	.size	.L.str.8.438, 29

	.type	.L.str.9.439,@object    # @.str.9.439
.L.str.9.439:
	.asciz	"damaged regexp"
	.size	.L.str.9.439, 15

	.type	.L.str.10.440,@object   # @.str.10.440
.L.str.10.440:
	.asciz	"damaged match string"
	.size	.L.str.10.440, 21

	.type	dnafq,@object           # @dnafq
	.data
	.globl	dnafq
	.p2align	4
dnafq:
	.long	1048576000              # float 0.25
	.long	1048576000              # float 0.25
	.long	1048576000              # float 0.25
	.long	1048576000              # float 0.25
	.size	dnafq, 16

	.type	aafq,@object            # @aafq
	.globl	aafq
	.p2align	4
aafq:
	.long	1033546299              # float 0.0755200014
	.long	1015745270              # float 0.016973
	.long	1029256432              # float 0.0530290008
	.long	1031893273              # float 0.0632039979
	.long	1025963534              # float 0.0407619998
	.long	1032597111              # float 0.0684479997
	.long	1018662090              # float 0.0224060006
	.long	1030398625              # float 0.0572840013
	.long	1030966097              # float 0.0593979992
	.long	1035945978              # float 0.0933990031
	.long	1019286471              # float 0.0235690009
	.long	1027179815              # float 0.0452929996
	.long	1028245235              # float 0.0492619984
	.long	1025820995              # float 0.0402310006
	.long	1028865590              # float 0.0515730008
	.long	1033102575              # float 0.0722139999
	.long	1030444259              # float 0.0574540012
	.long	1032168151              # float 0.0652519986
	.long	1011680083              # float 0.0125129996
	.long	1023607476              # float 0.0319849998
	.size	aafq, 80

	.type	aa_alphabet,@object     # @aa_alphabet
	.globl	aa_alphabet
	.p2align	4
aa_alphabet:
	.asciz	"ACDEFGHIKLMNPQRSTVWY"
	.size	aa_alphabet, 21

	.type	aa_index,@object        # @aa_index
	.globl	aa_index
	.p2align	4
aa_index:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	17                      # 0x11
	.long	18                      # 0x12
	.long	19                      # 0x13
	.long	21                      # 0x15
	.long	22                      # 0x16
	.long	24                      # 0x18
	.size	aa_index, 80

	.type	iupac,@object           # @iupac
	.globl	iupac
	.p2align	4
iupac:
	.byte	65                      # 0x41
	.byte	84                      # 0x54
	.byte	8                       # 0x8
	.byte	1                       # 0x1
	.byte	67                      # 0x43
	.byte	71                      # 0x47
	.byte	4                       # 0x4
	.byte	2                       # 0x2
	.byte	71                      # 0x47
	.byte	67                      # 0x43
	.byte	2                       # 0x2
	.byte	4                       # 0x4
	.byte	84                      # 0x54
	.byte	65                      # 0x41
	.byte	1                       # 0x1
	.byte	8                       # 0x8
	.byte	85                      # 0x55
	.byte	65                      # 0x41
	.byte	1                       # 0x1
	.byte	8                       # 0x8
	.byte	78                      # 0x4e
	.byte	78                      # 0x4e
	.byte	15                      # 0xf
	.byte	15                      # 0xf
	.byte	32                      # 0x20
	.byte	32                      # 0x20
	.byte	16                      # 0x10
	.byte	16                      # 0x10
	.byte	82                      # 0x52
	.byte	89                      # 0x59
	.byte	10                      # 0xa
	.byte	5                       # 0x5
	.byte	89                      # 0x59
	.byte	82                      # 0x52
	.byte	5                       # 0x5
	.byte	10                      # 0xa
	.byte	77                      # 0x4d
	.byte	75                      # 0x4b
	.byte	12                      # 0xc
	.byte	3                       # 0x3
	.byte	75                      # 0x4b
	.byte	77                      # 0x4d
	.byte	3                       # 0x3
	.byte	12                      # 0xc
	.byte	83                      # 0x53
	.byte	83                      # 0x53
	.byte	6                       # 0x6
	.byte	6                       # 0x6
	.byte	87                      # 0x57
	.byte	87                      # 0x57
	.byte	9                       # 0x9
	.byte	9                       # 0x9
	.byte	72                      # 0x48
	.byte	68                      # 0x44
	.byte	13                      # 0xd
	.byte	11                      # 0xb
	.byte	66                      # 0x42
	.byte	86                      # 0x56
	.byte	7                       # 0x7
	.byte	14                      # 0xe
	.byte	86                      # 0x56
	.byte	66                      # 0x42
	.byte	14                      # 0xe
	.byte	7                       # 0x7
	.byte	68                      # 0x44
	.byte	72                      # 0x48
	.byte	11                      # 0xb
	.byte	13                      # 0xd
	.size	iupac, 68

	.type	stdcode1,@object        # @stdcode1
	.globl	stdcode1
	.p2align	4
stdcode1:
	.quad	.L.str.443
	.quad	.L.str.1.444
	.quad	.L.str.443
	.quad	.L.str.1.444
	.quad	.L.str.2.445
	.quad	.L.str.2.445
	.quad	.L.str.2.445
	.quad	.L.str.2.445
	.quad	.L.str.3.446
	.quad	.L.str.4.447
	.quad	.L.str.3.446
	.quad	.L.str.4.447
	.quad	.L.str.5.448
	.quad	.L.str.5.448
	.quad	.L.str.6.449
	.quad	.L.str.5.448
	.quad	.L.str.7.450
	.quad	.L.str.8.451
	.quad	.L.str.7.450
	.quad	.L.str.8.451
	.quad	.L.str.9.452
	.quad	.L.str.9.452
	.quad	.L.str.9.452
	.quad	.L.str.9.452
	.quad	.L.str.3.446
	.quad	.L.str.3.446
	.quad	.L.str.3.446
	.quad	.L.str.3.446
	.quad	.L.str.10.453
	.quad	.L.str.10.453
	.quad	.L.str.10.453
	.quad	.L.str.10.453
	.quad	.L.str.11.454
	.quad	.L.str.12.455
	.quad	.L.str.11.454
	.quad	.L.str.12.455
	.quad	.L.str.13.456
	.quad	.L.str.13.456
	.quad	.L.str.13.456
	.quad	.L.str.13.456
	.quad	.L.str.14.457
	.quad	.L.str.14.457
	.quad	.L.str.14.457
	.quad	.L.str.14.457
	.quad	.L.str.15.458
	.quad	.L.str.15.458
	.quad	.L.str.15.458
	.quad	.L.str.15.458
	.quad	.L.str.16.459
	.quad	.L.str.17.460
	.quad	.L.str.16.459
	.quad	.L.str.17.460
	.quad	.L.str.4.447
	.quad	.L.str.4.447
	.quad	.L.str.4.447
	.quad	.L.str.4.447
	.quad	.L.str.16.459
	.quad	.L.str.18.461
	.quad	.L.str.19.462
	.quad	.L.str.18.461
	.quad	.L.str.10.453
	.quad	.L.str.20.463
	.quad	.L.str.10.453
	.quad	.L.str.20.463
	.quad	.L.str.21.464
	.size	stdcode1, 520

	.type	.L.str.443,@object      # @.str.443
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.443:
	.asciz	"K"
	.size	.L.str.443, 2

	.type	.L.str.1.444,@object    # @.str.1.444
.L.str.1.444:
	.asciz	"N"
	.size	.L.str.1.444, 2

	.type	.L.str.2.445,@object    # @.str.2.445
.L.str.2.445:
	.asciz	"T"
	.size	.L.str.2.445, 2

	.type	.L.str.3.446,@object    # @.str.3.446
.L.str.3.446:
	.asciz	"R"
	.size	.L.str.3.446, 2

	.type	.L.str.4.447,@object    # @.str.4.447
.L.str.4.447:
	.asciz	"S"
	.size	.L.str.4.447, 2

	.type	.L.str.5.448,@object    # @.str.5.448
.L.str.5.448:
	.asciz	"I"
	.size	.L.str.5.448, 2

	.type	.L.str.6.449,@object    # @.str.6.449
.L.str.6.449:
	.asciz	"M"
	.size	.L.str.6.449, 2

	.type	.L.str.7.450,@object    # @.str.7.450
.L.str.7.450:
	.asciz	"Q"
	.size	.L.str.7.450, 2

	.type	.L.str.8.451,@object    # @.str.8.451
.L.str.8.451:
	.asciz	"H"
	.size	.L.str.8.451, 2

	.type	.L.str.9.452,@object    # @.str.9.452
.L.str.9.452:
	.asciz	"P"
	.size	.L.str.9.452, 2

	.type	.L.str.10.453,@object   # @.str.10.453
.L.str.10.453:
	.asciz	"L"
	.size	.L.str.10.453, 2

	.type	.L.str.11.454,@object   # @.str.11.454
.L.str.11.454:
	.asciz	"E"
	.size	.L.str.11.454, 2

	.type	.L.str.12.455,@object   # @.str.12.455
.L.str.12.455:
	.asciz	"D"
	.size	.L.str.12.455, 2

	.type	.L.str.13.456,@object   # @.str.13.456
.L.str.13.456:
	.asciz	"A"
	.size	.L.str.13.456, 2

	.type	.L.str.14.457,@object   # @.str.14.457
.L.str.14.457:
	.asciz	"G"
	.size	.L.str.14.457, 2

	.type	.L.str.15.458,@object   # @.str.15.458
.L.str.15.458:
	.asciz	"V"
	.size	.L.str.15.458, 2

	.type	.L.str.16.459,@object   # @.str.16.459
.L.str.16.459:
	.asciz	"*"
	.size	.L.str.16.459, 2

	.type	.L.str.17.460,@object   # @.str.17.460
.L.str.17.460:
	.asciz	"Y"
	.size	.L.str.17.460, 2

	.type	.L.str.18.461,@object   # @.str.18.461
.L.str.18.461:
	.asciz	"C"
	.size	.L.str.18.461, 2

	.type	.L.str.19.462,@object   # @.str.19.462
.L.str.19.462:
	.asciz	"W"
	.size	.L.str.19.462, 2

	.type	.L.str.20.463,@object   # @.str.20.463
.L.str.20.463:
	.asciz	"F"
	.size	.L.str.20.463, 2

	.type	.L.str.21.464,@object   # @.str.21.464
.L.str.21.464:
	.asciz	"X"
	.size	.L.str.21.464, 2

	.type	stdcode3,@object        # @stdcode3
	.data
	.globl	stdcode3
	.p2align	4
stdcode3:
	.quad	.L.str.22.465
	.quad	.L.str.23.466
	.quad	.L.str.22.465
	.quad	.L.str.23.466
	.quad	.L.str.24.467
	.quad	.L.str.24.467
	.quad	.L.str.24.467
	.quad	.L.str.24.467
	.quad	.L.str.25.468
	.quad	.L.str.26.469
	.quad	.L.str.25.468
	.quad	.L.str.26.469
	.quad	.L.str.27.470
	.quad	.L.str.27.470
	.quad	.L.str.28.471
	.quad	.L.str.27.470
	.quad	.L.str.29.472
	.quad	.L.str.30.473
	.quad	.L.str.29.472
	.quad	.L.str.30.473
	.quad	.L.str.31.474
	.quad	.L.str.31.474
	.quad	.L.str.31.474
	.quad	.L.str.31.474
	.quad	.L.str.25.468
	.quad	.L.str.25.468
	.quad	.L.str.25.468
	.quad	.L.str.25.468
	.quad	.L.str.32.475
	.quad	.L.str.32.475
	.quad	.L.str.32.475
	.quad	.L.str.32.475
	.quad	.L.str.33.476
	.quad	.L.str.34.477
	.quad	.L.str.33.476
	.quad	.L.str.34.477
	.quad	.L.str.35.478
	.quad	.L.str.35.478
	.quad	.L.str.35.478
	.quad	.L.str.35.478
	.quad	.L.str.36.479
	.quad	.L.str.36.479
	.quad	.L.str.36.479
	.quad	.L.str.36.479
	.quad	.L.str.37.480
	.quad	.L.str.37.480
	.quad	.L.str.37.480
	.quad	.L.str.37.480
	.quad	.L.str.38.481
	.quad	.L.str.39.482
	.quad	.L.str.38.481
	.quad	.L.str.39.482
	.quad	.L.str.26.469
	.quad	.L.str.26.469
	.quad	.L.str.26.469
	.quad	.L.str.26.469
	.quad	.L.str.38.481
	.quad	.L.str.40.483
	.quad	.L.str.41.484
	.quad	.L.str.40.483
	.quad	.L.str.32.475
	.quad	.L.str.42.485
	.quad	.L.str.32.475
	.quad	.L.str.41.484
	.quad	.L.str.43.486
	.size	stdcode3, 520

	.type	.L.str.22.465,@object   # @.str.22.465
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22.465:
	.asciz	"Lys"
	.size	.L.str.22.465, 4

	.type	.L.str.23.466,@object   # @.str.23.466
.L.str.23.466:
	.asciz	"Asn"
	.size	.L.str.23.466, 4

	.type	.L.str.24.467,@object   # @.str.24.467
.L.str.24.467:
	.asciz	"Thr"
	.size	.L.str.24.467, 4

	.type	.L.str.25.468,@object   # @.str.25.468
.L.str.25.468:
	.asciz	"Arg"
	.size	.L.str.25.468, 4

	.type	.L.str.26.469,@object   # @.str.26.469
.L.str.26.469:
	.asciz	"Ser"
	.size	.L.str.26.469, 4

	.type	.L.str.27.470,@object   # @.str.27.470
.L.str.27.470:
	.asciz	"Ile"
	.size	.L.str.27.470, 4

	.type	.L.str.28.471,@object   # @.str.28.471
.L.str.28.471:
	.asciz	"Met"
	.size	.L.str.28.471, 4

	.type	.L.str.29.472,@object   # @.str.29.472
.L.str.29.472:
	.asciz	"Gln"
	.size	.L.str.29.472, 4

	.type	.L.str.30.473,@object   # @.str.30.473
.L.str.30.473:
	.asciz	"His"
	.size	.L.str.30.473, 4

	.type	.L.str.31.474,@object   # @.str.31.474
.L.str.31.474:
	.asciz	"Pro"
	.size	.L.str.31.474, 4

	.type	.L.str.32.475,@object   # @.str.32.475
.L.str.32.475:
	.asciz	"Leu"
	.size	.L.str.32.475, 4

	.type	.L.str.33.476,@object   # @.str.33.476
.L.str.33.476:
	.asciz	"Glu"
	.size	.L.str.33.476, 4

	.type	.L.str.34.477,@object   # @.str.34.477
.L.str.34.477:
	.asciz	"Asp"
	.size	.L.str.34.477, 4

	.type	.L.str.35.478,@object   # @.str.35.478
.L.str.35.478:
	.asciz	"Ala"
	.size	.L.str.35.478, 4

	.type	.L.str.36.479,@object   # @.str.36.479
.L.str.36.479:
	.asciz	"Gly"
	.size	.L.str.36.479, 4

	.type	.L.str.37.480,@object   # @.str.37.480
.L.str.37.480:
	.asciz	"Val"
	.size	.L.str.37.480, 4

	.type	.L.str.38.481,@object   # @.str.38.481
.L.str.38.481:
	.asciz	"***"
	.size	.L.str.38.481, 4

	.type	.L.str.39.482,@object   # @.str.39.482
.L.str.39.482:
	.asciz	"Tyr"
	.size	.L.str.39.482, 4

	.type	.L.str.40.483,@object   # @.str.40.483
.L.str.40.483:
	.asciz	"Cys"
	.size	.L.str.40.483, 4

	.type	.L.str.41.484,@object   # @.str.41.484
.L.str.41.484:
	.asciz	"Trp"
	.size	.L.str.41.484, 4

	.type	.L.str.42.485,@object   # @.str.42.485
.L.str.42.485:
	.asciz	"Phe"
	.size	.L.str.42.485, 4

	.type	.L.str.43.486,@object   # @.str.43.486
.L.str.43.486:
	.asciz	"XXX"
	.size	.L.str.43.486, 4

	.type	.L.str.489,@object      # @.str.489
.L.str.489:
	.asciz	"masks.c"
	.size	.L.str.489, 8

	.type	xpam120,@object         # @xpam120
	.data
	.p2align	4
xpam120:
	.long	3                       # 0x3
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967289              # 0xfffffff9
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	9                       # 0x9
	.long	4294967289              # 0xfffffff9
	.long	4294967289              # 0xfffffff9
	.long	4294967290              # 0xfffffffa
	.long	4294967292              # 0xfffffffc
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967289              # 0xfffffff9
	.long	4294967289              # 0xfffffff9
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	4294967289              # 0xfffffff9
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967288              # 0xfffffff8
	.long	4294967295              # 0xffffffff
	.long	4294967292              # 0xfffffffc
	.long	4294967290              # 0xfffffffa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967289              # 0xfffffff9
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	4294967289              # 0xfffffff9
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	2                       # 0x2
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967288              # 0xfffffff8
	.long	4294967291              # 0xfffffffb
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967289              # 0xfffffff9
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	4294967289              # 0xfffffff9
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	2                       # 0x2
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967288              # 0xfffffff8
	.long	4294967291              # 0xfffffffb
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967292              # 0xfffffffc
	.long	4294967290              # 0xfffffffa
	.long	4294967289              # 0xfffffff9
	.long	4294967289              # 0xfffffff9
	.long	8                       # 0x8
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	4294967289              # 0xfffffff9
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967292              # 0xfffffffc
	.long	4294967291              # 0xfffffffb
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4                       # 0x4
	.long	4294967292              # 0xfffffffc
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967291              # 0xfffffffb
	.long	5                       # 0x5
	.long	4294967292              # 0xfffffffc
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967288              # 0xfffffff8
	.long	4294967290              # 0xfffffffa
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	7                       # 0x7
	.long	4294967292              # 0xfffffffc
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	2                       # 0x2
	.long	4294967295              # 0xffffffff
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	4294967292              # 0xfffffffc
	.long	4294967292              # 0xfffffffc
	.long	6                       # 0x6
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	4294967290              # 0xfffffffa
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967289              # 0xfffffff9
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967289              # 0xfffffff9
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	5                       # 0x5
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967292              # 0xfffffffc
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967289              # 0xfffffff9
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967292              # 0xfffffffc
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967292              # 0xfffffffc
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967290              # 0xfffffffa
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967292              # 0xfffffffc
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	4294967290              # 0xfffffffa
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967291              # 0xfffffffb
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	4294967294              # 0xfffffffe
	.long	1                       # 0x1
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4                       # 0x4
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	4294967294              # 0xfffffffe
	.long	4                       # 0x4
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967291              # 0xfffffffb
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967289              # 0xfffffff9
	.long	4294967290              # 0xfffffffa
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967289              # 0xfffffff9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	4294967290              # 0xfffffffa
	.long	4294967293              # 0xfffffffd
	.long	3                       # 0x3
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	6                       # 0x6
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967292              # 0xfffffffc
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	2                       # 0x2
	.long	4294967292              # 0xfffffffc
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	6                       # 0x6
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	4294967292              # 0xfffffffc
	.long	4294967294              # 0xfffffffe
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967292              # 0xfffffffc
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967290              # 0xfffffffa
	.long	4294967293              # 0xfffffffd
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	3                       # 0x3
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	4294967288              # 0xfffffff8
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	4294967289              # 0xfffffff9
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967295              # 0xffffffff
	.long	4294967288              # 0xfffffff8
	.long	4294967293              # 0xfffffffd
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	4294967290              # 0xfffffffa
	.long	4294967292              # 0xfffffffc
	.long	4294967289              # 0xfffffff9
	.long	4294967290              # 0xfffffffa
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967290              # 0xfffffffa
	.long	4294967288              # 0xfffffff8
	.long	12                      # 0xc
	.long	4294967294              # 0xfffffffe
	.long	4294967291              # 0xfffffffb
	.long	4294967290              # 0xfffffffa
	.long	0                       # 0x0
	.long	4294967292              # 0xfffffffc
	.long	4294967295              # 0xffffffff
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4                       # 0x4
	.long	4294967290              # 0xfffffffa
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967291              # 0xfffffffb
	.long	4294967294              # 0xfffffffe
	.long	4294967292              # 0xfffffffc
	.long	4294967294              # 0xfffffffe
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4294967294              # 0xfffffffe
	.long	8                       # 0x8
	.long	4294967294              # 0xfffffffe
	.long	4294967292              # 0xfffffffc
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4294967292              # 0xfffffffc
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	4294967294              # 0xfffffffe
	.long	1                       # 0x1
	.long	4294967293              # 0xfffffffd
	.long	4294967293              # 0xfffffffd
	.long	4                       # 0x4
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	4294967294              # 0xfffffffe
	.long	4294967291              # 0xfffffffb
	.long	4294967294              # 0xfffffffe
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967290              # 0xfffffffa
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	4294967291              # 0xfffffffb
	.long	4294967295              # 0xffffffff
	.long	2                       # 0x2
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967294              # 0xfffffffe
	.long	4294967290              # 0xfffffffa
	.long	4294967292              # 0xfffffffc
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	0                       # 0x0
	.zero	92
	.size	xpam120, 2116

	.type	ILogsum.firsttime,@object # @ILogsum.firsttime
	.p2align	2
ILogsum.firsttime:
	.long	1                       # 0x1
	.size	ILogsum.firsttime, 4

	.type	ilogsum_lookup,@object  # @ilogsum_lookup
	.local	ilogsum_lookup
	.comm	ilogsum_lookup,80000,16
	.type	.L.str.502,@object      # @.str.502
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.502:
	.asciz	"Invalid argument alpha < 0.0 to SampleGamma()"
	.size	.L.str.502, 46

	.type	.L.str.505,@object      # @.str.505
.L.str.505:
	.asciz	"%s\n"
	.size	.L.str.505, 4

	.type	.L.str.1.506,@object    # @.str.1.506
.L.str.1.506:
	.asciz	"%s %s (%s)\n"
	.size	.L.str.1.506, 12

	.type	.L.str.2.507,@object    # @.str.2.507
.L.str.2.507:
	.asciz	"HMMER"
	.size	.L.str.2.507, 6

	.type	.L.str.3.508,@object    # @.str.3.508
.L.str.3.508:
	.asciz	"2.3"
	.size	.L.str.3.508, 4

	.type	.L.str.4.509,@object    # @.str.4.509
.L.str.4.509:
	.asciz	"May 2003"
	.size	.L.str.4.509, 9

	.type	.L.str.5.510,@object    # @.str.5.510
.L.str.5.510:
	.asciz	"Copyright (C) 1992-2003 HHMI/Washington University School of Medicine"
	.size	.L.str.5.510, 70

	.type	.L.str.6.511,@object    # @.str.6.511
.L.str.6.511:
	.asciz	"Freely distributed under the GNU General Public License (GPL)"
	.size	.L.str.6.511, 62

	.type	.L.str.7.512,@object    # @.str.7.512
.L.str.7.512:
	.asciz	"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
	.size	.L.str.7.512, 73

	.type	Getword.sptr,@object    # @Getword.sptr
	.local	Getword.sptr
	.comm	Getword.sptr,8,8
	.type	.L.str.8.515,@object    # @.str.8.515
.L.str.8.515:
	.asciz	" \t\n"
	.size	.L.str.8.515, 4

	.type	Getword.buffer,@object  # @Getword.buffer
	.local	Getword.buffer
	.comm	Getword.buffer,512,16
	.type	.L.str.9.516,@object    # @.str.9.516
.L.str.9.516:
	.asciz	"Parse failed: expected string, got nothing"
	.size	.L.str.9.516, 43

	.type	.L.str.10.517,@object   # @.str.10.517
.L.str.10.517:
	.asciz	"Parse failed: expected integer, got %s"
	.size	.L.str.10.517, 39

	.type	.L.str.11.518,@object   # @.str.11.518
.L.str.11.518:
	.asciz	"Parse failed: expected real value, got %s"
	.size	.L.str.11.518, 42

	.type	.L.str.521,@object      # @.str.521
.L.str.521:
	.asciz	"Alignment must have RF annotation to hand-build an HMM"
	.size	.L.str.521, 55

	.type	.L.str.1.522,@object    # @.str.1.522
.L.str.1.522:
	.asciz	"modelmakers.c"
	.size	.L.str.1.522, 14

	.type	.L.str.2.523,@object    # @.str.2.523
.L.str.2.523:
	.asciz	"No conserved consensus columns found; aborting construction!\nThis is an unusual situation. Reexamine your sequence alignment. It is\nprobably unusually full of gaps, or lots of sequence fragments. You may be\nable to force HMMER to model it; see the --fast (and --gapmax), or --hand\noptions to hmmbuild."
	.size	.L.str.2.523, 302

	.type	.L.str.3.524,@object    # @.str.3.524
.L.str.3.524:
	.asciz	"X-PRM"
	.size	.L.str.3.524, 6

	.type	.L.str.4.525,@object    # @.str.4.525
.L.str.4.525:
	.asciz	"X-PRI"
	.size	.L.str.4.525, 6

	.type	.L.str.5.526,@object    # @.str.5.526
.L.str.5.526:
	.asciz	"X-PRT"
	.size	.L.str.5.526, 6

	.type	.L.str.529,@object      # @.str.529
.L.str.529:
	.asciz	"msa.c"
	.size	.L.str.529, 6

	.type	.L.str.1.536,@object    # @.str.1.536
.L.str.1.536:
	.asciz	"\n"
	.size	.L.str.1.536, 2

	.type	.L.str.2.537,@object    # @.str.2.537
.L.str.2.537:
	.asciz	"failed to sre_strcat()"
	.size	.L.str.2.537, 23

	.type	.L.str.4.542,@object    # @.str.4.542
.L.str.4.542:
	.zero	1
	.size	.L.str.4.542, 1

	.type	.L.str.3.543,@object    # @.str.3.543
.L.str.3.543:
	.asciz	"Parse error: no sequences were found for alignment %s"
	.size	.L.str.3.543, 54

	.type	.L.str.5.544,@object    # @.str.5.544
.L.str.5.544:
	.asciz	"Parse error: No sequence for %s in alignment %s"
	.size	.L.str.5.544, 48

	.type	.L.str.6.545,@object    # @.str.6.545
.L.str.6.545:
	.asciz	"Parse error: some weights are set, but %s doesn't have one in alignment %s"
	.size	.L.str.6.545, 75

	.type	.L.str.7.546,@object    # @.str.7.546
.L.str.7.546:
	.asciz	"Parse error: sequence %s: length %d, expected %d in alignment %s"
	.size	.L.str.7.546, 65

	.type	.L.str.8.547,@object    # @.str.8.547
.L.str.8.547:
	.asciz	"Parse error: #=GR SS annotation for %s: length %d, expected %d in alignment %s"
	.size	.L.str.8.547, 79

	.type	.L.str.9.548,@object    # @.str.9.548
.L.str.9.548:
	.asciz	"Parse error: #=GR SA annotation for %s: length %d, expected %d in alignment %s"
	.size	.L.str.9.548, 79

	.type	.L.str.10.549,@object   # @.str.10.549
.L.str.10.549:
	.asciz	"Parse error: #=GC SS_cons annotation: length %d, expected %d in alignment %s"
	.size	.L.str.10.549, 77

	.type	.L.str.11.550,@object   # @.str.11.550
.L.str.11.550:
	.asciz	"Parse error: #=GC SA_cons annotation: length %d, expected %d in alignment %s"
	.size	.L.str.11.550, 77

	.type	.L.str.12.551,@object   # @.str.12.551
.L.str.12.551:
	.asciz	"Parse error: #=GC RF annotation: length %d, expected %d in alignment %s"
	.size	.L.str.12.551, 72

	.type	.L.str.13.552,@object   # @.str.13.552
.L.str.13.552:
	.asciz	"-"
	.size	.L.str.13.552, 2

	.type	.L.str.14.553,@object   # @.str.14.553
.L.str.14.553:
	.asciz	"[STDIN]"
	.size	.L.str.14.553, 8

	.type	.L.str.15.554,@object   # @.str.15.554
.L.str.15.554:
	.asciz	"r"
	.size	.L.str.15.554, 2

	.type	.L.str.16.555,@object   # @.str.16.555
.L.str.16.555:
	.asciz	"%s.ssi"
	.size	.L.str.16.555, 7

	.type	.L.str.17.556,@object   # @.str.17.556
.L.str.17.556:
	.asciz	"Can't autodetect alignment file format from a stdin or gzip pipe"
	.size	.L.str.17.556, 65

	.type	.L.str.18.557,@object   # @.str.18.557
.L.str.18.557:
	.asciz	"Can't determine format of multiple alignment file %s"
	.size	.L.str.18.557, 53

	.type	.L.str.21.558,@object   # @.str.21.558
.L.str.21.558:
	.asciz	"File %s does not appear to be an alignment file;\nrather, it appears to be an unaligned file in %s format.\nI'm expecting an alignment file in this context.\n"
	.size	.L.str.21.558, 156

	.type	.L.str.19.559,@object   # @.str.19.559
.L.str.19.559:
	.asciz	"MSAFILE corrupted: bad format index"
	.size	.L.str.19.559, 36

	.type	.L.str.20.562,@object   # @.str.20.562
.L.str.20.562:
	.asciz	"can't write. no such alignment format %d\n"
	.size	.L.str.20.562, 42

	.type	.L.str.567,@object      # @.str.567
.L.str.567:
	.asciz	"!!AA_MULTIPLE_ALIGNMENT"
	.size	.L.str.567, 24

	.type	.L.str.1.568,@object    # @.str.1.568
.L.str.1.568:
	.asciz	"!!NA_MULTIPLE_ALIGNMENT"
	.size	.L.str.1.568, 24

	.type	.L.str.2.569,@object    # @.str.2.569
.L.str.2.569:
	.asciz	".."
	.size	.L.str.2.569, 3

	.type	.L.str.3.570,@object    # @.str.3.570
.L.str.3.570:
	.asciz	"MSF:"
	.size	.L.str.3.570, 5

	.type	.L.str.4.571,@object    # @.str.4.571
.L.str.4.571:
	.asciz	"^.+MSF: +([0-9]+) +Type: +([PNX]).+Check: +([0-9]+) +\\.\\."
	.size	.L.str.4.571, 58

	.type	.L.str.5.572,@object    # @.str.5.572
.L.str.5.572:
	.asciz	"Name:"
	.size	.L.str.5.572, 6

	.type	.L.str.6.573,@object    # @.str.6.573
.L.str.6.573:
	.asciz	" \t"
	.size	.L.str.6.573, 3

	.type	.L.str.7.574,@object    # @.str.7.574
.L.str.7.574:
	.asciz	"Weight:"
	.size	.L.str.7.574, 8

	.type	.L.str.8.575,@object    # @.str.8.575
.L.str.8.575:
	.asciz	"No Weight: on line %d for %s in name section of MSF file %s\n"
	.size	.L.str.8.575, 61

	.type	.L.str.9.576,@object    # @.str.9.576
.L.str.9.576:
	.asciz	"//"
	.size	.L.str.9.576, 3

	.type	.L.str.10.577,@object   # @.str.10.577
.L.str.10.577:
	.asciz	"Invalid line (probably %d) in name section of MSF file %s:\n%s\n"
	.size	.L.str.10.577, 63

	.type	.L.str.11.578,@object   # @.str.11.578
.L.str.11.578:
	.asciz	"\n"
	.size	.L.str.11.578, 2

	.type	.L.str.12.579,@object   # @.str.12.579
.L.str.12.579:
	.asciz	"Didn't find a sequence for %s in MSF file %s\n"
	.size	.L.str.12.579, 46

	.type	.L.str.13.582,@object   # @.str.13.582
.L.str.13.582:
	.asciz	"msf.c"
	.size	.L.str.13.582, 6

	.type	.L.str.14.583,@object   # @.str.14.583
.L.str.14.583:
	.asciz	"!!NA_MULTIPLE_ALIGNMENT 1.0\n"
	.size	.L.str.14.583, 29

	.type	.L.str.15.584,@object   # @.str.15.584
.L.str.15.584:
	.asciz	"!!AA_MULTIPLE_ALIGNMENT 1.0\n"
	.size	.L.str.15.584, 29

	.type	.L.str.16.585,@object   # @.str.16.585
.L.str.16.585:
	.asciz	"WriteMSF(): couldn't guess whether that alignment is RNA or protein.\n"
	.size	.L.str.16.585, 70

	.type	.L.str.17.586,@object   # @.str.17.586
.L.str.17.586:
	.asciz	"Invalid sequence type %d in WriteMSF()\n"
	.size	.L.str.17.586, 40

	.type	.L.str.18.587,@object   # @.str.18.587
.L.str.18.587:
	.asciz	"%s\n"
	.size	.L.str.18.587, 4

	.type	.L.str.19.588,@object   # @.str.19.588
.L.str.19.588:
	.asciz	"%B %d, %Y %H:%M"
	.size	.L.str.19.588, 16

	.type	.L.str.20.589,@object   # @.str.20.589
.L.str.20.589:
	.asciz	"What time is it on earth? strftime() failed in WriteMSF().\n"
	.size	.L.str.20.589, 60

	.type	.L.str.22.590,@object   # @.str.22.590
.L.str.22.590:
	.asciz	"squid.msf"
	.size	.L.str.22.590, 10

	.type	.L.str.21.591,@object   # @.str.21.591
.L.str.21.591:
	.asciz	" %s  MSF: %d  Type: %c  %s  Check: %d  ..\n"
	.size	.L.str.21.591, 43

	.type	.L.str.23.592,@object   # @.str.23.592
.L.str.23.592:
	.asciz	" Name: %-*.*s  Len:  %5d  Check: %4d  Weight: %.2f\n"
	.size	.L.str.23.592, 52

	.type	.L.str.24.593,@object   # @.str.24.593
.L.str.24.593:
	.asciz	"//\n"
	.size	.L.str.24.593, 4

	.type	.L.str.25.594,@object   # @.str.25.594
.L.str.25.594:
	.asciz	"%*s  %-6d%*s%6d\n"
	.size	.L.str.25.594, 17

	.type	.L.str.26.595,@object   # @.str.26.595
.L.str.26.595:
	.zero	1
	.size	.L.str.26.595, 1

	.type	.L.str.27.596,@object   # @.str.27.596
.L.str.27.596:
	.asciz	"%*s  %-6d\n"
	.size	.L.str.27.596, 11

	.type	.L.str.28.597,@object   # @.str.28.597
.L.str.28.597:
	.asciz	"%-*s "
	.size	.L.str.28.597, 6

	.type	.L.str.600,@object      # @.str.600
.L.str.600:
	.asciz	" \t\n"
	.size	.L.str.600, 4

	.type	.L.str.1.601,@object    # @.str.1.601
.L.str.1.601:
	.asciz	"Failed to parse nseq/alen from first line of PHYLIP file %s\n"
	.size	.L.str.1.601, 61

	.type	.L.str.2.602,@object    # @.str.2.602
.L.str.2.602:
	.asciz	"nseq and/or alen not an integer in first line of PHYLIP file %s\n"
	.size	.L.str.2.602, 65

	.type	.L.str.3.603,@object    # @.str.3.603
.L.str.3.603:
	.asciz	"Failed to parse sequence at line %d of PHYLIP file %s\n"
	.size	.L.str.3.603, 55

	.type	.L.str.4.606,@object    # @.str.4.606
.L.str.4.606:
	.asciz	" %d  %d\n"
	.size	.L.str.4.606, 9

	.type	.L.str.5.607,@object    # @.str.5.607
.L.str.5.607:
	.asciz	"\n"
	.size	.L.str.5.607, 2

	.type	.L.str.6.608,@object    # @.str.6.608
.L.str.6.608:
	.asciz	"%s\n"
	.size	.L.str.6.608, 4

	.type	.L.str.7.609,@object    # @.str.7.609
.L.str.7.609:
	.asciz	"%-10.10s%s\n"
	.size	.L.str.7.609, 12

	.type	.L.str.616,@object      # @.str.616
.L.str.616:
	.asciz	"plan7.c"
	.size	.L.str.616, 8

	.type	.L.str.1.629,@object    # @.str.1.629
.L.str.1.629:
	.asciz	"\n"
	.size	.L.str.1.629, 2

	.type	.L.str.2.630,@object    # @.str.2.630
.L.str.2.630:
	.asciz	" "
	.size	.L.str.2.630, 2

	.type	.L.str.3.641,@object    # @.str.3.641
.L.str.3.641:
	.asciz	"Average score:  %10.2f bits\n"
	.size	.L.str.3.641, 29

	.type	.L.str.4.642,@object    # @.str.4.642
.L.str.4.642:
	.asciz	"Minimum score:  %10.2f bits\n"
	.size	.L.str.4.642, 29

	.type	.L.str.5.643,@object    # @.str.5.643
.L.str.5.643:
	.asciz	"Maximum score:  %10.2f bits\n"
	.size	.L.str.5.643, 29

	.type	.L.str.6.644,@object    # @.str.6.644
.L.str.6.644:
	.asciz	"Std. deviation: %10.2f bits\n"
	.size	.L.str.6.644, 29

	.type	.L.str.649,@object      # @.str.649
.L.str.649:
	.asciz	"plan9.c"
	.size	.L.str.649, 8

	.type	.L.str.1.650,@object    # @.str.1.650
.L.str.1.650:
	.asciz	"unnamed"
	.size	.L.str.1.650, 8

	.type	.L.str.2.657,@object    # @.str.2.657
.L.str.2.657:
	.asciz	"No support for non-protein, non-nucleic acid alphabets."
	.size	.L.str.2.657, 56

	.type	.L.str.658,@object      # @.str.658
.L.str.658:
	.asciz	"traceback failed"
	.size	.L.str.658, 17

	.type	.L.str.1.659,@object    # @.str.1.659
.L.str.1.659:
	.asciz	"Traceback failed."
	.size	.L.str.1.659, 18

	.type	.L.str.2.660,@object    # @.str.2.660
.L.str.2.660:
	.asciz	"postprob.c"
	.size	.L.str.2.660, 11

	.type	.L.str.661,@object      # @.str.661
.L.str.661:
	.asciz	"prior.c"
	.size	.L.str.661, 8

	.type	.L.str.1.662,@object    # @.str.1.662
.L.str.1.662:
	.asciz	"Can't set prior; alphabet type not set yet"
	.size	.L.str.1.662, 43

	.type	default_amino_prior.defmq,@object # @default_amino_prior.defmq
	.data
	.p2align	4
default_amino_prior.defmq:
	.long	1043750269              # float 0.178091004
	.long	1030212599              # float 0.0565910004
	.long	1036297641              # float 0.0960190966
	.long	1033895708              # float 0.0781233012
	.long	1034617048              # float 0.083497703
	.long	1035545109              # float 0.0904122963
	.long	1038773811              # float 0.114468001
	.long	1032565597              # float 0.0682132021
	.long	1047541517              # float 0.234585002
	.size	default_amino_prior.defmq, 36

	.type	default_amino_prior.defm,@object # @default_amino_prior.defm
	.p2align	4
default_amino_prior.defm:
	.long	1049269604              # float 0.27067101
	.long	1025718184              # float 0.0398479998
	.long	1016069003              # float 0.0175759997
	.long	1015445696              # float 0.016415
	.long	1013564500              # float 0.0142679997
	.long	1040651517              # float 0.131916001
	.long	1011549087              # float 0.0123910001
	.long	1018765706              # float 0.0225990005
	.long	1017562578              # float 0.020358
	.long	1023129393              # float 0.0307270009
	.long	1014688708              # float 0.015315
	.long	1027986464              # float 0.0482980013
	.long	1029464201              # float 0.0538030006
	.long	1017725787              # float 0.0206620004
	.long	1019309556              # float 0.023612
	.long	1046304164              # float 0.216147006
	.long	1041678954              # float 0.147226006
	.long	1032193116              # float 0.0654380023
	.long	997607623               # float 0.00375799998
	.long	1008574822              # float 0.00962099991
	.long	1018156894              # float 0.0214649998
	.long	1009303893              # float 0.0103000002
	.long	1010851155              # float 0.0117410002
	.long	1009929884              # float 0.0108829997
	.long	1053127692              # float 0.385650992
	.long	1015446233              # float 0.0164160002
	.long	1033637030              # float 0.076196
	.long	1024505124              # float 0.0353289992
	.long	1013191912              # float 0.0139210001
	.long	1035961815              # float 0.0935169979
	.long	1018462374              # float 0.0220340006
	.long	1021983710              # float 0.028593
	.long	1012295338              # float 0.0130860005
	.long	1018986897              # float 0.0230110008
	.long	1016761567              # float 0.0188660007
	.long	1022285968              # float 0.0291559994
	.long	1016378778              # float 0.0181530006
	.long	1024712088              # float 0.0361000001
	.long	1033042982              # float 0.0717699975
	.long	1054268207              # float 0.419640988
	.long	1057995719              # float 0.561459005
	.long	1027221423              # float 0.0454480015
	.long	1054896514              # float 0.438365996
	.long	1061396595              # float 0.76416701
	.long	1035135974              # float 0.0873640031
	.long	1048881815              # float 0.259113997
	.long	1046223163              # float 0.214939997
	.long	1041591846              # float 0.145927995
	.long	1061363661              # float 0.762203991
	.long	1048396148              # float 0.247319996
	.long	1039336720              # float 0.118662
	.long	1055003821              # float 0.441563994
	.long	1043530890              # float 0.174822003
	.long	1057482017              # float 0.53083998
	.long	1055807953              # float 0.465528995
	.long	1058363861              # float 0.583401978
	.long	1055138777              # float 0.445585996
	.long	1047035852              # float 0.227050006
	.long	1022476021              # float 0.0295100007
	.long	1039662601              # float 0.121090002
	.long	1032824610              # float 0.0701429993
	.long	1010205836              # float 0.0111400001
	.long	1017090668              # float 0.0194789991
	.long	1036114823              # float 0.0946569964
	.long	1012376942              # float 0.0131620001
	.long	1027916670              # float 0.0480379984
	.long	1033744941              # float 0.0769999996
	.long	1023863563              # float 0.0329389982
	.long	1058250397              # float 0.576638997
	.long	1033113178              # float 0.0722929984
	.long	1021794195              # float 0.0282400008
	.long	1034197523              # float 0.0803719982
	.long	1025131116              # float 0.0376610011
	.long	1044216407              # float 0.185037002
	.long	1057078408              # float 0.506783009
	.long	1033306318              # float 0.0737320036
	.long	1033018420              # float 0.0715869963
	.long	1026438665              # float 0.0425320007
	.long	1010328242              # float 0.0112539995
	.long	1022053503              # float 0.0287229996
	.long	1026055071              # float 0.0411030017
	.long	1014129289              # float 0.0147940004
	.long	1001903127              # float 0.00560999988
	.long	1009213698              # float 0.0102159996
	.long	1042106840              # float 0.153602004
	.long	1006599674              # float 0.007797
	.long	1005263939              # float 0.00717499992
	.long	1050241474              # float 0.299634993
	.long	1009893377              # float 0.010849
	.long	1065343921              # float 0.999445974
	.long	1045904329              # float 0.210189
	.long	1003013376              # float 0.00612699985
	.long	1012225544              # float 0.0130209997
	.long	1017261930              # float 0.0197979994
	.long	1013823272              # float 0.0145089999
	.long	1011181867              # float 0.0120489998
	.long	1024631289              # float 0.0357990004
	.long	1043884084              # float 0.180085003
	.long	1011928118              # float 0.0127440002
	.long	1020841786              # float 0.0264660008
	.long	1038926685              # float 0.115607001
	.long	1025055954              # float 0.0373810008
	.long	1011573783              # float 0.012414
	.long	1016392736              # float 0.0181789994
	.long	1028920619              # float 0.0517779998
	.long	1015896668              # float 0.0172550008
	.long	1000402036              # float 0.00491099991
	.long	1061945461              # float 0.796881973
	.long	1015799494              # float 0.0170740001
	.long	1049779195              # float 0.285858005
	.long	1033585356              # float 0.0758109986
	.long	1013865148              # float 0.0145479999
	.long	1014449264              # float 0.0150920004
	.long	1010465681              # float 0.0113819996
	.long	1011876578              # float 0.0126959998
	.long	1021415701              # float 0.0275350008
	.long	1035266031              # float 0.0883330032
	.long	1064419396              # float 0.944339991
	.long	999246690               # float 0.004373
	.long	1015620716              # float 0.0167410001
	.long	1035954299              # float 0.0934609994
	.long	1000028374              # float 0.00473699998
	.long	1053181413              # float 0.387252003
	.long	1051858999              # float 0.347840995
	.long	1009864386              # float 0.010822
	.long	1037620746              # float 0.105876997
	.long	1028383211              # float 0.049775999
	.long	1014310751              # float 0.0149630001
	.long	1036063687              # float 0.0942760035
	.long	1021537033              # float 0.0277609993
	.long	1009024720              # float 0.0100400001
	.long	1044406459              # float 0.187868997
	.long	1028448173              # float 0.0500180013
	.long	1038179361              # float 0.110039003
	.long	1025401430              # float 0.0386679992
	.long	1039445302              # float 0.119470999
	.long	1032241971              # float 0.0658020005
	.long	1020285587              # float 0.0254299995
	.long	995275456               # float 0.00321500003
	.long	1016694995              # float 0.0187420007
	.long	1055359733              # float 0.452170998
	.long	1038793272              # float 0.114612997
	.long	1031788047              # float 0.0624600015
	.long	1038939436              # float 0.115702003
	.long	1049725105              # float 0.284245998
	.long	1041207715              # float 0.140203997
	.long	1036879999              # float 0.100358002
	.long	1057807328              # float 0.550230026
	.long	1041462125              # float 0.143995002
	.long	1060330940              # float 0.700649023
	.long	1049467877              # float 0.276580006
	.long	1039324238              # float 0.118569002
	.long	1036492378              # float 0.0974700003
	.long	1040299665              # float 0.126672998
	.long	1041437899              # float 0.143634006
	.long	1049548508              # float 0.278982997
	.long	1052216052              # float 0.358482003
	.long	1059678323              # float 0.661750018
	.long	1031539207              # float 0.0615330003
	.long	1045178480              # float 0.199373007
	.long	1001007627              # float 0.00519300019
	.long	998529430               # float 0.00403899979
	.long	1004291129              # float 0.00672199996
	.long	1003000491              # float 0.00612099981
	.long	996362083               # float 0.0034680001
	.long	1015722721              # float 0.0169309992
	.long	997130882               # float 0.00364700006
	.long	990847345               # float 0.0021840001
	.long	1000633964              # float 0.0050189998
	.long	1002719171              # float 0.00598999998
	.long	985731502               # float 0.00147300004
	.long	998784981               # float 0.004158
	.long	1007967084              # float 0.00905499979
	.long	997057867               # float 0.00362999993
	.long	1003992629              # float 0.00658300007
	.long	995090772               # float 0.00317199994
	.long	997315565               # float 0.00368999992
	.long	994210304               # float 0.00296700001
	.long	993372785               # float 0.00277199992
	.long	993003418               # float 0.00268599996
	.size	default_amino_prior.defm, 720

	.type	.L.str.2.663,@object    # @.str.2.663
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2.663:
	.asciz	"r"
	.size	.L.str.2.663, 2

	.type	.L.str.3.664,@object    # @.str.3.664
.L.str.3.664:
	.asciz	"Failed to open HMMER prior file %s\n"
	.size	.L.str.3.664, 36

	.type	.L.str.4.665,@object    # @.str.4.665
.L.str.4.665:
	.asciz	"DIRICHLET"
	.size	.L.str.4.665, 10

	.type	.L.str.5.666,@object    # @.str.5.666
.L.str.5.666:
	.asciz	"No such prior strategy %s; failed to parse file %s"
	.size	.L.str.5.666, 51

	.type	.L.str.6.667,@object    # @.str.6.667
.L.str.6.667:
	.asciz	"AMINO"
	.size	.L.str.6.667, 6

	.type	.L.str.7.668,@object    # @.str.7.668
.L.str.7.668:
	.asciz	"HMM and/or sequences are DNA/RNA; can't use protein prior %s"
	.size	.L.str.7.668, 61

	.type	.L.str.8.669,@object    # @.str.8.669
.L.str.8.669:
	.asciz	"NUCLEIC"
	.size	.L.str.8.669, 8

	.type	.L.str.9.670,@object    # @.str.9.670
.L.str.9.670:
	.asciz	"HMM and/or sequences are protein; can't use DNA/RNA prior %s"
	.size	.L.str.9.670, 61

	.type	.L.str.10.671,@object   # @.str.10.671
.L.str.10.671:
	.asciz	"Alphabet \"%s\" in prior file %s isn't valid."
	.size	.L.str.10.671, 44

	.type	.L.str.11.672,@object   # @.str.11.672
.L.str.11.672:
	.asciz	"%d is bad; need at least one state transition mixture component"
	.size	.L.str.11.672, 64

	.type	.L.str.12.673,@object   # @.str.12.673
.L.str.12.673:
	.asciz	"%d is bad, too many transition components (MAXDCHLET = %d)\n"
	.size	.L.str.12.673, 60

	.type	.L.str.13.674,@object   # @.str.13.674
.L.str.13.674:
	.asciz	"%d is bad; need at least one match emission mixture component"
	.size	.L.str.13.674, 62

	.type	.L.str.14.675,@object   # @.str.14.675
.L.str.14.675:
	.asciz	"%d is bad; too many match components (MAXDCHLET = %d)\n"
	.size	.L.str.14.675, 55

	.type	.L.str.15.676,@object   # @.str.15.676
.L.str.15.676:
	.asciz	"%d is bad; need at least one insert emission mixture component"
	.size	.L.str.15.676, 63

	.type	.L.str.16.677,@object   # @.str.16.677
.L.str.16.677:
	.asciz	"%d is bad; too many insert components (MAXDCHLET = %d)\n"
	.size	.L.str.16.677, 56

	.type	.L.str.17.678,@object   # @.str.17.678
.L.str.17.678:
	.asciz	"PAM prior is only valid for protein sequences"
	.size	.L.str.17.678, 46

	.type	.L.str.18.679,@object   # @.str.18.679
.L.str.18.679:
	.asciz	"PAM prior may only be applied over an existing Dirichlet prior"
	.size	.L.str.18.679, 63

	.type	.L.str.19.680,@object   # @.str.19.680
.L.str.19.680:
	.asciz	"PAM prior requires that the insert emissions be a single Dirichlet"
	.size	.L.str.19.680, 67

	.type	.L.str.20.681,@object   # @.str.20.681
.L.str.20.681:
	.asciz	"aa"
	.size	.L.str.20.681, 3

	.type	.L.str.21.682,@object   # @.str.21.682
.L.str.21.682:
	.asciz	"BLASTMAT"
	.size	.L.str.21.682, 9

	.type	.L.str.22.683,@object   # @.str.22.683
.L.str.22.683:
	.asciz	"Failed to open PAM scoring matrix file %s"
	.size	.L.str.22.683, 42

	.type	.L.str.23.684,@object   # @.str.23.684
.L.str.23.684:
	.asciz	"Failed to parse PAM scoring matrix file %s"
	.size	.L.str.23.684, 43

	.type	.L.str.24.687,@object   # @.str.24.687
.L.str.24.687:
	.asciz	"Failed to open null model file %s\n"
	.size	.L.str.24.687, 35

	.type	.L.str.25.688,@object   # @.str.25.688
.L.str.25.688:
	.asciz	"Alphabet type conflict; null model in %s is inappropriate\n"
	.size	.L.str.25.688, 59

	.type	.L.str.26.689,@object   # @.str.26.689
.L.str.26.689:
	.asciz	"%s is not in HMMER null model file format"
	.size	.L.str.26.689, 42

	.type	.L.str.27.690,@object   # @.str.27.690
.L.str.27.690:
	.asciz	"X-PRT annotation out of range"
	.size	.L.str.27.690, 30

	.type	.L.str.28.691,@object   # @.str.28.691
.L.str.28.691:
	.asciz	"X-PRM annotation out of range"
	.size	.L.str.28.691, 30

	.type	.L.str.29.692,@object   # @.str.29.692
.L.str.29.692:
	.asciz	"X-PRI annotation out of range"
	.size	.L.str.29.692, 30

	.type	.L.str.699,@object      # @.str.699
.L.str.699:
	.asciz	"Can't read a SELEX format alignment from a pipe, stdin, or gzip'ed file"
	.size	.L.str.699, 72

	.type	.L.str.1.700,@object    # @.str.1.700
.L.str.1.700:
	.asciz	"#=CS"
	.size	.L.str.1.700, 5

	.type	.L.str.2.701,@object    # @.str.2.701
.L.str.2.701:
	.asciz	"#=RF"
	.size	.L.str.2.701, 5

	.type	.L.str.3.702,@object    # @.str.3.702
.L.str.3.702:
	.asciz	" \t\n"
	.size	.L.str.3.702, 4

	.type	commentsyms,@object     # @commentsyms
	.data
commentsyms:
	.asciz	"%#"
	.size	commentsyms, 3

	.type	.L.str.4.703,@object    # @.str.4.703
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4.703:
	.asciz	"selex.c"
	.size	.L.str.4.703, 8

	.type	.L.str.5.704,@object    # @.str.5.704
.L.str.5.704:
	.asciz	"#=SS"
	.size	.L.str.5.704, 5

	.type	.L.str.6.705,@object    # @.str.6.705
.L.str.6.705:
	.asciz	"#=SA"
	.size	.L.str.6.705, 5

	.type	.L.str.7.706,@object    # @.str.7.706
.L.str.7.706:
	.asciz	"Parse error in ReadSELEX()"
	.size	.L.str.7.706, 27

	.type	.L.str.8.707,@object    # @.str.8.707
.L.str.8.707:
	.asciz	"#=AU"
	.size	.L.str.8.707, 5

	.type	.L.str.9.708,@object    # @.str.9.708
.L.str.9.708:
	.asciz	"\n"
	.size	.L.str.9.708, 2

	.type	.L.str.10.709,@object   # @.str.10.709
.L.str.10.709:
	.asciz	"#=ID"
	.size	.L.str.10.709, 5

	.type	.L.str.11.710,@object   # @.str.11.710
.L.str.11.710:
	.asciz	"#=AC"
	.size	.L.str.11.710, 5

	.type	.L.str.12.711,@object   # @.str.12.711
.L.str.12.711:
	.asciz	"#=DE"
	.size	.L.str.12.711, 5

	.type	.L.str.13.712,@object   # @.str.13.712
.L.str.13.712:
	.asciz	"#=GA"
	.size	.L.str.13.712, 5

	.type	.L.str.14.713,@object   # @.str.14.713
.L.str.14.713:
	.asciz	"Parse error in #=GA line in ReadSELEX()"
	.size	.L.str.14.713, 40

	.type	.L.str.15.714,@object   # @.str.15.714
.L.str.15.714:
	.asciz	"#=TC"
	.size	.L.str.15.714, 5

	.type	.L.str.16.715,@object   # @.str.16.715
.L.str.16.715:
	.asciz	"Parse error in #=TC line in ReadSELEX()"
	.size	.L.str.16.715, 40

	.type	.L.str.17.716,@object   # @.str.17.716
.L.str.17.716:
	.asciz	"#=NC"
	.size	.L.str.17.716, 5

	.type	.L.str.18.717,@object   # @.str.18.717
.L.str.18.717:
	.asciz	"Parse error in #=NC line in ReadSELEX()"
	.size	.L.str.18.717, 40

	.type	.L.str.19.718,@object   # @.str.19.718
.L.str.19.718:
	.asciz	"#=SQ"
	.size	.L.str.19.718, 5

	.type	.L.str.20.719,@object   # @.str.20.719
.L.str.20.719:
	.asciz	"Parse error in #=SQ line in ReadSELEX()"
	.size	.L.str.20.719, 40

	.type	.L.str.21.720,@object   # @.str.21.720
.L.str.21.720:
	.asciz	"Parse error in #=SQ line in ReadSELEX(): weight is not a number"
	.size	.L.str.21.720, 64

	.type	.L.str.22.721,@object   # @.str.22.721
.L.str.22.721:
	.asciz	"Parse error in #=SQ line in ReadSELEX(): incomplete line"
	.size	.L.str.22.721, 57

	.type	.L.str.23.722,@object   # @.str.23.722
.L.str.23.722:
	.asciz	".:"
	.size	.L.str.23.722, 3

	.type	.L.str.24.723,@object   # @.str.24.723
.L.str.24.723:
	.asciz	":\t "
	.size	.L.str.24.723, 4

	.type	.L.str.25.724,@object   # @.str.25.724
.L.str.25.724:
	.asciz	"Parse error in #=CS line in ReadSELEX()"
	.size	.L.str.25.724, 40

	.type	.L.str.26.725,@object   # @.str.26.725
.L.str.26.725:
	.asciz	"Parse error in #=RF line in ReadSELEX()"
	.size	.L.str.26.725, 40

	.type	.L.str.27.726,@object   # @.str.27.726
.L.str.27.726:
	.asciz	"Parse error in #=SS line in ReadSELEX()"
	.size	.L.str.27.726, 40

	.type	.L.str.28.727,@object   # @.str.28.727
.L.str.28.727:
	.asciz	"Parse error in #=SA line in ReadSELEX()"
	.size	.L.str.28.727, 40

	.type	.L.str.29.728,@object   # @.str.29.728
.L.str.29.728:
	.asciz	"#="
	.size	.L.str.29.728, 3

	.type	.L.str.30.729,@object   # @.str.30.729
.L.str.30.729:
	.asciz	"Parse error in alignment line in ReadSELEX()"
	.size	.L.str.30.729, 45

	.type	.L.str.31.730,@object   # @.str.31.730
.L.str.31.730:
	.asciz	"sequences may be in different orders in blocks of %s?"
	.size	.L.str.31.730, 54

	.type	.L.str.47.731,@object   # @.str.47.731
.L.str.47.731:
	.asciz	"TAB characters will corrupt a SELEX alignment! Please remove them first."
	.size	.L.str.47.731, 73

	.type	.L.str.33.734,@object   # @.str.33.734
.L.str.33.734:
	.asciz	"# %s\n"
	.size	.L.str.33.734, 6

	.type	.L.str.34.735,@object   # @.str.34.735
.L.str.34.735:
	.asciz	"#=ID %s\n"
	.size	.L.str.34.735, 9

	.type	.L.str.35.736,@object   # @.str.35.736
.L.str.35.736:
	.asciz	"#=AC %s\n"
	.size	.L.str.35.736, 9

	.type	.L.str.36.737,@object   # @.str.36.737
.L.str.36.737:
	.asciz	"#=DE %s\n"
	.size	.L.str.36.737, 9

	.type	.L.str.37.738,@object   # @.str.37.738
.L.str.37.738:
	.asciz	"#=AU %s\n"
	.size	.L.str.37.738, 9

	.type	.L.str.38.739,@object   # @.str.38.739
.L.str.38.739:
	.asciz	"#=GA %.1f %.1f\n"
	.size	.L.str.38.739, 16

	.type	.L.str.39.740,@object   # @.str.39.740
.L.str.39.740:
	.asciz	"#=GA %.1f\n"
	.size	.L.str.39.740, 11

	.type	.L.str.40.741,@object   # @.str.40.741
.L.str.40.741:
	.asciz	"#=NC %.1f %.1f\n"
	.size	.L.str.40.741, 16

	.type	.L.str.41.742,@object   # @.str.41.742
.L.str.41.742:
	.asciz	"#=NC %.1f\n"
	.size	.L.str.41.742, 11

	.type	.L.str.42.743,@object   # @.str.42.743
.L.str.42.743:
	.asciz	"#=TC %.1f %.1f\n"
	.size	.L.str.42.743, 16

	.type	.L.str.43.744,@object   # @.str.43.744
.L.str.43.744:
	.asciz	"#=TC %.1f\n"
	.size	.L.str.43.744, 11

	.type	.L.str.45.745,@object   # @.str.45.745
.L.str.45.745:
	.asciz	"-"
	.size	.L.str.45.745, 2

	.type	.L.str.44.746,@object   # @.str.44.746
.L.str.44.746:
	.asciz	"#=SQ %-*.*s %6.4f %s %s %d..%d::%d %s\n"
	.size	.L.str.44.746, 39

	.type	.L.str.46.747,@object   # @.str.46.747
.L.str.46.747:
	.asciz	"%-*.*s %s\n"
	.size	.L.str.46.747, 11

	.type	.L.str.32.748,@object   # @.str.32.748
.L.str.32.748:
	.asciz	"r"
	.size	.L.str.32.748, 2

	.type	.L.str.751,@object      # @.str.751
.L.str.751:
	.asciz	"shuffle.c"
	.size	.L.str.751, 10

	.type	.L.str.1.752,@object    # @.str.1.752
.L.str.1.752:
	.asciz	"hey, you didn't end on s_f."
	.size	.L.str.1.752, 28

	.type	.L.str.2.753,@object    # @.str.2.753
.L.str.2.753:
	.asciz	"hey, pos (%d) != len (%d)."
	.size	.L.str.2.753, 27

	.type	squid_errno,@object     # @squid_errno
	.comm	squid_errno,4,4
	.type	.L.str.760,@object      # @.str.760
.L.str.760:
	.asciz	"\nFATAL: "
	.size	.L.str.760, 9

	.type	.L.str.1.761,@object    # @.str.1.761
.L.str.1.761:
	.asciz	"\n"
	.size	.L.str.1.761, 2

	.type	.L.str.2.764,@object    # @.str.2.764
.L.str.2.764:
	.asciz	"WARNING: "
	.size	.L.str.2.764, 10

	.type	.L.str.3.767,@object    # @.str.3.767
.L.str.3.767:
	.asciz	"\nPANIC [%s line %d] "
	.size	.L.str.3.767, 21

	.type	.L.str.4.768,@object    # @.str.4.768
.L.str.4.768:
	.asciz	"Unusual error"
	.size	.L.str.4.768, 14

	.type	.L.str.78.771,@object   # @.str.78.771
.L.str.78.771:
	.asciz	"sqio.c"
	.size	.L.str.78.771, 7

	.type	.L.str.52.772,@object   # @.str.52.772
.L.str.52.772:
	.asciz	"-"
	.size	.L.str.52.772, 2

	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"[STDIN]"
	.size	.L.str.110, 8

	.type	.L.str.111,@object      # @.str.111
.L.str.111:
	.asciz	"r"
	.size	.L.str.111, 2

	.type	.L.str.112,@object      # @.str.112
.L.str.112:
	.asciz	"Can't autodetect sequence file format from a stdin or gzip pipe"
	.size	.L.str.112, 64

	.type	.L.str.113,@object      # @.str.113
.L.str.113:
	.asciz	"Can't determine format of sequence file %s"
	.size	.L.str.113, 43

	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"Failed to read any alignment data from file %s"
	.size	.L.str.114, 47

	.type	.L.str.115,@object      # @.str.115
.L.str.115:
	.asciz	"SSIGetFilePosition() failed"
	.size	.L.str.115, 28

	.type	.L.str.7.775,@object    # @.str.7.775
.L.str.7.775:
	.asciz	">>>>"
	.size	.L.str.7.775, 5

	.type	.L.str.8.776,@object    # @.str.8.776
.L.str.8.776:
	.asciz	"Len: "
	.size	.L.str.8.776, 6

	.type	.L.str.9.777,@object    # @.str.9.777
.L.str.9.777:
	.asciz	"!!AA_SEQUENCE"
	.size	.L.str.9.777, 14

	.type	.L.str.10.778,@object   # @.str.10.778
.L.str.10.778:
	.asciz	"!!NA_SEQUENCE"
	.size	.L.str.10.778, 14

	.type	.L.str.11.779,@object   # @.str.11.779
.L.str.11.779:
	.asciz	"# STOCKHOLM 1."
	.size	.L.str.11.779, 15

	.type	.L.str.12.780,@object   # @.str.12.780
.L.str.12.780:
	.asciz	"CLUSTAL"
	.size	.L.str.12.780, 8

	.type	.L.str.13.781,@object   # @.str.13.781
.L.str.13.781:
	.asciz	"multiple sequence alignment"
	.size	.L.str.13.781, 28

	.type	.L.str.14.782,@object   # @.str.14.782
.L.str.14.782:
	.asciz	"!!AA_MULTIPLE_ALIGNMENT"
	.size	.L.str.14.782, 24

	.type	.L.str.15.783,@object   # @.str.15.783
.L.str.15.783:
	.asciz	"!!NA_MULTIPLE_ALIGNMENT"
	.size	.L.str.15.783, 24

	.type	.L.str.16.784,@object   # @.str.16.784
.L.str.16.784:
	.asciz	" \t\n"
	.size	.L.str.16.784, 4

	.type	.L.str.17.785,@object   # @.str.17.785
.L.str.17.785:
	.asciz	"#=AU"
	.size	.L.str.17.785, 5

	.type	.L.str.18.786,@object   # @.str.18.786
.L.str.18.786:
	.asciz	"#=ID"
	.size	.L.str.18.786, 5

	.type	.L.str.19.787,@object   # @.str.19.787
.L.str.19.787:
	.asciz	"#=AC"
	.size	.L.str.19.787, 5

	.type	.L.str.20.788,@object   # @.str.20.788
.L.str.20.788:
	.asciz	"#=DE"
	.size	.L.str.20.788, 5

	.type	.L.str.21.789,@object   # @.str.21.789
.L.str.21.789:
	.asciz	"#=GA"
	.size	.L.str.21.789, 5

	.type	.L.str.22.790,@object   # @.str.22.790
.L.str.22.790:
	.asciz	"#=TC"
	.size	.L.str.22.790, 5

	.type	.L.str.23.791,@object   # @.str.23.791
.L.str.23.791:
	.asciz	"#=NC"
	.size	.L.str.23.791, 5

	.type	.L.str.24.792,@object   # @.str.24.792
.L.str.24.792:
	.asciz	"#=SQ"
	.size	.L.str.24.792, 5

	.type	.L.str.25.793,@object   # @.str.25.793
.L.str.25.793:
	.asciz	"#=SS"
	.size	.L.str.25.793, 5

	.type	.L.str.26.794,@object   # @.str.26.794
.L.str.26.794:
	.asciz	"#=CS"
	.size	.L.str.26.794, 5

	.type	.L.str.27.795,@object   # @.str.27.795
.L.str.27.795:
	.asciz	"#=RF"
	.size	.L.str.27.795, 5

	.type	.L.str.28.796,@object   # @.str.28.796
.L.str.28.796:
	.asciz	"///"
	.size	.L.str.28.796, 4

	.type	.L.str.29.797,@object   # @.str.29.797
.L.str.29.797:
	.asciz	"ENTRY "
	.size	.L.str.29.797, 7

	.type	.L.str.6.798,@object    # @.str.6.798
.L.str.6.798:
	.asciz	".."
	.size	.L.str.6.798, 3

	.type	.L.str.30.799,@object   # @.str.30.799
.L.str.30.799:
	.asciz	"MSF:"
	.size	.L.str.30.799, 5

	.type	.L.str.31.800,@object   # @.str.31.800
.L.str.31.800:
	.asciz	"Check:"
	.size	.L.str.31.800, 7

	.type	.L.str.32.801,@object   # @.str.32.801
.L.str.32.801:
	.asciz	" Check: "
	.size	.L.str.32.801, 9

	.type	.L.str.33.802,@object   # @.str.33.802
.L.str.33.802:
	.asciz	"LOCUS "
	.size	.L.str.33.802, 7

	.type	.L.str.34.803,@object   # @.str.34.803
.L.str.34.803:
	.asciz	"ORIGIN "
	.size	.L.str.34.803, 8

	.type	.L.str.35.804,@object   # @.str.35.804
.L.str.35.804:
	.asciz	"ID   "
	.size	.L.str.35.804, 6

	.type	.L.str.36.805,@object   # @.str.36.805
.L.str.36.805:
	.asciz	"SQ   "
	.size	.L.str.36.805, 6

	.type	.L.str.37.806,@object   # @.str.37.806
.L.str.37.806:
	.asciz	"#%"
	.size	.L.str.37.806, 3

	.type	.L.str.38.809,@object   # @.str.38.809
.L.str.38.809:
	.asciz	"Sequence file contains no data"
	.size	.L.str.38.809, 31

	.type	protonly,@object        # @protonly
	.data
	.p2align	3
protonly:
	.quad	.L.str.142
	.size	protonly, 8

	.type	primenuc,@object        # @primenuc
	.p2align	3
primenuc:
	.quad	.L.str.143
	.size	primenuc, 8

	.type	aminos,@object          # @aminos
	.p2align	3
aminos:
	.quad	.L.str.144
	.size	aminos, 8

	.type	.L.str.144,@object      # @.str.144
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.144:
	.asciz	"ABCDEFGHIKLMNPQRSTVWXYZ*"
	.size	.L.str.144, 25

	.type	.L.str.143,@object      # @.str.143
.L.str.143:
	.asciz	"ACGTUN"
	.size	.L.str.143, 7

	.type	.L.str.142,@object      # @.str.142
.L.str.142:
	.asciz	"EFIPQZ"
	.size	.L.str.142, 7

	.type	.L.str.810,@object      # @.str.810
.L.str.810:
	.asciz	"SeqfilePosition() failed: in a nonrewindable data file or stream"
	.size	.L.str.810, 65

	.type	.L.str.1.811,@object    # @.str.1.811
.L.str.1.811:
	.asciz	"SSISetFilePosition failed, but that shouldn't happen."
	.size	.L.str.1.811, 54

	.type	.L.str.2.812,@object    # @.str.2.812
.L.str.2.812:
	.asciz	"SeqfileRewind() failed: in a nonrewindable data file or stream"
	.size	.L.str.2.812, 63

	.type	.L.str.3.819,@object    # @.str.3.819
.L.str.3.819:
	.asciz	" "
	.size	.L.str.3.819, 2

	.type	.L.str.4.820,@object    # @.str.4.820
.L.str.4.820:
	.asciz	"Invalid flag %d to SetSeqinfoString()"
	.size	.L.str.4.820, 38

	.type	.L.str.5.823,@object    # @.str.5.823
.L.str.5.823:
	.asciz	"ACGTUNRYMKSWHBVDacgtunrymkswhbvd"
	.size	.L.str.5.823, 33

	.type	.L.str.141,@object      # @.str.141
.L.str.141:
	.asciz	"  Length: "
	.size	.L.str.141, 11

	.type	.L.str.116,@object      # @.str.116
.L.str.116:
	.asciz	"\n\t "
	.size	.L.str.116, 4

	.type	.L.str.136,@object      # @.str.136
.L.str.136:
	.asciz	">>>>([^ ]+) .+2BIT +Len: ([0-9]+)"
	.size	.L.str.136, 34

	.type	.L.str.137,@object      # @.str.137
.L.str.137:
	.asciz	">>>>([^ ]+) .+ASCII +Len: [0-9]+"
	.size	.L.str.137, 33

	.type	.L.str.138,@object      # @.str.138
.L.str.138:
	.asciz	"bogus GCGdata format? %s"
	.size	.L.str.138, 25

	.type	.L.str.139,@object      # @.str.139
.L.str.139:
	.asciz	"malloc failed"
	.size	.L.str.139, 14

	.type	.L.str.140,@object      # @.str.140
.L.str.140:
	.asciz	"fread failed"
	.size	.L.str.140, 13

	.type	.L.str.133,@object      # @.str.133
.L.str.133:
	.asciz	"ENTRY"
	.size	.L.str.133, 6

	.type	.L.str.134,@object      # @.str.134
.L.str.134:
	.asciz	"TITLE"
	.size	.L.str.134, 6

	.type	.L.str.122,@object      # @.str.122
.L.str.122:
	.asciz	"ACCESSION"
	.size	.L.str.122, 10

	.type	.L.str.135,@object      # @.str.135
.L.str.135:
	.asciz	"SEQUENCE"
	.size	.L.str.135, 9

	.type	.L.str.43.826,@object   # @.str.43.826
.L.str.43.826:
	.asciz	"\n"
	.size	.L.str.43.826, 2

	.type	.L.str.127,@object      # @.str.127
.L.str.127:
	.asciz	"ID  "
	.size	.L.str.127, 5

	.type	.L.str.128,@object      # @.str.128
.L.str.128:
	.asciz	"AC  "
	.size	.L.str.128, 5

	.type	.L.str.129,@object      # @.str.129
.L.str.129:
	.asciz	";  \t\n"
	.size	.L.str.129, 6

	.type	.L.str.130,@object      # @.str.130
.L.str.130:
	.asciz	"DE  "
	.size	.L.str.130, 5

	.type	.L.str.131,@object      # @.str.131
.L.str.131:
	.asciz	"SQ"
	.size	.L.str.131, 3

	.type	.L.str.132,@object      # @.str.132
.L.str.132:
	.asciz	"     "
	.size	.L.str.132, 6

	.type	.L.str.126,@object      # @.str.126
.L.str.126:
	.asciz	"File %s does not appear to be in FASTA format at line %d.\nYou may want to specify the file format on the command line.\nUsually this is done with an option --informat <fmt>.\n"
	.size	.L.str.126, 174

	.type	.L.str.120,@object      # @.str.120
.L.str.120:
	.asciz	"LOCUS"
	.size	.L.str.120, 6

	.type	.L.str.121.827,@object  # @.str.121.827
.L.str.121.827:
	.asciz	"DEFINITION"
	.size	.L.str.121.827, 11

	.type	.L.str.123,@object      # @.str.123
.L.str.123:
	.asciz	"VERSION"
	.size	.L.str.123, 8

	.type	.L.str.124,@object      # @.str.124
.L.str.124:
	.asciz	"ORIGIN"
	.size	.L.str.124, 7

	.type	.L.str.125,@object      # @.str.125
.L.str.125:
	.asciz	"LOCUS  "
	.size	.L.str.125, 8

	.type	.L.str.119,@object      # @.str.119
.L.str.119:
	.asciz	"//"
	.size	.L.str.119, 3

	.type	.L.str.117,@object      # @.str.117
.L.str.117:
	.asciz	"; DNA sequence"
	.size	.L.str.117, 15

	.type	.L.str.118.828,@object  # @.str.118.828
.L.str.118.828:
	.asciz	",\n\t "
	.size	.L.str.118.828, 5

	.type	.L.str.40.835,@object   # @.str.40.835
.L.str.40.835:
	.zero	1
	.size	.L.str.40.835, 1

	.type	.L.str.39.836,@object   # @.str.39.836
.L.str.39.836:
	.asciz	">%s %s\n"
	.size	.L.str.39.836, 8

	.type	.L.str.41.837,@object   # @.str.41.837
.L.str.41.837:
	.asciz	"%s\n"
	.size	.L.str.41.837, 4

	.type	.L.str.42.838,@object   # @.str.42.838
.L.str.42.838:
	.asciz	"Tried to write an aligned format with WriteSeq() -- bad, bad."
	.size	.L.str.42.838, 62

	.type	.L.str.44.839,@object   # @.str.44.839
.L.str.44.839:
	.asciz	"LOCUS       %s       %d bp\n"
	.size	.L.str.44.839, 28

	.type	.L.str.46.840,@object   # @.str.46.840
.L.str.46.840:
	.asciz	"."
	.size	.L.str.46.840, 2

	.type	.L.str.45.841,@object   # @.str.45.841
.L.str.45.841:
	.asciz	"ACCESSION   %s\n"
	.size	.L.str.45.841, 16

	.type	.L.str.47.842,@object   # @.str.47.842
.L.str.47.842:
	.asciz	"DEFINITION  %s\n"
	.size	.L.str.47.842, 16

	.type	.L.str.48.843,@object   # @.str.48.843
.L.str.48.843:
	.asciz	"VERSION     %s\n"
	.size	.L.str.48.843, 16

	.type	.L.str.49.844,@object   # @.str.49.844
.L.str.49.844:
	.asciz	"ORIGIN      \n"
	.size	.L.str.49.844, 14

	.type	.L.str.50.845,@object   # @.str.50.845
.L.str.50.845:
	.asciz	"\n//"
	.size	.L.str.50.845, 4

	.type	.L.str.51.846,@object   # @.str.51.846
.L.str.51.846:
	.asciz	">>>>%s  9/95  ASCII  Len: %d\n"
	.size	.L.str.51.846, 30

	.type	.L.str.53.847,@object   # @.str.53.847
.L.str.53.847:
	.asciz	"ENTRY          %s\n"
	.size	.L.str.53.847, 19

	.type	.L.str.54.848,@object   # @.str.54.848
.L.str.54.848:
	.asciz	"TITLE          %s\n"
	.size	.L.str.54.848, 19

	.type	.L.str.55.849,@object   # @.str.55.849
.L.str.55.849:
	.asciz	"ACCESSION      %s\n"
	.size	.L.str.55.849, 19

	.type	.L.str.56.850,@object   # @.str.56.850
.L.str.56.850:
	.asciz	"SUMMARY                                #Length %d  #Checksum  %d\n"
	.size	.L.str.56.850, 66

	.type	.L.str.57.851,@object   # @.str.57.851
.L.str.57.851:
	.asciz	"SEQUENCE\n"
	.size	.L.str.57.851, 10

	.type	.L.str.58.852,@object   # @.str.58.852
.L.str.58.852:
	.asciz	"                  5        10        15        20        25        30\n"
	.size	.L.str.58.852, 71

	.type	.L.str.59.853,@object   # @.str.59.853
.L.str.59.853:
	.asciz	"\n///"
	.size	.L.str.59.853, 5

	.type	.L.str.60.854,@object   # @.str.60.854
.L.str.60.854:
	.asciz	"NAM  %s\n"
	.size	.L.str.60.854, 9

	.type	.L.str.61.855,@object   # @.str.61.855
.L.str.61.855:
	.asciz	"SRC  %s %s %d..%d::%d\n"
	.size	.L.str.61.855, 23

	.type	.L.str.62.856,@object   # @.str.62.856
.L.str.62.856:
	.asciz	"DES  %s\n"
	.size	.L.str.62.856, 9

	.type	.L.str.63.857,@object   # @.str.63.857
.L.str.63.857:
	.asciz	"SEQ  +SS\n"
	.size	.L.str.63.857, 10

	.type	.L.str.64.858,@object   # @.str.64.858
.L.str.64.858:
	.asciz	"SEQ\n"
	.size	.L.str.64.858, 5

	.type	.L.str.65.859,@object   # @.str.65.859
.L.str.65.859:
	.asciz	"\n++"
	.size	.L.str.65.859, 4

	.type	.L.str.66.860,@object   # @.str.66.860
.L.str.66.860:
	.asciz	"ID   %s\n"
	.size	.L.str.66.860, 9

	.type	.L.str.67.861,@object   # @.str.67.861
.L.str.67.861:
	.asciz	"AC   %s\n"
	.size	.L.str.67.861, 9

	.type	.L.str.68.862,@object   # @.str.68.862
.L.str.68.862:
	.asciz	"DE   %s\n"
	.size	.L.str.68.862, 9

	.type	.L.str.69.863,@object   # @.str.69.863
.L.str.69.863:
	.asciz	"SQ             %d BP\n"
	.size	.L.str.69.863, 22

	.type	.L.str.70.864,@object   # @.str.70.864
.L.str.70.864:
	.asciz	"    %s  Length: %d  (today)  Check: %d  ..\n"
	.size	.L.str.70.864, 44

	.type	.L.str.71.865,@object   # @.str.71.865
.L.str.71.865:
	.asciz	"; ### from DNA Strider ;-)\n"
	.size	.L.str.71.865, 28

	.type	.L.str.72.866,@object   # @.str.72.866
.L.str.72.866:
	.asciz	"; DNA sequence  %s, %d bases, %d checksum.\n;\n"
	.size	.L.str.72.866, 46

	.type	.L.str.73.867,@object   # @.str.73.867
.L.str.73.867:
	.asciz	";%s %s\n"
	.size	.L.str.73.867, 8

	.type	.L.str.74.868,@object   # @.str.74.868
.L.str.74.868:
	.asciz	"1"
	.size	.L.str.74.868, 2

	.type	.L.str.75.869,@object   # @.str.75.869
.L.str.75.869:
	.asciz	"%8d "
	.size	.L.str.75.869, 5

	.type	.L.str.76.870,@object   # @.str.76.870
.L.str.76.870:
	.asciz	"         "
	.size	.L.str.76.870, 10

	.type	.L.str.77.871,@object   # @.str.77.871
.L.str.77.871:
	.asciz	"%s%s\n"
	.size	.L.str.77.871, 6

	.type	.L.str.79.874,@object   # @.str.79.874
.L.str.79.874:
	.asciz	"FASTA"
	.size	.L.str.79.874, 6

	.type	.L.str.80.875,@object   # @.str.80.875
.L.str.80.875:
	.asciz	"GENBANK"
	.size	.L.str.80.875, 8

	.type	.L.str.81.876,@object   # @.str.81.876
.L.str.81.876:
	.asciz	"EMBL"
	.size	.L.str.81.876, 5

	.type	.L.str.82.877,@object   # @.str.82.877
.L.str.82.877:
	.asciz	"GCG"
	.size	.L.str.82.877, 4

	.type	.L.str.83.878,@object   # @.str.83.878
.L.str.83.878:
	.asciz	"GCGDATA"
	.size	.L.str.83.878, 8

	.type	.L.str.84.879,@object   # @.str.84.879
.L.str.84.879:
	.asciz	"RAW"
	.size	.L.str.84.879, 4

	.type	.L.str.85.880,@object   # @.str.85.880
.L.str.85.880:
	.asciz	"IG"
	.size	.L.str.85.880, 3

	.type	.L.str.86.881,@object   # @.str.86.881
.L.str.86.881:
	.asciz	"STRIDER"
	.size	.L.str.86.881, 8

	.type	.L.str.87.882,@object   # @.str.87.882
.L.str.87.882:
	.asciz	"IDRAW"
	.size	.L.str.87.882, 6

	.type	.L.str.88.883,@object   # @.str.88.883
.L.str.88.883:
	.asciz	"ZUKER"
	.size	.L.str.88.883, 6

	.type	.L.str.89.884,@object   # @.str.89.884
.L.str.89.884:
	.asciz	"PIR"
	.size	.L.str.89.884, 4

	.type	.L.str.90.885,@object   # @.str.90.885
.L.str.90.885:
	.asciz	"SQUID"
	.size	.L.str.90.885, 6

	.type	.L.str.91.886,@object   # @.str.91.886
.L.str.91.886:
	.asciz	"STOCKHOLM"
	.size	.L.str.91.886, 10

	.type	.L.str.92.887,@object   # @.str.92.887
.L.str.92.887:
	.asciz	"SELEX"
	.size	.L.str.92.887, 6

	.type	.L.str.93.888,@object   # @.str.93.888
.L.str.93.888:
	.asciz	"MSF"
	.size	.L.str.93.888, 4

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"A2M"
	.size	.L.str.94, 4

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"PHYLIP"
	.size	.L.str.95, 7

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"EPS"
	.size	.L.str.96, 4

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"unknown"
	.size	.L.str.97, 8

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"Genbank"
	.size	.L.str.98, 8

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"GCG data library"
	.size	.L.str.99, 17

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"raw"
	.size	.L.str.100, 4

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	"Intelligenetics"
	.size	.L.str.101, 16

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"MacStrider"
	.size	.L.str.102, 11

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"Idraw Postscript"
	.size	.L.str.103, 17

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"Zuker"
	.size	.L.str.104, 6

	.type	.L.str.105,@object      # @.str.105
.L.str.105:
	.asciz	"Stockholm"
	.size	.L.str.105, 10

	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"Clustal"
	.size	.L.str.106, 8

	.type	.L.str.107,@object      # @.str.107
.L.str.107:
	.asciz	"a2m"
	.size	.L.str.107, 4

	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"Phylip"
	.size	.L.str.108, 7

	.type	.L.str.109,@object      # @.str.109
.L.str.109:
	.asciz	"Bad code passed to MSAFormat2String()"
	.size	.L.str.109, 38

	.type	.L.str.891,@object      # @.str.891
.L.str.891:
	.asciz	"%s\n"
	.size	.L.str.891, 4

	.type	.L.str.1.892,@object    # @.str.1.892
.L.str.1.892:
	.asciz	"SQUID %s (%s)\n"
	.size	.L.str.1.892, 15

	.type	.L.str.2.893,@object    # @.str.2.893
.L.str.2.893:
	.asciz	"1.9g"
	.size	.L.str.2.893, 5

	.type	.L.str.3.894,@object    # @.str.3.894
.L.str.3.894:
	.asciz	"January 2003"
	.size	.L.str.3.894, 13

	.type	.L.str.4.895,@object    # @.str.4.895
.L.str.4.895:
	.asciz	"Copyright (C) 1992-2003 HHMI/Washington University School of Medicine"
	.size	.L.str.4.895, 70

	.type	.L.str.5.896,@object    # @.str.5.896
.L.str.5.896:
	.asciz	"Freely distributed under the GNU General Public License (GPL)"
	.size	.L.str.5.896, 62

	.type	.L.str.6.897,@object    # @.str.6.897
.L.str.6.897:
	.asciz	"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
	.size	.L.str.6.897, 73

	.type	Gammln.cof,@object      # @Gammln.cof
	.data
	.p2align	4
Gammln.cof:
	.quad	4676684995667158470     # double 46945.803361843849
	.quad	-4538769825353309280    # double -156060.5207784446
	.quad	4686335469125336954     # double 206504.95680141059
	.quad	-4539359680468581019    # double -138893.47750953879
	.quad	4677148461916939764     # double 50317.964150857093
	.quad	-4556867891320761792    # double -9601.5923291827785
	.quad	4650939336423768624     # double 878.58559308952499
	.quad	-4593797850450270494    # double -31.551539060986109
	.quad	4598910465369060390     # double 0.29081434211622292
	.quad	-4670681359518973181    # double -2.319827630494973E-4
	.quad	4458902077914151770     # double 1.2516396700509329E-10
	.size	Gammln.cof, 88

	.type	.L.str.908,@object      # @.str.908
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.908:
	.asciz	"sre_math.c"
	.size	.L.str.908, 11

	.type	.L.str.1.911,@object    # @.str.1.911
.L.str.1.911:
	.asciz	"IncompleteGamma(): a must be > 0"
	.size	.L.str.1.911, 33

	.type	.L.str.2.912,@object    # @.str.2.912
.L.str.2.912:
	.asciz	"IncompleteGamma(): x must be >= 0"
	.size	.L.str.2.912, 34

	.type	.L.str.3.913,@object    # @.str.3.913
.L.str.3.913:
	.asciz	"IncompleteGamma(): failed to converge using continued fraction approx"
	.size	.L.str.3.913, 70

	.type	.L.str.4.914,@object    # @.str.4.914
.L.str.4.914:
	.asciz	"IncompleteGamma(): failed to converge using series approx"
	.size	.L.str.4.914, 58

	.type	sre_randseed,@object    # @sre_randseed
	.data
	.p2align	2
sre_randseed:
	.long	42                      # 0x2a
	.size	sre_randseed, 4

	.type	sre_random.rnd1,@object # @sre_random.rnd1
	.local	sre_random.rnd1
	.comm	sre_random.rnd1,8,8
	.type	sre_random.rnd2,@object # @sre_random.rnd2
	.local	sre_random.rnd2
	.comm	sre_random.rnd2,8,8
	.type	sre_random.tbl,@object  # @sre_random.tbl
	.local	sre_random.tbl
	.comm	sre_random.tbl,512,16
	.type	sre_random.rnd,@object  # @sre_random.rnd
	.local	sre_random.rnd
	.comm	sre_random.rnd,8,8
	.type	Gaussrandom.u,@object   # @Gaussrandom.u
	.local	Gaussrandom.u
	.comm	Gaussrandom.u,8,8
	.type	Gaussrandom.s,@object   # @Gaussrandom.s
	.local	Gaussrandom.s
	.comm	Gaussrandom.s,8,8
	.type	Gaussrandom.i,@object   # @Gaussrandom.i
	.local	Gaussrandom.i
	.comm	Gaussrandom.i,8,8
	.type	Gaussrandom.ustar,@object # @Gaussrandom.ustar
	.local	Gaussrandom.ustar
	.comm	Gaussrandom.ustar,8,8
	.type	Gaussrandom.a,@object   # @Gaussrandom.a
	.p2align	4
Gaussrandom.a:
	.quad	0                       # double 0
	.quad	4585806690614221088     # double 0.039176089999999997
	.quad	4590314630270480489     # double 0.078412410000000002
	.quad	4593150643513011701     # double 0.11777
	.quad	4594835735569746559     # double 0.1573107
	.quad	4596269263757055905     # double 0.1970991
	.quad	4597714126603907417     # double 0.2372021
	.quad	4598674045445763376     # double 0.2776904
	.quad	4599411717050328154     # double 0.31863940000000002
	.quad	4600159145253125667     # double 0.36013000000000001
	.quad	4600917913519784899     # double 0.4022501
	.quad	4601689765644081568     # double 0.44509650000000001
	.quad	4602476632769535890     # double 0.4887764
	.quad	4602979746997588032     # double 0.53340969999999999
	.quad	4603391578665512927     # double 0.57913219999999999
	.quad	4603814617991470496     # double 0.62609899999999996
	.quad	4604250483569166817     # double 0.67448980000000003
	.quad	4604701065109005533     # double 0.7245144
	.quad	4605168605403601076     # double 0.77642180000000005
	.quad	4605655796704810687     # double 0.83051090000000005
	.quad	4606165925739642421     # double 0.88714660000000001
	.quad	4606703071868638751     # double 0.94678180000000001
	.quad	4607227409760294839     # double 1.0099899999999999
	.quad	4607531519828732659     # double 1.0775159999999999
	.quad	4607859530500392935     # double 1.1503490000000001
	.quad	4608217611706765163     # double 1.229859
	.quad	4608614613021117127     # double 1.318011
	.quad	4609064009213533919     # double 1.417797
	.quad	4609587885936588165     # double 1.5341210000000001
	.quad	4610226581932142221     # double 1.67594
	.quad	4611067818313738011     # double 1.8627320000000001
	.quad	4612032514123718722     # double 2.1538750000000002
	.size	Gaussrandom.a, 256

	.type	Gaussrandom.aa,@object  # @Gaussrandom.aa
	.local	Gaussrandom.aa
	.comm	Gaussrandom.aa,8,8
	.type	Gaussrandom.t,@object   # @Gaussrandom.t
	.p2align	4
Gaussrandom.t:
	.quad	4560217080330654777     # double 7.6738279999999999E-4
	.quad	4567465702588977242     # double 0.0023068699999999999
	.quad	4571048401552857001     # double 0.0038606180000000001
	.quad	4572920132722098069     # double 0.0054384539999999997
	.quad	4574778925806214440     # double 0.0070507
	.quad	4576173670290569564     # double 0.0087083960000000002
	.quad	4577162400784940836     # double 0.01042357
	.quad	4578191936630124658     # double 0.01220953
	.quad	4579270909749426022     # double 0.01408125
	.quad	4580284987799536828     # double 0.01605579
	.quad	4580889438603668344     # double 0.0181529
	.quad	4581535890338212688     # double 0.020395730000000001
	.quad	4582232266456210269     # double 0.022811769999999999
	.quad	4582988092971592903     # double 0.02543407
	.quad	4583814994215430787     # double 0.028302959999999999
	.quad	4584695869479506841     # double 0.031468219999999998
	.quad	4585203747254956846     # double 0.034992330000000002
	.quad	4585774803687707425     # double 0.038954830000000003
	.quad	4586423891289041676     # double 0.043458780000000002
	.quad	4587170634224119888     # double 0.048640349999999999
	.quad	4588041520864510404     # double 0.054683339999999997
	.quad	4589073224202122888     # double 0.061842220000000003
	.quad	4589743027641167102     # double 0.070479829999999993
	.quad	4590510593779770395     # double 0.081131949999999994
	.quad	4591482830146751198     # double 0.094624440000000004
	.quad	4592756495679383639     # double 0.1123001
	.quad	4594085879026029968     # double 0.13649800000000001
	.quad	4595353754010405521     # double 0.1716886
	.quad	4597369042786059780     # double 0.2276241
	.quad	4599625342596492697     # double 0.33049800000000001
	.quad	4603441756871841164     # double 0.58470310000000003
	.size	Gaussrandom.t, 248

	.type	Gaussrandom.h,@object   # @Gaussrandom.h
	.p2align	4
Gaussrandom.h:
	.quad	4585811025599078410     # double 0.039206169999999999
	.quad	4585828446243013020     # double 0.039327050000000002
	.quad	4585854812116671498     # double 0.039510000000000003
	.quad	4585890412891581876     # double 0.039757029999999999
	.quad	4585935650649118887     # double 0.040070929999999998
	.quad	4585991048527415246     # double 0.040455329999999998
	.quad	4586057266574032341     # double 0.040914810000000003
	.quad	4586135126245542202     # double 0.041455069999999997
	.quad	4586225636348261363     # double 0.04208311
	.quad	4586330029067047871     # double 0.042807480000000002
	.quad	4586449810405617118     # double 0.043638629999999998
	.quad	4586586819273768954     # double 0.044589320000000002
	.quad	4586743315397652406     # double 0.045675229999999997
	.quad	4586922087406156744     # double 0.046915709999999999
	.quad	4587126609916466476     # double 0.048334870000000002
	.quad	4587361245295324657     # double 0.049962979999999997
	.quad	4587631549183231613     # double 0.051838589999999997
	.quad	4587944681222730952     # double 0.054011379999999998
	.quad	4588310039165237101     # double 0.056546560000000003
	.quad	4588740185531694631     # double 0.059531300000000002
	.quad	4589210166056712268     # double 0.063084890000000005
	.quad	4589519303223198144     # double 0.067375030000000002
	.quad	4589899076287391580     # double 0.072645440000000006
	.quad	4590376044957879015     # double 0.079264710000000002
	.quad	4590992462366652410     # double 0.087819220000000003
	.quad	4591820026540355443     # double 0.09930398
	.quad	4592991396230187880     # double 0.11556
	.quad	4594227702782615417     # double 0.14043439999999999
	.quad	4595783419032134878     # double 0.18361420000000001
	.quad	4598697665925089009     # double 0.27900160000000002
	.quad	4604489693164094526     # double 0.70104739999999999
	.size	Gaussrandom.h, 248

	.type	Gaussrandom.w,@object   # @Gaussrandom.w
	.local	Gaussrandom.w
	.comm	Gaussrandom.w,8,8
	.type	Gaussrandom.y,@object   # @Gaussrandom.y
	.local	Gaussrandom.y
	.comm	Gaussrandom.y,8,8
	.type	Gaussrandom.snorm,@object # @Gaussrandom.snorm
	.local	Gaussrandom.snorm
	.comm	Gaussrandom.snorm,8,8
	.type	Gaussrandom.tt,@object  # @Gaussrandom.tt
	.local	Gaussrandom.tt
	.comm	Gaussrandom.tt,8,8
	.type	Gaussrandom.d,@object   # @Gaussrandom.d
	.p2align	4
Gaussrandom.d:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4598421733978799720     # double 0.26368429999999998
	.quad	4597905309812408847     # double 0.24250849999999999
	.quad	4597294942359230877     # double 0.2255674
	.quad	4596792945924606248     # double 0.21163419999999999
	.quad	4596371052314393882     # double 0.1999243
	.quad	4596010277955444486     # double 0.18991079999999999
	.quad	4595697346236056573     # double 0.1812252
	.quad	4595422669893343395     # double 0.17360139999999999
	.quad	4595179133239893708     # double 0.16684189999999999
	.quad	4594961331956154667     # double 0.16079669999999999
	.quad	4594765083098792371     # double 0.15534970000000001
	.quad	4594587090032879583     # double 0.1504094
	.quad	4594424715450474516     # double 0.14590259999999999
	.quad	4594275822843913946     # double 0.14177000000000001
	.quad	4594138668419422154     # double 0.13796320000000001
	.quad	4594011796613599574     # double 0.1344418
	.quad	4593893996858866369     # double 0.13117219999999999
	.quad	4593784245937387201     # double 0.12812599999999999
	.quad	4593681675555153913     # double 0.1252791
	.quad	4593499467119989906     # double 0.12261089999999999
	.quad	4593318797114458610     # double 0.1201036
	.quad	4593148604283100428     # double 0.1177417
	.quad	4592987930259914656     # double 0.1155119
	.quad	4592835917559532243     # double 0.1134023
	.quad	4592691831194494002     # double 0.11140269999999999
	.quad	4592555008234934785     # double 0.1095039
	.size	Gaussrandom.d, 248

	.type	.L.str.933,@object      # @.str.933
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.933:
	.asciz	"malloc of %ld bytes failed: file %s line %d"
	.size	.L.str.933, 44

	.type	.L.str.1.936,@object    # @.str.1.936
.L.str.1.936:
	.asciz	"realloc of %ld bytes failed: file %s line %d"
	.size	.L.str.1.936, 45

	.type	.L.str.2.943,@object    # @.str.2.943
.L.str.2.943:
	.asciz	"sre_string.c"
	.size	.L.str.2.943, 13

	.type	.L.str.956,@object      # @.str.956
.L.str.956:
	.asciz	"rb"
	.size	.L.str.956, 3

	.type	v20magic.957,@object    # @v20magic.957
	.data
	.p2align	2
v20magic.957:
	.long	4092848561              # 0xf3f3e9b1
	.size	v20magic.957, 4

	.type	v20swap.958,@object     # @v20swap.958
	.p2align	2
v20swap.958:
	.long	2984899571              # 0xb1e9f3f3
	.size	v20swap.958, 4

	.type	.L.str.1.969,@object    # @.str.1.969
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.969:
	.asciz	"Can't create a 64-bit SSI index on this system, sorry;\nI don't have 64-bit file offset functions available.\n"
	.size	.L.str.1.969, 109

	.type	.L.str.2.970,@object    # @.str.2.970
.L.str.2.970:
	.asciz	"tmp.ssi.1"
	.size	.L.str.2.970, 10

	.type	.L.str.3.971,@object    # @.str.3.971
.L.str.3.971:
	.asciz	"tmp.ssi.2"
	.size	.L.str.3.971, 10

	.type	.L.str.4.974,@object    # @.str.4.974
.L.str.4.974:
	.asciz	"%s\t%d\t%lu\t%lu\t%lu\n"
	.size	.L.str.4.974, 19

	.type	.L.str.5.975,@object    # @.str.5.975
.L.str.5.975:
	.asciz	"%s\t%d\t%llu\t%llu\t%lu\n"
	.size	.L.str.5.975, 21

	.type	.L.str.31.976,@object   # @.str.31.976
.L.str.31.976:
	.asciz	"w"
	.size	.L.str.31.976, 2

	.type	.L.str.32.977,@object   # @.str.32.977
.L.str.32.977:
	.asciz	"%s\t%u\t%lu\t%lu\t%lu\n"
	.size	.L.str.32.977, 19

	.type	.L.str.33.978,@object   # @.str.33.978
.L.str.33.978:
	.asciz	"%s\t%u\t%llu\t%llu\t%lu\n"
	.size	.L.str.33.978, 21

	.type	.L.str.6.979,@object    # @.str.6.979
.L.str.6.979:
	.asciz	"%s\t%s\n"
	.size	.L.str.6.979, 7

	.type	.L.str.7.980,@object    # @.str.7.980
.L.str.7.980:
	.asciz	"wb"
	.size	.L.str.7.980, 3

	.type	.L.str.8.981,@object    # @.str.8.981
.L.str.8.981:
	.asciz	"Can't switch to 64-bit SSI index mode on this system, sorry;\nI don't have 64-bit file offset functions available.\n"
	.size	.L.str.8.981, 115

	.type	.L.str.9.982,@object    # @.str.9.982
.L.str.9.982:
	.asciz	"env LC_ALL=POSIX sort -o %s %s\n"
	.size	.L.str.9.982, 32

	.type	.L.str.10.983,@object   # @.str.10.983
.L.str.10.983:
	.asciz	"r"
	.size	.L.str.10.983, 2

	.type	.L.str.30.984,@object   # @.str.30.984
.L.str.30.984:
	.asciz	"\t\n"
	.size	.L.str.30.984, 3

	.type	.L.str.11.985,@object   # @.str.11.985
.L.str.11.985:
	.asciz	"ok (no error)"
	.size	.L.str.11.985, 14

	.type	.L.str.12.986,@object   # @.str.12.986
.L.str.12.986:
	.asciz	"no data, fread() failed"
	.size	.L.str.12.986, 24

	.type	.L.str.13.987,@object   # @.str.13.987
.L.str.13.987:
	.asciz	"no such key"
	.size	.L.str.13.987, 12

	.type	.L.str.14.988,@object   # @.str.14.988
.L.str.14.988:
	.asciz	"out of memory, malloc() failed"
	.size	.L.str.14.988, 31

	.type	.L.str.15.989,@object   # @.str.15.989
.L.str.15.989:
	.asciz	"file not found, fopen() failed"
	.size	.L.str.15.989, 31

	.type	.L.str.16.990,@object   # @.str.16.990
.L.str.16.990:
	.asciz	"not a SSI file? (bad magic)"
	.size	.L.str.16.990, 28

	.type	.L.str.17.991,@object   # @.str.17.991
.L.str.17.991:
	.asciz	"corrupt format? unexpected data"
	.size	.L.str.17.991, 32

	.type	.L.str.18.992,@object   # @.str.18.992
.L.str.18.992:
	.asciz	"no large file support for this system"
	.size	.L.str.18.992, 38

	.type	.L.str.19.993,@object   # @.str.19.993
.L.str.19.993:
	.asciz	"failed to reposition on disk"
	.size	.L.str.19.993, 29

	.type	.L.str.20.994,@object   # @.str.20.994
.L.str.20.994:
	.asciz	"failed to get file position on disk"
	.size	.L.str.20.994, 36

	.type	.L.str.21.995,@object   # @.str.21.995
.L.str.21.995:
	.asciz	"no fast subseq support for this seqfile"
	.size	.L.str.21.995, 40

	.type	.L.str.22.996,@object   # @.str.22.996
.L.str.22.996:
	.asciz	"subseq start is out of range"
	.size	.L.str.22.996, 29

	.type	.L.str.23.997,@object   # @.str.23.997
.L.str.23.997:
	.asciz	"an argument is out of range"
	.size	.L.str.23.997, 28

	.type	.L.str.24.998,@object   # @.str.24.998
.L.str.24.998:
	.asciz	"number of files exceeds limit"
	.size	.L.str.24.998, 30

	.type	.L.str.25.999,@object   # @.str.25.999
.L.str.25.999:
	.asciz	"number of keys exceeds limit"
	.size	.L.str.25.999, 29

	.type	.L.str.26.1000,@object  # @.str.26.1000
.L.str.26.1000:
	.asciz	"an fwrite() failed"
	.size	.L.str.26.1000, 19

	.type	.L.str.27.1001,@object  # @.str.27.1001
.L.str.27.1001:
	.asciz	"some problem with external sorting"
	.size	.L.str.27.1001, 35

	.type	.L.str.28.1002,@object  # @.str.28.1002
.L.str.28.1002:
	.asciz	"unrecognized code"
	.size	.L.str.28.1002, 18

	.type	.L.str.29.1003,@object  # @.str.29.1003
.L.str.29.1003:
	.asciz	"failed to turn external sorting on."
	.size	.L.str.29.1003, 36

	.type	.L.str.1006,@object     # @.str.1006
.L.str.1006:
	.asciz	"Memory allocation failure at %s line %d"
	.size	.L.str.1006, 40

	.type	.L.str.1.1007,@object   # @.str.1.1007
.L.str.1.1007:
	.asciz	"stack.c"
	.size	.L.str.1.1007, 8

	.type	.L.str.1016,@object     # @.str.1016
.L.str.1016:
	.asciz	"# STOCKHOLM 1."
	.size	.L.str.1016, 15

	.type	.L.str.1.1017,@object   # @.str.1.1017
.L.str.1.1017:
	.asciz	"File %s doesn't appear to be in Stockholm format.\nAssuming there isn't some other problem with your file (it is an\nalignment file, right?), please either:\n  a) use the Babelfish format autotranslator option (-B, usually);\n  b) specify the file's format with the --informat option; or\n  a) reformat the alignment to Stockholm format.\n"
	.size	.L.str.1.1017, 334

	.type	.L.str.2.1018,@object   # @.str.2.1018
.L.str.2.1018:
	.asciz	"#=GF"
	.size	.L.str.2.1018, 5

	.type	.L.str.3.1019,@object   # @.str.3.1019
.L.str.3.1019:
	.asciz	"#=GS"
	.size	.L.str.3.1019, 5

	.type	.L.str.4.1020,@object   # @.str.4.1020
.L.str.4.1020:
	.asciz	"#=GC"
	.size	.L.str.4.1020, 5

	.type	.L.str.5.1021,@object   # @.str.5.1021
.L.str.5.1021:
	.asciz	"#=GR"
	.size	.L.str.5.1021, 5

	.type	.L.str.6.1022,@object   # @.str.6.1022
.L.str.6.1022:
	.asciz	"//"
	.size	.L.str.6.1022, 3

	.type	.L.str.8.1023,@object   # @.str.8.1023
.L.str.8.1023:
	.zero	1
	.size	.L.str.8.1023, 1

	.type	.L.str.7.1024,@object   # @.str.7.1024
.L.str.7.1024:
	.asciz	"Stockholm format parse error: line %d of file %s while reading alignment %s"
	.size	.L.str.7.1024, 76

	.type	.L.str.9.1025,@object   # @.str.9.1025
.L.str.9.1025:
	.asciz	"Didn't find // at end of alignment %s"
	.size	.L.str.9.1025, 38

	.type	.L.str.38.1026,@object  # @.str.38.1026
.L.str.38.1026:
	.asciz	" \t\n"
	.size	.L.str.38.1026, 4

	.type	.L.str.13.1027,@object  # @.str.13.1027
.L.str.13.1027:
	.asciz	"\n"
	.size	.L.str.13.1027, 2

	.type	.L.str.47.1028,@object  # @.str.47.1028
.L.str.47.1028:
	.asciz	"SS"
	.size	.L.str.47.1028, 3

	.type	.L.str.10.1029,@object  # @.str.10.1029
.L.str.10.1029:
	.asciz	"stockholm.c"
	.size	.L.str.10.1029, 12

	.type	.L.str.48.1030,@object  # @.str.48.1030
.L.str.48.1030:
	.asciz	"SA"
	.size	.L.str.48.1030, 3

	.type	.L.str.34.1031,@object  # @.str.34.1031
.L.str.34.1031:
	.asciz	"SS_cons"
	.size	.L.str.34.1031, 8

	.type	.L.str.35.1032,@object  # @.str.35.1032
.L.str.35.1032:
	.asciz	"SA_cons"
	.size	.L.str.35.1032, 8

	.type	.L.str.36.1033,@object  # @.str.36.1033
.L.str.36.1033:
	.asciz	"RF"
	.size	.L.str.36.1033, 3

	.type	.L.str.46.1034,@object  # @.str.46.1034
.L.str.46.1034:
	.asciz	"WT"
	.size	.L.str.46.1034, 3

	.type	.L.str.40.1035,@object  # @.str.40.1035
.L.str.40.1035:
	.asciz	"AC"
	.size	.L.str.40.1035, 3

	.type	.L.str.41.1036,@object  # @.str.41.1036
.L.str.41.1036:
	.asciz	"DE"
	.size	.L.str.41.1036, 3

	.type	.L.str.39.1037,@object  # @.str.39.1037
.L.str.39.1037:
	.asciz	"ID"
	.size	.L.str.39.1037, 3

	.type	.L.str.42.1038,@object  # @.str.42.1038
.L.str.42.1038:
	.asciz	"AU"
	.size	.L.str.42.1038, 3

	.type	.L.str.43.1039,@object  # @.str.43.1039
.L.str.43.1039:
	.asciz	"GA"
	.size	.L.str.43.1039, 3

	.type	.L.str.44.1040,@object  # @.str.44.1040
.L.str.44.1040:
	.asciz	"NC"
	.size	.L.str.44.1040, 3

	.type	.L.str.45.1041,@object  # @.str.45.1041
.L.str.45.1041:
	.asciz	"TC"
	.size	.L.str.45.1041, 3

	.type	.L.str.11.1044,@object  # @.str.11.1044
.L.str.11.1044:
	.asciz	"# STOCKHOLM 1.0\n"
	.size	.L.str.11.1044, 17

	.type	.L.str.12.1045,@object  # @.str.12.1045
.L.str.12.1045:
	.asciz	"# %s\n"
	.size	.L.str.12.1045, 6

	.type	.L.str.14.1046,@object  # @.str.14.1046
.L.str.14.1046:
	.asciz	"#=GF ID    %s\n"
	.size	.L.str.14.1046, 15

	.type	.L.str.15.1047,@object  # @.str.15.1047
.L.str.15.1047:
	.asciz	"#=GF AC    %s\n"
	.size	.L.str.15.1047, 15

	.type	.L.str.16.1048,@object  # @.str.16.1048
.L.str.16.1048:
	.asciz	"#=GF DE    %s\n"
	.size	.L.str.16.1048, 15

	.type	.L.str.17.1049,@object  # @.str.17.1049
.L.str.17.1049:
	.asciz	"#=GF AU    %s\n"
	.size	.L.str.17.1049, 15

	.type	.L.str.18.1050,@object  # @.str.18.1050
.L.str.18.1050:
	.asciz	"#=GF GA    %.1f %.1f\n"
	.size	.L.str.18.1050, 22

	.type	.L.str.19.1051,@object  # @.str.19.1051
.L.str.19.1051:
	.asciz	"#=GF GA    %.1f\n"
	.size	.L.str.19.1051, 17

	.type	.L.str.20.1052,@object  # @.str.20.1052
.L.str.20.1052:
	.asciz	"#=GF NC    %.1f %.1f\n"
	.size	.L.str.20.1052, 22

	.type	.L.str.21.1053,@object  # @.str.21.1053
.L.str.21.1053:
	.asciz	"#=GF NC    %.1f\n"
	.size	.L.str.21.1053, 17

	.type	.L.str.22.1054,@object  # @.str.22.1054
.L.str.22.1054:
	.asciz	"#=GF TC    %.1f %.1f\n"
	.size	.L.str.22.1054, 22

	.type	.L.str.23.1055,@object  # @.str.23.1055
.L.str.23.1055:
	.asciz	"#=GF TC    %.1f\n"
	.size	.L.str.23.1055, 17

	.type	.L.str.24.1056,@object  # @.str.24.1056
.L.str.24.1056:
	.asciz	"#=GF %-5s %s\n"
	.size	.L.str.24.1056, 14

	.type	.L.str.25.1057,@object  # @.str.25.1057
.L.str.25.1057:
	.asciz	"#=GS %-*.*s WT    %.2f\n"
	.size	.L.str.25.1057, 24

	.type	.L.str.26.1058,@object  # @.str.26.1058
.L.str.26.1058:
	.asciz	"#=GS %-*.*s AC    %s\n"
	.size	.L.str.26.1058, 22

	.type	.L.str.27.1059,@object  # @.str.27.1059
.L.str.27.1059:
	.asciz	"#=GS %*.*s DE    %s\n"
	.size	.L.str.27.1059, 21

	.type	.L.str.28.1060,@object  # @.str.28.1060
.L.str.28.1060:
	.asciz	"#=GS %*.*s %5s %s\n"
	.size	.L.str.28.1060, 19

	.type	.L.str.29.1061,@object  # @.str.29.1061
.L.str.29.1061:
	.asciz	"%-*.*s  %s\n"
	.size	.L.str.29.1061, 12

	.type	.L.str.30.1062,@object  # @.str.30.1062
.L.str.30.1062:
	.asciz	"#=GR %-*.*s SS     %s\n"
	.size	.L.str.30.1062, 23

	.type	.L.str.31.1063,@object  # @.str.31.1063
.L.str.31.1063:
	.asciz	"#=GR %-*.*s SA     %s\n"
	.size	.L.str.31.1063, 23

	.type	.L.str.32.1064,@object  # @.str.32.1064
.L.str.32.1064:
	.asciz	"#=GR %-*.*s %5s  %s\n"
	.size	.L.str.32.1064, 21

	.type	.L.str.33.1065,@object  # @.str.33.1065
.L.str.33.1065:
	.asciz	"#=GC %-*.*s %s\n"
	.size	.L.str.33.1065, 16

	.type	.L.str.37.1066,@object  # @.str.37.1066
.L.str.37.1066:
	.asciz	"//\n"
	.size	.L.str.37.1066, 4

	.type	.L.str.1071,@object     # @.str.1071
.L.str.1071:
	.asciz	"tophits.c"
	.size	.L.str.1071, 10

	.type	.L.str.1.1082,@object   # @.str.1.1082
.L.str.1.1082:
	.asciz	"tophits_s report:\n"
	.size	.L.str.1.1082, 19

	.type	.L.str.2.1083,@object   # @.str.2.1083
.L.str.2.1083:
	.asciz	"     Total hits:           %d\n"
	.size	.L.str.2.1083, 31

	.type	.L.str.3.1084,@object   # @.str.3.1084
.L.str.3.1084:
	.asciz	"     Satisfying E cutoff:  %d\n"
	.size	.L.str.3.1084, 31

	.type	.L.str.4.1085,@object   # @.str.4.1085
.L.str.4.1085:
	.asciz	"     Total memory:         %dK\n"
	.size	.L.str.4.1085, 32

	.type	.L.str.1088,@object     # @.str.1088
.L.str.1088:
	.asciz	"trace.c"
	.size	.L.str.1088, 8

	.type	.L.str.1.1099,@object   # @.str.1.1099
.L.str.1.1099:
	.asciz	"illegal state transition %s->%s in traceback"
	.size	.L.str.1.1099, 45

	.type	.L.str.2.1100,@object   # @.str.2.1100
.L.str.2.1100:
	.asciz	"illegal state %s in traceback"
	.size	.L.str.2.1100, 30

	.type	.L.str.7.1105,@object   # @.str.7.1105
.L.str.7.1105:
	.asciz	"illegal %s->%s transition"
	.size	.L.str.7.1105, 26

	.type	.L.str.3.1106,@object   # @.str.3.1106
.L.str.3.1106:
	.asciz	"yo! you don't support J in Traces2Alignment(), remember?"
	.size	.L.str.3.1106, 57

	.type	.L.str.4.1107,@object   # @.str.4.1107
.L.str.4.1107:
	.asciz	"Traces2Alignment reports unrecognized statetype %c"
	.size	.L.str.4.1107, 51

	.type	.L.str.5.1108,@object   # @.str.5.1108
.L.str.5.1108:
	.asciz	"HMMER %s"
	.size	.L.str.5.1108, 9

	.type	.L.str.6.1109,@object   # @.str.6.1109
.L.str.6.1109:
	.asciz	"2.3"
	.size	.L.str.6.1109, 4

	.type	.L.str.8.1112,@object   # @.str.8.1112
.L.str.8.1112:
	.asciz	"bogus statetype"
	.size	.L.str.8.1112, 16

	.type	.L.str.9.1115,@object   # @.str.9.1115
.L.str.9.1115:
	.asciz	"  %16s %s\n"
	.size	.L.str.9.1115, 11

	.type	.L.str.10.1116,@object  # @.str.10.1116
.L.str.10.1116:
	.asciz	"CS"
	.size	.L.str.10.1116, 3

	.type	.L.str.11.1117,@object  # @.str.11.1117
.L.str.11.1117:
	.asciz	"RF"
	.size	.L.str.11.1117, 3

	.type	.L.str.12.1118,@object  # @.str.12.1118
.L.str.12.1118:
	.asciz	" "
	.size	.L.str.12.1118, 2

	.type	.L.str.13.1119,@object  # @.str.13.1119
.L.str.13.1119:
	.asciz	"  %10.10s %5d %s %-5d\n\n"
	.size	.L.str.13.1119, 24

	.type	.L.str.14.1120,@object  # @.str.14.1120
.L.str.14.1120:
	.asciz	"  %10.10s %5s %s %-5s\n\n"
	.size	.L.str.14.1120, 24

	.type	.L.str.15.1121,@object  # @.str.15.1121
.L.str.15.1121:
	.asciz	"-"
	.size	.L.str.15.1121, 2

	.type	.L.str.16.1126,@object  # @.str.16.1126
.L.str.16.1126:
	.asciz	"sanity check failed: didn't find a match state in trace"
	.size	.L.str.16.1126, 56

	.type	.L.str.17.1127,@object  # @.str.17.1127
.L.str.17.1127:
	.asciz	"never happens. Trust me."
	.size	.L.str.17.1127, 25

	.type	.L.str.1128,@object     # @.str.1128
.L.str.1128:
	.asciz	"calloc failed"
	.size	.L.str.1128, 14

	.type	.L.str.1131,@object     # @.str.1131
.L.str.1131:
	.asciz	"0x"
	.size	.L.str.1131, 3

	.type	.L.str.1.1132,@object   # @.str.1.1132
.L.str.1.1132:
	.asciz	"0X"
	.size	.L.str.1.1132, 3

	.type	qsz,@object             # @qsz
	.local	qsz
	.comm	qsz,4,4
	.type	qcmp,@object            # @qcmp
	.local	qcmp
	.comm	qcmp,8,8
	.type	thresh,@object          # @thresh
	.local	thresh
	.comm	thresh,4,4
	.type	mthresh,@object         # @mthresh
	.local	mthresh
	.comm	mthresh,4,4
	.type	.L.str.1165,@object     # @.str.1165
.L.str.1165:
	.asciz	"Cluster() failed"
	.size	.L.str.1165, 17

	.type	.L.str.1.1166,@object   # @.str.1.1166
.L.str.1.1166:
	.asciz	"weight.c"
	.size	.L.str.1.1166, 9

	.type	.L.str.2.1167,@object   # @.str.2.1167
.L.str.2.1167:
	.asciz	"simple_diffmx() failed"
	.size	.L.str.2.1167, 23

	.type	.L.str.5.1168,@object   # @.str.5.1168
.L.str.5.1168:
	.asciz	"malloc failed"
	.size	.L.str.5.1168, 14

	.type	.L.str.3.1169,@object   # @.str.3.1169
.L.str.3.1169:
	.asciz	"removing %12s -- fractional identity %.2f to %s\n"
	.size	.L.str.3.1169, 49

	.type	.L.str.4.1170,@object   # @.str.4.1170
.L.str.4.1170:
	.asciz	"chose %d: %s\n"
	.size	.L.str.4.1170, 14


	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
