	.text
	.file	"llvm-link"
	.globl	calc_attackers          # -- Begin function calc_attackers
	.p2align	4, 0x90
	.type	calc_attackers,@function
calc_attackers:                         # @calc_attackers
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	$0, -12(%rbp)
	movslq	-16(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	jne	.LBB0_2
# %bb.1:
	movl	$0, -20(%rbp)
	jmp	.LBB0_97
.LBB0_2:
	movl	$2, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_50
# %bb.3:
	movl	$0, -8(%rbp)
.LBB0_4:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_8 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB0_20
# %bb.5:                                #   in Loop: Header=BB0_4 Depth=1
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	addl	calc_attackers.rook_o(,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	jne	.LBB0_7
# %bb.6:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_21
.LBB0_7:                                #   in Loop: Header=BB0_4 Depth=1
	jmp	.LBB0_8
.LBB0_8:                                #   Parent Loop BB0_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB0_16
# %bb.9:                                #   in Loop: Header=BB0_8 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB0_11
# %bb.10:                               #   in Loop: Header=BB0_8 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB0_12
.LBB0_11:                               #   in Loop: Header=BB0_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_17
.LBB0_12:                               #   in Loop: Header=BB0_8 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB0_14
# %bb.13:                               #   in Loop: Header=BB0_4 Depth=1
	jmp	.LBB0_17
.LBB0_14:                               #   in Loop: Header=BB0_8 Depth=2
	jmp	.LBB0_15
.LBB0_15:                               #   in Loop: Header=BB0_8 Depth=2
	movslq	-8(%rbp), %rax
	movl	calc_attackers.rook_o(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB0_8
.LBB0_16:                               # %.loopexit2
                                        #   in Loop: Header=BB0_4 Depth=1
	jmp	.LBB0_17
.LBB0_17:                               #   in Loop: Header=BB0_4 Depth=1
	jmp	.LBB0_18
.LBB0_18:                               #   in Loop: Header=BB0_4 Depth=1
	jmp	.LBB0_19
.LBB0_19:                               #   in Loop: Header=BB0_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB0_4
.LBB0_20:                               # %.loopexit3
	jmp	.LBB0_21
.LBB0_21:
	movl	$0, -8(%rbp)
.LBB0_22:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_29 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB0_42
# %bb.23:                               #   in Loop: Header=BB0_22 Depth=1
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	addl	calc_attackers.bishop_o(,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB0_26
# %bb.24:                               #   in Loop: Header=BB0_22 Depth=1
	movl	$2, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_26
# %bb.25:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_43
.LBB0_26:                               #   in Loop: Header=BB0_22 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	jne	.LBB0_28
# %bb.27:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_43
.LBB0_28:                               #   in Loop: Header=BB0_22 Depth=1
	jmp	.LBB0_29
.LBB0_29:                               #   Parent Loop BB0_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB0_37
# %bb.30:                               #   in Loop: Header=BB0_29 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB0_32
# %bb.31:                               #   in Loop: Header=BB0_29 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB0_33
.LBB0_32:                               #   in Loop: Header=BB0_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_38
.LBB0_33:                               #   in Loop: Header=BB0_29 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB0_35
# %bb.34:                               #   in Loop: Header=BB0_22 Depth=1
	jmp	.LBB0_38
.LBB0_35:                               #   in Loop: Header=BB0_29 Depth=2
	jmp	.LBB0_36
.LBB0_36:                               #   in Loop: Header=BB0_29 Depth=2
	movslq	-8(%rbp), %rax
	movl	calc_attackers.bishop_o(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB0_29
.LBB0_37:                               # %.loopexit
                                        #   in Loop: Header=BB0_22 Depth=1
	jmp	.LBB0_38
.LBB0_38:                               #   in Loop: Header=BB0_22 Depth=1
	jmp	.LBB0_39
.LBB0_39:                               #   in Loop: Header=BB0_22 Depth=1
	jmp	.LBB0_40
.LBB0_40:                               #   in Loop: Header=BB0_22 Depth=1
	jmp	.LBB0_41
.LBB0_41:                               #   in Loop: Header=BB0_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB0_22
.LBB0_42:                               # %.loopexit1
	jmp	.LBB0_43
.LBB0_43:
	movl	$0, -8(%rbp)
.LBB0_44:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -8(%rbp)
	jge	.LBB0_49
# %bb.45:                               #   in Loop: Header=BB0_44 Depth=1
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	addl	calc_attackers.knight_o(,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$3, board(,%rax,4)
	jne	.LBB0_47
# %bb.46:                               #   in Loop: Header=BB0_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB0_47:                               #   in Loop: Header=BB0_44 Depth=1
	jmp	.LBB0_48
.LBB0_48:                               #   in Loop: Header=BB0_44 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB0_44
.LBB0_49:
	jmp	.LBB0_96
.LBB0_50:
	movl	$0, -8(%rbp)
.LBB0_51:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_55 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB0_66
# %bb.52:                               #   in Loop: Header=BB0_51 Depth=1
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	addl	calc_attackers.rook_o(,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$6, board(,%rax,4)
	jne	.LBB0_54
# %bb.53:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_67
.LBB0_54:                               #   in Loop: Header=BB0_51 Depth=1
	jmp	.LBB0_55
.LBB0_55:                               #   Parent Loop BB0_51 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB0_62
# %bb.56:                               #   in Loop: Header=BB0_55 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB0_58
# %bb.57:                               #   in Loop: Header=BB0_55 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB0_59
.LBB0_58:                               #   in Loop: Header=BB0_51 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_63
.LBB0_59:                               #   in Loop: Header=BB0_55 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB0_61
# %bb.60:                               #   in Loop: Header=BB0_51 Depth=1
	jmp	.LBB0_63
.LBB0_61:                               #   in Loop: Header=BB0_55 Depth=2
	movslq	-8(%rbp), %rax
	movl	calc_attackers.rook_o(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB0_55
.LBB0_62:                               # %.loopexit6
                                        #   in Loop: Header=BB0_51 Depth=1
	jmp	.LBB0_63
.LBB0_63:                               #   in Loop: Header=BB0_51 Depth=1
	jmp	.LBB0_64
.LBB0_64:                               #   in Loop: Header=BB0_51 Depth=1
	jmp	.LBB0_65
.LBB0_65:                               #   in Loop: Header=BB0_51 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB0_51
.LBB0_66:                               # %.loopexit7
	jmp	.LBB0_67
.LBB0_67:
	movl	$0, -8(%rbp)
.LBB0_68:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_75 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB0_88
# %bb.69:                               #   in Loop: Header=BB0_68 Depth=1
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	addl	calc_attackers.bishop_o(,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB0_72
# %bb.70:                               #   in Loop: Header=BB0_68 Depth=1
	movl	$2, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB0_72
# %bb.71:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_89
.LBB0_72:                               #   in Loop: Header=BB0_68 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$6, board(,%rax,4)
	jne	.LBB0_74
# %bb.73:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_89
.LBB0_74:                               #   in Loop: Header=BB0_68 Depth=1
	jmp	.LBB0_75
.LBB0_75:                               #   Parent Loop BB0_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB0_83
# %bb.76:                               #   in Loop: Header=BB0_75 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB0_78
# %bb.77:                               #   in Loop: Header=BB0_75 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB0_79
.LBB0_78:                               #   in Loop: Header=BB0_68 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB0_84
.LBB0_79:                               #   in Loop: Header=BB0_75 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB0_81
# %bb.80:                               #   in Loop: Header=BB0_68 Depth=1
	jmp	.LBB0_84
.LBB0_81:                               #   in Loop: Header=BB0_75 Depth=2
	jmp	.LBB0_82
.LBB0_82:                               #   in Loop: Header=BB0_75 Depth=2
	movslq	-8(%rbp), %rax
	movl	calc_attackers.bishop_o(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB0_75
.LBB0_83:                               # %.loopexit4
                                        #   in Loop: Header=BB0_68 Depth=1
	jmp	.LBB0_84
.LBB0_84:                               #   in Loop: Header=BB0_68 Depth=1
	jmp	.LBB0_85
.LBB0_85:                               #   in Loop: Header=BB0_68 Depth=1
	jmp	.LBB0_86
.LBB0_86:                               #   in Loop: Header=BB0_68 Depth=1
	jmp	.LBB0_87
.LBB0_87:                               #   in Loop: Header=BB0_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB0_68
.LBB0_88:                               # %.loopexit5
	jmp	.LBB0_89
.LBB0_89:
	movl	$0, -8(%rbp)
.LBB0_90:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -8(%rbp)
	jge	.LBB0_95
# %bb.91:                               #   in Loop: Header=BB0_90 Depth=1
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	addl	calc_attackers.knight_o(,%rcx,4), %eax
	movl	%eax, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$4, board(,%rax,4)
	jne	.LBB0_93
# %bb.92:                               #   in Loop: Header=BB0_90 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB0_93:                               #   in Loop: Header=BB0_90 Depth=1
	jmp	.LBB0_94
.LBB0_94:                               #   in Loop: Header=BB0_90 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB0_90
.LBB0_95:
	jmp	.LBB0_96
.LBB0_96:
	movl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB0_97:
	movl	-20(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end0:
	.size	calc_attackers, .Lfunc_end0-calc_attackers
	.cfi_endproc
                                        # -- End function
	.globl	is_attacked             # -- Begin function is_attacked
	.p2align	4, 0x90
	.type	is_attacked,@function
is_attacked:                            # @is_attacked
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB1_41
# %bb.1:
	movl	$0, -4(%rbp)
.LBB1_2:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_9 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB1_19
# %bb.3:                                #   in Loop: Header=BB1_2 Depth=1
	movslq	-4(%rbp), %rax
	movl	is_attacked.bishop_o(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$1, -8(%rbp)
	jne	.LBB1_6
# %bb.4:                                #   in Loop: Header=BB1_2 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB1_6
# %bb.5:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_6:                                #   in Loop: Header=BB1_2 Depth=1
	cmpl	$5, -8(%rbp)
	jne	.LBB1_8
# %bb.7:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_8:                                #   in Loop: Header=BB1_2 Depth=1
	jmp	.LBB1_9
.LBB1_9:                                #   Parent Loop BB1_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB1_16
# %bb.10:                               #   in Loop: Header=BB1_9 Depth=2
	cmpl	$11, -8(%rbp)
	je	.LBB1_12
# %bb.11:                               #   in Loop: Header=BB1_9 Depth=2
	cmpl	$9, -8(%rbp)
	jne	.LBB1_13
.LBB1_12:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_13:                               #   in Loop: Header=BB1_9 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB1_15
# %bb.14:                               #   in Loop: Header=BB1_2 Depth=1
	jmp	.LBB1_17
.LBB1_15:                               #   in Loop: Header=BB1_9 Depth=2
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB1_9
.LBB1_16:                               # %.loopexit1
                                        #   in Loop: Header=BB1_2 Depth=1
	jmp	.LBB1_17
.LBB1_17:                               #   in Loop: Header=BB1_2 Depth=1
	jmp	.LBB1_18
.LBB1_18:                               #   in Loop: Header=BB1_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_2
.LBB1_19:
	movl	$0, -4(%rbp)
.LBB1_20:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB1_25
# %bb.21:                               #   in Loop: Header=BB1_20 Depth=1
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	is_attacked.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$3, board(,%rax,4)
	jne	.LBB1_23
# %bb.22:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_23:                               #   in Loop: Header=BB1_20 Depth=1
	jmp	.LBB1_24
.LBB1_24:                               #   in Loop: Header=BB1_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_20
.LBB1_25:
	movl	$0, -4(%rbp)
.LBB1_26:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_30 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB1_40
# %bb.27:                               #   in Loop: Header=BB1_26 Depth=1
	movslq	-4(%rbp), %rax
	movl	is_attacked.rook_o(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$5, -8(%rbp)
	jne	.LBB1_29
# %bb.28:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_29:                               #   in Loop: Header=BB1_26 Depth=1
	jmp	.LBB1_30
.LBB1_30:                               #   Parent Loop BB1_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB1_37
# %bb.31:                               #   in Loop: Header=BB1_30 Depth=2
	cmpl	$7, -8(%rbp)
	je	.LBB1_33
# %bb.32:                               #   in Loop: Header=BB1_30 Depth=2
	cmpl	$9, -8(%rbp)
	jne	.LBB1_34
.LBB1_33:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_34:                               #   in Loop: Header=BB1_30 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB1_36
# %bb.35:                               #   in Loop: Header=BB1_26 Depth=1
	jmp	.LBB1_38
.LBB1_36:                               #   in Loop: Header=BB1_30 Depth=2
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB1_30
.LBB1_37:                               # %.loopexit
                                        #   in Loop: Header=BB1_26 Depth=1
	jmp	.LBB1_38
.LBB1_38:                               #   in Loop: Header=BB1_26 Depth=1
	jmp	.LBB1_39
.LBB1_39:                               #   in Loop: Header=BB1_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_26
.LBB1_40:
	movl	$0, -16(%rbp)
	jmp	.LBB1_81
.LBB1_41:
	movl	$0, -4(%rbp)
.LBB1_42:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_49 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB1_59
# %bb.43:                               #   in Loop: Header=BB1_42 Depth=1
	movslq	-4(%rbp), %rax
	movl	is_attacked.bishop_o(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$2, -8(%rbp)
	jne	.LBB1_46
# %bb.44:                               #   in Loop: Header=BB1_42 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB1_46
# %bb.45:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_46:                               #   in Loop: Header=BB1_42 Depth=1
	cmpl	$6, -8(%rbp)
	jne	.LBB1_48
# %bb.47:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_48:                               #   in Loop: Header=BB1_42 Depth=1
	jmp	.LBB1_49
.LBB1_49:                               #   Parent Loop BB1_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB1_56
# %bb.50:                               #   in Loop: Header=BB1_49 Depth=2
	cmpl	$12, -8(%rbp)
	je	.LBB1_52
# %bb.51:                               #   in Loop: Header=BB1_49 Depth=2
	cmpl	$10, -8(%rbp)
	jne	.LBB1_53
.LBB1_52:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_53:                               #   in Loop: Header=BB1_49 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB1_55
# %bb.54:                               #   in Loop: Header=BB1_42 Depth=1
	jmp	.LBB1_57
.LBB1_55:                               #   in Loop: Header=BB1_49 Depth=2
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB1_49
.LBB1_56:                               # %.loopexit3
                                        #   in Loop: Header=BB1_42 Depth=1
	jmp	.LBB1_57
.LBB1_57:                               #   in Loop: Header=BB1_42 Depth=1
	jmp	.LBB1_58
.LBB1_58:                               #   in Loop: Header=BB1_42 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_42
.LBB1_59:
	movl	$0, -4(%rbp)
.LBB1_60:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB1_65
# %bb.61:                               #   in Loop: Header=BB1_60 Depth=1
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	is_attacked.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$4, board(,%rax,4)
	jne	.LBB1_63
# %bb.62:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_63:                               #   in Loop: Header=BB1_60 Depth=1
	jmp	.LBB1_64
.LBB1_64:                               #   in Loop: Header=BB1_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_60
.LBB1_65:
	movl	$0, -4(%rbp)
.LBB1_66:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_70 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB1_80
# %bb.67:                               #   in Loop: Header=BB1_66 Depth=1
	movslq	-4(%rbp), %rax
	movl	is_attacked.rook_o(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	is_attacked.rook_o(,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$6, -8(%rbp)
	jne	.LBB1_69
# %bb.68:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_69:                               #   in Loop: Header=BB1_66 Depth=1
	jmp	.LBB1_70
.LBB1_70:                               #   Parent Loop BB1_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB1_77
# %bb.71:                               #   in Loop: Header=BB1_70 Depth=2
	cmpl	$8, -8(%rbp)
	je	.LBB1_73
# %bb.72:                               #   in Loop: Header=BB1_70 Depth=2
	cmpl	$10, -8(%rbp)
	jne	.LBB1_74
.LBB1_73:
	movl	$1, -16(%rbp)
	jmp	.LBB1_81
.LBB1_74:                               #   in Loop: Header=BB1_70 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB1_76
# %bb.75:                               #   in Loop: Header=BB1_66 Depth=1
	jmp	.LBB1_78
.LBB1_76:                               #   in Loop: Header=BB1_70 Depth=2
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB1_70
.LBB1_77:                               # %.loopexit2
                                        #   in Loop: Header=BB1_66 Depth=1
	jmp	.LBB1_78
.LBB1_78:                               #   in Loop: Header=BB1_66 Depth=1
	jmp	.LBB1_79
.LBB1_79:                               #   in Loop: Header=BB1_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB1_66
.LBB1_80:
	movl	$0, -16(%rbp)
.LBB1_81:
	movl	-16(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end1:
	.size	is_attacked, .Lfunc_end1-is_attacked
	.cfi_endproc
                                        # -- End function
	.globl	nk_attacked             # -- Begin function nk_attacked
	.p2align	4, 0x90
	.type	nk_attacked,@function
nk_attacked:                            # @nk_attacked
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB2_37
# %bb.1:
	movl	$0, -4(%rbp)
.LBB2_2:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_7 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB2_17
# %bb.3:                                #   in Loop: Header=BB2_2 Depth=1
	movslq	-4(%rbp), %rax
	movl	nk_attacked.bishop_o(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$1, -8(%rbp)
	jne	.LBB2_6
# %bb.4:                                #   in Loop: Header=BB2_2 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB2_6
# %bb.5:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_6:                                #   in Loop: Header=BB2_2 Depth=1
	jmp	.LBB2_7
.LBB2_7:                                #   Parent Loop BB2_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB2_14
# %bb.8:                                #   in Loop: Header=BB2_7 Depth=2
	cmpl	$11, -8(%rbp)
	je	.LBB2_10
# %bb.9:                                #   in Loop: Header=BB2_7 Depth=2
	cmpl	$9, -8(%rbp)
	jne	.LBB2_11
.LBB2_10:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_11:                               #   in Loop: Header=BB2_7 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB2_13
# %bb.12:                               #   in Loop: Header=BB2_2 Depth=1
	jmp	.LBB2_15
.LBB2_13:                               #   in Loop: Header=BB2_7 Depth=2
	movl	-16(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB2_7
.LBB2_14:                               # %.loopexit1
                                        #   in Loop: Header=BB2_2 Depth=1
	jmp	.LBB2_15
.LBB2_15:                               #   in Loop: Header=BB2_2 Depth=1
	jmp	.LBB2_16
.LBB2_16:                               #   in Loop: Header=BB2_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_2
.LBB2_17:
	movl	$0, -4(%rbp)
.LBB2_18:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB2_23
# %bb.19:                               #   in Loop: Header=BB2_18 Depth=1
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	nk_attacked.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$3, board(,%rax,4)
	jne	.LBB2_21
# %bb.20:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_21:                               #   in Loop: Header=BB2_18 Depth=1
	jmp	.LBB2_22
.LBB2_22:                               #   in Loop: Header=BB2_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_18
.LBB2_23:
	movl	$0, -4(%rbp)
.LBB2_24:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_26 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB2_36
# %bb.25:                               #   in Loop: Header=BB2_24 Depth=1
	movslq	-4(%rbp), %rax
	movl	nk_attacked.rook_o(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
.LBB2_26:                               #   Parent Loop BB2_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB2_33
# %bb.27:                               #   in Loop: Header=BB2_26 Depth=2
	cmpl	$7, -8(%rbp)
	je	.LBB2_29
# %bb.28:                               #   in Loop: Header=BB2_26 Depth=2
	cmpl	$9, -8(%rbp)
	jne	.LBB2_30
.LBB2_29:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_30:                               #   in Loop: Header=BB2_26 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB2_32
# %bb.31:                               #   in Loop: Header=BB2_24 Depth=1
	jmp	.LBB2_34
.LBB2_32:                               #   in Loop: Header=BB2_26 Depth=2
	movl	-16(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB2_26
.LBB2_33:                               # %.loopexit
                                        #   in Loop: Header=BB2_24 Depth=1
	jmp	.LBB2_34
.LBB2_34:                               #   in Loop: Header=BB2_24 Depth=1
	jmp	.LBB2_35
.LBB2_35:                               #   in Loop: Header=BB2_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_24
.LBB2_36:
	movl	$0, -20(%rbp)
	jmp	.LBB2_73
.LBB2_37:
	movl	$0, -4(%rbp)
.LBB2_38:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_43 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB2_53
# %bb.39:                               #   in Loop: Header=BB2_38 Depth=1
	movslq	-4(%rbp), %rax
	movl	nk_attacked.bishop_o(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$2, -8(%rbp)
	jne	.LBB2_42
# %bb.40:                               #   in Loop: Header=BB2_38 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB2_42
# %bb.41:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_42:                               #   in Loop: Header=BB2_38 Depth=1
	jmp	.LBB2_43
.LBB2_43:                               #   Parent Loop BB2_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB2_50
# %bb.44:                               #   in Loop: Header=BB2_43 Depth=2
	cmpl	$12, -8(%rbp)
	je	.LBB2_46
# %bb.45:                               #   in Loop: Header=BB2_43 Depth=2
	cmpl	$10, -8(%rbp)
	jne	.LBB2_47
.LBB2_46:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_47:                               #   in Loop: Header=BB2_43 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB2_49
# %bb.48:                               #   in Loop: Header=BB2_38 Depth=1
	jmp	.LBB2_51
.LBB2_49:                               #   in Loop: Header=BB2_43 Depth=2
	movl	-16(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB2_43
.LBB2_50:                               # %.loopexit3
                                        #   in Loop: Header=BB2_38 Depth=1
	jmp	.LBB2_51
.LBB2_51:                               #   in Loop: Header=BB2_38 Depth=1
	jmp	.LBB2_52
.LBB2_52:                               #   in Loop: Header=BB2_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_38
.LBB2_53:
	movl	$0, -4(%rbp)
.LBB2_54:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB2_59
# %bb.55:                               #   in Loop: Header=BB2_54 Depth=1
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	nk_attacked.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$4, board(,%rax,4)
	jne	.LBB2_57
# %bb.56:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_57:                               #   in Loop: Header=BB2_54 Depth=1
	jmp	.LBB2_58
.LBB2_58:                               #   in Loop: Header=BB2_54 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_54
.LBB2_59:
	movl	$0, -4(%rbp)
.LBB2_60:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_62 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB2_72
# %bb.61:                               #   in Loop: Header=BB2_60 Depth=1
	movslq	-4(%rbp), %rax
	movl	nk_attacked.rook_o(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	nk_attacked.rook_o(,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
.LBB2_62:                               #   Parent Loop BB2_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -8(%rbp)
	je	.LBB2_69
# %bb.63:                               #   in Loop: Header=BB2_62 Depth=2
	cmpl	$8, -8(%rbp)
	je	.LBB2_65
# %bb.64:                               #   in Loop: Header=BB2_62 Depth=2
	cmpl	$10, -8(%rbp)
	jne	.LBB2_66
.LBB2_65:
	movl	$1, -20(%rbp)
	jmp	.LBB2_73
.LBB2_66:                               #   in Loop: Header=BB2_62 Depth=2
	cmpl	$13, -8(%rbp)
	je	.LBB2_68
# %bb.67:                               #   in Loop: Header=BB2_60 Depth=1
	jmp	.LBB2_70
.LBB2_68:                               #   in Loop: Header=BB2_62 Depth=2
	movl	-16(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB2_62
.LBB2_69:                               # %.loopexit2
                                        #   in Loop: Header=BB2_60 Depth=1
	jmp	.LBB2_70
.LBB2_70:                               #   in Loop: Header=BB2_60 Depth=1
	jmp	.LBB2_71
.LBB2_71:                               #   in Loop: Header=BB2_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_60
.LBB2_72:
	movl	$0, -20(%rbp)
.LBB2_73:
	movl	-20(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end2:
	.size	nk_attacked, .Lfunc_end2-nk_attacked
	.cfi_endproc
                                        # -- End function
	.globl	init_book               # -- Begin function init_book
	.p2align	4, 0x90
	.type	init_book,@function
init_book:                              # @init_book
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$1, %eax
	popq	%rbp
	retq
.Lfunc_end3:
	.size	init_book, .Lfunc_end3-init_book
	.cfi_endproc
                                        # -- End function
	.globl	choose_book_move        # -- Begin function choose_book_move
	.p2align	4, 0x90
	.type	choose_book_move,@function
choose_book_move:                       # @choose_book_move
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	dummy, %rax
	movq	%rax, (%rdi)
	movq	dummy+8, %rax
	movq	%rax, 8(%rdi)
	movq	dummy+16, %rax
	movq	%rax, 16(%rdi)
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end4:
	.size	choose_book_move, .Lfunc_end4-choose_book_move
	.cfi_endproc
                                        # -- End function
	.globl	ProcessHoldings         # -- Begin function ProcessHoldings
	.p2align	4, 0x90
	.type	ProcessHoldings,@function
ProcessHoldings:                        # @ProcessHoldings
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$holding, %rax
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$128, %edx
	callq	memset
	movl	$-1056969216, hold_hash # imm = 0xC0FFEE00
	movl	$0, white_hand_eval
	movl	$0, black_hand_eval
	callq	reset_ecache
	movl	$0, num_holding
	movl	$0, num_holding+4
	movl	$0, -4(%rbp)
.LBB5_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_3 Depth 2
                                        #     Child Loop BB5_8 Depth 2
	cmpl	$1, -4(%rbp)
	jg	.LBB5_20
# %bb.2:                                #   in Loop: Header=BB5_1 Depth=1
	jmp	.LBB5_3
.LBB5_3:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -8(%rbp)
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$91, %eax
	je	.LBB5_7
# %bb.4:                                #   in Loop: Header=BB5_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB5_6
# %bb.5:
	jmp	.LBB5_46
.LBB5_6:                                #   in Loop: Header=BB5_3 Depth=2
	jmp	.LBB5_3
.LBB5_7:                                #   in Loop: Header=BB5_1 Depth=1
	jmp	.LBB5_8
.LBB5_8:                                #   Parent Loop BB5_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$93, %eax
	je	.LBB5_18
# %bb.9:                                #   in Loop: Header=BB5_8 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -8(%rbp)
	movsbl	(%rax,%rcx), %eax
	addl	$-66, %eax
	movl	%eax, %ecx
	subl	$48, %ecx
	ja	.LBB5_16
# %bb.10:                               #   in Loop: Header=BB5_8 Depth=2
	movq	.LJTI5_0(,%rax,8), %rax
	jmpq	*%rax
.LBB5_11:                               #   in Loop: Header=BB5_8 Depth=2
	movl	$2, %r9d
	movl	$1, %r8d
	movabsq	$holding, %rsi
	movabsq	$zobrist, %rdx
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	movq	%rsi, %rcx
	addq	%rdi, %rcx
	movl	-4(%rbp), %edi
	cmpl	$0, %edi
	movl	$2, %edi
	cmovel	%r8d, %edi
	movslq	%edi, %rdi
	movl	(%rcx,%rdi,4), %eax
	addl	$1, %eax
	movl	%eax, (%rcx,%rdi,4)
	movslq	-4(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, num_holding(,%rax,4)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	cmovel	%r8d, %eax
	cltq
	imulq	$576, %rax, %rax        # imm = 0x240
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	cmovel	%r8d, %r9d
	movslq	%r9d, %rax
	movslq	(%rsi,%rax,4), %rax
	movl	(%rdx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
	jmp	.LBB5_17
.LBB5_12:                               #   in Loop: Header=BB5_8 Depth=2
	movl	$10, %r9d
	movl	$9, %r8d
	movabsq	$holding, %rsi
	movabsq	$zobrist, %rdx
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	movq	%rsi, %rcx
	addq	%rdi, %rcx
	movl	-4(%rbp), %edi
	cmpl	$0, %edi
	movl	$10, %edi
	cmovel	%r8d, %edi
	movslq	%edi, %rdi
	movl	(%rcx,%rdi,4), %eax
	addl	$1, %eax
	movl	%eax, (%rcx,%rdi,4)
	movslq	-4(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, num_holding(,%rax,4)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	movl	$10, %eax
	cmovel	%r8d, %eax
	cltq
	imulq	$576, %rax, %rax        # imm = 0x240
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	cmovel	%r8d, %r9d
	movslq	%r9d, %rax
	movslq	(%rsi,%rax,4), %rax
	movl	(%rdx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
	jmp	.LBB5_17
.LBB5_13:                               #   in Loop: Header=BB5_8 Depth=2
	movl	$8, %r9d
	movl	$7, %r8d
	movabsq	$holding, %rsi
	movabsq	$zobrist, %rdx
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	movq	%rsi, %rcx
	addq	%rdi, %rcx
	movl	-4(%rbp), %edi
	cmpl	$0, %edi
	movl	$8, %edi
	cmovel	%r8d, %edi
	movslq	%edi, %rdi
	movl	(%rcx,%rdi,4), %eax
	addl	$1, %eax
	movl	%eax, (%rcx,%rdi,4)
	movslq	-4(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, num_holding(,%rax,4)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	movl	$8, %eax
	cmovel	%r8d, %eax
	cltq
	imulq	$576, %rax, %rax        # imm = 0x240
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	cmovel	%r8d, %r9d
	movslq	%r9d, %rax
	movslq	(%rsi,%rax,4), %rax
	movl	(%rdx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
	jmp	.LBB5_17
.LBB5_14:                               #   in Loop: Header=BB5_8 Depth=2
	movl	$12, %r9d
	movl	$11, %r8d
	movabsq	$holding, %rsi
	movabsq	$zobrist, %rdx
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	movq	%rsi, %rcx
	addq	%rdi, %rcx
	movl	-4(%rbp), %edi
	cmpl	$0, %edi
	movl	$12, %edi
	cmovel	%r8d, %edi
	movslq	%edi, %rdi
	movl	(%rcx,%rdi,4), %eax
	addl	$1, %eax
	movl	%eax, (%rcx,%rdi,4)
	movslq	-4(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, num_holding(,%rax,4)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	movl	$12, %eax
	cmovel	%r8d, %eax
	cltq
	imulq	$576, %rax, %rax        # imm = 0x240
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	cmovel	%r8d, %r9d
	movslq	%r9d, %rax
	movslq	(%rsi,%rax,4), %rax
	movl	(%rdx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
	jmp	.LBB5_17
.LBB5_15:                               #   in Loop: Header=BB5_8 Depth=2
	movl	$4, %r9d
	movl	$3, %r8d
	movabsq	$holding, %rsi
	movabsq	$zobrist, %rdx
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	movq	%rsi, %rcx
	addq	%rdi, %rcx
	movl	-4(%rbp), %edi
	cmpl	$0, %edi
	movl	$4, %edi
	cmovel	%r8d, %edi
	movslq	%edi, %rdi
	movl	(%rcx,%rdi,4), %eax
	addl	$1, %eax
	movl	%eax, (%rcx,%rdi,4)
	movslq	-4(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, num_holding(,%rax,4)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	cmovel	%r8d, %eax
	cltq
	imulq	$576, %rax, %rax        # imm = 0x240
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	cmovel	%r8d, %r9d
	movslq	%r9d, %rax
	movslq	(%rsi,%rax,4), %rax
	movl	(%rdx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
	jmp	.LBB5_17
.LBB5_16:
	jmp	.LBB5_46
.LBB5_17:                               #   in Loop: Header=BB5_8 Depth=2
	jmp	.LBB5_8
.LBB5_18:                               #   in Loop: Header=BB5_1 Depth=1
	jmp	.LBB5_19
.LBB5_19:                               #   in Loop: Header=BB5_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_1
.LBB5_20:
	cmpl	$1, Variant
	jne	.LBB5_46
# %bb.21:
	cmpl	$0, userealholdings
	jne	.LBB5_46
# %bb.22:
	movabsq	$realholdings, %rdi
	movq	-16(%rbp), %rsi
	movl	$200, %edx
	callq	strncpy
	cmpl	$1, comp_color
	jne	.LBB5_34
# %bb.23:
	cmpl	$0, holding+72
	jne	.LBB5_25
# %bb.24:
	movl	holding+72, %eax
	addl	$1, %eax
	movl	%eax, holding+72
	movl	num_holding+4, %eax
	addl	$1, %eax
	movl	%eax, num_holding+4
	movslq	holding+72, %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_25:
	cmpl	$0, holding+112
	jne	.LBB5_27
# %bb.26:
	movl	holding+112, %eax
	addl	$1, %eax
	movl	%eax, holding+112
	movl	num_holding+4, %eax
	addl	$1, %eax
	movl	%eax, num_holding+4
	movslq	holding+112, %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_27:
	cmpl	$0, holding+80
	jne	.LBB5_29
# %bb.28:
	movl	holding+80, %eax
	addl	$1, %eax
	movl	%eax, holding+80
	movl	num_holding+4, %eax
	addl	$1, %eax
	movl	%eax, num_holding+4
	movslq	holding+80, %rax
	movl	zobrist+2304(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_29:
	cmpl	$0, holding+96
	jne	.LBB5_31
# %bb.30:
	movl	holding+96, %eax
	addl	$1, %eax
	movl	%eax, holding+96
	movl	num_holding+4, %eax
	addl	$1, %eax
	movl	%eax, num_holding+4
	movslq	holding+96, %rax
	movl	zobrist+2304(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_31:
	cmpl	$0, holding+104
	jne	.LBB5_33
# %bb.32:
	movl	holding+104, %eax
	addl	$1, %eax
	movl	%eax, holding+104
	movl	num_holding+4, %eax
	addl	$1, %eax
	movl	%eax, num_holding+4
	movslq	holding+104, %rax
	movl	zobrist+2304(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_33:
	jmp	.LBB5_45
.LBB5_34:
	cmpl	$0, holding+36
	jne	.LBB5_36
# %bb.35:
	movl	holding+36, %eax
	addl	$1, %eax
	movl	%eax, holding+36
	movl	num_holding, %eax
	addl	$1, %eax
	movl	%eax, num_holding
	movslq	holding+36, %rax
	movl	zobrist+5184(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_36:
	cmpl	$0, holding+28
	jne	.LBB5_38
# %bb.37:
	movl	holding+28, %eax
	addl	$1, %eax
	movl	%eax, holding+28
	movl	num_holding, %eax
	addl	$1, %eax
	movl	%eax, num_holding
	movslq	holding+28, %rax
	movl	zobrist+5184(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_38:
	cmpl	$0, holding+44
	jne	.LBB5_40
# %bb.39:
	movl	holding+44, %eax
	addl	$1, %eax
	movl	%eax, holding+44
	movl	num_holding, %eax
	addl	$1, %eax
	movl	%eax, num_holding
	movslq	holding+44, %rax
	movl	zobrist+5184(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_40:
	cmpl	$0, holding+12
	jne	.LBB5_42
# %bb.41:
	movl	holding+12, %eax
	addl	$1, %eax
	movl	%eax, holding+12
	movl	num_holding, %eax
	addl	$1, %eax
	movl	%eax, num_holding
	movslq	holding+12, %rax
	movl	zobrist+5184(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_42:
	cmpl	$0, holding+4
	jne	.LBB5_44
# %bb.43:
	movl	holding+4, %eax
	addl	$1, %eax
	movl	%eax, holding+4
	movl	num_holding, %eax
	addl	$1, %eax
	movl	%eax, num_holding
	movslq	holding+4, %rax
	movl	zobrist+5184(,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB5_44:
	jmp	.LBB5_45
.LBB5_45:
	jmp	.LBB5_46
.LBB5_46:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end5:
	.size	ProcessHoldings, .Lfunc_end5-ProcessHoldings
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI5_0:
	.quad	.LBB5_14
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_15
	.quad	.LBB5_16
	.quad	.LBB5_11
	.quad	.LBB5_12
	.quad	.LBB5_13
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_14
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_16
	.quad	.LBB5_15
	.quad	.LBB5_16
	.quad	.LBB5_11
	.quad	.LBB5_12
	.quad	.LBB5_13
                                        # -- End function
	.text
	.globl	text_to_piece           # -- Begin function text_to_piece
	.p2align	4, 0x90
	.type	text_to_piece,@function
text_to_piece:                          # @text_to_piece
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movb	%dil, -1(%rbp)
	movl	%esi, -12(%rbp)
	movsbl	-1(%rbp), %eax
	addl	$-66, %eax
	movl	%eax, %ecx
	subl	$48, %ecx
	ja	.LBB6_7
# %bb.1:
	movq	.LJTI6_0(,%rax,8), %rax
	jmpq	*%rax
.LBB6_2:
	movl	$2, %eax
	movl	$1, %ecx
	movl	-12(%rbp), %edx
	cmpl	$0, %edx
	cmovel	%ecx, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_8
.LBB6_3:
	movl	$12, %eax
	movl	$11, %ecx
	movl	-12(%rbp), %edx
	cmpl	$0, %edx
	cmovel	%ecx, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_8
.LBB6_4:
	movl	$4, %eax
	movl	$3, %ecx
	movl	-12(%rbp), %edx
	cmpl	$0, %edx
	cmovel	%ecx, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_8
.LBB6_5:
	movl	$8, %eax
	movl	$7, %ecx
	movl	-12(%rbp), %edx
	cmpl	$0, %edx
	cmovel	%ecx, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_8
.LBB6_6:
	movl	$10, %eax
	movl	$9, %ecx
	movl	-12(%rbp), %edx
	cmpl	$0, %edx
	cmovel	%ecx, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_8
.LBB6_7:
	movl	$13, -8(%rbp)
.LBB6_8:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end6:
	.size	text_to_piece, .Lfunc_end6-text_to_piece
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI6_0:
	.quad	.LBB6_3
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_4
	.quad	.LBB6_7
	.quad	.LBB6_2
	.quad	.LBB6_6
	.quad	.LBB6_5
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_3
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_7
	.quad	.LBB6_4
	.quad	.LBB6_7
	.quad	.LBB6_2
	.quad	.LBB6_6
	.quad	.LBB6_5
                                        # -- End function
	.text
	.globl	SwitchColor             # -- Begin function SwitchColor
	.p2align	4, 0x90
	.type	SwitchColor,@function
SwitchColor:                            # @SwitchColor
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.LSwitchColor.t, %rsi
	leaq	-64(%rbp), %rax
	movl	%edi, -4(%rbp)
	movq	%rax, %rdi
	movl	$52, %edx
	callq	memcpy
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end7:
	.size	SwitchColor, .Lfunc_end7-SwitchColor
	.cfi_endproc
                                        # -- End function
	.globl	SwitchPromoted          # -- Begin function SwitchPromoted
	.p2align	4, 0x90
	.type	SwitchPromoted,@function
SwitchPromoted:                         # @SwitchPromoted
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.LSwitchPromoted.t, %rsi
	leaq	-64(%rbp), %rax
	movl	%edi, -4(%rbp)
	movq	%rax, %rdi
	movl	$52, %edx
	callq	memcpy
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end8:
	.size	SwitchPromoted, .Lfunc_end8-SwitchPromoted
	.cfi_endproc
                                        # -- End function
	.globl	addHolding              # -- Begin function addHolding
	.p2align	4, 0x90
	.type	addHolding,@function
addHolding:                             # @addHolding
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	cmpl	$0, Variant
	jne	.LBB9_2
# %bb.1:
	movabsq	$holding, %rax
	movabsq	$zobrist, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edi
	addl	$1, %edi
	movl	%edi, (%rsi,%rdx,4)
	movslq	-8(%rbp), %rdx
	movl	num_holding(,%rdx,4), %esi
	addl	$1, %esi
	movl	%esi, num_holding(,%rdx,4)
	movslq	-4(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movslq	(%rax,%rdx,4), %rax
	movl	(%rcx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
.LBB9_2:
	cmpl	$0, -8(%rbp)
	jne	.LBB9_4
# %bb.3:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	addl	white_hand_eval, %eax
	movl	%eax, white_hand_eval
	jmp	.LBB9_5
.LBB9_4:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	addl	black_hand_eval, %eax
	movl	%eax, black_hand_eval
.LBB9_5:
	movslq	-4(%rbp), %rax
	movl	material(,%rax,4), %eax
	addl	Material, %eax
	movl	%eax, Material
	popq	%rbp
	retq
.Lfunc_end9:
	.size	addHolding, .Lfunc_end9-addHolding
	.cfi_endproc
                                        # -- End function
	.globl	removeHolding           # -- Begin function removeHolding
	.p2align	4, 0x90
	.type	removeHolding,@function
removeHolding:                          # @removeHolding
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	cmpl	$0, Variant
	jne	.LBB10_2
# %bb.1:
	movabsq	$holding, %rax
	movabsq	$zobrist, %rcx
	movslq	-4(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	xorl	hold_hash, %ecx
	movl	%ecx, hold_hash
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, (%rax,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, num_holding(,%rax,4)
.LBB10_2:
	cmpl	$0, -8(%rbp)
	jne	.LBB10_4
# %bb.3:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	movl	white_hand_eval, %ecx
	subl	%eax, %ecx
	movl	%ecx, white_hand_eval
	jmp	.LBB10_5
.LBB10_4:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	movl	black_hand_eval, %ecx
	subl	%eax, %ecx
	movl	%ecx, black_hand_eval
.LBB10_5:
	movslq	-4(%rbp), %rax
	movl	material(,%rax,4), %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	popq	%rbp
	retq
.Lfunc_end10:
	.size	removeHolding, .Lfunc_end10-removeHolding
	.cfi_endproc
                                        # -- End function
	.globl	DropaddHolding          # -- Begin function DropaddHolding
	.p2align	4, 0x90
	.type	DropaddHolding,@function
DropaddHolding:                         # @DropaddHolding
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$holding, %rax
	movabsq	$zobrist, %rcx
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edi
	addl	$1, %edi
	movl	%edi, (%rsi,%rdx,4)
	movslq	-8(%rbp), %rdx
	movl	num_holding(,%rdx,4), %esi
	addl	$1, %esi
	movl	%esi, num_holding(,%rdx,4)
	movslq	-4(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movslq	(%rax,%rdx,4), %rax
	movl	(%rcx,%rax,4), %eax
	xorl	hold_hash, %eax
	movl	%eax, hold_hash
	cmpl	$0, -8(%rbp)
	jne	.LBB11_2
# %bb.1:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	addl	white_hand_eval, %eax
	movl	%eax, white_hand_eval
	jmp	.LBB11_3
.LBB11_2:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	addl	black_hand_eval, %eax
	movl	%eax, black_hand_eval
.LBB11_3:
	movslq	-4(%rbp), %rax
	movl	material(,%rax,4), %eax
	addl	Material, %eax
	movl	%eax, Material
	popq	%rbp
	retq
.Lfunc_end11:
	.size	DropaddHolding, .Lfunc_end11-DropaddHolding
	.cfi_endproc
                                        # -- End function
	.globl	DropremoveHolding       # -- Begin function DropremoveHolding
	.p2align	4, 0x90
	.type	DropremoveHolding,@function
DropremoveHolding:                      # @DropremoveHolding
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$holding, %rax
	movabsq	$zobrist, %rcx
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movslq	-4(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	xorl	hold_hash, %ecx
	movl	%ecx, hold_hash
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, (%rax,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	num_holding(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, num_holding(,%rax,4)
	cmpl	$0, -8(%rbp)
	jne	.LBB12_2
# %bb.1:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	movl	white_hand_eval, %ecx
	subl	%eax, %ecx
	movl	%ecx, white_hand_eval
	jmp	.LBB12_3
.LBB12_2:
	movslq	-4(%rbp), %rax
	movl	hand_value(,%rax,4), %eax
	movl	black_hand_eval, %ecx
	subl	%eax, %ecx
	movl	%ecx, black_hand_eval
.LBB12_3:
	movslq	-4(%rbp), %rax
	movl	material(,%rax,4), %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	popq	%rbp
	retq
.Lfunc_end12:
	.size	DropremoveHolding, .Lfunc_end12-DropremoveHolding
	.cfi_endproc
                                        # -- End function
	.globl	printHolding            # -- Begin function printHolding
	.p2align	4, 0x90
	.type	printHolding,@function
printHolding:                           # @printHolding
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$.L.str, %rdi
	movl	holding+4, %esi
	movl	holding+28, %edx
	movl	holding+44, %ecx
	movl	holding+12, %r8d
	movl	holding+36, %r9d
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.1, %rdi
	movl	holding+72, %esi
	movl	holding+96, %edx
	movl	holding+112, %ecx
	movl	holding+80, %r8d
	movl	holding+104, %r9d
	movb	$0, %al
	callq	printf
	popq	%rbp
	retq
.Lfunc_end13:
	.size	printHolding, .Lfunc_end13-printHolding
	.cfi_endproc
                                        # -- End function
	.globl	is_draw                 # -- Begin function is_draw
	.p2align	4, 0x90
	.type	is_draw,@function
is_draw:                                # @is_draw
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$0, -12(%rbp)
	cmpl	$4, fifty
	jl	.LBB14_13
# %bb.1:
	movl	move_number, %eax
	movl	move_number, %ecx
	addl	ply, %ecx
	subl	$1, %ecx
	subl	fifty, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_3
# %bb.2:
	movl	move_number, %eax
	addl	ply, %eax
	subl	$1, %eax
	subl	fifty, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_4
.LBB14_3:
	movl	move_number, %eax
	movl	%eax, -8(%rbp)
.LBB14_4:
	movl	move_number, %eax
	addl	ply, %eax
	subl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB14_5:                               # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jl	.LBB14_7
# %bb.6:                                #   in Loop: Header=BB14_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	setge	%al
.LBB14_7:                               #   in Loop: Header=BB14_5 Depth=1
	testb	$1, %al
	jne	.LBB14_8
	jmp	.LBB14_12
.LBB14_8:                               #   in Loop: Header=BB14_5 Depth=1
	movl	hash, %eax
	movslq	-4(%rbp), %rcx
	cmpl	hash_history(,%rcx,4), %eax
	jne	.LBB14_10
# %bb.9:
	movl	$1, -16(%rbp)
	jmp	.LBB14_26
.LBB14_10:                              #   in Loop: Header=BB14_5 Depth=1
	jmp	.LBB14_11
.LBB14_11:                              #   in Loop: Header=BB14_5 Depth=1
	movl	-4(%rbp), %eax
	subl	$2, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_5
.LBB14_12:
	jmp	.LBB14_13
.LBB14_13:
	cmpl	$6, fifty
	jl	.LBB14_25
# %bb.14:
	movl	$2, %ecx
	movl	move_number, %esi
	subl	$1, %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	subl	%edx, %esi
	movl	%esi, -20(%rbp)
	movl	move_number, %eax
	addl	ply, %eax
	subl	$1, %eax
	subl	fifty, %eax
	movl	%eax, -8(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB14_15:                              # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jl	.LBB14_17
# %bb.16:                               #   in Loop: Header=BB14_15 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	setge	%al
.LBB14_17:                              #   in Loop: Header=BB14_15 Depth=1
	testb	$1, %al
	jne	.LBB14_18
	jmp	.LBB14_24
.LBB14_18:                              #   in Loop: Header=BB14_15 Depth=1
	movl	hash, %eax
	movslq	-4(%rbp), %rcx
	cmpl	hash_history(,%rcx,4), %eax
	jne	.LBB14_20
# %bb.19:                               #   in Loop: Header=BB14_15 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB14_20:                              #   in Loop: Header=BB14_15 Depth=1
	cmpl	$2, -12(%rbp)
	jl	.LBB14_22
# %bb.21:
	movl	$1, -16(%rbp)
	jmp	.LBB14_26
.LBB14_22:                              #   in Loop: Header=BB14_15 Depth=1
	jmp	.LBB14_23
.LBB14_23:                              #   in Loop: Header=BB14_15 Depth=1
	movl	-4(%rbp), %eax
	subl	$2, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_15
.LBB14_24:
	jmp	.LBB14_25
.LBB14_25:
	movl	$0, -16(%rbp)
.LBB14_26:
	movl	-16(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end14:
	.size	is_draw, .Lfunc_end14-is_draw
	.cfi_endproc
                                        # -- End function
	.globl	storeECache             # -- Begin function storeECache
	.p2align	4, 0x90
	.type	storeECache,@function
storeECache:                            # @storeECache
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	hash, %eax
	xorl	%edx, %edx
	divl	ECacheSize
	movl	%edx, -4(%rbp)
	movl	hash, %eax
	movq	ECache, %rcx
	movslq	-4(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	hold_hash, %eax
	movq	ECache, %rcx
	movslq	-4(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	movq	ECache, %rcx
	movslq	-4(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	popq	%rbp
	retq
.Lfunc_end15:
	.size	storeECache, .Lfunc_end15-storeECache
	.cfi_endproc
                                        # -- End function
	.globl	checkECache             # -- Begin function checkECache
	.p2align	4, 0x90
	.type	checkECache,@function
checkECache:                            # @checkECache
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	ECacheProbes, %eax
	addl	$1, %eax
	movl	%eax, ECacheProbes
	movl	hash, %eax
	xorl	%edx, %edx
	divl	ECacheSize
	movl	%edx, -4(%rbp)
	movq	ECache, %rax
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	cmpl	hash, %eax
	jne	.LBB16_3
# %bb.1:
	movq	ECache, %rax
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	hold_hash, %eax
	jne	.LBB16_3
# %bb.2:
	movl	ECacheHits, %eax
	addl	$1, %eax
	movl	%eax, ECacheHits
	movq	-16(%rbp), %rax
	movl	$1, (%rax)
	movq	ECache, %rax
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB16_3:
	popq	%rbp
	retq
.Lfunc_end16:
	.size	checkECache, .Lfunc_end16-checkECache
	.cfi_endproc
                                        # -- End function
	.globl	reset_ecache            # -- Begin function reset_ecache
	.p2align	4, 0x90
	.type	reset_ecache,@function
reset_ecache:                           # @reset_ecache
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	ECache, %rdi
	movslq	ECacheSize, %rax
	imulq	$12, %rax, %rdx
	xorl	%esi, %esi
	callq	memset
	popq	%rbp
	retq
.Lfunc_end17:
	.size	reset_ecache, .Lfunc_end17-reset_ecache
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ecache            # -- Begin function alloc_ecache
	.p2align	4, 0x90
	.type	alloc_ecache,@function
alloc_ecache:                           # @alloc_ecache
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movslq	ECacheSize, %rax
	imulq	$12, %rax, %rdi
	callq	malloc
	movq	%rax, ECache
	cmpq	$0, ECache
	jne	.LBB18_2
# %bb.1:
	movabsq	$.L.str.3, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB18_2:
	popq	%rbp
	retq
.Lfunc_end18:
	.size	alloc_ecache, .Lfunc_end18-alloc_ecache
	.cfi_endproc
                                        # -- End function
	.globl	free_ecache             # -- Begin function free_ecache
	.p2align	4, 0x90
	.type	free_ecache,@function
free_ecache:                            # @free_ecache
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	ECache, %rdi
	callq	free
	popq	%rbp
	retq
.Lfunc_end19:
	.size	free_ecache, .Lfunc_end19-free_ecache
	.cfi_endproc
                                        # -- End function
	.globl	setup_epd_line          # -- Begin function setup_epd_line
	.p2align	4, 0x90
	.type	setup_epd_line,@function
setup_epd_line:                         # @setup_epd_line
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movabsq	$board, %rax
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$97, -64(%rbp)
	movl	$49, -60(%rbp)
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$576, %edx              # imm = 0x240
	callq	memset
	movl	$0, white_castled
	movl	$0, black_castled
	movl	$50, book_ply
	movl	setup_epd_line.rankoffsets, %eax
	movl	%eax, -20(%rbp)
.LBB20_1:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB20_3
# %bb.2:                                #   in Loop: Header=BB20_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_1
.LBB20_3:
	jmp	.LBB20_4
.LBB20_4:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_10 Depth 2
                                        #     Child Loop BB20_37 Depth 2
                                        #     Child Loop BB20_45 Depth 2
                                        #     Child Loop BB20_48 Depth 2
                                        #     Child Loop BB20_63 Depth 2
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$10, %ecx
	je	.LBB20_6
# %bb.5:                                #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	setne	%al
.LBB20_6:                               #   in Loop: Header=BB20_4 Depth=1
	testb	$1, %al
	jne	.LBB20_7
	jmp	.LBB20_85
.LBB20_7:                               #   in Loop: Header=BB20_4 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB20_14
# %bb.8:                                #   in Loop: Header=BB20_4 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB20_14
# %bb.9:                                #   in Loop: Header=BB20_4 Depth=1
	movl	$0, -36(%rbp)
.LBB20_10:                              #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %ebx
	movq	-32(%rbp), %rdi
	movslq	-12(%rbp), %rax
	addq	%rax, %rdi
	callq	atoi
	cmpl	%eax, %ebx
	jge	.LBB20_13
# %bb.11:                               #   in Loop: Header=BB20_10 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$13, board(,%rax,4)
# %bb.12:                               #   in Loop: Header=BB20_10 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB20_10
.LBB20_13:                              #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rdi
	movslq	-12(%rbp), %rax
	addq	%rax, %rdi
	callq	atoi
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_84
.LBB20_14:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB20_17
# %bb.15:                               #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$47, %eax
	jne	.LBB20_17
# %bb.16:                               #   in Loop: Header=BB20_4 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movslq	-40(%rbp), %rax
	movl	setup_epd_line.rankoffsets(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -16(%rbp)
	jmp	.LBB20_83
.LBB20_17:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB20_34
# %bb.18:                               #   in Loop: Header=BB20_4 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB20_34
# %bb.19:                               #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-66, %eax
	movl	%eax, %ecx
	subl	$48, %ecx
	ja	.LBB20_33
# %bb.20:                               #   in Loop: Header=BB20_4 Depth=1
	movq	.LJTI20_0(,%rax,8), %rax
	jmpq	*%rax
.LBB20_21:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$2, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_22:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$1, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_23:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$4, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_24:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$3, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_25:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$12, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_26:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$11, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_27:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$8, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_28:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$7, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_29:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$10, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_30:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	movl	$9, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_31:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, bking_loc
	movslq	bking_loc, %rax
	movl	$6, board(,%rax,4)
	jmp	.LBB20_33
.LBB20_32:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, wking_loc
	movslq	wking_loc, %rax
	movl	$5, board(,%rax,4)
.LBB20_33:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_82
.LBB20_34:                              #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB20_81
# %bb.35:                               #   in Loop: Header=BB20_4 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	jne	.LBB20_43
# %bb.36:                               #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_37
.LBB20_37:                              #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB20_39
# %bb.38:                               #   in Loop: Header=BB20_37 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_37
.LBB20_39:                              #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$119, %eax
	jne	.LBB20_41
# %bb.40:                               #   in Loop: Header=BB20_4 Depth=1
	movl	$1, white_to_move
	jmp	.LBB20_42
.LBB20_41:                              #   in Loop: Header=BB20_4 Depth=1
	movl	$0, white_to_move
.LBB20_42:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_80
.LBB20_43:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$2, -24(%rbp)
	jne	.LBB20_61
# %bb.44:                               #   in Loop: Header=BB20_4 Depth=1
	movl	$1, moved+120
	movl	$1, moved+132
	movl	$1, moved+104
	movl	$1, moved+468
	movl	$1, moved+456
	movl	$1, moved+440
.LBB20_45:                              #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB20_47
# %bb.46:                               #   in Loop: Header=BB20_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_45
.LBB20_47:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_48
.LBB20_48:                              #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	je	.LBB20_60
# %bb.49:                               #   in Loop: Header=BB20_48 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, %ecx
	subl	$45, %ecx
	je	.LBB20_54
	jmp	.LBB20_50
.LBB20_50:                              #   in Loop: Header=BB20_48 Depth=2
	movl	%eax, %ecx
	subl	$75, %ecx
	je	.LBB20_55
	jmp	.LBB20_51
.LBB20_51:                              #   in Loop: Header=BB20_48 Depth=2
	movl	%eax, %ecx
	subl	$81, %ecx
	je	.LBB20_56
	jmp	.LBB20_52
.LBB20_52:                              #   in Loop: Header=BB20_48 Depth=2
	movl	%eax, %ecx
	subl	$107, %ecx
	je	.LBB20_57
	jmp	.LBB20_53
.LBB20_53:                              #   in Loop: Header=BB20_48 Depth=2
	subl	$113, %eax
	je	.LBB20_58
	jmp	.LBB20_59
.LBB20_54:                              #   in Loop: Header=BB20_48 Depth=2
	jmp	.LBB20_59
.LBB20_55:                              #   in Loop: Header=BB20_48 Depth=2
	movl	$0, moved+132
	movl	$0, moved+120
	jmp	.LBB20_59
.LBB20_56:                              #   in Loop: Header=BB20_48 Depth=2
	movl	$0, moved+104
	movl	$0, moved+120
	jmp	.LBB20_59
.LBB20_57:                              #   in Loop: Header=BB20_48 Depth=2
	movl	$0, moved+468
	movl	$0, moved+456
	jmp	.LBB20_59
.LBB20_58:                              #   in Loop: Header=BB20_48 Depth=2
	movl	$0, moved+440
	movl	$0, moved+456
.LBB20_59:                              #   in Loop: Header=BB20_48 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_48
.LBB20_60:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_79
.LBB20_61:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$3, -24(%rbp)
	jne	.LBB20_69
# %bb.62:                               #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_63
.LBB20_63:                              #   Parent Loop BB20_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$32, %eax
	jne	.LBB20_65
# %bb.64:                               #   in Loop: Header=BB20_63 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_63
.LBB20_65:                              #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$45, %eax
	jne	.LBB20_67
# %bb.66:                               #   in Loop: Header=BB20_4 Depth=1
	movl	$0, ep_square
	jmp	.LBB20_68
.LBB20_67:                              #   in Loop: Header=BB20_4 Depth=1
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -12(%rbp)
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -12(%rbp)
	movslq	%ecx, %rcx
	movsbl	(%rax,%rcx), %eax
	movl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -44(%rbp)
	imull	$12, -44(%rbp), %eax
	addl	$26, %eax
	addl	-48(%rbp), %eax
	movl	%eax, ep_square
.LBB20_68:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_78
.LBB20_69:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$4, -24(%rbp)
	jne	.LBB20_71
# %bb.70:                               #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_77
.LBB20_71:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$5, -24(%rbp)
	jne	.LBB20_73
# %bb.72:                               #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_76
.LBB20_73:                              #   in Loop: Header=BB20_4 Depth=1
	cmpl	$6, -24(%rbp)
	jne	.LBB20_75
# %bb.74:                               #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_75
.LBB20_75:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_76
.LBB20_76:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_77
.LBB20_77:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_78
.LBB20_78:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_79
.LBB20_79:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_80
.LBB20_80:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_81
.LBB20_81:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_82
.LBB20_82:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_83
.LBB20_83:                              #   in Loop: Header=BB20_4 Depth=1
	jmp	.LBB20_84
.LBB20_84:                              #   in Loop: Header=BB20_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_4
.LBB20_85:
	callq	reset_piece_square
	callq	initialize_hash
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end20:
	.size	setup_epd_line, .Lfunc_end20-setup_epd_line
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI20_0:
	.quad	.LBB20_26
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_32
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_24
	.quad	.LBB20_33
	.quad	.LBB20_22
	.quad	.LBB20_30
	.quad	.LBB20_28
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_25
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_31
	.quad	.LBB20_33
	.quad	.LBB20_33
	.quad	.LBB20_23
	.quad	.LBB20_33
	.quad	.LBB20_21
	.quad	.LBB20_29
	.quad	.LBB20_27
                                        # -- End function
	.text
	.globl	check_solution          # -- Begin function check_solution
	.p2align	4, 0x90
	.type	check_solution,@function
check_solution:                         # @check_solution
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              # imm = 0x130
	leaq	16(%rbp), %rcx
	leaq	-272(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	(%rcx), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rcx), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rcx), %rcx
	movq	%rcx, 16(%rsp)
	movq	%rax, %rdi
	callq	comp_to_san
	movabsq	$.L.str.4, %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB21_4
# %bb.1:
	leaq	-272(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB21_3
# %bb.2:
	movl	$1, -4(%rbp)
	jmp	.LBB21_11
.LBB21_3:
	movl	$0, -4(%rbp)
	jmp	.LBB21_11
.LBB21_4:
	movabsq	$.L.str.1.5, %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB21_8
# %bb.5:
	leaq	-272(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB21_7
# %bb.6:
	movl	$0, -4(%rbp)
	jmp	.LBB21_11
.LBB21_7:
	movl	$1, -4(%rbp)
	jmp	.LBB21_11
.LBB21_8:
	movabsq	$.L.str.2, %rdi
	movb	$0, %al
	callq	printf
# %bb.9:
	jmp	.LBB21_10
.LBB21_10:
	movl	$0, -4(%rbp)
.LBB21_11:
	movl	-4(%rbp), %eax
	addq	$304, %rsp              # imm = 0x130
	popq	%rbp
	retq
.Lfunc_end21:
	.size	check_solution, .Lfunc_end21-check_solution
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function run_epd_testsuite
.LCPI22_0:
	.long	1065353216              # float 1
.LCPI22_2:
	.long	1120403456              # float 100
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI22_1:
	.quad	4636737291354636288     # double 100
	.text
	.globl	run_epd_testsuite
	.p2align	4, 0x90
	.type	run_epd_testsuite,@function
run_epd_testsuite:                      # @run_epd_testsuite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$8216, %rsp             # imm = 0x2018
	.cfi_offset %rbx, -24
	movabsq	$.L.str.3.6, %rdi
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movb	$0, %al
	callq	printf
	leaq	-8192(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	movabsq	$.L.str.4.7, %rdi
	movb	$0, %al
	callq	printf
	leaq	-2096(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-2096(%rbp), %rdi
	callq	atol
	movabsq	$.L.str.5, %rdi
	movl	%eax, -20(%rbp)
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.6, %rsi
	leaq	-8192(%rbp), %rdi
	imull	$100, -20(%rbp), %eax
	movl	%eax, -20(%rbp)
	callq	fopen
	movq	%rax, -32(%rbp)
.LBB22_1:                               # =>This Inner Loop Header: Depth=1
	leaq	-2096(%rbp), %rdi
	movq	-32(%rbp), %rdx
	movl	$2000, %esi             # imm = 0x7D0
	callq	fgets
	cmpq	$0, %rax
	je	.LBB22_11
# %bb.2:                                #   in Loop: Header=BB22_1 Depth=1
	leaq	-2096(%rbp), %rdi
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	callq	setup_epd_line
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movl	%eax, root_to_move
	callq	clear_tt
	callq	initialize_hash
	movq	stdout, %rdi
	movl	$1, %esi
	callq	display_board
	movl	$0, forcedwin
	callq	interrupt
	cmpl	$0, %eax
	je	.LBB22_4
# %bb.3:                                #   in Loop: Header=BB22_1 Depth=1
	leaq	-4096(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
.LBB22_4:                               #   in Loop: Header=BB22_1 Depth=1
	movabsq	$.L.str.12, %rbx
	movss	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -24(%rbp)        # 4-byte Spill
	movl	-20(%rbp), %eax
	movl	%eax, fixed_time(%rip)
	leaq	-88(%rbp), %rdi
	callq	think
	movq	-72(%rbp), %rax
	movq	%rax, -48(%rbp)
	movups	-88(%rbp), %xmm0
	movaps	%xmm0, -64(%rbp)
	movl	nodes(%rip), %esi
	cvtsi2ssl	qnodes(%rip), %xmm0
	cvtsi2ssl	%esi, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str.7, %edi
	movb	$1, %al
	callq	printf
	movl	ECacheProbes(%rip), %esi
	movl	ECacheHits(%rip), %edx
	cvtsi2ssq	%rdx, %xmm0
	cvtsi2ssq	%rsi, %xmm1
	addss	.LCPI22_0(%rip), %xmm1
	divss	%xmm1, %xmm0
	mulss	.LCPI22_2(%rip), %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str.8, %edi
                                        # kill: def %esi killed %esi killed %rsi
                                        # kill: def %edx killed %edx killed %rdx
	movb	$1, %al
	callq	printf
	movl	TTStores(%rip), %esi
	movl	TTProbes(%rip), %edx
	movl	TTHits(%rip), %ecx
	cvtsi2ssq	%rcx, %xmm0
	cvtsi2ssq	%rdx, %xmm1
	addss	.LCPI22_0(%rip), %xmm1
	divss	%xmm1, %xmm0
	mulss	.LCPI22_2(%rip), %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str.9, %edi
                                        # kill: def %edx killed %edx killed %rdx
                                        # kill: def %ecx killed %ecx killed %rcx
	movb	$1, %al
	callq	printf
	movl	NTries(%rip), %esi
	movl	NCuts(%rip), %edx
	cvtsi2ssq	%rdx, %xmm0
	mulss	.LCPI22_2(%rip), %xmm0
	cvtsi2ssq	%rsi, %xmm1
	addss	.LCPI22_0(%rip), %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	TExt(%rip), %ecx
	movl	$.L.str.10, %edi
                                        # kill: def %esi killed %esi killed %rsi
                                        # kill: def %edx killed %edx killed %rdx
	movb	$1, %al
	callq	printf
	movl	ext_check(%rip), %esi
	movl	razor_drop(%rip), %edx
	movl	razor_material(%rip), %ecx
	movl	$.L.str.11, %edi
	xorl	%eax, %eax
	callq	printf
	movl	FHF(%rip), %eax
	cvtsi2ssq	%rax, %xmm0
	mulss	.LCPI22_2(%rip), %xmm0
	movl	FH(%rip), %eax
	cvtsi2ssq	%rax, %xmm1
	divss	%xmm1, %xmm0
	addss	-24(%rbp), %xmm0        # 4-byte Folded Reload
	cvtss2sd	%xmm0, %xmm0
	movq	%rbx, %rdi
	movb	$1, %al
	callq	printf
	movl	Material, %ebx
	movl	$4293967296, %edi       # imm = 0xFFF0BDC0
	movl	$1000000, %esi          # imm = 0xF4240
	callq	eval
	movabsq	$.L.str.13, %rdi
	movl	maxposdiff, %ecx
	movl	%ebx, %esi
	movl	%eax, %edx
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$0, forcedwin
	jne	.LBB22_9
# %bb.5:                                #   in Loop: Header=BB22_1 Depth=1
	leaq	-64(%rbp), %rax
	leaq	-2096(%rbp), %rdi
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	check_solution
	cmpl	$0, %eax
	je	.LBB22_7
# %bb.6:                                #   in Loop: Header=BB22_1 Depth=1
	movabsq	$.L.str.14, %rdi
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movb	$0, %al
	callq	printf
	jmp	.LBB22_8
.LBB22_7:                               #   in Loop: Header=BB22_1 Depth=1
	movabsq	$.L.str.15, %rdi
	movb	$0, %al
	callq	printf
.LBB22_8:                               #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_10
.LBB22_9:                               #   in Loop: Header=BB22_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB22_10:                              #   in Loop: Header=BB22_1 Depth=1
	movabsq	$.L.str.16, %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movb	$0, %al
	callq	printf
	jmp	.LBB22_1
.LBB22_11:
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	addq	$8216, %rsp             # imm = 0x2018
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end22:
	.size	run_epd_testsuite, .Lfunc_end22-run_epd_testsuite
	.cfi_endproc
                                        # -- End function
	.globl	run_autotest            # -- Begin function run_autotest
	.p2align	4, 0x90
	.type	run_autotest,@function
run_autotest:                           # @run_autotest
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$352, %rsp              # imm = 0x160
	movabsq	$.L.str.6, %rsi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	fopen
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB23_2
# %bb.1:
	movl	$1, %edi
	callq	exit
.LBB23_2:
	callq	rtime
	movq	%rax, -88(%rbp)
.LBB23_3:                               # =>This Inner Loop Header: Depth=1
	leaq	-352(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	$256, %esi              # imm = 0x100
	callq	fgets
	cmpq	$0, %rax
	je	.LBB23_7
# %bb.4:                                #   in Loop: Header=BB23_3 Depth=1
	leaq	-352(%rbp), %rdi
	callq	setup_epd_line
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movl	%eax, root_to_move
	callq	clear_tt
	callq	initialize_hash
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	movl	$1, %esi
	callq	display_board
	movabsq	$.L.str.17, %rdi
	leaq	-352(%rbp), %rsi
	movb	$0, %al
	callq	printf
	leaq	-352(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	$256, %esi              # imm = 0x100
	callq	fgets
	cmpq	$0, %rax
	jne	.LBB23_6
# %bb.5:
	movl	$1, %edi
	callq	exit
.LBB23_6:                               #   in Loop: Header=BB23_3 Depth=1
	leaq	-352(%rbp), %rdi
	callq	atoi
	movabsq	$.L.str.18, %rdi
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %esi
	movb	$0, %al
	callq	printf
	leaq	-48(%rbp), %rdi
	movl	-4(%rbp), %eax
	movl	%eax, maxdepth
	movl	$1000000, fixed_time    # imm = 0xF4240
	callq	think
	movq	-48(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB23_3
.LBB23_7:
	callq	rtime
	movq	%rax, -80(%rbp)
	movq	-16(%rbp), %rdi
	callq	fclose
	xorl	%edi, %edi
	callq	exit
.Lfunc_end23:
	.size	run_autotest, .Lfunc_end23-run_autotest
	.cfi_endproc
                                        # -- End function
	.globl	initialize_eval         # -- Begin function initialize_eval
	.p2align	4, 0x90
	.type	initialize_eval,@function
initialize_eval:                        # @initialize_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$0, -16(%rbp)
.LBB24_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	cmpl	$64, -16(%rbp)
	jge	.LBB24_11
# %bb.2:                                #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -12(%rbp)
.LBB24_3:                               #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$64, -12(%rbp)
	jge	.LBB24_9
# %bb.4:                                #   in Loop: Header=BB24_3 Depth=2
	movl	-16(%rbp), %edi
	andl	$7, %edi
	movl	-12(%rbp), %eax
	andl	$7, %eax
	subl	%eax, %edi
	callq	abs
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %edi
	sarl	$3, %edi
	movl	-12(%rbp), %eax
	sarl	$3, %eax
	subl	%eax, %edi
	callq	abs
	movabsq	$rookdistance, %rcx
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	-16(%rbp), %rdx
	movslq	upscale(,%rdx,4), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movslq	upscale(,%rdx,4), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB24_6
# %bb.5:                                #   in Loop: Header=BB24_3 Depth=2
	movl	-24(%rbp), %eax
	jmp	.LBB24_7
.LBB24_6:                               #   in Loop: Header=BB24_3 Depth=2
	movl	-20(%rbp), %eax
.LBB24_7:                               #   in Loop: Header=BB24_3 Depth=2
	movabsq	$distance, %rcx
	movslq	-16(%rbp), %rdx
	movslq	upscale(,%rdx,4), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movslq	upscale(,%rdx,4), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                #   in Loop: Header=BB24_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_3
.LBB24_9:                               #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_10
.LBB24_10:                              #   in Loop: Header=BB24_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_1
.LBB24_11:
	movl	$0, -16(%rbp)
.LBB24_12:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_14 Depth 2
	cmpl	$144, -16(%rbp)
	jge	.LBB24_34
# %bb.13:                               #   in Loop: Header=BB24_12 Depth=1
	movl	$0, -12(%rbp)
.LBB24_14:                              #   Parent Loop BB24_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$144, -12(%rbp)
	jge	.LBB24_32
# %bb.15:                               #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB24_17
# %bb.16:                               #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	jmp	.LBB24_18
.LBB24_17:                              #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
.LBB24_18:                              #   in Loop: Header=BB24_14 Depth=2
	movabsq	$p_tropism, %rcx
	cltq
	movl	pre_p_tropism(,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	imulq	$144, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB24_20
# %bb.19:                               #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	jmp	.LBB24_21
.LBB24_20:                              #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
.LBB24_21:                              #   in Loop: Header=BB24_14 Depth=2
	movabsq	$b_tropism, %rcx
	cltq
	movl	pre_b_tropism(,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	imulq	$144, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB24_23
# %bb.22:                               #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	jmp	.LBB24_24
.LBB24_23:                              #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
.LBB24_24:                              #   in Loop: Header=BB24_14 Depth=2
	movabsq	$n_tropism, %rcx
	cltq
	movl	pre_n_tropism(,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	imulq	$144, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB24_26
# %bb.25:                               #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	jmp	.LBB24_27
.LBB24_26:                              #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
.LBB24_27:                              #   in Loop: Header=BB24_14 Depth=2
	movabsq	$r_tropism, %rcx
	cltq
	movl	pre_r_tropism(,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	imulq	$144, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB24_29
# %bb.28:                               #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	jmp	.LBB24_30
.LBB24_29:                              #   in Loop: Header=BB24_14 Depth=2
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-12(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
.LBB24_30:                              #   in Loop: Header=BB24_14 Depth=2
	movabsq	$q_tropism, %rcx
	cltq
	movl	pre_q_tropism(,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	imulq	$144, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.31:                               #   in Loop: Header=BB24_14 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_14
.LBB24_32:                              #   in Loop: Header=BB24_12 Depth=1
	jmp	.LBB24_33
.LBB24_33:                              #   in Loop: Header=BB24_12 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_12
.LBB24_34:
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end24:
	.size	initialize_eval, .Lfunc_end24-initialize_eval
	.cfi_endproc
                                        # -- End function
	.globl	eval                    # -- Begin function eval
	.p2align	4, 0x90
	.type	eval,@function
eval:                                   # @eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	%edi, -56(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$2, Variant
	jne	.LBB25_2
# %bb.1:
	movl	-56(%rbp), %edi
	movl	-52(%rbp), %esi
	callq	std_eval
	movl	%eax, -24(%rbp)
	jmp	.LBB25_288
.LBB25_2:
	cmpl	$3, Variant
	jne	.LBB25_4
# %bb.3:
	callq	suicide_eval
	movl	%eax, -24(%rbp)
	jmp	.LBB25_288
.LBB25_4:
	cmpl	$4, Variant
	jne	.LBB25_6
# %bb.5:
	callq	losers_eval
	movl	%eax, -24(%rbp)
	jmp	.LBB25_288
.LBB25_6:
	jmp	.LBB25_7
.LBB25_7:
	jmp	.LBB25_8
.LBB25_8:
	leaq	-4(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	movl	$0, -48(%rbp)
	callq	checkECache
	cmpl	$0, -48(%rbp)
	je	.LBB25_12
# %bb.9:
	cmpl	$1, white_to_move
	jne	.LBB25_11
# %bb.10:
	movl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_288
.LBB25_11:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_288
.LBB25_12:
	cmpl	$0, cfg_devscale
	je	.LBB25_34
# %bb.13:
	movl	white_to_move, %eax
	cmpl	comp_color, %eax
	je	.LBB25_22
# %bb.14:
	cmpl	$200, white_hand_eval
	jg	.LBB25_17
# %bb.15:
	cmpl	$1, Variant
	je	.LBB25_17
# %bb.16:
	movl	$2, -20(%rbp)
	jmp	.LBB25_21
.LBB25_17:
	cmpl	$700, white_hand_eval   # imm = 0x2BC
	jl	.LBB25_19
# %bb.18:
	movl	$0, -20(%rbp)
	jmp	.LBB25_20
.LBB25_19:
	movl	$1, -20(%rbp)
.LBB25_20:
	jmp	.LBB25_21
.LBB25_21:
	jmp	.LBB25_23
.LBB25_22:
	movl	$0, -20(%rbp)
.LBB25_23:
	movl	white_to_move, %eax
	cmpl	comp_color, %eax
	jne	.LBB25_32
# %bb.24:
	xorl	%eax, %eax
	subl	black_hand_eval, %eax
	cmpl	$200, %eax
	jg	.LBB25_27
# %bb.25:
	cmpl	$1, Variant
	je	.LBB25_27
# %bb.26:
	movl	$2, -16(%rbp)
	jmp	.LBB25_31
.LBB25_27:
	xorl	%eax, %eax
	subl	black_hand_eval, %eax
	cmpl	$700, %eax              # imm = 0x2BC
	jl	.LBB25_29
# %bb.28:
	movl	$0, -16(%rbp)
	jmp	.LBB25_30
.LBB25_29:
	movl	$1, -16(%rbp)
.LBB25_30:
	jmp	.LBB25_31
.LBB25_31:
	jmp	.LBB25_33
.LBB25_32:
	movl	$0, -16(%rbp)
.LBB25_33:
	jmp	.LBB25_35
.LBB25_34:
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB25_35:
	movl	$1, -44(%rbp)
	movl	$1, -40(%rbp)
.LBB25_36:                              # =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB25_54
# %bb.37:                               #   in Loop: Header=BB25_36 Depth=1
	movslq	-40(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB25_39
# %bb.38:                               #   in Loop: Header=BB25_36 Depth=1
	jmp	.LBB25_53
.LBB25_39:                              #   in Loop: Header=BB25_36 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
# %bb.40:                               #   in Loop: Header=BB25_36 Depth=1
	movslq	-12(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$11, %ecx
	ja	.LBB25_52
# %bb.41:                               #   in Loop: Header=BB25_36 Depth=1
	movq	.LJTI25_0(,%rax,8), %rax
	jmpq	*%rax
.LBB25_42:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$p_tropism, %rax
	movl	-4(%rbp), %ecx
	addl	$100, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	white_pawn(,%rcx,4), %edx
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	addl	-4(%rbp), %edx
	movl	%edx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	bking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_52
.LBB25_43:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$p_tropism, %rax
	movl	-4(%rbp), %ecx
	subl	$100, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	black_pawn(,%rcx,4), %edx
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	movl	-4(%rbp), %ecx
	subl	%edx, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	wking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB25_52
.LBB25_44:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$r_tropism, %rax
	movl	-4(%rbp), %ecx
	addl	$250, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	white_rook(,%rcx,4), %edx
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	addl	-4(%rbp), %edx
	movl	%edx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	bking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_52
.LBB25_45:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$r_tropism, %rax
	movl	-4(%rbp), %ecx
	subl	$250, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	black_rook(,%rcx,4), %edx
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	movl	-4(%rbp), %ecx
	subl	%edx, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	wking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB25_52
.LBB25_46:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$b_tropism, %rax
	movl	-4(%rbp), %ecx
	addl	$230, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	pcsqbishop(,%rcx,4), %edx
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	addl	-4(%rbp), %edx
	movl	%edx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	bking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_52
.LBB25_47:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$b_tropism, %rax
	movl	-4(%rbp), %ecx
	subl	$230, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	pcsqbishop(,%rcx,4), %edx
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	movl	-4(%rbp), %ecx
	subl	%edx, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	wking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB25_52
.LBB25_48:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$n_tropism, %rax
	movl	-4(%rbp), %ecx
	addl	$210, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	white_knight(,%rcx,4), %edx
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	addl	-4(%rbp), %edx
	movl	%edx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	bking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_52
.LBB25_49:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$n_tropism, %rax
	movl	-4(%rbp), %ecx
	subl	$210, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	black_knight(,%rcx,4), %edx
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	movl	-4(%rbp), %ecx
	subl	%edx, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	wking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB25_52
.LBB25_50:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$q_tropism, %rax
	movl	-4(%rbp), %ecx
	addl	$450, %ecx              # imm = 0x1C2
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	white_queen(,%rcx,4), %edx
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	addl	-4(%rbp), %edx
	movl	%edx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	bking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_52
.LBB25_51:                              #   in Loop: Header=BB25_36 Depth=1
	movabsq	$q_tropism, %rax
	movl	-4(%rbp), %ecx
	subl	$450, %ecx              # imm = 0x1C2
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	black_queen(,%rcx,4), %edx
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %edx
	movl	-4(%rbp), %ecx
	subl	%edx, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$144, %rcx, %rcx
	addq	%rcx, %rax
	movslq	wking_loc, %rcx
	movzbl	(%rax,%rcx), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB25_52:                              #   in Loop: Header=BB25_36 Depth=1
	jmp	.LBB25_53
.LBB25_53:                              #   in Loop: Header=BB25_36 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB25_36
.LBB25_54:
	movslq	wking_loc, %rax
	movl	white_king(,%rax,4), %eax
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	bking_loc, %rax
	movl	black_king(,%rax,4), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	cmpl	$0, white_castled
	jne	.LBB25_57
# %bb.55:
	cmpl	$0, moved+120
	je	.LBB25_57
# %bb.56:
	movl	-4(%rbp), %eax
	subl	$30, %eax
	movl	%eax, -4(%rbp)
.LBB25_57:
	cmpl	$0, black_castled
	jne	.LBB25_60
# %bb.58:
	cmpl	$0, moved+456
	je	.LBB25_60
# %bb.59:
	movl	-4(%rbp), %eax
	addl	$30, %eax
	movl	%eax, -4(%rbp)
.LBB25_60:
	cmpl	$0, moved+164
	jne	.LBB25_63
# %bb.61:
	cmpl	$13, board+212
	je	.LBB25_63
# %bb.62:
	movl	-4(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_63:
	cmpl	$0, moved+168
	jne	.LBB25_66
# %bb.64:
	cmpl	$13, board+216
	je	.LBB25_66
# %bb.65:
	movl	-4(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_66:
	cmpl	$0, moved+404
	jne	.LBB25_69
# %bb.67:
	cmpl	$13, board+356
	je	.LBB25_69
# %bb.68:
	movl	-4(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_69:
	cmpl	$0, moved+408
	jne	.LBB25_72
# %bb.70:
	cmpl	$13, board+360
	je	.LBB25_72
# %bb.71:
	movl	-4(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_72:
	cmpl	$0, cfg_smarteval
	je	.LBB25_225
# %bb.73:
	cmpl	$30, wking_loc
	je	.LBB25_90
# %bb.74:
	cmpl	$29, wking_loc
	je	.LBB25_90
# %bb.75:
	movl	wking_loc, %eax
	addl	$11, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB25_77
# %bb.76:
	movl	-4(%rbp), %eax
	subl	$24, %eax
	movl	%eax, -4(%rbp)
.LBB25_77:
	movl	wking_loc, %eax
	addl	$12, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB25_79
# %bb.78:
	movl	-4(%rbp), %eax
	subl	$35, %eax
	movl	%eax, -4(%rbp)
.LBB25_79:
	movl	wking_loc, %eax
	addl	$13, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB25_81
# %bb.80:
	movl	-4(%rbp), %eax
	subl	$24, %eax
	movl	%eax, -4(%rbp)
.LBB25_81:
	cmpl	$0, white_castled
	je	.LBB25_89
# %bb.82:
	movl	bking_loc, %eax
	subl	$25, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB25_84
# %bb.83:
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB25_84:
	movl	bking_loc, %eax
	subl	$24, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB25_86
# %bb.85:
	movl	-4(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_86:
	movl	bking_loc, %eax
	subl	$23, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB25_88
# %bb.87:
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB25_88:
	jmp	.LBB25_89
.LBB25_89:
	jmp	.LBB25_90
.LBB25_90:
	cmpl	$114, bking_loc
	je	.LBB25_107
# %bb.91:
	cmpl	$113, bking_loc
	je	.LBB25_107
# %bb.92:
	movl	bking_loc, %eax
	subl	$13, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB25_94
# %bb.93:
	movl	-4(%rbp), %eax
	addl	$24, %eax
	movl	%eax, -4(%rbp)
.LBB25_94:
	movl	bking_loc, %eax
	subl	$12, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB25_96
# %bb.95:
	movl	-4(%rbp), %eax
	addl	$35, %eax
	movl	%eax, -4(%rbp)
.LBB25_96:
	movl	bking_loc, %eax
	subl	$11, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB25_98
# %bb.97:
	movl	-4(%rbp), %eax
	addl	$24, %eax
	movl	%eax, -4(%rbp)
.LBB25_98:
	cmpl	$0, black_castled
	je	.LBB25_106
# %bb.99:
	movl	bking_loc, %eax
	subl	$25, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB25_101
# %bb.100:
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB25_101:
	movl	bking_loc, %eax
	subl	$24, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB25_103
# %bb.102:
	movl	-4(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_103:
	movl	bking_loc, %eax
	subl	$23, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB25_105
# %bb.104:
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB25_105:
	jmp	.LBB25_106
.LBB25_106:
	jmp	.LBB25_107
.LBB25_107:
	cmpl	$0, moved+168
	je	.LBB25_117
# %bb.108:
	movl	-4(%rbp), %eax
	addl	$30, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, moved+164
	je	.LBB25_110
# %bb.109:
	movl	-4(%rbp), %eax
	addl	$25, %eax
	movl	%eax, -4(%rbp)
.LBB25_110:
	cmpl	$0, moved+128
	je	.LBB25_112
# %bb.111:
	movl	-4(%rbp), %eax
	addl	$20, %eax
	movl	%eax, -4(%rbp)
.LBB25_112:
	cmpl	$0, moved+108
	je	.LBB25_114
# %bb.113:
	movl	-4(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_114:
	cmpl	$0, moved+112
	je	.LBB25_116
# %bb.115:
	movl	-4(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_116:
	jmp	.LBB25_117
.LBB25_117:
	cmpl	$0, moved+408
	je	.LBB25_127
# %bb.118:
	movl	-4(%rbp), %eax
	subl	$30, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, moved+404
	je	.LBB25_120
# %bb.119:
	movl	-4(%rbp), %eax
	subl	$25, %eax
	movl	%eax, -4(%rbp)
.LBB25_120:
	cmpl	$0, moved+464
	je	.LBB25_122
# %bb.121:
	movl	-4(%rbp), %eax
	subl	$20, %eax
	movl	%eax, -4(%rbp)
.LBB25_122:
	cmpl	$0, moved+444
	je	.LBB25_124
# %bb.123:
	movl	-4(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_124:
	cmpl	$0, moved+448
	je	.LBB25_126
# %bb.125:
	movl	-4(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_126:
	jmp	.LBB25_127
.LBB25_127:
	cmpl	$1, board+176
	je	.LBB25_131
# %bb.128:
	cmpl	$2, board+220
	je	.LBB25_130
# %bb.129:
	cmpl	$2, board+264
	jne	.LBB25_131
.LBB25_130:
	movl	-4(%rbp), %eax
	subl	$30, %eax
	movl	%eax, -4(%rbp)
.LBB25_131:
	cmpl	$2, board+416
	je	.LBB25_135
# %bb.132:
	cmpl	$1, board+364
	je	.LBB25_134
# %bb.133:
	cmpl	$1, board+312
	jne	.LBB25_135
.LBB25_134:
	movl	-4(%rbp), %eax
	addl	$30, %eax
	movl	%eax, -4(%rbp)
.LBB25_135:
	movl	wking_loc, %eax
	addl	$12, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB25_137
# %bb.136:
	movl	wking_loc, %eax
	addl	$12, %eax
	cltq
	cmpl	$12, board(,%rax,4)
	jne	.LBB25_142
.LBB25_137:
	movl	-4(%rbp), %eax
	subl	$35, %eax
	movl	%eax, -4(%rbp)
	movl	wking_loc, %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_139
# %bb.138:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_140
	jmp	.LBB25_141
.LBB25_139:
	movl	wking_loc, %edi
	addl	$12, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_141
.LBB25_140:
	movl	$150, %eax
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB25_141:
	jmp	.LBB25_142
.LBB25_142:
	movl	bking_loc, %eax
	subl	$12, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB25_144
# %bb.143:
	movl	bking_loc, %eax
	subl	$12, %eax
	cltq
	cmpl	$11, board(,%rax,4)
	jne	.LBB25_149
.LBB25_144:
	movl	-4(%rbp), %eax
	addl	$35, %eax
	movl	%eax, -4(%rbp)
	movl	bking_loc, %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_146
# %bb.145:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_147
	jmp	.LBB25_148
.LBB25_146:
	movl	bking_loc, %edi
	subl	$12, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_148
.LBB25_147:
	movl	$150, %eax
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_148:
	jmp	.LBB25_149
.LBB25_149:
	cmpl	$1, board+172
	je	.LBB25_152
# %bb.150:
	cmpl	$1, board+216
	je	.LBB25_152
# %bb.151:
	cmpl	$2, board+216
	jne	.LBB25_163
.LBB25_152:
	cmpl	$0, board+216
	jne	.LBB25_154
# %bb.153:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_155
	jmp	.LBB25_163
.LBB25_154:
	movl	$54, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_163
.LBB25_155:
	cmpl	$1, board+172
	jne	.LBB25_157
# %bb.156:
	movl	-4(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_157:
	cmpl	$1, board+216
	jne	.LBB25_159
# %bb.158:
	movl	-4(%rbp), %eax
	addl	$20, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_162
.LBB25_159:
	cmpl	$2, board+216
	jne	.LBB25_161
# %bb.160:
	movl	-4(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_161:
	jmp	.LBB25_162
.LBB25_162:
	jmp	.LBB25_163
.LBB25_163:
	cmpl	$2, board+412
	je	.LBB25_166
# %bb.164:
	cmpl	$2, board+360
	je	.LBB25_166
# %bb.165:
	cmpl	$1, board+360
	jne	.LBB25_177
.LBB25_166:
	cmpl	$0, board+360
	jne	.LBB25_168
# %bb.167:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_169
	jmp	.LBB25_177
.LBB25_168:
	movl	$90, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_177
.LBB25_169:
	cmpl	$2, board+412
	jne	.LBB25_171
# %bb.170:
	movl	-4(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_171:
	cmpl	$2, board+360
	jne	.LBB25_173
# %bb.172:
	movl	-4(%rbp), %eax
	subl	$20, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_176
.LBB25_173:
	cmpl	$1, board+360
	jne	.LBB25_175
# %bb.174:
	movl	-4(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -4(%rbp)
.LBB25_175:
	jmp	.LBB25_176
.LBB25_176:
	jmp	.LBB25_177
.LBB25_177:
	movslq	bking_loc, %rax
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_179
# %bb.178:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_180
	jmp	.LBB25_181
.LBB25_179:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_181
.LBB25_180:
	movl	$50, %eax
	movl	-20(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_186
.LBB25_181:
	movslq	wking_loc, %rax
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_183
# %bb.182:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_184
	jmp	.LBB25_185
.LBB25_183:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_185
.LBB25_184:
	movl	$50, %eax
	movl	-16(%rbp), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB25_185:
	jmp	.LBB25_186
.LBB25_186:
	cmpl	$4, board+176
	jne	.LBB25_196
# %bb.187:
	movl	-4(%rbp), %eax
	subl	$20, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, board+176
	jne	.LBB25_189
# %bb.188:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_190
	jmp	.LBB25_191
.LBB25_189:
	movl	$44, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_191
.LBB25_190:
	movl	-4(%rbp), %eax
	subl	$40, %eax
	movl	%eax, -4(%rbp)
.LBB25_191:
	cmpl	$7, board+128
	jne	.LBB25_193
# %bb.192:
	movl	-4(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_193:
	cmpl	$11, board+124
	jne	.LBB25_195
# %bb.194:
	movl	-4(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_195:
	jmp	.LBB25_196
.LBB25_196:
	cmpl	$3, board+416
	jne	.LBB25_206
# %bb.197:
	movl	-4(%rbp), %eax
	addl	$20, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, board+416
	jne	.LBB25_199
# %bb.198:
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB25_200
	jmp	.LBB25_201
.LBB25_199:
	movl	$104, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB25_201
.LBB25_200:
	movl	-4(%rbp), %eax
	addl	$40, %eax
	movl	%eax, -4(%rbp)
.LBB25_201:
	cmpl	$8, board+464
	jne	.LBB25_203
# %bb.202:
	movl	-4(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_203:
	cmpl	$12, board+460
	jne	.LBB25_205
# %bb.204:
	movl	-4(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB25_205:
	jmp	.LBB25_206
.LBB25_206:
	cmpl	$12, board+228
	jne	.LBB25_215
# %bb.207:
	cmpl	$1, board+176
	je	.LBB25_215
# %bb.208:
	movl	-4(%rbp), %eax
	subl	$20, %eax
	movl	%eax, -4(%rbp)
	cmpl	$4, board+176
	jne	.LBB25_214
# %bb.209:
	movl	-4(%rbp), %eax
	subl	$40, %eax
	movl	%eax, -4(%rbp)
	cmpl	$5, board+124
	je	.LBB25_212
# %bb.210:
	cmpl	$5, board+128
	je	.LBB25_212
# %bb.211:
	cmpl	$5, board+132
	jne	.LBB25_213
.LBB25_212:
	movl	-4(%rbp), %eax
	subl	$80, %eax
	movl	%eax, -4(%rbp)
.LBB25_213:
	jmp	.LBB25_214
.LBB25_214:
	jmp	.LBB25_215
.LBB25_215:
	cmpl	$11, board+372
	jne	.LBB25_224
# %bb.216:
	cmpl	$2, board+416
	je	.LBB25_224
# %bb.217:
	movl	-4(%rbp), %eax
	addl	$20, %eax
	movl	%eax, -4(%rbp)
	cmpl	$3, board+416
	jne	.LBB25_223
# %bb.218:
	movl	-4(%rbp), %eax
	addl	$40, %eax
	movl	%eax, -4(%rbp)
	cmpl	$6, board+460
	je	.LBB25_221
# %bb.219:
	cmpl	$6, board+464
	je	.LBB25_221
# %bb.220:
	cmpl	$6, board+468
	jne	.LBB25_222
.LBB25_221:
	movl	-4(%rbp), %eax
	addl	$80, %eax
	movl	%eax, -4(%rbp)
.LBB25_222:
	jmp	.LBB25_223
.LBB25_223:
	jmp	.LBB25_224
.LBB25_224:
	jmp	.LBB25_225
.LBB25_225:
	cmpl	$0, cfg_attackeval
	je	.LBB25_285
# %bb.226:
	movl	$0, -8(%rbp)
	movl	$0, -36(%rbp)
	movl	wking_loc, %eax
	subl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_228
# %bb.227:
	xorl	%eax, %eax
	jmp	.LBB25_229
.LBB25_228:
	movl	wking_loc, %edi
	subl	$13, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_229:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_231
# %bb.230:
	xorl	%eax, %eax
	jmp	.LBB25_232
.LBB25_231:
	movl	wking_loc, %edi
	subl	$12, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_232:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	subl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_234
# %bb.233:
	xorl	%eax, %eax
	jmp	.LBB25_235
.LBB25_234:
	movl	wking_loc, %edi
	subl	$11, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_235:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	subl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_237
# %bb.236:
	xorl	%eax, %eax
	jmp	.LBB25_238
.LBB25_237:
	movl	wking_loc, %edi
	subl	$1, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_238:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	addl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_240
# %bb.239:
	xorl	%eax, %eax
	jmp	.LBB25_241
.LBB25_240:
	movl	wking_loc, %edi
	addl	$1, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_241:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_243
# %bb.242:
	xorl	%eax, %eax
	jmp	.LBB25_244
.LBB25_243:
	movl	wking_loc, %edi
	addl	$11, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_244:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_246
# %bb.245:
	xorl	%eax, %eax
	jmp	.LBB25_247
.LBB25_246:
	movl	wking_loc, %edi
	addl	$12, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_247:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	wking_loc, %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_249
# %bb.248:
	xorl	%eax, %eax
	jmp	.LBB25_250
.LBB25_249:
	movl	wking_loc, %edi
	addl	$13, %edi
	xorl	%esi, %esi
	callq	nk_attacked
.LBB25_250:
	movl	$100, %esi
	xorl	%ecx, %ecx
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	subl	black_hand_eval, %ecx
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -28(%rbp)
	cmpl	$14, -28(%rbp)
	jle	.LBB25_252
# %bb.251:
	movl	$14, -28(%rbp)
	jmp	.LBB25_255
.LBB25_252:
	cmpl	$0, -28(%rbp)
	jge	.LBB25_254
# %bb.253:
	movl	$0, -28(%rbp)
.LBB25_254:
	jmp	.LBB25_255
.LBB25_255:
	movabsq	$ksafety_scaled, %rax
	movslq	-28(%rbp), %rcx
	imulq	$36, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
	movl	bking_loc, %eax
	subl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_257
# %bb.256:
	xorl	%eax, %eax
	jmp	.LBB25_258
.LBB25_257:
	movl	bking_loc, %edi
	subl	$13, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_258:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_260
# %bb.259:
	xorl	%eax, %eax
	jmp	.LBB25_261
.LBB25_260:
	movl	bking_loc, %edi
	subl	$12, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_261:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	subl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_263
# %bb.262:
	xorl	%eax, %eax
	jmp	.LBB25_264
.LBB25_263:
	movl	bking_loc, %edi
	subl	$11, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_264:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	subl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_266
# %bb.265:
	xorl	%eax, %eax
	jmp	.LBB25_267
.LBB25_266:
	movl	bking_loc, %edi
	subl	$1, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_267:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	addl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_269
# %bb.268:
	xorl	%eax, %eax
	jmp	.LBB25_270
.LBB25_269:
	movl	bking_loc, %edi
	addl	$1, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_270:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_272
# %bb.271:
	xorl	%eax, %eax
	jmp	.LBB25_273
.LBB25_272:
	movl	bking_loc, %edi
	addl	$11, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_273:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_275
# %bb.274:
	xorl	%eax, %eax
	jmp	.LBB25_276
.LBB25_275:
	movl	bking_loc, %edi
	addl	$12, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_276:
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	bking_loc, %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	jne	.LBB25_278
# %bb.277:
	xorl	%eax, %eax
	jmp	.LBB25_279
.LBB25_278:
	movl	bking_loc, %edi
	addl	$13, %edi
	movl	$1, %esi
	callq	nk_attacked
.LBB25_279:
	movl	$100, %ecx
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	white_hand_eval, %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	cmpl	$14, -32(%rbp)
	jle	.LBB25_281
# %bb.280:
	movl	$14, -32(%rbp)
	jmp	.LBB25_284
.LBB25_281:
	cmpl	$0, -32(%rbp)
	jge	.LBB25_283
# %bb.282:
	movl	$0, -32(%rbp)
.LBB25_283:
	jmp	.LBB25_284
.LBB25_284:
	movabsq	$ksafety_scaled, %rax
	movslq	-32(%rbp), %rcx
	imulq	$36, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_285:
	movl	white_hand_eval, %eax
	addl	black_hand_eval, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edi
	callq	storeECache
	cmpl	$1, white_to_move
	jne	.LBB25_287
# %bb.286:
	movl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_288
.LBB25_287:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB25_288:
	movl	-24(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end25:
	.size	eval, .Lfunc_end25-eval
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI25_0:
	.quad	.LBB25_42
	.quad	.LBB25_43
	.quad	.LBB25_48
	.quad	.LBB25_49
	.quad	.LBB25_52
	.quad	.LBB25_52
	.quad	.LBB25_44
	.quad	.LBB25_45
	.quad	.LBB25_50
	.quad	.LBB25_51
	.quad	.LBB25_46
	.quad	.LBB25_47
                                        # -- End function
	.text
	.globl	losers_eval             # -- Begin function losers_eval
	.p2align	4, 0x90
	.type	losers_eval,@function
losers_eval:                            # @losers_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	leaq	-4(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	callq	checkECache
	cmpl	$0, -72(%rbp)
	je	.LBB26_4
# %bb.1:
	cmpl	$1, white_to_move
	jne	.LBB26_3
# %bb.2:
	movl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_127
.LBB26_3:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_127
.LBB26_4:
	leaq	-160(%rbp), %rdi
	xorl	%esi, %esi
	movl	$88, %edx
	callq	memset
	movl	$0, -8(%rbp)
.LBB26_5:                               # =>This Inner Loop Header: Depth=1
	cmpl	$11, -8(%rbp)
	jge	.LBB26_8
# %bb.6:                                #   in Loop: Header=BB26_5 Depth=1
	movslq	-8(%rbp), %rax
	movl	$7, -256(%rbp,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$2, -208(%rbp,%rax,4)
# %bb.7:                                #   in Loop: Header=BB26_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_5
.LBB26_8:
	movl	$1, -28(%rbp)
	movl	$1, -32(%rbp)
.LBB26_9:                               # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB26_24
# %bb.10:                               #   in Loop: Header=BB26_9 Depth=1
	movslq	-28(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB26_12
# %bb.11:                               #   in Loop: Header=BB26_9 Depth=1
	jmp	.LBB26_23
.LBB26_12:                              #   in Loop: Header=BB26_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               #   in Loop: Header=BB26_9 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB26_17
# %bb.14:                               #   in Loop: Header=BB26_9 Depth=1
	movslq	-12(%rbp), %rax
	movl	-116(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -116(%rbp,%rax,4)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	-256(%rbp,%rcx,4), %eax
	jge	.LBB26_16
# %bb.15:                               #   in Loop: Header=BB26_9 Depth=1
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
.LBB26_16:                              #   in Loop: Header=BB26_9 Depth=1
	jmp	.LBB26_22
.LBB26_17:                              #   in Loop: Header=BB26_9 Depth=1
	movslq	-8(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB26_21
# %bb.18:                               #   in Loop: Header=BB26_9 Depth=1
	movslq	-12(%rbp), %rax
	movl	-160(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -160(%rbp,%rax,4)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	-208(%rbp,%rcx,4), %eax
	jle	.LBB26_20
# %bb.19:                               #   in Loop: Header=BB26_9 Depth=1
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
.LBB26_20:                              #   in Loop: Header=BB26_9 Depth=1
	jmp	.LBB26_21
.LBB26_21:                              #   in Loop: Header=BB26_9 Depth=1
	jmp	.LBB26_22
.LBB26_22:                              #   in Loop: Header=BB26_9 Depth=1
	jmp	.LBB26_23
.LBB26_23:                              #   in Loop: Header=BB26_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB26_9
.LBB26_24:
	movl	$1, -28(%rbp)
	movl	$1, -32(%rbp)
.LBB26_25:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB26_99
# %bb.26:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-28(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB26_28
# %bb.27:                               #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_98
.LBB26_28:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.29:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$11, %ecx
	ja	.LBB26_97
# %bb.30:                               #   in Loop: Header=BB26_25 Depth=1
	movq	.LJTI26_0(,%rax,8), %rax
	jmpq	*%rax
.LBB26_31:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	l_pawn_mobility
	shll	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	subl	$2, %eax
	shll	$3, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-256(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB26_37
# %bb.32:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-256(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB26_37
# %bb.33:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$8, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -116(%rbp,%rax,4)
	jne	.LBB26_36
# %bb.34:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -116(%rbp,%rax,4)
	jne	.LBB26_36
# %bb.35:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -36(%rbp)
.LBB26_36:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_37
.LBB26_37:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -160(%rbp,%rax,4)
	jne	.LBB26_43
# %bb.38:                               #   in Loop: Header=BB26_25 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB26_40
# %bb.39:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB26_40:                              #   in Loop: Header=BB26_25 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB26_42
# %bb.41:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$8, %eax
	movl	%eax, -4(%rbp)
.LBB26_42:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_43
.LBB26_43:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$1, -116(%rbp,%rax,4)
	jle	.LBB26_45
# %bb.44:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	movl	-116(%rbp,%rax,4), %eax
	subl	$1, %eax
	shll	$3, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB26_45:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -160(%rbp,%rax,4)
	jne	.LBB26_56
# %bb.46:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-208(%rbp,%rcx,4), %eax
	jl	.LBB26_56
# %bb.47:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-208(%rbp,%rcx,4), %eax
	jl	.LBB26_56
# %bb.48:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	subl	$2, %eax
	imull	$10, %eax, %eax
	addl	$25, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$7, Xrank(,%rax,4)
	jne	.LBB26_50
# %bb.49:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$50, %eax
	movl	%eax, -4(%rbp)
.LBB26_50:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, Xfile(,%rax,4)
	je	.LBB26_52
# %bb.51:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	cmpl	$8, Xfile(,%rax,4)
	jne	.LBB26_53
.LBB26_52:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	subl	$2, %eax
	shll	$1, %eax
	addl	$4, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_53:                              #   in Loop: Header=BB26_25 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB26_55
# %bb.54:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$24, %eax
	movl	%eax, -4(%rbp)
.LBB26_55:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_56
.LBB26_56:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -116(%rbp,%rax,4)
	jne	.LBB26_58
# %bb.57:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB26_58:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_97
.LBB26_59:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	l_pawn_mobility
	movl	$7, %ecx
	shll	$2, %eax
	movl	-4(%rbp), %edx
	subl	%eax, %edx
	movl	%edx, -4(%rbp)
	movslq	-8(%rbp), %rax
	subl	Xrank(,%rax,4), %ecx
	shll	$3, %ecx
	movl	-4(%rbp), %eax
	subl	%ecx, %eax
	movl	%eax, -4(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-208(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB26_65
# %bb.60:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-208(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB26_65
# %bb.61:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -160(%rbp,%rax,4)
	jne	.LBB26_64
# %bb.62:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -160(%rbp,%rax,4)
	jne	.LBB26_64
# %bb.63:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -36(%rbp)
.LBB26_64:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_65
.LBB26_65:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -116(%rbp,%rax,4)
	jne	.LBB26_71
# %bb.66:                               #   in Loop: Header=BB26_25 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB26_68
# %bb.67:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB26_68:                              #   in Loop: Header=BB26_25 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB26_70
# %bb.69:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -4(%rbp)
.LBB26_70:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_71
.LBB26_71:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$1, -160(%rbp,%rax,4)
	jle	.LBB26_73
# %bb.72:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	subl	$1, %eax
	shll	$3, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_73:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -116(%rbp,%rax,4)
	jne	.LBB26_84
# %bb.74:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-256(%rbp,%rcx,4), %eax
	jg	.LBB26_84
# %bb.75:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-256(%rbp,%rcx,4), %eax
	jg	.LBB26_84
# %bb.76:                               #   in Loop: Header=BB26_25 Depth=1
	movl	$7, %eax
	movslq	-8(%rbp), %rcx
	subl	Xrank(,%rcx,4), %eax
	imull	$10, %eax, %eax
	addl	$25, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$2, Xrank(,%rax,4)
	jne	.LBB26_78
# %bb.77:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$50, %eax
	movl	%eax, -4(%rbp)
.LBB26_78:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, Xfile(,%rax,4)
	je	.LBB26_80
# %bb.79:                               #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	cmpl	$8, Xfile(,%rax,4)
	jne	.LBB26_81
.LBB26_80:                              #   in Loop: Header=BB26_25 Depth=1
	movl	$7, %eax
	movslq	-8(%rbp), %rcx
	subl	Xrank(,%rcx,4), %eax
	shll	$1, %eax
	addl	$4, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB26_81:                              #   in Loop: Header=BB26_25 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB26_83
# %bb.82:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$24, %eax
	movl	%eax, -4(%rbp)
.LBB26_83:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_84
.LBB26_84:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -160(%rbp,%rax,4)
	jne	.LBB26_86
# %bb.85:                               #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB26_86:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_97
.LBB26_87:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-8(%rbp), %edi
	callq	l_rook_mobility
	shll	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_97
.LBB26_88:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %edi
	callq	l_rook_mobility
	shll	$2, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB26_97
.LBB26_89:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-8(%rbp), %edi
	callq	l_bishop_mobility
	shll	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_97
.LBB26_90:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %edi
	callq	l_bishop_mobility
	shll	$2, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB26_97
.LBB26_91:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	shll	$1, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	l_knight_mobility
	shll	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_97
.LBB26_92:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	shll	$1, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	l_knight_mobility
	shll	$2, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB26_97
.LBB26_93:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-8(%rbp), %edi
	callq	l_bishop_mobility
	shll	$1, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	l_rook_mobility
	shll	$1, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_97
.LBB26_94:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-8(%rbp), %edi
	callq	l_bishop_mobility
	shll	$1, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	l_rook_mobility
	shll	$1, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB26_97
.LBB26_95:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	shll	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %edi
	callq	l_king_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_97
.LBB26_96:                              #   in Loop: Header=BB26_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	lcentral(,%rax,4), %eax
	shll	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %edi
	callq	l_king_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB26_97:                              #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_98
.LBB26_98:                              #   in Loop: Header=BB26_25 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB26_25
.LBB26_99:
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	cmpl	$10, %eax
	jle	.LBB26_101
# %bb.100:
	movl	-68(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB26_101:
	movl	Material, %edi
	callq	abs
	cmpl	$900, %eax              # imm = 0x384
	jg	.LBB26_103
# %bb.102:
	movl	Material, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_114
.LBB26_103:
	cmpl	$0, Material
	jle	.LBB26_107
# %bb.104:
	cmpl	$1, comp_color
	jne	.LBB26_107
# %bb.105:
	cmpl	$0, -60(%rbp)
	jne	.LBB26_107
# %bb.106:
	movl	$1800, %eax             # imm = 0x708
	subl	Material, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_113
.LBB26_107:
	cmpl	$0, Material
	jge	.LBB26_111
# %bb.108:
	cmpl	$0, comp_color
	jne	.LBB26_111
# %bb.109:
	cmpl	$0, -56(%rbp)
	jne	.LBB26_111
# %bb.110:
	xorl	%eax, %eax
	movl	Material, %ecx
	addl	$1800, %ecx             # imm = 0x708
	subl	%ecx, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_112
.LBB26_111:
	movl	Material, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_112:
	jmp	.LBB26_113
.LBB26_113:
	jmp	.LBB26_114
.LBB26_114:
	cmpl	$0, -52(%rbp)
	jne	.LBB26_116
# %bb.115:
	movl	-4(%rbp), %eax
	addl	$200, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_119
.LBB26_116:
	cmpl	$0, -48(%rbp)
	jne	.LBB26_118
# %bb.117:
	movl	-4(%rbp), %eax
	subl	$200, %eax
	movl	%eax, -4(%rbp)
.LBB26_118:
	jmp	.LBB26_119
.LBB26_119:
	cmpl	$0, -24(%rbp)
	jne	.LBB26_121
# %bb.120:
	movl	$1000000, -4(%rbp)      # imm = 0xF4240
	jmp	.LBB26_124
.LBB26_121:
	cmpl	$0, -20(%rbp)
	jne	.LBB26_123
# %bb.122:
	movl	$-1000000, -4(%rbp)     # imm = 0xFFF0BDC0
.LBB26_123:
	jmp	.LBB26_124
.LBB26_124:
	movl	-4(%rbp), %edi
	callq	storeECache
	cmpl	$1, white_to_move
	jne	.LBB26_126
# %bb.125:
	movl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB26_127
.LBB26_126:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB26_127:
	movl	-44(%rbp), %eax
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	retq
.Lfunc_end26:
	.size	losers_eval, .Lfunc_end26-losers_eval
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI26_0:
	.quad	.LBB26_31
	.quad	.LBB26_59
	.quad	.LBB26_91
	.quad	.LBB26_92
	.quad	.LBB26_95
	.quad	.LBB26_96
	.quad	.LBB26_87
	.quad	.LBB26_88
	.quad	.LBB26_93
	.quad	.LBB26_94
	.quad	.LBB26_89
	.quad	.LBB26_90
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function l_pawn_mobility
	.type	l_pawn_mobility,@function
l_pawn_mobility:                        # @l_pawn_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB27_4
# %bb.1:
	movl	-8(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB27_3
# %bb.2:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB27_3:
	jmp	.LBB27_7
.LBB27_4:
	movl	-8(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB27_6
# %bb.5:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB27_6:
	jmp	.LBB27_7
.LBB27_7:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end27:
	.size	l_pawn_mobility, .Lfunc_end27-l_pawn_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function l_rook_mobility
	.type	l_rook_mobility,@function
l_rook_mobility:                        # @l_rook_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	-12(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB28_1:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB28_4
# %bb.2:                                #   in Loop: Header=BB28_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_4:
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB28_5:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB28_8
# %bb.6:                                #   in Loop: Header=BB28_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.7:                                #   in Loop: Header=BB28_5 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_5
.LBB28_8:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB28_9:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB28_12
# %bb.10:                               #   in Loop: Header=BB28_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.11:                               #   in Loop: Header=BB28_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_9
.LBB28_12:
	movl	-12(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB28_13:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB28_16
# %bb.14:                               #   in Loop: Header=BB28_13 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.15:                               #   in Loop: Header=BB28_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_13
.LBB28_16:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end28:
	.size	l_rook_mobility, .Lfunc_end28-l_rook_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function l_bishop_mobility
	.type	l_bishop_mobility,@function
l_bishop_mobility:                      # @l_bishop_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	-12(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB29_1:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB29_4
# %bb.2:                                #   in Loop: Header=BB29_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:
	movl	-12(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB29_5:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB29_8
# %bb.6:                                #   in Loop: Header=BB29_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.7:                                #   in Loop: Header=BB29_5 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_5
.LBB29_8:
	movl	-12(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB29_9:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB29_12
# %bb.10:                               #   in Loop: Header=BB29_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.11:                               #   in Loop: Header=BB29_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_9
.LBB29_12:
	movl	-12(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB29_13:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB29_16
# %bb.14:                               #   in Loop: Header=BB29_13 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.15:                               #   in Loop: Header=BB29_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_13
.LBB29_16:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end29:
	.size	l_bishop_mobility, .Lfunc_end29-l_bishop_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function l_knight_mobility
	.type	l_knight_mobility,@function
l_knight_mobility:                      # @l_knight_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB30_6
# %bb.2:                                #   in Loop: Header=BB30_1 Depth=1
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	l_knight_mobility.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB30_4
# %bb.3:                                #   in Loop: Header=BB30_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB30_4:                               #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_5
.LBB30_5:                               #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end30:
	.size	l_knight_mobility, .Lfunc_end30-l_knight_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function l_king_mobility
	.type	l_king_mobility,@function
l_king_mobility:                        # @l_king_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB31_6
# %bb.2:                                #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	l_king_mobility.king_o(,%rcx,4), %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB31_4
# %bb.3:                                #   in Loop: Header=BB31_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB31_4:                               #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_5
.LBB31_5:                               #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_6:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end31:
	.size	l_king_mobility, .Lfunc_end31-l_king_mobility
	.cfi_endproc
                                        # -- End function
	.globl	check_legal             # -- Begin function check_legal
	.p2align	4, 0x90
	.type	check_legal,@function
check_legal:                            # @check_legal
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -36(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	cmpl	$3, Variant
	jne	.LBB32_2
# %bb.1:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_2:
	cmpl	$0, -24(%rbp)
	je	.LBB32_36
# %bb.3:
	cmpl	$1, -24(%rbp)
	jne	.LBB32_11
# %bb.4:
	movl	$30, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_6
# %bb.5:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_6:
	movl	$31, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_8
# %bb.7:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_8:
	movl	$32, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_10
# %bb.9:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_10:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_11:
	cmpl	$2, -24(%rbp)
	jne	.LBB32_19
# %bb.12:
	movl	$30, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_14
# %bb.13:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_14:
	movl	$29, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_16
# %bb.15:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_16:
	movl	$28, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_18
# %bb.17:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_18:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_19:
	cmpl	$3, -24(%rbp)
	jne	.LBB32_27
# %bb.20:
	movl	$114, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_22
# %bb.21:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_22:
	movl	$115, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_24
# %bb.23:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_24:
	movl	$116, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_26
# %bb.25:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_26:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_27:
	cmpl	$4, -24(%rbp)
	jne	.LBB32_35
# %bb.28:
	movl	$114, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_30
# %bb.29:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_30:
	movl	$113, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_32
# %bb.31:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_32:
	movl	$112, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_34
# %bb.33:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_34:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_35:
	jmp	.LBB32_363
.LBB32_36:
	movl	white_to_move, %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB32_200
# %bb.37:
	cmpl	$0, -36(%rbp)
	jne	.LBB32_197
# %bb.38:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, (%rax)
	jne	.LBB32_40
# %bb.39:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_40:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	je	.LBB32_42
# %bb.41:
	movl	$2, %eax
	jmp	.LBB32_43
.LBB32_42:
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
.LBB32_43:
	addl	$-2, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB32_114
# %bb.44:
	movq	.LJTI32_1(,%rax,8), %rax
	jmpq	*%rax
.LBB32_45:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$13, 8(%rax)
	je	.LBB32_52
# %bb.46:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_51
# %bb.47:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_51
# %bb.48:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_51
# %bb.49:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_51
# %bb.50:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_51:
	jmp	.LBB32_57
.LBB32_52:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_56
# %bb.53:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_56
# %bb.54:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_56
# %bb.55:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_56:
	jmp	.LBB32_57
.LBB32_57:
	jmp	.LBB32_115
.LBB32_58:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_63
# %bb.59:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_63
# %bb.60:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_63
# %bb.61:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_63
# %bb.62:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_63:
	jmp	.LBB32_115
.LBB32_64:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_74
# %bb.65:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_74
# %bb.66:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB32_70
# %bb.67:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_69
# %bb.68:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_69:
	jmp	.LBB32_73
.LBB32_70:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_72
# %bb.71:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_72:
	jmp	.LBB32_73
.LBB32_73:
	jmp	.LBB32_74
.LBB32_74:
	jmp	.LBB32_115
.LBB32_75:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_85
# %bb.76:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_85
# %bb.77:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB32_81
# %bb.78:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_80
# %bb.79:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_80:
	jmp	.LBB32_84
.LBB32_81:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_83
# %bb.82:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_83:
	jmp	.LBB32_84
.LBB32_84:
	jmp	.LBB32_85
.LBB32_85:
	jmp	.LBB32_115
.LBB32_86:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB32_92
# %bb.87:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_91
# %bb.88:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_91
# %bb.89:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_91
# %bb.90:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_91:
	jmp	.LBB32_113
.LBB32_92:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB32_98
# %bb.93:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_97
# %bb.94:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_97
# %bb.95:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_97
# %bb.96:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_97:
	jmp	.LBB32_112
.LBB32_98:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB32_104
# %bb.99:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_103
# %bb.100:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_103
# %bb.101:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_103
# %bb.102:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_103:
	jmp	.LBB32_111
.LBB32_104:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB32_110
# %bb.105:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_109
# %bb.106:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_109
# %bb.107:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_109
# %bb.108:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_109:
	jmp	.LBB32_110
.LBB32_110:
	jmp	.LBB32_111
.LBB32_111:
	jmp	.LBB32_112
.LBB32_112:
	jmp	.LBB32_113
.LBB32_113:
	jmp	.LBB32_115
.LBB32_114:
	jmp	.LBB32_115
.LBB32_115:
	movslq	-16(%rbp), %rax
	cmpl	$6, board(,%rax,4)
	je	.LBB32_196
# %bb.116:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB32_135
# %bb.117:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_126
# %bb.118:
	movl	bking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB32_119:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_122
# %bb.120:                              #   in Loop: Header=BB32_119 Depth=1
	jmp	.LBB32_121
.LBB32_121:                             #   in Loop: Header=BB32_119 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_119
.LBB32_122:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB32_124
# %bb.123:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_125
.LBB32_124:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_125:
	jmp	.LBB32_134
.LBB32_126:
	movl	bking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB32_127:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_130
# %bb.128:                              #   in Loop: Header=BB32_127 Depth=1
	jmp	.LBB32_129
.LBB32_129:                             #   in Loop: Header=BB32_127 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_127
.LBB32_130:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB32_132
# %bb.131:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_133
.LBB32_132:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_133:
	jmp	.LBB32_134
.LBB32_134:
	jmp	.LBB32_195
.LBB32_135:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB32_154
# %bb.136:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_145
# %bb.137:
	movl	bking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB32_138:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_141
# %bb.139:                              #   in Loop: Header=BB32_138 Depth=1
	jmp	.LBB32_140
.LBB32_140:                             #   in Loop: Header=BB32_138 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_138
.LBB32_141:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB32_143
# %bb.142:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_144
.LBB32_143:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_144:
	jmp	.LBB32_153
.LBB32_145:
	movl	bking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB32_146:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_149
# %bb.147:                              #   in Loop: Header=BB32_146 Depth=1
	jmp	.LBB32_148
.LBB32_148:                             #   in Loop: Header=BB32_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_146
.LBB32_149:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB32_151
# %bb.150:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_152
.LBB32_151:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_152:
	jmp	.LBB32_153
.LBB32_153:
	jmp	.LBB32_194
.LBB32_154:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB32_173
# %bb.155:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_164
# %bb.156:
	movl	bking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB32_157:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_160
# %bb.158:                              #   in Loop: Header=BB32_157 Depth=1
	jmp	.LBB32_159
.LBB32_159:                             #   in Loop: Header=BB32_157 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_157
.LBB32_160:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB32_162
# %bb.161:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_163
.LBB32_162:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_163:
	jmp	.LBB32_172
.LBB32_164:
	movl	bking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB32_165:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_168
# %bb.166:                              #   in Loop: Header=BB32_165 Depth=1
	jmp	.LBB32_167
.LBB32_167:                             #   in Loop: Header=BB32_165 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_165
.LBB32_168:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB32_170
# %bb.169:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_171
.LBB32_170:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_171:
	jmp	.LBB32_172
.LBB32_172:
	jmp	.LBB32_193
.LBB32_173:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB32_192
# %bb.174:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_183
# %bb.175:
	movl	bking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB32_176:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_179
# %bb.177:                              #   in Loop: Header=BB32_176 Depth=1
	jmp	.LBB32_178
.LBB32_178:                             #   in Loop: Header=BB32_176 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_176
.LBB32_179:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB32_181
# %bb.180:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_182
.LBB32_181:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_182:
	jmp	.LBB32_191
.LBB32_183:
	movl	bking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB32_184:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_187
# %bb.185:                              #   in Loop: Header=BB32_184 Depth=1
	jmp	.LBB32_186
.LBB32_186:                             #   in Loop: Header=BB32_184 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_184
.LBB32_187:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB32_189
# %bb.188:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB32_190
.LBB32_189:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_190:
	jmp	.LBB32_191
.LBB32_191:
	jmp	.LBB32_192
.LBB32_192:
	jmp	.LBB32_193
.LBB32_193:
	jmp	.LBB32_194
.LBB32_194:
	jmp	.LBB32_195
.LBB32_195:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_196:
	jmp	.LBB32_197
.LBB32_197:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_199
# %bb.198:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_199:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_200:
	cmpl	$0, -36(%rbp)
	jne	.LBB32_360
# %bb.201:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, (%rax)
	jne	.LBB32_203
# %bb.202:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_203:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	je	.LBB32_205
# %bb.204:
	movl	$1, %eax
	jmp	.LBB32_206
.LBB32_205:
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
.LBB32_206:
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB32_277
# %bb.207:
	movq	.LJTI32_0(,%rax,8), %rax
	jmpq	*%rax
.LBB32_208:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$13, 8(%rax)
	je	.LBB32_215
# %bb.209:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_214
# %bb.210:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_214
# %bb.211:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_214
# %bb.212:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_214
# %bb.213:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_214:
	jmp	.LBB32_220
.LBB32_215:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_219
# %bb.216:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_219
# %bb.217:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_219
# %bb.218:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_219:
	jmp	.LBB32_220
.LBB32_220:
	jmp	.LBB32_278
.LBB32_221:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_226
# %bb.222:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_226
# %bb.223:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_226
# %bb.224:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_226
# %bb.225:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_226:
	jmp	.LBB32_278
.LBB32_227:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_237
# %bb.228:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_237
# %bb.229:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB32_233
# %bb.230:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_232
# %bb.231:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_232:
	jmp	.LBB32_236
.LBB32_233:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_235
# %bb.234:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_235:
	jmp	.LBB32_236
.LBB32_236:
	jmp	.LBB32_237
.LBB32_237:
	jmp	.LBB32_278
.LBB32_238:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_248
# %bb.239:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_248
# %bb.240:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB32_244
# %bb.241:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_243
# %bb.242:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_243:
	jmp	.LBB32_247
.LBB32_244:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_246
# %bb.245:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_246:
	jmp	.LBB32_247
.LBB32_247:
	jmp	.LBB32_248
.LBB32_248:
	jmp	.LBB32_278
.LBB32_249:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movq	-32(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	4(%rcx), %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB32_255
# %bb.250:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_254
# %bb.251:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_254
# %bb.252:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_254
# %bb.253:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_254:
	jmp	.LBB32_276
.LBB32_255:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB32_261
# %bb.256:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_260
# %bb.257:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_260
# %bb.258:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_260
# %bb.259:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_260:
	jmp	.LBB32_275
.LBB32_261:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB32_267
# %bb.262:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	je	.LBB32_266
# %bb.263:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_266
# %bb.264:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_266
# %bb.265:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_266:
	jmp	.LBB32_274
.LBB32_267:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB32_273
# %bb.268:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	je	.LBB32_272
# %bb.269:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB32_272
# %bb.270:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	je	.LBB32_272
# %bb.271:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_272:
	jmp	.LBB32_273
.LBB32_273:
	jmp	.LBB32_274
.LBB32_274:
	jmp	.LBB32_275
.LBB32_275:
	jmp	.LBB32_276
.LBB32_276:
	jmp	.LBB32_278
.LBB32_277:
	jmp	.LBB32_278
.LBB32_278:
	movslq	-16(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	je	.LBB32_359
# %bb.279:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB32_298
# %bb.280:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_289
# %bb.281:
	movl	wking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB32_282:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_285
# %bb.283:                              #   in Loop: Header=BB32_282 Depth=1
	jmp	.LBB32_284
.LBB32_284:                             #   in Loop: Header=BB32_282 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_282
.LBB32_285:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB32_287
# %bb.286:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_288
.LBB32_287:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_288:
	jmp	.LBB32_297
.LBB32_289:
	movl	wking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB32_290:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_293
# %bb.291:                              #   in Loop: Header=BB32_290 Depth=1
	jmp	.LBB32_292
.LBB32_292:                             #   in Loop: Header=BB32_290 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_290
.LBB32_293:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB32_295
# %bb.294:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_296
.LBB32_295:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_296:
	jmp	.LBB32_297
.LBB32_297:
	jmp	.LBB32_358
.LBB32_298:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB32_317
# %bb.299:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_308
# %bb.300:
	movl	wking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB32_301:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_304
# %bb.302:                              #   in Loop: Header=BB32_301 Depth=1
	jmp	.LBB32_303
.LBB32_303:                             #   in Loop: Header=BB32_301 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_301
.LBB32_304:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB32_306
# %bb.305:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_307
.LBB32_306:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_307:
	jmp	.LBB32_316
.LBB32_308:
	movl	wking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB32_309:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_312
# %bb.310:                              #   in Loop: Header=BB32_309 Depth=1
	jmp	.LBB32_311
.LBB32_311:                             #   in Loop: Header=BB32_309 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_309
.LBB32_312:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB32_314
# %bb.313:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_315
.LBB32_314:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_315:
	jmp	.LBB32_316
.LBB32_316:
	jmp	.LBB32_357
.LBB32_317:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB32_336
# %bb.318:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_327
# %bb.319:
	movl	wking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB32_320:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_323
# %bb.321:                              #   in Loop: Header=BB32_320 Depth=1
	jmp	.LBB32_322
.LBB32_322:                             #   in Loop: Header=BB32_320 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_320
.LBB32_323:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB32_325
# %bb.324:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_326
.LBB32_325:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_326:
	jmp	.LBB32_335
.LBB32_327:
	movl	wking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB32_328:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_331
# %bb.329:                              #   in Loop: Header=BB32_328 Depth=1
	jmp	.LBB32_330
.LBB32_330:                             #   in Loop: Header=BB32_328 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_328
.LBB32_331:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB32_333
# %bb.332:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_334
.LBB32_333:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_334:
	jmp	.LBB32_335
.LBB32_335:
	jmp	.LBB32_356
.LBB32_336:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB32_355
# %bb.337:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB32_346
# %bb.338:
	movl	wking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB32_339:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_342
# %bb.340:                              #   in Loop: Header=BB32_339 Depth=1
	jmp	.LBB32_341
.LBB32_341:                             #   in Loop: Header=BB32_339 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_339
.LBB32_342:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB32_344
# %bb.343:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_345
.LBB32_344:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_345:
	jmp	.LBB32_354
.LBB32_346:
	movl	wking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB32_347:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB32_350
# %bb.348:                              #   in Loop: Header=BB32_347 Depth=1
	jmp	.LBB32_349
.LBB32_349:                             #   in Loop: Header=BB32_347 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_347
.LBB32_350:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB32_352
# %bb.351:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB32_353
.LBB32_352:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_353:
	jmp	.LBB32_354
.LBB32_354:
	jmp	.LBB32_355
.LBB32_355:
	jmp	.LBB32_356
.LBB32_356:
	jmp	.LBB32_357
.LBB32_357:
	jmp	.LBB32_358
.LBB32_358:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_359:
	jmp	.LBB32_360
.LBB32_360:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB32_362
# %bb.361:
	movl	$0, -12(%rbp)
	jmp	.LBB32_364
.LBB32_362:
	movl	$1, -12(%rbp)
	jmp	.LBB32_364
.LBB32_363:
	movl	$0, -12(%rbp)
.LBB32_364:
	movl	-12(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end32:
	.size	check_legal, .Lfunc_end32-check_legal
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI32_0:
	.quad	.LBB32_208
	.quad	.LBB32_277
	.quad	.LBB32_221
	.quad	.LBB32_277
	.quad	.LBB32_277
	.quad	.LBB32_277
	.quad	.LBB32_238
	.quad	.LBB32_277
	.quad	.LBB32_249
	.quad	.LBB32_277
	.quad	.LBB32_227
.LJTI32_1:
	.quad	.LBB32_45
	.quad	.LBB32_114
	.quad	.LBB32_58
	.quad	.LBB32_114
	.quad	.LBB32_114
	.quad	.LBB32_114
	.quad	.LBB32_75
	.quad	.LBB32_114
	.quad	.LBB32_86
	.quad	.LBB32_114
	.quad	.LBB32_64
                                        # -- End function
	.text
	.globl	gen                     # -- Begin function gen
	.p2align	4, 0x90
	.type	gen,@function
gen:                                    # @gen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	$0, kingcap
	movl	$0, numb_moves
	movq	-24(%rbp), %rax
	movq	%rax, genfor
	cmpl	$3, Variant
	jne	.LBB33_2
# %bb.1:
	movl	$0, captures
	movl	$0, fcaptures
.LBB33_2:
	jmp	.LBB33_3
.LBB33_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_5 Depth 2
                                        #     Child Loop BB33_119 Depth 2
                                        #     Child Loop BB33_243 Depth 2
                                        #     Child Loop BB33_271 Depth 2
	cmpl	$0, white_to_move
	je	.LBB33_118
# %bb.4:                                #   in Loop: Header=BB33_3 Depth=1
	movl	$1, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB33_5:                               #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	cmpl	piece_count, %ecx
	jg	.LBB33_12
# %bb.6:                                #   in Loop: Header=BB33_5 Depth=2
	cmpl	$3, Variant
	je	.LBB33_8
# %bb.7:                                #   in Loop: Header=BB33_5 Depth=2
	movb	$1, %al
	cmpl	$0, kingcap
	je	.LBB33_11
.LBB33_8:                               #   in Loop: Header=BB33_5 Depth=2
	xorl	%eax, %eax
	cmpl	$3, Variant
	jne	.LBB33_10
# %bb.9:                                #   in Loop: Header=BB33_5 Depth=2
	movl	fcaptures, %eax
	cmpl	captures, %eax
	sete	%al
.LBB33_10:                              #   in Loop: Header=BB33_5 Depth=2
.LBB33_11:                              #   in Loop: Header=BB33_5 Depth=2
.LBB33_12:                              #   in Loop: Header=BB33_5 Depth=2
	testb	$1, %al
	jne	.LBB33_13
	jmp	.LBB33_117
.LBB33_13:                              #   in Loop: Header=BB33_5 Depth=2
	movslq	-12(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB33_15
# %bb.14:                               #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_116
.LBB33_15:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.16:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, gfrom(%rip)
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB33_114
# %bb.17:                               #   in Loop: Header=BB33_5 Depth=2
	movq	.LJTI33_1(,%rax,8), %rax
	jmpq	*%rax
.LBB33_18:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB33_30
# %bb.19:                               #   in Loop: Header=BB33_5 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$7, Xrank(,%rax,4)
	jne	.LBB33_23
# %bb.20:                               #   in Loop: Header=BB33_5 Depth=2
	cmpl	$3, Variant
	je	.LBB33_23
# %bb.21:                               #   in Loop: Header=BB33_5 Depth=2
	cmpl	$4, Variant
	je	.LBB33_23
# %bb.22:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$12, %edi
	xorl	%esi, %esi
	callq	push_pawn
	jmp	.LBB33_29
.LBB33_23:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$0, captures
	jne	.LBB33_28
# %bb.24:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$12, %edi
	xorl	%esi, %esi
	callq	push_pawn
	movslq	-4(%rbp), %rax
	cmpl	$2, Xrank(,%rax,4)
	jne	.LBB33_27
# %bb.25:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$24, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB33_27
# %bb.26:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$24, %edi
	callq	push_pawn_simple
.LBB33_27:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_28
.LBB33_28:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_29
.LBB33_29:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_30
.LBB33_30:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB33_33
# %bb.31:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_33
# %bb.32:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$13, %edi
	xorl	%esi, %esi
	callq	push_pawn
.LBB33_33:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB33_36
# %bb.34:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_36
# %bb.35:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$11, %edi
	xorl	%esi, %esi
	callq	push_pawn
.LBB33_36:                              #   in Loop: Header=BB33_5 Depth=2
	movl	ep_square, %eax
	movl	-4(%rbp), %ecx
	addl	$13, %ecx
	cmpl	%ecx, %eax
	jne	.LBB33_38
# %bb.37:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$13, %edi
	movl	$1, %esi
	callq	push_pawn
	jmp	.LBB33_41
.LBB33_38:                              #   in Loop: Header=BB33_5 Depth=2
	movl	ep_square, %eax
	movl	-4(%rbp), %ecx
	addl	$11, %ecx
	cmpl	%ecx, %eax
	jne	.LBB33_40
# %bb.39:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$11, %edi
	movl	$1, %esi
	callq	push_pawn
.LBB33_40:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_41
.LBB33_41:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_42:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$25, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_44
# %bb.43:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$25, %edi
	callq	push_knighT
.LBB33_44:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$23, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_46
# %bb.45:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$23, %edi
	callq	push_knighT
.LBB33_46:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$14, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_48
# %bb.47:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$14, %edi
	callq	push_knighT
.LBB33_48:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$10, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_50
# %bb.49:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$10, %edi
	callq	push_knighT
.LBB33_50:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$10, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_52
# %bb.51:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$10, %edi
	callq	push_knighT
.LBB33_52:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$14, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_54
# %bb.53:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$14, %edi
	callq	push_knighT
.LBB33_54:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$23, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_56
# %bb.55:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$23, %edi
	callq	push_knighT
.LBB33_56:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$25, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_58
# %bb.57:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$25, %edi
	callq	push_knighT
.LBB33_58:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_59:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_61
# %bb.60:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	callq	push_slidE
.LBB33_61:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_63
# %bb.62:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$11, %edi
	callq	push_slidE
.LBB33_63:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_65
# %bb.64:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$11, %edi
	callq	push_slidE
.LBB33_65:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_67
# %bb.66:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$13, %edi
	callq	push_slidE
.LBB33_67:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_68:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_70
# %bb.69:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$12, %edi
	callq	push_slidE
.LBB33_70:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_72
# %bb.71:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$1, %edi
	callq	push_slidE
.LBB33_72:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_74
# %bb.73:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$1, %edi
	callq	push_slidE
.LBB33_74:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_76
# %bb.75:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$12, %edi
	callq	push_slidE
.LBB33_76:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_77:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_79
# %bb.78:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	callq	push_slidE
.LBB33_79:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_81
# %bb.80:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$12, %edi
	callq	push_slidE
.LBB33_81:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_83
# %bb.82:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$11, %edi
	callq	push_slidE
.LBB33_83:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_85
# %bb.84:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$1, %edi
	callq	push_slidE
.LBB33_85:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_87
# %bb.86:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$1, %edi
	callq	push_slidE
.LBB33_87:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_89
# %bb.88:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$11, %edi
	callq	push_slidE
.LBB33_89:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_91
# %bb.90:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$12, %edi
	callq	push_slidE
.LBB33_91:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_93
# %bb.92:                               #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$13, %edi
	callq	push_slidE
.LBB33_93:                              #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_94:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	subl	$12, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	subl	$11, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	subl	$1, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$1, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$11, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$12, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$13, %edi
	callq	push_king
	cmpl	$30, -4(%rbp)
	jne	.LBB33_113
# %bb.95:                               #   in Loop: Header=BB33_5 Depth=2
	cmpl	$0, moved+120
	jne	.LBB33_113
# %bb.96:                               #   in Loop: Header=BB33_5 Depth=2
	cmpl	$0, captures
	jne	.LBB33_113
# %bb.97:                               #   in Loop: Header=BB33_5 Depth=2
	cmpl	$3, Variant
	jne	.LBB33_99
# %bb.98:                               #   in Loop: Header=BB33_5 Depth=2
	cmpl	$1, Giveaway
	jne	.LBB33_113
.LBB33_99:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$0, moved+132
	jne	.LBB33_105
# %bb.100:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$7, board+132
	jne	.LBB33_105
# %bb.101:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$13, board+124
	jne	.LBB33_104
# %bb.102:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$13, board+128
	jne	.LBB33_104
# %bb.103:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	addl	$2, %edi
	movl	$1, %esi
	callq	push_king_castle
.LBB33_104:                             #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_105
.LBB33_105:                             #   in Loop: Header=BB33_5 Depth=2
	cmpl	$0, moved+104
	jne	.LBB33_112
# %bb.106:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$7, board+104
	jne	.LBB33_112
# %bb.107:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$13, board+108
	jne	.LBB33_111
# %bb.108:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$13, board+112
	jne	.LBB33_111
# %bb.109:                              #   in Loop: Header=BB33_5 Depth=2
	cmpl	$13, board+116
	jne	.LBB33_111
# %bb.110:                              #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %edi
	subl	$2, %edi
	movl	$2, %esi
	callq	push_king_castle
.LBB33_111:                             #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_112
.LBB33_112:                             #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_113
.LBB33_113:                             #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_114:                             #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_115
.LBB33_115:                             #   in Loop: Header=BB33_5 Depth=2
	jmp	.LBB33_116
.LBB33_116:                             #   in Loop: Header=BB33_5 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_5
.LBB33_117:                             #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_232
.LBB33_118:                             #   in Loop: Header=BB33_3 Depth=1
	movl	$1, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB33_119:                             #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	cmpl	piece_count, %ecx
	jg	.LBB33_126
# %bb.120:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$3, Variant
	je	.LBB33_122
# %bb.121:                              #   in Loop: Header=BB33_119 Depth=2
	movb	$1, %al
	cmpl	$0, kingcap
	je	.LBB33_125
.LBB33_122:                             #   in Loop: Header=BB33_119 Depth=2
	xorl	%eax, %eax
	cmpl	$3, Variant
	jne	.LBB33_124
# %bb.123:                              #   in Loop: Header=BB33_119 Depth=2
	movl	fcaptures, %eax
	cmpl	captures, %eax
	sete	%al
.LBB33_124:                             #   in Loop: Header=BB33_119 Depth=2
.LBB33_125:                             #   in Loop: Header=BB33_119 Depth=2
.LBB33_126:                             #   in Loop: Header=BB33_119 Depth=2
	testb	$1, %al
	jne	.LBB33_127
	jmp	.LBB33_231
.LBB33_127:                             #   in Loop: Header=BB33_119 Depth=2
	movslq	-12(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB33_129
# %bb.128:                              #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_230
.LBB33_129:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.130:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, gfrom(%rip)
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-2, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB33_228
# %bb.131:                              #   in Loop: Header=BB33_119 Depth=2
	movq	.LJTI33_0(,%rax,8), %rax
	jmpq	*%rax
.LBB33_132:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB33_144
# %bb.133:                              #   in Loop: Header=BB33_119 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$2, Xrank(,%rax,4)
	jne	.LBB33_137
# %bb.134:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$3, Variant
	je	.LBB33_137
# %bb.135:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$4, Variant
	je	.LBB33_137
# %bb.136:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$12, %edi
	xorl	%esi, %esi
	callq	push_pawn
	jmp	.LBB33_143
.LBB33_137:                             #   in Loop: Header=BB33_119 Depth=2
	cmpl	$0, captures
	jne	.LBB33_142
# %bb.138:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$12, %edi
	xorl	%esi, %esi
	callq	push_pawn
	movslq	-4(%rbp), %rax
	cmpl	$7, Xrank(,%rax,4)
	jne	.LBB33_141
# %bb.139:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$24, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB33_141
# %bb.140:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$24, %edi
	callq	push_pawn_simple
.LBB33_141:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_142
.LBB33_142:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_143
.LBB33_143:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_144
.LBB33_144:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB33_147
# %bb.145:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$13, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	je	.LBB33_147
# %bb.146:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	xorl	%esi, %esi
	callq	push_pawn
.LBB33_147:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB33_150
# %bb.148:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$11, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	je	.LBB33_150
# %bb.149:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$11, %edi
	xorl	%esi, %esi
	callq	push_pawn
.LBB33_150:                             #   in Loop: Header=BB33_119 Depth=2
	movl	ep_square, %eax
	movl	-4(%rbp), %ecx
	subl	$13, %ecx
	cmpl	%ecx, %eax
	jne	.LBB33_152
# %bb.151:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	movl	$1, %esi
	callq	push_pawn
	jmp	.LBB33_155
.LBB33_152:                             #   in Loop: Header=BB33_119 Depth=2
	movl	ep_square, %eax
	movl	-4(%rbp), %ecx
	subl	$11, %ecx
	cmpl	%ecx, %eax
	jne	.LBB33_154
# %bb.153:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$11, %edi
	movl	$1, %esi
	callq	push_pawn
.LBB33_154:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_155
.LBB33_155:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_156:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$25, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_158
# %bb.157:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$25, %edi
	callq	push_knighT
.LBB33_158:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$23, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_160
# %bb.159:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$23, %edi
	callq	push_knighT
.LBB33_160:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$14, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_162
# %bb.161:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$14, %edi
	callq	push_knighT
.LBB33_162:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$10, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_164
# %bb.163:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$10, %edi
	callq	push_knighT
.LBB33_164:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$10, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_166
# %bb.165:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$10, %edi
	callq	push_knighT
.LBB33_166:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$14, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_168
# %bb.167:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$14, %edi
	callq	push_knighT
.LBB33_168:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$23, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_170
# %bb.169:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$23, %edi
	callq	push_knighT
.LBB33_170:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$25, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_172
# %bb.171:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$25, %edi
	callq	push_knighT
.LBB33_172:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_173:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_175
# %bb.174:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	callq	push_slidE
.LBB33_175:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_177
# %bb.176:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$11, %edi
	callq	push_slidE
.LBB33_177:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_179
# %bb.178:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$11, %edi
	callq	push_slidE
.LBB33_179:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_181
# %bb.180:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$13, %edi
	callq	push_slidE
.LBB33_181:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_182:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_184
# %bb.183:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$12, %edi
	callq	push_slidE
.LBB33_184:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_186
# %bb.185:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$1, %edi
	callq	push_slidE
.LBB33_186:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_188
# %bb.187:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$1, %edi
	callq	push_slidE
.LBB33_188:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_190
# %bb.189:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$12, %edi
	callq	push_slidE
.LBB33_190:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_191:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_193
# %bb.192:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	callq	push_slidE
.LBB33_193:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_195
# %bb.194:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$12, %edi
	callq	push_slidE
.LBB33_195:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_197
# %bb.196:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$11, %edi
	callq	push_slidE
.LBB33_197:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_199
# %bb.198:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$1, %edi
	callq	push_slidE
.LBB33_199:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_201
# %bb.200:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$1, %edi
	callq	push_slidE
.LBB33_201:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$11, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_203
# %bb.202:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$11, %edi
	callq	push_slidE
.LBB33_203:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_205
# %bb.204:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$12, %edi
	callq	push_slidE
.LBB33_205:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %eax
	addl	$13, %eax
	cltq
	cmpl	$0, board(,%rax,4)
	je	.LBB33_207
# %bb.206:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$13, %edi
	callq	push_slidE
.LBB33_207:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_208:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$13, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	subl	$12, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	subl	$11, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	subl	$1, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$1, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$11, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$12, %edi
	callq	push_king
	movl	-4(%rbp), %edi
	addl	$13, %edi
	callq	push_king
	cmpl	$114, -4(%rbp)
	jne	.LBB33_227
# %bb.209:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$0, moved+456
	jne	.LBB33_227
# %bb.210:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$0, captures
	jne	.LBB33_227
# %bb.211:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$3, Variant
	jne	.LBB33_213
# %bb.212:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$1, Giveaway
	jne	.LBB33_227
.LBB33_213:                             #   in Loop: Header=BB33_119 Depth=2
	cmpl	$0, moved+468
	jne	.LBB33_219
# %bb.214:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$8, board+468
	jne	.LBB33_219
# %bb.215:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$13, board+460
	jne	.LBB33_218
# %bb.216:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$13, board+464
	jne	.LBB33_218
# %bb.217:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	addl	$2, %edi
	movl	$3, %esi
	callq	push_king_castle
.LBB33_218:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_219
.LBB33_219:                             #   in Loop: Header=BB33_119 Depth=2
	cmpl	$0, moved+440
	jne	.LBB33_226
# %bb.220:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$8, board+440
	jne	.LBB33_226
# %bb.221:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$13, board+444
	jne	.LBB33_225
# %bb.222:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$13, board+448
	jne	.LBB33_225
# %bb.223:                              #   in Loop: Header=BB33_119 Depth=2
	cmpl	$13, board+452
	jne	.LBB33_225
# %bb.224:                              #   in Loop: Header=BB33_119 Depth=2
	movl	-4(%rbp), %edi
	subl	$2, %edi
	movl	$4, %esi
	callq	push_king_castle
.LBB33_225:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_226
.LBB33_226:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_227
.LBB33_227:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_228:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_229
.LBB33_229:                             #   in Loop: Header=BB33_119 Depth=2
	jmp	.LBB33_230
.LBB33_230:                             #   in Loop: Header=BB33_119 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_119
.LBB33_231:                             #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_232
.LBB33_232:                             #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, Variant
	je	.LBB33_234
# %bb.233:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$1, Variant
	jne	.LBB33_294
.LBB33_234:                             #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, captures
	jne	.LBB33_294
# %bb.235:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, kingcap
	jne	.LBB33_294
# %bb.236:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, white_to_move
	je	.LBB33_264
# %bb.237:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+4
	jne	.LBB33_242
# %bb.238:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+12
	jne	.LBB33_242
# %bb.239:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+44
	jne	.LBB33_242
# %bb.240:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+36
	jne	.LBB33_242
# %bb.241:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+28
	je	.LBB33_264
.LBB33_242:                             #   in Loop: Header=BB33_3 Depth=1
	movl	$26, -4(%rbp)
.LBB33_243:                             #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$118, -4(%rbp)
	jge	.LBB33_263
# %bb.244:                              #   in Loop: Header=BB33_243 Depth=2
	movl	-4(%rbp), %eax
	movl	%eax, gfrom(%rip)
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	testl	%eax, %eax
	je	.LBB33_246
	jmp	.LBB33_245
.LBB33_245:                             #   in Loop: Header=BB33_243 Depth=2
	subl	$13, %eax
	je	.LBB33_247
	jmp	.LBB33_261
.LBB33_246:                             #   in Loop: Header=BB33_243 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_262
.LBB33_247:                             #   in Loop: Header=BB33_243 Depth=2
	cmpl	$0, holding+4
	je	.LBB33_252
# %bb.248:                              #   in Loop: Header=BB33_243 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$8, Xrank(,%rax,4)
	je	.LBB33_251
# %bb.249:                              #   in Loop: Header=BB33_243 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$1, Xrank(,%rax,4)
	je	.LBB33_251
# %bb.250:                              #   in Loop: Header=BB33_243 Depth=2
	movl	$1, %edi
	callq	try_drop
.LBB33_251:                             #   in Loop: Header=BB33_243 Depth=2
	jmp	.LBB33_252
.LBB33_252:                             #   in Loop: Header=BB33_243 Depth=2
	cmpl	$0, holding+12
	je	.LBB33_254
# %bb.253:                              #   in Loop: Header=BB33_243 Depth=2
	movl	$3, %edi
	callq	try_drop
.LBB33_254:                             #   in Loop: Header=BB33_243 Depth=2
	cmpl	$0, holding+44
	je	.LBB33_256
# %bb.255:                              #   in Loop: Header=BB33_243 Depth=2
	movl	$11, %edi
	callq	try_drop
.LBB33_256:                             #   in Loop: Header=BB33_243 Depth=2
	cmpl	$0, holding+28
	je	.LBB33_258
# %bb.257:                              #   in Loop: Header=BB33_243 Depth=2
	movl	$7, %edi
	callq	try_drop
.LBB33_258:                             #   in Loop: Header=BB33_243 Depth=2
	cmpl	$0, holding+36
	je	.LBB33_260
# %bb.259:                              #   in Loop: Header=BB33_243 Depth=2
	movl	$9, %edi
	callq	try_drop
.LBB33_260:                             #   in Loop: Header=BB33_243 Depth=2
	jmp	.LBB33_261
.LBB33_261:                             #   in Loop: Header=BB33_243 Depth=2
	jmp	.LBB33_262
.LBB33_262:                             #   in Loop: Header=BB33_243 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_243
.LBB33_263:                             #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_293
.LBB33_264:                             #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, white_to_move
	jne	.LBB33_292
# %bb.265:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+72
	jne	.LBB33_270
# %bb.266:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+80
	jne	.LBB33_270
# %bb.267:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+112
	jne	.LBB33_270
# %bb.268:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+104
	jne	.LBB33_270
# %bb.269:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, holding+96
	je	.LBB33_292
.LBB33_270:                             #   in Loop: Header=BB33_3 Depth=1
	movl	$26, -4(%rbp)
.LBB33_271:                             #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$118, -4(%rbp)
	jge	.LBB33_291
# %bb.272:                              #   in Loop: Header=BB33_271 Depth=2
	movl	-4(%rbp), %eax
	movl	%eax, gfrom(%rip)
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	testl	%eax, %eax
	je	.LBB33_274
	jmp	.LBB33_273
.LBB33_273:                             #   in Loop: Header=BB33_271 Depth=2
	subl	$13, %eax
	je	.LBB33_275
	jmp	.LBB33_289
.LBB33_274:                             #   in Loop: Header=BB33_271 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_290
.LBB33_275:                             #   in Loop: Header=BB33_271 Depth=2
	cmpl	$0, holding+72
	je	.LBB33_280
# %bb.276:                              #   in Loop: Header=BB33_271 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$8, Xrank(,%rax,4)
	je	.LBB33_279
# %bb.277:                              #   in Loop: Header=BB33_271 Depth=2
	movslq	-4(%rbp), %rax
	cmpl	$1, Xrank(,%rax,4)
	je	.LBB33_279
# %bb.278:                              #   in Loop: Header=BB33_271 Depth=2
	movl	$2, %edi
	callq	try_drop
.LBB33_279:                             #   in Loop: Header=BB33_271 Depth=2
	jmp	.LBB33_280
.LBB33_280:                             #   in Loop: Header=BB33_271 Depth=2
	cmpl	$0, holding+80
	je	.LBB33_282
# %bb.281:                              #   in Loop: Header=BB33_271 Depth=2
	movl	$4, %edi
	callq	try_drop
.LBB33_282:                             #   in Loop: Header=BB33_271 Depth=2
	cmpl	$0, holding+112
	je	.LBB33_284
# %bb.283:                              #   in Loop: Header=BB33_271 Depth=2
	movl	$12, %edi
	callq	try_drop
.LBB33_284:                             #   in Loop: Header=BB33_271 Depth=2
	cmpl	$0, holding+96
	je	.LBB33_286
# %bb.285:                              #   in Loop: Header=BB33_271 Depth=2
	movl	$8, %edi
	callq	try_drop
.LBB33_286:                             #   in Loop: Header=BB33_271 Depth=2
	cmpl	$0, holding+104
	je	.LBB33_288
# %bb.287:                              #   in Loop: Header=BB33_271 Depth=2
	movl	$10, %edi
	callq	try_drop
.LBB33_288:                             #   in Loop: Header=BB33_271 Depth=2
	jmp	.LBB33_289
.LBB33_289:                             #   in Loop: Header=BB33_271 Depth=2
	jmp	.LBB33_290
.LBB33_290:                             #   in Loop: Header=BB33_271 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_271
.LBB33_291:                             #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_292
.LBB33_292:                             #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_293
.LBB33_293:                             #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_294
.LBB33_294:                             #   in Loop: Header=BB33_3 Depth=1
	cmpl	$3, Variant
	jne	.LBB33_298
# %bb.295:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$1, fcaptures
	jne	.LBB33_298
# %bb.296:                              #   in Loop: Header=BB33_3 Depth=1
	cmpl	$0, captures
	jne	.LBB33_298
# %bb.297:                              #   in Loop: Header=BB33_3 Depth=1
	movl	$1, captures
	movl	$0, numb_moves
	jmp	.LBB33_3
.LBB33_298:
	cmpl	$3, Variant
	jne	.LBB33_300
# %bb.299:
	movl	$0, kingcap
.LBB33_300:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end33:
	.size	gen, .Lfunc_end33-gen
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI33_0:
	.quad	.LBB33_132
	.quad	.LBB33_228
	.quad	.LBB33_156
	.quad	.LBB33_228
	.quad	.LBB33_208
	.quad	.LBB33_228
	.quad	.LBB33_182
	.quad	.LBB33_228
	.quad	.LBB33_191
	.quad	.LBB33_228
	.quad	.LBB33_173
.LJTI33_1:
	.quad	.LBB33_18
	.quad	.LBB33_114
	.quad	.LBB33_42
	.quad	.LBB33_114
	.quad	.LBB33_94
	.quad	.LBB33_114
	.quad	.LBB33_68
	.quad	.LBB33_114
	.quad	.LBB33_77
	.quad	.LBB33_114
	.quad	.LBB33_59
                                        # -- End function
	.text
	.globl	push_pawn               # -- Begin function push_pawn
	.p2align	4, 0x90
	.type	push_pawn,@function
push_pawn:                              # @push_pawn
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB34_4
# %bb.1:
	movslq	gfrom, %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB34_3
# %bb.2:
	movl	-4(%rbp), %edi
	movl	$2, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	add_capture
	jmp	.LBB34_15
.LBB34_3:
	movl	-4(%rbp), %edi
	movl	$1, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	callq	add_capture
	jmp	.LBB34_15
.LBB34_4:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	movslq	gfrom, %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB34_9
# %bb.5:
	movslq	gfrom, %rax
	cmpl	$7, Xrank(,%rax,4)
	jne	.LBB34_9
# %bb.6:
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$9, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$7, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$11, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$3, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	cmpl	$3, Variant
	jne	.LBB34_8
# %bb.7:
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$5, %edx
	xorl	%ecx, %ecx
	callq	add_capture
.LBB34_8:
	jmp	.LBB34_15
.LBB34_9:
	movslq	gfrom, %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB34_14
# %bb.10:
	movslq	gfrom, %rax
	cmpl	$2, Xrank(,%rax,4)
	jne	.LBB34_14
# %bb.11:
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$10, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$8, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$12, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$4, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	cmpl	$3, Variant
	jne	.LBB34_13
# %bb.12:
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$6, %edx
	xorl	%ecx, %ecx
	callq	add_capture
.LBB34_13:
	jmp	.LBB34_15
.LBB34_14:
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	add_capture
.LBB34_15:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end34:
	.size	push_pawn, .Lfunc_end34-push_pawn
	.cfi_endproc
                                        # -- End function
	.globl	push_pawn_simple        # -- Begin function push_pawn_simple
	.p2align	4, 0x90
	.type	push_pawn_simple,@function
push_pawn_simple:                       # @push_pawn_simple
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %edi
	xorl	%esi, %esi
	callq	add_move
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end35:
	.size	push_pawn_simple, .Lfunc_end35-push_pawn_simple
	.cfi_endproc
                                        # -- End function
	.globl	push_knighT             # -- Begin function push_knighT
	.p2align	4, 0x90
	.type	push_knighT,@function
push_knighT:                            # @push_knighT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB36_3
# %bb.1:
	cmpl	$0, captures
	je	.LBB36_3
# %bb.2:
	jmp	.LBB36_9
.LBB36_3:
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB36_5
# %bb.4:
	movl	-4(%rbp), %edi
	xorl	%esi, %esi
	callq	add_move
	jmp	.LBB36_9
.LBB36_5:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	movslq	gfrom, %rcx
	movl	board(,%rcx,4), %ecx
	andl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB36_7
# %bb.6:
	movl	-4(%rbp), %edi
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	jmp	.LBB36_9
.LBB36_7:
	jmp	.LBB36_8
.LBB36_8:
	jmp	.LBB36_9
.LBB36_9:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end36:
	.size	push_knighT, .Lfunc_end36-push_knighT
	.cfi_endproc
                                        # -- End function
	.globl	push_slidE              # -- Begin function push_slidE
	.p2align	4, 0x90
	.type	push_slidE,@function
push_slidE:                             # @push_slidE
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	gfrom, %eax
	movl	%eax, -12(%rbp)
	movslq	gfrom, %rax
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB37_1:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB37_5
# %bb.2:                                #   in Loop: Header=BB37_1 Depth=1
	cmpl	$0, captures
	jne	.LBB37_4
# %bb.3:                                #   in Loop: Header=BB37_1 Depth=1
	movl	-4(%rbp), %edi
	xorl	%esi, %esi
	callq	add_move
.LBB37_4:                               #   in Loop: Header=BB37_1 Depth=1
	movl	-12(%rbp), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_8
.LBB37_5:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	cmpl	-8(%rbp), %eax
	je	.LBB37_7
# %bb.6:
	movl	-4(%rbp), %edi
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	jmp	.LBB37_11
.LBB37_7:
	jmp	.LBB37_11
.LBB37_8:                               #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_9
.LBB37_9:                               #   in Loop: Header=BB37_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	jne	.LBB37_1
# %bb.10:                               # %.loopexit
	jmp	.LBB37_11
.LBB37_11:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end37:
	.size	push_slidE, .Lfunc_end37-push_slidE
	.cfi_endproc
                                        # -- End function
	.globl	push_king               # -- Begin function push_king
	.p2align	4, 0x90
	.type	push_king,@function
push_king:                              # @push_king
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	jne	.LBB38_2
# %bb.1:
	jmp	.LBB38_11
.LBB38_2:
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB38_5
# %bb.3:
	cmpl	$0, captures
	je	.LBB38_5
# %bb.4:
	jmp	.LBB38_11
.LBB38_5:
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB38_7
# %bb.6:
	movl	-4(%rbp), %edi
	xorl	%esi, %esi
	callq	add_move
	jmp	.LBB38_11
.LBB38_7:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	andl	$1, %eax
	movslq	gfrom, %rcx
	movl	board(,%rcx,4), %ecx
	andl	$1, %ecx
	cmpl	%ecx, %eax
	je	.LBB38_9
# %bb.8:
	movl	-4(%rbp), %edi
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	add_capture
	jmp	.LBB38_11
.LBB38_9:
	jmp	.LBB38_10
.LBB38_10:
	jmp	.LBB38_11
.LBB38_11:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end38:
	.size	push_king, .Lfunc_end38-push_king
	.cfi_endproc
                                        # -- End function
	.globl	push_king_castle        # -- Begin function push_king_castle
	.p2align	4, 0x90
	.type	push_king_castle,@function
push_king_castle:                       # @push_king_castle
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	gfrom, %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$13, 8(%rax)
	movl	-4(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 16(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 12(%rax)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 20(%rax)
	movl	numb_moves, %eax
	addl	$1, %eax
	movl	%eax, numb_moves
	popq	%rbp
	retq
.Lfunc_end39:
	.size	push_king_castle, .Lfunc_end39-push_king_castle
	.cfi_endproc
                                        # -- End function
	.globl	try_drop                # -- Begin function try_drop
	.p2align	4, 0x90
	.type	try_drop,@function
try_drop:                               # @try_drop
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, (%rax)
	movl	gfrom, %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$13, 8(%rax)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 16(%rax)
	movl	-4(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 20(%rax)
	movl	numb_moves, %eax
	addl	$1, %eax
	movl	%eax, numb_moves
	popq	%rbp
	retq
.Lfunc_end40:
	.size	try_drop, .Lfunc_end40-try_drop
	.cfi_endproc
                                        # -- End function
	.globl	add_move                # -- Begin function add_move
	.p2align	4, 0x90
	.type	add_move,@function
add_move:                               # @add_move
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	gfrom, %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$13, 8(%rax)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 16(%rax)
	movl	-4(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 20(%rax)
	movl	numb_moves, %eax
	addl	$1, %eax
	movl	%eax, numb_moves
	popq	%rbp
	retq
.Lfunc_end41:
	.size	add_move, .Lfunc_end41-add_move
	.cfi_endproc
                                        # -- End function
	.globl	add_capture             # -- Begin function add_capture
	.p2align	4, 0x90
	.type	add_capture,@function
add_capture:                            # @add_capture
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -8(%rbp)
	cmpl	$3, Variant
	je	.LBB42_4
# %bb.1:
	cmpl	$5, -4(%rbp)
	je	.LBB42_3
# %bb.2:
	cmpl	$6, -4(%rbp)
	jne	.LBB42_4
.LBB42_3:
	movl	$1, kingcap
	jmp	.LBB42_8
.LBB42_4:
	cmpl	$13, -4(%rbp)
	je	.LBB42_6
# %bb.5:
	movl	$1, fcaptures
.LBB42_6:
	jmp	.LBB42_7
.LBB42_7:
	movl	gfrom, %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-16(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-4(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movq	genfor, %rax
	movslq	numb_moves, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 16(%rax)
	movl	-12(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
	movl	-8(%rbp), %eax
	movq	genfor, %rcx
	movslq	numb_moves, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 20(%rcx)
	movl	numb_moves, %eax
	addl	$1, %eax
	movl	%eax, numb_moves
.LBB42_8:
	popq	%rbp
	retq
.Lfunc_end42:
	.size	add_capture, .Lfunc_end42-add_capture
	.cfi_endproc
                                        # -- End function
	.globl	in_check                # -- Begin function in_check
	.p2align	4, 0x90
	.type	in_check,@function
in_check:                               # @in_check
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpl	$3, Variant
	jne	.LBB43_2
# %bb.1:
	movl	$0, -4(%rbp)
	jmp	.LBB43_10
.LBB43_2:
	cmpl	$1, white_to_move
	jne	.LBB43_6
# %bb.3:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB43_5
# %bb.4:
	movl	$1, -4(%rbp)
	jmp	.LBB43_10
.LBB43_5:
	jmp	.LBB43_9
.LBB43_6:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB43_8
# %bb.7:
	movl	$1, -4(%rbp)
	jmp	.LBB43_10
.LBB43_8:
	jmp	.LBB43_9
.LBB43_9:
	movl	$0, -4(%rbp)
.LBB43_10:
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end43:
	.size	in_check, .Lfunc_end43-in_check
	.cfi_endproc
                                        # -- End function
	.globl	f_in_check              # -- Begin function f_in_check
	.p2align	4, 0x90
	.type	f_in_check,@function
f_in_check:                             # @f_in_check
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	cmpl	$3, Variant
	jne	.LBB44_2
# %bb.1:
	movl	$0, -12(%rbp)
	jmp	.LBB44_491
.LBB44_2:
	cmpl	$1, white_to_move
	jne	.LBB44_247
# %bb.3:
	movslq	-8(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-2, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB44_165
# %bb.4:
	movq	.LJTI44_1(,%rax,8), %rax
	jmpq	*%rax
.LBB44_5:
	movl	-8(%rbp), %eax
	subl	$11, %eax
	cltq
	cmpl	$5, board(,%rax,4)
	je	.LBB44_7
# %bb.6:
	movl	-8(%rbp), %eax
	subl	$13, %eax
	cltq
	cmpl	$5, board(,%rax,4)
	jne	.LBB44_8
.LBB44_7:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_8:
	jmp	.LBB44_165
.LBB44_9:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB44_26
# %bb.10:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_18
# %bb.11:
	movl	wking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_12:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_15
# %bb.13:                               #   in Loop: Header=BB44_12 Depth=1
	jmp	.LBB44_14
.LBB44_14:                              #   in Loop: Header=BB44_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_12
.LBB44_15:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_17
# %bb.16:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_17:
	jmp	.LBB44_25
.LBB44_18:
	movl	wking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_19:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_22
# %bb.20:                               #   in Loop: Header=BB44_19 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              #   in Loop: Header=BB44_19 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_19
.LBB44_22:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_24
# %bb.23:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_24:
	jmp	.LBB44_25
.LBB44_25:
	jmp	.LBB44_44
.LBB44_26:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB44_43
# %bb.27:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_35
# %bb.28:
	movl	wking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_29:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_32
# %bb.30:                               #   in Loop: Header=BB44_29 Depth=1
	jmp	.LBB44_31
.LBB44_31:                              #   in Loop: Header=BB44_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_29
.LBB44_32:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_34
# %bb.33:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_34:
	jmp	.LBB44_42
.LBB44_35:
	movl	wking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_36:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_39
# %bb.37:                               #   in Loop: Header=BB44_36 Depth=1
	jmp	.LBB44_38
.LBB44_38:                              #   in Loop: Header=BB44_36 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_36
.LBB44_39:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_41
# %bb.40:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_41:
	jmp	.LBB44_42
.LBB44_42:
	jmp	.LBB44_43
.LBB44_43:
	jmp	.LBB44_44
.LBB44_44:
	jmp	.LBB44_165
.LBB44_45:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB44_62
# %bb.46:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_54
# %bb.47:
	movl	wking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_48:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_51
# %bb.49:                               #   in Loop: Header=BB44_48 Depth=1
	jmp	.LBB44_50
.LBB44_50:                              #   in Loop: Header=BB44_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_48
.LBB44_51:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_53
# %bb.52:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_53:
	jmp	.LBB44_61
.LBB44_54:
	movl	wking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_55:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_58
# %bb.56:                               #   in Loop: Header=BB44_55 Depth=1
	jmp	.LBB44_57
.LBB44_57:                              #   in Loop: Header=BB44_55 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_55
.LBB44_58:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_60
# %bb.59:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_60:
	jmp	.LBB44_61
.LBB44_61:
	jmp	.LBB44_80
.LBB44_62:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB44_79
# %bb.63:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_71
# %bb.64:
	movl	wking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_65:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_68
# %bb.66:                               #   in Loop: Header=BB44_65 Depth=1
	jmp	.LBB44_67
.LBB44_67:                              #   in Loop: Header=BB44_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_65
.LBB44_68:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_70
# %bb.69:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_70:
	jmp	.LBB44_78
.LBB44_71:
	movl	wking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_72:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_75
# %bb.73:                               #   in Loop: Header=BB44_72 Depth=1
	jmp	.LBB44_74
.LBB44_74:                              #   in Loop: Header=BB44_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_72
.LBB44_75:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_77
# %bb.76:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_77:
	jmp	.LBB44_78
.LBB44_78:
	jmp	.LBB44_79
.LBB44_79:
	jmp	.LBB44_80
.LBB44_80:
	jmp	.LBB44_165
.LBB44_81:
	movl	$0, -4(%rbp)
.LBB44_82:                              # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB44_87
# %bb.83:                               #   in Loop: Header=BB44_82 Depth=1
	movl	wking_loc, %eax
	movslq	-4(%rbp), %rcx
	addl	f_in_check.knight_o(,%rcx,4), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_85
# %bb.84:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_85:                              #   in Loop: Header=BB44_82 Depth=1
	jmp	.LBB44_86
.LBB44_86:                              #   in Loop: Header=BB44_82 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_82
.LBB44_87:
	jmp	.LBB44_165
.LBB44_88:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB44_105
# %bb.89:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_97
# %bb.90:
	movl	wking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_91:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_94
# %bb.92:                               #   in Loop: Header=BB44_91 Depth=1
	jmp	.LBB44_93
.LBB44_93:                              #   in Loop: Header=BB44_91 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_91
.LBB44_94:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_96
# %bb.95:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_96:
	jmp	.LBB44_104
.LBB44_97:
	movl	wking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_98:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_101
# %bb.99:                               #   in Loop: Header=BB44_98 Depth=1
	jmp	.LBB44_100
.LBB44_100:                             #   in Loop: Header=BB44_98 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_98
.LBB44_101:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_103
# %bb.102:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_103:
	jmp	.LBB44_104
.LBB44_104:
	jmp	.LBB44_159
.LBB44_105:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB44_122
# %bb.106:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_114
# %bb.107:
	movl	wking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_108:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_111
# %bb.109:                              #   in Loop: Header=BB44_108 Depth=1
	jmp	.LBB44_110
.LBB44_110:                             #   in Loop: Header=BB44_108 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_108
.LBB44_111:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_113
# %bb.112:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_113:
	jmp	.LBB44_121
.LBB44_114:
	movl	wking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_115:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_118
# %bb.116:                              #   in Loop: Header=BB44_115 Depth=1
	jmp	.LBB44_117
.LBB44_117:                             #   in Loop: Header=BB44_115 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_115
.LBB44_118:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_120
# %bb.119:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_120:
	jmp	.LBB44_121
.LBB44_121:
	jmp	.LBB44_158
.LBB44_122:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB44_139
# %bb.123:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_131
# %bb.124:
	movl	wking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_125:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_128
# %bb.126:                              #   in Loop: Header=BB44_125 Depth=1
	jmp	.LBB44_127
.LBB44_127:                             #   in Loop: Header=BB44_125 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_125
.LBB44_128:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_130
# %bb.129:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_130:
	jmp	.LBB44_138
.LBB44_131:
	movl	wking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_132:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_135
# %bb.133:                              #   in Loop: Header=BB44_132 Depth=1
	jmp	.LBB44_134
.LBB44_134:                             #   in Loop: Header=BB44_132 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_132
.LBB44_135:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_137
# %bb.136:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_137:
	jmp	.LBB44_138
.LBB44_138:
	jmp	.LBB44_157
.LBB44_139:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB44_156
# %bb.140:
	movl	wking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_148
# %bb.141:
	movl	wking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_142:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_145
# %bb.143:                              #   in Loop: Header=BB44_142 Depth=1
	jmp	.LBB44_144
.LBB44_144:                             #   in Loop: Header=BB44_142 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_142
.LBB44_145:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_147
# %bb.146:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_147:
	jmp	.LBB44_155
.LBB44_148:
	movl	wking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_149:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_152
# %bb.150:                              #   in Loop: Header=BB44_149 Depth=1
	jmp	.LBB44_151
.LBB44_151:                             #   in Loop: Header=BB44_149 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_149
.LBB44_152:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_154
# %bb.153:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_154:
	jmp	.LBB44_155
.LBB44_155:
	jmp	.LBB44_156
.LBB44_156:
	jmp	.LBB44_157
.LBB44_157:
	jmp	.LBB44_158
.LBB44_158:
	jmp	.LBB44_159
.LBB44_159:
	jmp	.LBB44_165
.LBB44_160:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 16(%rax)
	je	.LBB44_164
# %bb.161:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB44_163
# %bb.162:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_163:
	movl	$0, -12(%rbp)
	jmp	.LBB44_491
.LBB44_164:
	jmp	.LBB44_165
.LBB44_165:
	cmpl	$0, -16(%rbp)
	jne	.LBB44_167
# %bb.166:
	movl	$0, -12(%rbp)
	jmp	.LBB44_491
.LBB44_167:
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB44_186
# %bb.168:
	movl	wking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_177
# %bb.169:
	movl	wking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_170:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_173
# %bb.171:                              #   in Loop: Header=BB44_170 Depth=1
	jmp	.LBB44_172
.LBB44_172:                             #   in Loop: Header=BB44_170 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_170
.LBB44_173:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB44_175
# %bb.174:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_176
.LBB44_175:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_176:
	jmp	.LBB44_185
.LBB44_177:
	movl	wking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_178:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_181
# %bb.179:                              #   in Loop: Header=BB44_178 Depth=1
	jmp	.LBB44_180
.LBB44_180:                             #   in Loop: Header=BB44_178 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_178
.LBB44_181:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB44_183
# %bb.182:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_184
.LBB44_183:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_184:
	jmp	.LBB44_185
.LBB44_185:
	jmp	.LBB44_246
.LBB44_186:
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB44_205
# %bb.187:
	movl	wking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_196
# %bb.188:
	movl	wking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_189:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_192
# %bb.190:                              #   in Loop: Header=BB44_189 Depth=1
	jmp	.LBB44_191
.LBB44_191:                             #   in Loop: Header=BB44_189 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_189
.LBB44_192:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB44_194
# %bb.193:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_195
.LBB44_194:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_195:
	jmp	.LBB44_204
.LBB44_196:
	movl	wking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_197:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_200
# %bb.198:                              #   in Loop: Header=BB44_197 Depth=1
	jmp	.LBB44_199
.LBB44_199:                             #   in Loop: Header=BB44_197 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_197
.LBB44_200:
	movslq	-4(%rbp), %rax
	cmpl	$8, board(,%rax,4)
	je	.LBB44_202
# %bb.201:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_203
.LBB44_202:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_203:
	jmp	.LBB44_204
.LBB44_204:
	jmp	.LBB44_245
.LBB44_205:
	movslq	-16(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB44_224
# %bb.206:
	movl	wking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_215
# %bb.207:
	movl	wking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_208:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_211
# %bb.209:                              #   in Loop: Header=BB44_208 Depth=1
	jmp	.LBB44_210
.LBB44_210:                             #   in Loop: Header=BB44_208 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_208
.LBB44_211:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB44_213
# %bb.212:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_214
.LBB44_213:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_214:
	jmp	.LBB44_223
.LBB44_215:
	movl	wking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_216:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_219
# %bb.217:                              #   in Loop: Header=BB44_216 Depth=1
	jmp	.LBB44_218
.LBB44_218:                             #   in Loop: Header=BB44_216 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_216
.LBB44_219:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB44_221
# %bb.220:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_222
.LBB44_221:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_222:
	jmp	.LBB44_223
.LBB44_223:
	jmp	.LBB44_244
.LBB44_224:
	movslq	-16(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	wking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB44_243
# %bb.225:
	movl	wking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_234
# %bb.226:
	movl	wking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_227:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_230
# %bb.228:                              #   in Loop: Header=BB44_227 Depth=1
	jmp	.LBB44_229
.LBB44_229:                             #   in Loop: Header=BB44_227 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_227
.LBB44_230:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB44_232
# %bb.231:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_233
.LBB44_232:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_233:
	jmp	.LBB44_242
.LBB44_234:
	movl	wking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_235:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_238
# %bb.236:                              #   in Loop: Header=BB44_235 Depth=1
	jmp	.LBB44_237
.LBB44_237:                             #   in Loop: Header=BB44_235 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_235
.LBB44_238:
	movslq	-4(%rbp), %rax
	cmpl	$12, board(,%rax,4)
	je	.LBB44_240
# %bb.239:
	movslq	-4(%rbp), %rax
	cmpl	$10, board(,%rax,4)
	jne	.LBB44_241
.LBB44_240:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_241:
	jmp	.LBB44_242
.LBB44_242:
	jmp	.LBB44_243
.LBB44_243:
	jmp	.LBB44_244
.LBB44_244:
	jmp	.LBB44_245
.LBB44_245:
	jmp	.LBB44_246
.LBB44_246:
	movl	$0, -12(%rbp)
	jmp	.LBB44_491
.LBB44_247:
	movslq	-8(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$10, %ecx
	ja	.LBB44_409
# %bb.248:
	movq	.LJTI44_0(,%rax,8), %rax
	jmpq	*%rax
.LBB44_249:
	movl	-8(%rbp), %eax
	addl	$11, %eax
	cltq
	cmpl	$6, board(,%rax,4)
	je	.LBB44_251
# %bb.250:
	movl	-8(%rbp), %eax
	addl	$13, %eax
	cltq
	cmpl	$6, board(,%rax,4)
	jne	.LBB44_252
.LBB44_251:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_252:
	jmp	.LBB44_409
.LBB44_253:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB44_270
# %bb.254:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_262
# %bb.255:
	movl	bking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_256:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_259
# %bb.257:                              #   in Loop: Header=BB44_256 Depth=1
	jmp	.LBB44_258
.LBB44_258:                             #   in Loop: Header=BB44_256 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_256
.LBB44_259:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_261
# %bb.260:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_261:
	jmp	.LBB44_269
.LBB44_262:
	movl	bking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_263:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_266
# %bb.264:                              #   in Loop: Header=BB44_263 Depth=1
	jmp	.LBB44_265
.LBB44_265:                             #   in Loop: Header=BB44_263 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_263
.LBB44_266:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_268
# %bb.267:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_268:
	jmp	.LBB44_269
.LBB44_269:
	jmp	.LBB44_288
.LBB44_270:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB44_287
# %bb.271:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_279
# %bb.272:
	movl	bking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_273:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_276
# %bb.274:                              #   in Loop: Header=BB44_273 Depth=1
	jmp	.LBB44_275
.LBB44_275:                             #   in Loop: Header=BB44_273 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_273
.LBB44_276:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_278
# %bb.277:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_278:
	jmp	.LBB44_286
.LBB44_279:
	movl	bking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_280:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_283
# %bb.281:                              #   in Loop: Header=BB44_280 Depth=1
	jmp	.LBB44_282
.LBB44_282:                             #   in Loop: Header=BB44_280 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_280
.LBB44_283:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_285
# %bb.284:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_285:
	jmp	.LBB44_286
.LBB44_286:
	jmp	.LBB44_287
.LBB44_287:
	jmp	.LBB44_288
.LBB44_288:
	jmp	.LBB44_409
.LBB44_289:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB44_306
# %bb.290:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_298
# %bb.291:
	movl	bking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_292:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_295
# %bb.293:                              #   in Loop: Header=BB44_292 Depth=1
	jmp	.LBB44_294
.LBB44_294:                             #   in Loop: Header=BB44_292 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_292
.LBB44_295:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_297
# %bb.296:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_297:
	jmp	.LBB44_305
.LBB44_298:
	movl	bking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_299:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_302
# %bb.300:                              #   in Loop: Header=BB44_299 Depth=1
	jmp	.LBB44_301
.LBB44_301:                             #   in Loop: Header=BB44_299 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_299
.LBB44_302:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_304
# %bb.303:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_304:
	jmp	.LBB44_305
.LBB44_305:
	jmp	.LBB44_324
.LBB44_306:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB44_323
# %bb.307:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_315
# %bb.308:
	movl	bking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_309:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_312
# %bb.310:                              #   in Loop: Header=BB44_309 Depth=1
	jmp	.LBB44_311
.LBB44_311:                             #   in Loop: Header=BB44_309 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_309
.LBB44_312:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_314
# %bb.313:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_314:
	jmp	.LBB44_322
.LBB44_315:
	movl	bking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_316:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_319
# %bb.317:                              #   in Loop: Header=BB44_316 Depth=1
	jmp	.LBB44_318
.LBB44_318:                             #   in Loop: Header=BB44_316 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_316
.LBB44_319:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_321
# %bb.320:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_321:
	jmp	.LBB44_322
.LBB44_322:
	jmp	.LBB44_323
.LBB44_323:
	jmp	.LBB44_324
.LBB44_324:
	jmp	.LBB44_409
.LBB44_325:
	movl	$0, -4(%rbp)
.LBB44_326:                             # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB44_331
# %bb.327:                              #   in Loop: Header=BB44_326 Depth=1
	movl	bking_loc, %eax
	movslq	-4(%rbp), %rcx
	addl	f_in_check.knight_o(,%rcx,4), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_329
# %bb.328:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_329:                             #   in Loop: Header=BB44_326 Depth=1
	jmp	.LBB44_330
.LBB44_330:                             #   in Loop: Header=BB44_326 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_326
.LBB44_331:
	jmp	.LBB44_409
.LBB44_332:
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB44_349
# %bb.333:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_341
# %bb.334:
	movl	bking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_335:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_338
# %bb.336:                              #   in Loop: Header=BB44_335 Depth=1
	jmp	.LBB44_337
.LBB44_337:                             #   in Loop: Header=BB44_335 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_335
.LBB44_338:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_340
# %bb.339:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_340:
	jmp	.LBB44_348
.LBB44_341:
	movl	bking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_342:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_345
# %bb.343:                              #   in Loop: Header=BB44_342 Depth=1
	jmp	.LBB44_344
.LBB44_344:                             #   in Loop: Header=BB44_342 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_342
.LBB44_345:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_347
# %bb.346:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_347:
	jmp	.LBB44_348
.LBB44_348:
	jmp	.LBB44_403
.LBB44_349:
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB44_366
# %bb.350:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_358
# %bb.351:
	movl	bking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_352:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_355
# %bb.353:                              #   in Loop: Header=BB44_352 Depth=1
	jmp	.LBB44_354
.LBB44_354:                             #   in Loop: Header=BB44_352 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_352
.LBB44_355:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_357
# %bb.356:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_357:
	jmp	.LBB44_365
.LBB44_358:
	movl	bking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_359:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_362
# %bb.360:                              #   in Loop: Header=BB44_359 Depth=1
	jmp	.LBB44_361
.LBB44_361:                             #   in Loop: Header=BB44_359 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_359
.LBB44_362:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_364
# %bb.363:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_364:
	jmp	.LBB44_365
.LBB44_365:
	jmp	.LBB44_402
.LBB44_366:
	movslq	-8(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB44_383
# %bb.367:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_375
# %bb.368:
	movl	bking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_369:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_372
# %bb.370:                              #   in Loop: Header=BB44_369 Depth=1
	jmp	.LBB44_371
.LBB44_371:                             #   in Loop: Header=BB44_369 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_369
.LBB44_372:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_374
# %bb.373:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_374:
	jmp	.LBB44_382
.LBB44_375:
	movl	bking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_376:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_379
# %bb.377:                              #   in Loop: Header=BB44_376 Depth=1
	jmp	.LBB44_378
.LBB44_378:                             #   in Loop: Header=BB44_376 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_376
.LBB44_379:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_381
# %bb.380:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_381:
	jmp	.LBB44_382
.LBB44_382:
	jmp	.LBB44_401
.LBB44_383:
	movslq	-8(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB44_400
# %bb.384:
	movl	bking_loc, %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB44_392
# %bb.385:
	movl	bking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_386:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_389
# %bb.387:                              #   in Loop: Header=BB44_386 Depth=1
	jmp	.LBB44_388
.LBB44_388:                             #   in Loop: Header=BB44_386 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_386
.LBB44_389:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_391
# %bb.390:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_391:
	jmp	.LBB44_399
.LBB44_392:
	movl	bking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_393:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_396
# %bb.394:                              #   in Loop: Header=BB44_393 Depth=1
	jmp	.LBB44_395
.LBB44_395:                             #   in Loop: Header=BB44_393 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_393
.LBB44_396:
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB44_398
# %bb.397:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_398:
	jmp	.LBB44_399
.LBB44_399:
	jmp	.LBB44_400
.LBB44_400:
	jmp	.LBB44_401
.LBB44_401:
	jmp	.LBB44_402
.LBB44_402:
	jmp	.LBB44_403
.LBB44_403:
	jmp	.LBB44_409
.LBB44_404:
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 16(%rax)
	je	.LBB44_408
# %bb.405:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB44_407
# %bb.406:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_407:
	movl	$0, -12(%rbp)
	jmp	.LBB44_491
.LBB44_408:
	jmp	.LBB44_409
.LBB44_409:
	cmpl	$0, -16(%rbp)
	jne	.LBB44_411
# %bb.410:
	movl	$0, -12(%rbp)
	jmp	.LBB44_491
.LBB44_411:
	movslq	-16(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xrank(,%rcx,4), %eax
	jne	.LBB44_430
# %bb.412:
	movl	bking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_421
# %bb.413:
	movl	bking_loc, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_414:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_417
# %bb.415:                              #   in Loop: Header=BB44_414 Depth=1
	jmp	.LBB44_416
.LBB44_416:                             #   in Loop: Header=BB44_414 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_414
.LBB44_417:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB44_419
# %bb.418:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_420
.LBB44_419:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_420:
	jmp	.LBB44_429
.LBB44_421:
	movl	bking_loc, %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB44_422:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_425
# %bb.423:                              #   in Loop: Header=BB44_422 Depth=1
	jmp	.LBB44_424
.LBB44_424:                             #   in Loop: Header=BB44_422 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_422
.LBB44_425:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB44_427
# %bb.426:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_428
.LBB44_427:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_428:
	jmp	.LBB44_429
.LBB44_429:
	jmp	.LBB44_490
.LBB44_430:
	movslq	-16(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xfile(,%rcx,4), %eax
	jne	.LBB44_449
# %bb.431:
	movl	bking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_440
# %bb.432:
	movl	bking_loc, %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_433:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_436
# %bb.434:                              #   in Loop: Header=BB44_433 Depth=1
	jmp	.LBB44_435
.LBB44_435:                             #   in Loop: Header=BB44_433 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_433
.LBB44_436:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB44_438
# %bb.437:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_439
.LBB44_438:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_439:
	jmp	.LBB44_448
.LBB44_440:
	movl	bking_loc, %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB44_441:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_444
# %bb.442:                              #   in Loop: Header=BB44_441 Depth=1
	jmp	.LBB44_443
.LBB44_443:                             #   in Loop: Header=BB44_441 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_441
.LBB44_444:
	movslq	-4(%rbp), %rax
	cmpl	$7, board(,%rax,4)
	je	.LBB44_446
# %bb.445:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_447
.LBB44_446:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_447:
	jmp	.LBB44_448
.LBB44_448:
	jmp	.LBB44_489
.LBB44_449:
	movslq	-16(%rbp), %rax
	movl	Xdiagl(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagl(,%rcx,4), %eax
	jne	.LBB44_468
# %bb.450:
	movl	bking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_459
# %bb.451:
	movl	bking_loc, %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_452:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_455
# %bb.453:                              #   in Loop: Header=BB44_452 Depth=1
	jmp	.LBB44_454
.LBB44_454:                             #   in Loop: Header=BB44_452 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_452
.LBB44_455:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB44_457
# %bb.456:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_458
.LBB44_457:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_458:
	jmp	.LBB44_467
.LBB44_459:
	movl	bking_loc, %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB44_460:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_463
# %bb.461:                              #   in Loop: Header=BB44_460 Depth=1
	jmp	.LBB44_462
.LBB44_462:                             #   in Loop: Header=BB44_460 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_460
.LBB44_463:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB44_465
# %bb.464:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_466
.LBB44_465:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_466:
	jmp	.LBB44_467
.LBB44_467:
	jmp	.LBB44_488
.LBB44_468:
	movslq	-16(%rbp), %rax
	movl	Xdiagr(,%rax,4), %eax
	movslq	bking_loc, %rcx
	cmpl	Xdiagr(,%rcx,4), %eax
	jne	.LBB44_487
# %bb.469:
	movl	bking_loc, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB44_478
# %bb.470:
	movl	bking_loc, %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_471:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_474
# %bb.472:                              #   in Loop: Header=BB44_471 Depth=1
	jmp	.LBB44_473
.LBB44_473:                             #   in Loop: Header=BB44_471 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_471
.LBB44_474:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB44_476
# %bb.475:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_477
.LBB44_476:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_477:
	jmp	.LBB44_486
.LBB44_478:
	movl	bking_loc, %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB44_479:                             # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB44_482
# %bb.480:                              #   in Loop: Header=BB44_479 Depth=1
	jmp	.LBB44_481
.LBB44_481:                             #   in Loop: Header=BB44_479 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_479
.LBB44_482:
	movslq	-4(%rbp), %rax
	cmpl	$11, board(,%rax,4)
	je	.LBB44_484
# %bb.483:
	movslq	-4(%rbp), %rax
	cmpl	$9, board(,%rax,4)
	jne	.LBB44_485
.LBB44_484:
	movl	$1, -12(%rbp)
	jmp	.LBB44_491
.LBB44_485:
	jmp	.LBB44_486
.LBB44_486:
	jmp	.LBB44_487
.LBB44_487:
	jmp	.LBB44_488
.LBB44_488:
	jmp	.LBB44_489
.LBB44_489:
	jmp	.LBB44_490
.LBB44_490:
	movl	$0, -12(%rbp)
.LBB44_491:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end44:
	.size	f_in_check, .Lfunc_end44-f_in_check
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI44_0:
	.quad	.LBB44_249
	.quad	.LBB44_409
	.quad	.LBB44_325
	.quad	.LBB44_409
	.quad	.LBB44_404
	.quad	.LBB44_409
	.quad	.LBB44_289
	.quad	.LBB44_409
	.quad	.LBB44_332
	.quad	.LBB44_409
	.quad	.LBB44_253
.LJTI44_1:
	.quad	.LBB44_5
	.quad	.LBB44_165
	.quad	.LBB44_81
	.quad	.LBB44_165
	.quad	.LBB44_160
	.quad	.LBB44_165
	.quad	.LBB44_45
	.quad	.LBB44_165
	.quad	.LBB44_88
	.quad	.LBB44_165
	.quad	.LBB44_9
                                        # -- End function
	.text
	.globl	extended_in_check       # -- Begin function extended_in_check
	.p2align	4, 0x90
	.type	extended_in_check,@function
extended_in_check:                      # @extended_in_check
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpl	$3, Variant
	jne	.LBB45_2
# %bb.1:
	movl	$0, -8(%rbp)
	jmp	.LBB45_80
.LBB45_2:
	cmpl	$1, white_to_move
	jne	.LBB45_41
# %bb.3:
	movl	wking_loc, %eax
	subl	$12, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$8, -4(%rbp)
	je	.LBB45_5
# %bb.4:
	cmpl	$10, -4(%rbp)
	jne	.LBB45_6
.LBB45_5:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_6:
	movl	wking_loc, %eax
	subl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$8, -4(%rbp)
	je	.LBB45_8
# %bb.7:
	cmpl	$10, -4(%rbp)
	jne	.LBB45_9
.LBB45_8:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_9:
	movl	wking_loc, %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$8, -4(%rbp)
	je	.LBB45_11
# %bb.10:
	cmpl	$10, -4(%rbp)
	jne	.LBB45_12
.LBB45_11:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_12:
	movl	wking_loc, %eax
	addl	$12, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$8, -4(%rbp)
	je	.LBB45_14
# %bb.13:
	cmpl	$10, -4(%rbp)
	jne	.LBB45_15
.LBB45_14:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_15:
	movl	wking_loc, %eax
	addl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$12, -4(%rbp)
	je	.LBB45_18
# %bb.16:
	cmpl	$10, -4(%rbp)
	je	.LBB45_18
# %bb.17:
	cmpl	$2, -4(%rbp)
	jne	.LBB45_19
.LBB45_18:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_19:
	movl	wking_loc, %eax
	addl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$12, -4(%rbp)
	je	.LBB45_22
# %bb.20:
	cmpl	$10, -4(%rbp)
	je	.LBB45_22
# %bb.21:
	cmpl	$2, -4(%rbp)
	jne	.LBB45_23
.LBB45_22:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_23:
	movl	wking_loc, %eax
	subl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$12, -4(%rbp)
	je	.LBB45_25
# %bb.24:
	cmpl	$10, -4(%rbp)
	jne	.LBB45_26
.LBB45_25:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_26:
	movl	wking_loc, %eax
	subl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$12, -4(%rbp)
	je	.LBB45_28
# %bb.27:
	cmpl	$10, -4(%rbp)
	jne	.LBB45_29
.LBB45_28:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_29:
	movl	$0, -4(%rbp)
.LBB45_30:                              # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB45_35
# %bb.31:                               #   in Loop: Header=BB45_30 Depth=1
	movl	wking_loc, %eax
	movslq	-4(%rbp), %rcx
	addl	extended_in_check.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$4, board(,%rax,4)
	jne	.LBB45_33
# %bb.32:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_33:                              #   in Loop: Header=BB45_30 Depth=1
	jmp	.LBB45_34
.LBB45_34:                              #   in Loop: Header=BB45_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_30
.LBB45_35:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB45_40
# %bb.36:
	cmpl	$2, Variant
	je	.LBB45_38
# %bb.37:
	cmpl	$4, Variant
	jne	.LBB45_39
.LBB45_38:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_39:
	movl	$1, -8(%rbp)
	jmp	.LBB45_80
.LBB45_40:
	jmp	.LBB45_79
.LBB45_41:
	movl	bking_loc, %eax
	subl	$12, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$7, -4(%rbp)
	je	.LBB45_43
# %bb.42:
	cmpl	$9, -4(%rbp)
	jne	.LBB45_44
.LBB45_43:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_44:
	movl	bking_loc, %eax
	subl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$7, -4(%rbp)
	je	.LBB45_46
# %bb.45:
	cmpl	$9, -4(%rbp)
	jne	.LBB45_47
.LBB45_46:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_47:
	movl	bking_loc, %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$7, -4(%rbp)
	je	.LBB45_49
# %bb.48:
	cmpl	$9, -4(%rbp)
	jne	.LBB45_50
.LBB45_49:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_50:
	movl	bking_loc, %eax
	addl	$12, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$7, -4(%rbp)
	je	.LBB45_52
# %bb.51:
	cmpl	$9, -4(%rbp)
	jne	.LBB45_53
.LBB45_52:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_53:
	movl	bking_loc, %eax
	subl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$11, -4(%rbp)
	je	.LBB45_56
# %bb.54:
	cmpl	$9, -4(%rbp)
	je	.LBB45_56
# %bb.55:
	cmpl	$1, -4(%rbp)
	jne	.LBB45_57
.LBB45_56:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_57:
	movl	bking_loc, %eax
	subl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$11, -4(%rbp)
	je	.LBB45_60
# %bb.58:
	cmpl	$9, -4(%rbp)
	je	.LBB45_60
# %bb.59:
	cmpl	$1, -4(%rbp)
	jne	.LBB45_61
.LBB45_60:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_61:
	movl	bking_loc, %eax
	addl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$11, -4(%rbp)
	je	.LBB45_63
# %bb.62:
	cmpl	$9, -4(%rbp)
	jne	.LBB45_64
.LBB45_63:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_64:
	movl	bking_loc, %eax
	addl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$11, -4(%rbp)
	je	.LBB45_66
# %bb.65:
	cmpl	$9, -4(%rbp)
	jne	.LBB45_67
.LBB45_66:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_67:
	movl	$0, -4(%rbp)
.LBB45_68:                              # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB45_73
# %bb.69:                               #   in Loop: Header=BB45_68 Depth=1
	movl	bking_loc, %eax
	movslq	-4(%rbp), %rcx
	addl	extended_in_check.knight_o(,%rcx,4), %eax
	cltq
	cmpl	$3, board(,%rax,4)
	jne	.LBB45_71
# %bb.70:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_71:                              #   in Loop: Header=BB45_68 Depth=1
	jmp	.LBB45_72
.LBB45_72:                              #   in Loop: Header=BB45_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_68
.LBB45_73:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB45_78
# %bb.74:
	cmpl	$2, Variant
	je	.LBB45_76
# %bb.75:
	cmpl	$4, Variant
	jne	.LBB45_77
.LBB45_76:
	movl	$2, -8(%rbp)
	jmp	.LBB45_80
.LBB45_77:
	movl	$1, -8(%rbp)
	jmp	.LBB45_80
.LBB45_78:
	jmp	.LBB45_79
.LBB45_79:
	movl	$0, -8(%rbp)
.LBB45_80:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end45:
	.size	extended_in_check, .Lfunc_end45-extended_in_check
	.cfi_endproc
                                        # -- End function
	.globl	make                    # -- Begin function make
	.p2align	4, 0x90
	.type	make,@function
make:                                   # @make
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$path_x, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	20(%rcx), %ecx
	movl	%ecx, -28(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movl	%ecx, -8(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movl	%ecx, -4(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	8(%rcx), %ecx
	movl	%ecx, -44(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	16(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movl	ep_square, %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	$0, ep_square
	movl	fifty, %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movslq	-8(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	je	.LBB46_3
# %bb.1:
	movslq	-8(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	je	.LBB46_3
# %bb.2:
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB46_4
.LBB46_3:
	movl	$0, fifty
	jmp	.LBB46_5
.LBB46_4:
	movl	fifty, %eax
	addl	$1, %eax
	movl	%eax, fifty
.LBB46_5:
	cmpl	$0, -8(%rbp)
	jne	.LBB46_11
# %bb.6:
	movl	piece_count, %eax
	addl	$1, %eax
	movl	%eax, piece_count
	movl	$1, -16(%rbp)
.LBB46_7:                               # =>This Inner Loop Header: Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, pieces(,%rax,4)
	je	.LBB46_10
# %bb.8:                                #   in Loop: Header=BB46_7 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               #   in Loop: Header=BB46_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_7
.LBB46_10:
	movl	$1, %esi
	xorl	%eax, %eax
	movabsq	$path_x, %rcx
	movl	-4(%rbp), %edx
	movslq	-16(%rbp), %rdi
	movl	%edx, pieces(,%rdi,4)
	movslq	-16(%rbp), %rdx
	movl	is_promoted(,%rdx,4), %edx
	movslq	ply, %rdi
	shlq	$4, %rdi
	addq	%rdi, %rcx
	movl	%edx, 4(%rcx)
	movslq	-16(%rbp), %rcx
	movl	$0, is_promoted(,%rcx,4)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, squares(,%rdx,4)
	movl	-12(%rbp), %edi
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %esi
	callq	DropremoveHolding
	movabsq	$zobrist, %rax
	movslq	-12(%rbp), %rcx
	movl	material(,%rcx,4), %ecx
	addl	Material, %ecx
	movl	%ecx, Material
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_11:
	movabsq	$path_x, %rax
	movslq	-4(%rbp), %rcx
	movslq	squares(,%rcx,4), %rcx
	movl	is_promoted(,%rcx,4), %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movslq	-4(%rbp), %rcx
	movl	squares(,%rcx,4), %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, (%rax)
	movslq	-4(%rbp), %rax
	movslq	squares(,%rax,4), %rax
	movl	$0, pieces(,%rax,4)
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movslq	squares(,%rcx,4), %rcx
	movl	%eax, pieces(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	squares(,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, squares(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	$0, squares(,%rax,4)
	cmpl	$0, -28(%rbp)
	jne	.LBB46_22
# %bb.12:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	subl	$13, %eax
	jne	.LBB46_14
	jmp	.LBB46_13
.LBB46_13:
	jmp	.LBB46_21
.LBB46_14:
	cmpl	$1, Variant
	je	.LBB46_16
# %bb.15:
	cmpl	$0, Variant
	jne	.LBB46_20
.LBB46_16:
	movabsq	$path_x, %rax
	movslq	ply, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	cmpl	$0, 4(%rax)
	je	.LBB46_18
# %bb.17:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %edi
	callq	SwitchPromoted
	movl	$1, %esi
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %esi
	movl	%eax, %edi
	callq	addHolding
	jmp	.LBB46_19
.LBB46_18:
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %edi
	callq	SwitchColor
	movl	$1, %esi
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %esi
	movl	%eax, %edi
	callq	addHolding
.LBB46_19:
	jmp	.LBB46_20
.LBB46_20:
	movabsq	$zobrist, %rax
	movslq	-4(%rbp), %rcx
	movslq	board(,%rcx,4), %rcx
	movl	material(,%rcx,4), %ecx
	movl	Material, %edx
	subl	%ecx, %edx
	movl	%edx, Material
	movslq	-4(%rbp), %rcx
	movslq	board(,%rcx,4), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	piece_count, %eax
	addl	$-1, %eax
	movl	%eax, piece_count
.LBB46_21:
	jmp	.LBB46_22
.LBB46_22:
	movslq	-8(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB46_30
# %bb.23:
	cmpl	$0, -12(%rbp)
	je	.LBB46_25
# %bb.24:
	movabsq	$zobrist, %rax
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-8(%rbp), %rcx
	movl	$13, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	-4(%rbp), %rcx
	movslq	squares(,%rcx,4), %rcx
	movl	$1, is_promoted(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	zobrist+576(,%rcx,4), %ecx
	xorl	hash, %ecx
	movl	%ecx, hash
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	material+4, %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	movslq	-12(%rbp), %rax
	movl	material(,%rax,4), %eax
	addl	Material, %eax
	movl	%eax, Material
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_25:
	cmpl	$0, -28(%rbp)
	je	.LBB46_27
# %bb.26:
	movslq	-8(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	material+8, %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	movslq	-4(%rbp), %rax
	movl	$1, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movl	$1, %edi
	xorl	%esi, %esi
	callq	addHolding
	movabsq	$path_x, %rax
	movl	piece_count, %ecx
	addl	$-1, %ecx
	movl	%ecx, piece_count
	movl	-4(%rbp), %ecx
	subl	$12, %ecx
	movslq	%ecx, %rcx
	movl	$13, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	-4(%rbp), %ecx
	subl	$12, %ecx
	movslq	%ecx, %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movl	-4(%rbp), %ecx
	subl	$12, %ecx
	movslq	%ecx, %rcx
	movl	squares(,%rcx,4), %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	movslq	squares(,%rax,4), %rax
	movl	$0, pieces(,%rax,4)
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	movl	$0, squares(,%rax,4)
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_27:
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	$24, %ecx
	cmpl	%ecx, %eax
	jne	.LBB46_29
# %bb.28:
	movl	-8(%rbp), %eax
	addl	$12, %eax
	movl	%eax, ep_square
.LBB46_29:
	movslq	-8(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	$1, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_30:
	movslq	-8(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB46_38
# %bb.31:
	cmpl	$0, -12(%rbp)
	je	.LBB46_33
# %bb.32:
	movabsq	$zobrist, %rax
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-8(%rbp), %rcx
	movl	$13, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	-4(%rbp), %rcx
	movslq	squares(,%rcx,4), %rcx
	movl	$1, is_promoted(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	zobrist+1152(,%rcx,4), %ecx
	xorl	hash, %ecx
	movl	%ecx, hash
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	material+8, %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	movslq	-12(%rbp), %rax
	movl	material(,%rax,4), %eax
	addl	Material, %eax
	movl	%eax, Material
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_33:
	cmpl	$0, -28(%rbp)
	je	.LBB46_35
# %bb.34:
	movslq	-8(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	material+4, %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	movslq	-4(%rbp), %rax
	movl	$2, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movl	$2, %edi
	movl	$1, %esi
	callq	addHolding
	movabsq	$path_x, %rax
	movl	piece_count, %ecx
	addl	$-1, %ecx
	movl	%ecx, piece_count
	movl	-4(%rbp), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movl	$13, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	-4(%rbp), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movl	moved(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movl	-4(%rbp), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movl	squares(,%rcx,4), %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	movslq	squares(,%rax,4), %rax
	movl	$0, pieces(,%rax,4)
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	movl	$0, squares(,%rax,4)
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_35:
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	subl	$24, %ecx
	cmpl	%ecx, %eax
	jne	.LBB46_37
# %bb.36:
	movl	-8(%rbp), %eax
	subl	$12, %eax
	movl	%eax, ep_square
.LBB46_37:
	movslq	-4(%rbp), %rax
	movl	$2, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movslq	-8(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_38:
	movslq	-8(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	je	.LBB46_41
# %bb.39:
	movslq	-8(%rbp), %rax
	cmpl	$6, board(,%rax,4)
	je	.LBB46_41
# %bb.40:
	movabsq	$zobrist, %rax
	movslq	-8(%rbp), %rcx
	movslq	board(,%rcx,4), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	xorl	hash, %ecx
	movl	%ecx, hash
	movslq	-8(%rbp), %rcx
	movslq	board(,%rcx,4), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-8(%rbp), %rax
	movl	board(,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_41:
	movslq	-8(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	jne	.LBB46_48
# %bb.42:
	movl	-4(%rbp), %eax
	movl	%eax, wking_loc
	movslq	-4(%rbp), %rax
	movl	$5, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movslq	-8(%rbp), %rax
	movl	zobrist+2880(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+2880(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	cmpl	$1, -24(%rbp)
	jne	.LBB46_44
# %bb.43:
	movl	$13, board+132
	movl	$7, board+124
	movl	moved+132, %eax
	addl	$1, %eax
	movl	%eax, moved+132
	movl	moved+124, %eax
	addl	$1, %eax
	movl	%eax, moved+124
	movl	$1, white_castled
	movslq	squares+132, %rax
	movl	$31, pieces(,%rax,4)
	movl	squares+132, %eax
	movl	%eax, squares+124
	movl	$0, squares+132
	movl	zobrist+4164, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+4156, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_44:
	cmpl	$2, -24(%rbp)
	jne	.LBB46_46
# %bb.45:
	movl	$13, board+104
	movl	$7, board+116
	movl	moved+104, %eax
	addl	$1, %eax
	movl	%eax, moved+104
	movl	moved+116, %eax
	addl	$1, %eax
	movl	%eax, moved+116
	movl	$2, white_castled
	movslq	squares+104, %rax
	movl	$29, pieces(,%rax,4)
	movl	squares+104, %eax
	movl	%eax, squares+116
	movl	$0, squares+104
	movl	zobrist+4136, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+4148, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_46:
	jmp	.LBB46_47
.LBB46_47:
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_48:
	movl	-4(%rbp), %eax
	movl	%eax, bking_loc
	movslq	-4(%rbp), %rax
	movl	$6, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movslq	-8(%rbp), %rax
	movl	zobrist+3456(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+3456(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	cmpl	$3, -24(%rbp)
	jne	.LBB46_50
# %bb.49:
	movl	$13, board+468
	movl	$8, board+460
	movl	moved+468, %eax
	addl	$1, %eax
	movl	%eax, moved+468
	movl	moved+460, %eax
	addl	$1, %eax
	movl	%eax, moved+460
	movl	$3, black_castled
	movslq	squares+468, %rax
	movl	$115, pieces(,%rax,4)
	movl	squares+468, %eax
	movl	%eax, squares+460
	movl	$0, squares+468
	movl	zobrist+5076, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+5068, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_50:
	cmpl	$4, -24(%rbp)
	jne	.LBB46_52
# %bb.51:
	movl	$13, board+440
	movl	$8, board+452
	movl	moved+440, %eax
	addl	$1, %eax
	movl	%eax, moved+440
	movl	moved+452, %eax
	addl	$1, %eax
	movl	%eax, moved+452
	movl	$4, black_castled
	movslq	squares+440, %rax
	movl	$113, pieces(,%rax,4)
	movl	squares+440, %eax
	movl	%eax, squares+452
	movl	$0, squares+440
	movl	zobrist+5048, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+5060, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	jmp	.LBB46_55
.LBB46_52:
	jmp	.LBB46_53
.LBB46_53:
	jmp	.LBB46_54
.LBB46_54:
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
.LBB46_55:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end46:
	.size	make, .Lfunc_end46-make
	.cfi_endproc
                                        # -- End function
	.globl	unmake                  # -- Begin function unmake
	.p2align	4, 0x90
	.type	unmake,@function
unmake:                                 # @unmake
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$path_x, %rax
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	20(%rcx), %ecx
	movl	%ecx, -28(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movl	%ecx, -8(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movl	%ecx, -4(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	8(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	16(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movl	ply, %ecx
	addl	$-1, %ecx
	movl	%ecx, ply
	movslq	ply, %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	8(%rdx), %ecx
	movl	%ecx, ep_square
	movslq	ply, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movl	%eax, fifty
	cmpl	$0, -8(%rbp)
	jne	.LBB47_2
# %bb.1:
	xorl	%esi, %esi
	movl	$1, %eax
	movabsq	$path_x, %rcx
	movslq	-4(%rbp), %rdx
	movslq	squares(,%rdx,4), %rdx
	movl	$0, pieces(,%rdx,4)
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	-4(%rbp), %rdx
	movslq	squares(,%rdx,4), %rdx
	movl	%ecx, is_promoted(,%rdx,4)
	movslq	-4(%rbp), %rcx
	movl	$0, squares(,%rcx,4)
	movl	piece_count, %ecx
	addl	$-1, %ecx
	movl	%ecx, piece_count
	movl	-16(%rbp), %edi
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %esi
	callq	DropaddHolding
	movabsq	$zobrist, %rax
	movslq	-16(%rbp), %rcx
	movl	material(,%rcx,4), %ecx
	movl	Material, %edx
	subl	%ecx, %edx
	movl	%edx, Material
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-16(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	jmp	.LBB47_44
.LBB47_2:
	movabsq	$path_x, %rax
	movslq	-4(%rbp), %rcx
	movl	squares(,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	movl	%ecx, squares(,%rdx,4)
	movslq	ply, %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, squares(,%rdx,4)
	movl	-4(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movslq	squares(,%rdx,4), %rdx
	movl	%ecx, pieces(,%rdx,4)
	movl	-8(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	movslq	squares(,%rdx,4), %rdx
	movl	%ecx, pieces(,%rdx,4)
	movslq	ply, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movslq	-4(%rbp), %rcx
	movslq	squares(,%rcx,4), %rcx
	movl	%eax, is_promoted(,%rcx,4)
	cmpl	$0, -28(%rbp)
	jne	.LBB47_13
# %bb.3:
	movl	-12(%rbp), %eax
	subl	$13, %eax
	jne	.LBB47_5
	jmp	.LBB47_4
.LBB47_4:
	jmp	.LBB47_12
.LBB47_5:
	cmpl	$1, Variant
	je	.LBB47_7
# %bb.6:
	cmpl	$0, Variant
	jne	.LBB47_11
.LBB47_7:
	movslq	-4(%rbp), %rax
	movslq	squares(,%rax,4), %rax
	cmpl	$0, is_promoted(,%rax,4)
	je	.LBB47_9
# %bb.8:
	movl	-12(%rbp), %edi
	callq	SwitchPromoted
	xorl	%esi, %esi
	movl	$1, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %esi
	movl	%eax, %edi
	callq	removeHolding
	jmp	.LBB47_10
.LBB47_9:
	movl	-12(%rbp), %edi
	callq	SwitchColor
	xorl	%esi, %esi
	movl	$1, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %esi
	movl	%eax, %edi
	callq	removeHolding
.LBB47_10:
	jmp	.LBB47_11
.LBB47_11:
	movabsq	$zobrist, %rax
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-12(%rbp), %rax
	movl	material(,%rax,4), %eax
	addl	Material, %eax
	movl	%eax, Material
	movl	piece_count, %eax
	addl	$1, %eax
	movl	%eax, piece_count
.LBB47_12:
	jmp	.LBB47_13
.LBB47_13:
	movslq	-4(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB47_17
# %bb.14:
	cmpl	$0, -28(%rbp)
	je	.LBB47_16
# %bb.15:
	movslq	-4(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-8(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	-4(%rbp), %eax
	subl	$12, %eax
	cltq
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$1, board(,%rax,4)
	movl	material+8, %eax
	addl	Material, %eax
	movl	%eax, Material
	movl	$1, %edi
	xorl	%esi, %esi
	callq	removeHolding
	movabsq	$path_x, %rax
	movl	piece_count, %ecx
	addl	$1, %ecx
	movl	%ecx, piece_count
	movl	-4(%rbp), %ecx
	subl	$12, %ecx
	movslq	%ecx, %rcx
	movl	$2, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	-4(%rbp), %ecx
	subl	$12, %ecx
	movslq	%ecx, %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	ply, %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movl	-4(%rbp), %edx
	subl	$12, %edx
	movslq	%edx, %rdx
	movl	%ecx, squares(,%rdx,4)
	movl	-4(%rbp), %ecx
	subl	$12, %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	(%rax), %rax
	movl	%ecx, pieces(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	$0, squares(,%rax,4)
	jmp	.LBB47_44
.LBB47_16:
	movslq	-8(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	$1, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	jmp	.LBB47_44
.LBB47_17:
	movslq	-4(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB47_21
# %bb.18:
	cmpl	$0, -28(%rbp)
	je	.LBB47_20
# %bb.19:
	movslq	-4(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-8(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	-4(%rbp), %eax
	addl	$12, %eax
	cltq
	movl	zobrist+576(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	$13, board(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$2, board(,%rax,4)
	movl	material+4, %eax
	addl	Material, %eax
	movl	%eax, Material
	movl	$2, %edi
	movl	$1, %esi
	callq	removeHolding
	movabsq	$path_x, %rax
	movl	piece_count, %ecx
	addl	$1, %ecx
	movl	%ecx, piece_count
	movl	-4(%rbp), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movl	$1, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	-4(%rbp), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	ply, %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movl	-4(%rbp), %edx
	addl	$12, %edx
	movslq	%edx, %rdx
	movl	%ecx, squares(,%rdx,4)
	movl	-4(%rbp), %ecx
	addl	$12, %ecx
	movslq	ply, %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	(%rax), %rax
	movl	%ecx, pieces(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	$0, squares(,%rax,4)
	jmp	.LBB47_44
.LBB47_20:
	movslq	-8(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+1152(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	$2, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	jmp	.LBB47_44
.LBB47_21:
	movslq	-4(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	je	.LBB47_25
# %bb.22:
	movslq	-4(%rbp), %rax
	cmpl	$6, board(,%rax,4)
	je	.LBB47_25
# %bb.23:
	cmpl	$0, -16(%rbp)
	jne	.LBB47_25
# %bb.24:
	movabsq	$zobrist, %rax
	movslq	-4(%rbp), %rcx
	movl	board(,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	-8(%rbp), %rcx
	movslq	board(,%rcx,4), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	xorl	hash, %ecx
	movl	%ecx, hash
	movslq	-8(%rbp), %rcx
	movslq	board(,%rcx,4), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	jmp	.LBB47_44
.LBB47_25:
	cmpl	$0, -16(%rbp)
	je	.LBB47_29
# %bb.26:
	movl	$2, %ecx
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB47_28
# %bb.27:
	movabsq	$zobrist, %rax
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-8(%rbp), %rcx
	movl	$1, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	-8(%rbp), %rcx
	movl	zobrist+576(,%rcx,4), %ecx
	xorl	hash, %ecx
	movl	%ecx, hash
	movslq	-16(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-16(%rbp), %rax
	movl	material(,%rax,4), %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	movl	material+4, %eax
	addl	Material, %eax
	movl	%eax, Material
	jmp	.LBB47_44
.LBB47_28:
	movabsq	$zobrist, %rax
	movl	-12(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	movl	%ecx, board(,%rdx,4)
	movslq	-8(%rbp), %rcx
	movl	$2, board(,%rcx,4)
	movslq	-4(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movslq	-8(%rbp), %rcx
	movl	moved(,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, moved(,%rcx,4)
	movl	white_to_move, %ecx
	xorl	$1, %ecx
	movl	%ecx, white_to_move
	movslq	-8(%rbp), %rcx
	movl	zobrist+1152(,%rcx,4), %ecx
	xorl	hash, %ecx
	movl	%ecx, hash
	movslq	-16(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-16(%rbp), %rax
	movl	material(,%rax,4), %eax
	movl	Material, %ecx
	subl	%eax, %ecx
	movl	%ecx, Material
	movl	material+8, %eax
	addl	Material, %eax
	movl	%eax, Material
	jmp	.LBB47_44
.LBB47_29:
	movslq	-4(%rbp), %rax
	cmpl	$5, board(,%rax,4)
	jne	.LBB47_36
# %bb.30:
	movl	-8(%rbp), %eax
	movl	%eax, wking_loc
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	$5, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movslq	-8(%rbp), %rax
	movl	zobrist+2880(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+2880(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	cmpl	$1, -24(%rbp)
	jne	.LBB47_32
# %bb.31:
	movl	$7, board+132
	movl	$13, board+124
	movl	moved+132, %eax
	addl	$-1, %eax
	movl	%eax, moved+132
	movl	moved+124, %eax
	addl	$-1, %eax
	movl	%eax, moved+124
	movl	$0, white_castled
	movl	squares+124, %eax
	movl	%eax, squares+132
	movl	$0, squares+124
	movslq	squares+132, %rax
	movl	$33, pieces(,%rax,4)
	movl	zobrist+4164, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+4156, %eax
	xorl	hash, %eax
	movl	%eax, hash
	jmp	.LBB47_44
.LBB47_32:
	cmpl	$2, -24(%rbp)
	jne	.LBB47_34
# %bb.33:
	movl	$7, board+104
	movl	$13, board+116
	movl	moved+104, %eax
	addl	$-1, %eax
	movl	%eax, moved+104
	movl	moved+116, %eax
	addl	$-1, %eax
	movl	%eax, moved+116
	movl	$0, white_castled
	movl	squares+116, %eax
	movl	%eax, squares+104
	movl	$0, squares+116
	movslq	squares+104, %rax
	movl	$26, pieces(,%rax,4)
	movl	zobrist+4148, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+4136, %eax
	xorl	hash, %eax
	movl	%eax, hash
	jmp	.LBB47_44
.LBB47_34:
	jmp	.LBB47_35
.LBB47_35:
	jmp	.LBB47_44
.LBB47_36:
	movl	-8(%rbp), %eax
	movl	%eax, bking_loc
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movslq	-8(%rbp), %rax
	movl	$6, board(,%rax,4)
	movslq	-4(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movslq	-8(%rbp), %rax
	movl	moved(,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, moved(,%rax,4)
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movslq	-8(%rbp), %rax
	movl	zobrist+3456(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	movslq	-4(%rbp), %rax
	movl	zobrist+3456(,%rax,4), %eax
	xorl	hash, %eax
	movl	%eax, hash
	cmpl	$3, -24(%rbp)
	jne	.LBB47_38
# %bb.37:
	movl	$8, board+468
	movl	$13, board+460
	movl	moved+468, %eax
	addl	$-1, %eax
	movl	%eax, moved+468
	movl	moved+460, %eax
	addl	$-1, %eax
	movl	%eax, moved+460
	movl	$0, black_castled
	movl	squares+460, %eax
	movl	%eax, squares+468
	movl	$0, squares+460
	movslq	squares+468, %rax
	movl	$117, pieces(,%rax,4)
	movl	zobrist+5076, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+5068, %eax
	xorl	hash, %eax
	movl	%eax, hash
	jmp	.LBB47_44
.LBB47_38:
	cmpl	$4, -24(%rbp)
	jne	.LBB47_40
# %bb.39:
	movl	$8, board+440
	movl	$13, board+452
	movl	moved+440, %eax
	addl	$-1, %eax
	movl	%eax, moved+440
	movl	moved+452, %eax
	addl	$-1, %eax
	movl	%eax, moved+452
	movl	$0, black_castled
	movl	squares+452, %eax
	movl	%eax, squares+440
	movl	$0, squares+452
	movslq	squares+440, %rax
	movl	$110, pieces(,%rax,4)
	movl	zobrist+5048, %eax
	xorl	hash, %eax
	movl	%eax, hash
	movl	zobrist+5060, %eax
	xorl	hash, %eax
	movl	%eax, hash
	jmp	.LBB47_44
.LBB47_40:
	jmp	.LBB47_41
.LBB47_41:
	jmp	.LBB47_42
.LBB47_42:
	jmp	.LBB47_43
.LBB47_43:
	jmp	.LBB47_44
.LBB47_44:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end47:
	.size	unmake, .Lfunc_end47-unmake
	.cfi_endproc
                                        # -- End function
	.globl	check_phase             # -- Begin function check_phase
	.p2align	4, 0x90
	.type	check_phase,@function
check_phase:                            # @check_phase
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$0, -8(%rbp)
	movl	$1, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB48_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB48_12
# %bb.2:                                #   in Loop: Header=BB48_1 Depth=1
	movslq	-16(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB48_4
# %bb.3:                                #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_11
.LBB48_4:                               #   in Loop: Header=BB48_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
# %bb.5:                                #   in Loop: Header=BB48_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	je	.LBB48_10
# %bb.6:                                #   in Loop: Header=BB48_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	je	.LBB48_10
# %bb.7:                                #   in Loop: Header=BB48_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB48_10
# %bb.8:                                #   in Loop: Header=BB48_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB48_10
# %bb.9:                                #   in Loop: Header=BB48_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB48_10:                              #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_11
.LBB48_11:                              #   in Loop: Header=BB48_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_1
.LBB48_12:
	cmpl	$12, -8(%rbp)
	jl	.LBB48_18
# %bb.13:
	cmpl	$0, white_castled
	je	.LBB48_15
# %bb.14:
	cmpl	$0, black_castled
	jne	.LBB48_18
.LBB48_15:
	cmpl	$5, board+120
	je	.LBB48_17
# %bb.16:
	cmpl	$6, board+456
	jne	.LBB48_18
.LBB48_17:
	movl	$0, phase
	jmp	.LBB48_22
.LBB48_18:
	cmpl	$6, -8(%rbp)
	jg	.LBB48_20
# %bb.19:
	movl	$2, phase
	jmp	.LBB48_21
.LBB48_20:
	movl	$1, phase
.LBB48_21:
	jmp	.LBB48_22
.LBB48_22:
	popq	%rbp
	retq
.Lfunc_end48:
	.size	check_phase, .Lfunc_end48-check_phase
	.cfi_endproc
                                        # -- End function
	.globl	King                    # -- Begin function King
	.p2align	4, 0x90
	.type	King,@function
King:                                   # @King
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$6, Xfile(,%rax,4)
	jl	.LBB49_4
# %bb.1:
	movl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$4, %eax
	jne	.LBB49_4
# %bb.2:
	movl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB49_4
# %bb.3:
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB49_4:
	movslq	-8(%rbp), %rax
	cmpl	$6, Xfile(,%rax,4)
	jl	.LBB49_8
# %bb.5:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$4, %eax
	jne	.LBB49_8
# %bb.6:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB49_8
# %bb.7:
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB49_8:
	cmpl	$1, -12(%rbp)
	jne	.LBB49_10
# %bb.9:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_10:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end49:
	.size	King, .Lfunc_end49-King
	.cfi_endproc
                                        # -- End function
	.globl	Queen                   # -- Begin function Queen
	.p2align	4, 0x90
	.type	Queen,@function
Queen:                                  # @Queen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$distance, %rax
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	$0, -8(%rbp)
	movl	-16(%rbp), %ecx
	xorl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movl	-8(%rbp), %ecx
	addl	$900, %ecx              # imm = 0x384
	movl	%ecx, -8(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movslq	king_locs(,%rcx,4), %rcx
	movslq	(%rax,%rcx,4), %rax
	movl	std_q_tropism(,%rax,4), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %edi
	callq	rook_mobility
	shll	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %edi
	callq	bishop_mobility
	shll	$1, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$4, -4(%rbp)
	jg	.LBB50_8
# %bb.1:
	cmpl	$0, -4(%rbp)
	jne	.LBB50_3
# %bb.2:
	movl	-4(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_7
.LBB50_3:
	cmpl	$2, -4(%rbp)
	jne	.LBB50_5
# %bb.4:
	movl	-4(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_6
.LBB50_5:
	movl	-4(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB50_6:
	jmp	.LBB50_7
.LBB50_7:
	jmp	.LBB50_8
.LBB50_8:
	movl	-4(%rbp), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	cmpl	$1, -16(%rbp)
	jne	.LBB50_10
# %bb.9:
	xorl	%eax, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_10:
	movl	-8(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end50:
	.size	Queen, .Lfunc_end50-Queen
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rook_mobility
	.type	rook_mobility,@function
rook_mobility:                          # @rook_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -16(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_8
# %bb.2:                                #   in Loop: Header=BB51_1 Depth=1
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	rook_mobility.dir(,%rcx,4), %eax
	movl	%eax, -12(%rbp)
.LBB51_3:                               #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-12(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB51_6
# %bb.4:                                #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.5:                                #   in Loop: Header=BB51_3 Depth=2
	movslq	-4(%rbp), %rax
	movl	rook_mobility.dir(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_3
.LBB51_6:                               #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_7
.LBB51_7:                               #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_8:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end51:
	.size	rook_mobility, .Lfunc_end51-rook_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bishop_mobility
	.type	bishop_mobility,@function
bishop_mobility:                        # @bishop_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -16(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB52_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_8
# %bb.2:                                #   in Loop: Header=BB52_1 Depth=1
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	bishop_mobility.dir(,%rcx,4), %eax
	movl	%eax, -12(%rbp)
.LBB52_3:                               #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-12(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB52_6
# %bb.4:                                #   in Loop: Header=BB52_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.5:                                #   in Loop: Header=BB52_3 Depth=2
	movslq	-4(%rbp), %rax
	movl	bishop_mobility.dir(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_3
.LBB52_6:                               #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_7
.LBB52_7:                               #   in Loop: Header=BB52_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_1
.LBB52_8:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end52:
	.size	bishop_mobility, .Lfunc_end52-bishop_mobility
	.cfi_endproc
                                        # -- End function
	.globl	Rook                    # -- Begin function Rook
	.p2align	4, 0x90
	.type	Rook,@function
Rook:                                   # @Rook
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$rookdistance, %rax
	movl	%edi, -12(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
	movl	-8(%rbp), %ecx
	xorl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movl	-4(%rbp), %ecx
	addl	$500, %ecx              # imm = 0x1F4
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movslq	king_locs(,%rcx,4), %rcx
	movslq	(%rax,%rcx,4), %rax
	movl	std_r_tropism(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %edi
	callq	rook_mobility
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	cmpl	$2, -16(%rbp)
	jg	.LBB53_2
# %bb.1:
	movl	-16(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -16(%rbp)
.LBB53_2:
	movl	-16(%rbp), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	je	.LBB53_5
# %bb.3:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	je	.LBB53_5
# %bb.4:
	movl	-4(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB53_5:
	cmpl	$1300, wmat             # imm = 0x514
	jne	.LBB53_7
# %bb.6:
	cmpl	$1300, bmat             # imm = 0x514
	je	.LBB53_15
.LBB53_7:
	movl	-12(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	Rook.square_d1(,%rcx,4), %eax
	jne	.LBB53_12
# %bb.8:
	movl	-4(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	movl	Rook.square_d1(,%rax,4), %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$4, %eax
	jne	.LBB53_11
# %bb.9:
	movslq	-8(%rbp), %rax
	movl	Rook.square_d1(,%rax,4), %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB53_11
# %bb.10:
	movl	-4(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB53_11:
	jmp	.LBB53_12
.LBB53_12:
	movl	-12(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	Rook.square_d1(,%rcx,4), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB53_14
# %bb.13:
	movl	-4(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
.LBB53_14:
	jmp	.LBB53_15
.LBB53_15:
	cmpl	$1, -8(%rbp)
	jne	.LBB53_17
# %bb.16:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_17:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end53:
	.size	Rook, .Lfunc_end53-Rook
	.cfi_endproc
                                        # -- End function
	.globl	Bishop                  # -- Begin function Bishop
	.p2align	4, 0x90
	.type	Bishop,@function
Bishop:                                 # @Bishop
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$distance, %rax
	movl	%edi, -8(%rbp)
	movl	%esi, -16(%rbp)
	movl	$0, -4(%rbp)
	movl	-16(%rbp), %ecx
	xorl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movl	-4(%rbp), %ecx
	addl	$325, %ecx              # imm = 0x145
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rcx
	movl	sbishop(,%rcx,4), %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movslq	king_locs(,%rcx,4), %rcx
	movslq	(%rax,%rcx,4), %rax
	movl	std_b_tropism(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	bishop_mobility
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	cmpl	$2, -12(%rbp)
	jg	.LBB54_2
# %bb.1:
	movl	-12(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB54_2:
	movl	-12(%rbp), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB54_5
# %bb.3:
	cmpl	$39, -8(%rbp)
	jne	.LBB54_5
# %bb.4:
	cmpl	$1, board+208
	je	.LBB54_8
.LBB54_5:
	cmpl	$1, -16(%rbp)
	jne	.LBB54_9
# %bb.6:
	cmpl	$99, -8(%rbp)
	jne	.LBB54_9
# %bb.7:
	cmpl	$2, board+352
	jne	.LBB54_9
.LBB54_8:
	movl	-4(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB54_9:
	cmpl	$1, -16(%rbp)
	jne	.LBB54_11
# %bb.10:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB54_11:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end54:
	.size	Bishop, .Lfunc_end54-Bishop
	.cfi_endproc
                                        # -- End function
	.globl	Knight                  # -- Begin function Knight
	.p2align	4, 0x90
	.type	Knight,@function
Knight:                                 # @Knight
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$distance, %rax
	movl	%edi, -12(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
	movl	-8(%rbp), %ecx
	xorl	$1, %ecx
	movl	%ecx, -16(%rbp)
	movl	-4(%rbp), %ecx
	addl	$310, %ecx              # imm = 0x136
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	movl	sknight(,%rcx,4), %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movslq	king_locs(,%rcx,4), %rcx
	movslq	(%rax,%rcx,4), %rax
	movl	std_n_tropism(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$1, -8(%rbp)
	jne	.LBB55_2
# %bb.1:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_2:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end55:
	.size	Knight, .Lfunc_end55-Knight
	.cfi_endproc
                                        # -- End function
	.globl	Pawn                    # -- Begin function Pawn
	.p2align	4, 0x90
	.type	Pawn,@function
Pawn:                                   # @Pawn
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$distance, %rax
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -4(%rbp)
	movl	-12(%rbp), %ecx
	xorl	$1, %ecx
	movl	%ecx, -16(%rbp)
	movl	-4(%rbp), %ecx
	addl	$100, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movslq	king_locs(,%rcx,4), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movl	std_p_tropism(,%rcx,4), %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rcx
	imulq	$576, %rcx, %rcx        # imm = 0x240
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movslq	king_locs(,%rcx,4), %rcx
	movslq	(%rax,%rcx,4), %rax
	movl	std_own_p_tropism(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB56_3
# %bb.1:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB56_3
# %bb.2:
	movl	-4(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB56_3:
	movl	-8(%rbp), %eax
	addl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB56_6
# %bb.4:
	movl	-8(%rbp), %eax
	addl	$11, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB56_6
# %bb.5:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_10
.LBB56_6:
	movl	-8(%rbp), %eax
	addl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB56_9
# %bb.7:
	movl	-8(%rbp), %eax
	addl	$13, %eax
	cltq
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB56_9
# %bb.8:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB56_9:
	jmp	.LBB56_10
.LBB56_10:
	cmpl	$1, -12(%rbp)
	jne	.LBB56_12
# %bb.11:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_12:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end56:
	.size	Pawn, .Lfunc_end56-Pawn
	.cfi_endproc
                                        # -- End function
	.globl	ErrorIt                 # -- Begin function ErrorIt
	.p2align	4, 0x90
	.type	ErrorIt,@function
ErrorIt:                                # @ErrorIt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$.L.str.22, %rax
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	%rax, %rdi
	movb	$0, %al
	callq	printf
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end57:
	.size	ErrorIt, .Lfunc_end57-ErrorIt
	.cfi_endproc
                                        # -- End function
	.globl	std_eval                # -- Begin function std_eval
	.p2align	4, 0x90
	.type	std_eval,@function
std_eval:                               # @std_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$328, %rsp              # imm = 0x148
	.cfi_offset %rbx, -24
	movl	%edi, -328(%rbp)
	movl	%esi, -324(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$0, white_to_move
	je	.LBB58_2
# %bb.1:
	movl	Material, %eax
	jmp	.LBB58_3
.LBB58_2:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB58_3:
	subl	maxposdiff, %eax
	cmpl	-324(%rbp), %eax
	jl	.LBB58_8
# %bb.4:
	cmpl	$0, white_to_move
	je	.LBB58_6
# %bb.5:
	movl	Material, %eax
	jmp	.LBB58_7
.LBB58_6:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB58_7:
	subl	maxposdiff, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB58_408
.LBB58_8:
	cmpl	$0, white_to_move
	je	.LBB58_10
# %bb.9:
	movl	Material, %eax
	jmp	.LBB58_11
.LBB58_10:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB58_11:
	addl	maxposdiff, %eax
	cmpl	-328(%rbp), %eax
	jg	.LBB58_16
# %bb.12:
	cmpl	$0, white_to_move
	je	.LBB58_14
# %bb.13:
	movl	Material, %eax
	jmp	.LBB58_15
.LBB58_14:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB58_15:
	addl	maxposdiff, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB58_408
.LBB58_16:
	leaq	-12(%rbp), %rdi
	leaq	-132(%rbp), %rsi
	movl	$0, -132(%rbp)
	callq	checkECache
	cmpl	$0, -132(%rbp)
	je	.LBB58_20
# %bb.17:
	cmpl	$1, white_to_move
	jne	.LBB58_19
# %bb.18:
	movl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB58_408
.LBB58_19:
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB58_408
.LBB58_20:
	leaq	-224(%rbp), %rdi
	xorl	%esi, %esi
	movl	$88, %edx
	callq	memset
	movl	$0, -20(%rbp)
.LBB58_21:                              # =>This Inner Loop Header: Depth=1
	cmpl	$11, -20(%rbp)
	jge	.LBB58_24
# %bb.22:                               #   in Loop: Header=BB58_21 Depth=1
	movslq	-20(%rbp), %rax
	movl	$7, -320(%rbp,%rax,4)
	movslq	-20(%rbp), %rax
	movl	$2, -272(%rbp,%rax,4)
# %bb.23:                               #   in Loop: Header=BB58_21 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_21
.LBB58_24:
	movl	$0, wmat
	movl	$0, bmat
	movl	wking_loc, %eax
	movl	%eax, king_locs
	movl	bking_loc, %eax
	movl	%eax, king_locs+4
	movl	$1, -76(%rbp)
	movl	$1, -88(%rbp)
.LBB58_25:                              # =>This Inner Loop Header: Depth=1
	movl	-88(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB58_46
# %bb.26:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-76(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB58_28
# %bb.27:                               #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_45
.LBB58_28:                              #   in Loop: Header=BB58_25 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
# %bb.29:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$1, %eax
	je	.LBB58_35
# %bb.30:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$3, %eax
	je	.LBB58_35
# %bb.31:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB58_33
# %bb.32:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %eax
	addl	wmat, %eax
	movl	%eax, wmat
	jmp	.LBB58_34
.LBB58_33:                              #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	addl	bmat, %eax
	movl	%eax, bmat
.LBB58_34:                              #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_35
.LBB58_35:                              #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	cmpl	$1, %eax
	jne	.LBB58_44
# %bb.36:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movslq	-20(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -24(%rbp)
	movslq	-20(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB58_40
# %bb.37:                               #   in Loop: Header=BB58_25 Depth=1
	movslq	-16(%rbp), %rax
	movl	-180(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -180(%rbp,%rax,4)
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jge	.LBB58_39
# %bb.38:                               #   in Loop: Header=BB58_25 Depth=1
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
.LBB58_39:                              #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_43
.LBB58_40:                              #   in Loop: Header=BB58_25 Depth=1
	movslq	-16(%rbp), %rax
	movl	-224(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -224(%rbp,%rax,4)
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jle	.LBB58_42
# %bb.41:                               #   in Loop: Header=BB58_25 Depth=1
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
.LBB58_42:                              #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_43
.LBB58_43:                              #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_44
.LBB58_44:                              #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_45
.LBB58_45:                              #   in Loop: Header=BB58_25 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB58_25
.LBB58_46:
	movl	$0, -100(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -128(%rbp)
	movl	$0, -124(%rbp)
	movl	$0, -120(%rbp)
	movl	$0, -116(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$1, -76(%rbp)
	movl	$1, -88(%rbp)
.LBB58_47:                              # =>This Inner Loop Header: Depth=1
	movl	-88(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB58_261
# %bb.48:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-76(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB58_50
# %bb.49:                               #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_260
.LBB58_50:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
# %bb.51:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rdi
	movl	board(,%rdi,4), %esi
	addl	$1, %esi
	movl	%esi, %eax
	sarl	%eax
	cltq
	movq	evalRoutines(,%rax,8), %rax
	andl	$1, %esi
                                        # kill: def %edi killed %edi killed %rdi
	callq	*%rax
	movl	-12(%rbp), %ecx
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movslq	-20(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -24(%rbp)
	movslq	-20(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$11, %ecx
	ja	.LBB58_259
# %bb.52:                               #   in Loop: Header=BB58_47 Depth=1
	movq	.LJTI58_0(,%rax,8), %rax
	jmpq	*%rax
.LBB58_53:                              #   in Loop: Header=BB58_47 Depth=1
	movl	$0, -72(%rbp)
	movl	$0, -104(%rbp)
	movslq	-20(%rbp), %rax
	movl	swhite_pawn(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB58_59
# %bb.54:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB58_59
# %bb.55:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$8, %eax
	movl	%eax, -12(%rbp)
	movl	$1, -104(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_58
# %bb.56:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_58
# %bb.57:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -12(%rbp)
	movl	$1, -72(%rbp)
.LBB58_58:                              #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_59
.LBB58_59:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_65
# %bb.60:                               #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB58_62
# %bb.61:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$3, %eax
	movl	%eax, -12(%rbp)
.LBB58_62:                              #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, -72(%rbp)
	je	.LBB58_64
# %bb.63:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB58_64:                              #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_65
.LBB58_65:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$1, -180(%rbp,%rax,4)
	jle	.LBB58_67
# %bb.66:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	movl	-180(%rbp,%rax,4), %eax
	subl	$1, %eax
	imull	$3, %eax, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB58_67:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_105
# %bb.68:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jl	.LBB58_105
# %bb.69:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jl	.LBB58_105
# %bb.70:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	imull	$3, swhite_pawn(,%rax,4), %eax
	addl	$30, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, white_to_move
	je	.LBB58_77
# %bb.71:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$110, %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	bking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	bking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_73
# %bb.72:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	bking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	jmp	.LBB58_74
.LBB58_73:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	bking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
.LBB58_74:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-28(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-20(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_76
# %bb.75:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-100(%rbp), %eax
	addl	$800, %eax              # imm = 0x320
	movl	%eax, -100(%rbp)
.LBB58_76:                              #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_83
.LBB58_77:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$110, %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	bking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	bking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_79
# %bb.78:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	bking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	jmp	.LBB58_80
.LBB58_79:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	bking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
.LBB58_80:                              #   in Loop: Header=BB58_47 Depth=1
	subl	$1, %ebx
	movslq	-28(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-20(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_82
# %bb.81:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-100(%rbp), %eax
	addl	$800, %eax              # imm = 0x320
	movl	%eax, -100(%rbp)
.LBB58_82:                              #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_83
.LBB58_83:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	cmpl	$1, Xfile(,%rax,4)
	je	.LBB58_85
# %bb.84:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	cmpl	$8, Xfile(,%rax,4)
	jne	.LBB58_86
.LBB58_85:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	swhite_pawn(,%rax,4), %eax
	shll	$1, %eax
	addl	$12, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_86:                              #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB58_104
# %bb.87:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	je	.LBB58_95
# %bb.88:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_94
# %bb.89:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jl	.LBB58_94
# %bb.90:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	imull	$7, Xrank(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-20(%rbp), %rax
	cmpl	$7, Xrank(,%rax,4)
	jne	.LBB58_93
# %bb.91:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$6, -320(%rbp,%rax,4)
	jl	.LBB58_93
# %bb.92:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$50, %eax
	movl	%eax, -12(%rbp)
.LBB58_93:                              #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_94
.LBB58_94:                              #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_95
.LBB58_95:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	je	.LBB58_103
# %bb.96:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_102
# %bb.97:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jl	.LBB58_102
# %bb.98:                               #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	imull	$7, Xrank(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-20(%rbp), %rax
	cmpl	$7, Xrank(,%rax,4)
	jne	.LBB58_101
# %bb.99:                               #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$6, -320(%rbp,%rax,4)
	jl	.LBB58_101
# %bb.100:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$50, %eax
	movl	%eax, -12(%rbp)
.LBB58_101:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_102
.LBB58_102:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_103
.LBB58_103:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_104
.LBB58_104:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_105
.LBB58_105:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_107
# %bb.106:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$7, %eax
	movl	%eax, -12(%rbp)
.LBB58_107:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_259
.LBB58_108:                             #   in Loop: Header=BB58_47 Depth=1
	movl	$0, -72(%rbp)
	movl	$0, -104(%rbp)
	movslq	-20(%rbp), %rax
	movl	sblack_pawn(,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_114
# %bb.109:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_114
# %bb.110:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -12(%rbp)
	movl	$1, -104(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_113
# %bb.111:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_113
# %bb.112:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
	movl	$1, -72(%rbp)
.LBB58_113:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_114
.LBB58_114:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_120
# %bb.115:                              #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB58_117
# %bb.116:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -12(%rbp)
.LBB58_117:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, -72(%rbp)
	je	.LBB58_119
# %bb.118:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB58_119:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_120
.LBB58_120:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$1, -224(%rbp,%rax,4)
	jle	.LBB58_122
# %bb.121:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	movl	-224(%rbp,%rax,4), %eax
	subl	$1, %eax
	imull	$3, %eax, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_122:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_160
# %bb.123:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jg	.LBB58_160
# %bb.124:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jg	.LBB58_160
# %bb.125:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	imull	$3, sblack_pawn(,%rax,4), %eax
	addl	$30, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$0, white_to_move
	jne	.LBB58_132
# %bb.126:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$26, %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	wking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	wking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_128
# %bb.127:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	wking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	jmp	.LBB58_129
.LBB58_128:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	wking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
.LBB58_129:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-28(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-20(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_131
# %bb.130:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-96(%rbp), %eax
	subl	$800, %eax              # imm = 0x320
	movl	%eax, -96(%rbp)
.LBB58_131:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_138
.LBB58_132:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$26, %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	wking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	wking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_134
# %bb.133:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	wking_loc, %rax
	movl	Xfile(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xfile(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	jmp	.LBB58_135
.LBB58_134:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	wking_loc, %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-28(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
.LBB58_135:                             #   in Loop: Header=BB58_47 Depth=1
	subl	$1, %ebx
	movslq	-28(%rbp), %rax
	movl	Xrank(,%rax,4), %edi
	movslq	-20(%rbp), %rax
	subl	Xrank(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB58_137
# %bb.136:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-96(%rbp), %eax
	subl	$800, %eax              # imm = 0x320
	movl	%eax, -96(%rbp)
.LBB58_137:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_138
.LBB58_138:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	cmpl	$1, Xfile(,%rax,4)
	je	.LBB58_140
# %bb.139:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	cmpl	$8, Xfile(,%rax,4)
	jne	.LBB58_141
.LBB58_140:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	sblack_pawn(,%rax,4), %eax
	shll	$1, %eax
	addl	$12, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB58_141:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB58_159
# %bb.142:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	je	.LBB58_150
# %bb.143:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_149
# %bb.144:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jg	.LBB58_149
# %bb.145:                              #   in Loop: Header=BB58_47 Depth=1
	movl	$9, %eax
	movslq	-20(%rbp), %rcx
	subl	Xrank(,%rcx,4), %eax
	imull	$7, %eax, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movslq	-20(%rbp), %rax
	cmpl	$2, Xrank(,%rax,4)
	jne	.LBB58_148
# %bb.146:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$3, -272(%rbp,%rax,4)
	jg	.LBB58_148
# %bb.147:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$50, %eax
	movl	%eax, -12(%rbp)
.LBB58_148:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_149
.LBB58_149:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_150
.LBB58_150:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	je	.LBB58_158
# %bb.151:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_157
# %bb.152:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jg	.LBB58_157
# %bb.153:                              #   in Loop: Header=BB58_47 Depth=1
	movl	$9, %eax
	movslq	-20(%rbp), %rcx
	subl	Xrank(,%rcx,4), %eax
	imull	$7, %eax, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movslq	-20(%rbp), %rax
	cmpl	$2, Xrank(,%rax,4)
	jne	.LBB58_156
# %bb.154:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$3, -272(%rbp,%rax,4)
	jg	.LBB58_156
# %bb.155:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$50, %eax
	movl	%eax, -12(%rbp)
.LBB58_156:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_157
.LBB58_157:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_158
.LBB58_158:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_159
.LBB58_159:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_160
.LBB58_160:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_162
# %bb.161:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$7, %eax
	movl	%eax, -12(%rbp)
.LBB58_162:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_259
.LBB58_163:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_165
# %bb.164:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movl	%eax, -116(%rbp)
	movslq	-20(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -120(%rbp)
.LBB58_165:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$7, -24(%rbp)
	jne	.LBB58_170
# %bb.166:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$25, %eax
	movl	%eax, -12(%rbp)
	cmpl	$2, -48(%rbp)
	jne	.LBB58_169
# %bb.167:                              #   in Loop: Header=BB58_47 Depth=1
	cmpl	$7, -120(%rbp)
	jne	.LBB58_169
# %bb.168:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -12(%rbp)
.LBB58_169:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_170
.LBB58_170:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_177
# %bb.171:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
	cmpl	$2, -48(%rbp)
	jne	.LBB58_174
# %bb.172:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	cmpl	-116(%rbp), %eax
	jne	.LBB58_174
# %bb.173:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -12(%rbp)
.LBB58_174:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_176
# %bb.175:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -12(%rbp)
.LBB58_176:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_177
.LBB58_177:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_259
.LBB58_178:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$1, -60(%rbp)
	jne	.LBB58_180
# %bb.179:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	movl	%eax, -124(%rbp)
	movslq	-20(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -128(%rbp)
.LBB58_180:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$2, -24(%rbp)
	jne	.LBB58_185
# %bb.181:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$25, %eax
	movl	%eax, -12(%rbp)
	cmpl	$2, -48(%rbp)
	jne	.LBB58_184
# %bb.182:                              #   in Loop: Header=BB58_47 Depth=1
	cmpl	$2, -128(%rbp)
	jne	.LBB58_184
# %bb.183:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -12(%rbp)
.LBB58_184:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_185
.LBB58_185:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_192
# %bb.186:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -12(%rbp)
	cmpl	$2, -60(%rbp)
	jne	.LBB58_189
# %bb.187:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	cmpl	-124(%rbp), %eax
	jne	.LBB58_189
# %bb.188:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -12(%rbp)
.LBB58_189:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_191
# %bb.190:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$3, %eax
	movl	%eax, -12(%rbp)
.LBB58_191:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_192
.LBB58_192:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_259
.LBB58_193:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_259
.LBB58_194:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_259
.LBB58_195:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB58_259
.LBB58_196:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB58_259
.LBB58_197:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB58_259
.LBB58_198:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB58_259
.LBB58_199:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$1300, wmat             # imm = 0x514
	jle	.LBB58_227
# %bb.200:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	swhite_king(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2, white_castled
	jne	.LBB58_202
# %bb.201:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_210
.LBB58_202:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$1, white_castled
	jne	.LBB58_204
# %bb.203:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$25, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_209
.LBB58_204:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, moved+120
	je	.LBB58_208
# %bb.205:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -12(%rbp)
	movslq	-16(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_207
# %bb.206:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -12(%rbp)
.LBB58_207:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_208
.LBB58_208:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_209
.LBB58_209:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_210
.LBB58_210:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	wking_loc, %rax
	cmpl	$4, Xfile(,%rax,4)
	je	.LBB58_225
# %bb.211:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	wking_loc, %rax
	cmpl	$5, Xfile(,%rax,4)
	je	.LBB58_225
# %bb.212:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jge	.LBB58_215
# %bb.213:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	je	.LBB58_215
# %bb.214:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	movl	-320(%rbp,%rax,4), %eax
	subl	-24(%rbp), %eax
	subl	$1, %eax
	imull	$9, %eax, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB58_216
.LBB58_215:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$22, %eax
	movl	%eax, -12(%rbp)
.LBB58_216:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jge	.LBB58_219
# %bb.217:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	je	.LBB58_219
# %bb.218:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	subl	-24(%rbp), %eax
	subl	$1, %eax
	shll	$3, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB58_220
.LBB58_219:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$16, %eax
	movl	%eax, -12(%rbp)
.LBB58_220:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-320(%rbp,%rcx,4), %eax
	jge	.LBB58_223
# %bb.221:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	je	.LBB58_223
# %bb.222:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	subl	-24(%rbp), %eax
	subl	$1, %eax
	shll	$3, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB58_224
.LBB58_223:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$16, %eax
	movl	%eax, -12(%rbp)
.LBB58_224:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_226
.LBB58_225:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$10, %eax
	movl	%eax, -12(%rbp)
.LBB58_226:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_228
.LBB58_227:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	send_king(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_228:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_259
.LBB58_229:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$1300, bmat             # imm = 0x514
	jle	.LBB58_257
# %bb.230:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	sblack_king(,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$4, black_castled
	jne	.LBB58_232
# %bb.231:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$15, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_240
.LBB58_232:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$3, black_castled
	jne	.LBB58_234
# %bb.233:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	subl	$25, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_239
.LBB58_234:                             #   in Loop: Header=BB58_47 Depth=1
	cmpl	$0, moved+456
	je	.LBB58_238
# %bb.235:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -12(%rbp)
	movslq	-16(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_237
# %bb.236:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -12(%rbp)
.LBB58_237:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_238
.LBB58_238:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_239
.LBB58_239:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_240
.LBB58_240:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	bking_loc, %rax
	cmpl	$4, Xfile(,%rax,4)
	je	.LBB58_255
# %bb.241:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	bking_loc, %rax
	cmpl	$5, Xfile(,%rax,4)
	je	.LBB58_255
# %bb.242:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jle	.LBB58_245
# %bb.243:                              #   in Loop: Header=BB58_47 Depth=1
	movslq	-16(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	je	.LBB58_245
# %bb.244:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movslq	-16(%rbp), %rcx
	subl	-272(%rbp,%rcx,4), %eax
	subl	$1, %eax
	cltq
	imull	$9, srev_rank(,%rax,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_246
.LBB58_245:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$22, %eax
	movl	%eax, -12(%rbp)
.LBB58_246:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jle	.LBB58_249
# %bb.247:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	je	.LBB58_249
# %bb.248:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	subl	-272(%rbp,%rcx,4), %eax
	subl	$1, %eax
	cltq
	movl	srev_rank(,%rax,4), %eax
	shll	$3, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_250
.LBB58_249:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$16, %eax
	movl	%eax, -12(%rbp)
.LBB58_250:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jle	.LBB58_253
# %bb.251:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	je	.LBB58_253
# %bb.252:                              #   in Loop: Header=BB58_47 Depth=1
	movl	-24(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	subl	-272(%rbp,%rcx,4), %eax
	subl	$1, %eax
	cltq
	movl	srev_rank(,%rax,4), %eax
	shll	$3, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_254
.LBB58_253:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$16, %eax
	movl	%eax, -12(%rbp)
.LBB58_254:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_256
.LBB58_255:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-12(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -12(%rbp)
.LBB58_256:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_258
.LBB58_257:                             #   in Loop: Header=BB58_47 Depth=1
	movslq	-20(%rbp), %rax
	movl	send_king(,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB58_258:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_259
.LBB58_259:                             #   in Loop: Header=BB58_47 Depth=1
	jmp	.LBB58_260
.LBB58_260:                             #   in Loop: Header=BB58_47 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB58_47
.LBB58_261:
	cmpl	$2200, wmat             # imm = 0x898
	jg	.LBB58_263
# %bb.262:
	cmpl	$2200, bmat             # imm = 0x898
	jle	.LBB58_276
.LBB58_263:
	cmpl	$0, moved+164
	jne	.LBB58_266
# %bb.264:
	cmpl	$13, board+212
	je	.LBB58_266
# %bb.265:
	movl	-12(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB58_266:
	cmpl	$0, moved+168
	jne	.LBB58_269
# %bb.267:
	cmpl	$13, board+216
	je	.LBB58_269
# %bb.268:
	movl	-12(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB58_269:
	cmpl	$0, moved+404
	jne	.LBB58_272
# %bb.270:
	cmpl	$13, board+356
	je	.LBB58_272
# %bb.271:
	movl	-12(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB58_272:
	cmpl	$0, moved+408
	jne	.LBB58_275
# %bb.273:
	cmpl	$13, board+360
	je	.LBB58_275
# %bb.274:
	movl	-12(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB58_275:
	jmp	.LBB58_276
.LBB58_276:
	cmpl	$1300, wmat             # imm = 0x514
	jg	.LBB58_278
# %bb.277:
	cmpl	$1300, bmat             # imm = 0x514
	jle	.LBB58_293
.LBB58_278:
	movslq	wking_loc, %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movslq	bking_loc, %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-84(%rbp), %edi
	subl	-80(%rbp), %edi
	callq	abs
	cmpl	$2, %eax
	jle	.LBB58_292
# %bb.279:
	movslq	-84(%rbp), %rax
	movslq	-272(%rbp,%rax,4), %rax
	movl	srev_rank(,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	cltq
	movslq	-272(%rbp,%rax,4), %rax
	movl	srev_rank(,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-84(%rbp), %eax
	subl	$1, %eax
	cltq
	movslq	-272(%rbp,%rax,4), %rax
	movl	srev_rank(,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-80(%rbp), %rax
	movl	-320(%rbp,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-320(%rbp,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-84(%rbp), %rax
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_281
# %bb.280:
	movl	-56(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
.LBB58_281:
	movl	-84(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_283
# %bb.282:
	movl	-56(%rbp), %eax
	addl	$6, %eax
	movl	%eax, -56(%rbp)
.LBB58_283:
	movl	-84(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -224(%rbp,%rax,4)
	jne	.LBB58_285
# %bb.284:
	movl	-56(%rbp), %eax
	addl	$6, %eax
	movl	%eax, -56(%rbp)
.LBB58_285:
	movslq	-80(%rbp), %rax
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_287
# %bb.286:
	movl	-52(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
.LBB58_287:
	movl	-80(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_289
# %bb.288:
	movl	-52(%rbp), %eax
	addl	$6, %eax
	movl	%eax, -52(%rbp)
.LBB58_289:
	movl	-80(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -180(%rbp,%rax,4)
	jne	.LBB58_291
# %bb.290:
	movl	-52(%rbp), %eax
	addl	$6, %eax
	movl	%eax, -52(%rbp)
.LBB58_291:
	jmp	.LBB58_292
.LBB58_292:
	jmp	.LBB58_293
.LBB58_293:
	cmpl	$1300, bmat             # imm = 0x514
	jle	.LBB58_296
# %bb.294:
	cmpl	$0, -64(%rbp)
	je	.LBB58_296
# %bb.295:
	movl	-56(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB58_296:
	cmpl	$1300, wmat             # imm = 0x514
	jle	.LBB58_299
# %bb.297:
	cmpl	$0, -68(%rbp)
	je	.LBB58_299
# %bb.298:
	movl	-52(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_299:
	cmpl	$0, -48(%rbp)
	jne	.LBB58_304
# %bb.300:
	cmpl	$0, -68(%rbp)
	jne	.LBB58_304
# %bb.301:
	cmpl	$0, -36(%rbp)
	jne	.LBB58_304
# %bb.302:
	cmpl	$0, -44(%rbp)
	jne	.LBB58_304
# %bb.303:
	movl	-96(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_304:
	cmpl	$0, -60(%rbp)
	jne	.LBB58_309
# %bb.305:
	cmpl	$0, -64(%rbp)
	jne	.LBB58_309
# %bb.306:
	cmpl	$0, -32(%rbp)
	jne	.LBB58_309
# %bb.307:
	cmpl	$0, -40(%rbp)
	jne	.LBB58_309
# %bb.308:
	movl	-100(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_309:
	cmpl	$0, -112(%rbp)
	jne	.LBB58_366
# %bb.310:
	cmpl	$0, -108(%rbp)
	jne	.LBB58_366
# %bb.311:
	cmpl	$0, -48(%rbp)
	jne	.LBB58_339
# %bb.312:
	cmpl	$0, -60(%rbp)
	jne	.LBB58_339
# %bb.313:
	cmpl	$0, -68(%rbp)
	jne	.LBB58_339
# %bb.314:
	cmpl	$0, -64(%rbp)
	jne	.LBB58_339
# %bb.315:
	cmpl	$0, -32(%rbp)
	jne	.LBB58_321
# %bb.316:
	cmpl	$0, -36(%rbp)
	jne	.LBB58_321
# %bb.317:
	cmpl	$3, -44(%rbp)
	jge	.LBB58_320
# %bb.318:
	cmpl	$3, -40(%rbp)
	jge	.LBB58_320
# %bb.319:
	movl	$0, -12(%rbp)
.LBB58_320:
	jmp	.LBB58_338
.LBB58_321:
	cmpl	$0, -44(%rbp)
	jne	.LBB58_326
# %bb.322:
	cmpl	$0, -40(%rbp)
	jne	.LBB58_326
# %bb.323:
	movl	-36(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	cmpl	$2, %eax
	jge	.LBB58_325
# %bb.324:
	movl	$0, -12(%rbp)
.LBB58_325:
	jmp	.LBB58_337
.LBB58_326:
	cmpl	$3, -44(%rbp)
	jge	.LBB58_328
# %bb.327:
	cmpl	$0, -36(%rbp)
	je	.LBB58_330
.LBB58_328:
	cmpl	$1, -36(%rbp)
	jne	.LBB58_336
# %bb.329:
	cmpl	$0, -44(%rbp)
	jne	.LBB58_336
.LBB58_330:
	cmpl	$3, -40(%rbp)
	jge	.LBB58_332
# %bb.331:
	cmpl	$0, -32(%rbp)
	je	.LBB58_334
.LBB58_332:
	cmpl	$1, -32(%rbp)
	jne	.LBB58_335
# %bb.333:
	cmpl	$0, -40(%rbp)
	jne	.LBB58_335
.LBB58_334:
	movl	$0, -12(%rbp)
.LBB58_335:
	jmp	.LBB58_336
.LBB58_336:
	jmp	.LBB58_337
.LBB58_337:
	jmp	.LBB58_338
.LBB58_338:
	jmp	.LBB58_365
.LBB58_339:
	cmpl	$0, -68(%rbp)
	jne	.LBB58_364
# %bb.340:
	cmpl	$0, -64(%rbp)
	jne	.LBB58_364
# %bb.341:
	cmpl	$1, -48(%rbp)
	jne	.LBB58_347
# %bb.342:
	cmpl	$1, -60(%rbp)
	jne	.LBB58_347
# %bb.343:
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	cmpl	$2, %eax
	jge	.LBB58_346
# %bb.344:
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	cmpl	$2, %eax
	jge	.LBB58_346
# %bb.345:
	movl	$0, -12(%rbp)
.LBB58_346:
	jmp	.LBB58_363
.LBB58_347:
	cmpl	$1, -48(%rbp)
	jne	.LBB58_354
# %bb.348:
	cmpl	$0, -60(%rbp)
	jne	.LBB58_354
# %bb.349:
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB58_353
# %bb.350:
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB58_352
# %bb.351:
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB58_353
.LBB58_352:
	movl	$0, -12(%rbp)
.LBB58_353:
	jmp	.LBB58_362
.LBB58_354:
	cmpl	$1, -60(%rbp)
	jne	.LBB58_361
# %bb.355:
	cmpl	$0, -48(%rbp)
	jne	.LBB58_361
# %bb.356:
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB58_360
# %bb.357:
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB58_359
# %bb.358:
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB58_360
.LBB58_359:
	movl	$0, -12(%rbp)
.LBB58_360:
	jmp	.LBB58_361
.LBB58_361:
	jmp	.LBB58_362
.LBB58_362:
	jmp	.LBB58_363
.LBB58_363:
	jmp	.LBB58_364
.LBB58_364:
	jmp	.LBB58_365
.LBB58_365:
	jmp	.LBB58_400
.LBB58_366:
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB58_389
# %bb.367:
	movl	-68(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB58_372
# %bb.368:
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_370
# %bb.369:
	movl	-12(%rbp), %eax
	addl	$120, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_371
.LBB58_370:
	movl	-12(%rbp), %eax
	subl	$120, %eax
	movl	%eax, -12(%rbp)
.LBB58_371:
	jmp	.LBB58_388
.LBB58_372:
	movl	-48(%rbp), %edi
	addl	-68(%rbp), %edi
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB58_379
# %bb.373:
	movl	-36(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-40(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_375
# %bb.374:
	movl	-12(%rbp), %eax
	addl	$120, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_378
.LBB58_375:
	movl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_377
# %bb.376:
	movl	-12(%rbp), %eax
	subl	$120, %eax
	movl	%eax, -12(%rbp)
.LBB58_377:
	jmp	.LBB58_378
.LBB58_378:
	jmp	.LBB58_387
.LBB58_379:
	movl	-48(%rbp), %edi
	addl	-68(%rbp), %edi
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$2, %eax
	jne	.LBB58_386
# %bb.380:
	movl	-36(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_382
# %bb.381:
	movl	-12(%rbp), %eax
	addl	$120, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_385
.LBB58_382:
	movl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_384
# %bb.383:
	movl	-12(%rbp), %eax
	subl	$120, %eax
	movl	%eax, -12(%rbp)
.LBB58_384:
	jmp	.LBB58_385
.LBB58_385:
	jmp	.LBB58_386
.LBB58_386:
	jmp	.LBB58_387
.LBB58_387:
	jmp	.LBB58_388
.LBB58_388:
	jmp	.LBB58_399
.LBB58_389:
	movl	-68(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB58_398
# %bb.390:
	cmpl	$0, -68(%rbp)
	je	.LBB58_393
# %bb.391:
	cmpl	$0, -64(%rbp)
	jne	.LBB58_393
# %bb.392:
	movl	-12(%rbp), %eax
	addl	$120, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_397
.LBB58_393:
	cmpl	$0, -68(%rbp)
	jne	.LBB58_396
# %bb.394:
	cmpl	$0, -64(%rbp)
	je	.LBB58_396
# %bb.395:
	movl	-12(%rbp), %eax
	subl	$120, %eax
	movl	%eax, -12(%rbp)
.LBB58_396:
	jmp	.LBB58_397
.LBB58_397:
	jmp	.LBB58_398
.LBB58_398:
	jmp	.LBB58_399
.LBB58_399:
	jmp	.LBB58_400
.LBB58_400:
	movl	-12(%rbp), %edi
	callq	storeECache
	movl	Material, %edi
	subl	-12(%rbp), %edi
	callq	abs
	cmpl	maxposdiff, %eax
	jle	.LBB58_405
# %bb.401:
	movl	Material, %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	$1000, %ecx             # imm = 0x3E8
	cmpl	%eax, %ecx
	jge	.LBB58_403
# %bb.402:
	movl	$1000, %eax             # imm = 0x3E8
	jmp	.LBB58_404
.LBB58_403:
	movl	Material, %edi
	subl	-12(%rbp), %edi
	callq	abs
.LBB58_404:
	movl	%eax, maxposdiff
.LBB58_405:
	cmpl	$1, white_to_move
	jne	.LBB58_407
# %bb.406:
	movl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB58_408
.LBB58_407:
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB58_408:
	movl	-92(%rbp), %eax
	addq	$328, %rsp              # imm = 0x148
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end58:
	.size	std_eval, .Lfunc_end58-std_eval
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI58_0:
	.quad	.LBB58_53
	.quad	.LBB58_108
	.quad	.LBB58_195
	.quad	.LBB58_196
	.quad	.LBB58_199
	.quad	.LBB58_229
	.quad	.LBB58_163
	.quad	.LBB58_178
	.quad	.LBB58_197
	.quad	.LBB58_198
	.quad	.LBB58_193
	.quad	.LBB58_194
                                        # -- End function
	.text
	.globl	ResetHandValue          # -- Begin function ResetHandValue
	.p2align	4, 0x90
	.type	ResetHandValue,@function
ResetHandValue:                         # @ResetHandValue
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$hand_value, %rdi
	movabsq	$std_hand_value, %rsi
	movl	$52, %edx
	callq	memcpy
	popq	%rbp
	retq
.Lfunc_end59:
	.size	ResetHandValue, .Lfunc_end59-ResetHandValue
	.cfi_endproc
                                        # -- End function
	.globl	BegForPartner           # -- Begin function BegForPartner
	.p2align	4, 0x90
	.type	BegForPartner,@function
BegForPartner:                          # @BegForPartner
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpl	$0, xb_mode
	je	.LBB60_2
# %bb.1:
	jmp	.LBB60_2
.LBB60_2:
	popq	%rbp
	retq
.Lfunc_end60:
	.size	BegForPartner, .Lfunc_end60-BegForPartner
	.cfi_endproc
                                        # -- End function
	.globl	GreetPartner            # -- Begin function GreetPartner
	.p2align	4, 0x90
	.type	GreetPartner,@function
GreetPartner:                           # @GreetPartner
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.1.28, %rdi
	movb	$0, %al
	callq	printf
	popq	%rbp
	retq
.Lfunc_end61:
	.size	GreetPartner, .Lfunc_end61-GreetPartner
	.cfi_endproc
                                        # -- End function
	.globl	HandlePartner           # -- Begin function HandlePartner
	.p2align	4, 0x90
	.type	HandlePartner,@function
HandlePartner:                          # @HandlePartner
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$32, %eax
	jne	.LBB62_4
# %bb.1:
	cmpl	$0, have_partner
	jne	.LBB62_3
# %bb.2:
	movabsq	$.L.str.2.29, %rsi
	movabsq	$my_partner, %rdx
	movq	-8(%rbp), %rdi
	addq	$1, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	movl	$1, have_partner
	callq	GreetPartner
	movabsq	$.L.str.3.30, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.4.31, %rdi
	movb	$0, %al
	callq	printf
.LBB62_3:
	jmp	.LBB62_5
.LBB62_4:
	movabsq	$my_partner, %rdi
	xorl	%esi, %esi
	movl	$256, %edx              # imm = 0x100
	callq	memset
	movl	$0, have_partner
	callq	BegForPartner
	movabsq	$.L.str.5.32, %rdi
	movb	$0, %al
	callq	printf
.LBB62_5:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end62:
	.size	HandlePartner, .Lfunc_end62-HandlePartner
	.cfi_endproc
                                        # -- End function
	.globl	HandlePtell             # -- Begin function HandlePtell
	.p2align	4, 0x90
	.type	HandlePtell,@function
HandlePtell:                            # @HandlePtell
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L.str.6.33, %rbx
	movabsq	$.LHandlePtell.howmuch, %rsi
	leaq	-112(%rbp), %rax
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movq	%rax, %rdi
	movl	$80, %edx
	callq	memcpy
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movq	%rbx, %rsi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_2
# %bb.1:
	movabsq	$.L.str.7.34, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_192
.LBB63_2:
	cmpl	$1, Variant
	je	.LBB63_5
# %bb.3:
	movabsq	$.L.str.8.35, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB63_5
# %bb.4:
	movabsq	$.L.str.9.36, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_192
.LBB63_5:
	movabsq	$.L.str.10.37, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$3, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_7
# %bb.6:
	movabsq	$.L.str.11.38, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, must_sit
	movl	$0, must_go
	jmp	.LBB63_191
.LBB63_7:
	movabsq	$.L.str.12.39, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB63_9
# %bb.8:
	movabsq	$.L.str.13.40, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_10
.LBB63_9:
	movabsq	$.L.str.14.41, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, must_sit
	movl	$4, must_go
	jmp	.LBB63_190
.LBB63_10:
	movabsq	$.L.str.15.42, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB63_12
# %bb.11:
	movabsq	$.L.str.16.43, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_13
.LBB63_12:
	movabsq	$.L.str.17.44, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, go_fast
	movl	$0, must_sit
	jmp	.LBB63_189
.LBB63_13:
	movabsq	$.L.str.18.45, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_15
# %bb.14:
	movabsq	$.L.str.19, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, go_fast
	movl	$0, must_sit
	jmp	.LBB63_188
.LBB63_15:
	movabsq	$.L.str.20, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_17
# %bb.16:
	movabsq	$.L.str.21, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.22.46, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_187
.LBB63_17:
	movabsq	$.L.str.23, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_19
# %bb.18:
	movabsq	$.L.str.24, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_186
.LBB63_19:
	movabsq	$.L.str.26, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_87
# %bb.20:
	movabsq	$.L.str.27.47, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_28
# %bb.21:
	movabsq	$.L.str.28, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
# %bb.22:
	movabsq	$.L.str.29, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
# %bb.23:
	movabsq	$.L.str.30, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
# %bb.24:
	movabsq	$.L.str.31, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
# %bb.25:
	movabsq	$.L.str.32, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
# %bb.26:
	movabsq	$.L.str.33, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
# %bb.27:
	movabsq	$.L.str.34, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_32
.LBB63_28:
	cmpl	$1, comp_color
	jne	.LBB63_30
# %bb.29:
	movl	hand_value+4, %eax
	addl	$25, %eax
	movl	%eax, hand_value+4
	movl	hand_value+12, %eax
	addl	$50, %eax
	movl	%eax, hand_value+12
	movl	hand_value+44, %eax
	addl	$50, %eax
	movl	%eax, hand_value+44
	movl	hand_value+28, %eax
	addl	$50, %eax
	movl	%eax, hand_value+28
	movl	hand_value+36, %eax
	addl	$100, %eax
	movl	%eax, hand_value+36
	jmp	.LBB63_31
.LBB63_30:
	movl	hand_value+8, %eax
	subl	$25, %eax
	movl	%eax, hand_value+8
	movl	hand_value+16, %eax
	subl	$50, %eax
	movl	%eax, hand_value+16
	movl	hand_value+48, %eax
	subl	$50, %eax
	movl	%eax, hand_value+48
	movl	hand_value+32, %eax
	subl	$50, %eax
	movl	%eax, hand_value+32
	movl	hand_value+40, %eax
	subl	$100, %eax
	movl	%eax, hand_value+40
.LBB63_31:
	movabsq	$.L.str.35, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_42
.LBB63_32:
	movabsq	$.L.str.36, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_34
# %bb.33:
	leaq	-112(%rbp), %rdi
	movl	$50000, -12(%rbp)       # imm = 0xC350
	movl	$.L.str.37, %esi
	callq	strcpy
	jmp	.LBB63_41
.LBB63_34:
	movabsq	$.L.str.38, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_36
# %bb.35:
	leaq	-112(%rbp), %rdi
	movl	$1000, -12(%rbp)        # imm = 0x3E8
	movl	$.L.str.39, %esi
	callq	strcpy
	jmp	.LBB63_40
.LBB63_36:
	movabsq	$.L.str.26, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_38
# %bb.37:
	leaq	-112(%rbp), %rdi
	movl	$150, -12(%rbp)
	movl	$.L.str.40, %esi
	callq	strcpy
	jmp	.LBB63_39
.LBB63_38:
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB63_39:
	jmp	.LBB63_40
.LBB63_40:
	jmp	.LBB63_41
.LBB63_41:
	jmp	.LBB63_42
.LBB63_42:
	movabsq	$.L.str.28, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_47
# %bb.43:
	cmpl	$1, comp_color
	jne	.LBB63_45
# %bb.44:
	movl	std_hand_value+12, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+12
	jmp	.LBB63_46
.LBB63_45:
	movl	std_hand_value+16, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+16
.LBB63_46:
	movabsq	$.L.str.41, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_47:
	movabsq	$.L.str.29, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_55
# %bb.48:
	cmpl	$1, comp_color
	jne	.LBB63_50
# %bb.49:
	movl	std_hand_value+44, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+44
	jmp	.LBB63_51
.LBB63_50:
	movl	std_hand_value+48, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+48
.LBB63_51:
	cmpl	$1, comp_color
	jne	.LBB63_53
# %bb.52:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	jmp	.LBB63_54
.LBB63_53:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
.LBB63_54:
	movabsq	$.L.str.42, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_55:
	movabsq	$.L.str.31, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_63
# %bb.56:
	cmpl	$1, comp_color
	jne	.LBB63_58
# %bb.57:
	movl	std_hand_value+28, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+28
	jmp	.LBB63_59
.LBB63_58:
	movl	std_hand_value+32, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+32
.LBB63_59:
	cmpl	$1, comp_color
	jne	.LBB63_61
# %bb.60:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	jmp	.LBB63_62
.LBB63_61:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
.LBB63_62:
	movabsq	$.L.str.43, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_63:
	movabsq	$.L.str.32, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_68
# %bb.64:
	cmpl	$1, comp_color
	jne	.LBB63_66
# %bb.65:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	jmp	.LBB63_67
.LBB63_66:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
.LBB63_67:
	movabsq	$.L.str.44, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_68:
	movabsq	$.L.str.30, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_76
# %bb.69:
	cmpl	$1, comp_color
	jne	.LBB63_71
# %bb.70:
	movl	std_hand_value+4, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+4
	jmp	.LBB63_72
.LBB63_71:
	movl	std_hand_value+8, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+8
.LBB63_72:
	cmpl	$1, comp_color
	jne	.LBB63_74
# %bb.73:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	movl	std_hand_value+44, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+44
	jmp	.LBB63_75
.LBB63_74:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	movl	std_hand_value+48, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+48
.LBB63_75:
	movabsq	$.L.str.45, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_76:
	movabsq	$.L.str.33, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_81
# %bb.77:
	cmpl	$1, comp_color
	jne	.LBB63_79
# %bb.78:
	movl	std_hand_value+4, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+4
	movl	std_hand_value+44, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+44
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	jmp	.LBB63_80
.LBB63_79:
	movl	std_hand_value+8, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+8
	movl	std_hand_value+48, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+48
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
.LBB63_80:
	movabsq	$.L.str.46, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_81:
	movabsq	$.L.str.34, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_86
# %bb.82:
	cmpl	$1, comp_color
	jne	.LBB63_84
# %bb.83:
	movl	std_hand_value+28, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+28
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	jmp	.LBB63_85
.LBB63_84:
	movl	std_hand_value+32, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+32
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
.LBB63_85:
	movabsq	$.L.str.47, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_86:
	jmp	.LBB63_185
.LBB63_87:
	movabsq	$.L.str.48, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_155
# %bb.88:
	movabsq	$.L.str.27.47, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_96
# %bb.89:
	movabsq	$.L.str.28, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
# %bb.90:
	movabsq	$.L.str.29, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
# %bb.91:
	movabsq	$.L.str.30, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
# %bb.92:
	movabsq	$.L.str.31, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
# %bb.93:
	movabsq	$.L.str.32, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
# %bb.94:
	movabsq	$.L.str.33, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
# %bb.95:
	movabsq	$.L.str.34, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_100
.LBB63_96:
	cmpl	$1, comp_color
	jne	.LBB63_98
# %bb.97:
	movl	hand_value+8, %eax
	subl	$20, %eax
	movl	%eax, hand_value+8
	movl	hand_value+16, %eax
	subl	$50, %eax
	movl	%eax, hand_value+16
	movl	hand_value+48, %eax
	subl	$50, %eax
	movl	%eax, hand_value+48
	movl	hand_value+32, %eax
	subl	$50, %eax
	movl	%eax, hand_value+32
	movl	hand_value+40, %eax
	subl	$100, %eax
	movl	%eax, hand_value+40
	jmp	.LBB63_99
.LBB63_98:
	movl	hand_value+4, %eax
	addl	$20, %eax
	movl	%eax, hand_value+4
	movl	hand_value+12, %eax
	addl	$50, %eax
	movl	%eax, hand_value+12
	movl	hand_value+44, %eax
	addl	$50, %eax
	movl	%eax, hand_value+44
	movl	hand_value+28, %eax
	addl	$50, %eax
	movl	%eax, hand_value+28
	movl	hand_value+36, %eax
	addl	$100, %eax
	movl	%eax, hand_value+36
.LBB63_99:
	movabsq	$.L.str.49, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_110
.LBB63_100:
	movabsq	$.L.str.50, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_102
# %bb.101:
	leaq	-112(%rbp), %rdi
	movl	$50000, -12(%rbp)       # imm = 0xC350
	movl	$.L.str.51, %esi
	callq	strcpy
	jmp	.LBB63_109
.LBB63_102:
	movabsq	$.L.str.52, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_104
# %bb.103:
	leaq	-112(%rbp), %rdi
	movl	$1000, -12(%rbp)        # imm = 0x3E8
	movl	$.L.str.53, %esi
	callq	strcpy
	jmp	.LBB63_108
.LBB63_104:
	movabsq	$.L.str.48, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_106
# %bb.105:
	leaq	-112(%rbp), %rdi
	movl	$150, -12(%rbp)
	movl	$.L.str.54, %esi
	callq	strcpy
	jmp	.LBB63_107
.LBB63_106:
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB63_107:
	jmp	.LBB63_108
.LBB63_108:
	jmp	.LBB63_109
.LBB63_109:
	jmp	.LBB63_110
.LBB63_110:
	movabsq	$.L.str.28, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_115
# %bb.111:
	cmpl	$1, comp_color
	jne	.LBB63_113
# %bb.112:
	movl	std_hand_value+16, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+16
	jmp	.LBB63_114
.LBB63_113:
	movl	std_hand_value+12, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+12
.LBB63_114:
	movabsq	$.L.str.41, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_115:
	movabsq	$.L.str.29, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_123
# %bb.116:
	cmpl	$1, comp_color
	jne	.LBB63_118
# %bb.117:
	movl	std_hand_value+48, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+48
	jmp	.LBB63_119
.LBB63_118:
	movl	std_hand_value+44, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+44
.LBB63_119:
	cmpl	$1, comp_color
	jne	.LBB63_121
# %bb.120:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	jmp	.LBB63_122
.LBB63_121:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
.LBB63_122:
	movabsq	$.L.str.42, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_123:
	movabsq	$.L.str.31, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_131
# %bb.124:
	cmpl	$1, comp_color
	jne	.LBB63_126
# %bb.125:
	movl	std_hand_value+32, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+32
	jmp	.LBB63_127
.LBB63_126:
	movl	std_hand_value+28, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+28
.LBB63_127:
	cmpl	$1, comp_color
	jne	.LBB63_129
# %bb.128:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	jmp	.LBB63_130
.LBB63_129:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
.LBB63_130:
	movabsq	$.L.str.43, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_131:
	movabsq	$.L.str.32, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_136
# %bb.132:
	cmpl	$1, comp_color
	jne	.LBB63_134
# %bb.133:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	jmp	.LBB63_135
.LBB63_134:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
.LBB63_135:
	movabsq	$.L.str.44, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_136:
	movabsq	$.L.str.30, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_144
# %bb.137:
	cmpl	$1, comp_color
	jne	.LBB63_139
# %bb.138:
	movl	std_hand_value+8, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+8
	jmp	.LBB63_140
.LBB63_139:
	movl	std_hand_value+4, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+4
.LBB63_140:
	cmpl	$1, comp_color
	jne	.LBB63_142
# %bb.141:
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	movl	std_hand_value+48, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+48
	jmp	.LBB63_143
.LBB63_142:
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
	movl	std_hand_value+44, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+44
.LBB63_143:
	movabsq	$.L.str.45, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_144:
	movabsq	$.L.str.33, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_149
# %bb.145:
	cmpl	$1, comp_color
	jne	.LBB63_147
# %bb.146:
	movl	std_hand_value+8, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+8
	movl	std_hand_value+48, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+48
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	jmp	.LBB63_148
.LBB63_147:
	movl	std_hand_value+4, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+4
	movl	std_hand_value+44, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+44
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
.LBB63_148:
	movabsq	$.L.str.46, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_149:
	movabsq	$.L.str.34, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_154
# %bb.150:
	cmpl	$1, comp_color
	jne	.LBB63_152
# %bb.151:
	movl	std_hand_value+32, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+32
	movl	std_hand_value+40, %eax
	subl	-12(%rbp), %eax
	movl	%eax, hand_value+40
	jmp	.LBB63_153
.LBB63_152:
	movl	std_hand_value+28, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+28
	movl	std_hand_value+36, %eax
	addl	-12(%rbp), %eax
	movl	%eax, hand_value+36
.LBB63_153:
	movabsq	$.L.str.47, %rdi
	leaq	-112(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB63_154:
	jmp	.LBB63_184
.LBB63_155:
	movabsq	$.L.str.55, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB63_160
# %bb.156:
	movabsq	$.L.str.56, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_160
# %bb.157:
	movabsq	$.L.str.57, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_159
# %bb.158:
	movabsq	$.L.str.58, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_160
.LBB63_159:
	movabsq	$.L.str.59, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_162
.LBB63_160:
	movabsq	$.L.str.60, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB63_162
# %bb.161:
	movabsq	$.L.str.61, %rdi
	movb	$0, %al
	callq	printf
	callq	ResetHandValue
	movl	$0, must_sit
	movl	$0, partnerdead
	movl	$0, piecedead
	jmp	.LBB63_183
.LBB63_162:
	movabsq	$.L.str.62, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$25, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB63_164
# %bb.163:
	movabsq	$.L.str.63, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_165
.LBB63_164:
	movl	$1, go_fast
	movl	$0, must_sit
	movl	$1, partnerdead
	jmp	.LBB63_182
.LBB63_165:
	movabsq	$.L.str.64, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$26, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_167
# %bb.166:
	movl	$1, go_fast
	movl	$0, must_sit
	movl	$1, piecedead
	jmp	.LBB63_181
.LBB63_167:
	movabsq	$.L.str.8.35, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_169
# %bb.168:
	jmp	.LBB63_192
.LBB63_169:
	movabsq	$.L.str.65, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_171
# %bb.170:
	jmp	.LBB63_192
.LBB63_171:
	movabsq	$.L.str.66, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB63_173
# %bb.172:
	movabsq	$.L.str.67, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB63_174
.LBB63_173:
	movabsq	$.L.str.68, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_178
.LBB63_174:
	movabsq	$.L.str.69, %rsi
	movq	-24(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB63_176
# %bb.175:
	movabsq	$.L.str.70, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.3.30, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB63_177
.LBB63_176:
	movabsq	$.L.str.71, %rdi
	movb	$0, %al
	callq	printf
.LBB63_177:
	jmp	.LBB63_178
.LBB63_178:
	jmp	.LBB63_179
.LBB63_179:
	jmp	.LBB63_180
.LBB63_180:
	jmp	.LBB63_181
.LBB63_181:
	jmp	.LBB63_182
.LBB63_182:
	jmp	.LBB63_183
.LBB63_183:
	jmp	.LBB63_184
.LBB63_184:
	jmp	.LBB63_185
.LBB63_185:
	jmp	.LBB63_186
.LBB63_186:
	jmp	.LBB63_187
.LBB63_187:
	jmp	.LBB63_188
.LBB63_188:
	jmp	.LBB63_189
.LBB63_189:
	jmp	.LBB63_190
.LBB63_190:
	jmp	.LBB63_191
.LBB63_191:
	jmp	.LBB63_192
.LBB63_192:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end63:
	.size	HandlePtell, .Lfunc_end63-HandlePtell
	.cfi_endproc
                                        # -- End function
	.globl	CheckBadFlow            # -- Begin function CheckBadFlow
	.p2align	4, 0x90
	.type	CheckBadFlow,@function
CheckBadFlow:                           # @CheckBadFlow
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$24656, %rsp            # imm = 0x6050
	movl	%edi, -72(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB64_2
# %bb.1:
	movl	$0, CheckBadFlow.pawnmated
	movl	$0, CheckBadFlow.knightmated
	movl	$0, CheckBadFlow.bishopmated
	movl	$0, CheckBadFlow.rookmated
	movl	$0, CheckBadFlow.queenmated
	jmp	.LBB64_161
.LBB64_2:
	callq	in_check
	movl	$2, %ecx
	movl	$1, %edx
	movabsq	$holding, %rsi
	movl	%eax, -48(%rbp)
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	white_to_move, %eax
	cmpl	$0, %eax
	cmovnel	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$0, (%rsi,%rax,4)
	jne	.LBB64_20
# %bb.3:
	movl	$2, %edi
	movl	$1, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropaddHolding
	leaq	-24656(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB64_4:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_9 Depth 2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	cmpl	-40(%rbp), %ecx
	jge	.LBB64_6
# %bb.5:                                #   in Loop: Header=BB64_4 Depth=1
	cmpl	$0, -28(%rbp)
	sete	%al
.LBB64_6:                               #   in Loop: Header=BB64_4 Depth=1
	testb	$1, %al
	jne	.LBB64_7
	jmp	.LBB64_19
.LBB64_7:                               #   in Loop: Header=BB64_4 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-48(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_17
# %bb.8:                                #   in Loop: Header=BB64_4 Depth=1
	movl	$3, -28(%rbp)
	callq	in_check
	leaq	-12368(%rbp), %rdi
	movl	%eax, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB64_9:                               #   Parent Loop BB64_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-8(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	jge	.LBB64_11
# %bb.10:                               #   in Loop: Header=BB64_9 Depth=2
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB64_11:                              #   in Loop: Header=BB64_9 Depth=2
	testb	$1, %al
	jne	.LBB64_12
	jmp	.LBB64_16
.LBB64_12:                              #   in Loop: Header=BB64_9 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	make
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_14
# %bb.13:                               #   in Loop: Header=BB64_9 Depth=2
	movl	$0, -28(%rbp)
.LBB64_14:                              #   in Loop: Header=BB64_9 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	unmake
# %bb.15:                               #   in Loop: Header=BB64_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_9
.LBB64_16:                              #   in Loop: Header=BB64_4 Depth=1
	jmp	.LBB64_17
.LBB64_17:                              #   in Loop: Header=BB64_4 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.18:                               #   in Loop: Header=BB64_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_4
.LBB64_19:
	movl	$2, %edi
	movl	$1, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropremoveHolding
.LBB64_20:
	movl	$4, %eax
	movl	$3, %esi
	movabsq	$holding, %rdx
	cmpl	$0, white_to_move
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%esi, %eax
	cltq
	cmpl	$0, (%rdx,%rax,4)
	jne	.LBB64_38
# %bb.21:
	movl	$4, %edi
	movl	$3, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropaddHolding
	leaq	-24656(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB64_22:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_27 Depth 2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	cmpl	-40(%rbp), %ecx
	jge	.LBB64_24
# %bb.23:                               #   in Loop: Header=BB64_22 Depth=1
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB64_24:                              #   in Loop: Header=BB64_22 Depth=1
	testb	$1, %al
	jne	.LBB64_25
	jmp	.LBB64_37
.LBB64_25:                              #   in Loop: Header=BB64_22 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-48(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_35
# %bb.26:                               #   in Loop: Header=BB64_22 Depth=1
	movl	$3, -24(%rbp)
	callq	in_check
	leaq	-12368(%rbp), %rdi
	movl	%eax, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB64_27:                              #   Parent Loop BB64_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-8(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	jge	.LBB64_29
# %bb.28:                               #   in Loop: Header=BB64_27 Depth=2
	cmpl	$0, -24(%rbp)
	setne	%al
.LBB64_29:                              #   in Loop: Header=BB64_27 Depth=2
	testb	$1, %al
	jne	.LBB64_30
	jmp	.LBB64_34
.LBB64_30:                              #   in Loop: Header=BB64_27 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	make
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_32
# %bb.31:                               #   in Loop: Header=BB64_27 Depth=2
	movl	$0, -24(%rbp)
.LBB64_32:                              #   in Loop: Header=BB64_27 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	unmake
# %bb.33:                               #   in Loop: Header=BB64_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_27
.LBB64_34:                              #   in Loop: Header=BB64_22 Depth=1
	jmp	.LBB64_35
.LBB64_35:                              #   in Loop: Header=BB64_22 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.36:                               #   in Loop: Header=BB64_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_22
.LBB64_37:
	movl	$4, %edi
	movl	$3, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropremoveHolding
.LBB64_38:
	movl	$12, %eax
	movl	$11, %esi
	movabsq	$holding, %rdx
	cmpl	$0, white_to_move
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%esi, %eax
	cltq
	cmpl	$0, (%rdx,%rax,4)
	jne	.LBB64_56
# %bb.39:
	movl	$12, %edi
	movl	$11, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropaddHolding
	leaq	-24656(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB64_40:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_45 Depth 2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	cmpl	-40(%rbp), %ecx
	jge	.LBB64_42
# %bb.41:                               #   in Loop: Header=BB64_40 Depth=1
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB64_42:                              #   in Loop: Header=BB64_40 Depth=1
	testb	$1, %al
	jne	.LBB64_43
	jmp	.LBB64_55
.LBB64_43:                              #   in Loop: Header=BB64_40 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-48(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_53
# %bb.44:                               #   in Loop: Header=BB64_40 Depth=1
	movl	$3, -20(%rbp)
	callq	in_check
	leaq	-12368(%rbp), %rdi
	movl	%eax, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB64_45:                              #   Parent Loop BB64_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-8(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	jge	.LBB64_47
# %bb.46:                               #   in Loop: Header=BB64_45 Depth=2
	cmpl	$0, -20(%rbp)
	setne	%al
.LBB64_47:                              #   in Loop: Header=BB64_45 Depth=2
	testb	$1, %al
	jne	.LBB64_48
	jmp	.LBB64_52
.LBB64_48:                              #   in Loop: Header=BB64_45 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	make
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_50
# %bb.49:                               #   in Loop: Header=BB64_45 Depth=2
	movl	$0, -20(%rbp)
.LBB64_50:                              #   in Loop: Header=BB64_45 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	unmake
# %bb.51:                               #   in Loop: Header=BB64_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_45
.LBB64_52:                              #   in Loop: Header=BB64_40 Depth=1
	jmp	.LBB64_53
.LBB64_53:                              #   in Loop: Header=BB64_40 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.54:                               #   in Loop: Header=BB64_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_40
.LBB64_55:
	movl	$12, %edi
	movl	$11, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropremoveHolding
.LBB64_56:
	movl	$8, %eax
	movl	$7, %esi
	movabsq	$holding, %rdx
	cmpl	$0, white_to_move
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%esi, %eax
	cltq
	cmpl	$0, (%rdx,%rax,4)
	jne	.LBB64_74
# %bb.57:
	movl	$8, %edi
	movl	$7, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropaddHolding
	leaq	-24656(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB64_58:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_63 Depth 2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	cmpl	-40(%rbp), %ecx
	jge	.LBB64_60
# %bb.59:                               #   in Loop: Header=BB64_58 Depth=1
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB64_60:                              #   in Loop: Header=BB64_58 Depth=1
	testb	$1, %al
	jne	.LBB64_61
	jmp	.LBB64_73
.LBB64_61:                              #   in Loop: Header=BB64_58 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-48(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_71
# %bb.62:                               #   in Loop: Header=BB64_58 Depth=1
	movl	$3, -16(%rbp)
	callq	in_check
	leaq	-12368(%rbp), %rdi
	movl	%eax, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB64_63:                              #   Parent Loop BB64_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-8(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	jge	.LBB64_65
# %bb.64:                               #   in Loop: Header=BB64_63 Depth=2
	cmpl	$0, -16(%rbp)
	setne	%al
.LBB64_65:                              #   in Loop: Header=BB64_63 Depth=2
	testb	$1, %al
	jne	.LBB64_66
	jmp	.LBB64_70
.LBB64_66:                              #   in Loop: Header=BB64_63 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	make
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_68
# %bb.67:                               #   in Loop: Header=BB64_63 Depth=2
	movl	$0, -16(%rbp)
.LBB64_68:                              #   in Loop: Header=BB64_63 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	unmake
# %bb.69:                               #   in Loop: Header=BB64_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_63
.LBB64_70:                              #   in Loop: Header=BB64_58 Depth=1
	jmp	.LBB64_71
.LBB64_71:                              #   in Loop: Header=BB64_58 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.72:                               #   in Loop: Header=BB64_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_58
.LBB64_73:
	movl	$8, %edi
	movl	$7, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropremoveHolding
.LBB64_74:
	movl	$10, %eax
	movl	$9, %esi
	movabsq	$holding, %rdx
	cmpl	$0, white_to_move
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%esi, %eax
	cltq
	cmpl	$0, (%rdx,%rax,4)
	jne	.LBB64_92
# %bb.75:
	movl	$10, %edi
	movl	$9, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropaddHolding
	leaq	-24656(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB64_76:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_81 Depth 2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	cmpl	-40(%rbp), %ecx
	jge	.LBB64_78
# %bb.77:                               #   in Loop: Header=BB64_76 Depth=1
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB64_78:                              #   in Loop: Header=BB64_76 Depth=1
	testb	$1, %al
	jne	.LBB64_79
	jmp	.LBB64_91
.LBB64_79:                              #   in Loop: Header=BB64_76 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-48(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_89
# %bb.80:                               #   in Loop: Header=BB64_76 Depth=1
	movl	$3, -12(%rbp)
	callq	in_check
	leaq	-12368(%rbp), %rdi
	movl	%eax, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB64_81:                              #   Parent Loop BB64_76 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-8(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	jge	.LBB64_83
# %bb.82:                               #   in Loop: Header=BB64_81 Depth=2
	cmpl	$0, -12(%rbp)
	setne	%al
.LBB64_83:                              #   in Loop: Header=BB64_81 Depth=2
	testb	$1, %al
	jne	.LBB64_84
	jmp	.LBB64_88
.LBB64_84:                              #   in Loop: Header=BB64_81 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	make
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB64_86
# %bb.85:                               #   in Loop: Header=BB64_81 Depth=2
	movl	$0, -12(%rbp)
.LBB64_86:                              #   in Loop: Header=BB64_81 Depth=2
	leaq	-12368(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	unmake
# %bb.87:                               #   in Loop: Header=BB64_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_81
.LBB64_88:                              #   in Loop: Header=BB64_76 Depth=1
	jmp	.LBB64_89
.LBB64_89:                              #   in Loop: Header=BB64_76 Depth=1
	leaq	-24656(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.90:                               #   in Loop: Header=BB64_76 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_76
.LBB64_91:
	movl	$10, %edi
	movl	$9, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	cmpl	$0, white_to_move
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	DropremoveHolding
.LBB64_92:
	movl	-28(%rbp), %eax
	cmpl	CheckBadFlow.pawnmated, %eax
	je	.LBB64_100
# %bb.93:
	cmpl	$3, -28(%rbp)
	jne	.LBB64_95
# %bb.94:
	movl	$1, -68(%rbp)
	jmp	.LBB64_99
.LBB64_95:
	cmpl	$0, -28(%rbp)
	jne	.LBB64_98
# %bb.96:
	cmpl	$0, CheckBadFlow.pawnmated
	jne	.LBB64_98
# %bb.97:
	movabsq	$.L.str.72, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, -44(%rbp)
.LBB64_98:
	jmp	.LBB64_99
.LBB64_99:
	jmp	.LBB64_100
.LBB64_100:
	movl	-24(%rbp), %eax
	cmpl	CheckBadFlow.knightmated, %eax
	je	.LBB64_108
# %bb.101:
	cmpl	$3, -24(%rbp)
	jne	.LBB64_103
# %bb.102:
	movl	$1, -64(%rbp)
	jmp	.LBB64_107
.LBB64_103:
	cmpl	$0, -24(%rbp)
	jne	.LBB64_106
# %bb.104:
	cmpl	$0, CheckBadFlow.knightmated
	jne	.LBB64_106
# %bb.105:
	movabsq	$.L.str.73, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, -44(%rbp)
.LBB64_106:
	jmp	.LBB64_107
.LBB64_107:
	jmp	.LBB64_108
.LBB64_108:
	movl	-20(%rbp), %eax
	cmpl	CheckBadFlow.bishopmated, %eax
	je	.LBB64_116
# %bb.109:
	cmpl	$3, -20(%rbp)
	jne	.LBB64_111
# %bb.110:
	movl	$1, -60(%rbp)
	jmp	.LBB64_115
.LBB64_111:
	cmpl	$0, -20(%rbp)
	jne	.LBB64_114
# %bb.112:
	cmpl	$0, CheckBadFlow.bishopmated
	jne	.LBB64_114
# %bb.113:
	movabsq	$.L.str.74, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, -44(%rbp)
.LBB64_114:
	jmp	.LBB64_115
.LBB64_115:
	jmp	.LBB64_116
.LBB64_116:
	movl	-16(%rbp), %eax
	cmpl	CheckBadFlow.rookmated, %eax
	je	.LBB64_124
# %bb.117:
	cmpl	$3, -16(%rbp)
	jne	.LBB64_119
# %bb.118:
	movl	$1, -56(%rbp)
	jmp	.LBB64_123
.LBB64_119:
	cmpl	$0, -16(%rbp)
	jne	.LBB64_122
# %bb.120:
	cmpl	$0, CheckBadFlow.rookmated
	jne	.LBB64_122
# %bb.121:
	movabsq	$.L.str.75, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, -44(%rbp)
.LBB64_122:
	jmp	.LBB64_123
.LBB64_123:
	jmp	.LBB64_124
.LBB64_124:
	movl	-12(%rbp), %eax
	cmpl	CheckBadFlow.queenmated, %eax
	je	.LBB64_132
# %bb.125:
	cmpl	$3, -12(%rbp)
	jne	.LBB64_127
# %bb.126:
	movl	$1, -52(%rbp)
	jmp	.LBB64_131
.LBB64_127:
	cmpl	$0, -12(%rbp)
	jne	.LBB64_130
# %bb.128:
	cmpl	$0, CheckBadFlow.queenmated
	jne	.LBB64_130
# %bb.129:
	movabsq	$.L.str.76, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, -44(%rbp)
.LBB64_130:
	jmp	.LBB64_131
.LBB64_131:
	jmp	.LBB64_132
.LBB64_132:
	cmpl	$0, -68(%rbp)
	je	.LBB64_134
# %bb.133:
	movabsq	$.L.str.77, %rdi
	movb	$0, %al
	callq	printf
.LBB64_134:
	cmpl	$0, -64(%rbp)
	je	.LBB64_136
# %bb.135:
	movabsq	$.L.str.78, %rdi
	movb	$0, %al
	callq	printf
.LBB64_136:
	cmpl	$0, -60(%rbp)
	je	.LBB64_138
# %bb.137:
	movabsq	$.L.str.79, %rdi
	movb	$0, %al
	callq	printf
.LBB64_138:
	cmpl	$0, -56(%rbp)
	je	.LBB64_140
# %bb.139:
	movabsq	$.L.str.80, %rdi
	movb	$0, %al
	callq	printf
.LBB64_140:
	cmpl	$0, -52(%rbp)
	je	.LBB64_142
# %bb.141:
	movabsq	$.L.str.81, %rdi
	movb	$0, %al
	callq	printf
.LBB64_142:
	cmpl	$0, piecedead
	je	.LBB64_145
# %bb.143:
	cmpl	$0, -44(%rbp)
	je	.LBB64_145
# %bb.144:
	movabsq	$.L.str.82, %rdi
	movl	$0, piecedead
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.83, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, go_fast
.LBB64_145:
	cmpl	$0, -28(%rbp)
	je	.LBB64_147
# %bb.146:
	movl	-28(%rbp), %eax
	movl	%eax, CheckBadFlow.pawnmated
	jmp	.LBB64_148
.LBB64_147:
	movl	CheckBadFlow.pawnmated, %eax
	addl	$-1, %eax
	movl	%eax, CheckBadFlow.pawnmated
.LBB64_148:
	cmpl	$0, -20(%rbp)
	je	.LBB64_150
# %bb.149:
	movl	-20(%rbp), %eax
	movl	%eax, CheckBadFlow.bishopmated
	jmp	.LBB64_151
.LBB64_150:
	movl	CheckBadFlow.bishopmated, %eax
	addl	$-1, %eax
	movl	%eax, CheckBadFlow.bishopmated
.LBB64_151:
	cmpl	$0, -16(%rbp)
	je	.LBB64_153
# %bb.152:
	movl	-16(%rbp), %eax
	movl	%eax, CheckBadFlow.rookmated
	jmp	.LBB64_154
.LBB64_153:
	movl	CheckBadFlow.rookmated, %eax
	addl	$-1, %eax
	movl	%eax, CheckBadFlow.rookmated
.LBB64_154:
	cmpl	$0, -12(%rbp)
	je	.LBB64_156
# %bb.155:
	movl	-12(%rbp), %eax
	movl	%eax, CheckBadFlow.queenmated
	jmp	.LBB64_157
.LBB64_156:
	movl	CheckBadFlow.queenmated, %eax
	addl	$-1, %eax
	movl	%eax, CheckBadFlow.queenmated
.LBB64_157:
	cmpl	$0, -24(%rbp)
	je	.LBB64_159
# %bb.158:
	movl	-24(%rbp), %eax
	movl	%eax, CheckBadFlow.knightmated
	jmp	.LBB64_160
.LBB64_159:
	movl	CheckBadFlow.knightmated, %eax
	addl	$-1, %eax
	movl	%eax, CheckBadFlow.knightmated
.LBB64_160:
.LBB64_161:
	addq	$24656, %rsp            # imm = 0x6050
	popq	%rbp
	retq
.Lfunc_end64:
	.size	CheckBadFlow, .Lfunc_end64-CheckBadFlow
	.cfi_endproc
                                        # -- End function
	.globl	Xmalloc                 # -- Begin function Xmalloc
	.p2align	4, 0x90
	.type	Xmalloc,@function
Xmalloc:                                # @Xmalloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	bufftop, %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %eax
	addl	bufftop, %eax
	movl	%eax, bufftop
	movq	membuff, %rax
	movslq	-4(%rbp), %rcx
	addq	%rcx, %rax
	popq	%rbp
	retq
.Lfunc_end65:
	.size	Xmalloc, .Lfunc_end65-Xmalloc
	.cfi_endproc
                                        # -- End function
	.globl	Xfree                   # -- Begin function Xfree
	.p2align	4, 0x90
	.type	Xfree,@function
Xfree:                                  # @Xfree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$0, bufftop
	popq	%rbp
	retq
.Lfunc_end66:
	.size	Xfree, .Lfunc_end66-Xfree
	.cfi_endproc
                                        # -- End function
	.globl	freenodes               # -- Begin function freenodes
	.p2align	4, 0x90
	.type	freenodes,@function
freenodes:                              # @freenodes
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB67_2
# %bb.1:
	jmp	.LBB67_13
.LBB67_2:
	movq	-16(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.LBB67_12
# %bb.3:
	movq	-16(%rbp), %rax
	movzbl	1(%rax), %eax
	cmpl	$0, %eax
	jle	.LBB67_11
# %bb.4:
	movl	$0, -4(%rbp)
.LBB67_5:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	1(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_10
# %bb.6:                                #   in Loop: Header=BB67_5 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB67_8
# %bb.7:                                #   in Loop: Header=BB67_5 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	freenodes
.LBB67_8:                               #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_9
.LBB67_9:                               #   in Loop: Header=BB67_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_5
.LBB67_10:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	free
.LBB67_11:
	jmp	.LBB67_12
.LBB67_12:
	movq	-16(%rbp), %rdi
	callq	free
.LBB67_13:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end67:
	.size	freenodes, .Lfunc_end67-freenodes
	.cfi_endproc
                                        # -- End function
	.globl	pn_eval                 # -- Begin function pn_eval
	.p2align	4, 0x90
	.type	pn_eval,@function
pn_eval:                                # @pn_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpl	$3, Variant
	jne	.LBB68_2
# %bb.1:
	movq	-8(%rbp), %rdi
	callq	suicide_pn_eval
	jmp	.LBB68_6
.LBB68_2:
	cmpl	$4, Variant
	jne	.LBB68_4
# %bb.3:
	movq	-8(%rbp), %rdi
	callq	losers_pn_eval
	jmp	.LBB68_5
.LBB68_4:
	movq	-8(%rbp), %rdi
	callq	std_pn_eval
.LBB68_5:
	jmp	.LBB68_6
.LBB68_6:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end68:
	.size	pn_eval, .Lfunc_end68-pn_eval
	.cfi_endproc
                                        # -- End function
	.globl	suicide_pn_eval         # -- Begin function suicide_pn_eval
	.p2align	4, 0x90
	.type	suicide_pn_eval,@function
suicide_pn_eval:                        # @suicide_pn_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movb	$1, 3(%rax)
	movl	$1, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB69_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB69_24
# %bb.2:                                #   in Loop: Header=BB69_1 Depth=1
	movslq	-16(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB69_4
# %bb.3:                                #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_23
.LBB69_4:                               #   in Loop: Header=BB69_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
# %bb.5:                                #   in Loop: Header=BB69_1 Depth=1
	movslq	-28(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB69_17
	jmp	.LBB69_6
.LBB69_6:                               #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB69_18
	jmp	.LBB69_7
.LBB69_7:                               #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$3, %ecx
	je	.LBB69_17
	jmp	.LBB69_8
.LBB69_8:                               #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$4, %ecx
	je	.LBB69_18
	jmp	.LBB69_9
.LBB69_9:                               #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$5, %ecx
	je	.LBB69_17
	jmp	.LBB69_10
.LBB69_10:                              #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$6, %ecx
	je	.LBB69_18
	jmp	.LBB69_11
.LBB69_11:                              #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$7, %ecx
	je	.LBB69_17
	jmp	.LBB69_12
.LBB69_12:                              #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB69_18
	jmp	.LBB69_13
.LBB69_13:                              #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$9, %ecx
	je	.LBB69_17
	jmp	.LBB69_14
.LBB69_14:                              #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$10, %ecx
	je	.LBB69_18
	jmp	.LBB69_15
.LBB69_15:                              #   in Loop: Header=BB69_1 Depth=1
	movl	%eax, %ecx
	subl	$11, %ecx
	je	.LBB69_17
	jmp	.LBB69_16
.LBB69_16:                              #   in Loop: Header=BB69_1 Depth=1
	subl	$12, %eax
	je	.LBB69_18
	jmp	.LBB69_19
.LBB69_17:                              #   in Loop: Header=BB69_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_19
.LBB69_18:                              #   in Loop: Header=BB69_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB69_19:                              #   in Loop: Header=BB69_1 Depth=1
	cmpl	$0, -8(%rbp)
	je	.LBB69_22
# %bb.20:                               #   in Loop: Header=BB69_1 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB69_22
# %bb.21:
	jmp	.LBB69_25
.LBB69_22:                              #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_23
.LBB69_23:                              #   in Loop: Header=BB69_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_1
.LBB69_24:                              # %.loopexit
	jmp	.LBB69_25
.LBB69_25:
	cmpl	$0, -8(%rbp)
	jne	.LBB69_30
# %bb.26:
	cmpl	$0, root_to_move
	jne	.LBB69_28
# %bb.27:
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
	jmp	.LBB69_29
.LBB69_28:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
.LBB69_29:
	jmp	.LBB69_37
.LBB69_30:
	cmpl	$0, -4(%rbp)
	jne	.LBB69_35
# %bb.31:
	cmpl	$0, root_to_move
	jne	.LBB69_33
# %bb.32:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
	jmp	.LBB69_34
.LBB69_33:
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
.LBB69_34:
	jmp	.LBB69_36
.LBB69_35:
	movq	-24(%rbp), %rax
	movb	$2, (%rax)
.LBB69_36:
	jmp	.LBB69_37
.LBB69_37:
	popq	%rbp
	retq
.Lfunc_end69:
	.size	suicide_pn_eval, .Lfunc_end69-suicide_pn_eval
	.cfi_endproc
                                        # -- End function
	.globl	losers_pn_eval          # -- Begin function losers_pn_eval
	.p2align	4, 0x90
	.type	losers_pn_eval,@function
losers_pn_eval:                         # @losers_pn_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12336, %rsp            # imm = 0x3030
	movq	%rdi, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movq	-16(%rbp), %rax
	movb	$1, 3(%rax)
	movl	$1, -36(%rbp)
	movl	$1, -32(%rbp)
.LBB70_1:                               # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB70_22
# %bb.2:                                #   in Loop: Header=BB70_1 Depth=1
	movslq	-36(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB70_4
# %bb.3:                                #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_21
.LBB70_4:                               #   in Loop: Header=BB70_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.5:                                #   in Loop: Header=BB70_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB70_15
	jmp	.LBB70_6
.LBB70_6:                               #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB70_16
	jmp	.LBB70_7
.LBB70_7:                               #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$3, %ecx
	je	.LBB70_15
	jmp	.LBB70_8
.LBB70_8:                               #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$4, %ecx
	je	.LBB70_16
	jmp	.LBB70_9
.LBB70_9:                               #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$7, %ecx
	je	.LBB70_15
	jmp	.LBB70_10
.LBB70_10:                              #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$8, %ecx
	je	.LBB70_16
	jmp	.LBB70_11
.LBB70_11:                              #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$9, %ecx
	je	.LBB70_15
	jmp	.LBB70_12
.LBB70_12:                              #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$10, %ecx
	je	.LBB70_16
	jmp	.LBB70_13
.LBB70_13:                              #   in Loop: Header=BB70_1 Depth=1
	movl	%eax, %ecx
	subl	$11, %ecx
	je	.LBB70_15
	jmp	.LBB70_14
.LBB70_14:                              #   in Loop: Header=BB70_1 Depth=1
	subl	$12, %eax
	je	.LBB70_16
	jmp	.LBB70_17
.LBB70_15:                              #   in Loop: Header=BB70_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB70_17
.LBB70_16:                              #   in Loop: Header=BB70_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB70_17:                              #   in Loop: Header=BB70_1 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB70_20
# %bb.18:                               #   in Loop: Header=BB70_1 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB70_20
# %bb.19:
	jmp	.LBB70_23
.LBB70_20:                              #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_21
.LBB70_21:                              #   in Loop: Header=BB70_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB70_1
.LBB70_22:                              # %.loopexit2
	jmp	.LBB70_23
.LBB70_23:
	cmpl	$0, -24(%rbp)
	jne	.LBB70_28
# %bb.24:
	cmpl	$0, root_to_move
	jne	.LBB70_26
# %bb.25:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	jmp	.LBB70_27
.LBB70_26:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB70_27:
	jmp	.LBB70_62
.LBB70_28:
	cmpl	$0, -20(%rbp)
	jne	.LBB70_33
# %bb.29:
	cmpl	$0, root_to_move
	je	.LBB70_31
# %bb.30:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	jmp	.LBB70_32
.LBB70_31:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB70_32:
	jmp	.LBB70_62
.LBB70_33:
	jmp	.LBB70_34
.LBB70_34:
	cmpl	$0, white_to_move
	je	.LBB70_36
# %bb.35:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	jne	.LBB70_38
.LBB70_36:
	cmpl	$0, white_to_move
	jne	.LBB70_61
# %bb.37:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB70_61
.LBB70_38:
	leaq	-12336(%rbp), %rdi
	movl	$1, captures
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
	movl	$0, captures
	movl	$1, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB70_39:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB70_44
# %bb.40:                               #   in Loop: Header=BB70_39 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB70_42
# %bb.41:
	leaq	-12336(%rbp), %rdi
	movl	$0, -28(%rbp)
	movl	-4(%rbp), %esi
	callq	unmake
	jmp	.LBB70_45
.LBB70_42:                              #   in Loop: Header=BB70_39 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.43:                               #   in Loop: Header=BB70_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_39
.LBB70_44:                              # %.loopexit1
	jmp	.LBB70_45
.LBB70_45:
	cmpl	$1, -28(%rbp)
	jne	.LBB70_54
# %bb.46:
	leaq	-12336(%rbp), %rdi
	movl	$0, captures
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB70_47:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB70_52
# %bb.48:                               #   in Loop: Header=BB70_47 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB70_50
# %bb.49:
	leaq	-12336(%rbp), %rdi
	movl	$0, -28(%rbp)
	movl	-4(%rbp), %esi
	callq	unmake
	jmp	.LBB70_53
.LBB70_50:                              #   in Loop: Header=BB70_47 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.51:                               #   in Loop: Header=BB70_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_47
.LBB70_52:                              # %.loopexit
	jmp	.LBB70_53
.LBB70_53:
	jmp	.LBB70_54
.LBB70_54:
	cmpl	$1, -28(%rbp)
	jne	.LBB70_59
# %bb.55:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	jne	.LBB70_57
# %bb.56:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
	jmp	.LBB70_58
.LBB70_57:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB70_58:
	jmp	.LBB70_60
.LBB70_59:
	movq	-16(%rbp), %rax
	movb	$2, (%rax)
.LBB70_60:
	jmp	.LBB70_62
.LBB70_61:
	movq	-16(%rbp), %rax
	movb	$2, (%rax)
.LBB70_62:
	addq	$12336, %rsp            # imm = 0x3030
	popq	%rbp
	retq
.Lfunc_end70:
	.size	losers_pn_eval, .Lfunc_end70-losers_pn_eval
	.cfi_endproc
                                        # -- End function
	.globl	std_pn_eval             # -- Begin function std_pn_eval
	.p2align	4, 0x90
	.type	std_pn_eval,@function
std_pn_eval:                            # @std_pn_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12320, %rsp            # imm = 0x3020
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movb	$1, 3(%rax)
	cmpl	$0, white_to_move
	je	.LBB71_2
# %bb.1:
	movl	wking_loc, %edi
	xorl	%esi, %esi
	callq	is_attacked
	cmpl	$0, %eax
	jne	.LBB71_4
.LBB71_2:
	cmpl	$0, white_to_move
	jne	.LBB71_18
# %bb.3:
	movl	bking_loc, %edi
	movl	$1, %esi
	callq	is_attacked
	cmpl	$0, %eax
	je	.LBB71_18
.LBB71_4:
	leaq	-12320(%rbp), %rdi
	movl	$0, -24(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -24(%rbp)
	movl	$1, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB71_5:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_10
# %bb.6:                                #   in Loop: Header=BB71_5 Depth=1
	leaq	-12320(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12320(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB71_8
# %bb.7:
	leaq	-12320(%rbp), %rdi
	movl	$0, -20(%rbp)
	movl	-4(%rbp), %esi
	callq	unmake
	jmp	.LBB71_11
.LBB71_8:                               #   in Loop: Header=BB71_5 Depth=1
	leaq	-12320(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.9:                                #   in Loop: Header=BB71_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_5
.LBB71_10:                              # %.loopexit
	jmp	.LBB71_11
.LBB71_11:
	cmpl	$1, -20(%rbp)
	jne	.LBB71_16
# %bb.12:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	jne	.LBB71_14
# %bb.13:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	jmp	.LBB71_15
.LBB71_14:
	movq	-16(%rbp), %rax
	movb	$1, (%rax)
.LBB71_15:
	jmp	.LBB71_17
.LBB71_16:
	movq	-16(%rbp), %rax
	movb	$2, (%rax)
.LBB71_17:
	jmp	.LBB71_19
.LBB71_18:
	movq	-16(%rbp), %rax
	movb	$2, (%rax)
.LBB71_19:
	addq	$12320, %rsp            # imm = 0x3020
	popq	%rbp
	retq
.Lfunc_end71:
	.size	std_pn_eval, .Lfunc_end71-std_pn_eval
	.cfi_endproc
                                        # -- End function
	.globl	select_most_proving     # -- Begin function select_most_proving
	.p2align	4, 0x90
	.type	select_most_proving,@function
select_most_proving:                    # @select_most_proving
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB72_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_4 Depth 2
                                        #     Child Loop BB72_8 Depth 2
	movq	-16(%rbp), %rax
	cmpb	$0, 2(%rax)
	je	.LBB72_14
# %bb.2:                                #   in Loop: Header=BB72_1 Depth=1
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	jne	.LBB72_7
# %bb.3:                                #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_4:                               #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	4(%rcx), %eax
	je	.LBB72_6
# %bb.5:                                #   in Loop: Header=BB72_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_4
.LBB72_6:                               #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_11
.LBB72_7:                               #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_8:                               #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB72_10
# %bb.9:                                #   in Loop: Header=BB72_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_8
.LBB72_10:                              #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_11
.LBB72_11:                              #   in Loop: Header=BB72_1 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	hash, %eax
	movl	move_number, %ecx
	addl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, hash_history(,%rcx,4)
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	make
	movl	ply, %eax
	cmpl	maxply, %eax
	jle	.LBB72_13
# %bb.12:                               #   in Loop: Header=BB72_1 Depth=1
	movl	ply, %eax
	movl	%eax, maxply
.LBB72_13:                              #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_1
.LBB72_14:
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end72:
	.size	select_most_proving, .Lfunc_end72-select_most_proving
	.cfi_endproc
                                        # -- End function
	.globl	set_proof_and_disproof_numbers # -- Begin function set_proof_and_disproof_numbers
	.p2align	4, 0x90
	.type	set_proof_and_disproof_numbers,@function
set_proof_and_disproof_numbers:         # @set_proof_and_disproof_numbers
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12336, %rsp            # imm = 0x3030
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpb	$0, 2(%rax)
	je	.LBB73_35
# %bb.1:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	je	.LBB73_18
# %bb.2:
	movl	$0, -28(%rbp)
	movl	$100000000, -24(%rbp)   # imm = 0x5F5E100
	movl	$0, -4(%rbp)
.LBB73_3:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	1(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_10
# %bb.4:                                #   in Loop: Header=BB73_3 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	cmpl	$100000000, -28(%rbp)   # imm = 0x5F5E100
	jle	.LBB73_6
# %bb.5:                                #   in Loop: Header=BB73_3 Depth=1
	movl	$100000000, -28(%rbp)   # imm = 0x5F5E100
.LBB73_6:                               #   in Loop: Header=BB73_3 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_8
# %bb.7:                                #   in Loop: Header=BB73_3 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB73_8:                               #   in Loop: Header=BB73_3 Depth=1
	jmp	.LBB73_9
.LBB73_9:                               #   in Loop: Header=BB73_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_3
.LBB73_10:
	cmpl	$0, -28(%rbp)
	je	.LBB73_12
# %bb.11:
	cmpl	$100000000, -24(%rbp)   # imm = 0x5F5E100
	jne	.LBB73_13
.LBB73_12:
	movl	forwards, %eax
	addl	$1, %eax
	movl	%eax, forwards
	movl	$999500, %edi           # imm = 0xF404C
	movl	$1000000, %esi          # imm = 0xF4240
	movl	$4293967296, %edx       # imm = 0xFFF0BDC0
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	movl	$200, %r9d
	callq	StoreTT
	jmp	.LBB73_17
.LBB73_13:
	cmpl	$0, -24(%rbp)
	je	.LBB73_15
# %bb.14:
	cmpl	$100000000, -28(%rbp)   # imm = 0x5F5E100
	jne	.LBB73_16
.LBB73_15:
	movl	forwards, %eax
	addl	$1, %eax
	movl	%eax, forwards
	movl	$4293967796, %edi       # imm = 0xFFF0BFB4
	movl	$1000000, %esi          # imm = 0xF4240
	movl	$4293967296, %edx       # imm = 0xFFF0BDC0
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	movl	$200, %r9d
	callq	StoreTT
.LBB73_16:
	jmp	.LBB73_17
.LBB73_17:
	jmp	.LBB73_34
.LBB73_18:
	movl	$0, -24(%rbp)
	movl	$100000000, -28(%rbp)   # imm = 0x5F5E100
	movl	$0, -4(%rbp)
.LBB73_19:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	1(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_26
# %bb.20:                               #   in Loop: Header=BB73_19 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	cmpl	$100000000, -24(%rbp)   # imm = 0x5F5E100
	jle	.LBB73_22
# %bb.21:                               #   in Loop: Header=BB73_19 Depth=1
	movl	$100000000, -24(%rbp)   # imm = 0x5F5E100
.LBB73_22:                              #   in Loop: Header=BB73_19 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_24
# %bb.23:                               #   in Loop: Header=BB73_19 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB73_24:                              #   in Loop: Header=BB73_19 Depth=1
	jmp	.LBB73_25
.LBB73_25:                              #   in Loop: Header=BB73_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_19
.LBB73_26:
	cmpl	$0, -28(%rbp)
	je	.LBB73_28
# %bb.27:
	cmpl	$100000000, -24(%rbp)   # imm = 0x5F5E100
	jne	.LBB73_29
.LBB73_28:
	movl	forwards, %eax
	addl	$1, %eax
	movl	%eax, forwards
	movl	$999500, %edi           # imm = 0xF404C
	movl	$1000000, %esi          # imm = 0xF4240
	movl	$4293967296, %edx       # imm = 0xFFF0BDC0
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	movl	$200, %r9d
	callq	StoreTT
	jmp	.LBB73_33
.LBB73_29:
	cmpl	$0, -24(%rbp)
	je	.LBB73_31
# %bb.30:
	cmpl	$100000000, -28(%rbp)   # imm = 0x5F5E100
	jne	.LBB73_32
.LBB73_31:
	movl	forwards, %eax
	addl	$1, %eax
	movl	%eax, forwards
	movl	$4293967796, %edi       # imm = 0xFFF0BFB4
	movl	$1000000, %esi          # imm = 0xF4240
	movl	$4293967296, %edx       # imm = 0xFFF0BDC0
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	movl	$200, %r9d
	callq	StoreTT
.LBB73_32:
	jmp	.LBB73_33
.LBB73_33:
	jmp	.LBB73_34
.LBB73_34:
	movl	hash, %eax
	movl	move_number, %ecx
	addl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, hash_history(,%rcx,4)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB73_107
.LBB73_35:
	movq	-16(%rbp), %rax
	cmpb	$0, 3(%rax)
	je	.LBB73_105
# %bb.36:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$2, %eax
	jne	.LBB73_95
# %bb.37:
	movl	hash, %eax
	movl	move_number, %ecx
	addl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, hash_history(,%rcx,4)
	callq	is_draw
	cmpl	$0, %eax
	jne	.LBB73_39
# %bb.38:
	cmpl	$200, ply
	jle	.LBB73_40
.LBB73_39:
	movq	-16(%rbp), %rax
	movl	$50000, 4(%rax)         # imm = 0xC350
	movq	-16(%rbp), %rax
	movl	$50000, 8(%rax)         # imm = 0xC350
	jmp	.LBB73_107
.LBB73_40:
	cmpl	$4, Variant
	je	.LBB73_51
# %bb.41:
	leaq	-12336(%rbp), %rdi
	movl	$0, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -32(%rbp)
	callq	in_check
	movl	%eax, -36(%rbp)
	cmpl	$3, Variant
	je	.LBB73_49
# %bb.42:
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB73_43:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_48
# %bb.44:                               #   in Loop: Header=BB73_43 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB73_46
# %bb.45:                               #   in Loop: Header=BB73_43 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB73_46:                              #   in Loop: Header=BB73_43 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.47:                               #   in Loop: Header=BB73_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_43
.LBB73_48:
	jmp	.LBB73_50
.LBB73_49:
	movl	numb_moves, %eax
	movl	%eax, -20(%rbp)
.LBB73_50:
	jmp	.LBB73_68
.LBB73_51:
	leaq	-12336(%rbp), %rdi
	movl	$0, -20(%rbp)
	movl	$1, captures
	movl	$0, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -32(%rbp)
	movl	$0, captures
	callq	in_check
	movl	%eax, -36(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB73_59
# %bb.52:
	movl	$0, -4(%rbp)
.LBB73_53:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_58
# %bb.54:                               #   in Loop: Header=BB73_53 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB73_56
# %bb.55:                               #   in Loop: Header=BB73_53 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB73_56:                              #   in Loop: Header=BB73_53 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.57:                               #   in Loop: Header=BB73_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_53
.LBB73_58:
	jmp	.LBB73_59
.LBB73_59:
	cmpl	$0, -20(%rbp)
	jne	.LBB73_67
# %bb.60:
	leaq	-12336(%rbp), %rdi
	movl	$0, captures
	movl	$0, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB73_61:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_66
# %bb.62:                               #   in Loop: Header=BB73_61 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB73_64
# %bb.63:                               #   in Loop: Header=BB73_61 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB73_64:                              #   in Loop: Header=BB73_61 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.65:                               #   in Loop: Header=BB73_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_66:
	jmp	.LBB73_67
.LBB73_67:
	jmp	.LBB73_68
.LBB73_68:
	cmpl	$0, -20(%rbp)
	jne	.LBB73_70
# %bb.69:
	movq	-16(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	jmp	.LBB73_94
.LBB73_70:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	jne	.LBB73_82
# %bb.71:
	cmpl	$3, Variant
	je	.LBB73_74
# %bb.72:
	cmpl	$4, Variant
	je	.LBB73_74
# %bb.73:
	movl	$50, %ecx
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 4(%rdx)
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 8(%rax)
	jmp	.LBB73_81
.LBB73_74:
	cmpl	$4, Variant
	jne	.LBB73_79
# %bb.75:
	cmpl	$2, phase
	jne	.LBB73_77
# %bb.76:
	movl	$30, %ecx
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 4(%rdx)
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 8(%rax)
	jmp	.LBB73_78
.LBB73_77:
	movl	$80, %ecx
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 4(%rdx)
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 8(%rax)
.LBB73_78:
	jmp	.LBB73_80
.LBB73_79:
	movl	$150, %ecx
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 4(%rdx)
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 8(%rax)
.LBB73_80:
	jmp	.LBB73_81
.LBB73_81:
	jmp	.LBB73_93
.LBB73_82:
	cmpl	$3, Variant
	je	.LBB73_85
# %bb.83:
	cmpl	$4, Variant
	je	.LBB73_85
# %bb.84:
	movl	$50, %ecx
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 4(%rax)
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB73_92
.LBB73_85:
	cmpl	$4, Variant
	jne	.LBB73_90
# %bb.86:
	cmpl	$2, phase
	jne	.LBB73_88
# %bb.87:
	movl	$30, %ecx
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 4(%rax)
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB73_89
.LBB73_88:
	movl	$80, %ecx
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 4(%rax)
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
.LBB73_89:
	jmp	.LBB73_91
.LBB73_90:
	movl	$150, %ecx
	movl	-20(%rbp), %esi
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	%eax, %esi
	movq	-16(%rbp), %rax
	movl	%esi, 4(%rax)
	movl	ply, %eax
	cltd
	idivl	%ecx
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
.LBB73_91:
	jmp	.LBB73_92
.LBB73_92:
	jmp	.LBB73_93
.LBB73_93:
	jmp	.LBB73_94
.LBB73_94:
	jmp	.LBB73_104
.LBB73_95:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB73_97
# %bb.96:
	movq	-16(%rbp), %rax
	movl	$100000000, 4(%rax)     # imm = 0x5F5E100
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	jmp	.LBB73_103
.LBB73_97:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB73_99
# %bb.98:
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-16(%rbp), %rax
	movl	$100000000, 8(%rax)     # imm = 0x5F5E100
	jmp	.LBB73_102
.LBB73_99:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$3, %eax
	jne	.LBB73_101
# %bb.100:
	movq	-16(%rbp), %rax
	movl	$50000, 4(%rax)         # imm = 0xC350
	movq	-16(%rbp), %rax
	movl	$50000, 8(%rax)         # imm = 0xC350
.LBB73_101:
	jmp	.LBB73_102
.LBB73_102:
	jmp	.LBB73_103
.LBB73_103:
	jmp	.LBB73_104
.LBB73_104:
	jmp	.LBB73_106
.LBB73_105:
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 4(%rax)
.LBB73_106:
	jmp	.LBB73_107
.LBB73_107:
	addq	$12336, %rsp            # imm = 0x3030
	popq	%rbp
	retq
.Lfunc_end73:
	.size	set_proof_and_disproof_numbers, .Lfunc_end73-set_proof_and_disproof_numbers
	.cfi_endproc
                                        # -- End function
	.globl	develop_node            # -- Begin function develop_node
	.p2align	4, 0x90
	.type	develop_node,@function
develop_node:                           # @develop_node
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12336, %rsp            # imm = 0x3030
	movq	%rdi, -24(%rbp)
	callq	in_check
	movl	%eax, -32(%rbp)
	cmpl	$4, Variant
	je	.LBB74_2
# %bb.1:
	leaq	-12336(%rbp), %rdi
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_12
.LBB74_2:
	leaq	-12336(%rbp), %rdi
	movl	$1, captures
	movl	$0, -36(%rbp)
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
	movl	$0, captures
	movl	$0, -4(%rbp)
.LBB74_3:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB74_8
# %bb.4:                                #   in Loop: Header=BB74_3 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB74_6
# %bb.5:
	leaq	-12336(%rbp), %rdi
	movl	$1, -36(%rbp)
	movl	-4(%rbp), %esi
	callq	unmake
	jmp	.LBB74_9
.LBB74_6:                               #   in Loop: Header=BB74_3 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.7:                                #   in Loop: Header=BB74_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_8:                               # %.loopexit
	jmp	.LBB74_9
.LBB74_9:
	cmpl	$0, -36(%rbp)
	jne	.LBB74_11
# %bb.10:
	leaq	-12336(%rbp), %rdi
	movl	$0, captures
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
.LBB74_11:
	jmp	.LBB74_12
.LBB74_12:
	movslq	-8(%rbp), %rdi
	shlq	$3, %rdi
                                        # kill: def %edi killed %edi killed %rdi
	callq	Xmalloc
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB74_13:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB74_19
# %bb.14:                               #   in Loop: Header=BB74_13 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	hash, %eax
	movl	move_number, %ecx
	addl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, hash_history(,%rcx,4)
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB74_16
# %bb.15:                               #   in Loop: Header=BB74_13 Depth=1
	movl	$56, %edi
	callq	Xmalloc
	leaq	-12336(%rbp), %rcx
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 1(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-16(%rbp), %rax
	movb	$0, 3(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 2(%rax)
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 32(%rax)
	movq	8(%rcx), %rdx
	movq	%rdx, 40(%rax)
	movq	16(%rcx), %rcx
	movq	%rcx, 48(%rax)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	callq	pn_eval
	movq	-16(%rbp), %rdi
	callq	set_proof_and_disproof_numbers
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
	jmp	.LBB74_17
.LBB74_16:                              #   in Loop: Header=BB74_13 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
.LBB74_17:                              #   in Loop: Header=BB74_13 Depth=1
	jmp	.LBB74_18
.LBB74_18:                              #   in Loop: Header=BB74_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_13
.LBB74_19:
	movq	-24(%rbp), %rax
	movb	$1, 2(%rax)
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 1(%rcx)
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB74_28
# %bb.20:
	movq	-24(%rbp), %rax
	movb	$0, 2(%rax)
	movq	-24(%rbp), %rax
	movb	$1, 3(%rax)
	cmpl	$3, Variant
	je	.LBB74_23
# %bb.21:
	cmpl	$4, Variant
	je	.LBB74_23
# %bb.22:
	movq	-24(%rbp), %rax
	movb	$3, (%rax)
	jmp	.LBB74_27
.LBB74_23:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	jne	.LBB74_25
# %bb.24:
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
	jmp	.LBB74_26
.LBB74_25:
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
.LBB74_26:
	jmp	.LBB74_27
.LBB74_27:
	jmp	.LBB74_28
.LBB74_28:
	movl	-8(%rbp), %eax
	addl	nodecount, %eax
	movl	%eax, nodecount
	movl	-8(%rbp), %eax
	addl	frees, %eax
	movl	%eax, frees
	addq	$12336, %rsp            # imm = 0x3030
	popq	%rbp
	retq
.Lfunc_end74:
	.size	develop_node, .Lfunc_end74-develop_node
	.cfi_endproc
                                        # -- End function
	.globl	update_ancestors        # -- Begin function update_ancestors
	.p2align	4, 0x90
	.type	update_ancestors,@function
update_ancestors:                       # @update_ancestors
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB75_1:                               # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB75_5
# %bb.2:                                #   in Loop: Header=BB75_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	set_proof_and_disproof_numbers
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	je	.LBB75_4
# %bb.3:                                #   in Loop: Header=BB75_1 Depth=1
	movq	-8(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	unmake
.LBB75_4:                               #   in Loop: Header=BB75_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB75_1
.LBB75_5:
	movq	-16(%rbp), %rax
	cmpl	$0, 36(%rax)
	je	.LBB75_7
# %bb.6:
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	make
.LBB75_7:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end75:
	.size	update_ancestors, .Lfunc_end75-update_ancestors
	.cfi_endproc
                                        # -- End function
	.globl	pn2_eval                # -- Begin function pn2_eval
	.p2align	4, 0x90
	.type	pn2_eval,@function
pn2_eval:                               # @pn2_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, nodecount2
	movl	$1, pn2
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rdi
	callq	pn_eval
	movq	-8(%rbp), %rdi
	callq	set_proof_and_disproof_numbers
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB76_1:                               # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 4(%rcx)
	je	.LBB76_4
# %bb.2:                                #   in Loop: Header=BB76_1 Depth=1
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 8(%rcx)
	je	.LBB76_4
# %bb.3:                                #   in Loop: Header=BB76_1 Depth=1
	movl	nodecount2, %eax
	cmpl	nodecount, %eax
	setl	%al
.LBB76_4:                               #   in Loop: Header=BB76_1 Depth=1
	testb	$1, %al
	jne	.LBB76_5
	jmp	.LBB76_6
.LBB76_5:                               #   in Loop: Header=BB76_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	select_most_proving
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	develop_node
	movq	-16(%rbp), %rdi
	callq	update_ancestors
	jmp	.LBB76_1
.LBB76_6:
	movq	-8(%rbp), %rax
	movb	$0, 2(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 1(%rax)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movl	$0, pn2
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end76:
	.size	pn2_eval, .Lfunc_end76-pn2_eval
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function proofnumberscan
.LCPI77_0:
	.long	3212836864              # float -1
.LCPI77_1:
	.long	1287568416              # float 1.0E+8
	.text
	.globl	proofnumberscan
	.p2align	4, 0x90
	.type	proofnumberscan,@function
proofnumberscan:                        # @proofnumberscan
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$16552, %rsp            # imm = 0x40A8
	.cfi_offset %rbx, -24
	movl	$0, -32(%rbp)
	movl	$0, -48(%rbp)
	callq	rtime
	movq	%rax, -112(%rbp)
	movslq	PBSize, %rdi
	movl	$56, %esi
	callq	calloc
	movq	%rax, membuff
	movl	$1, %edi
	movl	$56, %esi
	callq	calloc
	leaq	-16528(%rbp), %rdi
	movq	%rax, -24(%rbp)
	callq	gen
	leaq	-2192(%rbp), %rbx
	movabsq	$rootlosers, %rdi
	movl	numb_moves, %eax
	movl	%eax, -52(%rbp)
	movl	$0, alllosers
	xorl	%esi, %esi
	movl	$1200, %edx             # imm = 0x4B0
	callq	memset
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$2048, %edx             # imm = 0x800
	callq	memset
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
	movl	$0, -40(%rbp)
	callq	in_check
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
.LBB77_1:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_7
# %bb.2:                                #   in Loop: Header=BB77_1 Depth=1
	leaq	-16528(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-16528(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-100(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB77_4
# %bb.3:                                #   in Loop: Header=BB77_1 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movslq	-12(%rbp), %rax
	movl	$1, -4240(%rbp,%rax,4)
	jmp	.LBB77_5
.LBB77_4:                               #   in Loop: Header=BB77_1 Depth=1
	movslq	-12(%rbp), %rax
	movl	$0, -4240(%rbp,%rax,4)
.LBB77_5:                               #   in Loop: Header=BB77_1 Depth=1
	leaq	-16528(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
# %bb.6:                                #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_1
.LBB77_7:
	cmpl	$0, -40(%rbp)
	jne	.LBB77_9
# %bb.8:
	callq	Xfree
	movq	membuff, %rdi
	callq	free
	movq	-24(%rbp), %rdi
	callq	free
	jmp	.LBB77_89
.LBB77_9:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	$0, -44(%rbp)
	movl	$1, nodecount
	movl	$0, iters
	movl	$0, maxply
	movl	$0, forwards
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	hash, %edx
	movl	move_number, %esi
	addl	ply, %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movl	%edx, hash_history(,%rsi,4)
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movl	%eax, root_to_move
	movq	-24(%rbp), %rdi
	callq	pn_eval
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$1, %eax
	je	.LBB77_11
# %bb.10:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB77_12
.LBB77_11:
	callq	Xfree
	movq	membuff, %rdi
	callq	free
	movq	-24(%rbp), %rdi
	callq	free
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
	jmp	.LBB77_89
.LBB77_12:
	movq	-24(%rbp), %rdi
	callq	set_proof_and_disproof_numbers
.LBB77_13:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_21 Depth 2
                                        #     Child Loop BB77_34 Depth 2
	callq	rtime
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	rdifftime
	xorl	%ecx, %ecx
	cmpl	pn_time, %eax
	jge	.LBB77_18
# %bb.14:                               #   in Loop: Header=BB77_13 Depth=1
	callq	interrupt
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	jne	.LBB77_18
# %bb.15:                               #   in Loop: Header=BB77_13 Depth=1
	xorl	%ecx, %ecx
	movl	bufftop, %eax
	movl	PBSize, %edx
	subl	$10000, %edx            # imm = 0x2710
	movslq	%edx, %rdx
	imulq	$56, %rdx, %rdx
	cmpq	%rdx, %rax
	jae	.LBB77_18
# %bb.16:                               #   in Loop: Header=BB77_13 Depth=1
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB77_18
# %bb.17:                               #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 8(%rax)
	setne	%cl
.LBB77_18:                              #   in Loop: Header=BB77_13 Depth=1
	testb	$1, %cl
	jne	.LBB77_19
	jmp	.LBB77_57
.LBB77_19:                              #   in Loop: Header=BB77_13 Depth=1
	movl	$100, %ecx
	movl	iters, %eax
	addl	$1, %eax
	movl	%eax, iters
	movl	nodecount, %eax
	movl	%eax, -84(%rbp)
	movl	nodecount, %eax
	cltd
	idivl	%ecx
	cmpl	$66, %edx
	jge	.LBB77_33
# %bb.20:                               #   in Loop: Header=BB77_13 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdi
	callq	select_most_proving
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	develop_node
	movq	-80(%rbp), %rdi
	callq	update_ancestors
	movl	$0, -12(%rbp)
.LBB77_21:                              #   Parent Loop BB77_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	4(%rcx), %eax
	je	.LBB77_23
# %bb.22:                               #   in Loop: Header=BB77_21 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_21
.LBB77_23:                              #   in Loop: Header=BB77_13 Depth=1
	movl	nodecount, %eax
	subl	-84(%rbp), %eax
	movslq	-12(%rbp), %rcx
	addl	-2192(%rbp,%rcx,4), %eax
	movl	%eax, -2192(%rbp,%rcx,4)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB77_28
# %bb.24:                               #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$100000000, 8(%rax)     # imm = 0x5F5E100
	jne	.LBB77_28
# %bb.25:                               #   in Loop: Header=BB77_13 Depth=1
	movl	$1, forcedwin
	cmpl	$0, kibitzed
	jne	.LBB77_27
# %bb.26:                               #   in Loop: Header=BB77_13 Depth=1
	movabsq	$.L.str.84, %rdi
	movl	$1, kibitzed
	movb	$0, %al
	callq	printf
.LBB77_27:                              #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
	jmp	.LBB77_32
.LBB77_28:                              #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB77_31
# %bb.29:                               #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$100000000, 4(%rax)     # imm = 0x5F5E100
	jne	.LBB77_31
# %bb.30:                               #   in Loop: Header=BB77_13 Depth=1
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
.LBB77_31:                              #   in Loop: Header=BB77_13 Depth=1
	jmp	.LBB77_32
.LBB77_32:                              #   in Loop: Header=BB77_13 Depth=1
	jmp	.LBB77_56
.LBB77_33:                              #   in Loop: Header=BB77_13 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$100000000, -68(%rbp)   # imm = 0x5F5E100
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB77_34:                              #   Parent Loop BB77_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_43
# %bb.35:                               #   in Loop: Header=BB77_34 Depth=2
	movslq	-12(%rbp), %rax
	movl	-2192(%rbp,%rax,4), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB77_39
# %bb.36:                               #   in Loop: Header=BB77_34 Depth=2
	movslq	-12(%rbp), %rax
	cmpl	$0, -4240(%rbp,%rax,4)
	je	.LBB77_39
# %bb.37:                               #   in Loop: Header=BB77_34 Depth=2
	movslq	-12(%rbp), %rax
	cmpl	$0, rootlosers(,%rax,4)
	jne	.LBB77_39
# %bb.38:                               #   in Loop: Header=BB77_34 Depth=2
	movslq	-12(%rbp), %rax
	movl	-2192(%rbp,%rax,4), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB77_39:                              #   in Loop: Header=BB77_34 Depth=2
	movslq	-12(%rbp), %rax
	cmpl	$0, -4240(%rbp,%rax,4)
	je	.LBB77_41
# %bb.40:                               #   in Loop: Header=BB77_34 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB77_41:                              #   in Loop: Header=BB77_34 Depth=2
	jmp	.LBB77_42
.LBB77_42:                              #   in Loop: Header=BB77_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_34
.LBB77_43:                              #   in Loop: Header=BB77_13 Depth=1
	cmpl	$100000000, -68(%rbp)   # imm = 0x5F5E100
	jne	.LBB77_46
# %bb.44:                               #   in Loop: Header=BB77_13 Depth=1
	movl	nodecount, %eax
	addl	$30, %eax
	movl	%eax, nodecount
.LBB77_45:                              # %.backedge
                                        #   in Loop: Header=BB77_13 Depth=1
	jmp	.LBB77_13
.LBB77_46:                              #   in Loop: Header=BB77_13 Depth=1
	leaq	-16528(%rbp), %rdi
	movl	-48(%rbp), %esi
	callq	make
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdi
	callq	select_most_proving
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	develop_node
	movq	-80(%rbp), %rdi
	callq	update_ancestors
	movl	nodecount, %eax
	subl	-84(%rbp), %eax
	movslq	-48(%rbp), %rcx
	addl	-2192(%rbp,%rcx,4), %eax
	movl	%eax, -2192(%rbp,%rcx,4)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB77_51
# %bb.47:                               #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$100000000, 8(%rax)     # imm = 0x5F5E100
	jne	.LBB77_51
# %bb.48:                               #   in Loop: Header=BB77_13 Depth=1
	movl	$1, forcedwin
	cmpl	$0, kibitzed
	jne	.LBB77_50
# %bb.49:                               #   in Loop: Header=BB77_13 Depth=1
	movabsq	$.L.str.1.85, %rdi
	movl	$1, kibitzed
	movb	$0, %al
	callq	printf
.LBB77_50:                              #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
	jmp	.LBB77_55
.LBB77_51:                              #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB77_54
# %bb.52:                               #   in Loop: Header=BB77_13 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$100000000, 4(%rax)     # imm = 0x5F5E100
	jne	.LBB77_54
# %bb.53:                               #   in Loop: Header=BB77_13 Depth=1
	movslq	-48(%rbp), %rax
	movl	$1, rootlosers(,%rax,4)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
.LBB77_54:                              #   in Loop: Header=BB77_13 Depth=1
	jmp	.LBB77_55
.LBB77_55:                              #   in Loop: Header=BB77_13 Depth=1
	jmp	.LBB77_56
.LBB77_56:                              #   in Loop: Header=BB77_13 Depth=1
	jmp	.LBB77_45
.LBB77_57:
	movss	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movl	$0, -28(%rbp)
	movss	%xmm0, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 2(%rax)
	je	.LBB77_73
# %bb.58:
	movl	$0, -12(%rbp)
.LBB77_59:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_72
# %bb.60:                               #   in Loop: Header=BB77_59 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -4240(%rbp,%rax,4)
	je	.LBB77_70
# %bb.61:                               #   in Loop: Header=BB77_59 Depth=1
	leaq	-120(%rbp), %rdi
	leaq	-16528(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB77_68
# %bb.62:                               #   in Loop: Header=BB77_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	ucomiss	-56(%rbp), %xmm0
	jbe	.LBB77_64
# %bb.63:                               #   in Loop: Header=BB77_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
.LBB77_64:                              #   in Loop: Header=BB77_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB77_67
# %bb.65:                               #   in Loop: Header=BB77_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$100000000, 4(%rax)     # imm = 0x5F5E100
	jne	.LBB77_67
# %bb.66:                               #   in Loop: Header=BB77_59 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB77_67:                              #   in Loop: Header=BB77_59 Depth=1
	jmp	.LBB77_69
.LBB77_68:                              #   in Loop: Header=BB77_59 Depth=1
	movss	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movl	$1, forcedwin
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
	movss	%xmm0, -56(%rbp)
.LBB77_69:                              #   in Loop: Header=BB77_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB77_70:                              #   in Loop: Header=BB77_59 Depth=1
	jmp	.LBB77_71
.LBB77_71:                              #   in Loop: Header=BB77_59 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_59
.LBB77_72:
	jmp	.LBB77_73
.LBB77_73:
	leaq	-144(%rbp), %rax
	leaq	-120(%rbp), %rdi
	movq	pn_move, %rcx
	movq	%rcx, -144(%rbp)
	movq	pn_move+8, %rcx
	movq	%rcx, -136(%rbp)
	movq	pn_move+16, %rcx
	movq	%rcx, -128(%rbp)
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	cmpl	$0, xb_mode
	je	.LBB77_76
# %bb.74:
	cmpl	$0, post
	je	.LBB77_76
# %bb.75:
	movabsq	$.L.str.2.86, %rdi
	movq	-24(%rbp), %rax
	movl	4(%rax), %esi
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movl	-36(%rbp), %ecx
	movl	maxply, %r8d
	movl	-64(%rbp), %r9d
	movl	-60(%rbp), %eax
	movl	%eax, (%rsp)
	movb	$0, %al
	callq	printf
.LBB77_76:
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB77_86
# %bb.77:
	movabsq	$.L.str.3.87, %rdi
	movb	$0, %al
	callq	printf
	movl	$0, -12(%rbp)
.LBB77_78:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_84
# %bb.79:                               #   in Loop: Header=BB77_78 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, rootlosers(,%rax,4)
	jne	.LBB77_82
# %bb.80:                               #   in Loop: Header=BB77_78 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -4240(%rbp,%rax,4)
	je	.LBB77_82
# %bb.81:
	leaq	-16528(%rbp), %rax
	movl	$1, forcedwin
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, pn_move
	movq	8(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	16(%rax), %rax
	movq	%rax, pn_move+16
	jmp	.LBB77_85
.LBB77_82:                              #   in Loop: Header=BB77_78 Depth=1
	jmp	.LBB77_83
.LBB77_83:                              #   in Loop: Header=BB77_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_78
.LBB77_84:                              # %.loopexit
	jmp	.LBB77_85
.LBB77_85:
	jmp	.LBB77_86
.LBB77_86:
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB77_88
# %bb.87:
	movl	$1, alllosers
.LBB77_88:
	callq	Xfree
	movq	membuff, %rdi
	callq	free
	movq	-24(%rbp), %rdi
	callq	free
.LBB77_89:
	addq	$16552, %rsp            # imm = 0x40A8
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end77:
	.size	proofnumberscan, .Lfunc_end77-proofnumberscan
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function proofnumbersearch
.LCPI78_0:
	.long	1233125376              # float 1048576
.LCPI78_2:
	.long	3212836864              # float -1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI78_1:
	.quad	4636737291354636288     # double 100
	.text
	.globl	proofnumbersearch
	.p2align	4, 0x90
	.type	proofnumbersearch,@function
proofnumbersearch:                      # @proofnumbersearch
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$16472, %rsp            # imm = 0x4058
	.cfi_offset %rbx, -24
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	$1, nodecount
	movl	$0, iters
	movl	$0, frees
	movl	$1, ply
	movl	$0, maxply
	movl	$0, forwards
	movl	hash, %edx
	movl	move_number, %esi
	addl	ply, %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movl	%edx, hash_history(,%rsi,4)
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movl	%eax, root_to_move
	callq	rtime
	movq	%rax, -48(%rbp)
	movl	$1, %edi
	movl	$56, %esi
	callq	calloc
	movq	%rax, -24(%rbp)
	movslq	PBSize, %rdi
	movl	$56, %esi
	callq	calloc
	movq	%rax, membuff
	movq	-24(%rbp), %rdi
	callq	pn_eval
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	cmpl	$0, %eax
	jne	.LBB78_2
# %bb.1:
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
	callq	Xfree
	movq	-24(%rbp), %rdi
	callq	free
	movq	membuff, %rdi
	callq	free
	jmp	.LBB78_69
.LBB78_2:
	movq	-24(%rbp), %rdi
	callq	set_proof_and_disproof_numbers
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB78_3:                               # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	cmpl	$0, 4(%rcx)
	je	.LBB78_6
# %bb.4:                                #   in Loop: Header=BB78_3 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	cmpl	$0, 8(%rcx)
	je	.LBB78_6
# %bb.5:                                #   in Loop: Header=BB78_3 Depth=1
	movl	bufftop, %eax
	movl	PBSize, %ecx
	subl	$10000, %ecx            # imm = 0x2710
	movslq	%ecx, %rcx
	imulq	$56, %rcx, %rcx
	cmpq	%rcx, %rax
	setb	%al
.LBB78_6:                               #   in Loop: Header=BB78_3 Depth=1
	testb	$1, %al
	jne	.LBB78_7
	jmp	.LBB78_13
.LBB78_7:                               #   in Loop: Header=BB78_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	select_most_proving
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	develop_node
	movq	-56(%rbp), %rdi
	callq	update_ancestors
	movl	$32, %ecx
	movl	iters, %eax
	addl	$1, %eax
	movl	%eax, iters
	movl	iters, %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB78_12
# %bb.8:                                #   in Loop: Header=BB78_3 Depth=1
	callq	rtime
	movq	-48(%rbp), %rsi
	movq	%rax, %rdi
	callq	rdifftime
	cmpl	pn_time, %eax
	jle	.LBB78_11
# %bb.9:                                #   in Loop: Header=BB78_3 Depth=1
	callq	interrupt
	cmpl	$0, %eax
	jne	.LBB78_11
# %bb.10:
	jmp	.LBB78_14
.LBB78_11:                              #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_12
.LBB78_12:                              #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_3
.LBB78_13:                              # %.loopexit1
	jmp	.LBB78_14
.LBB78_14:
	movabsq	$.L.str.4.88, %rdi
	movss	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	movl	4(%rax), %esi
	movl	8(%rax), %edx
	movslq	nodecount(%rip), %rcx
	movl	frees(%rip), %r8d
	imulq	$56, %rcx, %rbx
	cvtsi2ssq	%rbx, %xmm2
	movq	%rbx, %rax
	shrq	%rax
	cvtsi2ssq	%rax, %xmm1
	addss	%xmm1, %xmm1
	testq	%rbx, %rbx
	js	.LBB78_16
# %bb.15:
	movaps	%xmm2, %xmm1
.LBB78_16:
	divss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movl	iters, %r9d
	movl	maxply, %eax
                                        # kill: def %ecx killed %ecx killed %rcx
	movl	%eax, (%rsp)
	movb	$1, %al
	callq	printf
	cmpl	$0, xb_mode
	je	.LBB78_19
# %bb.17:
	cmpl	$0, post
	je	.LBB78_19
# %bb.18:
	movabsq	$.L.str.5.89, %rdi
	movq	-24(%rbp), %rax
	movl	4(%rax), %esi
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movl	nodecount, %ecx
	movl	forwards, %r8d
	movl	iters, %r9d
	movl	maxply, %eax
	movl	%eax, (%rsp)
	movb	$0, %al
	callq	printf
.LBB78_19:
	cmpl	$0, xb_mode
	jne	.LBB78_21
# %bb.20:
	callq	rtime
	movq	-48(%rbp), %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movabsq	$.L.str.6.90, %rdi
	movsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm1, %xmm0
	movb	$1, %al
	callq	printf
.LBB78_21:
	jmp	.LBB78_22
.LBB78_22:                              # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB78_24
# %bb.23:                               #   in Loop: Header=BB78_22 Depth=1
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	unmake
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB78_22
.LBB78_24:
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB78_54
# %bb.25:
	movabsq	$.L.str.7.91, %rdi
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.8.92, %rdi
	movb	$0, %al
	callq	printf
	leaq	-16448(%rbp), %rbx
	leaq	-8256(%rbp), %rdi
	xorl	%esi, %esi
	movl	$8192, %edx             # imm = 0x2000
	callq	memset
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$8192, %edx             # imm = 0x2000
	callq	memset
	movl	$1, ply
.LBB78_26:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_29 Depth 2
                                        #     Child Loop BB78_33 Depth 2
	movq	-32(%rbp), %rax
	cmpb	$0, 2(%rax)
	je	.LBB78_39
# %bb.27:                               #   in Loop: Header=BB78_26 Depth=1
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	cmpl	root_to_move, %eax
	jne	.LBB78_32
# %bb.28:                               #   in Loop: Header=BB78_26 Depth=1
	movl	$0, -12(%rbp)
.LBB78_29:                              #   Parent Loop BB78_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	4(%rcx), %eax
	je	.LBB78_31
# %bb.30:                               #   in Loop: Header=BB78_29 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_29
.LBB78_31:                              #   in Loop: Header=BB78_26 Depth=1
	jmp	.LBB78_36
.LBB78_32:                              #   in Loop: Header=BB78_26 Depth=1
	movl	$0, -12(%rbp)
.LBB78_33:                              #   Parent Loop BB78_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB78_35
# %bb.34:                               #   in Loop: Header=BB78_33 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_33
.LBB78_35:                              #   in Loop: Header=BB78_26 Depth=1
	jmp	.LBB78_36
.LBB78_36:                              #   in Loop: Header=BB78_26 Depth=1
	leaq	-8256(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$32, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_coord
	movabsq	$.L.str.9.93, %rdi
	leaq	-8256(%rbp), %rsi
	movb	$0, %al
	callq	printf
	leaq	-8256(%rbp), %rsi
	leaq	-16448(%rbp), %rdi
	callq	strcat
	movabsq	$.L.str.10.94, %rsi
	leaq	-16448(%rbp), %rdi
	callq	strcat
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	make
	cmpl	$1, ply
	jne	.LBB78_38
# %bb.37:                               #   in Loop: Header=BB78_26 Depth=1
	movq	-32(%rbp), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
.LBB78_38:                              #   in Loop: Header=BB78_26 Depth=1
	movl	$1, forcedwin
	jmp	.LBB78_26
.LBB78_39:
	movl	ply, %eax
	movl	%eax, -36(%rbp)
.LBB78_40:                              # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB78_42
# %bb.41:                               #   in Loop: Header=BB78_40 Depth=1
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	unmake
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB78_40
.LBB78_42:
	cmpl	$0, kibitzed
	jne	.LBB78_46
# %bb.43:
	cmpl	$0, xb_mode
	je	.LBB78_46
# %bb.44:
	cmpl	$0, post
	je	.LBB78_46
# %bb.45:
	movabsq	$.L.str.11.95, %rdi
	movl	$2, %ecx
	movl	$1, kibitzed
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movb	$0, %al
	callq	printf
.LBB78_46:
	cmpl	$1, -36(%rbp)
	jne	.LBB78_53
# %bb.47:
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB78_49
# %bb.48:
	movq	-24(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB78_53
.LBB78_49:
	cmpl	$0, root_to_move
	jne	.LBB78_51
# %bb.50:
	movabsq	$.L.str.12.96, %rdi
	movb	$0, %al
	callq	printf
	movl	$3, result
	jmp	.LBB78_52
.LBB78_51:
	movabsq	$.L.str.13.97, %rdi
	movb	$0, %al
	callq	printf
	movl	$2, result
.LBB78_52:
	jmp	.LBB78_53
.LBB78_53:
	movabsq	$.L.str.14.98, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB78_58
.LBB78_54:
	movq	-24(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB78_56
# %bb.55:
	movabsq	$.L.str.15.99, %rdi
	movq	-24(%rbp), %rax
	movb	$0, (%rax)
	movb	$0, %al
	callq	printf
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
	jmp	.LBB78_57
.LBB78_56:
	movabsq	$.L.str.16.100, %rdi
	movq	-24(%rbp), %rax
	movb	$2, (%rax)
	movb	$0, %al
	callq	printf
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
.LBB78_57:
	jmp	.LBB78_58
.LBB78_58:
	movss	.LCPI78_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB78_59:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movzbl	1(%rcx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_67
# %bb.60:                               #   in Loop: Header=BB78_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB78_64
# %bb.61:                               #   in Loop: Header=BB78_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	ucomiss	-40(%rbp), %xmm0
	jbe	.LBB78_63
# %bb.62:                               #   in Loop: Header=BB78_59 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
.LBB78_63:                              #   in Loop: Header=BB78_59 Depth=1
	jmp	.LBB78_65
.LBB78_64:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rcx
	movq	%rcx, pn_move
	movq	40(%rax), %rcx
	movq	%rcx, pn_move+8
	movq	48(%rax), %rax
	movq	%rax, pn_move+16
	jmp	.LBB78_68
.LBB78_65:                              #   in Loop: Header=BB78_59 Depth=1
	jmp	.LBB78_66
.LBB78_66:                              #   in Loop: Header=BB78_59 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_59
.LBB78_67:                              # %.loopexit
	jmp	.LBB78_68
.LBB78_68:
	movq	pn_move, %rax
	movq	%rax, pn_saver
	movq	pn_move+8, %rax
	movq	%rax, pn_saver+8
	movq	pn_move+16, %rax
	movq	%rax, pn_saver+16
	movq	-24(%rbp), %rdi
	callq	free
	callq	Xfree
	movq	membuff, %rdi
	callq	free
.LBB78_69:
	addq	$16472, %rsp            # imm = 0x4058
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end78:
	.size	proofnumbersearch, .Lfunc_end78-proofnumbersearch
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function proofnumbercheck
.LCPI79_0:
	.long	1233125376              # float 1048576
	.text
	.globl	proofnumbercheck
	.p2align	4, 0x90
	.type	proofnumbercheck,@function
proofnumbercheck:                       # @proofnumbercheck
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, %r15
	leaq	16(%rbp), %r14
	cmpl	$3, piece_count
	jg	.LBB79_3
# %bb.1:
	cmpl	$3, Variant
	jne	.LBB79_3
# %bb.2:
	movq	(%r14), %rax
	movq	%rax, (%r15)
	movq	8(%r14), %rax
	movq	%rax, 8(%r15)
	movq	16(%r14), %rax
	movq	%rax, 16(%r15)
	jmp	.LBB79_26
.LBB79_3:
	movl	$0, nodecount
	movl	$0, iters
	movl	$0, frees
	movl	$1, ply
	movl	$0, maxply
	movq	%r14, %rdi
	xorl	%esi, %esi
	callq	make
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	hash, %edx
	movl	move_number, %esi
	addl	ply, %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movl	%edx, hash_history(,%rsi,4)
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movl	%eax, root_to_move
	callq	rtime
	movq	%rax, -80(%rbp)
	movl	$1, %edi
	movl	$56, %esi
	callq	calloc
	movq	%rax, -32(%rbp)
	movslq	PBSize, %rdi
	movl	$56, %esi
	callq	calloc
	movq	%rax, membuff
	movq	-32(%rbp), %rdi
	callq	pn_eval
	movq	-32(%rbp), %rdi
	callq	set_proof_and_disproof_numbers
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB79_4:                               # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 4(%rcx)
	je	.LBB79_7
# %bb.5:                                #   in Loop: Header=BB79_4 Depth=1
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 8(%rcx)
	je	.LBB79_7
# %bb.6:                                #   in Loop: Header=BB79_4 Depth=1
	movl	bufftop, %eax
	movl	PBSize, %ecx
	subl	$10000, %ecx            # imm = 0x2710
	movslq	%ecx, %rcx
	imulq	$56, %rcx, %rcx
	cmpq	%rcx, %rax
	setb	%al
.LBB79_7:                               #   in Loop: Header=BB79_4 Depth=1
	testb	$1, %al
	jne	.LBB79_8
	jmp	.LBB79_13
.LBB79_8:                               #   in Loop: Header=BB79_4 Depth=1
	movq	-40(%rbp), %rdi
	callq	select_most_proving
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	develop_node
	movq	-72(%rbp), %rdi
	callq	update_ancestors
	movl	$32, %ecx
	movl	iters, %eax
	addl	$1, %eax
	movl	%eax, iters
	movl	iters, %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB79_12
# %bb.9:                                #   in Loop: Header=BB79_4 Depth=1
	callq	rtime
	movq	-80(%rbp), %rsi
	movq	%rax, %rdi
	callq	rdifftime
	cmpl	pn_time, %eax
	jle	.LBB79_11
# %bb.10:
	jmp	.LBB79_14
.LBB79_11:                              #   in Loop: Header=BB79_4 Depth=1
	jmp	.LBB79_12
.LBB79_12:                              #   in Loop: Header=BB79_4 Depth=1
	jmp	.LBB79_4
.LBB79_13:                              # %.loopexit
	jmp	.LBB79_14
.LBB79_14:
	movabsq	$.L.str.17.101, %rdi
	movss	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	movl	4(%rax), %esi
	movl	8(%rax), %edx
	movslq	nodecount(%rip), %rcx
	movl	frees(%rip), %r8d
	imulq	$56, %rcx, %rbx
	cvtsi2ssq	%rbx, %xmm2
	movq	%rbx, %rax
	shrq	%rax
	cvtsi2ssq	%rax, %xmm1
	addss	%xmm1, %xmm1
	testq	%rbx, %rbx
	js	.LBB79_16
# %bb.15:
	movaps	%xmm2, %xmm1
.LBB79_16:
	divss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movl	iters, %r9d
                                        # kill: def %ecx killed %ecx killed %rcx
	movb	$1, %al
	callq	printf
.LBB79_17:                              # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	je	.LBB79_19
# %bb.18:                               #   in Loop: Header=BB79_17 Depth=1
	movq	-40(%rbp), %rdi
	addq	$32, %rdi
	xorl	%esi, %esi
	callq	unmake
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB79_17
.LBB79_19:
	movq	%r14, %rdi
	xorl	%esi, %esi
	callq	unmake
	movq	-32(%rbp), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB79_21
# %bb.20:
	movq	-32(%rbp), %rax
	movb	$1, (%rax)
	movq	pn_move, %rax
	movq	%rax, -64(%rbp)
	movq	pn_move+8, %rax
	movq	%rax, -56(%rbp)
	movq	pn_move+16, %rax
	movq	%rax, -48(%rbp)
	movl	$1, s_threat
	jmp	.LBB79_25
.LBB79_21:
	movq	-32(%rbp), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB79_23
# %bb.22:
	movq	-32(%rbp), %rax
	movb	$0, (%rax)
	movq	(%r14), %rax
	movq	%rax, -64(%rbp)
	movq	8(%r14), %rax
	movq	%rax, -56(%rbp)
	movq	16(%r14), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB79_24
.LBB79_23:
	movq	-32(%rbp), %rax
	movb	$2, (%rax)
	movq	(%r14), %rax
	movq	%rax, -64(%rbp)
	movq	8(%r14), %rax
	movq	%rax, -56(%rbp)
	movq	16(%r14), %rax
	movq	%rax, -48(%rbp)
.LBB79_24:
	jmp	.LBB79_25
.LBB79_25:
	callq	Xfree
	movq	-32(%rbp), %rdi
	callq	free
	movq	membuff, %rdi
	callq	free
	movq	-64(%rbp), %rax
	movq	%rax, (%r15)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%r15)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%r15)
.LBB79_26:
	movq	%r15, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end79:
	.size	proofnumbercheck, .Lfunc_end79-proofnumbercheck
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function read_rcfile
.LCPI80_0:
	.long	1065353216              # float 1
	.text
	.globl	read_rcfile
	.p2align	4, 0x90
	.type	read_rcfile,@function
read_rcfile:                            # @read_rcfile
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$setcode, %rdi
	movabsq	$.L.str.112, %rsi
	movss	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movl	$3000000, TTSize        # imm = 0x2DC6C0
	movl	$1000000, ECacheSize    # imm = 0xF4240
	movl	$200000, PBSize         # imm = 0x30D40
	movl	$1, cfg_devscale
	movss	%xmm0, cfg_scalefac
	movl	$1, cfg_razordrop
	movl	$0, cfg_cutdrop
	movl	$1, cfg_futprune
	movl	$1, cfg_smarteval
	movl	$0, cfg_attackeval
	movl	$1, cfg_onerep
	movl	$0, cfg_recap
	movl	$0, havercfile
	movl	havercfile, %eax
	movl	cfg_devscale, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	movl	cfg_razordrop, %ecx
	shll	$3, %ecx
	addl	%ecx, %eax
	movl	cfg_cutdrop, %ecx
	shll	$4, %ecx
	addl	%ecx, %eax
	movl	cfg_futprune, %ecx
	shll	$5, %ecx
	addl	%ecx, %eax
	movl	cfg_smarteval, %ecx
	shll	$6, %ecx
	addl	%ecx, %eax
	movl	cfg_attackeval, %ecx
	shll	$7, %ecx
	addl	%ecx, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movb	$0, %al
	callq	sprintf
	callq	initialize_eval
	callq	alloc_hash
	callq	alloc_ecache
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end80:
	.size	read_rcfile, .Lfunc_end80-read_rcfile
	.cfi_endproc
                                        # -- End function
	.globl	order_moves             # -- Begin function order_moves
	.p2align	4, 0x90
	.type	order_moves,@function
order_moves:                            # @order_moves
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -60(%rbp)
	cmpl	$0, searching_pv
	je	.LBB81_68
# %bb.1:
	movl	$0, searching_pv
	movl	$0, -12(%rbp)
.LBB81_2:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB81_67
# %bb.3:                                #   in Loop: Header=BB81_2 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	cmpl	$13, -20(%rbp)
	je	.LBB81_11
# %bb.4:                                #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_6
# %bb.5:                                #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$50000000, %eax         # imm = 0x2FAF080
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_10
.LBB81_6:                               #   in Loop: Header=BB81_2 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	cmpl	$-50, -24(%rbp)
	jl	.LBB81_8
# %bb.7:                                #   in Loop: Header=BB81_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$50000000, %eax         # imm = 0x2FAF080
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_9
.LBB81_8:                               #   in Loop: Header=BB81_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_9:                               #   in Loop: Header=BB81_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_10:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_12
.LBB81_11:                              #   in Loop: Header=BB81_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB81_12:                              #   in Loop: Header=BB81_2 Depth=1
	movabsq	$pv, %rax
	addq	$7200, %rax             # imm = 0x1C20
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_21
# %bb.13:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$pv, %rax
	addq	$7200, %rax             # imm = 0x1C20
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_21
# %bb.14:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$pv, %rax
	addq	$7200, %rax             # imm = 0x1C20
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_21
# %bb.15:                               #   in Loop: Header=BB81_2 Depth=1
	movl	$1, searching_pv
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$100000000, (%rax,%rcx,4) # imm = 0x5F5E100
	cmpl	$13, -20(%rbp)
	je	.LBB81_20
# %bb.16:                               #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_18
# %bb.17:                               #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB81_19
.LBB81_18:                              #   in Loop: Header=BB81_2 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_19:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_20
.LBB81_20:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_65
.LBB81_21:                              #   in Loop: Header=BB81_2 Depth=1
	cmpl	$-1, -60(%rbp)
	je	.LBB81_30
# %bb.22:                               #   in Loop: Header=BB81_2 Depth=1
	cmpl	$-2, -60(%rbp)
	je	.LBB81_30
# %bb.23:                               #   in Loop: Header=BB81_2 Depth=1
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB81_30
# %bb.24:                               #   in Loop: Header=BB81_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$100000000, (%rax,%rcx,4) # imm = 0x5F5E100
	cmpl	$13, -20(%rbp)
	je	.LBB81_29
# %bb.25:                               #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_27
# %bb.26:                               #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB81_28
.LBB81_27:                              #   in Loop: Header=BB81_2 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_28:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_29
.LBB81_29:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_64
.LBB81_30:                              #   in Loop: Header=BB81_2 Depth=1
	cmpl	$-2, -60(%rbp)
	jne	.LBB81_41
# %bb.31:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$pv, %rax
	movl	-16(%rbp), %ecx
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rax
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_40
# %bb.32:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$pv, %rax
	movl	-28(%rbp), %ecx
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rax
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_40
# %bb.33:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$pv, %rax
	movl	-44(%rbp), %ecx
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rax
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_40
# %bb.34:                               #   in Loop: Header=BB81_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$100000000, (%rax,%rcx,4) # imm = 0x5F5E100
	cmpl	$13, -20(%rbp)
	je	.LBB81_39
# %bb.35:                               #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_37
# %bb.36:                               #   in Loop: Header=BB81_2 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB81_38
.LBB81_37:                              #   in Loop: Header=BB81_2 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_38:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_39
.LBB81_39:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_40
.LBB81_40:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_63
.LBB81_41:                              #   in Loop: Header=BB81_2 Depth=1
	cmpl	$1, ply
	jne	.LBB81_43
# %bb.42:                               #   in Loop: Header=BB81_2 Depth=1
	cmpl	$2, i_depth
	jge	.LBB81_58
.LBB81_43:                              #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer1, %rax
	movabsq	$history_h, %rcx
	movslq	-16(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-28(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, (%rdx,%rsi,4)
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_47
# %bb.44:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer1, %rax
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_47
# %bb.45:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer1, %rax
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_47
# %bb.46:                               #   in Loop: Header=BB81_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$25000000, %edx         # imm = 0x17D7840
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB81_57
.LBB81_47:                              #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer2, %rax
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_51
# %bb.48:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer2, %rax
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_51
# %bb.49:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer2, %rax
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_51
# %bb.50:                               #   in Loop: Header=BB81_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$20000000, %edx         # imm = 0x1312D00
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB81_56
.LBB81_51:                              #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer3, %rax
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_55
# %bb.52:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer3, %rax
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_55
# %bb.53:                               #   in Loop: Header=BB81_2 Depth=1
	movabsq	$killer3, %rax
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_55
# %bb.54:                               #   in Loop: Header=BB81_2 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$15000000, %edx         # imm = 0xE4E1C0
	movl	%edx, (%rax,%rcx,4)
.LBB81_55:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_56
.LBB81_56:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_57
.LBB81_57:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_62
.LBB81_58:                              #   in Loop: Header=BB81_2 Depth=1
	movl	$100, %ecx
	movl	nodes, %eax
	cltd
	idivl	%ecx
	cmpl	$100000000, %eax        # imm = 0x5F5E100
	jle	.LBB81_60
# %bb.59:                               #   in Loop: Header=BB81_2 Depth=1
	movl	$1000, %ecx             # imm = 0x3E8
	movslq	-12(%rbp), %rax
	movl	rootnodecount(,%rax,4), %eax
	xorl	%edx, %edx
	divl	%ecx
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_61
.LBB81_60:                              #   in Loop: Header=BB81_2 Depth=1
	movl	$100, %ecx
	movslq	-12(%rbp), %rax
	movl	rootnodecount(,%rax,4), %eax
	xorl	%edx, %edx
	divl	%ecx
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_61:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_62
.LBB81_62:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_63
.LBB81_63:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_64
.LBB81_64:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_65
.LBB81_65:                              #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_66
.LBB81_66:                              #   in Loop: Header=BB81_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_2
.LBB81_67:
	jmp	.LBB81_117
.LBB81_68:
	movl	$0, -12(%rbp)
.LBB81_69:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB81_116
# %bb.70:                               #   in Loop: Header=BB81_69 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	cmpl	$-1, -60(%rbp)
	je	.LBB81_78
# %bb.71:                               #   in Loop: Header=BB81_69 Depth=1
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB81_78
# %bb.72:                               #   in Loop: Header=BB81_69 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$100000000, (%rax,%rcx,4) # imm = 0x5F5E100
	cmpl	$13, -20(%rbp)
	je	.LBB81_77
# %bb.73:                               #   in Loop: Header=BB81_69 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_75
# %bb.74:                               #   in Loop: Header=BB81_69 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB81_76
.LBB81_75:                              #   in Loop: Header=BB81_69 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_76:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_77
.LBB81_77:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_100
.LBB81_78:                              #   in Loop: Header=BB81_69 Depth=1
	cmpl	$-2, -60(%rbp)
	jne	.LBB81_89
# %bb.79:                               #   in Loop: Header=BB81_69 Depth=1
	movabsq	$pv, %rax
	movl	-16(%rbp), %ecx
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rax
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_88
# %bb.80:                               #   in Loop: Header=BB81_69 Depth=1
	movabsq	$pv, %rax
	movl	-28(%rbp), %ecx
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rax
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_88
# %bb.81:                               #   in Loop: Header=BB81_69 Depth=1
	movabsq	$pv, %rax
	movl	-44(%rbp), %ecx
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rax
	movl	ply, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_88
# %bb.82:                               #   in Loop: Header=BB81_69 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$100000000, (%rax,%rcx,4) # imm = 0x5F5E100
	cmpl	$13, -20(%rbp)
	je	.LBB81_87
# %bb.83:                               #   in Loop: Header=BB81_69 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_85
# %bb.84:                               #   in Loop: Header=BB81_69 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB81_86
.LBB81_85:                              #   in Loop: Header=BB81_69 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_86:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_87
.LBB81_87:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_88
.LBB81_88:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_99
.LBB81_89:                              #   in Loop: Header=BB81_69 Depth=1
	cmpl	$13, -20(%rbp)
	je	.LBB81_97
# %bb.90:                               #   in Loop: Header=BB81_69 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	addl	$15, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	%eax, %ebx
	jl	.LBB81_92
# %bb.91:                               #   in Loop: Header=BB81_69 Depth=1
	movslq	-20(%rbp), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, %ebx
	movslq	-16(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	sarl	$4, %eax
	subl	%eax, %ebx
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	%ebx, (%rax,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$50000000, %eax         # imm = 0x2FAF080
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_96
.LBB81_92:                              #   in Loop: Header=BB81_69 Depth=1
	movl	$1, %edi
	xorl	%eax, %eax
	movl	white_to_move, %ecx
	cmpl	$0, %ecx
	cmovnel	%eax, %edi
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	see
	movl	%eax, -24(%rbp)
	cmpl	$-50, -24(%rbp)
	jl	.LBB81_94
# %bb.93:                               #   in Loop: Header=BB81_69 Depth=1
	movl	-24(%rbp), %eax
	addl	$50000000, %eax         # imm = 0x2FAF080
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_95
.LBB81_94:                              #   in Loop: Header=BB81_69 Depth=1
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_95:                              #   in Loop: Header=BB81_69 Depth=1
	movl	-24(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_96:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_98
.LBB81_97:                              #   in Loop: Header=BB81_69 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB81_98:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_99
.LBB81_99:                              #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_100
.LBB81_100:                             #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer1, %rax
	movabsq	$history_h, %rcx
	movslq	-16(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-28(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-40(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, (%rdx,%rsi,4)
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_104
# %bb.101:                              #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer1, %rax
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_104
# %bb.102:                              #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer1, %rax
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_104
# %bb.103:                              #   in Loop: Header=BB81_69 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$25000000, %edx         # imm = 0x17D7840
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB81_114
.LBB81_104:                             #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer2, %rax
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_108
# %bb.105:                              #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer2, %rax
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_108
# %bb.106:                              #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer2, %rax
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_108
# %bb.107:                              #   in Loop: Header=BB81_69 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$20000000, %edx         # imm = 0x1312D00
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB81_113
.LBB81_108:                             #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer3, %rax
	movl	-16(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB81_112
# %bb.109:                              #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer3, %rax
	movl	-28(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB81_112
# %bb.110:                              #   in Loop: Header=BB81_69 Depth=1
	movabsq	$killer3, %rax
	movl	-44(%rbp), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB81_112
# %bb.111:                              #   in Loop: Header=BB81_69 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$15000000, %edx         # imm = 0xE4E1C0
	movl	%edx, (%rax,%rcx,4)
.LBB81_112:                             #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_113
.LBB81_113:                             #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_114
.LBB81_114:                             #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_115
.LBB81_115:                             #   in Loop: Header=BB81_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_69
.LBB81_116:
	jmp	.LBB81_117
.LBB81_117:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end81:
	.size	order_moves, .Lfunc_end81-order_moves
	.cfi_endproc
                                        # -- End function
	.globl	perft                   # -- Begin function perft
	.p2align	4, 0x90
	.type	perft,@function
perft:                                  # @perft
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12304, %rsp            # imm = 0x3010
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB82_2
# %bb.1:
	movl	raw_nodes, %eax
	addl	$1, %eax
	movl	%eax, raw_nodes
	jmp	.LBB82_9
.LBB82_2:
	leaq	-12304(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
	callq	in_check
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB82_3:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB82_8
# %bb.4:                                #   in Loop: Header=BB82_3 Depth=1
	leaq	-12304(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12304(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB82_6
# %bb.5:                                #   in Loop: Header=BB82_3 Depth=1
	movl	-12(%rbp), %edi
	subl	$1, %edi
	callq	perft
.LBB82_6:                               #   in Loop: Header=BB82_3 Depth=1
	leaq	-12304(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.7:                                #   in Loop: Header=BB82_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_3
.LBB82_8:                               # %.loopexit
	jmp	.LBB82_9
.LBB82_9:
	addq	$12304, %rsp            # imm = 0x3010
	popq	%rbp
	retq
.Lfunc_end82:
	.size	perft, .Lfunc_end82-perft
	.cfi_endproc
                                        # -- End function
	.globl	qsearch                 # -- Begin function qsearch
	.p2align	4, 0x90
	.type	qsearch,@function
qsearch:                                # @qsearch
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16464, %rsp            # imm = 0x4050
	movl	%edi, -4(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -60(%rbp)
	movl	$-1000000, -8(%rbp)     # imm = 0xFFF0BDC0
	movl	$1, -72(%rbp)
	movl	ply, %eax
	movslq	ply, %rcx
	movl	%eax, pv_length(,%rcx,4)
	movl	nodes, %eax
	andl	$65535, %eax            # imm = 0xFFFF
	cmpl	$0, %eax
	jne	.LBB83_19
# %bb.1:
	callq	interrupt
	cmpl	$0, %eax
	je	.LBB83_3
# %bb.2:
	movl	$1, time_exit
	movl	$0, -12(%rbp)
	jmp	.LBB83_64
.LBB83_3:
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	cmpl	time_for_move, %eax
	jl	.LBB83_17
# %bb.4:
	cmpl	$1, i_depth
	jle	.LBB83_17
# %bb.5:
	cmpl	$1, failed
	jne	.LBB83_15
# %bb.6:
	cmpl	$0, extendedtime
	jne	.LBB83_15
# %bb.7:
	cmpl	$0, fixed_time
	jne	.LBB83_15
# %bb.8:
	cmpl	$0, go_fast
	jne	.LBB83_15
# %bb.9:
	cmpl	$1, Variant
	je	.LBB83_15
# %bb.10:
	movl	time_left, %eax
	movl	time_for_move, %ecx
	shll	$2, %ecx
	cmpl	$1000, %ecx             # imm = 0x3E8
	jle	.LBB83_12
# %bb.11:
	movl	time_for_move, %ecx
	shll	$2, %ecx
	jmp	.LBB83_13
.LBB83_12:
	movl	$1000, %ecx             # imm = 0x3E8
	jmp	.LBB83_13
.LBB83_13:
	cmpl	%ecx, %eax
	jle	.LBB83_15
# %bb.14:
	movl	$1, extendedtime
	movl	time_for_move, %eax
	movl	%eax, -64(%rbp)
	callq	allocate_time
	movabsq	$.L.str.123, %rdi
	addl	time_for_move, %eax
	movl	%eax, time_for_move
	movl	-64(%rbp), %esi
	movl	time_for_move, %edx
	movl	time_left, %ecx
	movb	$0, %al
	callq	printf
	jmp	.LBB83_16
.LBB83_15:
	movl	$1, time_exit
	movl	$0, -12(%rbp)
	jmp	.LBB83_64
.LBB83_16:
	jmp	.LBB83_17
.LBB83_17:
	jmp	.LBB83_18
.LBB83_18:
	jmp	.LBB83_19
.LBB83_19:
	cmpl	$0, -60(%rbp)
	jle	.LBB83_21
# %bb.20:
	cmpl	$300, ply               # imm = 0x12C
	jl	.LBB83_22
.LBB83_21:
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	eval
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_64
.LBB83_22:
	movl	qnodes(%rip), %eax
	addl	$1, %eax
	movl	%eax, qnodes(%rip)
	movl	nodes(%rip), %eax
	addl	$1, %eax
	movl	%eax, nodes(%rip)
	movl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	leaq	-28(%rbp), %rdi
	leaq	-36(%rbp), %rsi
	callq	QProbeTT
	movl	%eax, %ecx
	subl	$4, %eax
	ja	.LBB83_33
# %bb.23:
	movq	.LJTI83_0(,%rcx,8), %rax
	jmpq	*%rax
.LBB83_24:
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_64
.LBB83_25:
	movl	-28(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jg	.LBB83_27
# %bb.26:
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_64
.LBB83_27:
	jmp	.LBB83_33
.LBB83_28:
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB83_30
# %bb.29:
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_64
.LBB83_30:
	jmp	.LBB83_33
.LBB83_31:
	jmp	.LBB83_33
.LBB83_32:
	movl	$-1, -36(%rbp)
.LBB83_33:
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	eval
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB83_35
# %bb.34:
	movl	-24(%rbp), %edi
	movl	-40(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	$500, %ecx              # imm = 0x1F4
	callq	QStoreTT
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_64
.LBB83_35:
	movl	-24(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB83_37
# %bb.36:
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_37:
	jmp	.LBB83_38
.LBB83_38:
	leaq	-16464(%rbp), %rdi
	movl	$-1, -76(%rbp)
	movl	$-1000000, -56(%rbp)    # imm = 0xFFF0BDC0
	movl	$0, -48(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, kingcap
	je	.LBB83_40
# %bb.39:
	movl	$50000, -12(%rbp)       # imm = 0xC350
	jmp	.LBB83_64
.LBB83_40:
	leaq	-2128(%rbp), %rdx
	leaq	-4176(%rbp), %rsi
	leaq	-16464(%rbp), %rdi
	movl	-4(%rbp), %eax
	subl	$150, %eax
	subl	-24(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-48(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	order_moves
.LBB83_41:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_58 Depth 2
	leaq	-20(%rbp), %rdi
	leaq	-4176(%rbp), %rsi
	movl	-48(%rbp), %edx
	callq	remove_one
	cmpl	$0, %eax
	je	.LBB83_63
# %bb.42:                               #   in Loop: Header=BB83_41 Depth=1
	leaq	-16464(%rbp), %rax
	movl	$0, -44(%rbp)
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB83_48
# %bb.43:                               #   in Loop: Header=BB83_41 Depth=1
	movslq	-20(%rbp), %rax
	movl	-2128(%rbp,%rax,4), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	.LBB83_45
# %bb.44:                               #   in Loop: Header=BB83_41 Depth=1
	cmpl	$0, -52(%rbp)
	jge	.LBB83_47
.LBB83_45:                              #   in Loop: Header=BB83_41 Depth=1
	jmp	.LBB83_46
.LBB83_46:                              # %.backedge
                                        #   in Loop: Header=BB83_41 Depth=1
	jmp	.LBB83_41
.LBB83_47:                              #   in Loop: Header=BB83_41 Depth=1
	jmp	.LBB83_48
.LBB83_48:                              #   in Loop: Header=BB83_41 Depth=1
	leaq	-16464(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	make
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-16(%rbp), %edi
	subl	-4(%rbp), %esi
	movl	-60(%rbp), %edx
	subl	$1, %edx
	callq	qsearch
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	cmpl	$-50000, -8(%rbp)       # imm = 0xFFFF3CB0
	je	.LBB83_50
# %bb.49:                               #   in Loop: Header=BB83_41 Depth=1
	movl	$1, -44(%rbp)
	movl	$0, -72(%rbp)
.LBB83_50:                              #   in Loop: Header=BB83_41 Depth=1
	leaq	-16464(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	unmake
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jle	.LBB83_53
# %bb.51:                               #   in Loop: Header=BB83_41 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB83_53
# %bb.52:                               #   in Loop: Header=BB83_41 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB83_53:                              #   in Loop: Header=BB83_41 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB83_62
# %bb.54:                               #   in Loop: Header=BB83_41 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB83_62
# %bb.55:                               #   in Loop: Header=BB83_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB83_57
# %bb.56:
	movl	-8(%rbp), %edi
	movl	-40(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-20(%rbp), %ecx
	callq	QStoreTT
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_64
.LBB83_57:                              #   in Loop: Header=BB83_41 Depth=1
	leaq	-16464(%rbp), %rax
	movabsq	$pv, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, -4(%rbp)
	movslq	ply, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB83_58:                              #   Parent Loop BB83_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	movl	ply, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	pv_length(,%rcx,4), %eax
	jge	.LBB83_61
# %bb.59:                               #   in Loop: Header=BB83_58 Depth=2
	movabsq	$pv, %rax
	movslq	ply, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	ply, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	addq	%rcx, %rax
	movslq	-32(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rdx)
# %bb.60:                               #   in Loop: Header=BB83_58 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB83_58
.LBB83_61:                              #   in Loop: Header=BB83_41 Depth=1
	movl	ply, %eax
	addl	$1, %eax
	cltq
	movl	pv_length(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, pv_length(,%rcx,4)
.LBB83_62:                              #   in Loop: Header=BB83_41 Depth=1
	jmp	.LBB83_46
.LBB83_63:
	movl	-4(%rbp), %edi
	movl	-40(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-36(%rbp), %ecx
	callq	QStoreTT
	movl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_64:
	movl	-12(%rbp), %eax
	addq	$16464, %rsp            # imm = 0x4050
	popq	%rbp
	retq
.Lfunc_end83:
	.size	qsearch, .Lfunc_end83-qsearch
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_31
	.quad	.LBB83_25
	.quad	.LBB83_28
	.quad	.LBB83_24
	.quad	.LBB83_32
                                        # -- End function
	.text
	.globl	remove_one              # -- Begin function remove_one
	.p2align	4, 0x90
	.type	remove_one,@function
remove_one:                             # @remove_one
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movl	$-1000000, -8(%rbp)     # imm = 0xFFF0BDC0
	movq	-24(%rbp), %rax
	movl	$-1000000, (%rax)       # imm = 0xFFF0BDC0
	movl	$0, -4(%rbp)
.LBB84_1:                               # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_6
# %bb.2:                                #   in Loop: Header=BB84_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-8(%rbp), %eax
	jle	.LBB84_4
# %bb.3:                                #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -8(%rbp)
.LBB84_4:                               #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_5
.LBB84_5:                               #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_6:
	movq	-24(%rbp), %rax
	cmpl	$-1000000, (%rax)       # imm = 0xFFF0BDC0
	jle	.LBB84_8
# %bb.7:
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	(%rcx), %rcx
	movl	$-1000000, (%rax,%rcx,4) # imm = 0xFFF0BDC0
	movl	$1, -12(%rbp)
	jmp	.LBB84_9
.LBB84_8:
	movl	$0, -12(%rbp)
.LBB84_9:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end84:
	.size	remove_one, .Lfunc_end84-remove_one
	.cfi_endproc
                                        # -- End function
	.globl	search                  # -- Begin function search
	.p2align	4, 0x90
	.type	search,@function
search:                                 # @search
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$16536, %rsp            # imm = 0x4098
	.cfi_offset %rbx, -24
	movl	%edi, -36(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -152(%rbp)
	movl	$-1000000, -20(%rbp)    # imm = 0xFFF0BDC0
	movl	nodes, %eax
	addl	$1, %eax
	movl	%eax, nodes
	movl	nodes, %eax
	andl	$65535, %eax            # imm = 0xFFFF
	cmpl	$0, %eax
	jne	.LBB85_19
# %bb.1:
	callq	interrupt
	cmpl	$0, %eax
	je	.LBB85_3
# %bb.2:
	movl	$1, time_exit
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_3:
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	cmpl	time_for_move, %eax
	jl	.LBB85_17
# %bb.4:
	cmpl	$1, i_depth
	jle	.LBB85_17
# %bb.5:
	cmpl	$1, failed
	jne	.LBB85_15
# %bb.6:
	cmpl	$0, extendedtime
	jne	.LBB85_15
# %bb.7:
	cmpl	$0, fixed_time
	jne	.LBB85_15
# %bb.8:
	cmpl	$0, go_fast
	jne	.LBB85_15
# %bb.9:
	cmpl	$1, Variant
	je	.LBB85_15
# %bb.10:
	movl	time_left, %eax
	movl	time_for_move, %ecx
	shll	$2, %ecx
	cmpl	$1000, %ecx             # imm = 0x3E8
	jle	.LBB85_12
# %bb.11:
	movl	time_for_move, %ecx
	shll	$2, %ecx
	jmp	.LBB85_13
.LBB85_12:
	movl	$1000, %ecx             # imm = 0x3E8
	jmp	.LBB85_13
.LBB85_13:
	cmpl	%ecx, %eax
	jle	.LBB85_15
# %bb.14:
	movl	$1, extendedtime
	movl	time_for_move, %eax
	movl	%eax, -140(%rbp)
	callq	allocate_time
	movabsq	$.L.str.123, %rdi
	addl	time_for_move, %eax
	movl	%eax, time_for_move
	movl	-140(%rbp), %esi
	movl	time_for_move, %edx
	movl	time_left, %ecx
	movb	$0, %al
	callq	printf
	jmp	.LBB85_16
.LBB85_15:
	movl	$1, time_exit
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_16:
	jmp	.LBB85_17
.LBB85_17:
	jmp	.LBB85_18
.LBB85_18:
	jmp	.LBB85_19
.LBB85_19:
	movl	-36(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$-1000000, -104(%rbp)   # imm = 0xFFF0BDC0
	movl	$0, -44(%rbp)
	movl	$0, -32(%rbp)
	movl	ply, %eax
	movslq	ply, %rcx
	movl	%eax, pv_length(,%rcx,4)
	callq	is_draw
	cmpl	$0, %eax
	je	.LBB85_21
# %bb.20:
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_21:
	movslq	ply, %rax
	movl	checks(,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movslq	ply, %rax
	movl	$0, singular(,%rax,4)
	movslq	ply, %rax
	movl	$0, recaps(,%rax,4)
	cmpl	$300, ply               # imm = 0x12C
	jge	.LBB85_26
# %bb.22:
	cmpl	$0, -60(%rbp)
	je	.LBB85_26
# %bb.23:
	movl	ply, %eax
	movl	i_depth, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_25
# %bb.24:
	cmpl	$0, -16(%rbp)
	jne	.LBB85_26
.LBB85_25:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	ext_check, %eax
	addl	$1, %eax
	movl	%eax, ext_check
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_35
.LBB85_26:
	cmpl	$300, ply               # imm = 0x12C
	jge	.LBB85_34
# %bb.27:
	cmpl	$2, ply
	jle	.LBB85_34
# %bb.28:
	movl	ply, %eax
	movl	i_depth, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB85_34
# %bb.29:
	movl	ply, %eax
	subl	$2, %eax
	cltq
	cmpl	$0, recaps(,%rax,4)
	jne	.LBB85_34
# %bb.30:
	cmpl	$0, cfg_recap
	je	.LBB85_34
# %bb.31:
	movabsq	$path, %rax
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$13, 8(%rax)
	je	.LBB85_34
# %bb.32:
	movabsq	$path, %rax
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	8(%rdx), %rcx
	movl	search.rc_index(,%rcx,4), %ecx
	movl	ply, %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movslq	8(%rax), %rax
	cmpl	search.rc_index(,%rax,4), %ecx
	jne	.LBB85_34
# %bb.33:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	ext_recap, %eax
	addl	$1, %eax
	movl	%eax, ext_recap
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movslq	ply, %rax
	movl	$1, recaps(,%rax,4)
.LBB85_34:
	jmp	.LBB85_35
.LBB85_35:
	cmpl	$0, -16(%rbp)
	jle	.LBB85_37
# %bb.36:
	cmpl	$300, ply               # imm = 0x12C
	jl	.LBB85_52
.LBB85_37:
	cmpl	$3, Variant
	je	.LBB85_40
# %bb.38:
	cmpl	$4, Variant
	je	.LBB85_40
# %bb.39:
	movl	$300, %edx              # imm = 0x12C
	movl	$1, captures
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	subl	ply, %edx
	callq	qsearch
	movl	%eax, -20(%rbp)
	movl	$0, captures
	movl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_40:
	cmpl	$3, Variant
	jne	.LBB85_42
# %bb.41:
	callq	suicide_eval
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_42:
	cmpl	$4, Variant
	jne	.LBB85_49
# %bb.43:
	callq	losers_eval
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %edi
	callq	abs
	cmpl	$1000000, %eax          # imm = 0xF4240
	jne	.LBB85_48
# %bb.44:
	cmpl	$0, -12(%rbp)
	jle	.LBB85_46
# %bb.45:
	movl	$1000000, %eax          # imm = 0xF4240
	subl	ply, %eax
	jmp	.LBB85_47
.LBB85_46:
	movl	ply, %eax
	addl	$4293967296, %eax       # imm = 0xFFF0BDC0
.LBB85_47:
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_48:
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_49:
	jmp	.LBB85_50
.LBB85_50:
	jmp	.LBB85_51
.LBB85_51:
	jmp	.LBB85_52
.LBB85_52:
	movl	$0, -48(%rbp)
	movl	$1, -112(%rbp)
	movl	-28(%rbp), %esi
	movl	-16(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	leaq	-92(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-148(%rbp), %r8
	callq	ProbeTT
	movl	%eax, %ecx
	subl	$4, %eax
	ja	.LBB85_63
# %bb.53:
	movq	.LJTI85_0(,%rcx,8), %rax
	jmpq	*%rax
.LBB85_54:
	movl	-80(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_55:
	movl	-80(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB85_57
# %bb.56:
	movl	-80(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_57:
	jmp	.LBB85_63
.LBB85_58:
	movl	-80(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.LBB85_60
# %bb.59:
	movl	-80(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_60:
	jmp	.LBB85_63
.LBB85_61:
	jmp	.LBB85_63
.LBB85_62:
	movl	$-1, -92(%rbp)
	movl	$0, -44(%rbp)
.LBB85_63:
	cmpl	$500, -92(%rbp)         # imm = 0x1F4
	jne	.LBB85_65
# %bb.64:
	movl	$-1, -92(%rbp)
.LBB85_65:
	movl	$-1, -68(%rbp)
	movl	$-1000000, -40(%rbp)    # imm = 0xFFF0BDC0
	movl	ep_square, %eax
	movl	%eax, -144(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$4, Variant
	jne	.LBB85_82
# %bb.66:
	callq	losers_eval
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %edi
	callq	abs
	cmpl	$1000000, %eax          # imm = 0xF4240
	jne	.LBB85_71
# %bb.67:
	cmpl	$0, -12(%rbp)
	jle	.LBB85_69
# %bb.68:
	movl	-12(%rbp), %eax
	subl	ply, %eax
	jmp	.LBB85_70
.LBB85_69:
	movl	-12(%rbp), %eax
	addl	ply, %eax
.LBB85_70:
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_71:
	leaq	-12448(%rbp), %rdi
	movl	$1, captures
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -48(%rbp)
	movl	$0, captures
	cmpl	$0, -48(%rbp)
	je	.LBB85_79
# %bb.72:
	movl	$0, -12(%rbp)
.LBB85_73:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_78
# %bb.74:                               #   in Loop: Header=BB85_73 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-60(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB85_76
# %bb.75:                               #   in Loop: Header=BB85_73 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB85_76:                              #   in Loop: Header=BB85_73 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
# %bb.77:                               #   in Loop: Header=BB85_73 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_73
.LBB85_78:
	jmp	.LBB85_79
.LBB85_79:
	cmpl	$0, -52(%rbp)
	jne	.LBB85_81
# %bb.80:
	leaq	-12448(%rbp), %rdi
	movl	$0, captures
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -48(%rbp)
.LBB85_81:
	movl	$0, -52(%rbp)
.LBB85_82:
	cmpl	$0, -152(%rbp)
	jne	.LBB85_109
# %bb.83:
	cmpl	$2, phase
	jne	.LBB85_86
# %bb.84:
	cmpl	$2, phase
	jne	.LBB85_109
# %bb.85:
	cmpl	$6, -16(%rbp)
	jg	.LBB85_109
.LBB85_86:
	cmpl	$0, -60(%rbp)
	jne	.LBB85_109
# %bb.87:
	cmpl	$0, -148(%rbp)
	je	.LBB85_109
# %bb.88:
	cmpl	$0, searching_pv
	jne	.LBB85_109
# %bb.89:
	cmpl	$0, -44(%rbp)
	jne	.LBB85_109
# %bb.90:
	cmpl	$3, Variant
	je	.LBB85_92
# %bb.91:
	cmpl	$4, Variant
	jne	.LBB85_94
.LBB85_92:
	cmpl	$4, Variant
	jne	.LBB85_109
# %bb.93:
	cmpl	$13, -12440(%rbp)
	jne	.LBB85_109
.LBB85_94:
	movl	$0, ep_square
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, ply
	movl	fifty, %eax
	addl	$1, %eax
	movl	%eax, fifty
	movl	hash, %eax
	xorl	$-559038737, %eax       # imm = 0xDEADBEEF
	movl	%eax, hash
	cmpl	$2, Variant
	je	.LBB85_100
# %bb.95:
	cmpl	$4, Variant
	je	.LBB85_100
# %bb.96:
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-28(%rbp), %edi
	subl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	$3, -16(%rbp)
	jle	.LBB85_98
# %bb.97:
	movl	-16(%rbp), %edx
	subl	$2, %edx
	subl	$1, %edx
	jmp	.LBB85_99
.LBB85_98:
	movl	-16(%rbp), %edx
	subl	$1, %edx
	subl	$1, %edx
.LBB85_99:
	movl	$1, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	jmp	.LBB85_101
.LBB85_100:
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-28(%rbp), %edi
	subl	-28(%rbp), %esi
	addl	$1, %esi
	movl	-16(%rbp), %edx
	subl	$3, %edx
	subl	$1, %edx
	movl	$1, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
.LBB85_101:
	movl	hash, %eax
	xorl	$-559038737, %eax       # imm = 0xDEADBEEF
	movl	%eax, hash
	movl	fifty, %eax
	addl	$-1, %eax
	movl	%eax, fifty
	movl	ply, %eax
	addl	$-1, %eax
	movl	%eax, ply
	movl	white_to_move, %eax
	xorl	$1, %eax
	movl	%eax, white_to_move
	movl	-144(%rbp), %eax
	movl	%eax, ep_square
	cmpl	$0, time_exit
	je	.LBB85_103
# %bb.102:
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_103:
	movl	NTries, %eax
	addl	$1, %eax
	movl	%eax, NTries
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.LBB85_105
# %bb.104:
	movl	NCuts, %eax
	addl	$1, %eax
	movl	%eax, NCuts
	movl	-20(%rbp), %edi
	movl	-36(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-16(%rbp), %r9d
	movl	$500, %ecx              # imm = 0x1F4
	xorl	%r8d, %r8d
	callq	StoreTT
	movl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_105:
	cmpl	$-999900, -20(%rbp)     # imm = 0xFFF0BE24
	jge	.LBB85_107
# %bb.106:
	movl	$1, -44(%rbp)
	movl	TExt, %eax
	addl	$1, %eax
	movl	%eax, TExt
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	ext_onerep, %eax
	addl	$1, %eax
	movl	%eax, ext_onerep
.LBB85_107:
	jmp	.LBB85_108
.LBB85_108:
	jmp	.LBB85_112
.LBB85_109:
	cmpl	$1, -44(%rbp)
	jne	.LBB85_111
# %bb.110:
	movl	TExt, %eax
	addl	$1, %eax
	movl	%eax, TExt
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	ext_onerep, %eax
	addl	$1, %eax
	movl	%eax, ext_onerep
.LBB85_111:
	jmp	.LBB85_112
.LBB85_112:
	movl	$-1000000, -20(%rbp)    # imm = 0xFFF0BDC0
	cmpl	$4, Variant
	je	.LBB85_114
# %bb.113:
	leaq	-12448(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -48(%rbp)
.LBB85_114:
	cmpl	$0, cfg_onerep
	je	.LBB85_127
# %bb.115:
	cmpl	$0, -60(%rbp)
	je	.LBB85_127
# %bb.116:
	cmpl	$0, -48(%rbp)
	je	.LBB85_126
# %bb.117:
	movl	$0, -12(%rbp)
.LBB85_118:                             # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	-48(%rbp), %ecx
	jge	.LBB85_120
# %bb.119:                              #   in Loop: Header=BB85_118 Depth=1
	cmpl	$2, -52(%rbp)
	setl	%al
.LBB85_120:                             #   in Loop: Header=BB85_118 Depth=1
	testb	$1, %al
	jne	.LBB85_121
	jmp	.LBB85_125
.LBB85_121:                             #   in Loop: Header=BB85_118 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-60(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB85_123
# %bb.122:                              #   in Loop: Header=BB85_118 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB85_123:                             #   in Loop: Header=BB85_118 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
# %bb.124:                              #   in Loop: Header=BB85_118 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_118
.LBB85_125:
	jmp	.LBB85_126
.LBB85_126:
	jmp	.LBB85_127
.LBB85_127:
	cmpl	$300, ply               # imm = 0x12C
	jge	.LBB85_136
# %bb.128:
	cmpl	$3, Variant
	jne	.LBB85_131
# %bb.129:
	cmpl	$1, -48(%rbp)
	jne	.LBB85_131
# %bb.130:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	ext_onerep, %eax
	addl	$1, %eax
	movl	%eax, ext_onerep
	movslq	ply, %rax
	movl	$1, singular(,%rax,4)
	jmp	.LBB85_135
.LBB85_131:
	cmpl	$1, -52(%rbp)
	jne	.LBB85_134
# %bb.132:
	movl	ply, %eax
	subl	$2, %eax
	cltq
	cmpl	$0, singular(,%rax,4)
	jne	.LBB85_134
# %bb.133:
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	ext_onerep, %eax
	addl	$1, %eax
	movl	%eax, ext_onerep
	movslq	ply, %rax
	movl	$1, singular(,%rax,4)
.LBB85_134:
	jmp	.LBB85_135
.LBB85_135:
	jmp	.LBB85_136
.LBB85_136:
	movl	$1, -108(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$2, phase
	je	.LBB85_161
# %bb.137:
	cmpl	$3, Variant
	je	.LBB85_161
# %bb.138:
	cmpl	$0, cfg_futprune
	je	.LBB85_161
# %bb.139:
	cmpl	$0, white_to_move
	je	.LBB85_141
# %bb.140:
	movl	Material, %eax
	jmp	.LBB85_142
.LBB85_141:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB85_142:
	addl	$900, %eax              # imm = 0x384
	movl	%eax, -64(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_146
# %bb.143:
	cmpl	$3, -16(%rbp)
	jne	.LBB85_146
# %bb.144:
	movl	-64(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB85_146
# %bb.145:
	movl	$2, -16(%rbp)
.LBB85_146:
	cmpl	$0, white_to_move
	je	.LBB85_148
# %bb.147:
	movl	Material, %eax
	jmp	.LBB85_149
.LBB85_148:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB85_149:
	addl	$500, %eax              # imm = 0x1F4
	movl	%eax, -64(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_153
# %bb.150:
	cmpl	$2, -16(%rbp)
	jne	.LBB85_153
# %bb.151:
	movl	-64(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB85_153
# %bb.152:
	movl	$1, -76(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	%eax, -40(%rbp)
.LBB85_153:
	cmpl	$0, white_to_move
	je	.LBB85_155
# %bb.154:
	movl	Material, %eax
	jmp	.LBB85_156
.LBB85_155:
	xorl	%eax, %eax
	subl	Material, %eax
.LBB85_156:
	movl	$200, %ecx
	movl	$150, %edx
	movl	Variant, %esi
	cmpl	$2, %esi
	cmovel	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB85_160
# %bb.157:
	cmpl	$1, -16(%rbp)
	jne	.LBB85_160
# %bb.158:
	movl	-64(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB85_160
# %bb.159:
	movl	$1, -76(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	%eax, -40(%rbp)
.LBB85_160:
	jmp	.LBB85_161
.LBB85_161:
	cmpl	$0, -48(%rbp)
	jle	.LBB85_259
# %bb.162:
	leaq	-16544(%rbp), %rdx
	leaq	-14496(%rbp), %rsi
	leaq	-12448(%rbp), %rdi
	movl	-48(%rbp), %ecx
	movl	-92(%rbp), %r8d
	callq	order_moves
.LBB85_163:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_251 Depth 2
	leaq	-12(%rbp), %rdi
	leaq	-14496(%rbp), %rsi
	movl	-48(%rbp), %edx
	callq	remove_one
	cmpl	$0, %eax
	je	.LBB85_258
# %bb.164:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12448(%rbp), %rdi
	movabsq	$path, %rax
	movl	$0, -96(%rbp)
	movl	hash, %ecx
	movl	move_number, %edx
	addl	ply, %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, hash_history(,%rdx,4)
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rdi, %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rcx
	movq	%rcx, (%rax)
	movq	8(%rdx), %rcx
	movq	%rcx, 8(%rax)
	movq	16(%rdx), %rcx
	movq	%rcx, 16(%rax)
	movl	$0, -32(%rbp)
	movl	-12(%rbp), %esi
	movl	-60(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB85_218
# %bb.165:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	f_in_check
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movslq	ply, %rcx
	movl	%eax, checks(,%rcx,4)
	cmpl	$0, -88(%rbp)
	jne	.LBB85_175
# %bb.166:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$2, Variant
	je	.LBB85_169
# %bb.167:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$3, Variant
	je	.LBB85_169
# %bb.168:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$4, Variant
	jne	.LBB85_175
.LBB85_169:                             #   in Loop: Header=BB85_163 Depth=1
	cmpl	$3, -16(%rbp)
	jge	.LBB85_175
# %bb.170:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	4(%rax), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB85_172
# %bb.171:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	4(%rax), %rax
	cmpl	$6, Xrank(,%rax,4)
	jge	.LBB85_174
.LBB85_172:                             #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	4(%rax), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB85_175
# %bb.173:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	4(%rax), %rax
	cmpl	$3, Xrank(,%rax,4)
	jg	.LBB85_175
.LBB85_174:                             #   in Loop: Header=BB85_163 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB85_175:                             #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movl	$0, -72(%rbp)
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, (%rax)
	jne	.LBB85_182
# %bb.176:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$1, -16(%rbp)
	jle	.LBB85_182
# %bb.177:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB85_182
# %bb.178:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -60(%rbp)
	jne	.LBB85_182
# %bb.179:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, searching_pv
	jne	.LBB85_182
# %bb.180:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, cfg_razordrop
	je	.LBB85_182
# %bb.181:                              #   in Loop: Header=BB85_163 Depth=1
	movl	razor_drop, %eax
	addl	$1, %eax
	movl	%eax, razor_drop
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_195
.LBB85_182:                             #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, (%rax)
	jne	.LBB85_194
# %bb.183:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB85_194
# %bb.184:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -60(%rbp)
	jne	.LBB85_194
# %bb.185:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, cfg_cutdrop
	je	.LBB85_194
# %bb.186:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, white_to_move
	je	.LBB85_190
# %bb.187:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %edi
	movl	$1, %esi
	callq	calc_attackers
	movl	%eax, %ebx
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %edi
	xorl	%esi, %esi
	callq	calc_attackers
	subl	%eax, %ebx
	cmpl	$0, %ebx
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB85_189
# %bb.188:                              #   in Loop: Header=BB85_163 Depth=1
	movl	drop_cuts, %eax
	addl	$1, %eax
	movl	%eax, drop_cuts
.LBB85_189:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_193
.LBB85_190:                             #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %edi
	xorl	%esi, %esi
	callq	calc_attackers
	movl	%eax, %ebx
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %edi
	movl	$1, %esi
	callq	calc_attackers
	subl	%eax, %ebx
	cmpl	$0, %ebx
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB85_192
# %bb.191:                              #   in Loop: Header=BB85_163 Depth=1
	movl	drop_cuts, %eax
	addl	$1, %eax
	movl	%eax, drop_cuts
.LBB85_192:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_193
.LBB85_193:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_194
.LBB85_194:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_195
.LBB85_195:                             #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB85_216
# %bb.196:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -76(%rbp)
	je	.LBB85_202
# %bb.197:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB85_202
# %bb.198:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movl	-104(%rbp), %ebx
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	8(%rax), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movb	$1, %cl
	cmpl	$2, Variant
	je	.LBB85_200
# %bb.199:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$4, Variant
	sete	%cl
.LBB85_200:                             #   in Loop: Header=BB85_163 Depth=1
	movl	$2, %edx
	movl	$1, %esi
	testb	$1, %cl
	cmovnel	%esi, %edx
	imull	%edx, %eax
	addl	%eax, %ebx
	cmpl	-36(%rbp), %ebx
	jg	.LBB85_202
# %bb.201:                              #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 12(%rax)
	je	.LBB85_216
.LBB85_202:                             #   in Loop: Header=BB85_163 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB85_204
# %bb.203:                              #   in Loop: Header=BB85_163 Depth=1
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-28(%rbp), %edi
	subl	-36(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	subl	$1, %edx
	xorl	%ecx, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	FULL, %eax
	addl	$1, %eax
	movl	%eax, FULL
	jmp	.LBB85_215
.LBB85_204:                             #   in Loop: Header=BB85_163 Depth=1
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-36(%rbp), %edi
	subl	$1, %edi
	subl	-36(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	subl	$1, %edx
	xorl	%ecx, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	PVS, %eax
	addl	$1, %eax
	movl	%eax, PVS
	movl	-20(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB85_214
# %bb.205:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, time_exit
	jne	.LBB85_214
# %bb.206:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$-50000, -20(%rbp)      # imm = 0xFFFF3CB0
	je	.LBB85_214
# %bb.207:                              #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB85_212
# %bb.208:                              #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_212
# %bb.209:                              #   in Loop: Header=BB85_163 Depth=1
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-28(%rbp), %edi
	subl	-36(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	subl	$1, %edx
	xorl	%ecx, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	PVSF, %eax
	addl	$1, %eax
	movl	%eax, PVSF
	movl	-20(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB85_211
# %bb.210:                              #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB85_211:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_213
.LBB85_212:                             #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB85_213:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_214
.LBB85_214:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_215
.LBB85_215:                             #   in Loop: Header=BB85_163 Depth=1
	movl	$1, -96(%rbp)
	jmp	.LBB85_217
.LBB85_216:                             #   in Loop: Header=BB85_163 Depth=1
	movl	razor_material, %eax
	addl	$1, %eax
	movl	%eax, razor_material
.LBB85_217:                             #   in Loop: Header=BB85_163 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -112(%rbp)
.LBB85_218:                             #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB85_221
# %bb.219:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB85_221
# %bb.220:                              #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB85_221:                             #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
	cmpl	$0, time_exit
	je	.LBB85_223
# %bb.222:
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_223:                             #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB85_255
# %bb.224:                              #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB85_255
# %bb.225:                              #   in Loop: Header=BB85_163 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.LBB85_250
# %bb.226:
	leaq	-12448(%rbp), %rax
	movabsq	$history_h, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	(%rsi), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	4(%rsi), %rdx
	movl	(%rcx,%rdx,4), %esi
	addl	$1, %esi
	movl	%esi, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$13, 8(%rax)
	jne	.LBB85_247
# %bb.227:
	movabsq	$killer1, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB85_231
# %bb.228:
	movabsq	$killer1, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB85_231
# %bb.229:
	movabsq	$killer1, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB85_231
# %bb.230:
	movslq	ply, %rax
	movl	killer_scores(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, killer_scores(,%rax,4)
	jmp	.LBB85_246
.LBB85_231:
	movabsq	$killer2, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB85_237
# %bb.232:
	movabsq	$killer2, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB85_237
# %bb.233:
	movabsq	$killer2, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB85_237
# %bb.234:
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, killer_scores2(,%rax,4)
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %eax
	movslq	ply, %rcx
	cmpl	killer_scores(,%rcx,4), %eax
	jle	.LBB85_236
# %bb.235:
	movabsq	$killer2, %rax
	movabsq	$killer1, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, -136(%rbp)
	movq	8(%rsi), %rdx
	movq	%rdx, -128(%rbp)
	movq	16(%rsi), %rdx
	movq	%rdx, -120(%rbp)
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rsi), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rdx
	movq	%rdx, 16(%rcx)
	movslq	ply, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-136(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-128(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-120(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movslq	ply, %rax
	movl	killer_scores(,%rax,4), %eax
	movl	%eax, -100(%rbp)
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores(,%rcx,4)
	movl	-100(%rbp), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores2(,%rcx,4)
.LBB85_236:
	jmp	.LBB85_245
.LBB85_237:
	movabsq	$killer3, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB85_243
# %bb.238:
	movabsq	$killer3, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB85_243
# %bb.239:
	movabsq	$killer3, %rax
	leaq	-12448(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB85_243
# %bb.240:
	movslq	ply, %rax
	movl	killer_scores3(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, killer_scores3(,%rax,4)
	movslq	ply, %rax
	movl	killer_scores3(,%rax,4), %eax
	movslq	ply, %rcx
	cmpl	killer_scores2(,%rcx,4), %eax
	jle	.LBB85_242
# %bb.241:
	movabsq	$killer3, %rax
	movabsq	$killer2, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, -136(%rbp)
	movq	8(%rsi), %rdx
	movq	%rdx, -128(%rbp)
	movq	16(%rsi), %rdx
	movq	%rdx, -120(%rbp)
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rsi), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rdx
	movq	%rdx, 16(%rcx)
	movslq	ply, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-136(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-128(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-120(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %eax
	movl	%eax, -100(%rbp)
	movslq	ply, %rax
	movl	killer_scores3(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores2(,%rcx,4)
	movl	-100(%rbp), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores3(,%rcx,4)
.LBB85_242:
	jmp	.LBB85_244
.LBB85_243:
	leaq	-12448(%rbp), %rax
	movabsq	$killer3, %rcx
	movslq	ply, %rdx
	movl	$1, killer_scores3(,%rdx,4)
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
.LBB85_244:
	jmp	.LBB85_245
.LBB85_245:
	jmp	.LBB85_246
.LBB85_246:
	jmp	.LBB85_247
.LBB85_247:
	cmpl	$1, -108(%rbp)
	jne	.LBB85_249
# %bb.248:
	movl	FHF, %eax
	addl	$1, %eax
	movl	%eax, FHF
.LBB85_249:
	movl	FH, %eax
	addl	$1, %eax
	movl	%eax, FH
	movl	-20(%rbp), %edi
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	callq	StoreTT
	movl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_250:                             #   in Loop: Header=BB85_163 Depth=1
	leaq	-12448(%rbp), %rax
	movabsq	$pv, %rcx
	movl	-20(%rbp), %edx
	movl	%edx, -36(%rbp)
	movl	-12(%rbp), %edx
	movl	%edx, -68(%rbp)
	movslq	ply, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB85_251:                             #   Parent Loop BB85_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-84(%rbp), %eax
	movl	ply, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	pv_length(,%rcx,4), %eax
	jge	.LBB85_254
# %bb.252:                              #   in Loop: Header=BB85_251 Depth=2
	movabsq	$pv, %rax
	movslq	ply, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-84(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	ply, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rdx)
# %bb.253:                              #   in Loop: Header=BB85_251 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB85_251
.LBB85_254:                             #   in Loop: Header=BB85_163 Depth=1
	movl	ply, %eax
	addl	$1, %eax
	cltq
	movl	pv_length(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, pv_length(,%rcx,4)
.LBB85_255:                             #   in Loop: Header=BB85_163 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB85_257
# %bb.256:                              #   in Loop: Header=BB85_163 Depth=1
	movl	$0, -108(%rbp)
.LBB85_257:                             #   in Loop: Header=BB85_163 Depth=1
	jmp	.LBB85_163
.LBB85_258:
	jmp	.LBB85_260
.LBB85_259:
	movl	$1000000, %edi          # imm = 0xF4240
	subl	ply, %edi
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	xorl	%ecx, %ecx
	callq	StoreTT
	movl	$1000000, %eax          # imm = 0xF4240
	subl	ply, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_260:
	cmpl	$0, -112(%rbp)
	je	.LBB85_267
# %bb.261:
	cmpl	$4, Variant
	je	.LBB85_266
# %bb.262:
	cmpl	$3, Variant
	je	.LBB85_266
# %bb.263:
	callq	in_check
	cmpl	$0, %eax
	je	.LBB85_265
# %bb.264:
	movl	ply, %edi
	addl	$4293967296, %edi       # imm = 0xFFF0BDC0
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	xorl	%ecx, %ecx
	callq	StoreTT
	movl	ply, %eax
	addl	$4293967296, %eax       # imm = 0xFFF0BDC0
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_265:
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	StoreTT
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_266:
	movl	$1000000, %edi          # imm = 0xF4240
	subl	ply, %edi
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	xorl	%ecx, %ecx
	callq	StoreTT
	movl	$1000000, %eax          # imm = 0xF4240
	subl	ply, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_281
.LBB85_267:
	cmpl	$100, fifty
	jle	.LBB85_269
# %bb.268:
	movl	$0, -24(%rbp)
	jmp	.LBB85_281
.LBB85_269:
	jmp	.LBB85_270
.LBB85_270:
	cmpl	$-1, -68(%rbp)
	jne	.LBB85_272
# %bb.271:
	movl	$500, -68(%rbp)         # imm = 0x1F4
.LBB85_272:
	movl	-40(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jg	.LBB85_276
# %bb.273:
	cmpl	$0, -76(%rbp)
	jne	.LBB85_275
# %bb.274:
	movl	-40(%rbp), %edi
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	callq	StoreTT
.LBB85_275:
	jmp	.LBB85_280
.LBB85_276:
	cmpl	$0, -76(%rbp)
	jne	.LBB85_278
# %bb.277:
	movl	-40(%rbp), %edi
	movl	-56(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	callq	StoreTT
	jmp	.LBB85_279
.LBB85_278:
	movl	-40(%rbp), %edi
	movl	-68(%rbp), %ecx
	movl	-44(%rbp), %r8d
	movl	-16(%rbp), %r9d
	movl	$4293967296, %esi       # imm = 0xFFF0BDC0
	movl	$4293967296, %edx       # imm = 0xFFF0BDC0
	callq	StoreTT
.LBB85_279:
	jmp	.LBB85_280
.LBB85_280:
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB85_281:
	movl	-24(%rbp), %eax
	addq	$16536, %rsp            # imm = 0x4098
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end85:
	.size	search, .Lfunc_end85-search
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI85_0:
	.quad	.LBB85_61
	.quad	.LBB85_55
	.quad	.LBB85_58
	.quad	.LBB85_54
	.quad	.LBB85_62
                                        # -- End function
	.text
	.globl	search_root             # -- Begin function search_root
	.p2align	4, 0x90
	.type	search_root,@function
search_root:                            # @search_root
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$16536, %rsp            # imm = 0x4098
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	movl	%esi, -124(%rbp)
	movl	%edx, -120(%rbp)
	movl	%ecx, -40(%rbp)
	movq	dummy, %rax
	movq	%rax, -64(%rbp)
	movq	dummy+8, %rax
	movq	%rax, -56(%rbp)
	movq	dummy+16, %rax
	movq	%rax, -48(%rbp)
	movl	$-1000000, -16(%rbp)    # imm = 0xFFF0BDC0
	movl	$0, -68(%rbp)
	movl	-124(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-120(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	$1, -80(%rbp)
	movl	$1, ply
	movl	$1, searching_pv
	movl	$0, time_exit
	movl	$0, time_failure
	movl	$1, -84(%rbp)
	movl	$-1000000, cur_score    # imm = 0xFFF0BDC0
	movl	nodes, %eax
	addl	$1, %eax
	movl	%eax, nodes
	callq	is_draw
	cmpl	$0, %eax
	je	.LBB86_2
# %bb.1:
	movl	$5, result
	movl	$0, cur_score
	movslq	ply, %rax
	movl	$0, pv_length(,%rax,4)
	movq	dummy, %rax
	movq	%rax, (%rbx)
	movq	dummy+8, %rax
	movq	%rax, 8(%rbx)
	movq	dummy+16, %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB86_138
.LBB86_2:
	movl	ply, %eax
	movslq	ply, %rcx
	movl	%eax, pv_length(,%rcx,4)
	movl	hash, %eax
	movl	move_number, %ecx
	addl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, hash_history(,%rcx,4)
	callq	in_check
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB86_4
# %bb.3:
	movl	ext_check, %eax
	addl	$1, %eax
	movl	%eax, ext_check
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
.LBB86_4:
	movl	-36(%rbp), %eax
	movslq	ply, %rcx
	movl	%eax, checks(,%rcx,4)
	movslq	ply, %rax
	movl	$0, recaps(,%rax,4)
	movslq	ply, %rax
	movl	$0, singular(,%rax,4)
	cmpl	$4, Variant
	jne	.LBB86_22
# %bb.5:
	leaq	-12416(%rbp), %rdi
	movl	$0, legals
	movl	$1, captures
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -28(%rbp)
	movl	$0, captures
	cmpl	$0, -28(%rbp)
	je	.LBB86_13
# %bb.6:
	movl	$0, -12(%rbp)
.LBB86_7:                               # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_12
# %bb.8:                                #   in Loop: Header=BB86_7 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB86_10
# %bb.9:                                #   in Loop: Header=BB86_7 Depth=1
	movl	legals, %eax
	addl	$1, %eax
	movl	%eax, legals
.LBB86_10:                              #   in Loop: Header=BB86_7 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
# %bb.11:                               #   in Loop: Header=BB86_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_7
.LBB86_12:
	jmp	.LBB86_13
.LBB86_13:
	cmpl	$0, legals
	jne	.LBB86_21
# %bb.14:
	leaq	-12416(%rbp), %rdi
	movl	$0, captures
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB86_15:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_20
# %bb.16:                               #   in Loop: Header=BB86_15 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB86_18
# %bb.17:                               #   in Loop: Header=BB86_15 Depth=1
	movl	legals, %eax
	addl	$1, %eax
	movl	%eax, legals
.LBB86_18:                              #   in Loop: Header=BB86_15 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
# %bb.19:                               #   in Loop: Header=BB86_15 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_15
.LBB86_20:
	jmp	.LBB86_21
.LBB86_21:
	jmp	.LBB86_23
.LBB86_22:
	leaq	-12416(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -28(%rbp)
.LBB86_23:
	leaq	-16512(%rbp), %rdx
	leaq	-14464(%rbp), %rsi
	leaq	-12416(%rbp), %rdi
	movl	legals, %eax
	movl	%eax, movetotal
	movl	-28(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	callq	order_moves
.LBB86_24:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_61 Depth 2
                                        #     Child Loop BB86_43 Depth 2
                                        #     Child Loop BB86_104 Depth 2
	leaq	-12(%rbp), %rdi
	leaq	-14464(%rbp), %rsi
	movl	-28(%rbp), %edx
	callq	remove_one
	cmpl	$0, %eax
	je	.LBB86_116
# %bb.25:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, alllosers
	jne	.LBB86_31
# %bb.26:                               #   in Loop: Header=BB86_24 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, rootlosers(,%rax,4)
	je	.LBB86_31
# %bb.27:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$4, Variant
	je	.LBB86_29
# %bb.28:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$3, Variant
	jne	.LBB86_31
.LBB86_29:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_30
.LBB86_30:                              # %.backedge
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_24
.LBB86_31:                              #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12416(%rbp), %rdi
	movabsq	$path, %rax
	movl	$0, -76(%rbp)
	movl	hash, %ecx
	movl	move_number, %edx
	addl	ply, %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, hash_history(,%rdx,4)
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rdi, %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rcx
	movq	%rcx, (%rax)
	movq	8(%rdx), %rcx
	movq	%rcx, 8(%rax)
	movq	16(%rdx), %rcx
	movq	%rcx, 16(%rax)
	movl	nodes, %eax
	movl	%eax, -116(%rbp)
	movl	-12(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB86_80
# %bb.32:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
	movabsq	$searching_move, %rdi
	leaq	-12416(%rbp), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -68(%rbp)
	movl	movetotal, %ecx
	subl	-68(%rbp), %ecx
	movl	%ecx, moveleft
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	make
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	f_in_check
	movslq	ply, %rcx
	movl	%eax, checks(,%rcx,4)
	movslq	ply, %rax
	movl	$0, recaps(,%rax,4)
	movslq	ply, %rax
	movl	$0, singular(,%rax,4)
	cmpl	$1, -84(%rbp)
	je	.LBB86_34
# %bb.33:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$2, i_depth
	jge	.LBB86_53
.LBB86_34:                              #   in Loop: Header=BB86_24 Depth=1
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-32(%rbp), %edi
	subl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	subl	$1, %edx
	xorl	%ecx, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	cmpl	$0, time_exit
	jne	.LBB86_52
# %bb.35:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, post
	jne	.LBB86_37
# %bb.36:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, xb_mode
	jne	.LBB86_52
.LBB86_37:                              #   in Loop: Header=BB86_24 Depth=1
	cmpl	$2, i_depth
	jl	.LBB86_52
# %bb.38:                               #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jl	.LBB86_40
# %bb.39:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rsi
	movl	-16(%rbp), %edi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rsi
	callq	post_fh_thinking
	jmp	.LBB86_48
.LBB86_40:                              #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB86_42
# %bb.41:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rsi
	movl	$1, failed
	movl	-16(%rbp), %edi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rsi
	callq	post_fl_thinking
	jmp	.LBB86_47
.LBB86_42:                              #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movabsq	$pv, %rcx
	movl	ply, %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rcx
	movl	ply, %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
	movl	ply, %eax
	movl	%eax, -20(%rbp)
.LBB86_43:                              #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	ply, %rcx
	cmpl	pv_length(,%rcx,4), %eax
	jge	.LBB86_46
# %bb.44:                               #   in Loop: Header=BB86_43 Depth=2
	movabsq	$pv, %rax
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	ply, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rdx)
# %bb.45:                               #   in Loop: Header=BB86_43 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_43
.LBB86_46:                              #   in Loop: Header=BB86_24 Depth=1
	movslq	ply, %rax
	movl	pv_length(,%rax,4), %eax
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, pv_length(,%rcx,4)
	movl	-16(%rbp), %edi
	callq	post_thinking
.LBB86_47:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_48
.LBB86_48:                              #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	cur_score, %eax
	jle	.LBB86_51
# %bb.49:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, time_exit
	jne	.LBB86_51
# %bb.50:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movl	-16(%rbp), %ecx
	movl	%ecx, cur_score
	movl	-12(%rbp), %ecx
	movl	%ecx, bestmovenum
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, -64(%rbp)
	movq	8(%rax), %rcx
	movq	%rcx, -56(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)
.LBB86_51:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_52
.LBB86_52:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_71
.LBB86_53:                              #   in Loop: Header=BB86_24 Depth=1
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-24(%rbp), %edi
	subl	$1, %edi
	subl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	subl	$1, %edx
	xorl	%ecx, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB86_67
# %bb.54:                               #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_67
# %bb.55:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, time_exit
	jne	.LBB86_67
# %bb.56:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rsi
	movl	-16(%rbp), %edi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rsi
	callq	post_fail_thinking
	xorl	%esi, %esi
	xorl	%edi, %edi
	subl	-32(%rbp), %edi
	subl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	subl	$1, %edx
	xorl	%ecx, %ecx
	callq	search
	xorl	%ecx, %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB86_66
# %bb.57:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, time_exit
	jne	.LBB86_66
# %bb.58:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movl	$0, failed
	movl	-16(%rbp), %ecx
	movl	%ecx, cur_score
	movl	-12(%rbp), %ecx
	movl	%ecx, bestmovenum
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, -64(%rbp)
	movq	8(%rax), %rcx
	movq	%rcx, -56(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_65
# %bb.59:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$2, i_depth
	jl	.LBB86_65
# %bb.60:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movabsq	$pv, %rcx
	movl	ply, %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rcx
	movl	ply, %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
	movl	ply, %eax
	movl	%eax, -20(%rbp)
.LBB86_61:                              #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	ply, %rcx
	cmpl	pv_length(,%rcx,4), %eax
	jge	.LBB86_64
# %bb.62:                               #   in Loop: Header=BB86_61 Depth=2
	movabsq	$pv, %rax
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	ply, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rdx)
# %bb.63:                               #   in Loop: Header=BB86_61 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_61
.LBB86_64:                              #   in Loop: Header=BB86_24 Depth=1
	movslq	ply, %rax
	movl	pv_length(,%rax,4), %eax
	movl	ply, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	%eax, pv_length(,%rcx,4)
.LBB86_65:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_66
.LBB86_66:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_67
.LBB86_67:                              #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jl	.LBB86_70
# %bb.68:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, time_exit
	jne	.LBB86_70
# %bb.69:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rsi
	movl	-16(%rbp), %edi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rsi
	callq	post_fh_thinking
.LBB86_70:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_71
.LBB86_71:                              #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	cur_score, %eax
	jle	.LBB86_74
# %bb.72:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, time_exit
	jne	.LBB86_74
# %bb.73:                               #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movl	-16(%rbp), %ecx
	movl	%ecx, cur_score
	movl	-12(%rbp), %ecx
	movl	%ecx, bestmovenum
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, -64(%rbp)
	movq	8(%rax), %rcx
	movq	%rcx, -56(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)
.LBB86_74:                              #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, time_exit
	je	.LBB86_79
# %bb.75:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$-1000000, cur_score    # imm = 0xFFF0BDC0
	jne	.LBB86_79
# %bb.76:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB86_78
# %bb.77:                               #   in Loop: Header=BB86_24 Depth=1
	movl	$1, time_failure
.LBB86_78:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_79
.LBB86_79:                              #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -80(%rbp)
	movl	$1, -76(%rbp)
.LBB86_80:                              #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	unmake
	cmpl	$0, time_exit
	je	.LBB86_82
# %bb.81:
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB86_138
.LBB86_82:                              #   in Loop: Header=BB86_24 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB86_113
# %bb.83:                               #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, -76(%rbp)
	je	.LBB86_113
# %bb.84:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer1, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB86_88
# %bb.85:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer1, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB86_88
# %bb.86:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer1, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB86_88
# %bb.87:                               #   in Loop: Header=BB86_24 Depth=1
	movslq	ply, %rax
	movl	killer_scores(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, killer_scores(,%rax,4)
	jmp	.LBB86_103
.LBB86_88:                              #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer2, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB86_94
# %bb.89:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer2, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB86_94
# %bb.90:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer2, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB86_94
# %bb.91:                               #   in Loop: Header=BB86_24 Depth=1
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, killer_scores2(,%rax,4)
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %eax
	movslq	ply, %rcx
	cmpl	killer_scores(,%rcx,4), %eax
	jle	.LBB86_93
# %bb.92:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer2, %rax
	movabsq	$killer1, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, -112(%rbp)
	movq	8(%rsi), %rdx
	movq	%rdx, -104(%rbp)
	movq	16(%rsi), %rdx
	movq	%rdx, -96(%rbp)
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rsi), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rdx
	movq	%rdx, 16(%rcx)
	movslq	ply, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-112(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-104(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movslq	ply, %rax
	movl	killer_scores(,%rax,4), %eax
	movl	%eax, -72(%rbp)
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores(,%rcx,4)
	movl	-72(%rbp), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores2(,%rcx,4)
.LBB86_93:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_102
.LBB86_94:                              #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer3, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	(%rax), %ecx
	jne	.LBB86_100
# %bb.95:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer3, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	4(%rax), %ecx
	jne	.LBB86_100
# %bb.96:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer3, %rax
	leaq	-12416(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	12(%rcx), %ecx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	cmpl	12(%rax), %ecx
	jne	.LBB86_100
# %bb.97:                               #   in Loop: Header=BB86_24 Depth=1
	movslq	ply, %rax
	movl	killer_scores3(,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, killer_scores3(,%rax,4)
	movslq	ply, %rax
	movl	killer_scores3(,%rax,4), %eax
	movslq	ply, %rcx
	cmpl	killer_scores2(,%rcx,4), %eax
	jle	.LBB86_99
# %bb.98:                               #   in Loop: Header=BB86_24 Depth=1
	movabsq	$killer3, %rax
	movabsq	$killer2, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, -112(%rbp)
	movq	8(%rsi), %rdx
	movq	%rdx, -104(%rbp)
	movq	16(%rsi), %rdx
	movq	%rdx, -96(%rbp)
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rsi), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rdx
	movq	%rdx, 16(%rcx)
	movslq	ply, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-112(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-104(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movslq	ply, %rax
	movl	killer_scores2(,%rax,4), %eax
	movl	%eax, -72(%rbp)
	movslq	ply, %rax
	movl	killer_scores3(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores2(,%rcx,4)
	movl	-72(%rbp), %eax
	movslq	ply, %rcx
	movl	%eax, killer_scores3(,%rcx,4)
.LBB86_99:                              #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_101
.LBB86_100:                             #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movabsq	$killer3, %rcx
	movslq	ply, %rdx
	movl	$1, killer_scores3(,%rdx,4)
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
.LBB86_101:                             #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_102
.LBB86_102:                             #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_103
.LBB86_103:                             #   in Loop: Header=BB86_24 Depth=1
	leaq	-12416(%rbp), %rax
	movabsq	$pv, %rcx
	movabsq	$history_h, %rdx
	movslq	-12(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	(%rdi), %rsi
	imulq	$576, %rsi, %rsi        # imm = 0x240
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	4(%rdi), %rsi
	movl	(%rdx,%rsi,4), %edi
	addl	$1, %edi
	movl	%edi, (%rdx,%rsi,4)
	movl	-16(%rbp), %edx
	movl	%edx, -24(%rbp)
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movq	(%rsi), %rdx
	movq	%rdx, -64(%rbp)
	movq	8(%rsi), %rdx
	movq	%rdx, -56(%rbp)
	movq	16(%rsi), %rdx
	movq	%rdx, -48(%rbp)
	movl	-12(%rbp), %edx
	movl	%edx, bestmovenum
	movl	-24(%rbp), %edx
	movl	%edx, cur_score
	movslq	ply, %rdx
	imulq	$7200, %rdx, %rdx       # imm = 0x1C20
	addq	%rdx, %rcx
	movslq	ply, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
	movl	ply, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB86_104:                             #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	ply, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	pv_length(,%rcx,4), %eax
	jge	.LBB86_107
# %bb.105:                              #   in Loop: Header=BB86_104 Depth=2
	movabsq	$pv, %rax
	movslq	ply, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	ply, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rdx)
# %bb.106:                              #   in Loop: Header=BB86_104 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_104
.LBB86_107:                             #   in Loop: Header=BB86_24 Depth=1
	movl	ply, %eax
	addl	$1, %eax
	cltq
	movl	pv_length(,%rax,4), %eax
	movslq	ply, %rcx
	movl	%eax, pv_length(,%rcx,4)
	movl	cur_score, %eax
	cmpl	-32(%rbp), %eax
	jl	.LBB86_109
# %bb.108:
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB86_138
.LBB86_109:                             #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, post
	je	.LBB86_112
# %bb.110:                              #   in Loop: Header=BB86_24 Depth=1
	cmpl	$2, i_depth
	jl	.LBB86_112
# %bb.111:                              #   in Loop: Header=BB86_24 Depth=1
	movl	-24(%rbp), %edi
	callq	post_thinking
.LBB86_112:                             #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_113
.LBB86_113:                             #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, -76(%rbp)
	je	.LBB86_115
# %bb.114:                              #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -84(%rbp)
.LBB86_115:                             #   in Loop: Header=BB86_24 Depth=1
	movl	nodes, %eax
	subl	-116(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, rootnodecount(,%rcx,4)
	jmp	.LBB86_30
.LBB86_116:
	cmpl	$0, -80(%rbp)
	je	.LBB86_132
# %bb.117:
	cmpl	$0, is_pondering
	jne	.LBB86_132
# %bb.118:
	cmpl	$3, Variant
	je	.LBB86_127
# %bb.119:
	cmpl	$4, Variant
	je	.LBB86_127
# %bb.120:
	callq	in_check
	cmpl	$0, %eax
	je	.LBB86_125
# %bb.121:
	cmpl	$1, white_to_move
	jne	.LBB86_123
# %bb.122:
	movl	$2, result
	jmp	.LBB86_124
.LBB86_123:
	movl	$3, result
.LBB86_124:
	jmp	.LBB86_126
.LBB86_125:
	movl	$1, result
.LBB86_126:
	jmp	.LBB86_131
.LBB86_127:
	cmpl	$1, white_to_move
	jne	.LBB86_129
# %bb.128:
	movl	$3, result
	jmp	.LBB86_130
.LBB86_129:
	movl	$2, result
.LBB86_130:
	jmp	.LBB86_131
.LBB86_131:
	jmp	.LBB86_137
.LBB86_132:
	cmpl	$0, is_pondering
	jne	.LBB86_136
# %bb.133:
	cmpl	$100, fifty
	jle	.LBB86_135
# %bb.134:
	movl	$4, result
	movl	$0, cur_score
	movslq	ply, %rax
	movl	$0, pv_length(,%rax,4)
	movq	dummy, %rax
	movq	%rax, (%rbx)
	movq	dummy+8, %rax
	movq	%rax, 8(%rbx)
	movq	dummy+16, %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB86_138
.LBB86_135:
	jmp	.LBB86_136
.LBB86_136:
	jmp	.LBB86_137
.LBB86_137:
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
.LBB86_138:
	movq	%rbx, %rax
	addq	$16536, %rsp            # imm = 0x4098
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end86:
	.size	search_root, .Lfunc_end86-search_root
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function think
.LCPI87_0:
	.quad	4607182418800017408     # double 1
.LCPI87_2:
	.quad	4613937818241073152     # double 3
.LCPI87_3:
	.quad	4611911198408756429     # double 2.1000000000000001
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI87_1:
	.long	1073741824              # float 2
	.text
	.globl	think
	.p2align	4, 0x90
	.type	think,@function
think:                                  # @think
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$12568, %rsp            # imm = 0x3118
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	movl	$0, -52(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, userealholdings
	movl	$0, -28(%rbp)
.LBB87_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_9 Depth 2
                                        #     Child Loop BB87_17 Depth 2
                                        #     Child Loop BB87_69 Depth 2
                                        #       Child Loop BB87_71 Depth 3
                                        #     Child Loop BB87_77 Depth 2
                                        #     Child Loop BB87_81 Depth 2
                                        #       Child Loop BB87_124 Depth 3
                                        #     Child Loop BB87_140 Depth 2
                                        #     Child Loop BB87_149 Depth 2
	movl	$0, nodes
	movl	$0, qnodes
	movl	$1, ply
	movl	$0, ECacheProbes
	movl	$0, ECacheHits
	movl	$0, TTProbes
	movl	$0, TTHits
	movl	$0, TTStores
	movl	$0, NCuts
	movl	$0, NTries
	movl	$0, TExt
	movl	$0, FH
	movl	$0, FHF
	movl	$0, PVS
	movl	$0, FULL
	movl	$0, PVSF
	movl	$0, ext_check
	movl	$0, ext_recap
	movl	$0, ext_onerep
	movl	$0, razor_drop
	movl	$0, razor_material
	movl	$0, drop_cuts
	movl	$0, -36(%rbp)
	movl	$0, extendedtime
	movl	$0, forcedwin
	movl	$200, maxposdiff
	movb	$0, true_i_depth
	movl	$-1, bestmovenum
	callq	interrupt
	cmpl	$0, %eax
	je	.LBB87_5
# %bb.2:                                #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_analyzing
	jne	.LBB87_4
# %bb.3:                                #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	je	.LBB87_5
.LBB87_4:
	movq	dummy, %rax
	movq	%rax, (%rbx)
	movq	dummy+8, %rax
	movq	%rax, 8(%rbx)
	movq	dummy+16, %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB87_235
.LBB87_5:                               #   in Loop: Header=BB87_1 Depth=1
	callq	rtime
	movq	%rax, start_time
	movl	$0, legals
	cmpl	$4, Variant
	jne	.LBB87_7
# %bb.6:                                #   in Loop: Header=BB87_1 Depth=1
	movl	$1, captures
	jmp	.LBB87_8
.LBB87_7:                               #   in Loop: Header=BB87_1 Depth=1
	movl	$0, captures
.LBB87_8:                               #   in Loop: Header=BB87_1 Depth=1
	leaq	-12544(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -32(%rbp)
	callq	in_check
	movl	%eax, -84(%rbp)
	movl	$0, -24(%rbp)
.LBB87_9:                               #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	numb_moves, %eax
	jge	.LBB87_14
# %bb.10:                               #   in Loop: Header=BB87_9 Depth=2
	leaq	-12544(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	make
	leaq	-12544(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB87_12
# %bb.11:                               #   in Loop: Header=BB87_9 Depth=2
	movl	legals, %eax
	addl	$1, %eax
	movl	%eax, legals
	movl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB87_12:                              #   in Loop: Header=BB87_9 Depth=2
	leaq	-12544(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	unmake
# %bb.13:                               #   in Loop: Header=BB87_9 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_9
.LBB87_14:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$4, Variant
	jne	.LBB87_23
# %bb.15:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, legals
	jne	.LBB87_23
# %bb.16:                               #   in Loop: Header=BB87_1 Depth=1
	leaq	-12544(%rbp), %rdi
	movl	$0, captures
	movl	$0, -32(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -32(%rbp)
	movl	$0, -24(%rbp)
.LBB87_17:                              #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	numb_moves, %eax
	jge	.LBB87_22
# %bb.18:                               #   in Loop: Header=BB87_17 Depth=2
	leaq	-12544(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	make
	leaq	-12544(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB87_20
# %bb.19:                               #   in Loop: Header=BB87_17 Depth=2
	movl	legals, %eax
	addl	$1, %eax
	movl	%eax, legals
	movl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB87_20:                              #   in Loop: Header=BB87_17 Depth=2
	leaq	-12544(%rbp), %rdi
	movl	-24(%rbp), %esi
	callq	unmake
# %bb.21:                               #   in Loop: Header=BB87_17 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_17
.LBB87_22:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_23
.LBB87_23:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, Variant
	je	.LBB87_28
# %bb.24:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_28
# %bb.25:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, legals
	jne	.LBB87_27
# %bb.26:
	leaq	-12544(%rbp), %rax
	imull	$100, inc, %ecx
	addl	time_cushion, %ecx
	movl	%ecx, time_cushion
	movslq	-44(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rbx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rbx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB87_235
.LBB87_27:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_28
.LBB87_28:                              #   in Loop: Header=BB87_1 Depth=1
	callq	check_phase
	movl	phase(%rip), %eax
	testl	%eax, %eax
	je	.LBB87_31
	jmp	.LBB87_29
.LBB87_29:                              #   in Loop: Header=BB87_1 Depth=1
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB87_32
	jmp	.LBB87_30
.LBB87_30:                              #   in Loop: Header=BB87_1 Depth=1
	subl	$2, %eax
	je	.LBB87_33
	jmp	.LBB87_34
.LBB87_31:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$.L.str.1.126, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB87_34
.LBB87_32:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$.L.str.2.127, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB87_34
.LBB87_33:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$.L.str.3.128, %rdi
	movb	$0, %al
	callq	printf
.LBB87_34:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_45
# %bb.35:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, fixed_time
	jne	.LBB87_43
# %bb.36:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, go_fast
	je	.LBB87_41
# %bb.37:                               #   in Loop: Header=BB87_1 Depth=1
	callq	allocate_time
	movl	%eax, -88(%rbp)
	cmpl	$40, -88(%rbp)
	jle	.LBB87_39
# %bb.38:                               #   in Loop: Header=BB87_1 Depth=1
	movl	$40, time_for_move
	jmp	.LBB87_40
.LBB87_39:                              #   in Loop: Header=BB87_1 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, time_for_move
.LBB87_40:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_42
.LBB87_41:                              #   in Loop: Header=BB87_1 Depth=1
	callq	allocate_time
	movl	%eax, time_for_move
.LBB87_42:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_44
.LBB87_43:                              #   in Loop: Header=BB87_1 Depth=1
	movl	fixed_time, %eax
	movl	%eax, time_for_move
.LBB87_44:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_46
.LBB87_45:                              #   in Loop: Header=BB87_1 Depth=1
	movl	$999999, time_for_move  # imm = 0xF423F
.LBB87_46:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB87_48
# %bb.47:                               #   in Loop: Header=BB87_1 Depth=1
	movsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movss	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero,zero,zero
	movl	time_for_move, %eax
	cvtsi2ssl	%eax, %xmm2
	mulss	%xmm1, %xmm2
	cvtss2sd	%xmm2, %xmm1
	movl	-28(%rbp), %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	addsd	%xmm0, %xmm2
	divsd	%xmm2, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, time_for_move
.LBB87_48:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$.L.str.4.129, %rdi
	movl	time_for_move, %esi
	movb	$0, %al
	callq	printf
	cmpl	$0, -28(%rbp)
	jne	.LBB87_50
# %bb.49:                               #   in Loop: Header=BB87_1 Depth=1
	callq	clear_tt
	callq	reset_ecache
	movabsq	$rootlosers, %rdi
	xorl	%esi, %esi
	movl	$1200, %edx             # imm = 0x4B0
	callq	memset
.LBB87_50:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB87_57
# %bb.51:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_57
# %bb.52:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$3, Variant
	je	.LBB87_54
# %bb.53:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$4, Variant
	jne	.LBB87_57
.LBB87_54:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$3, piece_count
	jg	.LBB87_56
# %bb.55:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$3, Variant
	je	.LBB87_57
.LBB87_56:                              #   in Loop: Header=BB87_1 Depth=1
	movsd	.LCPI87_2(%rip), %xmm0  # xmm0 = mem[0],zero
	movsd	.LCPI87_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	time_for_move, %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm1, %xmm2
	divsd	%xmm0, %xmm2
	cvttsd2si	%xmm2, %eax
	movl	%eax, pn_time
	callq	proofnumberscan
	jmp	.LBB87_60
.LBB87_57:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB87_59
# %bb.58:                               #   in Loop: Header=BB87_1 Depth=1
	movq	dummy, %rax
	movq	%rax, pn_move
	movq	dummy+8, %rax
	movq	%rax, pn_move+8
	movq	dummy+16, %rax
	movq	%rax, pn_move+16
.LBB87_59:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_60
.LBB87_60:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, result
	je	.LBB87_63
# %bb.61:                               #   in Loop: Header=BB87_1 Depth=1
	movl	pn_move+4, %eax
	cmpl	dummy+4, %eax
	jne	.LBB87_63
# %bb.62:
	movq	pn_move, %rax
	movq	%rax, (%rbx)
	movq	pn_move+8, %rax
	movq	%rax, 8(%rbx)
	movq	pn_move+16, %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB87_235
.LBB87_63:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, forcedwin
	jne	.LBB87_65
# %bb.64:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, result
	je	.LBB87_68
.LBB87_65:                              #   in Loop: Header=BB87_1 Depth=1
	movl	pn_move+4, %eax
	cmpl	dummy+4, %eax
	je	.LBB87_68
# %bb.66:                               #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_analyzing
	jne	.LBB87_68
# %bb.67:                               #   in Loop: Header=BB87_1 Depth=1
	movq	pn_move, %rax
	movq	%rax, -80(%rbp)
	movq	pn_move+8, %rax
	movq	%rax, -72(%rbp)
	movq	pn_move+16, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB87_131
.LBB87_68:                              #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -12(%rbp)
.LBB87_69:                              #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_71 Depth 3
	cmpl	$300, -12(%rbp)         # imm = 0x12C
	jge	.LBB87_76
# %bb.70:                               #   in Loop: Header=BB87_69 Depth=2
	movl	$0, -20(%rbp)
.LBB87_71:                              #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$300, -20(%rbp)         # imm = 0x12C
	jge	.LBB87_74
# %bb.72:                               #   in Loop: Header=BB87_71 Depth=3
	movabsq	$pv, %rax
	movslq	-12(%rbp), %rcx
	imulq	$7200, %rcx, %rcx       # imm = 0x1C20
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	dummy, %rcx
	movq	%rcx, (%rax)
	movq	dummy+8, %rcx
	movq	%rcx, 8(%rax)
	movq	dummy+16, %rcx
	movq	%rcx, 16(%rax)
# %bb.73:                               #   in Loop: Header=BB87_71 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_71
.LBB87_74:                              #   in Loop: Header=BB87_69 Depth=2
	jmp	.LBB87_75
.LBB87_75:                              #   in Loop: Header=BB87_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_69
.LBB87_76:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$history_h, %rdi
	xorl	%esi, %esi
	movl	$82944, %edx            # imm = 0x14400
	callq	memset
	movl	$0, -12(%rbp)
.LBB87_77:                              #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$300, -12(%rbp)         # imm = 0x12C
	jge	.LBB87_80
# %bb.78:                               #   in Loop: Header=BB87_77 Depth=2
	movabsq	$killer3, %rax
	movabsq	$killer2, %rcx
	movabsq	$killer1, %rdx
	movslq	-12(%rbp), %rsi
	movl	$0, killer_scores(,%rsi,4)
	movslq	-12(%rbp), %rsi
	movl	$0, killer_scores2(,%rsi,4)
	movslq	-12(%rbp), %rsi
	movl	$0, killer_scores3(,%rsi,4)
	movslq	-12(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rdx
	movq	dummy, %rsi
	movq	%rsi, (%rdx)
	movq	dummy+8, %rsi
	movq	%rsi, 8(%rdx)
	movq	dummy+16, %rsi
	movq	%rsi, 16(%rdx)
	movslq	-12(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movq	dummy, %rdx
	movq	%rdx, (%rcx)
	movq	dummy+8, %rdx
	movq	%rdx, 8(%rcx)
	movq	dummy+16, %rdx
	movq	%rdx, 16(%rcx)
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	dummy, %rcx
	movq	%rcx, (%rax)
	movq	dummy+8, %rcx
	movq	%rcx, 8(%rax)
	movq	dummy+16, %rcx
	movq	%rcx, 16(%rax)
# %bb.79:                               #   in Loop: Header=BB87_77 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_77
.LBB87_80:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$rootnodecount, %rdi
	xorl	%esi, %esi
	movl	$2048, %edx             # imm = 0x800
	callq	memset
	movl	$0, -16(%rbp)
	movl	$0, cur_score
	movl	$0, -148(%rbp)
	movl	$1, i_depth
.LBB87_81:                              #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_124 Depth 3
	movl	i_depth, %eax
	cmpl	maxdepth, %eax
	jg	.LBB87_129
# %bb.82:                               #   in Loop: Header=BB87_81 Depth=2
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movsd	.LCPI87_2(%rip), %xmm0  # xmm0 = mem[0],zero
	movsd	.LCPI87_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cvtsi2sdl	%eax, %xmm2
	movl	time_for_move, %eax
	cvtsi2sdl	%eax, %xmm3
	mulsd	%xmm1, %xmm3
	divsd	%xmm0, %xmm3
	ucomisd	%xmm3, %xmm2
	jbe	.LBB87_85
# %bb.83:                               #   in Loop: Header=BB87_81 Depth=2
	cmpl	$2, i_depth
	jle	.LBB87_85
# %bb.84:                               #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_130
.LBB87_85:                              #   in Loop: Header=BB87_81 Depth=2
	leaq	-256(%rbp), %rdi
	movl	$100, %eax
	movl	$35, %ecx
	movl	$0, failed
	movl	-16(%rbp), %edx
	movl	Variant, %esi
	cmpl	$2, %esi
	movl	$100, %esi
	cmovel	%ecx, %esi
	subl	%esi, %edx
	movl	%edx, -48(%rbp)
	movl	-16(%rbp), %edx
	movl	Variant, %esi
	cmpl	$2, %esi
	cmovel	%ecx, %eax
	addl	%eax, %edx
	movl	%edx, -92(%rbp)
	movl	-48(%rbp), %esi
	movl	-92(%rbp), %edx
	movl	i_depth, %ecx
	callq	search_root
	movq	-256(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, result
	je	.LBB87_87
# %bb.86:                               #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_130
.LBB87_87:                              #   in Loop: Header=BB87_81 Depth=2
	movl	cur_score, %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB87_89
# %bb.88:                               #   in Loop: Header=BB87_81 Depth=2
	movl	$1, failed
	jmp	.LBB87_90
.LBB87_89:                              #   in Loop: Header=BB87_81 Depth=2
	movl	$0, failed
.LBB87_90:                              #   in Loop: Header=BB87_81 Depth=2
	movl	cur_score, %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB87_95
# %bb.91:                               #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, time_exit
	jne	.LBB87_95
# %bb.92:                               #   in Loop: Header=BB87_81 Depth=2
	leaq	-232(%rbp), %rdi
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	i_depth, %ecx
	movl	$4293967296, %esi       # imm = 0xFFF0BDC0
	movl	$1000000, %edx          # imm = 0xF4240
	callq	search_root
	movq	-232(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, time_exit
	jne	.LBB87_94
# %bb.93:                               #   in Loop: Header=BB87_81 Depth=2
	movl	$0, failed
.LBB87_94:                              #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_101
.LBB87_95:                              #   in Loop: Header=BB87_81 Depth=2
	movl	cur_score, %eax
	cmpl	-92(%rbp), %eax
	jl	.LBB87_100
# %bb.96:                               #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, time_exit
	jne	.LBB87_100
# %bb.97:                               #   in Loop: Header=BB87_81 Depth=2
	leaq	-208(%rbp), %rdi
	movq	-120(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	cur_score, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	i_depth, %ecx
	movl	$4293967296, %esi       # imm = 0xFFF0BDC0
	movl	$1000000, %edx          # imm = 0xF4240
	callq	search_root
	movq	-208(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, time_exit
	jne	.LBB87_99
# %bb.98:                               #   in Loop: Header=BB87_81 Depth=2
	movl	$0, failed
.LBB87_99:                              #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_100
.LBB87_100:                             #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_101
.LBB87_101:                             #   in Loop: Header=BB87_81 Depth=2
	callq	interrupt
	cmpl	$0, %eax
	je	.LBB87_109
# %bb.102:                              #   in Loop: Header=BB87_81 Depth=2
	cmpl	$1, i_depth
	jle	.LBB87_109
# %bb.103:                              #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, is_pondering
	je	.LBB87_105
# %bb.104:
	movq	dummy, %rax
	movq	%rax, (%rbx)
	movq	dummy+8, %rax
	movq	%rax, 8(%rbx)
	movq	dummy+16, %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB87_235
.LBB87_105:                             #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, go_fast
	jne	.LBB87_107
# %bb.106:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_130
.LBB87_107:                             #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_108
.LBB87_108:                             #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_109
.LBB87_109:                             #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, time_failure
	jne	.LBB87_121
# %bb.110:                              #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, failed
	jne	.LBB87_121
# %bb.111:                              #   in Loop: Header=BB87_81 Depth=2
	cmpl	$-1000000, cur_score    # imm = 0xFFF0BDC0
	jne	.LBB87_113
# %bb.112:
	movq	dummy, %rax
	movq	%rax, (%rbx)
	movq	dummy+8, %rax
	movq	%rax, 8(%rbx)
	movq	dummy+16, %rax
	movq	%rax, 16(%rbx)
	jmp	.LBB87_235
.LBB87_113:                             #   in Loop: Header=BB87_81 Depth=2
	movabsq	$postpv, %rdi
	movq	-120(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	cur_score, %eax
	movl	%eax, -16(%rbp)
	callq	stringize_pv
	cmpl	$0, time_exit
	jne	.LBB87_115
# %bb.114:                              #   in Loop: Header=BB87_81 Depth=2
	movl	i_depth, %eax
	movb	%al, true_i_depth
.LBB87_115:                             #   in Loop: Header=BB87_81 Depth=2
	cmpl	$2, i_depth
	jl	.LBB87_117
# %bb.116:                              #   in Loop: Header=BB87_81 Depth=2
	movl	cur_score, %edi
	callq	post_thinking
.LBB87_117:                             #   in Loop: Header=BB87_81 Depth=2
	cmpl	$900000, -16(%rbp)      # imm = 0xDBBA0
	jle	.LBB87_120
# %bb.118:                              #   in Loop: Header=BB87_81 Depth=2
	movl	$1000000, %eax          # imm = 0xF4240
	subl	cur_score, %eax
	cmpl	i_depth, %eax
	jge	.LBB87_120
# %bb.119:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_130
.LBB87_120:                             #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_121
.LBB87_121:                             #   in Loop: Header=BB87_81 Depth=2
	cmpl	$0, time_exit
	je	.LBB87_123
# %bb.122:                              #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_130
.LBB87_123:                             #   in Loop: Header=BB87_81 Depth=2
	movl	$0, -20(%rbp)
.LBB87_124:                             #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$300, -20(%rbp)         # imm = 0x12C
	jge	.LBB87_127
# %bb.125:                              #   in Loop: Header=BB87_124 Depth=3
	movslq	-20(%rbp), %rax
	movl	$0, killer_scores(,%rax,4)
	movslq	-20(%rbp), %rax
	movl	$0, killer_scores2(,%rax,4)
	movslq	-20(%rbp), %rax
	movl	$0, killer_scores3(,%rax,4)
# %bb.126:                              #   in Loop: Header=BB87_124 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_124
.LBB87_127:                             #   in Loop: Header=BB87_81 Depth=2
	jmp	.LBB87_128
.LBB87_128:                             #   in Loop: Header=BB87_81 Depth=2
	movl	i_depth, %eax
	addl	$1, %eax
	movl	%eax, i_depth
	jmp	.LBB87_81
.LBB87_129:                             # %.loopexit1
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_130
.LBB87_130:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_131
.LBB87_131:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, forcedwin
	jne	.LBB87_160
# %bb.132:                              #   in Loop: Header=BB87_1 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -128(%rbp)
	cmpl	$4, Variant
	je	.LBB87_134
# %bb.133:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$3, Variant
	jne	.LBB87_159
.LBB87_134:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, result
	jne	.LBB87_159
# %bb.135:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, alllosers
	jne	.LBB87_159
# %bb.136:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_159
# %bb.137:                              #   in Loop: Header=BB87_1 Depth=1
	leaq	-184(%rbp), %rdi
	leaq	-80(%rbp), %rax
	movl	$0, s_threat
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	proofnumbercheck
	movq	-184(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpl	$10, -28(%rbp)
	jge	.LBB87_158
# %bb.138:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, s_threat
	je	.LBB87_158
# %bb.139:                              #   in Loop: Header=BB87_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB87_140:                             #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_147
# %bb.141:                              #   in Loop: Header=BB87_140 Depth=2
	leaq	-12544(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	cmpl	-144(%rbp), %eax
	jne	.LBB87_145
# %bb.142:                              #   in Loop: Header=BB87_140 Depth=2
	leaq	-12544(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-140(%rbp), %eax
	jne	.LBB87_145
# %bb.143:                              #   in Loop: Header=BB87_140 Depth=2
	leaq	-12544(%rbp), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	cmpl	-132(%rbp), %eax
	jne	.LBB87_145
# %bb.144:                              #   in Loop: Header=BB87_1 Depth=1
	movslq	-12(%rbp), %rax
	movl	$1, rootlosers(,%rax,4)
	jmp	.LBB87_148
.LBB87_145:                             #   in Loop: Header=BB87_140 Depth=2
	jmp	.LBB87_146
.LBB87_146:                             #   in Loop: Header=BB87_140 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_140
.LBB87_147:                             # %.loopexit
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_148
.LBB87_148:                             #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -20(%rbp)
.LBB87_149:                             #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_154
# %bb.150:                              #   in Loop: Header=BB87_149 Depth=2
	movslq	-20(%rbp), %rax
	cmpl	$0, rootlosers(,%rax,4)
	je	.LBB87_152
# %bb.151:                              #   in Loop: Header=BB87_149 Depth=2
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB87_152:                             #   in Loop: Header=BB87_149 Depth=2
	jmp	.LBB87_153
.LBB87_153:                             #   in Loop: Header=BB87_149 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_149
.LBB87_154:                             #   in Loop: Header=BB87_1 Depth=1
	movl	-52(%rbp), %eax
	cmpl	legals, %eax
	jne	.LBB87_156
# %bb.155:                              #   in Loop: Header=BB87_1 Depth=1
	movl	$1, alllosers
.LBB87_156:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_157
.LBB87_157:                             # %.backedge
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_1
.LBB87_158:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_159
.LBB87_159:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_160
.LBB87_160:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, alllosers
	je	.LBB87_162
# %bb.161:                              #   in Loop: Header=BB87_1 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB87_162:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB87_165
# %bb.163:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, xb_mode
	je	.LBB87_165
# %bb.164:                              #   in Loop: Header=BB87_1 Depth=1
	leaq	-80(%rbp), %rax
	leaq	-156(%rbp), %rdi
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movabsq	$.L.str.5.130, %rdi
	leaq	-156(%rbp), %rdx
	movl	-28(%rbp), %esi
	movb	$0, %al
	callq	printf
	movl	$0, result
.LBB87_165:                             #   in Loop: Header=BB87_1 Depth=1
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	time_left, %ecx
	subl	%eax, %ecx
	movl	%ecx, time_left
	cmpl	$0, moves_to_tc
	je	.LBB87_168
# %bb.166:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_168
# %bb.167:                              #   in Loop: Header=BB87_1 Depth=1
	movl	time_for_move, %eax
	subl	-40(%rbp), %eax
	addl	inc, %eax
	addl	time_cushion, %eax
	movl	%eax, time_cushion
.LBB87_168:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$999998, -16(%rbp)      # imm = 0xF423E
	jne	.LBB87_174
# %bb.169:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_174
# %bb.170:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, white_to_move
	jne	.LBB87_172
# %bb.171:                              #   in Loop: Header=BB87_1 Depth=1
	movl	$3, result
	jmp	.LBB87_173
.LBB87_172:                             #   in Loop: Header=BB87_1 Depth=1
	movl	$2, result
.LBB87_173:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_181
.LBB87_174:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$-999998, -16(%rbp)     # imm = 0xFFF0BDC2
	jne	.LBB87_180
# %bb.175:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_180
# %bb.176:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, white_to_move
	jne	.LBB87_178
# %bb.177:                              #   in Loop: Header=BB87_1 Depth=1
	movl	$2, result
	jmp	.LBB87_179
.LBB87_178:                             #   in Loop: Header=BB87_1 Depth=1
	movl	$3, result
.LBB87_179:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_180
.LBB87_180:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_181
.LBB87_181:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, post
	je	.LBB87_196
# %bb.182:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, xb_mode
	je	.LBB87_196
# %bb.183:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_196
# %bb.184:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$3, result
	je	.LBB87_196
# %bb.185:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$2, result
	je	.LBB87_196
# %bb.186:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$4, result
	je	.LBB87_196
# %bb.187:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$5, result
	je	.LBB87_196
# %bb.188:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, result
	je	.LBB87_196
# %bb.189:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, forcedwin
	jne	.LBB87_196
# %bb.190:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$999600, -16(%rbp)      # imm = 0xF40B0
	jle	.LBB87_195
# %bb.191:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, Variant
	je	.LBB87_193
# %bb.192:                              #   in Loop: Header=BB87_1 Depth=1
	movabsq	$.L.str.6.131, %rdi
	movl	$2, %ecx
	movl	$1000000, %eax          # imm = 0xF4240
	subl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movb	$0, %al
	callq	printf
	jmp	.LBB87_194
.LBB87_193:                             #   in Loop: Header=BB87_1 Depth=1
	movabsq	$.L.str.7.132, %rdi
	movl	$2, %ecx
	movl	$1000000, %eax          # imm = 0xF4240
	subl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movb	$0, %al
	callq	printf
.LBB87_194:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_195
.LBB87_195:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_196
.LBB87_196:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$2, result
	je	.LBB87_208
# %bb.197:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$3, result
	je	.LBB87_208
# %bb.198:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, result
	je	.LBB87_208
# %bb.199:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$4, result
	je	.LBB87_208
# %bb.200:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$5, result
	je	.LBB87_208
# %bb.201:                              #   in Loop: Header=BB87_1 Depth=1
	movsbl	true_i_depth, %eax
	cmpl	$3, %eax
	jl	.LBB87_208
# %bb.202:                              #   in Loop: Header=BB87_1 Depth=1
	movl	pn_move+4, %eax
	cmpl	dummy+4, %eax
	jne	.LBB87_208
# %bb.203:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, is_pondering
	jne	.LBB87_208
# %bb.204:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, Variant
	je	.LBB87_208
# %bb.205:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$-1, bestmovenum
	jne	.LBB87_207
# %bb.206:                              #   in Loop: Header=BB87_1 Depth=1
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB87_207:                             #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_208
.LBB87_208:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, Variant
	jne	.LBB87_214
# %bb.209:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$-999900, -16(%rbp)     # imm = 0xFFF0BE24
	jle	.LBB87_214
# %bb.210:
	cmpl	$0, tradefreely
	jne	.LBB87_213
# %bb.211:
	cmpl	$0, userealholdings
	jne	.LBB87_213
# %bb.212:
	movabsq	$.L.str.8.133, %rdi
	movl	$1, tradefreely
	movb	$0, %al
	callq	printf
.LBB87_213:
	jmp	.LBB87_234
.LBB87_214:                             #   in Loop: Header=BB87_1 Depth=1
	cmpl	$-999900, -16(%rbp)     # imm = 0xFFF0BE24
	jge	.LBB87_226
# %bb.215:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$1, Variant
	jne	.LBB87_226
# %bb.216:                              #   in Loop: Header=BB87_1 Depth=1
	movl	pn_move+4, %eax
	cmpl	dummy+4, %eax
	jne	.LBB87_226
# %bb.217:                              #   in Loop: Header=BB87_1 Depth=1
	cmpl	$0, userealholdings
	je	.LBB87_219
# %bb.218:
	movl	$1, must_sit
	jmp	.LBB87_220
.LBB87_219:                             #   in Loop: Header=BB87_1 Depth=1
	movabsq	$realholdings, %rdi
	movl	$1, userealholdings
	callq	ProcessHoldings
	movabsq	$.L.str.9.134, %rdi
	movl	$0, tradefreely
	movb	$0, %al
	callq	printf
	jmp	.LBB87_157
.LBB87_220:
	cmpl	$-1000000, -16(%rbp)    # imm = 0xFFF0BDC0
	jle	.LBB87_225
# %bb.221:
	cmpl	$0, partnerdead
	je	.LBB87_223
# %bb.222:
	movabsq	$.L.str.10.135, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.11.136, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB87_224
.LBB87_223:
	movabsq	$.L.str.12.137, %rdi
	movb	$0, %al
	callq	printf
.LBB87_224:
	jmp	.LBB87_225
.LBB87_225:
	jmp	.LBB87_233
.LBB87_226:
	cmpl	$-60000, -16(%rbp)      # imm = 0xFFFF15A0
	jle	.LBB87_232
# %bb.227:
	cmpl	$-40000, -16(%rbp)      # imm = 0xFFFF63C0
	jge	.LBB87_232
# %bb.228:
	cmpl	$1, Variant
	jne	.LBB87_232
# %bb.229:
	cmpl	$0, partnerdead
	jne	.LBB87_232
# %bb.230:
	movl	pn_move+4, %eax
	cmpl	dummy+4, %eax
	jne	.LBB87_232
# %bb.231:
	movabsq	$.L.str.13.138, %rdi
	movl	$1, must_sit
	movb	$0, %al
	callq	printf
.LBB87_232:
	jmp	.LBB87_233
.LBB87_233:
	jmp	.LBB87_234
.LBB87_234:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
.LBB87_235:
	movq	%rbx, %rax
	addq	$12568, %rsp            # imm = 0x3118
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end87:
	.size	think, .Lfunc_end87-think
	.cfi_endproc
                                        # -- End function
	.globl	tree                    # -- Begin function tree
	.p2align	4, 0x90
	.type	tree,@function
tree:                                   # @tree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12336, %rsp            # imm = 0x3030
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rcx, -40(%rbp)
	movl	$0, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB88_2
# %bb.1:
	jmp	.LBB88_15
.LBB88_2:
	leaq	-12336(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -20(%rbp)
	callq	in_check
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB88_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_6 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB88_14
# %bb.4:                                #   in Loop: Header=BB88_3 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB88_12
# %bb.5:                                #   in Loop: Header=BB88_3 Depth=1
	movl	$0, -8(%rbp)
.LBB88_6:                               #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_9
# %bb.7:                                #   in Loop: Header=BB88_6 Depth=2
	movq	-16(%rbp), %rsi
	movl	$32, %edi
	callq	fputc
# %bb.8:                                #   in Loop: Header=BB88_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_6
.LBB88_9:                               #   in Loop: Header=BB88_3 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rdx
	callq	print_move
	movabsq	$.L.str.14.139, %rsi
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	movq	-40(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$121, %eax
	jne	.LBB88_11
# %bb.10:                               #   in Loop: Header=BB88_3 Depth=1
	movq	-16(%rbp), %rdi
	movl	$1, %esi
	callq	display_board
.LBB88_11:                              #   in Loop: Header=BB88_3 Depth=1
	movl	-28(%rbp), %edi
	subl	$1, %edi
	movl	-24(%rbp), %esi
	addl	$2, %esi
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rcx
	callq	tree
.LBB88_12:                              #   in Loop: Header=BB88_3 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.13:                               #   in Loop: Header=BB88_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_3
.LBB88_14:                              # %.loopexit
	jmp	.LBB88_15
.LBB88_15:
	addq	$12336, %rsp            # imm = 0x3030
	popq	%rbp
	retq
.Lfunc_end88:
	.size	tree, .Lfunc_end88-tree
	.cfi_endproc
                                        # -- End function
	.globl	setup_attackers         # -- Begin function setup_attackers
	.p2align	4, 0x90
	.type	setup_attackers,@function
setup_attackers:                        # @setup_attackers
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -24(%rbp)
	movl	see_num_attackers, %eax
	movl	%eax, -12(%rbp)
	movl	see_num_attackers+4, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -20(%rbp)
.LBB89_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_7 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_24
# %bb.2:                                #   in Loop: Header=BB89_1 Depth=1
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	addl	setup_attackers.rook_o(,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$5, -4(%rbp)
	jne	.LBB89_4
# %bb.3:
	movl	-4(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers+4(,%rcx,8)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_25
.LBB89_4:                               #   in Loop: Header=BB89_1 Depth=1
	cmpl	$6, -4(%rbp)
	jne	.LBB89_6
# %bb.5:
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+128(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+132(,%rcx,8)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_25
.LBB89_6:                               #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_7
.LBB89_7:                               #   Parent Loop BB89_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB89_19
# %bb.8:                                #   in Loop: Header=BB89_7 Depth=2
	cmpl	$7, -4(%rbp)
	je	.LBB89_10
# %bb.9:                                #   in Loop: Header=BB89_7 Depth=2
	cmpl	$9, -4(%rbp)
	jne	.LBB89_11
.LBB89_10:                              #   in Loop: Header=BB89_1 Depth=1
	movl	-4(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers+4(,%rcx,8)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_20
.LBB89_11:                              #   in Loop: Header=BB89_7 Depth=2
	cmpl	$8, -4(%rbp)
	je	.LBB89_13
# %bb.12:                               #   in Loop: Header=BB89_7 Depth=2
	cmpl	$10, -4(%rbp)
	jne	.LBB89_14
.LBB89_13:                              #   in Loop: Header=BB89_1 Depth=1
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+128(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+132(,%rcx,8)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_20
.LBB89_14:                              #   in Loop: Header=BB89_7 Depth=2
	cmpl	$13, -4(%rbp)
	je	.LBB89_16
# %bb.15:                               #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_20
.LBB89_16:                              #   in Loop: Header=BB89_7 Depth=2
	jmp	.LBB89_17
.LBB89_17:                              #   in Loop: Header=BB89_7 Depth=2
	jmp	.LBB89_18
.LBB89_18:                              #   in Loop: Header=BB89_7 Depth=2
	movslq	-20(%rbp), %rax
	movl	setup_attackers.rook_o(,%rax,4), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_7
.LBB89_19:                              # %.loopexit2
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_20
.LBB89_20:                              #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_21
.LBB89_21:                              #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_22
.LBB89_22:                              #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_23
.LBB89_23:                              #   in Loop: Header=BB89_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_1
.LBB89_24:                              # %.loopexit3
	jmp	.LBB89_25
.LBB89_25:
	movl	$0, -20(%rbp)
.LBB89_26:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_38 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_57
# %bb.27:                               #   in Loop: Header=BB89_26 Depth=1
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	addl	setup_attackers.bishop_o(,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$1, -4(%rbp)
	jne	.LBB89_30
# %bb.28:                               #   in Loop: Header=BB89_26 Depth=1
	movl	$2, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB89_30
# %bb.29:
	movl	-4(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers+4(,%rcx,8)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_58
.LBB89_30:                              #   in Loop: Header=BB89_26 Depth=1
	cmpl	$2, -4(%rbp)
	jne	.LBB89_33
# %bb.31:                               #   in Loop: Header=BB89_26 Depth=1
	movl	$2, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB89_33
# %bb.32:
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+128(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+132(,%rcx,8)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_58
.LBB89_33:                              #   in Loop: Header=BB89_26 Depth=1
	cmpl	$5, -4(%rbp)
	jne	.LBB89_35
# %bb.34:
	movl	-4(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers+4(,%rcx,8)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_58
.LBB89_35:                              #   in Loop: Header=BB89_26 Depth=1
	cmpl	$6, -4(%rbp)
	jne	.LBB89_37
# %bb.36:
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+128(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+132(,%rcx,8)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_58
.LBB89_37:                              #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_38
.LBB89_38:                              #   Parent Loop BB89_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB89_50
# %bb.39:                               #   in Loop: Header=BB89_38 Depth=2
	cmpl	$11, -4(%rbp)
	je	.LBB89_41
# %bb.40:                               #   in Loop: Header=BB89_38 Depth=2
	cmpl	$9, -4(%rbp)
	jne	.LBB89_42
.LBB89_41:                              #   in Loop: Header=BB89_26 Depth=1
	movl	-4(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers+4(,%rcx,8)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_51
.LBB89_42:                              #   in Loop: Header=BB89_38 Depth=2
	cmpl	$12, -4(%rbp)
	je	.LBB89_44
# %bb.43:                               #   in Loop: Header=BB89_38 Depth=2
	cmpl	$10, -4(%rbp)
	jne	.LBB89_45
.LBB89_44:                              #   in Loop: Header=BB89_26 Depth=1
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+128(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+132(,%rcx,8)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_51
.LBB89_45:                              #   in Loop: Header=BB89_38 Depth=2
	cmpl	$13, -4(%rbp)
	je	.LBB89_47
# %bb.46:                               #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_51
.LBB89_47:                              #   in Loop: Header=BB89_38 Depth=2
	jmp	.LBB89_48
.LBB89_48:                              #   in Loop: Header=BB89_38 Depth=2
	jmp	.LBB89_49
.LBB89_49:                              #   in Loop: Header=BB89_38 Depth=2
	movslq	-20(%rbp), %rax
	movl	setup_attackers.bishop_o(,%rax,4), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_38
.LBB89_50:                              # %.loopexit
                                        #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_51
.LBB89_51:                              #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_52
.LBB89_52:                              #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_53
.LBB89_53:                              #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_54
.LBB89_54:                              #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_55
.LBB89_55:                              #   in Loop: Header=BB89_26 Depth=1
	jmp	.LBB89_56
.LBB89_56:                              #   in Loop: Header=BB89_26 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_26
.LBB89_57:                              # %.loopexit1
	jmp	.LBB89_58
.LBB89_58:
	movl	$0, -20(%rbp)
.LBB89_59:                              # =>This Inner Loop Header: Depth=1
	cmpl	$8, -20(%rbp)
	jge	.LBB89_67
# %bb.60:                               #   in Loop: Header=BB89_59 Depth=1
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	addl	setup_attackers.knight_o(,%rcx,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-16(%rbp), %rax
	movl	board(,%rax,4), %eax
	movl	%eax, -4(%rbp)
	cmpl	$3, -4(%rbp)
	jne	.LBB89_62
# %bb.61:                               #   in Loop: Header=BB89_59 Depth=1
	movl	-4(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, see_attackers+4(,%rcx,8)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_65
.LBB89_62:                              #   in Loop: Header=BB89_59 Depth=1
	cmpl	$4, -4(%rbp)
	jne	.LBB89_64
# %bb.63:                               #   in Loop: Header=BB89_59 Depth=1
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+128(,%rcx,8)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, see_attackers+132(,%rcx,8)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB89_64:                              #   in Loop: Header=BB89_59 Depth=1
	jmp	.LBB89_65
.LBB89_65:                              #   in Loop: Header=BB89_59 Depth=1
	jmp	.LBB89_66
.LBB89_66:                              #   in Loop: Header=BB89_59 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_59
.LBB89_67:
	movl	-12(%rbp), %eax
	movl	%eax, see_num_attackers
	movl	-8(%rbp), %eax
	movl	%eax, see_num_attackers+4
	popq	%rbp
	retq
.Lfunc_end89:
	.size	setup_attackers, .Lfunc_end89-setup_attackers
	.cfi_endproc
                                        # -- End function
	.globl	findlowest              # -- Begin function findlowest
	.p2align	4, 0x90
	.type	findlowest,@function
findlowest:                             # @findlowest
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$see_attackers, %rax
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movslq	(%rax,%rcx,8), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_1:                               # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	see_num_attackers(,%rcx,4), %eax
	jge	.LBB90_6
# %bb.2:                                #   in Loop: Header=BB90_1 Depth=1
	movabsq	$see_attackers, %rax
	movslq	-4(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movslq	(%rax,%rcx,8), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	cmpl	-20(%rbp), %eax
	jge	.LBB90_4
# %bb.3:                                #   in Loop: Header=BB90_1 Depth=1
	movabsq	$see_attackers, %rax
	movl	-8(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movslq	(%rax,%rcx,8), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
.LBB90_4:                               #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_5
.LBB90_5:                               #   in Loop: Header=BB90_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_1
.LBB90_6:
	movabsq	$see_attackers, %rax
	movslq	-4(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movq	(%rdx,%rcx,8), %rcx
	movq	%rcx, -32(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	-4(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movq	(%rdi,%rsi,8), %rsi
	movq	%rsi, (%rdx,%rcx,8)
	movslq	-4(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax,%rcx,8)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end90:
	.size	findlowest, .Lfunc_end90-findlowest
	.cfi_endproc
                                        # -- End function
	.globl	see                     # -- Begin function see
	.p2align	4, 0x90
	.type	see,@function
see:                                    # @see
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$see_attackers, %rax
	movl	%edi, -12(%rbp)
	movl	%esi, -40(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, see_num_attackers
	movl	$0, see_num_attackers+4
	movslq	-24(%rbp), %rcx
	movl	board(,%rcx,4), %ecx
	movl	%ecx, -36(%rbp)
	movslq	-24(%rbp), %rcx
	movl	$13, board(,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	see_num_attackers(,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, see_num_attackers(,%rcx,4)
	movl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-24(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	movl	%ecx, 4(%rax)
	movl	-40(%rbp), %edi
	callq	setup_attackers
	movslq	-40(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	%eax, -8(%rbp)
	cmpl	$0, -12(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	cltq
	cmpl	$0, see_num_attackers(,%rax,4)
	jne	.LBB91_2
# %bb.1:
	movl	-36(%rbp), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_23
.LBB91_2:
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$-1000000, -20(%rbp)    # imm = 0xFFF0BDC0
# %bb.3:
	movslq	-12(%rbp), %rax
	movl	$1, -32(%rbp,%rax,4)
	cmpl	$0, -12(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	cltq
	movl	$0, -32(%rbp,%rax,4)
	cmpl	$0, -12(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -4(%rbp)
.LBB91_4:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	movl	-32(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	cmpl	see_num_attackers(,%rcx,4), %eax
	jge	.LBB91_19
# %bb.5:                                #   in Loop: Header=BB91_4 Depth=1
	movl	-4(%rbp), %edi
	movslq	-4(%rbp), %rax
	movl	-32(%rbp,%rax,4), %esi
	callq	findlowest
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB91_12
# %bb.6:                                #   in Loop: Header=BB91_4 Depth=1
	movabsq	$see_attackers, %rax
	cmpl	$0, -4(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	cmpl	$0, -4(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	movl	-32(%rbp,%rcx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,8), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -4(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	cltq
	movl	see_num_attackers(,%rax,4), %eax
	cmpl	$0, -4(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	cmpl	-32(%rbp,%rcx,4), %eax
	jg	.LBB91_9
# %bb.7:                                #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB91_9
# %bb.8:                                #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB91_9:                               #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB91_11
# %bb.10:                               #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_11:                              #   in Loop: Header=BB91_4 Depth=1
	jmp	.LBB91_18
.LBB91_12:                              #   in Loop: Header=BB91_4 Depth=1
	movabsq	$see_attackers, %rax
	cmpl	$0, -4(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	cmpl	$0, -4(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	movl	-32(%rbp,%rcx,4), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,8), %rax
	movl	material(,%rax,4), %edi
	callq	abs
	movl	-8(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -8(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB91_14
# %bb.13:                               #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB91_14:                              #   in Loop: Header=BB91_4 Depth=1
	cmpl	$0, -4(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	cltq
	movl	see_num_attackers(,%rax,4), %eax
	cmpl	$0, -4(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movslq	%ecx, %rcx
	cmpl	-32(%rbp,%rcx,4), %eax
	jg	.LBB91_17
# %bb.15:                               #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB91_17
# %bb.16:                               #   in Loop: Header=BB91_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_17:                              #   in Loop: Header=BB91_4 Depth=1
	jmp	.LBB91_18
.LBB91_18:                              #   in Loop: Header=BB91_4 Depth=1
	movslq	-4(%rbp), %rax
	movl	-32(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -32(%rbp,%rax,4)
	movl	-4(%rbp), %eax
	xorl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_4
.LBB91_19:
	movl	-36(%rbp), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, board(,%rcx,4)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB91_21
# %bb.20:
	movl	-16(%rbp), %eax
	jmp	.LBB91_22
.LBB91_21:
	movl	-20(%rbp), %eax
.LBB91_22:
	movl	%eax, -44(%rbp)
.LBB91_23:
	movl	-44(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end91:
	.size	see, .Lfunc_end91-see
	.cfi_endproc
                                        # -- End function
	.globl	suicide_eval            # -- Begin function suicide_eval
	.p2align	4, 0x90
	.type	suicide_eval,@function
suicide_eval:                           # @suicide_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	suicide_mid_eval
	popq	%rbp
	retq
.Lfunc_end92:
	.size	suicide_eval, .Lfunc_end92-suicide_eval
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function suicide_mid_eval
.LCPI93_0:
	.quad	4629700416936869888     # double 32
	.text
	.globl	suicide_mid_eval
	.p2align	4, 0x90
	.type	suicide_mid_eval,@function
suicide_mid_eval:                       # @suicide_mid_eval
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	leaq	-4(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	movl	$0, -4(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -88(%rbp)
	callq	checkECache
	cmpl	$0, -88(%rbp)
	je	.LBB93_4
# %bb.1:
	cmpl	$1, white_to_move
	jne	.LBB93_3
# %bb.2:
	movl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB93_111
.LBB93_3:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB93_111
.LBB93_4:
	leaq	-176(%rbp), %rdi
	movl	Material, %eax
	movl	%eax, -4(%rbp)
	xorl	%esi, %esi
	movl	$88, %edx
	callq	memset
	movl	$0, -8(%rbp)
.LBB93_5:                               # =>This Inner Loop Header: Depth=1
	cmpl	$11, -8(%rbp)
	jge	.LBB93_8
# %bb.6:                                #   in Loop: Header=BB93_5 Depth=1
	movslq	-8(%rbp), %rax
	movl	$7, -272(%rbp,%rax,4)
	movslq	-8(%rbp), %rax
	movl	$2, -224(%rbp,%rax,4)
# %bb.7:                                #   in Loop: Header=BB93_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_5
.LBB93_8:
	movl	$1, -20(%rbp)
	movl	$1, -24(%rbp)
.LBB93_9:                               # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB93_24
# %bb.10:                               #   in Loop: Header=BB93_9 Depth=1
	movslq	-20(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB93_12
# %bb.11:                               #   in Loop: Header=BB93_9 Depth=1
	jmp	.LBB93_23
.LBB93_12:                              #   in Loop: Header=BB93_9 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
# %bb.13:                               #   in Loop: Header=BB93_9 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB93_17
# %bb.14:                               #   in Loop: Header=BB93_9 Depth=1
	movslq	-12(%rbp), %rax
	movl	-132(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -132(%rbp,%rax,4)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jge	.LBB93_16
# %bb.15:                               #   in Loop: Header=BB93_9 Depth=1
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
.LBB93_16:                              #   in Loop: Header=BB93_9 Depth=1
	jmp	.LBB93_22
.LBB93_17:                              #   in Loop: Header=BB93_9 Depth=1
	movslq	-8(%rbp), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB93_21
# %bb.18:                               #   in Loop: Header=BB93_9 Depth=1
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, -176(%rbp,%rax,4)
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	-224(%rbp,%rcx,4), %eax
	jle	.LBB93_20
# %bb.19:                               #   in Loop: Header=BB93_9 Depth=1
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
.LBB93_20:                              #   in Loop: Header=BB93_9 Depth=1
	jmp	.LBB93_21
.LBB93_21:                              #   in Loop: Header=BB93_9 Depth=1
	jmp	.LBB93_22
.LBB93_22:                              #   in Loop: Header=BB93_9 Depth=1
	jmp	.LBB93_23
.LBB93_23:                              #   in Loop: Header=BB93_9 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_9
.LBB93_24:
	movl	$1, -20(%rbp)
	movl	$1, -24(%rbp)
.LBB93_25:                              # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB93_103
# %bb.26:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-20(%rbp), %rax
	movl	pieces(,%rax,4), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB93_28
# %bb.27:                               #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_102
.LBB93_28:                              #   in Loop: Header=BB93_25 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
# %bb.29:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-8(%rbp), %rax
	movl	board(,%rax,4), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$11, %ecx
	ja	.LBB93_101
# %bb.30:                               #   in Loop: Header=BB93_25 Depth=1
	movq	.LJTI93_0(,%rax,8), %rax
	jmpq	*%rax
.LBB93_31:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_pawn_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	black_saccers
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB93_37
# %bb.32:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB93_37
# %bb.33:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$8, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -132(%rbp,%rax,4)
	jne	.LBB93_36
# %bb.34:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -132(%rbp,%rax,4)
	jne	.LBB93_36
# %bb.35:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB93_36:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_37
.LBB93_37:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -176(%rbp,%rax,4)
	jne	.LBB93_43
# %bb.38:                               #   in Loop: Header=BB93_25 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB93_40
# %bb.39:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB93_40:                              #   in Loop: Header=BB93_25 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB93_42
# %bb.41:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$8, %eax
	movl	%eax, -4(%rbp)
.LBB93_42:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_43
.LBB93_43:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$1, -132(%rbp,%rax,4)
	jle	.LBB93_45
# %bb.44:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	movl	-132(%rbp,%rax,4), %eax
	subl	$1, %eax
	imull	$15, %eax, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB93_45:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -176(%rbp,%rax,4)
	jne	.LBB93_54
# %bb.46:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-224(%rbp,%rcx,4), %eax
	jl	.LBB93_54
# %bb.47:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-224(%rbp,%rcx,4), %eax
	jl	.LBB93_54
# %bb.48:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	subl	$2, %eax
	imull	$3, %eax, %eax
	addl	$30, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, Xfile(,%rax,4)
	je	.LBB93_50
# %bb.49:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	cmpl	$8, Xfile(,%rax,4)
	jne	.LBB93_51
.LBB93_50:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	subl	$2, %eax
	shll	$1, %eax
	addl	$4, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_51:                              #   in Loop: Header=BB93_25 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB93_53
# %bb.52:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$6, %eax
	movl	%eax, -4(%rbp)
.LBB93_53:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_54
.LBB93_54:                              #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -132(%rbp,%rax,4)
	jne	.LBB93_56
# %bb.55:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$20, %eax
	movl	%eax, -4(%rbp)
.LBB93_56:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_101
.LBB93_57:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_pawn_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	white_saccers
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	-224(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_63
# %bb.58:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-224(%rbp,%rax,4), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_63
# %bb.59:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -40(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltq
	cmpl	$0, -176(%rbp,%rax,4)
	jne	.LBB93_62
# %bb.60:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -176(%rbp,%rax,4)
	jne	.LBB93_62
# %bb.61:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB93_62:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_63
.LBB93_63:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -132(%rbp,%rax,4)
	jne	.LBB93_69
# %bb.64:                               #   in Loop: Header=BB93_25 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB93_66
# %bb.65:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$5, %eax
	movl	%eax, -4(%rbp)
.LBB93_66:                              #   in Loop: Header=BB93_25 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB93_68
# %bb.67:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -4(%rbp)
.LBB93_68:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_69
.LBB93_69:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$1, -176(%rbp,%rax,4)
	jle	.LBB93_71
# %bb.70:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	subl	$1, %eax
	imull	$15, %eax, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_71:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, -132(%rbp,%rax,4)
	jne	.LBB93_80
# %bb.72:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jg	.LBB93_80
# %bb.73:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	-272(%rbp,%rcx,4), %eax
	jg	.LBB93_80
# %bb.74:                               #   in Loop: Header=BB93_25 Depth=1
	movl	$7, %eax
	movslq	-8(%rbp), %rcx
	subl	Xrank(,%rcx,4), %eax
	imull	$3, %eax, %eax
	addl	$30, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, Xfile(,%rax,4)
	je	.LBB93_76
# %bb.75:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	cmpl	$8, Xfile(,%rax,4)
	jne	.LBB93_77
.LBB93_76:                              #   in Loop: Header=BB93_25 Depth=1
	movl	$7, %eax
	movslq	-8(%rbp), %rcx
	subl	Xrank(,%rcx,4), %eax
	shll	$1, %eax
	addl	$4, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB93_77:                              #   in Loop: Header=BB93_25 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB93_79
# %bb.78:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	subl	$6, %eax
	movl	%eax, -4(%rbp)
.LBB93_79:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_80
.LBB93_80:                              #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	subl	$1, %eax
	cltq
	cmpl	$0, -176(%rbp,%rax,4)
	jne	.LBB93_82
# %bb.81:                               #   in Loop: Header=BB93_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$20, %eax
	movl	%eax, -4(%rbp)
.LBB93_82:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_101
.LBB93_83:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_rook_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB93_101
.LBB93_84:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_rook_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB93_101
.LBB93_85:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_bishop_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB93_89
# %bb.86:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	sqcolor(,%rax,4), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB93_88
# %bb.87:                               #   in Loop: Header=BB93_25 Depth=1
	movl	$99, -36(%rbp)
.LBB93_88:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_89
.LBB93_89:                              #   in Loop: Header=BB93_25 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	sqcolor(,%rax,4), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB93_101
.LBB93_90:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_bishop_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB93_94
# %bb.91:                               #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	sqcolor(,%rax,4), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB93_93
# %bb.92:                               #   in Loop: Header=BB93_25 Depth=1
	movl	$99, -32(%rbp)
.LBB93_93:                              #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_94
.LBB93_94:                              #   in Loop: Header=BB93_25 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movslq	-8(%rbp), %rax
	movl	sqcolor(,%rax,4), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB93_101
.LBB93_95:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_knight_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB93_101
.LBB93_96:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_knight_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB93_101
.LBB93_97:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_rook_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_bishop_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_101
.LBB93_98:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_rook_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_bishop_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB93_101
.LBB93_99:                              #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	sarl	$1, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_king_mobility
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB93_101
.LBB93_100:                             #   in Loop: Header=BB93_25 Depth=1
	movslq	-8(%rbp), %rax
	movl	scentral(,%rax,4), %eax
	sarl	$1, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-8(%rbp), %edi
	callq	s_king_mobility
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
.LBB93_101:                             #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_102
.LBB93_102:                             #   in Loop: Header=BB93_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_25
.LBB93_103:
	cmpl	$99, -36(%rbp)
	jge	.LBB93_108
# %bb.104:
	cmpl	$99, -32(%rbp)
	jge	.LBB93_108
# %bb.105:
	movl	-52(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB93_108
# %bb.106:
	cmpl	$32, piece_count
	jge	.LBB93_108
# %bb.107:
	movsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-4(%rbp), %eax
	cvtsi2ssl	%eax, %xmm1
	movl	piece_count, %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	divsd	%xmm0, %xmm2
	cvtsd2ss	%xmm2, %xmm0
	mulss	%xmm0, %xmm1
	cvttss2si	%xmm1, %eax
	movl	%eax, -4(%rbp)
.LBB93_108:
	movl	-4(%rbp), %edi
	callq	storeECache
	cmpl	$1, white_to_move
	jne	.LBB93_110
# %bb.109:
	movl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB93_111
.LBB93_110:
	xorl	%eax, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB93_111:
	movl	-44(%rbp), %eax
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end93:
	.size	suicide_mid_eval, .Lfunc_end93-suicide_mid_eval
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI93_0:
	.quad	.LBB93_31
	.quad	.LBB93_57
	.quad	.LBB93_95
	.quad	.LBB93_96
	.quad	.LBB93_99
	.quad	.LBB93_100
	.quad	.LBB93_83
	.quad	.LBB93_84
	.quad	.LBB93_97
	.quad	.LBB93_98
	.quad	.LBB93_85
	.quad	.LBB93_90
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function s_pawn_mobility
	.type	s_pawn_mobility,@function
s_pawn_mobility:                        # @s_pawn_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
	movslq	-8(%rbp), %rax
	cmpl	$1, board(,%rax,4)
	jne	.LBB94_4
# %bb.1:
	movl	-8(%rbp), %eax
	addl	$12, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB94_3
# %bb.2:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB94_3:
	jmp	.LBB94_7
.LBB94_4:
	movl	-8(%rbp), %eax
	subl	$12, %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB94_6
# %bb.5:
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB94_6:
	jmp	.LBB94_7
.LBB94_7:
	movl	-4(%rbp), %eax
	shll	$3, %eax
	popq	%rbp
	retq
.Lfunc_end94:
	.size	s_pawn_mobility, .Lfunc_end94-s_pawn_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function black_saccers
	.type	black_saccers,@function
black_saccers:                          # @black_saccers
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	$24, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB95_3
# %bb.1:
	movl	-4(%rbp), %eax
	addl	$22, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB95_3
# %bb.2:
	movl	-4(%rbp), %eax
	addl	$26, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB95_4
.LBB95_3:
	movl	$0, -12(%rbp)
	jmp	.LBB95_26
.LBB95_4:
	movslq	-4(%rbp), %rax
	cmpl	$6, Xrank(,%rax,4)
	jge	.LBB95_8
# %bb.5:
	movl	-4(%rbp), %eax
	addl	$25, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB95_7
# %bb.6:
	movl	-4(%rbp), %eax
	addl	$23, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB95_8
.LBB95_7:
	movl	$1, -8(%rbp)
	jmp	.LBB95_13
.LBB95_8:
	movslq	-4(%rbp), %rax
	cmpl	$4, Xrank(,%rax,4)
	jne	.LBB95_12
# %bb.9:
	movl	-4(%rbp), %eax
	addl	$35, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	je	.LBB95_11
# %bb.10:
	movl	-4(%rbp), %eax
	addl	$37, %eax
	cltq
	cmpl	$2, board(,%rax,4)
	jne	.LBB95_12
.LBB95_11:
	movl	$1, -8(%rbp)
.LBB95_12:
	jmp	.LBB95_13
.LBB95_13:
	cmpl	$0, -8(%rbp)
	jne	.LBB95_15
# %bb.14:
	movl	-4(%rbp), %edi
	addl	$11, %edi
	xorl	%esi, %esi
	callq	is_attacked
	xorl	%ecx, %ecx
	movl	$1, %edx
	cmpl	$0, %eax
	cmovnel	%edx, %ecx
	movl	%ecx, -8(%rbp)
.LBB95_15:
	cmpl	$0, -8(%rbp)
	jne	.LBB95_17
# %bb.16:
	movl	-4(%rbp), %edi
	addl	$13, %edi
	xorl	%esi, %esi
	callq	is_attacked
	xorl	%ecx, %ecx
	movl	$2, %edx
	cmpl	$0, %eax
	cmovnel	%edx, %ecx
	movl	%ecx, -8(%rbp)
.LBB95_17:
	cmpl	$0, -8(%rbp)
	jne	.LBB95_19
# %bb.18:
	movl	$0, -12(%rbp)
	jmp	.LBB95_26
.LBB95_19:
	cmpl	$1, -8(%rbp)
	jne	.LBB95_23
# %bb.20:
	movl	-4(%rbp), %edi
	addl	$11, %edi
	xorl	%esi, %esi
	callq	calc_attackers
	cmpl	$1, %eax
	jle	.LBB95_22
# %bb.21:
	movl	$0, -12(%rbp)
	jmp	.LBB95_26
.LBB95_22:
	movl	$30, -12(%rbp)
	jmp	.LBB95_26
.LBB95_23:
	movl	-4(%rbp), %edi
	addl	$13, %edi
	xorl	%esi, %esi
	callq	calc_attackers
	cmpl	$1, %eax
	jle	.LBB95_25
# %bb.24:
	movl	$0, -12(%rbp)
	jmp	.LBB95_26
.LBB95_25:
	movl	$30, -12(%rbp)
.LBB95_26:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end95:
	.size	black_saccers, .Lfunc_end95-black_saccers
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function white_saccers
	.type	white_saccers,@function
white_saccers:                          # @white_saccers
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	subl	$24, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB96_3
# %bb.1:
	movl	-4(%rbp), %eax
	subl	$22, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB96_3
# %bb.2:
	movl	-4(%rbp), %eax
	subl	$26, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	jne	.LBB96_4
.LBB96_3:
	movl	$0, -12(%rbp)
	jmp	.LBB96_26
.LBB96_4:
	movslq	-4(%rbp), %rax
	cmpl	$3, Xrank(,%rax,4)
	jle	.LBB96_8
# %bb.5:
	movl	-4(%rbp), %eax
	subl	$25, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB96_7
# %bb.6:
	movl	-4(%rbp), %eax
	subl	$23, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	jne	.LBB96_8
.LBB96_7:
	movl	$1, -8(%rbp)
	jmp	.LBB96_13
.LBB96_8:
	movslq	-4(%rbp), %rax
	cmpl	$5, Xrank(,%rax,4)
	jne	.LBB96_12
# %bb.9:
	movl	-4(%rbp), %eax
	subl	$35, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	je	.LBB96_11
# %bb.10:
	movl	-4(%rbp), %eax
	subl	$37, %eax
	cltq
	cmpl	$1, board(,%rax,4)
	jne	.LBB96_12
.LBB96_11:
	movl	$1, -8(%rbp)
.LBB96_12:
	jmp	.LBB96_13
.LBB96_13:
	cmpl	$0, -8(%rbp)
	jne	.LBB96_15
# %bb.14:
	movl	-4(%rbp), %edi
	subl	$11, %edi
	movl	$1, %esi
	callq	is_attacked
	xorl	%ecx, %ecx
	movl	$1, %edx
	cmpl	$0, %eax
	cmovnel	%edx, %ecx
	movl	%ecx, -8(%rbp)
.LBB96_15:
	cmpl	$0, -8(%rbp)
	jne	.LBB96_17
# %bb.16:
	movl	-4(%rbp), %edi
	subl	$13, %edi
	movl	$1, %esi
	callq	is_attacked
	xorl	%ecx, %ecx
	movl	$2, %edx
	cmpl	$0, %eax
	cmovnel	%edx, %ecx
	movl	%ecx, -8(%rbp)
.LBB96_17:
	cmpl	$0, -8(%rbp)
	jne	.LBB96_19
# %bb.18:
	movl	$0, -12(%rbp)
	jmp	.LBB96_26
.LBB96_19:
	cmpl	$1, -8(%rbp)
	jne	.LBB96_23
# %bb.20:
	movl	-4(%rbp), %edi
	subl	$11, %edi
	movl	$1, %esi
	callq	calc_attackers
	cmpl	$1, %eax
	jle	.LBB96_22
# %bb.21:
	movl	$0, -12(%rbp)
	jmp	.LBB96_26
.LBB96_22:
	movl	$30, -12(%rbp)
	jmp	.LBB96_26
.LBB96_23:
	movl	-4(%rbp), %edi
	subl	$13, %edi
	movl	$1, %esi
	callq	calc_attackers
	cmpl	$1, %eax
	jle	.LBB96_25
# %bb.24:
	movl	$0, -12(%rbp)
	jmp	.LBB96_26
.LBB96_25:
	movl	$30, -12(%rbp)
.LBB96_26:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end96:
	.size	white_saccers, .Lfunc_end96-white_saccers
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function s_rook_mobility
	.type	s_rook_mobility,@function
s_rook_mobility:                        # @s_rook_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	-12(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB97_1:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB97_4
# %bb.2:                                #   in Loop: Header=BB97_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB97_1 Depth=1
	movl	-4(%rbp), %eax
	subl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_1
.LBB97_4:
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB97_5:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB97_8
# %bb.6:                                #   in Loop: Header=BB97_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.7:                                #   in Loop: Header=BB97_5 Depth=1
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_5
.LBB97_8:
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB97_9:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB97_12
# %bb.10:                               #   in Loop: Header=BB97_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.11:                               #   in Loop: Header=BB97_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_9
.LBB97_12:
	movl	-12(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
.LBB97_13:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB97_16
# %bb.14:                               #   in Loop: Header=BB97_13 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.15:                               #   in Loop: Header=BB97_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_13
.LBB97_16:
	movl	-8(%rbp), %eax
	shll	$2, %eax
	popq	%rbp
	retq
.Lfunc_end97:
	.size	s_rook_mobility, .Lfunc_end97-s_rook_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function s_bishop_mobility
	.type	s_bishop_mobility,@function
s_bishop_mobility:                      # @s_bishop_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	-12(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB98_1:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB98_4
# %bb.2:                                #   in Loop: Header=BB98_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.3:                                #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	subl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_1
.LBB98_4:
	movl	-12(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB98_5:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB98_8
# %bb.6:                                #   in Loop: Header=BB98_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.7:                                #   in Loop: Header=BB98_5 Depth=1
	movl	-4(%rbp), %eax
	subl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_5
.LBB98_8:
	movl	-12(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
.LBB98_9:                               # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB98_12
# %bb.10:                               #   in Loop: Header=BB98_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.11:                               #   in Loop: Header=BB98_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$11, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_9
.LBB98_12:
	movl	-12(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
.LBB98_13:                              # =>This Inner Loop Header: Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB98_16
# %bb.14:                               #   in Loop: Header=BB98_13 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
# %bb.15:                               #   in Loop: Header=BB98_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$13, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_13
.LBB98_16:
	movl	-8(%rbp), %eax
	shll	$2, %eax
	popq	%rbp
	retq
.Lfunc_end98:
	.size	s_bishop_mobility, .Lfunc_end98-s_bishop_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function s_knight_mobility
	.type	s_knight_mobility,@function
s_knight_mobility:                      # @s_knight_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB99_1:                               # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB99_6
# %bb.2:                                #   in Loop: Header=BB99_1 Depth=1
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	knight_o(,%rcx,4), %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB99_4
# %bb.3:                                #   in Loop: Header=BB99_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB99_4:                               #   in Loop: Header=BB99_1 Depth=1
	jmp	.LBB99_5
.LBB99_5:                               #   in Loop: Header=BB99_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_1
.LBB99_6:
	movl	-8(%rbp), %eax
	shll	$2, %eax
	popq	%rbp
	retq
.Lfunc_end99:
	.size	s_knight_mobility, .Lfunc_end99-s_knight_mobility
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function s_king_mobility
	.type	s_king_mobility,@function
s_king_mobility:                        # @s_king_mobility
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB100_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB100_6
# %bb.2:                                #   in Loop: Header=BB100_1 Depth=1
	movl	-12(%rbp), %eax
	movslq	-4(%rbp), %rcx
	addl	king_o(,%rcx,4), %eax
	cltq
	cmpl	$13, board(,%rax,4)
	jne	.LBB100_4
# %bb.3:                                #   in Loop: Header=BB100_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB100_4:                              #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_5
.LBB100_5:                              #   in Loop: Header=BB100_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_1
.LBB100_6:
	movl	-8(%rbp), %eax
	shll	$2, %eax
	popq	%rbp
	retq
.Lfunc_end100:
	.size	s_king_mobility, .Lfunc_end100-s_king_mobility
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function main
.LCPI101_0:
	.quad	4636737291354636288     # double 100
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI101_1:
	.long	1065353216              # float 1
.LCPI101_2:
	.long	1120403456              # float 100
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$25000, %rsp            # imm = 0x61A8
	.cfi_offset %rbx, -24
	movl	$0, -356(%rbp)
	movl	%edi, -80(%rbp)
	movq	%rsi, -352(%rbp)
	movl	$4, -32(%rbp)
	callq	read_rcfile
	callq	initialize_zobrist
	movabsq	$material, %rdi
	movabsq	$std_material, %rsi
	movl	$2, Variant
	movl	$56, %edx
	callq	memcpy
	callq	init_game
	callq	initialize_hash
	callq	clear_tt
	callq	reset_ecache
	leaq	-10576(%rbp), %rbx
	leaq	-24976(%rbp), %rdi
	movl	$0, ECacheProbes
	movl	$0, ECacheHits
	movl	$0, TTProbes
	movl	$0, TTStores
	movl	$0, TTHits
	movl	$0, bookidx
	movl	$0, total_moves
	movl	$0, ply
	movl	$0, -44(%rbp)
	movl	$40, moves_to_tc
	movl	$5, min_per_game
	movl	$30000, time_left       # imm = 0x7530
	movl	$2000, opp_rating       # imm = 0x7D0
	movl	$2000, my_rating        # imm = 0x7D0
	movl	$40, maxdepth
	movl	$200, maxposdiff
	movl	$1, must_go
	movl	$1, tradefreely
	movl	$0, -16(%rbp)
	movl	$0, xb_mode
	movl	$0, -20(%rbp)
	movl	$0, comp_color
	movl	$0, -24(%rbp)
	movl	$1, -28(%rbp)
	movl	$0, is_pondering
	movl	$1, allow_pondering
	movl	$0, is_analyzing
	movl	$0, -12(%rbp)
	movl	$0, have_partner
	movl	$0, must_sit
	movl	$0, go_fast
	movl	$0, fixed_time
	movl	$0, phase
	movl	$0, root_to_move
	movl	$0, kibitzed
	movl	$0, move_number
	xorl	%esi, %esi
	movl	$14400, %edx            # imm = 0x3840
	callq	memset
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$9600, %edx             # imm = 0x2580
	callq	memset
	movl	hash, %eax
	movslq	move_number, %rcx
	movl	%eax, hash_history(,%rcx,4)
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	setbuf
	movq	stdin, %rdi
	xorl	%esi, %esi
	callq	setbuf
	callq	start_up
	cmpl	$2, -80(%rbp)
	jne	.LBB101_2
# %bb.1:
	movabsq	$.L.str.280, %rdi
	movb	$0, %al
	callq	printf
	movq	-352(%rbp), %rax
	movq	8(%rax), %rdi
	callq	run_autotest
.LBB101_2:
	jmp	.LBB101_3
.LBB101_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_119 Depth 2
	cmpl	$0, -12(%rbp)
	jne	.LBB101_86
# %bb.4:                                #   in Loop: Header=BB101_3 Depth=1
	movl	comp_color, %eax
	cmpl	white_to_move, %eax
	je	.LBB101_6
# %bb.5:                                #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB101_86
.LBB101_6:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB101_86
# %bb.7:                                #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, must_sit
	jne	.LBB101_86
# %bb.8:                                #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, result
	jne	.LBB101_86
# %bb.9:                                #   in Loop: Header=BB101_3 Depth=1
	leaq	-408(%rbp), %rdi
	movl	$0, is_pondering
	callq	think
	movq	-408(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-400(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-392(%rbp), %rax
	movq	%rax, -56(%rbp)
	movl	$0, ply
	cmpl	$0, must_sit
	je	.LBB101_11
# %bb.10:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, must_go
	je	.LBB101_85
.LBB101_11:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$4, Variant
	je	.LBB101_13
# %bb.12:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$3, Variant
	jne	.LBB101_15
.LBB101_13:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$2, result
	je	.LBB101_15
# %bb.14:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$3, result
	jne	.LBB101_22
.LBB101_15:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$2, Variant
	je	.LBB101_18
# %bb.16:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, Variant
	je	.LBB101_18
# %bb.17:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$1, Variant
	jne	.LBB101_71
.LBB101_18:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$1, comp_color
	jne	.LBB101_20
# %bb.19:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$2, result
	jne	.LBB101_22
.LBB101_20:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, comp_color
	jne	.LBB101_71
# %bb.21:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$3, result
	je	.LBB101_71
.LBB101_22:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$1, result
	je	.LBB101_71
# %bb.23:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$4, result
	je	.LBB101_71
# %bb.24:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$5, result
	je	.LBB101_71
# %bb.25:                               #   in Loop: Header=BB101_3 Depth=1
	leaq	-72(%rbp), %rax
	leaq	-720(%rbp), %rdi
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_coord
	leaq	-72(%rbp), %rdi
	leaq	-24976(%rbp), %rax
	movl	hash, %ecx
	movslq	move_number, %rdx
	movl	%ecx, hash_history(,%rdx,4)
	movslq	move_number, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-72(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-64(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-56(%rbp), %rcx
	movq	%rcx, 16(%rax)
	xorl	%esi, %esi
	callq	make
	leaq	-10576(%rbp), %rax
	movl	move_number, %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, move_number
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	path_x, %rcx
	movq	%rcx, (%rax)
	movq	path_x+8, %rcx
	movq	%rcx, 8(%rax)
	movl	$0, userealholdings
	movl	must_go, %eax
	addl	$-1, %eax
	movl	%eax, must_go
	callq	is_draw
	cmpl	$0, %eax
	je	.LBB101_27
# %bb.26:                               #   in Loop: Header=BB101_3 Depth=1
	movl	$5, result
	jmp	.LBB101_30
.LBB101_27:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$100, fifty
	jle	.LBB101_29
# %bb.28:                               #   in Loop: Header=BB101_3 Depth=1
	movl	$4, result
.LBB101_29:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_30
.LBB101_30:                             #   in Loop: Header=BB101_3 Depth=1
	movl	root_to_move, %eax
	xorl	$1, %eax
	movl	%eax, root_to_move
	callq	reset_piece_square
	cmpl	$40, book_ply
	jge	.LBB101_35
# %bb.31:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, book_ply
	jne	.LBB101_33
# %bb.32:                               #   in Loop: Header=BB101_3 Depth=1
	leaq	-720(%rbp), %rsi
	movl	$opening_history, %edi
	callq	strcpy
	jmp	.LBB101_34
.LBB101_33:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$opening_history, %rdi
	leaq	-720(%rbp), %rsi
	callq	strcat
.LBB101_34:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_35
.LBB101_35:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.6.286, %rbx
	movl	book_ply(%rip), %eax
	addl	$1, %eax
	movl	%eax, book_ply(%rip)
	movl	nodes(%rip), %esi
	cvtsi2ssl	qnodes(%rip), %xmm0
	cvtsi2ssl	%esi, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movsd	.LCPI101_0(%rip), %xmm1 # xmm1 = mem[0],zero
	mulsd	%xmm1, %xmm0
	cvtsd2ss	%xmm0, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str.1.281, %edi
	movb	$1, %al
	callq	printf
	movl	ECacheProbes(%rip), %esi
	movl	ECacheHits(%rip), %edx
	cvtsi2ssq	%rdx, %xmm0
	cvtsi2ssq	%rsi, %xmm1
	addss	.LCPI101_1(%rip), %xmm1
	divss	%xmm1, %xmm0
	mulss	.LCPI101_2(%rip), %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str.2.282, %edi
                                        # kill: def %esi killed %esi killed %rsi
                                        # kill: def %edx killed %edx killed %rdx
	movb	$1, %al
	callq	printf
	movl	TTStores(%rip), %esi
	movl	TTProbes(%rip), %edx
	movl	TTHits(%rip), %ecx
	cvtsi2ssq	%rcx, %xmm0
	cvtsi2ssq	%rdx, %xmm1
	addss	.LCPI101_1(%rip), %xmm1
	divss	%xmm1, %xmm0
	mulss	.LCPI101_2(%rip), %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	$.L.str.3.283, %edi
                                        # kill: def %edx killed %edx killed %rdx
                                        # kill: def %ecx killed %ecx killed %rcx
	movb	$1, %al
	callq	printf
	movl	NTries(%rip), %esi
	movl	NCuts(%rip), %edx
	cvtsi2ssq	%rdx, %xmm0
	mulss	.LCPI101_2(%rip), %xmm0
	cvtsi2ssq	%rsi, %xmm1
	addss	.LCPI101_1(%rip), %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movl	TExt(%rip), %ecx
	movl	$.L.str.4.284, %edi
                                        # kill: def %esi killed %esi killed %rsi
                                        # kill: def %edx killed %edx killed %rdx
	movb	$1, %al
	callq	printf
	movl	ext_check(%rip), %esi
	movl	razor_drop(%rip), %edx
	movl	razor_material(%rip), %ecx
	movl	$.L.str.5.285, %edi
	xorl	%eax, %eax
	callq	printf
	movl	FHF(%rip), %eax
	cvtsi2ssq	%rax, %xmm0
	mulss	.LCPI101_2(%rip), %xmm0
	movl	FH(%rip), %eax
	addl	$1, %eax
	cvtsi2ssq	%rax, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movq	%rbx, %rdi
	movb	$1, %al
	callq	printf
	movl	Material, %ebx
	movl	$4293967296, %edi       # imm = 0xFFF0BDC0
	movl	$1000000, %esi          # imm = 0xF4240
	callq	eval
	movabsq	$.L.str.7.287, %rdi
	movl	maxposdiff, %ecx
	movl	white_hand_eval, %r8d
	movl	black_hand_eval, %r9d
	movl	%ebx, %esi
	movl	%eax, %edx
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.8.288, %rdi
	movl	hash, %esi
	movl	hold_hash, %edx
	movb	$0, %al
	callq	printf
	cmpl	$0, result
	jne	.LBB101_48
# %bb.36:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, xb_mode
	je	.LBB101_43
# %bb.37:                               #   in Loop: Header=BB101_3 Depth=1
	movl	-72(%rbp), %eax
	cmpl	dummy, %eax
	jne	.LBB101_39
# %bb.38:                               #   in Loop: Header=BB101_3 Depth=1
	movl	-68(%rbp), %eax
	cmpl	dummy+4, %eax
	je	.LBB101_40
.LBB101_39:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.9.289, %rdi
	leaq	-720(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB101_40:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$1, Variant
	jne	.LBB101_42
# %bb.41:                               #   in Loop: Header=BB101_3 Depth=1
	xorl	%edi, %edi
	callq	CheckBadFlow
.LBB101_42:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_47
.LBB101_43:                             #   in Loop: Header=BB101_3 Depth=1
	movl	-72(%rbp), %eax
	cmpl	dummy, %eax
	jne	.LBB101_45
# %bb.44:                               #   in Loop: Header=BB101_3 Depth=1
	movl	-68(%rbp), %eax
	cmpl	dummy+4, %eax
	je	.LBB101_46
.LBB101_45:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.10.290, %rdi
	leaq	-720(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB101_46:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_47
.LBB101_47:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_70
.LBB101_48:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, xb_mode
	je	.LBB101_53
# %bb.49:                               #   in Loop: Header=BB101_3 Depth=1
	movl	-72(%rbp), %eax
	cmpl	dummy, %eax
	jne	.LBB101_51
# %bb.50:                               #   in Loop: Header=BB101_3 Depth=1
	movl	-68(%rbp), %eax
	cmpl	dummy+4, %eax
	je	.LBB101_52
.LBB101_51:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.9.289, %rdi
	leaq	-720(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB101_52:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_57
.LBB101_53:                             #   in Loop: Header=BB101_3 Depth=1
	movl	-72(%rbp), %eax
	cmpl	dummy, %eax
	jne	.LBB101_55
# %bb.54:                               #   in Loop: Header=BB101_3 Depth=1
	movl	-68(%rbp), %eax
	cmpl	dummy+4, %eax
	je	.LBB101_56
.LBB101_55:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.10.290, %rdi
	leaq	-720(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB101_56:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_57
.LBB101_57:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$2, result
	jne	.LBB101_59
# %bb.58:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.11.291, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_69
.LBB101_59:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$3, result
	jne	.LBB101_61
# %bb.60:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.12.292, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_68
.LBB101_61:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$4, result
	jne	.LBB101_63
# %bb.62:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.13.293, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_67
.LBB101_63:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$5, result
	jne	.LBB101_65
# %bb.64:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.14.294, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_66
.LBB101_65:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.15.295, %rdi
	movb	$0, %al
	callq	printf
.LBB101_66:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_67
.LBB101_67:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_68
.LBB101_68:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_69
.LBB101_69:                             #   in Loop: Header=BB101_3 Depth=1
	movl	$0, -16(%rbp)
.LBB101_70:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_84
.LBB101_71:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$2, result
	jne	.LBB101_73
# %bb.72:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.11.291, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_83
.LBB101_73:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$3, result
	jne	.LBB101_75
# %bb.74:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.12.292, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_82
.LBB101_75:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$4, result
	jne	.LBB101_77
# %bb.76:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.13.293, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_81
.LBB101_77:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$5, result
	jne	.LBB101_79
# %bb.78:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.14.294, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_80
.LBB101_79:                             #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.15.295, %rdi
	movb	$0, %al
	callq	printf
.LBB101_80:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_81
.LBB101_81:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_82
.LBB101_82:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_83
.LBB101_83:                             #   in Loop: Header=BB101_3 Depth=1
	movl	$0, -16(%rbp)
.LBB101_84:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_85
.LBB101_85:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_86
.LBB101_86:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, xb_mode
	jne	.LBB101_92
# %bb.87:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB101_89
# %bb.88:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.16.296, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %esi
	movq	stdout, %rdi
	subl	comp_color, %esi
	callq	display_board
.LBB101_89:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB101_91
# %bb.90:                               #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.17.297, %rdi
	movb	$0, %al
	callq	printf
	leaq	-336(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
.LBB101_91:                             #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_104
.LBB101_92:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, must_sit
	jne	.LBB101_98
# %bb.93:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, allow_pondering
	je	.LBB101_97
# %bb.94:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB101_97
# %bb.95:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB101_97
# %bb.96:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, move_number
	jne	.LBB101_98
.LBB101_97:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, is_analyzing
	je	.LBB101_101
.LBB101_98:                             #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, result
	jne	.LBB101_101
# %bb.99:                               #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB101_101
# %bb.100:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-456(%rbp), %rdi
	movl	$1, is_pondering
	callq	think
	movl	$0, is_pondering
	movl	$0, ply
.LBB101_101:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB101_103
# %bb.102:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
.LBB101_103:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_104
.LBB101_104:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB101_117
# %bb.105:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	callq	is_move
	cmpl	$0, %eax
	je	.LBB101_117
# %bb.106:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-384(%rbp), %rsi
	leaq	-336(%rbp), %rdi
	callq	verify_coord
	cmpl	$0, %eax
	je	.LBB101_115
# %bb.107:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-384(%rbp), %rdi
	leaq	-24976(%rbp), %rax
	movslq	move_number, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-384(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-376(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-368(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movl	hash, %eax
	movslq	move_number, %rcx
	movl	%eax, hash_history(,%rcx,4)
	xorl	%esi, %esi
	callq	make
	leaq	-10576(%rbp), %rax
	movl	move_number, %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, move_number
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	path_x, %rcx
	movq	%rcx, (%rax)
	movq	path_x+8, %rcx
	movq	%rcx, 8(%rax)
	callq	reset_piece_square
	movl	root_to_move, %eax
	xorl	$1, %eax
	movl	%eax, root_to_move
	cmpl	$40, book_ply
	jge	.LBB101_112
# %bb.108:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, book_ply
	jne	.LBB101_110
# %bb.109:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rsi
	movl	$opening_history, %edi
	callq	strcpy
	jmp	.LBB101_111
.LBB101_110:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$opening_history, %rdi
	leaq	-336(%rbp), %rsi
	callq	strcat
.LBB101_111:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_112
.LBB101_112:                            #   in Loop: Header=BB101_3 Depth=1
	movl	book_ply, %eax
	addl	$1, %eax
	movl	%eax, book_ply
	cmpl	$0, -28(%rbp)
	je	.LBB101_114
# %bb.113:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.16.296, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %esi
	movq	stdout, %rdi
	subl	comp_color, %esi
	callq	display_board
.LBB101_114:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_116
.LBB101_115:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.18.298, %rdi
	leaq	-336(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB101_116:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_331
.LBB101_117:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.19.299, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB101_123
# %bb.118:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB101_119:                            #   Parent Loop BB101_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-40(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB101_122
# %bb.120:                              #   in Loop: Header=BB101_119 Depth=2
	movq	-40(%rbp), %rax
	movsbl	(%rax), %edi
	callq	tolower
	movq	-40(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.121:                              #   in Loop: Header=BB101_119 Depth=2
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB101_119
.LBB101_122:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_123
.LBB101_123:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.20.300, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_125
# %bb.124:
	callq	free_hash
	callq	free_ecache
	xorl	%edi, %edi
	callq	exit
.LBB101_125:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.21.301, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_130
# %bb.126:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, is_analyzing
	je	.LBB101_128
# %bb.127:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, is_analyzing
	movl	$0, is_pondering
	movl	$0, time_for_move
	jmp	.LBB101_129
.LBB101_128:
	callq	free_hash
	callq	free_ecache
	xorl	%edi, %edi
	callq	exit
.LBB101_129:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_329
.LBB101_130:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.22.302, %esi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB101_132
# %bb.131:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.23.303, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_133
.LBB101_132:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-28(%rbp), %rdi
	callq	toggle_bool
	jmp	.LBB101_328
.LBB101_133:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.24.304, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_135
# %bb.134:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.25.305, %rsi
	leaq	-32(%rbp), %rdx
	leaq	-336(%rbp), %rdi
	addq	$6, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	movl	$0, raw_nodes
	callq	rtime
	movq	%rax, -344(%rbp)
	movl	-32(%rbp), %edi
	callq	perft
	movabsq	$.L.str.26.306, %rdi
	movl	-32(%rbp), %esi
	movl	raw_nodes, %edx
	movb	$0, %al
	callq	printf
	callq	rtime
	movq	-344(%rbp), %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movabsq	$.L.str.27.307, %rdi
	movsd	.LCPI101_0(%rip), %xmm1 # xmm1 = mem[0],zero
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	divsd	%xmm1, %xmm0
	movb	$1, %al
	callq	printf
	jmp	.LBB101_327
.LBB101_135:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.28.308, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_144
# %bb.136:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, xb_mode
	je	.LBB101_138
# %bb.137:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.29.309, %rdi
	movabsq	$setcode, %rsi
	movb	$0, %al
	callq	printf
.LBB101_138:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, is_analyzing
	jne	.LBB101_142
# %bb.139:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$std_material, %rsi
	movl	$56, %edx
	callq	memcpy
	movl	$2, Variant
	callq	init_game
	callq	initialize_hash
	cmpl	$0, -44(%rbp)
	jne	.LBB101_141
# %bb.140:                              #   in Loop: Header=BB101_3 Depth=1
	callq	clear_tt
	callq	reset_ecache
.LBB101_141:                            #   in Loop: Header=BB101_3 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, must_sit
	movl	$0, go_fast
	movl	$0, piecedead
	movl	$0, partnerdead
	movl	$0, kibitzed
	movl	$0, fixed_time
	movl	$0, root_to_move
	movl	$0, comp_color
	movl	$0, move_number
	movslq	move_number, %rax
	movl	$0, hash_history(,%rax,4)
	movl	$0, bookidx
	movl	$2000, opp_rating       # imm = 0x7D0
	movl	$2000, my_rating        # imm = 0x7D0
	movl	$0, must_go
	movl	$1, tradefreely
	movl	$0, -16(%rbp)
	movl	$1, %edi
	callq	CheckBadFlow
	callq	ResetHandValue
	jmp	.LBB101_143
.LBB101_142:                            #   in Loop: Header=BB101_3 Depth=1
	callq	init_game
	movl	$0, move_number
.LBB101_143:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_326
.LBB101_144:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.30.310, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_146
# %bb.145:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-28(%rbp), %rdi
	movl	$1, xb_mode
	callq	toggle_bool
	movl	$2, %edi
	movl	$1, %esi
	callq	signal
	movabsq	$.L.str.16.296, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.31.311, %rdi
	movb	$0, %al
	callq	printf
	callq	BegForPartner
	jmp	.LBB101_325
.LBB101_146:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.32.312, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_148
# %bb.147:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.33.313, %rdi
	movsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	nodes, %esi
	movl	qnodes, %eax
	cvtsi2ssl	%eax, %xmm1
	movl	nodes, %eax
	cvtsi2ssl	%eax, %xmm2
	divss	%xmm2, %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm0, %xmm1
	cvtsd2ss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	printf
	jmp	.LBB101_324
.LBB101_148:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.34.314, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_152
# %bb.149:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$post, %rdi
	callq	toggle_bool
	cmpl	$0, xb_mode
	je	.LBB101_151
# %bb.150:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, post
.LBB101_151:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_323
.LBB101_152:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.35.315, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_154
# %bb.153:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, post
	jmp	.LBB101_322
.LBB101_154:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.36.316, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_157
# %bb.155:                              #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_156
.LBB101_156:                            # %.backedge
                                        #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_3
.LBB101_157:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.37.317, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_159
# %bb.158:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, allow_pondering
	jmp	.LBB101_156
.LBB101_159:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.38.318, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_161
# %bb.160:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, allow_pondering
	jmp	.LBB101_156
.LBB101_161:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.39.319, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_163
# %bb.162:                              #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_156
.LBB101_163:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.40.320, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_165
# %bb.164:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, white_to_move
	movl	$0, root_to_move
	movl	$0, comp_color
	jmp	.LBB101_317
.LBB101_165:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.41.321, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_167
# %bb.166:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, white_to_move
	movl	$1, root_to_move
	movl	$1, comp_color
	jmp	.LBB101_316
.LBB101_167:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.42.322, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_169
# %bb.168:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, -20(%rbp)
	jmp	.LBB101_315
.LBB101_169:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.43.323, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_171
# %bb.170:                              #   in Loop: Header=BB101_3 Depth=1
	callq	check_phase
	movl	$4293967296, %edi       # imm = 0xFFF0BDC0
	movl	$1000000, %esi          # imm = 0xF4240
	callq	eval
	movabsq	$.L.str.44.324, %rdi
	movl	%eax, %esi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_314
.LBB101_171:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.45.325, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_173
# %bb.172:                              #   in Loop: Header=BB101_3 Depth=1
	movl	white_to_move, %eax
	movl	%eax, comp_color
	movl	$0, -20(%rbp)
	jmp	.LBB101_313
.LBB101_173:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.46.326, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_175
# %bb.174:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.47.327, %rsi
	movabsq	$time_left, %rdx
	leaq	-336(%rbp), %rdi
	addq	$5, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	jmp	.LBB101_312
.LBB101_175:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.48.328, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_177
# %bb.176:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.47.327, %rsi
	movabsq	$opp_time, %rdx
	leaq	-336(%rbp), %rdi
	addq	$5, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	jmp	.LBB101_311
.LBB101_177:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.49.329, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_182
# %bb.178:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.50.330, %rsi
	leaq	-336(%rbp), %rdi
	addq	$6, %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_180
# %bb.179:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.51.331, %rsi
	movabsq	$moves_to_tc, %rdx
	movabsq	$min_per_game, %rcx
	movabsq	$sec_per_game, %r8
	movabsq	$inc, %r9
	leaq	-336(%rbp), %rdi
	addq	$6, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	imull	$6000, min_per_game, %eax # imm = 0x1770
	imull	$100, sec_per_game, %ecx
	addl	%ecx, %eax
	movl	%eax, time_left
	movl	time_left, %eax
	movl	%eax, opp_time
	jmp	.LBB101_181
.LBB101_180:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.52.332, %rsi
	movabsq	$moves_to_tc, %rdx
	movabsq	$min_per_game, %rcx
	movabsq	$inc, %r8
	leaq	-336(%rbp), %rdi
	addq	$6, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	imull	$6000, min_per_game, %eax # imm = 0x1770
	movl	%eax, time_left
	movl	time_left, %eax
	movl	%eax, opp_time
.LBB101_181:                            #   in Loop: Header=BB101_3 Depth=1
	movl	$0, fixed_time
	movl	$0, time_cushion
	jmp	.LBB101_310
.LBB101_182:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.53.333, %rsi
	leaq	-336(%rbp), %rdi
	movl	$6, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_188
# %bb.183:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.54.334, %rsi
	movabsq	$my_rating, %rdx
	movabsq	$opp_rating, %rcx
	leaq	-336(%rbp), %rdi
	addq	$7, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	cmpl	$0, my_rating
	jne	.LBB101_185
# %bb.184:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$2000, my_rating        # imm = 0x7D0
.LBB101_185:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, opp_rating
	jne	.LBB101_187
# %bb.186:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$2000, opp_rating       # imm = 0x7D0
.LBB101_187:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_309
.LBB101_188:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.55.335, %rsi
	leaq	-336(%rbp), %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_190
# %bb.189:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	callq	ProcessHoldings
	jmp	.LBB101_308
.LBB101_190:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.56.336, %rsi
	leaq	-336(%rbp), %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_209
# %bb.191:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.57.337, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_193
# %bb.192:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$std_material, %rsi
	movl	$2, Variant
	movl	$56, %edx
	callq	memcpy
	jmp	.LBB101_208
.LBB101_193:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.58.338, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_195
# %bb.194:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$zh_material, %rsi
	movl	$0, Variant
	movl	$56, %edx
	callq	memcpy
	jmp	.LBB101_207
.LBB101_195:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.59.339, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_197
# %bb.196:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$zh_material, %rsi
	movl	$1, Variant
	movl	$56, %edx
	callq	memcpy
	jmp	.LBB101_206
.LBB101_197:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.60.340, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_199
# %bb.198:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$suicide_material, %rsi
	movl	$3, Variant
	movl	$0, Giveaway
	movl	$56, %edx
	callq	memcpy
	jmp	.LBB101_205
.LBB101_199:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.61.341, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_201
# %bb.200:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$suicide_material, %rsi
	movl	$3, Variant
	movl	$1, Giveaway
	movl	$56, %edx
	callq	memcpy
	jmp	.LBB101_204
.LBB101_201:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.62.342, %rsi
	leaq	-336(%rbp), %rdi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB101_203
# %bb.202:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$losers_material, %rsi
	movl	$4, Variant
	movl	$56, %edx
	callq	memcpy
.LBB101_203:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_204
.LBB101_204:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_205
.LBB101_205:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_206
.LBB101_206:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_207
.LBB101_207:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_208
.LBB101_208:                            #   in Loop: Header=BB101_3 Depth=1
	callq	initialize_hash
	callq	clear_tt
	callq	reset_ecache
	jmp	.LBB101_307
.LBB101_209:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.63.343, %rsi
	leaq	-336(%rbp), %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_211
# %bb.210:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-432(%rbp), %rdi
	movl	$1, is_analyzing
	movl	$1, is_pondering
	callq	think
	movl	$0, ply
	jmp	.LBB101_306
.LBB101_211:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.64.344, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_215
# %bb.212:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.65.345, %rdi
	movl	move_number, %esi
	movb	$0, %al
	callq	printf
	cmpl	$0, move_number
	jle	.LBB101_214
# %bb.213:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-24976(%rbp), %rdi
	leaq	-10576(%rbp), %rax
	movl	move_number, %ecx
	addl	$-1, %ecx
	movl	%ecx, move_number
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, path_x
	movq	8(%rax), %rax
	movq	%rax, path_x+8
	movslq	move_number, %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	unmake
	callq	reset_piece_square
	movl	root_to_move, %eax
	xorl	$1, %eax
	movl	%eax, root_to_move
.LBB101_214:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_305
.LBB101_215:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.66.346, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_219
# %bb.216:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$1, move_number
	jle	.LBB101_218
# %bb.217:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-24976(%rbp), %rdi
	leaq	-10576(%rbp), %rax
	movl	move_number, %ecx
	addl	$-1, %ecx
	movl	%ecx, move_number
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, path_x
	movq	8(%rax), %rax
	movq	%rax, path_x+8
	movslq	move_number, %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	unmake
	callq	reset_piece_square
	leaq	-24976(%rbp), %rdi
	leaq	-10576(%rbp), %rax
	movl	move_number, %ecx
	addl	$-1, %ecx
	movl	%ecx, move_number
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, path_x
	movq	8(%rax), %rax
	movq	%rax, path_x+8
	movslq	move_number, %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	unmake
	callq	reset_piece_square
.LBB101_218:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_304
.LBB101_219:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.67.347, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_221
# %bb.220:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, -12(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB101_303
.LBB101_221:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.68.348, %rsi
	leaq	-336(%rbp), %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_228
# %bb.222:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB101_228
# %bb.223:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, -12(%rbp)
	cmpl	$30, wking_loc
	jne	.LBB101_225
# %bb.224:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, white_castled
.LBB101_225:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$114, bking_loc
	jne	.LBB101_227
# %bb.226:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$0, black_castled
.LBB101_227:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$opening_history, %rdi
	movl	$50, book_ply
	movl	$0, ep_square
	movl	$0, move_number
	xorl	%esi, %esi
	movl	$256, %edx              # imm = 0x100
	callq	memset
	callq	clear_tt
	callq	initialize_hash
	callq	reset_piece_square
	jmp	.LBB101_302
.LBB101_228:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB101_234
# %bb.229:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.69.349, %rsi
	leaq	-336(%rbp), %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_234
# %bb.230:                              #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB101_232
# %bb.231:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, -24(%rbp)
	jmp	.LBB101_233
.LBB101_232:                            #   in Loop: Header=BB101_3 Depth=1
	movl	$0, -24(%rbp)
.LBB101_233:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_301
.LBB101_234:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB101_237
# %bb.235:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.70.350, %rsi
	leaq	-336(%rbp), %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_237
# %bb.236:                              #   in Loop: Header=BB101_3 Depth=1
	callq	reset_board
	movl	$0, move_number
	jmp	.LBB101_300
.LBB101_237:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB101_242
# %bb.238:                              #   in Loop: Header=BB101_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movsbl	-336(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB101_242
# %bb.239:                              #   in Loop: Header=BB101_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movsbl	-335(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB101_242
# %bb.240:                              #   in Loop: Header=BB101_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movsbl	-334(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB101_242
# %bb.241:                              #   in Loop: Header=BB101_3 Depth=1
	movl	-24(%rbp), %edi
	movb	-336(%rbp), %al
	movb	-335(%rbp), %dl
	movsbl	-334(%rbp), %ecx
	movsbl	%al, %esi
	movsbl	%dl, %edx
	callq	PutPiece
	jmp	.LBB101_299
.LBB101_242:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.71.351, %rsi
	leaq	-336(%rbp), %rdi
	movl	$7, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_244
# %bb.243:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	addq	$7, %rdi
	callq	HandlePartner
	jmp	.LBB101_298
.LBB101_244:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.72.352, %rsi
	leaq	-336(%rbp), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_246
# %bb.245:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	addq	$8, %rdi
	callq	HandlePartner
	jmp	.LBB101_297
.LBB101_246:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.73.353, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_248
# %bb.247:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	callq	HandlePtell
	jmp	.LBB101_296
.LBB101_248:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.74.354, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_250
# %bb.249:                              #   in Loop: Header=BB101_3 Depth=1
	callq	run_epd_testsuite
	jmp	.LBB101_295
.LBB101_250:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.75.355, %rsi
	leaq	-336(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_252
# %bb.251:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.25.305, %rsi
	movabsq	$fixed_time, %rdx
	leaq	-336(%rbp), %rdi
	addq	$3, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	imull	$100, fixed_time, %eax
	movl	%eax, fixed_time
	jmp	.LBB101_294
.LBB101_252:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.76.356, %rsi
	leaq	-336(%rbp), %rdi
	movl	$6, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_254
# %bb.253:                              #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_293
.LBB101_254:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.77.357, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_256
# %bb.255:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.78.358, %rdi
	movb	$0, %al
	callq	printf
	callq	rtime
	leaq	-976(%rbp), %rdi
	movq	%rax, start_time
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-976(%rbp), %rdi
	callq	atol
	movabsq	$.L.str.16.296, %rdi
	imulq	$100, %rax, %rax
	movl	%eax, pn_time
	movb	$0, %al
	callq	printf
	callq	proofnumbersearch
	jmp	.LBB101_292
.LBB101_256:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.79.359, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_258
# %bb.257:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.25.305, %rsi
	leaq	-76(%rbp), %rdx
	leaq	-336(%rbp), %rdi
	addq	$5, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	movabsq	$.L.str.80.360, %rdi
	movl	-76(%rbp), %esi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_291
.LBB101_258:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.81.361, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_260
# %bb.259:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, -44(%rbp)
	jmp	.LBB101_290
.LBB101_260:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.82.362, %rsi
	leaq	-336(%rbp), %rdi
	movl	$5, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_262
# %bb.261:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$material, %rdi
	movabsq	$std_material, %rsi
	movl	$56, %edx
	callq	memcpy
	movl	$2, Variant
	callq	init_game
	callq	initialize_hash
	callq	clear_tt
	callq	reset_ecache
	movl	$0, -20(%rbp)
	movl	$0, fixed_time
	movl	$0, root_to_move
	movl	$0, comp_color
	movl	$0, move_number
	movl	$0, bookidx
	movl	$2000, opp_rating       # imm = 0x7D0
	movl	$2000, my_rating        # imm = 0x7D0
	jmp	.LBB101_289
.LBB101_262:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.19.299, %rsi
	leaq	-336(%rbp), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_264
# %bb.263:                              #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	addq	$9, %rdi
	callq	setup_epd_line
	jmp	.LBB101_288
.LBB101_264:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.68.348, %rsi
	leaq	-336(%rbp), %rdi
	movl	$1, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_266
# %bb.265:                              #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_156
.LBB101_266:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.83.363, %rsi
	leaq	-336(%rbp), %rdi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_268
# %bb.267:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.25.305, %rsi
	movabsq	$maxdepth, %rdx
	leaq	-336(%rbp), %rdi
	addq	$3, %rdi
	movb	$0, %al
	callq	__isoc99_sscanf
	movabsq	$.L.str.84.364, %rdi
	movl	maxdepth, %esi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_156
.LBB101_268:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.85, %rsi
	leaq	-336(%rbp), %rdi
	movl	$4, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_270
# %bb.269:                              #   in Loop: Header=BB101_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB101_156
.LBB101_270:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.86, %rsi
	leaq	-336(%rbp), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_272
# %bb.271:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.87, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.88, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.89, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.90, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.91, %rdi
	movb	$0, %al
	callq	printf
	movl	$2, xb_mode
	jmp	.LBB101_284
.LBB101_272:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.92, %rsi
	leaq	-336(%rbp), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_274
# %bb.273:                              #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_283
.LBB101_274:                            #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.93, %rsi
	leaq	-336(%rbp), %rdi
	movl	$8, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB101_276
# %bb.275:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.94, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB101_282
.LBB101_276:                            #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movl	$.L.str.95, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB101_278
# %bb.277:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.96, %rdi
	movabsq	$divider, %rsi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.97, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.98, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.99, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.100, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.101, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.102, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.103, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.104, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.105, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.106, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.107, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.108, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.109, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.110, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.111, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.112.365, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.113, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.114, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.115, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.116, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.117, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.118, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.119, %rdi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.96, %rdi
	movabsq	$divider, %rsi
	movb	$0, %al
	callq	printf
	movl	$0, -28(%rbp)
	jmp	.LBB101_281
.LBB101_278:                            #   in Loop: Header=BB101_3 Depth=1
	cmpl	$0, xb_mode
	jne	.LBB101_280
# %bb.279:                              #   in Loop: Header=BB101_3 Depth=1
	movabsq	$.L.str.18.298, %rdi
	leaq	-336(%rbp), %rsi
	movb	$0, %al
	callq	printf
.LBB101_280:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_281
.LBB101_281:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_282
.LBB101_282:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_283
.LBB101_283:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_284
.LBB101_284:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_285
.LBB101_285:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_286
.LBB101_286:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_287
.LBB101_287:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_288
.LBB101_288:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_289
.LBB101_289:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_290
.LBB101_290:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_291
.LBB101_291:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_292
.LBB101_292:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_293
.LBB101_293:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_294
.LBB101_294:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_295
.LBB101_295:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_296
.LBB101_296:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_297
.LBB101_297:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_298
.LBB101_298:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_299
.LBB101_299:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_300
.LBB101_300:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_301
.LBB101_301:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_302
.LBB101_302:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_303
.LBB101_303:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_304
.LBB101_304:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_305
.LBB101_305:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_306
.LBB101_306:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_307
.LBB101_307:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_308
.LBB101_308:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_309
.LBB101_309:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_310
.LBB101_310:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_311
.LBB101_311:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_312
.LBB101_312:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_313
.LBB101_313:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_314
.LBB101_314:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_315
.LBB101_315:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_316
.LBB101_316:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_317
.LBB101_317:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_318
.LBB101_318:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_319
.LBB101_319:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_320
.LBB101_320:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_321
.LBB101_321:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_322
.LBB101_322:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_323
.LBB101_323:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_324
.LBB101_324:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_325
.LBB101_325:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_326
.LBB101_326:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_327
.LBB101_327:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_328
.LBB101_328:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_329
.LBB101_329:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_330
.LBB101_330:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_331
.LBB101_331:                            #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_156
.Lfunc_end101:
	.size	main, .Lfunc_end101-main
	.cfi_endproc
                                        # -- End function
	.globl	clear_tt                # -- Begin function clear_tt
	.p2align	4, 0x90
	.type	clear_tt,@function
clear_tt:                               # @clear_tt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	DP_TTable, %rdi
	movslq	TTSize, %rax
	imulq	$20, %rax, %rdx
	xorl	%esi, %esi
	callq	memset
	movq	AS_TTable, %rdi
	movslq	TTSize, %rax
	imulq	$20, %rax, %rdx
	xorl	%esi, %esi
	callq	memset
	movq	QS_TTable, %rdi
	movslq	TTSize, %rdx
	shlq	$4, %rdx
	xorl	%esi, %esi
	callq	memset
	popq	%rbp
	retq
.Lfunc_end102:
	.size	clear_tt, .Lfunc_end102-clear_tt
	.cfi_endproc
                                        # -- End function
	.globl	clear_dp_tt             # -- Begin function clear_dp_tt
	.p2align	4, 0x90
	.type	clear_dp_tt,@function
clear_dp_tt:                            # @clear_dp_tt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	DP_TTable, %rdi
	movslq	TTSize, %rax
	imulq	$20, %rax, %rdx
	xorl	%esi, %esi
	callq	memset
	popq	%rbp
	retq
.Lfunc_end103:
	.size	clear_dp_tt, .Lfunc_end103-clear_dp_tt
	.cfi_endproc
                                        # -- End function
	.globl	initialize_zobrist      # -- Begin function initialize_zobrist
	.p2align	4, 0x90
	.type	initialize_zobrist,@function
initialize_zobrist:                     # @initialize_zobrist
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$31657, %edi            # imm = 0x7BA9
	callq	seedMT
	movl	$0, -8(%rbp)
.LBB104_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_3 Depth 2
	cmpl	$14, -8(%rbp)
	jge	.LBB104_8
# %bb.2:                                #   in Loop: Header=BB104_1 Depth=1
	movl	$0, -4(%rbp)
.LBB104_3:                              #   Parent Loop BB104_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$144, -4(%rbp)
	jge	.LBB104_6
# %bb.4:                                #   in Loop: Header=BB104_3 Depth=2
	callq	randomMT
	movabsq	$zobrist, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.5:                                #   in Loop: Header=BB104_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_3
.LBB104_6:                              #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_7
.LBB104_7:                              #   in Loop: Header=BB104_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_1
.LBB104_8:
	movl	$-559038737, hash       # imm = 0xDEADBEEF
	movl	$-1056969216, hold_hash # imm = 0xC0FFEE00
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end104:
	.size	initialize_zobrist, .Lfunc_end104-initialize_zobrist
	.cfi_endproc
                                        # -- End function
	.globl	initialize_hash         # -- Begin function initialize_hash
	.p2align	4, 0x90
	.type	initialize_hash,@function
initialize_hash:                        # @initialize_hash
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$-559038737, hash       # imm = 0xDEADBEEF
	movl	$0, -4(%rbp)
.LBB105_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$144, -4(%rbp)
	jge	.LBB105_7
# %bb.2:                                #   in Loop: Header=BB105_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB105_5
# %bb.3:                                #   in Loop: Header=BB105_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB105_5
# %bb.4:                                #   in Loop: Header=BB105_1 Depth=1
	movabsq	$zobrist, %rax
	movl	hash, %ecx
	movslq	-4(%rbp), %rdx
	movslq	board(,%rdx,4), %rdx
	imulq	$576, %rdx, %rdx        # imm = 0x240
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, hash
.LBB105_5:                              #   in Loop: Header=BB105_1 Depth=1
	jmp	.LBB105_6
.LBB105_6:                              #   in Loop: Header=BB105_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_1
.LBB105_7:
	movl	$-1056969216, hold_hash # imm = 0xC0FFEE00
	popq	%rbp
	retq
.Lfunc_end105:
	.size	initialize_hash, .Lfunc_end105-initialize_hash
	.cfi_endproc
                                        # -- End function
	.globl	QStoreTT                # -- Begin function QStoreTT
	.p2align	4, 0x90
	.type	QStoreTT,@function
QStoreTT:                               # @QStoreTT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	TTStores, %eax
	addl	$1, %eax
	movl	%eax, TTStores
	movl	hash, %eax
	xorl	%edx, %edx
	divl	TTSize
	movl	%edx, -4(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jg	.LBB106_2
# %bb.1:
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movb	$1, 1(%rax)
	jmp	.LBB106_6
.LBB106_2:
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB106_4
# %bb.3:
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movb	$2, 1(%rax)
	jmp	.LBB106_5
.LBB106_4:
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movb	$3, 1(%rax)
.LBB106_5:
	jmp	.LBB106_6
.LBB106_6:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	hash, %edx
	movq	QS_TTable, %rsi
	movl	-4(%rbp), %edi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	movl	%edx, 4(%rsi)
	movl	hold_hash, %edx
	movq	QS_TTable, %rsi
	movl	-4(%rbp), %edi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	movl	%edx, 8(%rsi)
	movl	-12(%rbp), %edx
	movq	QS_TTable, %rsi
	movl	-4(%rbp), %edi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	movw	%dx, 2(%rsi)
	movl	-8(%rbp), %edx
	movq	QS_TTable, %rsi
	movl	-4(%rbp), %edi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	movl	%edx, 12(%rsi)
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	QS_TTable, %rcx
	movl	-4(%rbp), %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movb	%al, (%rcx)
	popq	%rbp
	retq
.Lfunc_end106:
	.size	QStoreTT, .Lfunc_end106-QStoreTT
	.cfi_endproc
                                        # -- End function
	.globl	StoreTT                 # -- Begin function StoreTT
	.p2align	4, 0x90
	.type	StoreTT,@function
StoreTT:                                # @StoreTT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -12(%rbp)
	movl	TTStores, %eax
	addl	$1, %eax
	movl	%eax, TTStores
	movl	hash, %eax
	xorl	%edx, %edx
	divl	TTSize
	movl	%edx, -8(%rbp)
	movq	DP_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB107_6
# %bb.1:
	movq	DP_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB107_23
# %bb.2:
	movq	DP_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	3(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB107_4
# %bb.3:
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB107_6
.LBB107_4:
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB107_23
# %bb.5:
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB107_23
.LBB107_6:
	cmpl	$0, is_pondering
	jne	.LBB107_23
# %bb.7:
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB107_11
# %bb.8:
	movq	DP_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$1, 3(%rax)
	cmpl	$-999500, -4(%rbp)      # imm = 0xFFF0BFB4
	jge	.LBB107_10
# %bb.9:
	movl	$-999500, -4(%rbp)      # imm = 0xFFF0BFB4
.LBB107_10:
	jmp	.LBB107_22
.LBB107_11:
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB107_15
# %bb.12:
	movq	DP_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$2, 3(%rax)
	cmpl	$999500, -4(%rbp)       # imm = 0xF404C
	jle	.LBB107_14
# %bb.13:
	movl	$999500, -4(%rbp)       # imm = 0xF404C
.LBB107_14:
	jmp	.LBB107_21
.LBB107_15:
	movq	DP_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$3, 3(%rax)
	cmpl	$999500, -4(%rbp)       # imm = 0xF404C
	jle	.LBB107_17
# %bb.16:
	movl	ply, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_20
.LBB107_17:
	cmpl	$-999500, -4(%rbp)      # imm = 0xFFF0BFB4
	jge	.LBB107_19
# %bb.18:
	movl	ply, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB107_19:
	jmp	.LBB107_20
.LBB107_20:
	jmp	.LBB107_21
.LBB107_21:
	jmp	.LBB107_22
.LBB107_22:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	hash, %edx
	movq	DP_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 8(%rsi)
	movl	hold_hash, %edx
	movq	DP_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 12(%rsi)
	movl	-12(%rbp), %edx
	movq	DP_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movb	%dl, (%rsi)
	movl	-28(%rbp), %edx
	movq	DP_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movw	%dx, 4(%rsi)
	movl	-4(%rbp), %edx
	movq	DP_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 16(%rsi)
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	DP_TTable, %rcx
	movl	-8(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movb	%al, 1(%rcx)
	movl	-24(%rbp), %eax
	movq	DP_TTable, %rcx
	movl	-8(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movb	%al, 2(%rcx)
	jmp	.LBB107_39
.LBB107_23:
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB107_27
# %bb.24:
	movq	AS_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$1, 3(%rax)
	cmpl	$-999500, -4(%rbp)      # imm = 0xFFF0BFB4
	jge	.LBB107_26
# %bb.25:
	movl	$-999500, -4(%rbp)      # imm = 0xFFF0BFB4
.LBB107_26:
	jmp	.LBB107_38
.LBB107_27:
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB107_31
# %bb.28:
	movq	AS_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$2, 3(%rax)
	cmpl	$999500, -4(%rbp)       # imm = 0xF404C
	jle	.LBB107_30
# %bb.29:
	movl	$999500, -4(%rbp)       # imm = 0xF404C
.LBB107_30:
	jmp	.LBB107_37
.LBB107_31:
	movq	AS_TTable, %rax
	movl	-8(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$3, 3(%rax)
	cmpl	$999500, -4(%rbp)       # imm = 0xF404C
	jle	.LBB107_33
# %bb.32:
	movl	ply, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_36
.LBB107_33:
	cmpl	$-999500, -4(%rbp)      # imm = 0xFFF0BFB4
	jge	.LBB107_35
# %bb.34:
	movl	ply, %eax
	movl	-4(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4(%rbp)
.LBB107_35:
	jmp	.LBB107_36
.LBB107_36:
	jmp	.LBB107_37
.LBB107_37:
	jmp	.LBB107_38
.LBB107_38:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movl	hash, %edx
	movq	AS_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 8(%rsi)
	movl	hold_hash, %edx
	movq	AS_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 12(%rsi)
	movl	-12(%rbp), %edx
	movq	AS_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movb	%dl, (%rsi)
	movl	-28(%rbp), %edx
	movq	AS_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movw	%dx, 4(%rsi)
	movl	-4(%rbp), %edx
	movq	AS_TTable, %rsi
	movl	-8(%rbp), %edi
	imulq	$20, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 16(%rsi)
	movl	white_to_move, %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	AS_TTable, %rcx
	movl	-8(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movb	%al, 1(%rcx)
	movl	-24(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-8(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movb	%al, 2(%rcx)
.LBB107_39:
	popq	%rbp
	retq
.Lfunc_end107:
	.size	StoreTT, .Lfunc_end107-StoreTT
	.cfi_endproc
                                        # -- End function
	.globl	LearnStoreTT            # -- Begin function LearnStoreTT
	.p2align	4, 0x90
	.type	LearnStoreTT,@function
LearnStoreTT:                           # @LearnStoreTT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -28(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -16(%rbp)
	movl	%r9d, -12(%rbp)
	movl	-8(%rbp), %eax
	xorl	%edx, %edx
	divl	TTSize
	movl	%edx, -4(%rbp)
	movl	-12(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movb	%al, (%rcx)
	cmpl	$3, Variant
	je	.LBB108_3
# %bb.1:
	cmpl	$4, Variant
	je	.LBB108_3
# %bb.2:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$3, 3(%rax)
	jmp	.LBB108_4
.LBB108_3:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$1, 3(%rax)
.LBB108_4:
	movl	-8(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-24(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
	movl	-16(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movl	%eax, 16(%rcx)
	movl	-20(%rbp), %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movb	%al, 1(%rcx)
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movb	$0, 2(%rax)
	popq	%rbp
	retq
.Lfunc_end108:
	.size	LearnStoreTT, .Lfunc_end108-LearnStoreTT
	.cfi_endproc
                                        # -- End function
	.globl	ProbeTT                 # -- Begin function ProbeTT
	.p2align	4, 0x90
	.type	ProbeTT,@function
ProbeTT:                                # @ProbeTT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -8(%rbp)
	movq	-56(%rbp), %rax
	movl	$1, (%rax)
	movl	TTProbes, %eax
	addl	$1, %eax
	movl	%eax, TTProbes
	movl	hash, %eax
	xorl	%edx, %edx
	divl	TTSize
	movl	%edx, -4(%rbp)
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	cmpl	hash, %eax
	jne	.LBB109_17
# %bb.1:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	cmpl	hold_hash, %eax
	jne	.LBB109_17
# %bb.2:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movq	DP_TTable, %rdx
	movl	-4(%rbp), %esi
	imulq	$20, %rsi, %rsi
	addq	%rsi, %rdx
	movsbl	1(%rdx), %edx
	movl	white_to_move, %esi
	cmpl	$0, %esi
	cmovnel	%ecx, %eax
	movsbl	%al, %eax
	cmpl	%eax, %edx
	jne	.LBB109_17
# %bb.3:
	movl	TTHits, %eax
	addl	$1, %eax
	movl	%eax, TTHits
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	3(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB109_7
# %bb.4:
	movl	-8(%rbp), %eax
	subl	$2, %eax
	subl	$1, %eax
	movq	DP_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movsbl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jg	.LBB109_7
# %bb.5:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB109_7
# %bb.6:
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB109_7:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	cmpb	$0, 2(%rax)
	je	.LBB109_9
# %bb.8:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB109_9:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB109_16
# %bb.10:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	cmpl	$999500, (%rax)         # imm = 0xF404C
	jle	.LBB109_12
# %bb.11:
	movl	ply, %eax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	jmp	.LBB109_15
.LBB109_12:
	movq	-24(%rbp), %rax
	cmpl	$-999500, (%rax)        # imm = 0xFFF0BFB4
	jge	.LBB109_14
# %bb.13:
	movl	ply, %eax
	movq	-24(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB109_14:
	jmp	.LBB109_15
.LBB109_15:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	2(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	3(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_35
.LBB109_16:
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	DP_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	2(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
	jmp	.LBB109_35
.LBB109_17:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	cmpl	hash, %eax
	jne	.LBB109_34
# %bb.18:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	cmpl	hold_hash, %eax
	jne	.LBB109_34
# %bb.19:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movq	AS_TTable, %rdx
	movl	-4(%rbp), %esi
	imulq	$20, %rsi, %rsi
	addq	%rsi, %rdx
	movsbl	1(%rdx), %edx
	movl	white_to_move, %esi
	cmpl	$0, %esi
	cmovnel	%ecx, %eax
	movsbl	%al, %eax
	cmpl	%eax, %edx
	jne	.LBB109_34
# %bb.20:
	movl	TTHits, %eax
	addl	$1, %eax
	movl	%eax, TTHits
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	3(%rax), %eax
	cmpl	$1, %eax
	jne	.LBB109_24
# %bb.21:
	movl	-8(%rbp), %eax
	subl	$2, %eax
	subl	$1, %eax
	movq	AS_TTable, %rcx
	movl	-4(%rbp), %edx
	imulq	$20, %rdx, %rdx
	addq	%rdx, %rcx
	movsbl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jg	.LBB109_24
# %bb.22:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB109_24
# %bb.23:
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB109_24:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	cmpb	$0, 2(%rax)
	je	.LBB109_26
# %bb.25:
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
.LBB109_26:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB109_33
# %bb.27:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	cmpl	$999500, (%rax)         # imm = 0xF404C
	jle	.LBB109_29
# %bb.28:
	movl	ply, %eax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	jmp	.LBB109_32
.LBB109_29:
	movq	-24(%rbp), %rax
	cmpl	$-999500, (%rax)        # imm = 0xFFF0BFB4
	jge	.LBB109_31
# %bb.30:
	movl	ply, %eax
	movq	-24(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB109_31:
	jmp	.LBB109_32
.LBB109_32:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	2(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	3(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_35
.LBB109_33:
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movzwl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	AS_TTable, %rax
	movl	-4(%rbp), %ecx
	imulq	$20, %rcx, %rcx
	addq	%rcx, %rax
	movsbl	2(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
	jmp	.LBB109_35
.LBB109_34:
	movl	$4, -12(%rbp)
.LBB109_35:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end109:
	.size	ProbeTT, .Lfunc_end109-ProbeTT
	.cfi_endproc
                                        # -- End function
	.globl	QProbeTT                # -- Begin function QProbeTT
	.p2align	4, 0x90
	.type	QProbeTT,@function
QProbeTT:                               # @QProbeTT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movl	TTProbes, %eax
	addl	$1, %eax
	movl	%eax, TTProbes
	movl	hash, %eax
	xorl	%edx, %edx
	divl	TTSize
	movl	%edx, -4(%rbp)
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	hash, %eax
	jne	.LBB110_4
# %bb.1:
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	cmpl	hold_hash, %eax
	jne	.LBB110_4
# %bb.2:
	movl	$1, %eax
	xorl	%ecx, %ecx
	movq	QS_TTable, %rdx
	movl	-4(%rbp), %esi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movsbl	(%rdx), %edx
	movl	white_to_move, %esi
	cmpl	$0, %esi
	cmovnel	%ecx, %eax
	movsbl	%al, %eax
	cmpl	%eax, %edx
	jne	.LBB110_4
# %bb.3:
	movl	TTHits, %eax
	addl	$1, %eax
	movl	%eax, TTHits
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movzwl	2(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	QS_TTable, %rax
	movl	-4(%rbp), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movsbl	1(%rax), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_5
.LBB110_4:
	movl	$4, -8(%rbp)
.LBB110_5:
	movl	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end110:
	.size	QProbeTT, .Lfunc_end110-QProbeTT
	.cfi_endproc
                                        # -- End function
	.globl	alloc_hash              # -- Begin function alloc_hash
	.p2align	4, 0x90
	.type	alloc_hash,@function
alloc_hash:                             # @alloc_hash
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movslq	TTSize, %rax
	imulq	$20, %rax, %rdi
	callq	malloc
	movq	%rax, AS_TTable
	movslq	TTSize, %rax
	imulq	$20, %rax, %rdi
	callq	malloc
	movq	%rax, DP_TTable
	movslq	TTSize, %rdi
	shlq	$4, %rdi
	callq	malloc
	movq	%rax, QS_TTable
	cmpq	$0, AS_TTable
	je	.LBB111_3
# %bb.1:
	cmpq	$0, DP_TTable
	je	.LBB111_3
# %bb.2:
	cmpq	$0, QS_TTable
	jne	.LBB111_4
.LBB111_3:
	movabsq	$.L.str.392, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB111_4:
	popq	%rbp
	retq
.Lfunc_end111:
	.size	alloc_hash, .Lfunc_end111-alloc_hash
	.cfi_endproc
                                        # -- End function
	.globl	free_hash               # -- Begin function free_hash
	.p2align	4, 0x90
	.type	free_hash,@function
free_hash:                              # @free_hash
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	AS_TTable, %rdi
	callq	free
	movq	DP_TTable, %rdi
	callq	free
	movq	QS_TTable, %rdi
	callq	free
	popq	%rbp
	retq
.Lfunc_end112:
	.size	free_hash, .Lfunc_end112-free_hash
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function allocate_time
.LCPI113_0:
	.quad	4626322717216342016     # double 20
.LCPI113_1:
	.quad	4617315517961601024     # double 5
.LCPI113_2:
	.quad	4616189618054758400     # double 4
.LCPI113_3:
	.quad	4621819117588971520     # double 10
.LCPI113_4:
	.quad	4627730092099895296     # double 25
.LCPI113_5:
	.quad	4629137466983448576     # double 30
.LCPI113_6:
	.quad	4630826316843712512     # double 40
.LCPI113_7:
	.quad	4647503709213818880     # double 500
.LCPI113_8:
	.quad	4636737291354636288     # double 100
.LCPI113_9:
	.quad	4613937818241073152     # double 3
.LCPI113_10:
	.quad	4611686018427387904     # double 2
.LCPI113_11:
	.quad	4663319084467748864     # double 6000
.LCPI113_12:
	.quad	4611911198408756429     # double 2.1000000000000001
.LCPI113_13:
	.quad	4598175219545276416     # double 0.25
.LCPI113_14:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	allocate_time
	.p2align	4, 0x90
	.type	allocate_time,@function
allocate_time:                          # @allocate_time
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	xorps	%xmm1, %xmm1
	movsd	%xmm1, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	cmpl	$0, moves_to_tc
	jne	.LBB113_40
# %bb.1:
	cmpl	$6, min_per_game
	jge	.LBB113_3
# %bb.2:
	cmpl	$0, inc
	je	.LBB113_4
.LBB113_3:
	movsd	.LCPI113_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI113_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	time_left, %eax
	cvtsi2sdl	%eax, %xmm2
	imull	$6000, min_per_game, %eax # imm = 0x1770
	imull	$100, sec_per_game, %ecx
	addl	%ecx, %eax
	cvtsi2sdl	%eax, %xmm3
	mulsd	%xmm1, %xmm3
	divsd	%xmm0, %xmm3
	ucomisd	%xmm2, %xmm3
	jbe	.LBB113_16
.LBB113_4:
	movsd	.LCPI113_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	opp_time, %eax
	subl	time_left, %eax
	cvtsi2sdl	%eax, %xmm1
	movl	opp_time, %eax
	cvtsi2sdl	%eax, %xmm2
	divsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB113_7
# %bb.5:
	cmpl	$0, xb_mode
	je	.LBB113_7
# %bb.6:
	movsd	.LCPI113_6(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
	jmp	.LBB113_15
.LBB113_7:
	movsd	.LCPI113_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	opp_time, %eax
	subl	time_left, %eax
	cvtsi2sdl	%eax, %xmm1
	movl	opp_time, %eax
	cvtsi2sdl	%eax, %xmm2
	divsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB113_10
# %bb.8:
	cmpl	$0, xb_mode
	je	.LBB113_10
# %bb.9:
	movsd	.LCPI113_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
	jmp	.LBB113_14
.LBB113_10:
	movsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	opp_time, %eax
	subl	time_left, %eax
	cvtsi2sdl	%eax, %xmm1
	movl	opp_time, %eax
	cvtsi2sdl	%eax, %xmm2
	divsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB113_13
# %bb.11:
	cmpl	$0, xb_mode
	je	.LBB113_13
# %bb.12:
	movsd	.LCPI113_4(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	%xmm0, -16(%rbp)
.LBB113_13:
	jmp	.LBB113_14
.LBB113_14:
	jmp	.LBB113_15
.LBB113_15:
	jmp	.LBB113_16
.LBB113_16:
	cmpl	$3, Variant
	je	.LBB113_26
# %bb.17:
	cmpl	$4, Variant
	je	.LBB113_26
# %bb.18:
	movsd	.LCPI113_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	time_left, %eax
	subl	opp_time, %eax
	cvtsi2sdl	%eax, %xmm1
	movl	time_left, %eax
	cvtsi2sdl	%eax, %xmm2
	divsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB113_21
# %bb.19:
	cmpl	$0, xb_mode
	je	.LBB113_21
# %bb.20:
	movsd	.LCPI113_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -16(%rbp)
	jmp	.LBB113_25
.LBB113_21:
	movsd	.LCPI113_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	time_left, %eax
	subl	opp_time, %eax
	cvtsi2sdl	%eax, %xmm1
	movl	time_left, %eax
	cvtsi2sdl	%eax, %xmm2
	divsd	%xmm0, %xmm2
	ucomisd	%xmm2, %xmm1
	jbe	.LBB113_24
# %bb.22:
	cmpl	$0, xb_mode
	je	.LBB113_24
# %bb.23:
	movsd	.LCPI113_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -16(%rbp)
.LBB113_24:
	jmp	.LBB113_25
.LBB113_25:
	jmp	.LBB113_32
.LBB113_26:
	cmpl	$3, Variant
	jne	.LBB113_28
# %bb.27:
	movsd	.LCPI113_3(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -16(%rbp)
	jmp	.LBB113_31
.LBB113_28:
	cmpl	$4, Variant
	jne	.LBB113_30
# %bb.29:
	movsd	.LCPI113_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -16(%rbp)
.LBB113_30:
	jmp	.LBB113_31
.LBB113_31:
	jmp	.LBB113_32
.LBB113_32:
	movl	time_left, %eax
	cvtsi2sdl	%eax, %xmm0
	divsd	-16(%rbp), %xmm0
	movsd	%xmm0, -8(%rbp)
	cmpl	$0, inc
	je	.LBB113_39
# %bb.33:
	movsd	.LCPI113_7(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	time_left, %eax
	cvtsi2sdl	%eax, %xmm1
	subsd	-8(%rbp), %xmm1
	movl	inc, %eax
	cvtsi2sdl	%eax, %xmm2
	subsd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB113_35
# %bb.34:
	movl	inc, %eax
	cvtsi2sdl	%eax, %xmm0
	addsd	-8(%rbp), %xmm0
	movsd	%xmm0, -8(%rbp)
	jmp	.LBB113_38
.LBB113_35:
	movsd	.LCPI113_8(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI113_9(%rip), %xmm1 # xmm1 = mem[0],zero
	movsd	.LCPI113_10(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	time_left, %eax
	cvtsi2sdl	%eax, %xmm3
	subsd	-8(%rbp), %xmm3
	movl	inc, %eax
	cvtsi2sdl	%eax, %xmm4
	mulsd	%xmm2, %xmm4
	divsd	%xmm1, %xmm4
	subsd	%xmm4, %xmm3
	ucomisd	%xmm0, %xmm3
	jbe	.LBB113_37
# %bb.36:
	movsd	.LCPI113_9(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI113_10(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	inc, %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	%xmm1, %xmm2
	divsd	%xmm0, %xmm2
	addsd	-8(%rbp), %xmm2
	movsd	%xmm2, -8(%rbp)
.LBB113_37:
	jmp	.LBB113_38
.LBB113_38:
	jmp	.LBB113_39
.LBB113_39:
	jmp	.LBB113_43
.LBB113_40:
	movsd	.LCPI113_8(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI113_11(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	min_per_game, %eax
	cvtsi2ssl	%eax, %xmm2
	cvtss2sd	%xmm2, %xmm2
	mulsd	%xmm1, %xmm2
	movl	sec_per_game, %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm0, %xmm1
	addsd	%xmm1, %xmm2
	movl	moves_to_tc, %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm2
	subsd	%xmm0, %xmm2
	movsd	%xmm2, -8(%rbp)
	cmpl	$0, time_cushion
	je	.LBB113_42
# %bb.41:
	movsd	.LCPI113_9(%rip), %xmm0 # xmm0 = mem[0],zero
	movsd	.LCPI113_12(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	time_cushion, %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	%xmm1, %xmm2
	divsd	%xmm0, %xmm2
	addsd	-8(%rbp), %xmm2
	movsd	%xmm2, -8(%rbp)
	movl	time_cushion, %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	%xmm1, %xmm2
	divsd	%xmm0, %xmm2
	cvttsd2si	%xmm2, %eax
	movl	time_cushion, %ecx
	subl	%eax, %ecx
	movl	%ecx, time_cushion
.LBB113_42:
	jmp	.LBB113_43
.LBB113_43:
	cmpl	$1, Variant
	jne	.LBB113_48
# %bb.44:
	movsd	.LCPI113_13(%rip), %xmm0 # xmm0 = mem[0],zero
	mulsd	-8(%rbp), %xmm0
	movsd	%xmm0, -8(%rbp)
	movl	opp_time, %eax
	cmpl	time_left, %eax
	jg	.LBB113_46
# %bb.45:
	cmpl	$1500, opp_time         # imm = 0x5DC
	jge	.LBB113_47
.LBB113_46:
	movsd	.LCPI113_14(%rip), %xmm0 # xmm0 = mem[0],zero
	mulsd	-8(%rbp), %xmm0
	movsd	%xmm0, -8(%rbp)
.LBB113_47:
	jmp	.LBB113_48
.LBB113_48:
	cvttsd2si	-8(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end113:
	.size	allocate_time, .Lfunc_end113-allocate_time
	.cfi_endproc
                                        # -- End function
	.globl	comp_to_san             # -- Begin function comp_to_san
	.p2align	4, 0x90
	.type	comp_to_san,@function
comp_to_san:                            # @comp_to_san
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24632, %rsp            # imm = 0x6038
	.cfi_offset %rbx, -24
	leaq	16(%rbp), %rbx
	movq	%rdi, -32(%rbp)
	movslq	(%rbx), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -44(%rbp)
	movslq	4(%rbx), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -24(%rbp)
	movl	$97, -40(%rbp)
	movslq	(%rbx), %rax
	movl	Xfile(,%rax,4), %eax
	addl	-40(%rbp), %eax
	subl	$1, %eax
	movb	%al, -17(%rbp)
	movslq	4(%rbx), %rax
	movl	Xfile(,%rax,4), %eax
	addl	-40(%rbp), %eax
	subl	$1, %eax
	movb	%al, -9(%rbp)
	cmpl	$0, (%rbx)
	jne	.LBB114_2
# %bb.1:
	movabsq	$.L.str.399, %rsi
	movq	-32(%rbp), %rdi
	movslq	12(%rbx), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movsbl	-9(%rbp), %ecx
	movl	-24(%rbp), %r8d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_50
.LBB114_2:
	movslq	(%rbx), %rax
	cmpl	$1, board(,%rax,4)
	je	.LBB114_4
# %bb.3:
	movslq	(%rbx), %rax
	cmpl	$2, board(,%rax,4)
	jne	.LBB114_15
.LBB114_4:
	movslq	4(%rbx), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB114_10
# %bb.5:
	cmpl	$0, 20(%rbx)
	jne	.LBB114_10
# %bb.6:
	cmpl	$0, 12(%rbx)
	jne	.LBB114_8
# %bb.7:
	movabsq	$.L.str.1.400, %rsi
	movq	-32(%rbp), %rdi
	movsbl	-9(%rbp), %edx
	movl	-24(%rbp), %ecx
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_9
.LBB114_8:
	movabsq	$.L.str.2.401, %rsi
	movq	-32(%rbp), %rdi
	movsbl	-9(%rbp), %edx
	movl	-24(%rbp), %ecx
	movslq	12(%rbx), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %r8d
	movb	$0, %al
	callq	sprintf
.LBB114_9:
	jmp	.LBB114_14
.LBB114_10:
	cmpl	$0, 12(%rbx)
	jne	.LBB114_12
# %bb.11:
	movabsq	$.L.str.3.402, %rsi
	movq	-32(%rbp), %rdi
	movsbl	-17(%rbp), %edx
	movsbl	-9(%rbp), %ecx
	movl	-24(%rbp), %r8d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_13
.LBB114_12:
	movabsq	$.L.str.4.403, %rsi
	movq	-32(%rbp), %rdi
	movsbl	-17(%rbp), %edx
	movsbl	-9(%rbp), %ecx
	movl	-24(%rbp), %r8d
	movslq	12(%rbx), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %r9d
	movb	$0, %al
	callq	sprintf
.LBB114_13:
	jmp	.LBB114_14
.LBB114_14:
	jmp	.LBB114_49
.LBB114_15:
	cmpl	$0, 16(%rbx)
	je	.LBB114_21
# %bb.16:
	cmpl	$1, 16(%rbx)
	je	.LBB114_18
# %bb.17:
	cmpl	$3, 16(%rbx)
	jne	.LBB114_19
.LBB114_18:
	movabsq	$.L.str.5.404, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_20
.LBB114_19:
	movabsq	$.L.str.6.405, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	sprintf
.LBB114_20:
	jmp	.LBB114_48
.LBB114_21:
	leaq	-12352(%rbp), %rdi
	movl	$-1, -36(%rbp)
	movl	$0, -56(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -56(%rbp)
	callq	in_check
	movl	%eax, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB114_22:                             # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB114_31
# %bb.23:                               #   in Loop: Header=BB114_22 Depth=1
	leaq	-12352(%rbp), %rax
	movslq	-16(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB114_29
# %bb.24:                               #   in Loop: Header=BB114_22 Depth=1
	leaq	-12352(%rbp), %rax
	movslq	-16(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	(%rax), %rax
	movl	board(,%rax,4), %eax
	movslq	(%rbx), %rcx
	cmpl	board(,%rcx,4), %eax
	jne	.LBB114_29
# %bb.25:                               #   in Loop: Header=BB114_22 Depth=1
	leaq	-12352(%rbp), %rax
	movslq	-16(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	cmpl	(%rbx), %eax
	je	.LBB114_29
# %bb.26:                               #   in Loop: Header=BB114_22 Depth=1
	leaq	-12352(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	make
	leaq	-12352(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-60(%rbp), %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB114_28
# %bb.27:
	leaq	-12352(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	unmake
	movl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB114_32
.LBB114_28:                             #   in Loop: Header=BB114_22 Depth=1
	leaq	-12352(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	unmake
.LBB114_29:                             #   in Loop: Header=BB114_22 Depth=1
	jmp	.LBB114_30
.LBB114_30:                             #   in Loop: Header=BB114_22 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_22
.LBB114_31:                             # %.loopexit1
	jmp	.LBB114_32
.LBB114_32:
	cmpl	$-1, -36(%rbp)
	je	.LBB114_43
# %bb.33:
	movslq	4(%rbx), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB114_38
# %bb.34:
	leaq	-12352(%rbp), %rax
	movslq	-36(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	(%rax), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	(%rbx), %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB114_36
# %bb.35:
	movabsq	$.L.str.7.406, %rsi
	movq	-32(%rbp), %rdi
	movslq	(%rbx), %rax
	movslq	board(,%rax,4), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movsbl	-17(%rbp), %ecx
	movsbl	-9(%rbp), %r8d
	movl	-24(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_37
.LBB114_36:
	movabsq	$.L.str.8.407, %rsi
	movq	-32(%rbp), %rdi
	movslq	(%rbx), %rax
	movslq	board(,%rax,4), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movl	-44(%rbp), %ecx
	movsbl	-9(%rbp), %r8d
	movl	-24(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
.LBB114_37:
	jmp	.LBB114_42
.LBB114_38:
	leaq	-12352(%rbp), %rax
	movslq	-36(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movslq	(%rax), %rax
	movl	Xfile(,%rax,4), %eax
	movslq	(%rbx), %rcx
	cmpl	Xfile(,%rcx,4), %eax
	je	.LBB114_40
# %bb.39:
	movabsq	$.L.str.9.408, %rsi
	movq	-32(%rbp), %rdi
	movslq	(%rbx), %rax
	movslq	board(,%rax,4), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movsbl	-17(%rbp), %ecx
	movsbl	-9(%rbp), %r8d
	movl	-24(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_41
.LBB114_40:
	movabsq	$.L.str.10.409, %rsi
	movq	-32(%rbp), %rdi
	movslq	(%rbx), %rax
	movslq	board(,%rax,4), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movl	-44(%rbp), %ecx
	movsbl	-9(%rbp), %r8d
	movl	-24(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
.LBB114_41:
	jmp	.LBB114_42
.LBB114_42:
	jmp	.LBB114_47
.LBB114_43:
	movslq	4(%rbx), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB114_45
# %bb.44:
	movabsq	$.L.str.11.410, %rsi
	movq	-32(%rbp), %rdi
	movslq	(%rbx), %rax
	movslq	board(,%rax,4), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movsbl	-9(%rbp), %ecx
	movl	-24(%rbp), %r8d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB114_46
.LBB114_45:
	movabsq	$.L.str.3.402, %rsi
	movq	-32(%rbp), %rdi
	movslq	(%rbx), %rax
	movslq	board(,%rax,4), %rax
	movl	comp_to_san.type_to_char(,%rax,4), %edx
	movsbl	-9(%rbp), %ecx
	movl	-24(%rbp), %r8d
	movb	$0, %al
	callq	sprintf
.LBB114_46:
	jmp	.LBB114_47
.LBB114_47:
	jmp	.LBB114_48
.LBB114_48:
	jmp	.LBB114_49
.LBB114_49:
	jmp	.LBB114_50
.LBB114_50:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	make
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	jne	.LBB114_52
# %bb.51:
	movq	-32(%rbp), %rdi
	movl	$.L.str.12.411, %esi
	callq	strcpy
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	unmake
	jmp	.LBB114_65
.LBB114_52:
	callq	in_check
	cmpl	$0, %eax
	je	.LBB114_64
# %bb.53:
	leaq	-24640(%rbp), %rdi
	movl	$1, -48(%rbp)
	movl	$0, -52(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB114_54:                             # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_59
# %bb.55:                               #   in Loop: Header=BB114_54 Depth=1
	leaq	-24640(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	make
	leaq	-24640(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB114_57
# %bb.56:
	leaq	-24640(%rbp), %rdi
	movl	$0, -48(%rbp)
	movl	-16(%rbp), %esi
	callq	unmake
	jmp	.LBB114_60
.LBB114_57:                             #   in Loop: Header=BB114_54 Depth=1
	leaq	-24640(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	unmake
# %bb.58:                               #   in Loop: Header=BB114_54 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_54
.LBB114_59:                             # %.loopexit
	jmp	.LBB114_60
.LBB114_60:
	cmpl	$1, -48(%rbp)
	jne	.LBB114_62
# %bb.61:
	movabsq	$.L.str.13.412, %rsi
	movq	-32(%rbp), %rdi
	callq	strcat
	jmp	.LBB114_63
.LBB114_62:
	movabsq	$.L.str.14.413, %rsi
	movq	-32(%rbp), %rdi
	callq	strcat
.LBB114_63:
	jmp	.LBB114_64
.LBB114_64:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	unmake
.LBB114_65:
	addq	$24632, %rsp            # imm = 0x6038
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end114:
	.size	comp_to_san, .Lfunc_end114-comp_to_san
	.cfi_endproc
                                        # -- End function
	.globl	comp_to_coord           # -- Begin function comp_to_coord
	.p2align	4, 0x90
	.type	comp_to_coord,@function
comp_to_coord:                          # @comp_to_coord
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -24(%rbp)
	movl	12(%rax), %ecx
	movl	%ecx, -8(%rbp)
	movl	(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movl	4(%rax), %eax
	movl	%eax, -36(%rbp)
	movslq	-28(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movl	Xrank(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	movl	$97, -32(%rbp)
	movslq	-28(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	-32(%rbp), %eax
	subl	$1, %eax
	movb	%al, -2(%rbp)
	movslq	-36(%rbp), %rax
	movl	Xfile(,%rax,4), %eax
	addl	-32(%rbp), %eax
	subl	$1, %eax
	movb	%al, -1(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB115_2
# %bb.1:
	movabsq	$.L.str.399, %rsi
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	movl	comp_to_coord.type_to_char(,%rax,4), %edx
	movsbl	-1(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB115_22
.LBB115_2:
	cmpl	$0, -8(%rbp)
	jne	.LBB115_4
# %bb.3:
	movabsq	$.L.str.8.407, %rsi
	movq	-24(%rbp), %rdi
	movsbl	-2(%rbp), %edx
	movl	-16(%rbp), %ecx
	movsbl	-1(%rbp), %r8d
	movl	-12(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB115_21
.LBB115_4:
	cmpl	$3, -8(%rbp)
	je	.LBB115_6
# %bb.5:
	cmpl	$4, -8(%rbp)
	jne	.LBB115_7
.LBB115_6:
	movabsq	$.L.str.15.416, %rsi
	movq	-24(%rbp), %rdi
	movsbl	-2(%rbp), %edx
	movl	-16(%rbp), %ecx
	movsbl	-1(%rbp), %r8d
	movl	-12(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB115_20
.LBB115_7:
	cmpl	$7, -8(%rbp)
	je	.LBB115_9
# %bb.8:
	cmpl	$8, -8(%rbp)
	jne	.LBB115_10
.LBB115_9:
	movabsq	$.L.str.16.417, %rsi
	movq	-24(%rbp), %rdi
	movsbl	-2(%rbp), %edx
	movl	-16(%rbp), %ecx
	movsbl	-1(%rbp), %r8d
	movl	-12(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB115_19
.LBB115_10:
	cmpl	$11, -8(%rbp)
	je	.LBB115_12
# %bb.11:
	cmpl	$12, -8(%rbp)
	jne	.LBB115_13
.LBB115_12:
	movabsq	$.L.str.17.418, %rsi
	movq	-24(%rbp), %rdi
	movsbl	-2(%rbp), %edx
	movl	-16(%rbp), %ecx
	movsbl	-1(%rbp), %r8d
	movl	-12(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB115_18
.LBB115_13:
	cmpl	$5, -8(%rbp)
	je	.LBB115_15
# %bb.14:
	cmpl	$6, -8(%rbp)
	jne	.LBB115_16
.LBB115_15:
	movabsq	$.L.str.18.419, %rsi
	movq	-24(%rbp), %rdi
	movsbl	-2(%rbp), %edx
	movl	-16(%rbp), %ecx
	movsbl	-1(%rbp), %r8d
	movl	-12(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
	jmp	.LBB115_17
.LBB115_16:
	movabsq	$.L.str.19.420, %rsi
	movq	-24(%rbp), %rdi
	movsbl	-2(%rbp), %edx
	movl	-16(%rbp), %ecx
	movsbl	-1(%rbp), %r8d
	movl	-12(%rbp), %r9d
	movb	$0, %al
	callq	sprintf
.LBB115_17:
	jmp	.LBB115_18
.LBB115_18:
	jmp	.LBB115_19
.LBB115_19:
	jmp	.LBB115_20
.LBB115_20:
	jmp	.LBB115_21
.LBB115_21:
	jmp	.LBB115_22
.LBB115_22:
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end115:
	.size	comp_to_coord, .Lfunc_end115-comp_to_coord
	.cfi_endproc
                                        # -- End function
	.globl	display_board           # -- Begin function display_board
	.p2align	4, 0x90
	.type	display_board,@function
display_board:                          # @display_board
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$2, %ebx
	movabsq	$.Ldisplay_board.piece_rep, %rax
	leaq	-160(%rbp), %rcx
	movabsq	$.L.str.20.423, %rdx
	movq	%rdi, -32(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, %rdi
	movq	%rax, %rsi
	movl	$112, %edx
	callq	memcpy
	movl	-44(%rbp), %eax
	cltd
	idivl	%ebx
	cmpl	$0, %edx
	je	.LBB116_12
# %bb.1:
	movabsq	$.L.str.35.424, %rsi
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	fprintf
	movl	$1, -12(%rbp)
.LBB116_2:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_4 Depth 2
	cmpl	$8, -12(%rbp)
	jg	.LBB116_11
# %bb.3:                                #   in Loop: Header=BB116_2 Depth=1
	movabsq	$.L.str.36.425, %rsi
	movl	$9, %edx
	movq	-32(%rbp), %rdi
	subl	-12(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -16(%rbp)
.LBB116_4:                              #   Parent Loop BB116_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -16(%rbp)
	jg	.LBB116_9
# %bb.5:                                #   in Loop: Header=BB116_4 Depth=2
	movl	$120, %eax
	imull	$12, -12(%rbp), %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB116_7
# %bb.6:                                #   in Loop: Header=BB116_4 Depth=2
	movabsq	$.L.str.37.426, %rsi
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movq	-160(%rbp,%rax,8), %rdx
	movb	$0, %al
	callq	fprintf
.LBB116_7:                              #   in Loop: Header=BB116_4 Depth=2
	jmp	.LBB116_8
.LBB116_8:                              #   in Loop: Header=BB116_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_4
.LBB116_9:                              #   in Loop: Header=BB116_2 Depth=1
	movabsq	$.L.str.38.427, %rsi
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	fprintf
# %bb.10:                               #   in Loop: Header=BB116_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_2
.LBB116_11:
	movabsq	$.L.str.39.428, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB116_23
.LBB116_12:
	movabsq	$.L.str.35.424, %rsi
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	fprintf
	movl	$1, -12(%rbp)
.LBB116_13:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_15 Depth 2
	cmpl	$8, -12(%rbp)
	jg	.LBB116_22
# %bb.14:                               #   in Loop: Header=BB116_13 Depth=1
	movabsq	$.L.str.36.425, %rsi
	movq	-32(%rbp), %rdi
	movl	-12(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	movl	$0, -16(%rbp)
.LBB116_15:                             #   Parent Loop BB116_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -16(%rbp)
	jg	.LBB116_20
# %bb.16:                               #   in Loop: Header=BB116_15 Depth=2
	imull	$12, -12(%rbp), %eax
	addl	$24, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB116_18
# %bb.17:                               #   in Loop: Header=BB116_15 Depth=2
	movabsq	$.L.str.37.426, %rsi
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movq	-160(%rbp,%rax,8), %rdx
	movb	$0, %al
	callq	fprintf
.LBB116_18:                             #   in Loop: Header=BB116_15 Depth=2
	jmp	.LBB116_19
.LBB116_19:                             #   in Loop: Header=BB116_15 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_15
.LBB116_20:                             #   in Loop: Header=BB116_13 Depth=1
	movabsq	$.L.str.38.427, %rsi
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movb	$0, %al
	callq	fprintf
# %bb.21:                               #   in Loop: Header=BB116_13 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_13
.LBB116_22:
	movabsq	$.L.str.40.429, %rsi
	movq	-32(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
.LBB116_23:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end116:
	.size	display_board, .Lfunc_end116-display_board
	.cfi_endproc
                                        # -- End function
	.globl	init_game               # -- Begin function init_game
	.p2align	4, 0x90
	.type	init_game,@function
init_game:                              # @init_game
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movabsq	$holding, %r14
	movabsq	$is_promoted, %r15
	movabsq	$moved, %r12
	movabsq	$board, %r13
	leaq	-624(%rbp), %rbx
	movabsq	$.Linit_game.init_board, %rsi
	movq	%rbx, %rdi
	movl	$576, %edx              # imm = 0x240
	callq	memcpy
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movl	$576, %edx              # imm = 0x240
	callq	memcpy
	movq	%r12, %rdi
	xorl	%esi, %esi
	movl	$576, %edx              # imm = 0x240
	callq	memset
	movl	$1, white_to_move
	movl	$0, ep_square
	movl	$30, wking_loc
	movl	$114, bking_loc
	movl	$0, white_castled
	movl	$0, black_castled
	movl	$0, result
	movl	$0, captures
	movl	$32, piece_count
	movl	$0, Material
	movq	%r15, %rdi
	xorl	%esi, %esi
	movl	$248, %edx
	callq	memset
	movq	%r14, %rdi
	xorl	%esi, %esi
	movl	$128, %edx
	callq	memset
	movl	$0, white_hand_eval
	movl	$0, black_hand_eval
	callq	reset_piece_square
	movl	$0, bookidx
	movl	$0, book_ply
	movl	$0, fifty
	movl	$0, ply
	movl	$0, phase
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end117:
	.size	init_game, .Lfunc_end117-init_game
	.cfi_endproc
                                        # -- End function
	.globl	reset_piece_square      # -- Begin function reset_piece_square
	.p2align	4, 0x90
	.type	reset_piece_square,@function
reset_piece_square:                     # @reset_piece_square
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	leaq	-592(%rbp), %rdi
	xorl	%esi, %esi
	movl	$576, %edx              # imm = 0x240
	callq	memset
	movl	$1, -12(%rbp)
.LBB118_1:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB118_6
# %bb.2:                                #   in Loop: Header=BB118_1 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, is_promoted(,%rax,4)
	je	.LBB118_4
# %bb.3:                                #   in Loop: Header=BB118_1 Depth=1
	movslq	-12(%rbp), %rax
	movslq	pieces(,%rax,4), %rax
	movl	$1, -592(%rbp,%rax,4)
.LBB118_4:                              #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_5
.LBB118_5:                              #   in Loop: Header=BB118_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_1
.LBB118_6:
	movabsq	$is_promoted, %rbx
	movabsq	$pieces, %rdi
	movl	$0, Material
	movl	$0, piece_count
	xorl	%esi, %esi
	movl	$248, %edx
	callq	memset
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$248, %edx
	callq	memset
	movl	$0, pieces
	movl	$26, -12(%rbp)
.LBB118_7:                              # =>This Inner Loop Header: Depth=1
	cmpl	$118, -12(%rbp)
	jge	.LBB118_16
# %bb.8:                                #   in Loop: Header=BB118_7 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB118_13
# %bb.9:                                #   in Loop: Header=BB118_7 Depth=1
	movslq	-12(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	jge	.LBB118_13
# %bb.10:                               #   in Loop: Header=BB118_7 Depth=1
	movslq	-12(%rbp), %rax
	movslq	board(,%rax,4), %rax
	movl	material(,%rax,4), %eax
	addl	Material, %eax
	movl	%eax, Material
	movl	piece_count, %eax
	addl	$1, %eax
	movl	%eax, piece_count
	movl	-12(%rbp), %eax
	movslq	piece_count, %rcx
	movl	%eax, pieces(,%rcx,4)
	movl	piece_count, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, squares(,%rcx,4)
	movslq	-12(%rbp), %rax
	cmpl	$0, -592(%rbp,%rax,4)
	je	.LBB118_12
# %bb.11:                               #   in Loop: Header=BB118_7 Depth=1
	movslq	piece_count, %rax
	movl	$1, is_promoted(,%rax,4)
.LBB118_12:                             #   in Loop: Header=BB118_7 Depth=1
	jmp	.LBB118_14
.LBB118_13:                             #   in Loop: Header=BB118_7 Depth=1
	movslq	-12(%rbp), %rax
	movl	$0, squares(,%rax,4)
.LBB118_14:                             #   in Loop: Header=BB118_7 Depth=1
	jmp	.LBB118_15
.LBB118_15:                             #   in Loop: Header=BB118_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_7
.LBB118_16:
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end118:
	.size	reset_piece_square, .Lfunc_end118-reset_piece_square
	.cfi_endproc
                                        # -- End function
	.globl	is_move                 # -- Begin function is_move
	.p2align	4, 0x90
	.type	is_move,@function
is_move:                                # @is_move
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB119_5
# %bb.1:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	1(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB119_5
# %bb.2:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	2(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB119_5
# %bb.3:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	3(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB119_5
# %bb.4:
	movl	$1, -12(%rbp)
	jmp	.LBB119_11
.LBB119_5:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB119_10
# %bb.6:
	movq	-8(%rbp), %rax
	movsbl	1(%rax), %eax
	cmpl	$64, %eax
	jne	.LBB119_10
# %bb.7:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	2(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB119_10
# %bb.8:
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movsbl	3(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB119_10
# %bb.9:
	movl	$1, -12(%rbp)
	jmp	.LBB119_11
.LBB119_10:
	movl	$0, -12(%rbp)
.LBB119_11:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end119:
	.size	is_move, .Lfunc_end119-is_move
	.cfi_endproc
                                        # -- End function
	.globl	perft_debug             # -- Begin function perft_debug
	.p2align	4, 0x90
	.type	perft_debug,@function
perft_debug:                            # @perft_debug
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              # imm = 0x130
	callq	init_game
.LBB120_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_2 Depth 2
                                        #     Child Loop BB120_10 Depth 2
                                        #       Child Loop BB120_11 Depth 3
	movabsq	$.L.str.41.450, %rdi
	movb	$0, %al
	callq	printf
	leaq	-304(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-304(%rbp), %rdi
	callq	atoi
	movl	%eax, -12(%rbp)
	movl	$0, raw_nodes
	movl	-12(%rbp), %edi
	callq	perft
	movabsq	$.L.str.42.453, %rdi
	movl	-12(%rbp), %esi
	movl	raw_nodes, %edx
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	movl	$1, %esi
	callq	display_board
	movabsq	$.L.str.43.454, %rdi
	movb	$0, %al
	callq	printf
	leaq	-304(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-304(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB120_2:                              #   Parent Loop BB120_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB120_5
# %bb.3:                                #   in Loop: Header=BB120_2 Depth=2
	movq	-8(%rbp), %rax
	movsbl	(%rax), %edi
	callq	tolower
	movq	-8(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.4:                                #   in Loop: Header=BB120_2 Depth=2
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB120_2
.LBB120_5:                              #   in Loop: Header=BB120_1 Depth=1
	leaq	-304(%rbp), %rdi
	movl	$.L.str.44.455, %esi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB120_7
# %bb.6:                                #   in Loop: Header=BB120_1 Depth=1
	leaq	-304(%rbp), %rdi
	movl	$.L.str.45.456, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB120_8
.LBB120_7:
	xorl	%edi, %edi
	callq	exit
.LBB120_8:                              #   in Loop: Header=BB120_1 Depth=1
	leaq	-40(%rbp), %rsi
	leaq	-304(%rbp), %rdi
	callq	verify_coord
	cmpl	$0, %eax
	jne	.LBB120_20
# %bb.9:                                #   in Loop: Header=BB120_1 Depth=1
	jmp	.LBB120_10
.LBB120_10:                             #   Parent Loop BB120_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_11 Depth 3
	movabsq	$.L.str.46.459, %rdi
	movb	$0, %al
	callq	printf
	leaq	-304(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-304(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB120_11:                             #   Parent Loop BB120_1 Depth=1
                                        #     Parent Loop BB120_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB120_14
# %bb.12:                               #   in Loop: Header=BB120_11 Depth=3
	movq	-8(%rbp), %rax
	movsbl	(%rax), %edi
	callq	tolower
	movq	-8(%rbp), %rcx
	movb	%al, (%rcx)
# %bb.13:                               #   in Loop: Header=BB120_11 Depth=3
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB120_11
.LBB120_14:                             #   in Loop: Header=BB120_10 Depth=2
	leaq	-304(%rbp), %rdi
	movl	$.L.str.44.455, %esi
	callq	strcmp
	cmpl	$0, %eax
	je	.LBB120_16
# %bb.15:                               #   in Loop: Header=BB120_10 Depth=2
	leaq	-304(%rbp), %rdi
	movl	$.L.str.45.456, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB120_17
.LBB120_16:
	xorl	%edi, %edi
	callq	exit
.LBB120_17:                             #   in Loop: Header=BB120_10 Depth=2
	jmp	.LBB120_18
.LBB120_18:                             #   in Loop: Header=BB120_10 Depth=2
	leaq	-40(%rbp), %rsi
	leaq	-304(%rbp), %rdi
	callq	verify_coord
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB120_10
# %bb.19:                               #   in Loop: Header=BB120_1 Depth=1
	jmp	.LBB120_20
.LBB120_20:                             #   in Loop: Header=BB120_1 Depth=1
	leaq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	make
	jmp	.LBB120_1
.Lfunc_end120:
	.size	perft_debug, .Lfunc_end120-perft_debug
	.cfi_endproc
                                        # -- End function
	.globl	rinput                  # -- Begin function rinput
	.p2align	4, 0x90
	.type	rinput,@function
rinput:                                 # @rinput
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB121_1:                              # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	_IO_getc
	xorl	%ecx, %ecx
	movl	%eax, -8(%rbp)
	cmpl	$10, %eax
	je	.LBB121_3
# %bb.2:                                #   in Loop: Header=BB121_1 Depth=1
	cmpl	$-1, -8(%rbp)
	setne	%cl
.LBB121_3:                              #   in Loop: Header=BB121_1 Depth=1
	testb	$1, %cl
	jne	.LBB121_4
	jmp	.LBB121_7
.LBB121_4:                              #   in Loop: Header=BB121_1 Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_6
# %bb.5:                                #   in Loop: Header=BB121_1 Depth=1
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB121_6:                              #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_1
.LBB121_7:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end121:
	.size	rinput, .Lfunc_end121-rinput
	.cfi_endproc
                                        # -- End function
	.globl	verify_coord            # -- Begin function verify_coord
	.p2align	4, 0x90
	.type	verify_coord,@function
verify_coord:                           # @verify_coord
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12368, %rsp            # imm = 0x3050
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	$0, -16(%rbp)
	cmpl	$4, Variant
	jne	.LBB122_11
# %bb.1:
	leaq	-12336(%rbp), %rdi
	movl	$1, captures
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
	movl	$0, captures
	movl	$1, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB122_2:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB122_7
# %bb.3:                                #   in Loop: Header=BB122_2 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB122_5
# %bb.4:
	leaq	-12336(%rbp), %rdi
	movl	$0, -12(%rbp)
	movl	-4(%rbp), %esi
	callq	unmake
	jmp	.LBB122_8
.LBB122_5:                              #   in Loop: Header=BB122_2 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
# %bb.6:                                #   in Loop: Header=BB122_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_2
.LBB122_7:                              # %.loopexit
	jmp	.LBB122_8
.LBB122_8:
	cmpl	$1, -12(%rbp)
	jne	.LBB122_10
# %bb.9:
	leaq	-12336(%rbp), %rdi
	movl	$0, captures
	movl	$0, -8(%rbp)
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
.LBB122_10:
	jmp	.LBB122_12
.LBB122_11:
	leaq	-12336(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -8(%rbp)
.LBB122_12:
	movl	$0, -4(%rbp)
.LBB122_13:                             # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB122_20
# %bb.14:                               #   in Loop: Header=BB122_13 Depth=1
	leaq	-22(%rbp), %rdi
	leaq	-12336(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_coord
	leaq	-22(%rbp), %rsi
	movq	-40(%rbp), %rdi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB122_18
# %bb.15:                               #   in Loop: Header=BB122_13 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB122_17
# %bb.16:                               #   in Loop: Header=BB122_13 Depth=1
	leaq	-12336(%rbp), %rax
	movl	$1, -16(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	%rdx, (%rcx)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rcx)
	movq	16(%rax), %rax
	movq	%rax, 16(%rcx)
.LBB122_17:                             #   in Loop: Header=BB122_13 Depth=1
	leaq	-12336(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
.LBB122_18:                             #   in Loop: Header=BB122_13 Depth=1
	jmp	.LBB122_19
.LBB122_19:                             #   in Loop: Header=BB122_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_13
.LBB122_20:
	movl	-16(%rbp), %eax
	addq	$12368, %rsp            # imm = 0x3050
	popq	%rbp
	retq
.Lfunc_end122:
	.size	verify_coord, .Lfunc_end122-verify_coord
	.cfi_endproc
                                        # -- End function
	.globl	hash_extract_pv         # -- Begin function hash_extract_pv
	.p2align	4, 0x90
	.type	hash_extract_pv,@function
hash_extract_pv:                        # @hash_extract_pv
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$12608, %rsp            # imm = 0x3140
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.LBB123_2
# %bb.1:
	jmp	.LBB123_9
.LBB123_2:
	leaq	-24(%rbp), %rdi
	leaq	-4(%rbp), %rdx
	xorl	%esi, %esi
	movq	%rdi, %rcx
	movq	%rdi, %r8
	xorl	%r9d, %r9d
	callq	ProbeTT
	cmpl	$4, %eax
	je	.LBB123_9
# %bb.3:
	leaq	-12576(%rbp), %rdi
	callq	gen
	movl	numb_moves, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -4(%rbp)
	jl	.LBB123_8
# %bb.4:
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB123_8
# %bb.5:
	leaq	-288(%rbp), %rdi
	leaq	-12576(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	leaq	-12576(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	make
	leaq	-12576(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	$1, %edx
	callq	check_legal
	cmpl	$0, %eax
	je	.LBB123_7
# %bb.6:
	movabsq	$.L.str.47.460, %rsi
	movq	-16(%rbp), %rdi
	callq	strcat
	leaq	-288(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	strcat
	movabsq	$.L.str.48.461, %rsi
	movq	-16(%rbp), %rdi
	callq	strcat
	movl	-8(%rbp), %edi
	movq	-16(%rbp), %rsi
	callq	hash_extract_pv
.LBB123_7:
	leaq	-12576(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	unmake
.LBB123_8:
	jmp	.LBB123_9
.LBB123_9:
	addq	$12608, %rsp            # imm = 0x3140
	popq	%rbp
	retq
.Lfunc_end123:
	.size	hash_extract_pv, .Lfunc_end123-hash_extract_pv
	.cfi_endproc
                                        # -- End function
	.globl	stringize_pv            # -- Begin function stringize_pv
	.p2align	4, 0x90
	.type	stringize_pv,@function
stringize_pv:                           # @stringize_pv
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              # imm = 0x130
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	xorl	%esi, %esi
	movl	$256, %edx              # imm = 0x100
	callq	memset
	movl	$1, -4(%rbp)
.LBB124_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	pv_length+4, %eax
	jge	.LBB124_4
# %bb.2:                                #   in Loop: Header=BB124_1 Depth=1
	leaq	-272(%rbp), %rdi
	movabsq	$pv, %rax
	addq	$7200, %rax             # imm = 0x1C20
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movabsq	$pv, %rdi
	addq	$7200, %rdi             # imm = 0x1C20
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	make
	leaq	-272(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	strcat
	movabsq	$.L.str.49.464, %rsi
	movq	-16(%rbp), %rdi
	callq	strcat
# %bb.3:                                #   in Loop: Header=BB124_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_1
.LBB124_4:
	movq	-16(%rbp), %rsi
	movl	$7, %edi
	callq	hash_extract_pv
	movl	pv_length+4, %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB124_5:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB124_8
# %bb.6:                                #   in Loop: Header=BB124_5 Depth=1
	movabsq	$pv, %rdi
	addq	$7200, %rdi             # imm = 0x1C20
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	unmake
# %bb.7:                                #   in Loop: Header=BB124_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_5
.LBB124_8:
	addq	$304, %rsp              # imm = 0x130
	popq	%rbp
	retq
.Lfunc_end124:
	.size	stringize_pv, .Lfunc_end124-stringize_pv
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function post_thinking
.LCPI125_0:
	.quad	4636737291354636288     # double 100
	.text
	.globl	post_thinking
	.p2align	4, 0x90
	.type	post_thinking,@function
post_thinking:                          # @post_thinking
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, -32(%rbp)
	movl	$0, -40(%rbp)
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jle	.LBB125_2
# %bb.1:
	movsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	nodes, %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	movl	-36(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -56(%rbp)
	cvttsd2si	-56(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB125_3
.LBB125_2:
	movl	nodes, %eax
	movl	%eax, -44(%rbp)
.LBB125_3:
	cmpl	$0, xb_mode
	je	.LBB125_5
# %bb.4:
	movabsq	$.L.str.50.471, %rdi
	movl	i_depth, %esi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	nodes, %r8d
	movb	$0, %al
	callq	printf
	jmp	.LBB125_6
.LBB125_5:
	movl	$100, %ecx
	movl	$32, %ebx
	movl	$45, %eax
	movl	i_depth, %r14d
	movl	-32(%rbp), %edx
	cmpl	$0, %edx
	cmovll	%eax, %ebx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	movl	%eax, %r15d
	movl	$100, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, %edi
	callq	abs
	movabsq	$.L.str.51.472, %rdi
	movl	nodes, %r9d
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%eax, %r8d
	movb	$0, %al
	callq	printf
.LBB125_6:
	cmpl	$0, pv+7224
	je	.LBB125_8
# %bb.7:
	movslq	pv+7224, %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB125_10
.LBB125_8:
	cmpl	$0, pv+7224
	jne	.LBB125_11
# %bb.9:
	movslq	pv+7228, %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB125_11
.LBB125_10:
	movabsq	$pv, %rdi
	addq	$7200, %rdi             # imm = 0x1C20
	addq	$24, %rdi
	xorl	%esi, %esi
	callq	unmake
	movl	$1, -40(%rbp)
.LBB125_11:
	movl	$1, -28(%rbp)
.LBB125_12:                             # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	pv_length+4, %eax
	jge	.LBB125_15
# %bb.13:                               #   in Loop: Header=BB125_12 Depth=1
	leaq	-576(%rbp), %rdi
	movabsq	$pv, %rax
	addq	$7200, %rax             # imm = 0x1C20
	movslq	-28(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movabsq	$pv, %rdi
	addq	$7200, %rdi             # imm = 0x1C20
	movslq	-28(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	make
	movabsq	$.L.str.52.473, %rdi
	leaq	-576(%rbp), %rsi
	movb	$0, %al
	callq	printf
# %bb.14:                               #   in Loop: Header=BB125_12 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB125_12
.LBB125_15:
	leaq	-320(%rbp), %rbx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$256, %edx              # imm = 0x100
	callq	memset
	movl	$7, %edi
	movq	%rbx, %rsi
	callq	hash_extract_pv
	movabsq	$.L.str.53.474, %rdi
	leaq	-320(%rbp), %rsi
	movb	$0, %al
	callq	printf
	movl	pv_length+4, %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB125_16:                             # =>This Inner Loop Header: Depth=1
	cmpl	$0, -28(%rbp)
	jle	.LBB125_19
# %bb.17:                               #   in Loop: Header=BB125_16 Depth=1
	movabsq	$pv, %rdi
	addq	$7200, %rdi             # imm = 0x1C20
	movslq	-28(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rdi
	xorl	%esi, %esi
	callq	unmake
# %bb.18:                               #   in Loop: Header=BB125_16 Depth=1
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB125_16
.LBB125_19:
	cmpl	$0, -40(%rbp)
	je	.LBB125_21
# %bb.20:
	movabsq	$pv, %rdi
	addq	$7200, %rdi             # imm = 0x1C20
	addq	$24, %rdi
	xorl	%esi, %esi
	callq	make
.LBB125_21:
	movabsq	$.L.str.54.475, %rdi
	movb	$0, %al
	callq	printf
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end125:
	.size	post_thinking, .Lfunc_end125-post_thinking
	.cfi_endproc
                                        # -- End function
	.globl	rtime                   # -- Begin function rtime
	.p2align	4, 0x90
	.type	rtime,@function
rtime:                                  # @rtime
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end126:
	.size	rtime, .Lfunc_end126-rtime
	.cfi_endproc
                                        # -- End function
	.globl	rdifftime               # -- Begin function rdifftime
	.p2align	4, 0x90
	.type	rdifftime,@function
rdifftime:                              # @rdifftime
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	difftime
	cvttsd2si	%xmm0, %eax
	imull	$100, %eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end127:
	.size	rdifftime, .Lfunc_end127-rdifftime
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function post_fail_thinking
.LCPI128_0:
	.quad	4636737291354636288     # double 100
	.text
	.globl	post_fail_thinking
	.p2align	4, 0x90
	.type	post_fail_thinking,@function
post_fail_thinking:                     # @post_fail_thinking
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$344, %rsp              # imm = 0x158
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, -28(%rbp)
	movq	%rsi, -40(%rbp)
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jle	.LBB128_2
# %bb.1:
	movsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	nodes, %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	movl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -56(%rbp)
	cvttsd2si	-56(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB128_3
.LBB128_2:
	movl	nodes, %eax
	movl	%eax, -44(%rbp)
.LBB128_3:
	cmpl	$0, xb_mode
	je	.LBB128_5
# %bb.4:
	movabsq	$.L.str.50.471, %rdi
	movl	i_depth, %esi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	nodes, %r8d
	movb	$0, %al
	callq	printf
	jmp	.LBB128_6
.LBB128_5:
	movl	$100, %ecx
	movl	$32, %ebx
	movl	$45, %eax
	movl	i_depth, %r14d
	movl	-28(%rbp), %edx
	cmpl	$0, %edx
	cmovll	%eax, %ebx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	movl	%eax, %r15d
	movl	$100, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, %edi
	callq	abs
	movabsq	$.L.str.51.472, %rdi
	movl	nodes, %r9d
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%eax, %r8d
	movb	$0, %al
	callq	printf
.LBB128_6:
	movq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	unmake
	leaq	-80(%rbp), %rax
	leaq	-336(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, -80(%rbp)
	movq	8(%rcx), %rdx
	movq	%rdx, -72(%rbp)
	movq	16(%rcx), %rcx
	movq	%rcx, -64(%rbp)
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	make
	movabsq	$.L.str.55.478, %rdi
	leaq	-336(%rbp), %rsi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.54.475, %rdi
	movb	$0, %al
	callq	printf
	addq	$344, %rsp              # imm = 0x158
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end128:
	.size	post_fail_thinking, .Lfunc_end128-post_fail_thinking
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function post_fh_thinking
.LCPI129_0:
	.quad	4636737291354636288     # double 100
	.text
	.globl	post_fh_thinking
	.p2align	4, 0x90
	.type	post_fh_thinking,@function
post_fh_thinking:                       # @post_fh_thinking
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$344, %rsp              # imm = 0x158
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, -28(%rbp)
	movq	%rsi, -40(%rbp)
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jle	.LBB129_2
# %bb.1:
	movsd	.LCPI129_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	nodes, %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	movl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -56(%rbp)
	cvttsd2si	-56(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB129_3
.LBB129_2:
	movl	nodes, %eax
	movl	%eax, -44(%rbp)
.LBB129_3:
	cmpl	$0, xb_mode
	je	.LBB129_5
# %bb.4:
	movabsq	$.L.str.50.471, %rdi
	movl	i_depth, %esi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	nodes, %r8d
	movb	$0, %al
	callq	printf
	jmp	.LBB129_6
.LBB129_5:
	movl	$100, %ecx
	movl	$32, %ebx
	movl	$45, %eax
	movl	i_depth, %r14d
	movl	-28(%rbp), %edx
	cmpl	$0, %edx
	cmovll	%eax, %ebx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	movl	%eax, %r15d
	movl	$100, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, %edi
	callq	abs
	movabsq	$.L.str.51.472, %rdi
	movl	nodes, %r9d
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%eax, %r8d
	movb	$0, %al
	callq	printf
.LBB129_6:
	movq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	unmake
	leaq	-80(%rbp), %rax
	leaq	-336(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, -80(%rbp)
	movq	8(%rcx), %rdx
	movq	%rdx, -72(%rbp)
	movq	16(%rcx), %rcx
	movq	%rcx, -64(%rbp)
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	make
	movabsq	$.L.str.56.481, %rdi
	leaq	-336(%rbp), %rsi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.54.475, %rdi
	movb	$0, %al
	callq	printf
	addq	$344, %rsp              # imm = 0x158
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end129:
	.size	post_fh_thinking, .Lfunc_end129-post_fh_thinking
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function post_fl_thinking
.LCPI130_0:
	.quad	4636737291354636288     # double 100
	.text
	.globl	post_fl_thinking
	.p2align	4, 0x90
	.type	post_fl_thinking,@function
post_fl_thinking:                       # @post_fl_thinking
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$344, %rsp              # imm = 0x158
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, -28(%rbp)
	movq	%rsi, -40(%rbp)
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jle	.LBB130_2
# %bb.1:
	movsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	nodes, %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm1, %xmm0
	movl	-32(%rbp), %eax
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -56(%rbp)
	cvttsd2si	-56(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB130_3
.LBB130_2:
	movl	nodes, %eax
	movl	%eax, -44(%rbp)
.LBB130_3:
	cmpl	$0, xb_mode
	je	.LBB130_5
# %bb.4:
	movabsq	$.L.str.50.471, %rdi
	movl	i_depth, %esi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	nodes, %r8d
	movb	$0, %al
	callq	printf
	jmp	.LBB130_6
.LBB130_5:
	movl	$100, %ecx
	movl	$32, %ebx
	movl	$45, %eax
	movl	i_depth, %r14d
	movl	-28(%rbp), %edx
	cmpl	$0, %edx
	cmovll	%eax, %ebx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	movl	%eax, %r15d
	movl	$100, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, %edi
	callq	abs
	movabsq	$.L.str.51.472, %rdi
	movl	nodes, %r9d
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%eax, %r8d
	movb	$0, %al
	callq	printf
.LBB130_6:
	movq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	unmake
	leaq	-80(%rbp), %rax
	leaq	-336(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, -80(%rbp)
	movq	8(%rcx), %rdx
	movq	%rdx, -72(%rbp)
	movq	16(%rcx), %rcx
	movq	%rcx, -64(%rbp)
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	comp_to_san
	movq	-40(%rbp), %rdi
	xorl	%esi, %esi
	callq	make
	movabsq	$.L.str.57.484, %rdi
	leaq	-336(%rbp), %rsi
	movb	$0, %al
	callq	printf
	movabsq	$.L.str.54.475, %rdi
	movb	$0, %al
	callq	printf
	addq	$344, %rsp              # imm = 0x158
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end130:
	.size	post_fl_thinking, .Lfunc_end130-post_fl_thinking
	.cfi_endproc
                                        # -- End function
	.globl	post_stat_thinking      # -- Begin function post_stat_thinking
	.p2align	4, 0x90
	.type	post_stat_thinking,@function
post_stat_thinking:                     # @post_stat_thinking
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	rtime
	movq	start_time, %rsi
	movq	%rax, %rdi
	callq	rdifftime
	movl	%eax, -4(%rbp)
	cmpl	$1, xb_mode
	jne	.LBB131_2
# %bb.1:
	movabsq	$.L.str.58.485, %rdi
	movl	-4(%rbp), %esi
	movl	nodes, %edx
	movl	i_depth, %ecx
	movl	moveleft, %r8d
	movl	movetotal, %r9d
	movb	$0, %al
	callq	printf
	jmp	.LBB131_5
.LBB131_2:
	cmpl	$2, xb_mode
	jne	.LBB131_4
# %bb.3:
	movabsq	$.L.str.59.486, %rdi
	movabsq	$searching_move, %rax
	movl	-4(%rbp), %esi
	movl	nodes, %edx
	movl	i_depth, %ecx
	movl	moveleft, %r8d
	movl	movetotal, %r9d
	movq	%rax, (%rsp)
	movb	$0, %al
	callq	printf
.LBB131_4:
	jmp	.LBB131_5
.LBB131_5:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end131:
	.size	post_stat_thinking, .Lfunc_end131-post_stat_thinking
	.cfi_endproc
                                        # -- End function
	.globl	print_move              # -- Begin function print_move
	.p2align	4, 0x90
	.type	print_move,@function
print_move:                             # @print_move
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$336, %rsp              # imm = 0x150
	leaq	-48(%rbp), %rcx
	leaq	-304(%rbp), %rax
	movq	%rdi, -24(%rbp)
	movl	%esi, -4(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-24(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rdx
	movq	(%rdx), %rsi
	movq	%rsi, -48(%rbp)
	movq	8(%rdx), %rsi
	movq	%rsi, -40(%rbp)
	movq	16(%rdx), %rdx
	movq	%rdx, -32(%rbp)
	movq	(%rcx), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rcx), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rcx), %rcx
	movq	%rcx, 16(%rsp)
	movq	%rax, %rdi
	callq	comp_to_san
	movabsq	$.L.str.53.474, %rsi
	leaq	-304(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movb	$0, %al
	callq	fprintf
	addq	$336, %rsp              # imm = 0x150
	popq	%rbp
	retq
.Lfunc_end132:
	.size	print_move, .Lfunc_end132-print_move
	.cfi_endproc
                                        # -- End function
	.globl	rdelay                  # -- Begin function rdelay
	.p2align	4, 0x90
	.type	rdelay,@function
rdelay:                                 # @rdelay
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
	callq	rtime
	movq	%rax, -24(%rbp)
.LBB133_1:                              # =>This Inner Loop Header: Depth=1
	movl	$100, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	-8(%rbp), %eax
	jge	.LBB133_3
# %bb.2:                                #   in Loop: Header=BB133_1 Depth=1
	callq	rtime
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	rdifftime
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_3:
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end133:
	.size	rdelay, .Lfunc_end133-rdelay
	.cfi_endproc
                                        # -- End function
	.globl	check_piece_square      # -- Begin function check_piece_square
	.p2align	4, 0x90
	.type	check_piece_square,@function
check_piece_square:                     # @check_piece_square
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, -4(%rbp)
.LBB134_1:                              # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	piece_count, %eax
	jg	.LBB134_13
# %bb.2:                                #   in Loop: Header=BB134_1 Depth=1
	movslq	-4(%rbp), %rax
	movslq	pieces(,%rax,4), %rax
	movl	squares(,%rax,4), %eax
	cmpl	-4(%rbp), %eax
	je	.LBB134_5
# %bb.3:                                #   in Loop: Header=BB134_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, pieces(,%rax,4)
	je	.LBB134_5
# %bb.4:                                #   in Loop: Header=BB134_1 Depth=1
	movabsq	$.L.str.60.489, %rdi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	display_board
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB134_5:                              #   in Loop: Header=BB134_1 Depth=1
	movslq	-4(%rbp), %rax
	movslq	pieces(,%rax,4), %rax
	cmpl	$13, board(,%rax,4)
	jne	.LBB134_8
# %bb.6:                                #   in Loop: Header=BB134_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, pieces(,%rax,4)
	je	.LBB134_8
# %bb.7:                                #   in Loop: Header=BB134_1 Depth=1
	movabsq	$.L.str.61.490, %rdi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	display_board
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB134_8:                              #   in Loop: Header=BB134_1 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, pieces(,%rax,4)
	jne	.LBB134_11
# %bb.9:                                #   in Loop: Header=BB134_1 Depth=1
	movslq	-4(%rbp), %rax
	movslq	pieces(,%rax,4), %rax
	cmpl	$0, squares(,%rax,4)
	je	.LBB134_11
# %bb.10:                               #   in Loop: Header=BB134_1 Depth=1
	movabsq	$.L.str.62.491, %rdi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	display_board
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB134_11:                             #   in Loop: Header=BB134_1 Depth=1
	jmp	.LBB134_12
.LBB134_12:                             #   in Loop: Header=BB134_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_1
.LBB134_13:
	movl	$0, -4(%rbp)
.LBB134_14:                             # =>This Inner Loop Header: Depth=1
	cmpl	$144, -4(%rbp)
	jge	.LBB134_28
# %bb.15:                               #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB134_17
# %bb.16:                               #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	jne	.LBB134_19
.LBB134_17:                             #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, squares(,%rax,4)
	je	.LBB134_19
# %bb.18:                               #   in Loop: Header=BB134_14 Depth=1
	movabsq	$.L.str.63.492, %rdi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	display_board
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB134_19:                             #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$13, board(,%rax,4)
	je	.LBB134_23
# %bb.20:                               #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, board(,%rax,4)
	je	.LBB134_23
# %bb.21:                               #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, squares(,%rax,4)
	jne	.LBB134_23
# %bb.22:                               #   in Loop: Header=BB134_14 Depth=1
	movabsq	$.L.str.64.493, %rdi
	movl	-4(%rbp), %esi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	display_board
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB134_23:                             #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	movslq	squares(,%rax,4), %rax
	movl	pieces(,%rax,4), %eax
	cmpl	-4(%rbp), %eax
	je	.LBB134_26
# %bb.24:                               #   in Loop: Header=BB134_14 Depth=1
	movslq	-4(%rbp), %rax
	cmpl	$0, squares(,%rax,4)
	je	.LBB134_26
# %bb.25:                               #   in Loop: Header=BB134_14 Depth=1
	movabsq	$.L.str.65.494, %rdi
	movb	$0, %al
	callq	printf
	movq	stdout, %rdi
	xorl	%esi, %esi
	callq	display_board
	xorl	%eax, %eax
	movl	$0, (%rax)
.LBB134_26:                             #   in Loop: Header=BB134_14 Depth=1
	jmp	.LBB134_27
.LBB134_27:                             #   in Loop: Header=BB134_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_14
.LBB134_28:
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end134:
	.size	check_piece_square, .Lfunc_end134-check_piece_square
	.cfi_endproc
                                        # -- End function
	.globl	start_up                # -- Begin function start_up
	.p2align	4, 0x90
	.type	start_up,@function
start_up:                               # @start_up
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$.L.str.66.497, %rdi
	movb	$0, %al
	callq	printf
	popq	%rbp
	retq
.Lfunc_end135:
	.size	start_up, .Lfunc_end135-start_up
	.cfi_endproc
                                        # -- End function
	.globl	toggle_bool             # -- Begin function toggle_bool
	.p2align	4, 0x90
	.type	toggle_bool,@function
toggle_bool:                            # @toggle_bool
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB136_2
# %bb.1:
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB136_3
.LBB136_2:
	movq	-8(%rbp), %rax
	movl	$1, (%rax)
.LBB136_3:
	popq	%rbp
	retq
.Lfunc_end136:
	.size	toggle_bool, .Lfunc_end136-toggle_bool
	.cfi_endproc
                                        # -- End function
	.globl	tree_debug              # -- Begin function tree_debug
	.p2align	4, 0x90
	.type	tree_debug,@function
tree_debug:                             # @tree_debug
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	callq	init_game
	movabsq	$.L.str.67.500, %rdi
	movb	$0, %al
	callq	printf
	leaq	-272(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-272(%rbp), %rdi
	callq	atoi
	movabsq	$.L.str.68.501, %rdi
	movl	%eax, -4(%rbp)
	movb	$0, %al
	callq	printf
	leaq	-272(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	movsbl	-272(%rbp), %eax
	cmpl	$121, %eax
	jne	.LBB137_4
# %bb.1:
	movabsq	$.L.str.69.502, %rdi
	movb	$0, %al
	callq	printf
	leaq	-272(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	movabsq	$.L.str.70.503, %rsi
	leaq	-272(%rbp), %rdi
	callq	fopen
	movq	%rax, -16(%rbp)
	cmpq	$0, %rax
	jne	.LBB137_3
# %bb.2:
	movabsq	$.L.str.71.504, %rsi
	leaq	-272(%rbp), %rdx
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
.LBB137_3:
	movabsq	$.L.str.72.505, %rdi
	movb	$0, %al
	callq	printf
	leaq	-272(%rbp), %rdi
	movq	stdin, %rdx
	movl	$256, %esi              # imm = 0x100
	callq	rinput
	leaq	-272(%rbp), %rcx
	movl	-4(%rbp), %edi
	movq	-16(%rbp), %rdx
	xorl	%esi, %esi
	callq	tree
.LBB137_4:
	movl	$0, raw_nodes
	movl	-4(%rbp), %edi
	callq	perft
	movabsq	$.L.str.73.506, %rdi
	movabsq	$divider, %rsi
	movl	-4(%rbp), %edx
	movl	raw_nodes, %ecx
	movq	%rsi, %r8
	movb	$0, %al
	callq	printf
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end137:
	.size	tree_debug, .Lfunc_end137-tree_debug
	.cfi_endproc
                                        # -- End function
	.globl	interrupt               # -- Begin function interrupt
	.p2align	4, 0x90
	.type	interrupt,@function
interrupt:                              # @interrupt
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end138:
	.size	interrupt, .Lfunc_end138-interrupt
	.cfi_endproc
                                        # -- End function
	.globl	PutPiece                # -- Begin function PutPiece
	.p2align	4, 0x90
	.type	PutPiece,@function
PutPiece:                               # @PutPiece
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -12(%rbp)
	movb	%sil, -5(%rbp)
	movb	%dl, -6(%rbp)
	movl	%ecx, -32(%rbp)
	movl	$97, -28(%rbp)
	movl	$49, -24(%rbp)
	movsbl	-6(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	imull	$12, -16(%rbp), %eax
	addl	$26, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB139_11
# %bb.1:
	movsbl	-5(%rbp), %eax
	addl	$-98, %eax
	movl	%eax, %ecx
	subl	$22, %ecx
	ja	.LBB139_10
# %bb.2:
	movq	.LJTI139_1(,%rax,8), %rax
	jmpq	*%rax
.LBB139_3:
	movslq	-4(%rbp), %rax
	movl	$1, board(,%rax,4)
	jmp	.LBB139_10
.LBB139_4:
	movslq	-4(%rbp), %rax
	movl	$3, board(,%rax,4)
	jmp	.LBB139_10
.LBB139_5:
	movslq	-4(%rbp), %rax
	movl	$11, board(,%rax,4)
	jmp	.LBB139_10
.LBB139_6:
	movslq	-4(%rbp), %rax
	movl	$7, board(,%rax,4)
	jmp	.LBB139_10
.LBB139_7:
	movslq	-4(%rbp), %rax
	movl	$9, board(,%rax,4)
	jmp	.LBB139_10
.LBB139_8:
	movslq	-4(%rbp), %rax
	movl	$5, board(,%rax,4)
	jmp	.LBB139_10
.LBB139_9:
	movslq	-4(%rbp), %rax
	movl	$13, board(,%rax,4)
.LBB139_10:
	jmp	.LBB139_23
.LBB139_11:
	cmpl	$1, -12(%rbp)
	jne	.LBB139_22
# %bb.12:
	movsbl	-5(%rbp), %eax
	addl	$-98, %eax
	movl	%eax, %ecx
	subl	$22, %ecx
	ja	.LBB139_21
# %bb.13:
	movq	.LJTI139_0(,%rax,8), %rax
	jmpq	*%rax
.LBB139_14:
	movslq	-4(%rbp), %rax
	movl	$2, board(,%rax,4)
	jmp	.LBB139_21
.LBB139_15:
	movslq	-4(%rbp), %rax
	movl	$4, board(,%rax,4)
	jmp	.LBB139_21
.LBB139_16:
	movslq	-4(%rbp), %rax
	movl	$12, board(,%rax,4)
	jmp	.LBB139_21
.LBB139_17:
	movslq	-4(%rbp), %rax
	movl	$8, board(,%rax,4)
	jmp	.LBB139_21
.LBB139_18:
	movslq	-4(%rbp), %rax
	movl	$10, board(,%rax,4)
	jmp	.LBB139_21
.LBB139_19:
	movslq	-4(%rbp), %rax
	movl	$6, board(,%rax,4)
	jmp	.LBB139_21
.LBB139_20:
	movslq	-4(%rbp), %rax
	movl	$13, board(,%rax,4)
.LBB139_21:
	jmp	.LBB139_22
.LBB139_22:
	jmp	.LBB139_23
.LBB139_23:
	popq	%rbp
	retq
.Lfunc_end139:
	.size	PutPiece, .Lfunc_end139-PutPiece
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI139_0:
	.quad	.LBB139_16
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_19
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_15
	.quad	.LBB139_21
	.quad	.LBB139_14
	.quad	.LBB139_18
	.quad	.LBB139_17
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_21
	.quad	.LBB139_20
.LJTI139_1:
	.quad	.LBB139_5
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_8
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_4
	.quad	.LBB139_10
	.quad	.LBB139_3
	.quad	.LBB139_7
	.quad	.LBB139_6
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_10
	.quad	.LBB139_9
                                        # -- End function
	.text
	.globl	reset_board             # -- Begin function reset_board
	.p2align	4, 0x90
	.type	reset_board,@function
reset_board:                            # @reset_board
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$592, %rsp              # imm = 0x250
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movabsq	$board, %r14
	leaq	-608(%rbp), %rbx
	movabsq	$.Lreset_board.init_board, %rsi
	movq	%rbx, %rdi
	movl	$576, %edx              # imm = 0x240
	callq	memcpy
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movl	$576, %edx              # imm = 0x240
	callq	memcpy
	movl	$0, -20(%rbp)
.LBB140_1:                              # =>This Inner Loop Header: Depth=1
	cmpl	$143, -20(%rbp)
	jg	.LBB140_4
# %bb.2:                                #   in Loop: Header=BB140_1 Depth=1
	movslq	-20(%rbp), %rax
	movl	$0, moved(,%rax,4)
# %bb.3:                                #   in Loop: Header=BB140_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_1
.LBB140_4:
	movabsq	$holding, %rbx
	movabsq	$is_promoted, %rdi
	movl	$0, ep_square
	movl	$0, piece_count
	movl	$0, Material
	xorl	%esi, %esi
	movl	$248, %edx
	callq	memset
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movl	$128, %edx
	callq	memset
	movl	$0, white_hand_eval
	movl	$0, black_hand_eval
	movl	$0, bookidx
	movl	$0, fifty
	callq	reset_piece_square
	addq	$592, %rsp              # imm = 0x250
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end140:
	.size	reset_board, .Lfunc_end140-reset_board
	.cfi_endproc
                                        # -- End function
	.globl	seedMT                  # -- Begin function seedMT
	.p2align	4, 0x90
	.type	seedMT,@function
seedMT:                                 # @seedMT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$state, %rax
	movl	%edi, -20(%rbp)
	movl	-20(%rbp), %ecx
	orl	$1, %ecx
	movl	%ecx, -4(%rbp)
	movq	%rax, -16(%rbp)
	movl	$0, left
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movl	$624, -8(%rbp)          # imm = 0x270
.LBB141_1:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, %eax
	je	.LBB141_4
# %bb.2:                                #   in Loop: Header=BB141_1 Depth=1
	jmp	.LBB141_3
.LBB141_3:                              #   in Loop: Header=BB141_1 Depth=1
	imull	$69069, -4(%rbp), %eax  # imm = 0x10DCD
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	jmp	.LBB141_1
.LBB141_4:
	popq	%rbp
	retq
.Lfunc_end141:
	.size	seedMT, .Lfunc_end141-seedMT
	.cfi_endproc
                                        # -- End function
	.globl	reloadMT                # -- Begin function reloadMT
	.p2align	4, 0x90
	.type	reloadMT,@function
reloadMT:                               # @reloadMT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movabsq	$state, %rax
	movq	%rax, %rcx
	addq	$1588, %rcx             # imm = 0x634
	movq	%rax, %rdx
	addq	$8, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -24(%rbp)
	cmpl	$-1, left
	jge	.LBB142_2
# %bb.1:
	movl	$4357, %edi             # imm = 0x1105
	callq	seedMT
.LBB142_2:
	movabsq	$state, %rax
	addq	$4, %rax
	movl	$623, left              # imm = 0x26F
	movq	%rax, next
	movl	state, %eax
	movl	%eax, -12(%rbp)
	movl	state+4, %eax
	movl	%eax, -4(%rbp)
	movl	$228, -8(%rbp)
.LBB142_3:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, %eax
	je	.LBB142_6
# %bb.4:                                #   in Loop: Header=BB142_3 Depth=1
	xorl	%eax, %eax
	movl	$2567483615, %ecx       # imm = 0x9908B0DF
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$4, %rsi
	movq	%rsi, -24(%rbp)
	movl	(%rdx), %edx
	movl	-12(%rbp), %esi
	andl	$-2147483648, %esi      # imm = 0x80000000
	movl	-4(%rbp), %edi
	andl	$2147483647, %edi       # imm = 0x7FFFFFFF
	orl	%edi, %esi
	shrl	$1, %esi
	xorl	%esi, %edx
	movl	-4(%rbp), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	cmovnel	%ecx, %eax
	xorl	%eax, %edx
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	%edx, (%rax)
# %bb.5:                                #   in Loop: Header=BB142_3 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_3
.LBB142_6:
	movabsq	$state, %rax
	movq	%rax, -24(%rbp)
	movl	$397, -8(%rbp)          # imm = 0x18D
.LBB142_7:                              # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, %eax
	je	.LBB142_10
# %bb.8:                                #   in Loop: Header=BB142_7 Depth=1
	xorl	%eax, %eax
	movl	$2567483615, %ecx       # imm = 0x9908B0DF
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$4, %rsi
	movq	%rsi, -24(%rbp)
	movl	(%rdx), %edx
	movl	-12(%rbp), %esi
	andl	$-2147483648, %esi      # imm = 0x80000000
	movl	-4(%rbp), %edi
	andl	$2147483647, %edi       # imm = 0x7FFFFFFF
	orl	%edi, %esi
	shrl	$1, %esi
	xorl	%esi, %edx
	movl	-4(%rbp), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	cmovnel	%ecx, %eax
	xorl	%eax, %edx
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	%edx, (%rax)
# %bb.9:                                #   in Loop: Header=BB142_7 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_7
.LBB142_10:
	xorl	%eax, %eax
	movl	$2567483615, %ecx       # imm = 0x9908B0DF
	movl	state, %edx
	movl	%edx, -4(%rbp)
	movq	-24(%rbp), %rdx
	movl	(%rdx), %edx
	movl	-12(%rbp), %esi
	andl	$-2147483648, %esi      # imm = 0x80000000
	movl	-4(%rbp), %edi
	andl	$2147483647, %edi       # imm = 0x7FFFFFFF
	orl	%edi, %esi
	shrl	$1, %esi
	xorl	%esi, %edx
	movl	-4(%rbp), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	cmovnel	%ecx, %eax
	xorl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movl	-4(%rbp), %eax
	shrl	$11, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shll	$7, %eax
	andl	$-1658038656, %eax      # imm = 0x9D2C5680
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shll	$15, %eax
	andl	$-272236544, %eax       # imm = 0xEFC60000
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	-4(%rbp), %ecx
	shrl	$18, %ecx
	xorl	%ecx, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end142:
	.size	reloadMT, .Lfunc_end142-reloadMT
	.cfi_endproc
                                        # -- End function
	.globl	randomMT                # -- Begin function randomMT
	.p2align	4, 0x90
	.type	randomMT,@function
randomMT:                               # @randomMT
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	left, %eax
	addl	$-1, %eax
	movl	%eax, left
	cmpl	$0, %eax
	jge	.LBB143_2
# %bb.1:
	callq	reloadMT
	movl	%eax, -8(%rbp)
	jmp	.LBB143_3
.LBB143_2:
	movq	next, %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, next
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$11, %eax
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shll	$7, %eax
	andl	$-1658038656, %eax      # imm = 0x9D2C5680
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	shll	$15, %eax
	andl	$-272236544, %eax       # imm = 0xEFC60000
	xorl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	-4(%rbp), %ecx
	shrl	$18, %ecx
	xorl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB143_3:
	movl	-8(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end143:
	.size	randomMT, .Lfunc_end143-randomMT
	.cfi_endproc
                                        # -- End function
	.type	calc_attackers.rook_o,@object # @calc_attackers.rook_o
	.section	.rodata,"a",@progbits
	.p2align	4
calc_attackers.rook_o:
	.long	12                      # 0xc
	.long	4294967284              # 0xfffffff4
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.size	calc_attackers.rook_o, 16

	.type	calc_attackers.bishop_o,@object # @calc_attackers.bishop_o
	.p2align	4
calc_attackers.bishop_o:
	.long	11                      # 0xb
	.long	4294967285              # 0xfffffff5
	.long	13                      # 0xd
	.long	4294967283              # 0xfffffff3
	.size	calc_attackers.bishop_o, 16

	.type	calc_attackers.knight_o,@object # @calc_attackers.knight_o
	.p2align	4
calc_attackers.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	calc_attackers.knight_o, 32

	.type	is_attacked.bishop_o,@object # @is_attacked.bishop_o
	.p2align	4
is_attacked.bishop_o:
	.long	11                      # 0xb
	.long	4294967285              # 0xfffffff5
	.long	13                      # 0xd
	.long	4294967283              # 0xfffffff3
	.size	is_attacked.bishop_o, 16

	.type	is_attacked.knight_o,@object # @is_attacked.knight_o
	.p2align	4
is_attacked.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	is_attacked.knight_o, 32

	.type	is_attacked.rook_o,@object # @is_attacked.rook_o
	.p2align	4
is_attacked.rook_o:
	.long	12                      # 0xc
	.long	4294967284              # 0xfffffff4
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.size	is_attacked.rook_o, 16

	.type	nk_attacked.bishop_o,@object # @nk_attacked.bishop_o
	.p2align	4
nk_attacked.bishop_o:
	.long	11                      # 0xb
	.long	4294967285              # 0xfffffff5
	.long	13                      # 0xd
	.long	4294967283              # 0xfffffff3
	.size	nk_attacked.bishop_o, 16

	.type	nk_attacked.knight_o,@object # @nk_attacked.knight_o
	.p2align	4
nk_attacked.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	nk_attacked.knight_o, 32

	.type	nk_attacked.rook_o,@object # @nk_attacked.rook_o
	.p2align	4
nk_attacked.rook_o:
	.long	12                      # 0xc
	.long	4294967284              # 0xfffffff4
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.size	nk_attacked.rook_o, 16

	.type	holding,@object         # @holding
	.comm	holding,128,16
	.type	hold_hash,@object       # @hold_hash
	.comm	hold_hash,4,4
	.type	white_hand_eval,@object # @white_hand_eval
	.comm	white_hand_eval,4,4
	.type	black_hand_eval,@object # @black_hand_eval
	.comm	black_hand_eval,4,4
	.type	num_holding,@object     # @num_holding
	.comm	num_holding,8,4
	.type	userealholdings,@object # @userealholdings
	.comm	userealholdings,4,4
	.type	realholdings,@object    # @realholdings
	.comm	realholdings,255,16
	.type	drop_piece,@object      # @drop_piece
	.comm	drop_piece,4,4
	.type	.LSwitchColor.t,@object # @SwitchColor.t
	.p2align	4
.LSwitchColor.t:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	7                       # 0x7
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	12                      # 0xc
	.long	11                      # 0xb
	.size	.LSwitchColor.t, 52

	.type	.LSwitchPromoted.t,@object # @SwitchPromoted.t
	.p2align	4
.LSwitchPromoted.t:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	.LSwitchPromoted.t, 52

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"WP: %d WR: %d WB: %d WN: %d WQ: %d\n"
	.size	.L.str, 36

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"BP: %d BR: %d BB: %d BN: %d BQ: %d\n"
	.size	.L.str.1, 36

	.type	ECache,@object          # @ECache
	.comm	ECache,8,8
	.type	ECacheProbes,@object    # @ECacheProbes
	.comm	ECacheProbes,4,4
	.type	ECacheHits,@object      # @ECacheHits
	.comm	ECacheHits,4,4
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Out of memory allocating ECache.\n"
	.size	.L.str.3, 34

	.type	setup_epd_line.rankoffsets,@object # @setup_epd_line.rankoffsets
	.data
	.p2align	4
setup_epd_line.rankoffsets:
	.long	110                     # 0x6e
	.long	98                      # 0x62
	.long	86                      # 0x56
	.long	74                      # 0x4a
	.long	62                      # 0x3e
	.long	50                      # 0x32
	.long	38                      # 0x26
	.long	26                      # 0x1a
	.size	setup_epd_line.rankoffsets, 32

	.type	.L.str.4,@object        # @.str.4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4:
	.asciz	"bm"
	.size	.L.str.4, 3

	.type	.L.str.1.5,@object      # @.str.1.5
.L.str.1.5:
	.asciz	"am"
	.size	.L.str.1.5, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"No best-move or avoid-move found!"
	.size	.L.str.2, 34

	.type	.L.str.3.6,@object      # @.str.3.6
.L.str.3.6:
	.asciz	"\nName of EPD testsuite: "
	.size	.L.str.3.6, 25

	.type	.L.str.4.7,@object      # @.str.4.7
.L.str.4.7:
	.asciz	"\nTime per move (s): "
	.size	.L.str.4.7, 21

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"\n"
	.size	.L.str.5, 2

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"r"
	.size	.L.str.6, 2

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"\nNodes: %i (%0.2f%% qnodes)\n"
	.size	.L.str.7, 29

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ECacheProbes : %u   ECacheHits : %u   HitRate : %f%%\n"
	.size	.L.str.8, 54

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"TTStores : %u TTProbes : %u   TTHits : %u   HitRate : %f%%\n"
	.size	.L.str.9, 60

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"NTries : %u  NCuts : %u  CutRate : %f%%  TExt: %u\n"
	.size	.L.str.10, 51

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"Check extensions: %u  Razor drops : %u  Razor Material : %u\n"
	.size	.L.str.11, 61

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"Move ordering : %f%%\n"
	.size	.L.str.12, 22

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"Material score: %d  Eval : %d  MaxPosDiff: %d\n"
	.size	.L.str.13, 47

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"Solution found.\n"
	.size	.L.str.14, 17

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"Solution not found.\n"
	.size	.L.str.15, 21

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"Solved: %d/%d\n"
	.size	.L.str.16, 15

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"EPD: %s\n"
	.size	.L.str.17, 9

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"Searching to %d ply\n"
	.size	.L.str.18, 21

	.type	std_material,@object    # @std_material
	.data
	.globl	std_material
	.p2align	4
std_material:
	.long	0                       # 0x0
	.long	100                     # 0x64
	.long	4294967196              # 0xffffff9c
	.long	310                     # 0x136
	.long	4294966986              # 0xfffffeca
	.long	4000                    # 0xfa0
	.long	4294963296              # 0xfffff060
	.long	500                     # 0x1f4
	.long	4294966796              # 0xfffffe0c
	.long	900                     # 0x384
	.long	4294966396              # 0xfffffc7c
	.long	325                     # 0x145
	.long	4294966971              # 0xfffffebb
	.long	0                       # 0x0
	.size	std_material, 56

	.type	zh_material,@object     # @zh_material
	.globl	zh_material
	.p2align	4
zh_material:
	.long	0                       # 0x0
	.long	100                     # 0x64
	.long	4294967196              # 0xffffff9c
	.long	210                     # 0xd2
	.long	4294967086              # 0xffffff2e
	.long	4000                    # 0xfa0
	.long	4294963296              # 0xfffff060
	.long	250                     # 0xfa
	.long	4294967046              # 0xffffff06
	.long	450                     # 0x1c2
	.long	4294966846              # 0xfffffe3e
	.long	230                     # 0xe6
	.long	4294967066              # 0xffffff1a
	.long	0                       # 0x0
	.size	zh_material, 56

	.type	suicide_material,@object # @suicide_material
	.globl	suicide_material
	.p2align	4
suicide_material:
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	4294967281              # 0xfffffff1
	.long	150                     # 0x96
	.long	4294967146              # 0xffffff6a
	.long	500                     # 0x1f4
	.long	4294966796              # 0xfffffe0c
	.long	150                     # 0x96
	.long	4294967146              # 0xffffff6a
	.long	50                      # 0x32
	.long	4294967246              # 0xffffffce
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	suicide_material, 56

	.type	losers_material,@object # @losers_material
	.globl	losers_material
	.p2align	4
losers_material:
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967216              # 0xffffffb0
	.long	320                     # 0x140
	.long	4294966976              # 0xfffffec0
	.long	1000                    # 0x3e8
	.long	4294966296              # 0xfffffc18
	.long	350                     # 0x15e
	.long	4294966946              # 0xfffffea2
	.long	400                     # 0x190
	.long	4294966896              # 0xfffffe70
	.long	270                     # 0x10e
	.long	4294967026              # 0xfffffef2
	.long	0                       # 0x0
	.size	losers_material, 56

	.type	material,@object        # @material
	.bss
	.globl	material
	.p2align	4
material:
	.zero	56
	.size	material, 56

	.type	Xfile,@object           # @Xfile
	.section	.rodata,"a",@progbits
	.globl	Xfile
	.p2align	4
Xfile:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	Xfile, 576

	.type	Xrank,@object           # @Xrank
	.globl	Xrank
	.p2align	4
Xrank:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	Xrank, 576

	.type	Xdiagl,@object          # @Xdiagl
	.globl	Xdiagl
	.p2align	4
Xdiagl:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	14                      # 0xe
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	Xdiagl, 576

	.type	Xdiagr,@object          # @Xdiagr
	.globl	Xdiagr
	.p2align	4
Xdiagr:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	14                      # 0xe
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	9                       # 0x9
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	Xdiagr, 576

	.type	sqcolor,@object         # @sqcolor
	.globl	sqcolor
	.p2align	4
sqcolor:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	sqcolor, 576

	.type	pcsqbishop,@object      # @pcsqbishop
	.globl	pcsqbishop
	.p2align	4
pcsqbishop:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967286              # 0xfffffff6
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967286              # 0xfffffff6
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	5                       # 0x5
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	3                       # 0x3
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	3                       # 0x3
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	3                       # 0x3
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	3                       # 0x3
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	5                       # 0x5
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967286              # 0xfffffff6
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967286              # 0xfffffff6
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	pcsqbishop, 576

	.type	black_knight,@object    # @black_knight
	.globl	black_knight
	.p2align	4
black_knight:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	15                      # 0xf
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	15                      # 0xf
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	10                      # 0xa
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967261              # 0xffffffdd
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967261              # 0xffffffdd
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	black_knight, 576

	.type	white_knight,@object    # @white_knight
	.globl	white_knight
	.p2align	4
white_knight:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967261              # 0xffffffdd
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967261              # 0xffffffdd
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	10                      # 0xa
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	15                      # 0xf
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	15                      # 0xf
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	white_knight, 576

	.type	white_pawn,@object      # @white_pawn
	.globl	white_pawn
	.p2align	4
white_pawn:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	45                      # 0x2d
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	27                      # 0x1b
	.long	27                      # 0x1b
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	25                      # 0x19
	.long	30                      # 0x1e
	.long	30                      # 0x1e
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	white_pawn, 576

	.type	black_pawn,@object      # @black_pawn
	.globl	black_pawn
	.p2align	4
black_pawn:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	30                      # 0x1e
	.long	30                      # 0x1e
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	35                      # 0x23
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	27                      # 0x1b
	.long	27                      # 0x1b
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	7                       # 0x7
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	45                      # 0x2d
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	black_pawn, 576

	.type	white_king,@object      # @white_king
	.globl	white_king
	.p2align	4
white_king:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967196              # 0xffffff9c
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	4                       # 0x4
	.long	7                       # 0x7
	.long	4294967196              # 0xffffff9c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967046              # 0xffffff06
	.long	4294967096              # 0xffffff38
	.long	4294967146              # 0xffffff6a
	.long	4294967196              # 0xffffff9c
	.long	4294967196              # 0xffffff9c
	.long	4294967146              # 0xffffff6a
	.long	4294967096              # 0xffffff38
	.long	4294967046              # 0xffffff06
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966946              # 0xfffffea2
	.long	4294966996              # 0xfffffed4
	.long	4294966996              # 0xfffffed4
	.long	4294967046              # 0xffffff06
	.long	4294967046              # 0xffffff06
	.long	4294966996              # 0xfffffed4
	.long	4294966996              # 0xfffffed4
	.long	4294966946              # 0xfffffea2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	4294966946              # 0xfffffea2
	.long	4294966946              # 0xfffffea2
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	white_king, 576

	.type	black_king,@object      # @black_king
	.globl	black_king
	.p2align	4
black_king:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	4294966796              # 0xfffffe0c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	4294966846              # 0xfffffe3e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	4294966946              # 0xfffffea2
	.long	4294966946              # 0xfffffea2
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	4294966896              # 0xfffffe70
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294966946              # 0xfffffea2
	.long	4294966996              # 0xfffffed4
	.long	4294966996              # 0xfffffed4
	.long	4294967046              # 0xffffff06
	.long	4294967046              # 0xffffff06
	.long	4294966996              # 0xfffffed4
	.long	4294966996              # 0xfffffed4
	.long	4294966946              # 0xfffffea2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967046              # 0xffffff06
	.long	4294967096              # 0xffffff38
	.long	4294967146              # 0xffffff6a
	.long	4294967196              # 0xffffff9c
	.long	4294967196              # 0xffffff9c
	.long	4294967146              # 0xffffff6a
	.long	4294967096              # 0xffffff38
	.long	4294967046              # 0xffffff06
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967196              # 0xffffff9c
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	4                       # 0x4
	.long	7                       # 0x7
	.long	4294967196              # 0xffffff9c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	black_king, 576

	.type	black_queen,@object     # @black_queen
	.globl	black_queen
	.p2align	4
black_queen:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967236              # 0xffffffc4
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967236              # 0xffffffc4
	.long	4294967236              # 0xffffffc4
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967236              # 0xffffffc4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	black_queen, 576

	.type	white_queen,@object     # @white_queen
	.globl	white_queen
	.p2align	4
white_queen:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967236              # 0xffffffc4
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967236              # 0xffffffc4
	.long	4294967236              # 0xffffffc4
	.long	4294967256              # 0xffffffd8
	.long	4294967256              # 0xffffffd8
	.long	4294967236              # 0xffffffc4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	white_queen, 576

	.type	black_rook,@object      # @black_rook
	.globl	black_rook
	.p2align	4
black_rook:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	black_rook, 576

	.type	white_rook,@object      # @white_rook
	.globl	white_rook
	.p2align	4
white_rook:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967266              # 0xffffffe2
	.long	4294967266              # 0xffffffe2
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	white_rook, 576

	.type	upscale,@object         # @upscale
	.globl	upscale
	.p2align	4
upscale:
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	32                      # 0x20
	.long	33                      # 0x21
	.long	38                      # 0x26
	.long	39                      # 0x27
	.long	40                      # 0x28
	.long	41                      # 0x29
	.long	42                      # 0x2a
	.long	43                      # 0x2b
	.long	44                      # 0x2c
	.long	45                      # 0x2d
	.long	50                      # 0x32
	.long	51                      # 0x33
	.long	52                      # 0x34
	.long	53                      # 0x35
	.long	54                      # 0x36
	.long	55                      # 0x37
	.long	56                      # 0x38
	.long	57                      # 0x39
	.long	62                      # 0x3e
	.long	63                      # 0x3f
	.long	64                      # 0x40
	.long	65                      # 0x41
	.long	66                      # 0x42
	.long	67                      # 0x43
	.long	68                      # 0x44
	.long	69                      # 0x45
	.long	74                      # 0x4a
	.long	75                      # 0x4b
	.long	76                      # 0x4c
	.long	77                      # 0x4d
	.long	78                      # 0x4e
	.long	79                      # 0x4f
	.long	80                      # 0x50
	.long	81                      # 0x51
	.long	86                      # 0x56
	.long	87                      # 0x57
	.long	88                      # 0x58
	.long	89                      # 0x59
	.long	90                      # 0x5a
	.long	91                      # 0x5b
	.long	92                      # 0x5c
	.long	93                      # 0x5d
	.long	98                      # 0x62
	.long	99                      # 0x63
	.long	100                     # 0x64
	.long	101                     # 0x65
	.long	102                     # 0x66
	.long	103                     # 0x67
	.long	104                     # 0x68
	.long	105                     # 0x69
	.long	110                     # 0x6e
	.long	111                     # 0x6f
	.long	112                     # 0x70
	.long	113                     # 0x71
	.long	114                     # 0x72
	.long	115                     # 0x73
	.long	116                     # 0x74
	.long	117                     # 0x75
	.size	upscale, 256

	.type	pre_p_tropism,@object   # @pre_p_tropism
	.data
	.globl	pre_p_tropism
	.p2align	4
pre_p_tropism:
	.long	9999                    # 0x270f
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	9999                    # 0x270f
	.size	pre_p_tropism, 36

	.type	pre_r_tropism,@object   # @pre_r_tropism
	.globl	pre_r_tropism
	.p2align	4
pre_r_tropism:
	.long	9999                    # 0x270f
	.long	50                      # 0x32
	.long	40                      # 0x28
	.long	15                      # 0xf
	.long	5                       # 0x5
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	9999                    # 0x270f
	.size	pre_r_tropism, 36

	.type	pre_n_tropism,@object   # @pre_n_tropism
	.globl	pre_n_tropism
	.p2align	4
pre_n_tropism:
	.long	9999                    # 0x270f
	.long	50                      # 0x32
	.long	70                      # 0x46
	.long	35                      # 0x23
	.long	10                      # 0xa
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	9999                    # 0x270f
	.size	pre_n_tropism, 36

	.type	pre_q_tropism,@object   # @pre_q_tropism
	.globl	pre_q_tropism
	.p2align	4
pre_q_tropism:
	.long	9999                    # 0x270f
	.long	100                     # 0x64
	.long	60                      # 0x3c
	.long	20                      # 0x14
	.long	5                       # 0x5
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	9999                    # 0x270f
	.size	pre_q_tropism, 36

	.type	pre_b_tropism,@object   # @pre_b_tropism
	.globl	pre_b_tropism
	.p2align	4
pre_b_tropism:
	.long	9999                    # 0x270f
	.long	50                      # 0x32
	.long	25                      # 0x19
	.long	15                      # 0xf
	.long	5                       # 0x5
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	9999                    # 0x270f
	.size	pre_b_tropism, 36

	.type	ksafety_scaled,@object  # @ksafety_scaled
	.globl	ksafety_scaled
	.p2align	4
ksafety_scaled:
	.long	4294967291              # 0xfffffffb
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	80                      # 0x50
	.long	150                     # 0x96
	.long	150                     # 0x96
	.long	150                     # 0x96
	.long	4294967291              # 0xfffffffb
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	70                      # 0x46
	.long	150                     # 0x96
	.long	200                     # 0xc8
	.long	200                     # 0xc8
	.long	200                     # 0xc8
	.long	4294967291              # 0xfffffffb
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	30                      # 0x1e
	.long	100                     # 0x64
	.long	200                     # 0xc8
	.long	300                     # 0x12c
	.long	300                     # 0x12c
	.long	300                     # 0x12c
	.long	4294967286              # 0xfffffff6
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	40                      # 0x28
	.long	100                     # 0x64
	.long	200                     # 0xc8
	.long	300                     # 0x12c
	.long	300                     # 0x12c
	.long	400                     # 0x190
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	50                      # 0x32
	.long	80                      # 0x50
	.long	150                     # 0x96
	.long	300                     # 0x12c
	.long	400                     # 0x190
	.long	400                     # 0x190
	.long	500                     # 0x1f4
	.long	4294967286              # 0xfffffff6
	.long	35                      # 0x23
	.long	60                      # 0x3c
	.long	100                     # 0x64
	.long	200                     # 0xc8
	.long	250                     # 0xfa
	.long	400                     # 0x190
	.long	400                     # 0x190
	.long	500                     # 0x1f4
	.long	4294967286              # 0xfffffff6
	.long	40                      # 0x28
	.long	70                      # 0x46
	.long	110                     # 0x6e
	.long	210                     # 0xd2
	.long	300                     # 0x12c
	.long	500                     # 0x1f4
	.long	500                     # 0x1f4
	.long	600                     # 0x258
	.long	4294967286              # 0xfffffff6
	.long	45                      # 0x2d
	.long	75                      # 0x4b
	.long	125                     # 0x7d
	.long	215                     # 0xd7
	.long	300                     # 0x12c
	.long	500                     # 0x1f4
	.long	600                     # 0x258
	.long	700                     # 0x2bc
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	90                      # 0x5a
	.long	130                     # 0x82
	.long	240                     # 0xf0
	.long	350                     # 0x15e
	.long	500                     # 0x1f4
	.long	600                     # 0x258
	.long	700                     # 0x2bc
	.long	4294967281              # 0xfffffff1
	.long	60                      # 0x3c
	.long	95                      # 0x5f
	.long	145                     # 0x91
	.long	260                     # 0x104
	.long	350                     # 0x15e
	.long	500                     # 0x1f4
	.long	600                     # 0x258
	.long	700                     # 0x2bc
	.long	4294967281              # 0xfffffff1
	.long	60                      # 0x3c
	.long	100                     # 0x64
	.long	150                     # 0x96
	.long	270                     # 0x10e
	.long	350                     # 0x15e
	.long	500                     # 0x1f4
	.long	600                     # 0x258
	.long	700                     # 0x2bc
	.long	4294967281              # 0xfffffff1
	.long	60                      # 0x3c
	.long	110                     # 0x6e
	.long	160                     # 0xa0
	.long	280                     # 0x118
	.long	400                     # 0x190
	.long	600                     # 0x258
	.long	700                     # 0x2bc
	.long	800                     # 0x320
	.long	4294967276              # 0xffffffec
	.long	70                      # 0x46
	.long	115                     # 0x73
	.long	165                     # 0xa5
	.long	290                     # 0x122
	.long	400                     # 0x190
	.long	600                     # 0x258
	.long	700                     # 0x2bc
	.long	800                     # 0x320
	.long	4294967276              # 0xffffffec
	.long	80                      # 0x50
	.long	120                     # 0x78
	.long	170                     # 0xaa
	.long	300                     # 0x12c
	.long	450                     # 0x1c2
	.long	700                     # 0x2bc
	.long	800                     # 0x320
	.long	900                     # 0x384
	.long	4294967276              # 0xffffffec
	.long	80                      # 0x50
	.long	125                     # 0x7d
	.long	175                     # 0xaf
	.long	310                     # 0x136
	.long	450                     # 0x1c2
	.long	700                     # 0x2bc
	.long	800                     # 0x320
	.long	900                     # 0x384
	.size	ksafety_scaled, 540

	.type	p_tropism,@object       # @p_tropism
	.comm	p_tropism,20736,16
	.type	b_tropism,@object       # @b_tropism
	.comm	b_tropism,20736,16
	.type	n_tropism,@object       # @n_tropism
	.comm	n_tropism,20736,16
	.type	r_tropism,@object       # @r_tropism
	.comm	r_tropism,20736,16
	.type	q_tropism,@object       # @q_tropism
	.comm	q_tropism,20736,16
	.type	Material,@object        # @Material
	.comm	Material,4,4
	.type	lcentral,@object        # @lcentral
	.p2align	4
lcentral:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	30                      # 0x1e
	.long	15                      # 0xf
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	30                      # 0x1e
	.long	15                      # 0xf
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967281              # 0xfffffff1
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	lcentral, 576

	.type	l_king_mobility.king_o,@object # @l_king_mobility.king_o
	.section	.rodata,"a",@progbits
	.p2align	4
l_king_mobility.king_o:
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	4294967285              # 0xfffffff5
	.long	4294967284              # 0xfffffff4
	.long	4294967283              # 0xfffffff3
	.size	l_king_mobility.king_o, 32

	.type	l_knight_mobility.knight_o,@object # @l_knight_mobility.knight_o
	.p2align	4
l_knight_mobility.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	l_knight_mobility.knight_o, 32

	.type	kingcap,@object         # @kingcap
	.comm	kingcap,4,4
	.type	numb_moves,@object      # @numb_moves
	.comm	numb_moves,4,4
	.type	fcaptures,@object       # @fcaptures
	.comm	fcaptures,4,4
	.type	gfrom,@object           # @gfrom
	.comm	gfrom,4,4
	.type	total_moves,@object     # @total_moves
	.comm	total_moves,4,4
	.type	total_movegens,@object  # @total_movegens
	.comm	total_movegens,4,4
	.type	genfor,@object          # @genfor
	.local	genfor
	.comm	genfor,8,8
	.type	f_in_check.knight_o,@object # @f_in_check.knight_o
	.p2align	4
f_in_check.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	f_in_check.knight_o, 32

	.type	extended_in_check.knight_o,@object # @extended_in_check.knight_o
	.p2align	4
extended_in_check.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	extended_in_check.knight_o, 32

	.type	std_p_tropism,@object   # @std_p_tropism
	.globl	std_p_tropism
	.p2align	4
std_p_tropism:
	.long	9999                    # 0x270f
	.long	15                      # 0xf
	.long	10                      # 0xa
	.long	7                       # 0x7
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	std_p_tropism, 32

	.type	std_own_p_tropism,@object # @std_own_p_tropism
	.globl	std_own_p_tropism
	.p2align	4
std_own_p_tropism:
	.long	9999                    # 0x270f
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	std_own_p_tropism, 32

	.type	std_r_tropism,@object   # @std_r_tropism
	.globl	std_r_tropism
	.p2align	4
std_r_tropism:
	.long	9999                    # 0x270f
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	5                       # 0x5
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	std_r_tropism, 64

	.type	std_n_tropism,@object   # @std_n_tropism
	.globl	std_n_tropism
	.p2align	4
std_n_tropism:
	.long	9999                    # 0x270f
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	6                       # 0x6
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	std_n_tropism, 32

	.type	std_q_tropism,@object   # @std_q_tropism
	.globl	std_q_tropism
	.p2align	4
std_q_tropism:
	.long	9999                    # 0x270f
	.long	200                     # 0xc8
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	0                       # 0x0
	.size	std_q_tropism, 32

	.type	std_b_tropism,@object   # @std_b_tropism
	.globl	std_b_tropism
	.p2align	4
std_b_tropism:
	.long	9999                    # 0x270f
	.long	12                      # 0xc
	.long	7                       # 0x7
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	std_b_tropism, 32

	.type	distance,@object        # @distance
	.comm	distance,82944,16
	.type	king_locs,@object       # @king_locs
	.comm	king_locs,8,4
	.type	rookdistance,@object    # @rookdistance
	.comm	rookdistance,82944,16
	.type	wmat,@object            # @wmat
	.comm	wmat,4,4
	.type	bmat,@object            # @bmat
	.comm	bmat,4,4
	.type	maxposdiff,@object      # @maxposdiff
	.comm	maxposdiff,4,4
	.type	bishop_mobility.dir,@object # @bishop_mobility.dir
	.p2align	4
bishop_mobility.dir:
	.long	4294967283              # 0xfffffff3
	.long	4294967285              # 0xfffffff5
	.long	11                      # 0xb
	.long	13                      # 0xd
	.size	bishop_mobility.dir, 16

	.type	rook_mobility.dir,@object # @rook_mobility.dir
	.p2align	4
rook_mobility.dir:
	.long	4294967295              # 0xffffffff
	.long	1                       # 0x1
	.long	12                      # 0xc
	.long	4294967284              # 0xfffffff4
	.size	rook_mobility.dir, 16

	.type	Rook.square_d1,@object  # @Rook.square_d1
	.p2align	2
Rook.square_d1:
	.long	29                      # 0x1d
	.long	113                     # 0x71
	.size	Rook.square_d1, 8

	.type	sbishop,@object         # @sbishop
	.data
	.p2align	4
sbishop:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	8                       # 0x8
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	2                       # 0x2
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	2                       # 0x2
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	2                       # 0x2
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	2                       # 0x2
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	8                       # 0x8
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	4294967294              # 0xfffffffe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	sbishop, 576

	.type	sknight,@object         # @sknight
	.p2align	4
sknight:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	sknight, 576

	.type	.L.str.22,@object       # @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"Illegal piece detected sq=%i c=%i\n"
	.size	.L.str.22, 35

	.type	evalRoutines,@object    # @evalRoutines
	.data
	.p2align	4
evalRoutines:
	.quad	ErrorIt
	.quad	Pawn
	.quad	Knight
	.quad	King
	.quad	Rook
	.quad	Queen
	.quad	Bishop
	.size	evalRoutines, 56

	.type	swhite_pawn,@object     # @swhite_pawn
	.p2align	4
swhite_pawn:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	12                      # 0xc
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	9                       # 0x9
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	6                       # 0x6
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	14                      # 0xe
	.long	12                      # 0xc
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	24                      # 0x18
	.long	26                      # 0x1a
	.long	26                      # 0x1a
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	20                      # 0x14
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	swhite_pawn, 576

	.type	sblack_pawn,@object     # @sblack_pawn
	.p2align	4
sblack_pawn:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	24                      # 0x18
	.long	26                      # 0x1a
	.long	26                      # 0x1a
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	20                      # 0x14
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	14                      # 0xe
	.long	12                      # 0xc
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	9                       # 0x9
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	6                       # 0x6
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	12                      # 0xc
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	sblack_pawn, 576

	.type	swhite_king,@object     # @swhite_king
	.p2align	4
swhite_king:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	9                       # 0x9
	.long	14                      # 0xe
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967291              # 0xfffffffb
	.long	4294967290              # 0xfffffffa
	.long	4294967290              # 0xfffffffa
	.long	4294967290              # 0xfffffffa
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967207              # 0xffffffa7
	.long	4294967207              # 0xffffffa7
	.long	4294967207              # 0xffffffa7
	.long	4294967207              # 0xffffffa7
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	swhite_king, 576

	.type	send_king,@object       # @send_king
	.p2align	4
send_king:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	10                      # 0xa
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	10                      # 0xa
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	25                      # 0x19
	.long	50                      # 0x32
	.long	50                      # 0x32
	.long	25                      # 0x19
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.long	25                      # 0x19
	.long	50                      # 0x32
	.long	50                      # 0x32
	.long	25                      # 0x19
	.long	10                      # 0xa
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	10                      # 0xa
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	10                      # 0xa
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	4294967293              # 0xfffffffd
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	send_king, 576

	.type	sblack_king,@object     # @sblack_king
	.p2align	4
sblack_king:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967207              # 0xffffffa7
	.long	4294967207              # 0xffffffa7
	.long	4294967207              # 0xffffffa7
	.long	4294967207              # 0xffffffa7
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967241              # 0xffffffc9
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967262              # 0xffffffde
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967275              # 0xffffffeb
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967283              # 0xfffffff3
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967288              # 0xfffffff8
	.long	4294967291              # 0xfffffffb
	.long	4294967291              # 0xfffffffb
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967293              # 0xfffffffd
	.long	4294967291              # 0xfffffffb
	.long	4294967290              # 0xfffffffa
	.long	4294967290              # 0xfffffffa
	.long	4294967290              # 0xfffffffa
	.long	4294967290              # 0xfffffffa
	.long	4294967291              # 0xfffffffb
	.long	4294967293              # 0xfffffffd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	9                       # 0x9
	.long	14                      # 0xe
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	sblack_king, 576

	.type	srev_rank,@object       # @srev_rank
	.section	.rodata,"a",@progbits
	.p2align	4
srev_rank:
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	7                       # 0x7
	.long	6                       # 0x6
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	srev_rank, 36

	.type	hand_value,@object      # @hand_value
	.data
	.globl	hand_value
	.p2align	4
hand_value:
	.long	0                       # 0x0
	.long	100                     # 0x64
	.long	4294967196              # 0xffffff9c
	.long	210                     # 0xd2
	.long	4294967086              # 0xffffff2e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	250                     # 0xfa
	.long	4294967046              # 0xffffff06
	.long	450                     # 0x1c2
	.long	4294966846              # 0xfffffe3e
	.long	230                     # 0xe6
	.long	4294967066              # 0xffffff1a
	.size	hand_value, 52

	.type	std_hand_value,@object  # @std_hand_value
	.globl	std_hand_value
	.p2align	4
std_hand_value:
	.long	0                       # 0x0
	.long	100                     # 0x64
	.long	4294967196              # 0xffffff9c
	.long	210                     # 0xd2
	.long	4294967086              # 0xffffff2e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	250                     # 0xfa
	.long	4294967046              # 0xffffff06
	.long	450                     # 0x1c2
	.long	4294966846              # 0xfffffe3e
	.long	230                     # 0xe6
	.long	4294967066              # 0xffffff1a
	.size	std_hand_value, 52

	.type	must_go,@object         # @must_go
	.comm	must_go,4,4
	.type	partnerdead,@object     # @partnerdead
	.comm	partnerdead,4,4
	.type	piecedead,@object       # @piecedead
	.comm	piecedead,4,4
	.type	.L.str.27,@object       # @.str.27
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.27:
	.asciz	"tellics ptell Hello! I am Sjeng and hope you enjoy playing with me.\n"
	.size	.L.str.27, 69

	.type	.L.str.1.28,@object     # @.str.1.28
.L.str.1.28:
	.asciz	"tellics ptell For help on some commands that I understand, ptell me 'help'\n"
	.size	.L.str.1.28, 76

	.type	.L.str.2.29,@object     # @.str.2.29
.L.str.2.29:
	.asciz	"%s"
	.size	.L.str.2.29, 3

	.type	.L.str.3.30,@object     # @.str.3.30
.L.str.3.30:
	.asciz	"tellics set f5 bughouse\n"
	.size	.L.str.3.30, 25

	.type	.L.str.4.31,@object     # @.str.4.31
.L.str.4.31:
	.asciz	"tellics unseek\n"
	.size	.L.str.4.31, 16

	.type	.L.str.5.32,@object     # @.str.5.32
.L.str.5.32:
	.asciz	"tellics set f5 1=1\n"
	.size	.L.str.5.32, 20

	.type	.LHandlePtell.howmuch,@object # @HandlePtell.howmuch
	.section	.rodata,"a",@progbits
	.p2align	4
.LHandlePtell.howmuch:
	.asciz	"is...uh...what did you say?\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
	.size	.LHandlePtell.howmuch, 80

	.type	.L.str.6.33,@object     # @.str.6.33
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6.33:
	.asciz	"help"
	.size	.L.str.6.33, 5

	.type	.L.str.7.34,@object     # @.str.7.34
.L.str.7.34:
	.asciz	"tellics ptell Commands that I understand are : sit, go, fast, slow, abort, flag, +/++/+++/-/--/---{p,n,b,r,q,d,h,trades}, x, dead, formula, help.\n"
	.size	.L.str.7.34, 147

	.type	.L.str.8.35,@object     # @.str.8.35
.L.str.8.35:
	.asciz	"sorry"
	.size	.L.str.8.35, 6

	.type	.L.str.9.36,@object     # @.str.9.36
.L.str.9.36:
	.asciz	"tellics ptell Sorry, but I'm not playing a bughouse game.\n"
	.size	.L.str.9.36, 59

	.type	.L.str.10.37,@object    # @.str.10.37
.L.str.10.37:
	.asciz	"sit"
	.size	.L.str.10.37, 4

	.type	.L.str.11.38,@object    # @.str.11.38
.L.str.11.38:
	.asciz	"tellics ptell Ok, I sit next move. Tell me when to go.\n"
	.size	.L.str.11.38, 56

	.type	.L.str.12.39,@object    # @.str.12.39
.L.str.12.39:
	.asciz	"go"
	.size	.L.str.12.39, 3

	.type	.L.str.13.40,@object    # @.str.13.40
.L.str.13.40:
	.asciz	"move"
	.size	.L.str.13.40, 5

	.type	.L.str.14.41,@object    # @.str.14.41
.L.str.14.41:
	.asciz	"tellics ptell Ok, I'm moving.\n"
	.size	.L.str.14.41, 31

	.type	.L.str.15.42,@object    # @.str.15.42
.L.str.15.42:
	.asciz	"fast"
	.size	.L.str.15.42, 5

	.type	.L.str.16.43,@object    # @.str.16.43
.L.str.16.43:
	.asciz	"time"
	.size	.L.str.16.43, 5

	.type	.L.str.17.44,@object    # @.str.17.44
.L.str.17.44:
	.asciz	"tellics ptell Ok, I'm going FAST!\n"
	.size	.L.str.17.44, 35

	.type	.L.str.18.45,@object    # @.str.18.45
.L.str.18.45:
	.asciz	"slow"
	.size	.L.str.18.45, 5

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"tellics ptell Ok, moving normally.\n"
	.size	.L.str.19, 36

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"abort"
	.size	.L.str.20, 6

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"tellics ptell Requesting abort...\n"
	.size	.L.str.21, 35

	.type	.L.str.22.46,@object    # @.str.22.46
.L.str.22.46:
	.asciz	"tellics abort\n"
	.size	.L.str.22.46, 15

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"flag"
	.size	.L.str.23, 5

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"tellics ptell Flagging...\n"
	.size	.L.str.24, 27

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"tellics flag\n"
	.size	.L.str.25, 14

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"+"
	.size	.L.str.26, 2

	.type	.L.str.27.47,@object    # @.str.27.47
.L.str.27.47:
	.asciz	"trade"
	.size	.L.str.27.47, 6

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"n"
	.size	.L.str.28, 2

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"b"
	.size	.L.str.29, 2

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"p"
	.size	.L.str.30, 2

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"r"
	.size	.L.str.31, 2

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"q"
	.size	.L.str.32, 2

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"d"
	.size	.L.str.33, 2

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"h"
	.size	.L.str.34, 2

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	"tellics ptell Ok, trading is GOOD\n"
	.size	.L.str.35, 35

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"+++"
	.size	.L.str.36, 4

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"mates"
	.size	.L.str.37, 6

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"++"
	.size	.L.str.38, 3

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"is VERY good (ptell me 'x' to play normal again)"
	.size	.L.str.39, 49

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"is good (ptell me 'x' to play normal again)"
	.size	.L.str.40, 44

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"tellics ptell Ok, Knight %s\n"
	.size	.L.str.41, 29

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"tellics ptell Ok, Bishop %s\n"
	.size	.L.str.42, 29

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"tellics ptell Ok, Rook %s\n"
	.size	.L.str.43, 27

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"tellics ptell Ok, Queen %s\n"
	.size	.L.str.44, 28

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"tellics ptell Ok, Pawn %s\n"
	.size	.L.str.45, 27

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"tellics ptell Ok, Diagonal %s\n"
	.size	.L.str.46, 31

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"tellics ptell Ok, Heavy %s\n"
	.size	.L.str.47, 28

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"-"
	.size	.L.str.48, 2

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"tellics ptell Ok, trading is BAD\n"
	.size	.L.str.49, 34

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"---"
	.size	.L.str.50, 4

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"mates you (ptell me 'x' when it no longer mates you)"
	.size	.L.str.51, 53

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"--"
	.size	.L.str.52, 3

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"is VERY bad (ptell me 'x' when it is no longer bad)"
	.size	.L.str.53, 52

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"is bad (ptell me 'x' when it is no longer bad)"
	.size	.L.str.54, 47

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	"x"
	.size	.L.str.55, 2

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"mate me anymore"
	.size	.L.str.56, 16

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"never"
	.size	.L.str.57, 6

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"mind"
	.size	.L.str.58, 5

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"="
	.size	.L.str.59, 2

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"ptell me"
	.size	.L.str.60, 9

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"tellics ptell Ok, reverting to STANDARD piece values!\n"
	.size	.L.str.61, 55

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"i'll have to sit...(dead)"
	.size	.L.str.62, 26

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"dead"
	.size	.L.str.63, 5

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"i'll have to sit...(piece)"
	.size	.L.str.64, 27

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"ok"
	.size	.L.str.65, 3

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"hi"
	.size	.L.str.66, 3

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	"hello"
	.size	.L.str.67, 6

	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"tellics ptell Greetings.\n"
	.size	.L.str.68, 26

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"formula"
	.size	.L.str.69, 8

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"tellics ptell Setting formula, if you are still interrupted, complain to my operator.\n"
	.size	.L.str.70, 87

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"tellics ptell Sorry, but I don't understand that command.\n"
	.size	.L.str.71, 59

	.type	CheckBadFlow.pawnmated,@object # @CheckBadFlow.pawnmated
	.local	CheckBadFlow.pawnmated
	.comm	CheckBadFlow.pawnmated,4,4
	.type	CheckBadFlow.knightmated,@object # @CheckBadFlow.knightmated
	.local	CheckBadFlow.knightmated
	.comm	CheckBadFlow.knightmated,4,4
	.type	CheckBadFlow.bishopmated,@object # @CheckBadFlow.bishopmated
	.local	CheckBadFlow.bishopmated
	.comm	CheckBadFlow.bishopmated,4,4
	.type	CheckBadFlow.rookmated,@object # @CheckBadFlow.rookmated
	.local	CheckBadFlow.rookmated
	.comm	CheckBadFlow.rookmated,4,4
	.type	CheckBadFlow.queenmated,@object # @CheckBadFlow.queenmated
	.local	CheckBadFlow.queenmated
	.comm	CheckBadFlow.queenmated,4,4
	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	"tellics ptell p doesn't mate me anymore\n"
	.size	.L.str.72, 41

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"tellics ptell n doesn't mate me anymore\n"
	.size	.L.str.73, 41

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	"tellics ptell b doesn't mate me anymore\n"
	.size	.L.str.74, 41

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"tellics ptell r doesn't mate me anymore\n"
	.size	.L.str.75, 41

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"tellics ptell q doesn't mate me anymore\n"
	.size	.L.str.76, 41

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"tellics ptell ---p\n"
	.size	.L.str.77, 20

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"tellics ptell ---n\n"
	.size	.L.str.78, 20

	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"tellics ptell ---b\n"
	.size	.L.str.79, 20

	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	"tellics ptell ---r\n"
	.size	.L.str.80, 20

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"tellics ptell ---q\n"
	.size	.L.str.81, 20

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"tellics ptell x\n"
	.size	.L.str.82, 17

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"tellics ptell go\n"
	.size	.L.str.83, 18

	.type	bufftop,@object         # @bufftop
	.bss
	.globl	bufftop
	.p2align	2
bufftop:
	.long	0                       # 0x0
	.size	bufftop, 4

	.type	membuff,@object         # @membuff
	.comm	membuff,8,8
	.type	maxply,@object          # @maxply
	.comm	maxply,4,4
	.type	forwards,@object        # @forwards
	.comm	forwards,4,4
	.type	nodecount,@object       # @nodecount
	.comm	nodecount,4,4
	.type	frees,@object           # @frees
	.comm	frees,4,4
	.type	nodecount2,@object      # @nodecount2
	.comm	nodecount2,4,4
	.type	pn2,@object             # @pn2
	.comm	pn2,4,4
	.type	alllosers,@object       # @alllosers
	.comm	alllosers,4,4
	.type	rootlosers,@object      # @rootlosers
	.comm	rootlosers,1200,16
	.type	pn_move,@object         # @pn_move
	.comm	pn_move,24,4
	.type	iters,@object           # @iters
	.comm	iters,4,4
	.type	pn_time,@object         # @pn_time
	.comm	pn_time,4,4
	.type	forcedwin,@object       # @forcedwin
	.comm	forcedwin,4,4
	.type	kibitzed,@object        # @kibitzed
	.comm	kibitzed,4,4
	.type	pn_saver,@object        # @pn_saver
	.comm	pn_saver,24,4
	.type	.L.str.84,@object       # @.str.84
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.84:
	.asciz	"tellics kibitz Forced win!\n"
	.size	.L.str.84, 28

	.type	.L.str.1.85,@object     # @.str.1.85
.L.str.1.85:
	.asciz	"tellics kibitz Forced win! (alt)\n"
	.size	.L.str.1.85, 34

	.type	.L.str.2.86,@object     # @.str.2.86
.L.str.2.86:
	.asciz	"tellics whisper proof %d, disproof %d, %d losers, highest depth %d, primary %d, secondary %d\n"
	.size	.L.str.2.86, 94

	.type	.L.str.3.87,@object     # @.str.3.87
.L.str.3.87:
	.asciz	"tellics whisper Forced reply\n"
	.size	.L.str.3.87, 30

	.type	.L.str.4.88,@object     # @.str.4.88
.L.str.4.88:
	.asciz	"P: %d D: %d N: %d S: %d Mem: %2.2fM Iters: %d MaxDepth: %d\n"
	.size	.L.str.4.88, 60

	.type	.L.str.5.89,@object     # @.str.5.89
.L.str.5.89:
	.asciz	"tellics whisper proof %d, disproof %d, %d nodes, %d forwards, %d iters, highest depth %d\n"
	.size	.L.str.5.89, 90

	.type	.L.str.6.90,@object     # @.str.6.90
.L.str.6.90:
	.asciz	"Time : %f\n"
	.size	.L.str.6.90, 11

	.type	.L.str.7.91,@object     # @.str.7.91
.L.str.7.91:
	.asciz	"This position is WON.\n"
	.size	.L.str.7.91, 23

	.type	.L.str.8.92,@object     # @.str.8.92
.L.str.8.92:
	.asciz	"PV: "
	.size	.L.str.8.92, 5

	.type	.L.str.9.93,@object     # @.str.9.93
.L.str.9.93:
	.asciz	"%s "
	.size	.L.str.9.93, 4

	.type	.L.str.10.94,@object    # @.str.10.94
.L.str.10.94:
	.asciz	" "
	.size	.L.str.10.94, 2

	.type	.L.str.11.95,@object    # @.str.11.95
.L.str.11.95:
	.asciz	"\ntellics kibitz Forced win in %d moves.\n"
	.size	.L.str.11.95, 41

	.type	.L.str.12.96,@object    # @.str.12.96
.L.str.12.96:
	.asciz	"\n1-0 {White mates}\n"
	.size	.L.str.12.96, 20

	.type	.L.str.13.97,@object    # @.str.13.97
.L.str.13.97:
	.asciz	"\n0-1 {Black mates}\n"
	.size	.L.str.13.97, 20

	.type	.L.str.14.98,@object    # @.str.14.98
.L.str.14.98:
	.asciz	"\n"
	.size	.L.str.14.98, 2

	.type	.L.str.15.99,@object    # @.str.15.99
.L.str.15.99:
	.asciz	"This position is LOST.\n"
	.size	.L.str.15.99, 24

	.type	.L.str.16.100,@object   # @.str.16.100
.L.str.16.100:
	.asciz	"This position is UNKNOWN.\n"
	.size	.L.str.16.100, 27

	.type	.L.str.17.101,@object   # @.str.17.101
.L.str.17.101:
	.asciz	"P: %d D: %d N: %d S: %d Mem: %2.2fM Iters: %d\n"
	.size	.L.str.17.101, 47

	.type	TTSize,@object          # @TTSize
	.comm	TTSize,4,4
	.type	ECacheSize,@object      # @ECacheSize
	.comm	ECacheSize,4,4
	.type	PBSize,@object          # @PBSize
	.comm	PBSize,4,4
	.type	cfg_devscale,@object    # @cfg_devscale
	.comm	cfg_devscale,4,4
	.type	cfg_scalefac,@object    # @cfg_scalefac
	.comm	cfg_scalefac,4,4
	.type	cfg_razordrop,@object   # @cfg_razordrop
	.comm	cfg_razordrop,4,4
	.type	cfg_cutdrop,@object     # @cfg_cutdrop
	.comm	cfg_cutdrop,4,4
	.type	cfg_futprune,@object    # @cfg_futprune
	.comm	cfg_futprune,4,4
	.type	cfg_smarteval,@object   # @cfg_smarteval
	.comm	cfg_smarteval,4,4
	.type	cfg_attackeval,@object  # @cfg_attackeval
	.comm	cfg_attackeval,4,4
	.type	cfg_onerep,@object      # @cfg_onerep
	.comm	cfg_onerep,4,4
	.type	cfg_recap,@object       # @cfg_recap
	.comm	cfg_recap,4,4
	.type	havercfile,@object      # @havercfile
	.comm	havercfile,4,4
	.type	rcfile,@object          # @rcfile
	.comm	rcfile,8,8
	.type	line,@object            # @line
	.comm	line,256,16
	.type	cfg_booklearn,@object   # @cfg_booklearn
	.comm	cfg_booklearn,4,4
	.type	cfg_ksafety,@object     # @cfg_ksafety
	.comm	cfg_ksafety,540,16
	.type	cfg_tropism,@object     # @cfg_tropism
	.comm	cfg_tropism,140,16
	.type	.L.str.112,@object      # @.str.112
.L.str.112:
	.asciz	"%u"
	.size	.L.str.112, 3

	.type	rootnodecount,@object   # @rootnodecount
	.comm	rootnodecount,2048,16
	.type	failed,@object          # @failed
	.comm	failed,4,4
	.type	extendedtime,@object    # @extendedtime
	.comm	extendedtime,4,4
	.type	checks,@object          # @checks
	.comm	checks,1200,16
	.type	singular,@object        # @singular
	.comm	singular,1200,16
	.type	recaps,@object          # @recaps
	.comm	recaps,1200,16
	.type	ext_recap,@object       # @ext_recap
	.comm	ext_recap,4,4
	.type	ext_onerep,@object      # @ext_onerep
	.comm	ext_onerep,4,4
	.type	razor_drop,@object      # @razor_drop
	.comm	razor_drop,4,4
	.type	drop_cuts,@object       # @drop_cuts
	.comm	drop_cuts,4,4
	.type	razor_material,@object  # @razor_material
	.comm	razor_material,4,4
	.type	FHF,@object             # @FHF
	.comm	FHF,4,4
	.type	FH,@object              # @FH
	.comm	FH,4,4
	.type	legals,@object          # @legals
	.comm	legals,4,4
	.type	movetotal,@object       # @movetotal
	.comm	movetotal,4,4
	.type	moveleft,@object        # @moveleft
	.comm	moveleft,4,4
	.type	searching_move,@object  # @searching_move
	.comm	searching_move,20,16
	.type	bestmovenum,@object     # @bestmovenum
	.comm	bestmovenum,4,4
	.type	true_i_depth,@object    # @true_i_depth
	.comm	true_i_depth,1,1
	.type	postpv,@object          # @postpv
	.comm	postpv,256,16
	.type	s_threat,@object        # @s_threat
	.comm	s_threat,4,4
	.type	tradefreely,@object     # @tradefreely
	.comm	tradefreely,4,4
	.type	ugly_ep_hack,@object    # @ugly_ep_hack
	.comm	ugly_ep_hack,4,4
	.type	.L.str.123,@object      # @.str.123
.L.str.123:
	.asciz	"Extended from %d to %d, time left %d\n"
	.size	.L.str.123, 38

	.type	search.rc_index,@object # @search.rc_index
	.section	.rodata,"a",@progbits
	.p2align	4
search.rc_index:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	0                       # 0x0
	.size	search.rc_index, 56

	.type	.L.str.1.126,@object    # @.str.1.126
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.126:
	.asciz	"Opening phase.\n"
	.size	.L.str.1.126, 16

	.type	.L.str.2.127,@object    # @.str.2.127
.L.str.2.127:
	.asciz	"Middlegame phase.\n"
	.size	.L.str.2.127, 19

	.type	.L.str.3.128,@object    # @.str.3.128
.L.str.3.128:
	.asciz	"Endgame phase.\n"
	.size	.L.str.3.128, 16

	.type	.L.str.4.129,@object    # @.str.4.129
.L.str.4.129:
	.asciz	"Time for move : %d\n"
	.size	.L.str.4.129, 20

	.type	.L.str.5.130,@object    # @.str.5.130
.L.str.5.130:
	.asciz	"tellics whisper %d restart(s), ended up with %s\n"
	.size	.L.str.5.130, 49

	.type	.L.str.6.131,@object    # @.str.6.131
.L.str.6.131:
	.asciz	"tellics kibitz Mate in %d\n"
	.size	.L.str.6.131, 27

	.type	.L.str.7.132,@object    # @.str.7.132
.L.str.7.132:
	.asciz	"tellics ptell Mate in %d, give him no more pieces.\n"
	.size	.L.str.7.132, 52

	.type	.L.str.8.133,@object    # @.str.8.133
.L.str.8.133:
	.asciz	"tellics ptell You can trade freely.\n"
	.size	.L.str.8.133, 37

	.type	.L.str.9.134,@object    # @.str.9.134
.L.str.9.134:
	.asciz	"tellics ptell ---trades\n"
	.size	.L.str.9.134, 25

	.type	.L.str.10.135,@object   # @.str.10.135
.L.str.10.135:
	.asciz	"tellics kibitz Both players dead...resigning...\n"
	.size	.L.str.10.135, 49

	.type	.L.str.11.136,@object   # @.str.11.136
.L.str.11.136:
	.asciz	"tellics resign\n"
	.size	.L.str.11.136, 16

	.type	.L.str.12.137,@object   # @.str.12.137
.L.str.12.137:
	.asciz	"tellics ptell I am forcedly mated (dead). Tell me 'go' to start moving into it.\n"
	.size	.L.str.12.137, 81

	.type	.L.str.13.138,@object   # @.str.13.138
.L.str.13.138:
	.asciz	"tellics ptell I'll have to sit...(lose piece that mates you)\n"
	.size	.L.str.13.138, 62

	.type	.L.str.14.139,@object   # @.str.14.139
.L.str.14.139:
	.asciz	"\n"
	.size	.L.str.14.139, 2

	.type	see_num_attackers,@object # @see_num_attackers
	.comm	see_num_attackers,8,4
	.type	see_attackers,@object   # @see_attackers
	.comm	see_attackers,256,16
	.type	setup_attackers.rook_o,@object # @setup_attackers.rook_o
	.section	.rodata,"a",@progbits
	.p2align	4
setup_attackers.rook_o:
	.long	12                      # 0xc
	.long	4294967284              # 0xfffffff4
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.size	setup_attackers.rook_o, 16

	.type	setup_attackers.bishop_o,@object # @setup_attackers.bishop_o
	.p2align	4
setup_attackers.bishop_o:
	.long	11                      # 0xb
	.long	4294967285              # 0xfffffff5
	.long	13                      # 0xd
	.long	4294967283              # 0xfffffff3
	.size	setup_attackers.bishop_o, 16

	.type	setup_attackers.knight_o,@object # @setup_attackers.knight_o
	.p2align	4
setup_attackers.knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	setup_attackers.knight_o, 32

	.type	scentral,@object        # @scentral
	.data
	.p2align	4
scentral:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	2                       # 0x2
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	2                       # 0x2
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	7                       # 0x7
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	7                       # 0x7
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	25                      # 0x19
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	2                       # 0x2
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	2                       # 0x2
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	5                       # 0x5
	.long	5                       # 0x5
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967286              # 0xfffffff6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967276              # 0xffffffec
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967286              # 0xfffffff6
	.long	4294967276              # 0xffffffec
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	scentral, 576

	.type	king_o,@object          # @king_o
	.section	.rodata,"a",@progbits
	.p2align	4
king_o:
	.long	13                      # 0xd
	.long	12                      # 0xc
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	4294967295              # 0xffffffff
	.long	4294967285              # 0xfffffff5
	.long	4294967284              # 0xfffffff4
	.long	4294967283              # 0xfffffff3
	.size	king_o, 32

	.type	knight_o,@object        # @knight_o
	.p2align	4
knight_o:
	.long	10                      # 0xa
	.long	4294967286              # 0xfffffff6
	.long	14                      # 0xe
	.long	4294967282              # 0xfffffff2
	.long	23                      # 0x17
	.long	4294967273              # 0xffffffe9
	.long	25                      # 0x19
	.long	4294967271              # 0xffffffe7
	.size	knight_o, 32

	.type	divider,@object         # @divider
	.data
	.globl	divider
	.p2align	4
divider:
	.asciz	"-------------------------------------------------"
	.size	divider, 50

	.type	dummy,@object           # @dummy
	.bss
	.globl	dummy
	.p2align	2
dummy:
	.zero	24
	.size	dummy, 24

	.type	Variant,@object         # @Variant
	.comm	Variant,4,4
	.type	bookidx,@object         # @bookidx
	.comm	bookidx,4,4
	.type	ply,@object             # @ply
	.comm	ply,4,4
	.type	moves_to_tc,@object     # @moves_to_tc
	.comm	moves_to_tc,4,4
	.type	min_per_game,@object    # @min_per_game
	.comm	min_per_game,4,4
	.type	time_left,@object       # @time_left
	.comm	time_left,4,4
	.type	opp_rating,@object      # @opp_rating
	.comm	opp_rating,4,4
	.type	my_rating,@object       # @my_rating
	.comm	my_rating,4,4
	.type	maxdepth,@object        # @maxdepth
	.comm	maxdepth,4,4
	.type	xb_mode,@object         # @xb_mode
	.comm	xb_mode,4,4
	.type	comp_color,@object      # @comp_color
	.comm	comp_color,4,4
	.type	is_pondering,@object    # @is_pondering
	.comm	is_pondering,4,4
	.type	allow_pondering,@object # @allow_pondering
	.comm	allow_pondering,4,4
	.type	is_analyzing,@object    # @is_analyzing
	.comm	is_analyzing,4,4
	.type	have_partner,@object    # @have_partner
	.comm	have_partner,4,4
	.type	must_sit,@object        # @must_sit
	.comm	must_sit,4,4
	.type	go_fast,@object         # @go_fast
	.comm	go_fast,4,4
	.type	fixed_time,@object      # @fixed_time
	.comm	fixed_time,4,4
	.type	phase,@object           # @phase
	.comm	phase,4,4
	.type	root_to_move,@object    # @root_to_move
	.comm	root_to_move,4,4
	.type	move_number,@object     # @move_number
	.comm	move_number,4,4
	.type	hash_history,@object    # @hash_history
	.comm	hash_history,2400,16
	.type	white_to_move,@object   # @white_to_move
	.comm	white_to_move,4,4
	.type	result,@object          # @result
	.comm	result,4,4
	.type	path_x,@object          # @path_x
	.comm	path_x,4800,16
	.type	fifty,@object           # @fifty
	.comm	fifty,4,4
	.type	book_ply,@object        # @book_ply
	.comm	book_ply,4,4
	.type	opening_history,@object # @opening_history
	.comm	opening_history,256,16
	.type	nodes,@object           # @nodes
	.comm	nodes,4,4
	.type	qnodes,@object          # @qnodes
	.comm	qnodes,4,4
	.type	NTries,@object          # @NTries
	.comm	NTries,4,4
	.type	NCuts,@object           # @NCuts
	.comm	NCuts,4,4
	.type	TExt,@object            # @TExt
	.comm	TExt,4,4
	.type	ext_check,@object       # @ext_check
	.comm	ext_check,4,4
	.type	time_for_move,@object   # @time_for_move
	.comm	time_for_move,4,4
	.type	raw_nodes,@object       # @raw_nodes
	.comm	raw_nodes,4,4
	.type	setcode,@object         # @setcode
	.comm	setcode,30,16
	.type	post,@object            # @post
	.comm	post,4,4
	.type	opp_time,@object        # @opp_time
	.comm	opp_time,4,4
	.type	sec_per_game,@object    # @sec_per_game
	.comm	sec_per_game,4,4
	.type	inc,@object             # @inc
	.comm	inc,4,4
	.type	time_cushion,@object    # @time_cushion
	.comm	time_cushion,4,4
	.type	Giveaway,@object        # @Giveaway
	.comm	Giveaway,4,4
	.type	wking_loc,@object       # @wking_loc
	.comm	wking_loc,4,4
	.type	white_castled,@object   # @white_castled
	.comm	white_castled,4,4
	.type	bking_loc,@object       # @bking_loc
	.comm	bking_loc,4,4
	.type	black_castled,@object   # @black_castled
	.comm	black_castled,4,4
	.type	ep_square,@object       # @ep_square
	.comm	ep_square,4,4
	.type	start_time,@object      # @start_time
	.comm	start_time,8,8
	.type	board,@object           # @board
	.comm	board,576,16
	.type	moved,@object           # @moved
	.comm	moved,576,16
	.type	pv_length,@object       # @pv_length
	.comm	pv_length,1200,16
	.type	pieces,@object          # @pieces
	.comm	pieces,248,16
	.type	squares,@object         # @squares
	.comm	squares,576,16
	.type	num_pieces,@object      # @num_pieces
	.comm	num_pieces,4,4
	.type	i_depth,@object         # @i_depth
	.comm	i_depth,4,4
	.type	piece_count,@object     # @piece_count
	.comm	piece_count,4,4
	.type	killer_scores,@object   # @killer_scores
	.comm	killer_scores,1200,16
	.type	killer_scores2,@object  # @killer_scores2
	.comm	killer_scores2,1200,16
	.type	killer_scores3,@object  # @killer_scores3
	.comm	killer_scores3,1200,16
	.type	cur_score,@object       # @cur_score
	.comm	cur_score,4,4
	.type	history_h,@object       # @history_h
	.comm	history_h,82944,16
	.type	captures,@object        # @captures
	.comm	captures,4,4
	.type	searching_pv,@object    # @searching_pv
	.comm	searching_pv,4,4
	.type	time_exit,@object       # @time_exit
	.comm	time_exit,4,4
	.type	time_failure,@object    # @time_failure
	.comm	time_failure,4,4
	.type	pv,@object              # @pv
	.comm	pv,2160000,16
	.type	killer1,@object         # @killer1
	.comm	killer1,7200,16
	.type	killer2,@object         # @killer2
	.comm	killer2,7200,16
	.type	killer3,@object         # @killer3
	.comm	killer3,7200,16
	.type	path,@object            # @path
	.comm	path,7200,16
	.type	is_promoted,@object     # @is_promoted
	.comm	is_promoted,248,16
	.type	PVS,@object             # @PVS
	.comm	PVS,4,4
	.type	FULL,@object            # @FULL
	.comm	FULL,4,4
	.type	PVSF,@object            # @PVSF
	.comm	PVSF,4,4
	.type	my_partner,@object      # @my_partner
	.comm	my_partner,256,16
	.type	use_book,@object        # @use_book
	.comm	use_book,4,4
	.type	.L.str.280,@object      # @.str.280
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.280:
	.asciz	"SPEC Workload\n"
	.size	.L.str.280, 15

	.type	.L.str.1.281,@object    # @.str.1.281
.L.str.1.281:
	.asciz	"\nNodes: %i (%0.2f%% qnodes)\n"
	.size	.L.str.1.281, 29

	.type	.L.str.2.282,@object    # @.str.2.282
.L.str.2.282:
	.asciz	"ECacheProbes : %u   ECacheHits : %u   HitRate : %f%%\n"
	.size	.L.str.2.282, 54

	.type	.L.str.3.283,@object    # @.str.3.283
.L.str.3.283:
	.asciz	"TTStores : %u TTProbes : %u   TTHits : %u   HitRate : %f%%\n"
	.size	.L.str.3.283, 60

	.type	.L.str.4.284,@object    # @.str.4.284
.L.str.4.284:
	.asciz	"NTries : %u  NCuts : %u  CutRate : %f%%  TExt: %u\n"
	.size	.L.str.4.284, 51

	.type	.L.str.5.285,@object    # @.str.5.285
.L.str.5.285:
	.asciz	"Check extensions: %u  Razor drops : %u  Razor Material : %u\n"
	.size	.L.str.5.285, 61

	.type	.L.str.6.286,@object    # @.str.6.286
.L.str.6.286:
	.asciz	"Move ordering : %f%%\n"
	.size	.L.str.6.286, 22

	.type	.L.str.7.287,@object    # @.str.7.287
.L.str.7.287:
	.asciz	"Material score: %d   Eval : %d  MaxPosDiff: %d  White hand: %d  Black hand : %d\n"
	.size	.L.str.7.287, 81

	.type	.L.str.8.288,@object    # @.str.8.288
.L.str.8.288:
	.asciz	"Hash : %X  HoldHash : %X\n"
	.size	.L.str.8.288, 26

	.type	.L.str.9.289,@object    # @.str.9.289
.L.str.9.289:
	.asciz	"move %s\n"
	.size	.L.str.9.289, 9

	.type	.L.str.10.290,@object   # @.str.10.290
.L.str.10.290:
	.asciz	"\n%s\n"
	.size	.L.str.10.290, 5

	.type	.L.str.11.291,@object   # @.str.11.291
.L.str.11.291:
	.asciz	"0-1 {Black Mates}\n"
	.size	.L.str.11.291, 19

	.type	.L.str.12.292,@object   # @.str.12.292
.L.str.12.292:
	.asciz	"1-0 {White Mates}\n"
	.size	.L.str.12.292, 19

	.type	.L.str.13.293,@object   # @.str.13.293
.L.str.13.293:
	.asciz	"1/2-1/2 {Fifty move rule}\n"
	.size	.L.str.13.293, 27

	.type	.L.str.14.294,@object   # @.str.14.294
.L.str.14.294:
	.asciz	"1/2-1/2 {3 fold repetition}\n"
	.size	.L.str.14.294, 29

	.type	.L.str.15.295,@object   # @.str.15.295
.L.str.15.295:
	.asciz	"1/2-1/2 {Draw}\n"
	.size	.L.str.15.295, 16

	.type	.L.str.16.296,@object   # @.str.16.296
.L.str.16.296:
	.asciz	"\n"
	.size	.L.str.16.296, 2

	.type	.L.str.17.297,@object   # @.str.17.297
.L.str.17.297:
	.asciz	"Sjeng: "
	.size	.L.str.17.297, 8

	.type	.L.str.18.298,@object   # @.str.18.298
.L.str.18.298:
	.asciz	"Illegal move: %s\n"
	.size	.L.str.18.298, 18

	.type	.L.str.19.299,@object   # @.str.19.299
.L.str.19.299:
	.asciz	"setboard"
	.size	.L.str.19.299, 9

	.type	.L.str.20.300,@object   # @.str.20.300
.L.str.20.300:
	.asciz	"quit"
	.size	.L.str.20.300, 5

	.type	.L.str.21.301,@object   # @.str.21.301
.L.str.21.301:
	.asciz	"exit"
	.size	.L.str.21.301, 5

	.type	.L.str.22.302,@object   # @.str.22.302
.L.str.22.302:
	.asciz	"diagram"
	.size	.L.str.22.302, 8

	.type	.L.str.23.303,@object   # @.str.23.303
.L.str.23.303:
	.asciz	"d"
	.size	.L.str.23.303, 2

	.type	.L.str.24.304,@object   # @.str.24.304
.L.str.24.304:
	.asciz	"perft"
	.size	.L.str.24.304, 6

	.type	.L.str.25.305,@object   # @.str.25.305
.L.str.25.305:
	.asciz	"%d"
	.size	.L.str.25.305, 3

	.type	.L.str.26.306,@object   # @.str.26.306
.L.str.26.306:
	.asciz	"Raw nodes for depth %d: %i\n"
	.size	.L.str.26.306, 28

	.type	.L.str.27.307,@object   # @.str.27.307
.L.str.27.307:
	.asciz	"Time : %.2f\n"
	.size	.L.str.27.307, 13

	.type	.L.str.28.308,@object   # @.str.28.308
.L.str.28.308:
	.asciz	"new"
	.size	.L.str.28.308, 4

	.type	.L.str.29.309,@object   # @.str.29.309
.L.str.29.309:
	.asciz	"tellics set 1 Sjeng SPEC 1.0 (SPEC/%s)\n"
	.size	.L.str.29.309, 40

	.type	.L.str.30.310,@object   # @.str.30.310
.L.str.30.310:
	.asciz	"xboard"
	.size	.L.str.30.310, 7

	.type	.L.str.31.311,@object   # @.str.31.311
.L.str.31.311:
	.asciz	"tellics set f5 1=1\n"
	.size	.L.str.31.311, 20

	.type	.L.str.32.312,@object   # @.str.32.312
.L.str.32.312:
	.asciz	"nodes"
	.size	.L.str.32.312, 6

	.type	.L.str.33.313,@object   # @.str.33.313
.L.str.33.313:
	.asciz	"Number of nodes: %i (%0.2f%% qnodes)\n"
	.size	.L.str.33.313, 38

	.type	.L.str.34.314,@object   # @.str.34.314
.L.str.34.314:
	.asciz	"post"
	.size	.L.str.34.314, 5

	.type	.L.str.35.315,@object   # @.str.35.315
.L.str.35.315:
	.asciz	"nopost"
	.size	.L.str.35.315, 7

	.type	.L.str.36.316,@object   # @.str.36.316
.L.str.36.316:
	.asciz	"random"
	.size	.L.str.36.316, 7

	.type	.L.str.37.317,@object   # @.str.37.317
.L.str.37.317:
	.asciz	"hard"
	.size	.L.str.37.317, 5

	.type	.L.str.38.318,@object   # @.str.38.318
.L.str.38.318:
	.asciz	"easy"
	.size	.L.str.38.318, 5

	.type	.L.str.39.319,@object   # @.str.39.319
.L.str.39.319:
	.asciz	"?"
	.size	.L.str.39.319, 2

	.type	.L.str.40.320,@object   # @.str.40.320
.L.str.40.320:
	.asciz	"white"
	.size	.L.str.40.320, 6

	.type	.L.str.41.321,@object   # @.str.41.321
.L.str.41.321:
	.asciz	"black"
	.size	.L.str.41.321, 6

	.type	.L.str.42.322,@object   # @.str.42.322
.L.str.42.322:
	.asciz	"force"
	.size	.L.str.42.322, 6

	.type	.L.str.43.323,@object   # @.str.43.323
.L.str.43.323:
	.asciz	"eval"
	.size	.L.str.43.323, 5

	.type	.L.str.44.324,@object   # @.str.44.324
.L.str.44.324:
	.asciz	"Eval: %d\n"
	.size	.L.str.44.324, 10

	.type	.L.str.45.325,@object   # @.str.45.325
.L.str.45.325:
	.asciz	"go"
	.size	.L.str.45.325, 3

	.type	.L.str.46.326,@object   # @.str.46.326
.L.str.46.326:
	.asciz	"time"
	.size	.L.str.46.326, 5

	.type	.L.str.47.327,@object   # @.str.47.327
.L.str.47.327:
	.asciz	"%i"
	.size	.L.str.47.327, 3

	.type	.L.str.48.328,@object   # @.str.48.328
.L.str.48.328:
	.asciz	"otim"
	.size	.L.str.48.328, 5

	.type	.L.str.49.329,@object   # @.str.49.329
.L.str.49.329:
	.asciz	"level"
	.size	.L.str.49.329, 6

	.type	.L.str.50.330,@object   # @.str.50.330
.L.str.50.330:
	.asciz	":"
	.size	.L.str.50.330, 2

	.type	.L.str.51.331,@object   # @.str.51.331
.L.str.51.331:
	.asciz	"%i %i:%i %i"
	.size	.L.str.51.331, 12

	.type	.L.str.52.332,@object   # @.str.52.332
.L.str.52.332:
	.asciz	"%i %i %i"
	.size	.L.str.52.332, 9

	.type	.L.str.53.333,@object   # @.str.53.333
.L.str.53.333:
	.asciz	"rating"
	.size	.L.str.53.333, 7

	.type	.L.str.54.334,@object   # @.str.54.334
.L.str.54.334:
	.asciz	"%i %i"
	.size	.L.str.54.334, 6

	.type	.L.str.55.335,@object   # @.str.55.335
.L.str.55.335:
	.asciz	"holding"
	.size	.L.str.55.335, 8

	.type	.L.str.56.336,@object   # @.str.56.336
.L.str.56.336:
	.asciz	"variant"
	.size	.L.str.56.336, 8

	.type	.L.str.57.337,@object   # @.str.57.337
.L.str.57.337:
	.asciz	"normal"
	.size	.L.str.57.337, 7

	.type	.L.str.58.338,@object   # @.str.58.338
.L.str.58.338:
	.asciz	"crazyhouse"
	.size	.L.str.58.338, 11

	.type	.L.str.59.339,@object   # @.str.59.339
.L.str.59.339:
	.asciz	"bughouse"
	.size	.L.str.59.339, 9

	.type	.L.str.60.340,@object   # @.str.60.340
.L.str.60.340:
	.asciz	"suicide"
	.size	.L.str.60.340, 8

	.type	.L.str.61.341,@object   # @.str.61.341
.L.str.61.341:
	.asciz	"giveaway"
	.size	.L.str.61.341, 9

	.type	.L.str.62.342,@object   # @.str.62.342
.L.str.62.342:
	.asciz	"losers"
	.size	.L.str.62.342, 7

	.type	.L.str.63.343,@object   # @.str.63.343
.L.str.63.343:
	.asciz	"analyze"
	.size	.L.str.63.343, 8

	.type	.L.str.64.344,@object   # @.str.64.344
.L.str.64.344:
	.asciz	"undo"
	.size	.L.str.64.344, 5

	.type	.L.str.65.345,@object   # @.str.65.345
.L.str.65.345:
	.asciz	"Move number : %d\n"
	.size	.L.str.65.345, 18

	.type	.L.str.66.346,@object   # @.str.66.346
.L.str.66.346:
	.asciz	"remove"
	.size	.L.str.66.346, 7

	.type	.L.str.67.347,@object   # @.str.67.347
.L.str.67.347:
	.asciz	"edit"
	.size	.L.str.67.347, 5

	.type	.L.str.68.348,@object   # @.str.68.348
.L.str.68.348:
	.asciz	"."
	.size	.L.str.68.348, 2

	.type	.L.str.69.349,@object   # @.str.69.349
.L.str.69.349:
	.asciz	"c"
	.size	.L.str.69.349, 2

	.type	.L.str.70.350,@object   # @.str.70.350
.L.str.70.350:
	.asciz	"#"
	.size	.L.str.70.350, 2

	.type	.L.str.71.351,@object   # @.str.71.351
.L.str.71.351:
	.asciz	"partner"
	.size	.L.str.71.351, 8

	.type	.L.str.72.352,@object   # @.str.72.352
.L.str.72.352:
	.asciz	"$partner"
	.size	.L.str.72.352, 9

	.type	.L.str.73.353,@object   # @.str.73.353
.L.str.73.353:
	.asciz	"ptell"
	.size	.L.str.73.353, 6

	.type	.L.str.74.354,@object   # @.str.74.354
.L.str.74.354:
	.asciz	"test"
	.size	.L.str.74.354, 5

	.type	.L.str.75.355,@object   # @.str.75.355
.L.str.75.355:
	.asciz	"st"
	.size	.L.str.75.355, 3

	.type	.L.str.76.356,@object   # @.str.76.356
.L.str.76.356:
	.asciz	"result"
	.size	.L.str.76.356, 7

	.type	.L.str.77.357,@object   # @.str.77.357
.L.str.77.357:
	.asciz	"prove"
	.size	.L.str.77.357, 6

	.type	.L.str.78.358,@object   # @.str.78.358
.L.str.78.358:
	.asciz	"\nMax time to search (s): "
	.size	.L.str.78.358, 26

	.type	.L.str.79.359,@object   # @.str.79.359
.L.str.79.359:
	.asciz	"ping"
	.size	.L.str.79.359, 5

	.type	.L.str.80.360,@object   # @.str.80.360
.L.str.80.360:
	.asciz	"pong %d\n"
	.size	.L.str.80.360, 9

	.type	.L.str.81.361,@object   # @.str.81.361
.L.str.81.361:
	.asciz	"fritz"
	.size	.L.str.81.361, 6

	.type	.L.str.82.362,@object   # @.str.82.362
.L.str.82.362:
	.asciz	"reset"
	.size	.L.str.82.362, 6

	.type	.L.str.83.363,@object   # @.str.83.363
.L.str.83.363:
	.asciz	"sd"
	.size	.L.str.83.363, 3

	.type	.L.str.84.364,@object   # @.str.84.364
.L.str.84.364:
	.asciz	"New max depth set to: %d\n"
	.size	.L.str.84.364, 26

	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"auto"
	.size	.L.str.85, 5

	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"protover"
	.size	.L.str.86, 9

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"feature ping=0 setboard=1 playother=0 san=0 usermove=0 time=1\n"
	.size	.L.str.87, 63

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"feature draw=0 sigint=0 sigterm=0 reuse=1 analyze=0\n"
	.size	.L.str.88, 53

	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"feature myname=\"Sjeng SPEC 1.0\"\n"
	.size	.L.str.89, 33

	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"feature variants=\"normal,bughouse,crazyhouse,suicide,giveaway,losers\"\n"
	.size	.L.str.90, 71

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"feature colors=1 ics=0 name=0 pause=0 done=1\n"
	.size	.L.str.91, 46

	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"accepted"
	.size	.L.str.92, 9

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"rejected"
	.size	.L.str.93, 9

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"Interface does not support a required feature...expect trouble.\n"
	.size	.L.str.94, 65

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"help"
	.size	.L.str.95, 5

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"\n%s\n\n"
	.size	.L.str.96, 6

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"diagram/d:       toggle diagram display\n"
	.size	.L.str.97, 41

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"exit/quit:       terminate Sjeng\n"
	.size	.L.str.98, 34

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"go:              make Sjeng play the side to move\n"
	.size	.L.str.99, 51

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"new:             start a new game\n"
	.size	.L.str.100, 35

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	"level <x>:       the xboard style command to set time\n"
	.size	.L.str.101, 55

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"  <x> should be in the form: <a> <b> <c> where:\n"
	.size	.L.str.102, 49

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"  a -> moves to TC (0 if using an ICS style TC)\n"
	.size	.L.str.103, 49

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"  b -> minutes per game\n"
	.size	.L.str.104, 25

	.type	.L.str.105,@object      # @.str.105
.L.str.105:
	.asciz	"  c -> increment in seconds\n"
	.size	.L.str.105, 29

	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"nodes:           outputs the number of nodes searched\n"
	.size	.L.str.106, 55

	.type	.L.str.107,@object      # @.str.107
.L.str.107:
	.asciz	"perft <x>:       compute raw nodes to depth x\n"
	.size	.L.str.107, 47

	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"post:            toggles thinking output\n"
	.size	.L.str.108, 42

	.type	.L.str.109,@object      # @.str.109
.L.str.109:
	.asciz	"xboard:          put Sjeng into xboard mode\n"
	.size	.L.str.109, 45

	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"test:            run an EPD testsuite\n"
	.size	.L.str.110, 39

	.type	.L.str.111,@object      # @.str.111
.L.str.111:
	.asciz	"speed:           test movegen and evaluation speed\n"
	.size	.L.str.111, 52

	.type	.L.str.112.365,@object  # @.str.112.365
.L.str.112.365:
	.asciz	"proof:           try to prove or disprove the current pos\n"
	.size	.L.str.112.365, 59

	.type	.L.str.113,@object      # @.str.113
.L.str.113:
	.asciz	"sd <x>:          limit thinking to depth x\n"
	.size	.L.str.113, 44

	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"st <x>:          limit thinking to x centiseconds\n"
	.size	.L.str.114, 51

	.type	.L.str.115,@object      # @.str.115
.L.str.115:
	.asciz	"setboard <FEN>:  set board to a specified FEN string\n"
	.size	.L.str.115, 54

	.type	.L.str.116,@object      # @.str.116
.L.str.116:
	.asciz	"undo:            back up a half move\n"
	.size	.L.str.116, 38

	.type	.L.str.117,@object      # @.str.117
.L.str.117:
	.asciz	"remove:          back up a full move\n"
	.size	.L.str.117, 38

	.type	.L.str.118,@object      # @.str.118
.L.str.118:
	.asciz	"force:           disable computer moving\n"
	.size	.L.str.118, 42

	.type	.L.str.119,@object      # @.str.119
.L.str.119:
	.asciz	"auto:            computer plays both sides\n"
	.size	.L.str.119, 44

	.type	DP_TTable,@object       # @DP_TTable
	.comm	DP_TTable,8,8
	.type	AS_TTable,@object       # @AS_TTable
	.comm	AS_TTable,8,8
	.type	QS_TTable,@object       # @QS_TTable
	.comm	QS_TTable,8,8
	.type	zobrist,@object         # @zobrist
	.comm	zobrist,8064,16
	.type	hash,@object            # @hash
	.comm	hash,4,4
	.type	TTStores,@object        # @TTStores
	.comm	TTStores,4,4
	.type	TTProbes,@object        # @TTProbes
	.comm	TTProbes,4,4
	.type	TTHits,@object          # @TTHits
	.comm	TTHits,4,4
	.type	.L.str.392,@object      # @.str.392
.L.str.392:
	.asciz	"Out of memory allocating hashtables.\n"
	.size	.L.str.392, 38

	.type	left,@object            # @left
	.data
	.globl	left
	.p2align	2
left:
	.long	4294967295              # 0xffffffff
	.size	left, 4

	.type	comp_to_san.type_to_char,@object # @comp_to_san.type_to_char
	.section	.rodata,"a",@progbits
	.p2align	4
comp_to_san.type_to_char:
	.long	70                      # 0x46
	.long	80                      # 0x50
	.long	80                      # 0x50
	.long	78                      # 0x4e
	.long	78                      # 0x4e
	.long	75                      # 0x4b
	.long	75                      # 0x4b
	.long	82                      # 0x52
	.long	82                      # 0x52
	.long	81                      # 0x51
	.long	81                      # 0x51
	.long	66                      # 0x42
	.long	66                      # 0x42
	.long	69                      # 0x45
	.size	comp_to_san.type_to_char, 56

	.type	.L.str.399,@object      # @.str.399
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.399:
	.asciz	"%c@%c%d"
	.size	.L.str.399, 8

	.type	.L.str.1.400,@object    # @.str.1.400
.L.str.1.400:
	.asciz	"%c%d"
	.size	.L.str.1.400, 5

	.type	.L.str.2.401,@object    # @.str.2.401
.L.str.2.401:
	.asciz	"%c%d=%c"
	.size	.L.str.2.401, 8

	.type	.L.str.3.402,@object    # @.str.3.402
.L.str.3.402:
	.asciz	"%cx%c%d"
	.size	.L.str.3.402, 8

	.type	.L.str.4.403,@object    # @.str.4.403
.L.str.4.403:
	.asciz	"%cx%c%d=%c"
	.size	.L.str.4.403, 11

	.type	.L.str.5.404,@object    # @.str.5.404
.L.str.5.404:
	.asciz	"O-O"
	.size	.L.str.5.404, 4

	.type	.L.str.6.405,@object    # @.str.6.405
.L.str.6.405:
	.asciz	"O-O-O"
	.size	.L.str.6.405, 6

	.type	.L.str.7.406,@object    # @.str.7.406
.L.str.7.406:
	.asciz	"%c%c%c%d"
	.size	.L.str.7.406, 9

	.type	.L.str.8.407,@object    # @.str.8.407
.L.str.8.407:
	.asciz	"%c%d%c%d"
	.size	.L.str.8.407, 9

	.type	.L.str.9.408,@object    # @.str.9.408
.L.str.9.408:
	.asciz	"%c%cx%c%d"
	.size	.L.str.9.408, 10

	.type	.L.str.10.409,@object   # @.str.10.409
.L.str.10.409:
	.asciz	"%c%dx%c%d"
	.size	.L.str.10.409, 10

	.type	.L.str.11.410,@object   # @.str.11.410
.L.str.11.410:
	.asciz	"%c%c%d"
	.size	.L.str.11.410, 7

	.type	.L.str.12.411,@object   # @.str.12.411
.L.str.12.411:
	.asciz	"illg"
	.size	.L.str.12.411, 5

	.type	.L.str.13.412,@object   # @.str.13.412
.L.str.13.412:
	.asciz	"#"
	.size	.L.str.13.412, 2

	.type	.L.str.14.413,@object   # @.str.14.413
.L.str.14.413:
	.asciz	"+"
	.size	.L.str.14.413, 2

	.type	comp_to_coord.type_to_char,@object # @comp_to_coord.type_to_char
	.section	.rodata,"a",@progbits
	.p2align	4
comp_to_coord.type_to_char:
	.long	70                      # 0x46
	.long	80                      # 0x50
	.long	112                     # 0x70
	.long	78                      # 0x4e
	.long	110                     # 0x6e
	.long	75                      # 0x4b
	.long	107                     # 0x6b
	.long	82                      # 0x52
	.long	114                     # 0x72
	.long	81                      # 0x51
	.long	113                     # 0x71
	.long	66                      # 0x42
	.long	98                      # 0x62
	.long	69                      # 0x45
	.size	comp_to_coord.type_to_char, 56

	.type	.L.str.15.416,@object   # @.str.15.416
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.15.416:
	.asciz	"%c%d%c%dn"
	.size	.L.str.15.416, 10

	.type	.L.str.16.417,@object   # @.str.16.417
.L.str.16.417:
	.asciz	"%c%d%c%dr"
	.size	.L.str.16.417, 10

	.type	.L.str.17.418,@object   # @.str.17.418
.L.str.17.418:
	.asciz	"%c%d%c%db"
	.size	.L.str.17.418, 10

	.type	.L.str.18.419,@object   # @.str.18.419
.L.str.18.419:
	.asciz	"%c%d%c%dk"
	.size	.L.str.18.419, 10

	.type	.L.str.19.420,@object   # @.str.19.420
.L.str.19.420:
	.asciz	"%c%d%c%dq"
	.size	.L.str.19.420, 10

	.type	.L.str.20.423,@object   # @.str.20.423
.L.str.20.423:
	.asciz	"+----+----+----+----+----+----+----+----+"
	.size	.L.str.20.423, 42

	.type	.Ldisplay_board.piece_rep,@object # @display_board.piece_rep
	.section	.rodata,"a",@progbits
	.p2align	4
.Ldisplay_board.piece_rep:
	.quad	.L.str.21.430
	.quad	.L.str.22.431
	.quad	.L.str.23.432
	.quad	.L.str.24.433
	.quad	.L.str.25.434
	.quad	.L.str.26.435
	.quad	.L.str.27.436
	.quad	.L.str.28.437
	.quad	.L.str.29.438
	.quad	.L.str.30.439
	.quad	.L.str.31.440
	.quad	.L.str.32.441
	.quad	.L.str.33.442
	.quad	.L.str.34.443
	.size	.Ldisplay_board.piece_rep, 112

	.type	.L.str.35.424,@object   # @.str.35.424
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.35.424:
	.asciz	"  %s\n"
	.size	.L.str.35.424, 6

	.type	.L.str.36.425,@object   # @.str.36.425
.L.str.36.425:
	.asciz	"%d |"
	.size	.L.str.36.425, 5

	.type	.L.str.37.426,@object   # @.str.37.426
.L.str.37.426:
	.asciz	" %s |"
	.size	.L.str.37.426, 6

	.type	.L.str.38.427,@object   # @.str.38.427
.L.str.38.427:
	.asciz	"\n  %s\n"
	.size	.L.str.38.427, 7

	.type	.L.str.39.428,@object   # @.str.39.428
.L.str.39.428:
	.asciz	"\n     a    b    c    d    e    f    g    h\n\n"
	.size	.L.str.39.428, 45

	.type	.L.str.40.429,@object   # @.str.40.429
.L.str.40.429:
	.asciz	"\n     h    g    f    e    d    c    b    a\n\n"
	.size	.L.str.40.429, 45

	.type	.L.str.21.430,@object   # @.str.21.430
.L.str.21.430:
	.asciz	"!!"
	.size	.L.str.21.430, 3

	.type	.L.str.22.431,@object   # @.str.22.431
.L.str.22.431:
	.asciz	" P"
	.size	.L.str.22.431, 3

	.type	.L.str.23.432,@object   # @.str.23.432
.L.str.23.432:
	.asciz	"*P"
	.size	.L.str.23.432, 3

	.type	.L.str.24.433,@object   # @.str.24.433
.L.str.24.433:
	.asciz	" N"
	.size	.L.str.24.433, 3

	.type	.L.str.25.434,@object   # @.str.25.434
.L.str.25.434:
	.asciz	"*N"
	.size	.L.str.25.434, 3

	.type	.L.str.26.435,@object   # @.str.26.435
.L.str.26.435:
	.asciz	" K"
	.size	.L.str.26.435, 3

	.type	.L.str.27.436,@object   # @.str.27.436
.L.str.27.436:
	.asciz	"*K"
	.size	.L.str.27.436, 3

	.type	.L.str.28.437,@object   # @.str.28.437
.L.str.28.437:
	.asciz	" R"
	.size	.L.str.28.437, 3

	.type	.L.str.29.438,@object   # @.str.29.438
.L.str.29.438:
	.asciz	"*R"
	.size	.L.str.29.438, 3

	.type	.L.str.30.439,@object   # @.str.30.439
.L.str.30.439:
	.asciz	" Q"
	.size	.L.str.30.439, 3

	.type	.L.str.31.440,@object   # @.str.31.440
.L.str.31.440:
	.asciz	"*Q"
	.size	.L.str.31.440, 3

	.type	.L.str.32.441,@object   # @.str.32.441
.L.str.32.441:
	.asciz	" B"
	.size	.L.str.32.441, 3

	.type	.L.str.33.442,@object   # @.str.33.442
.L.str.33.442:
	.asciz	"*B"
	.size	.L.str.33.442, 3

	.type	.L.str.34.443,@object   # @.str.34.443
.L.str.34.443:
	.asciz	"  "
	.size	.L.str.34.443, 3

	.type	.Linit_game.init_board,@object # @init_game.init_board
	.section	.rodata,"a",@progbits
	.p2align	4
.Linit_game.init_board:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	7                       # 0x7
	.long	3                       # 0x3
	.long	11                      # 0xb
	.long	9                       # 0x9
	.long	5                       # 0x5
	.long	11                      # 0xb
	.long	3                       # 0x3
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	4                       # 0x4
	.long	12                      # 0xc
	.long	10                      # 0xa
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	.Linit_game.init_board, 576

	.type	.L.str.41.450,@object   # @.str.41.450
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.41.450:
	.asciz	"\n\nPlease enter the desired depth for perft():\n"
	.size	.L.str.41.450, 47

	.type	.L.str.42.453,@object   # @.str.42.453
.L.str.42.453:
	.asciz	"\n\nRaw nodes for depth %d: %i\n\n"
	.size	.L.str.42.453, 31

	.type	.L.str.43.454,@object   # @.str.43.454
.L.str.43.454:
	.asciz	"\nPlease input a move/command:\n"
	.size	.L.str.43.454, 31

	.type	.L.str.44.455,@object   # @.str.44.455
.L.str.44.455:
	.asciz	"exit"
	.size	.L.str.44.455, 5

	.type	.L.str.45.456,@object   # @.str.45.456
.L.str.45.456:
	.asciz	"quit"
	.size	.L.str.45.456, 5

	.type	.L.str.46.459,@object   # @.str.46.459
.L.str.46.459:
	.asciz	"\nIllegal move/command!  Please input a new move/command:\n"
	.size	.L.str.46.459, 58

	.type	.L.str.47.460,@object   # @.str.47.460
.L.str.47.460:
	.asciz	"<"
	.size	.L.str.47.460, 2

	.type	.L.str.48.461,@object   # @.str.48.461
.L.str.48.461:
	.asciz	"> "
	.size	.L.str.48.461, 3

	.type	.L.str.49.464,@object   # @.str.49.464
.L.str.49.464:
	.asciz	" "
	.size	.L.str.49.464, 2

	.type	.L.str.50.471,@object   # @.str.50.471
.L.str.50.471:
	.asciz	"%2i %7i %5i %8i  "
	.size	.L.str.50.471, 18

	.type	.L.str.51.472,@object   # @.str.51.472
.L.str.51.472:
	.asciz	"%2i %c%1i.%02i %9i "
	.size	.L.str.51.472, 20

	.type	.L.str.52.473,@object   # @.str.52.473
.L.str.52.473:
	.asciz	"%s "
	.size	.L.str.52.473, 4

	.type	.L.str.53.474,@object   # @.str.53.474
.L.str.53.474:
	.asciz	"%s"
	.size	.L.str.53.474, 3

	.type	.L.str.54.475,@object   # @.str.54.475
.L.str.54.475:
	.asciz	"\n"
	.size	.L.str.54.475, 2

	.type	.L.str.55.478,@object   # @.str.55.478
.L.str.55.478:
	.asciz	"%s !"
	.size	.L.str.55.478, 5

	.type	.L.str.56.481,@object   # @.str.56.481
.L.str.56.481:
	.asciz	"%s !!"
	.size	.L.str.56.481, 6

	.type	.L.str.57.484,@object   # @.str.57.484
.L.str.57.484:
	.asciz	"%s ??"
	.size	.L.str.57.484, 6

	.type	.L.str.58.485,@object   # @.str.58.485
.L.str.58.485:
	.asciz	"stat01: %i %i %i %i %i\n"
	.size	.L.str.58.485, 24

	.type	.L.str.59.486,@object   # @.str.59.486
.L.str.59.486:
	.asciz	"stat01: %i %i %i %i %i %s\n"
	.size	.L.str.59.486, 27

	.type	.L.str.60.489,@object   # @.str.60.489
.L.str.60.489:
	.asciz	"Piece->square->piece inconsistency\n"
	.size	.L.str.60.489, 36

	.type	.L.str.61.490,@object   # @.str.61.490
.L.str.61.490:
	.asciz	"Board/Piece->square inconsistency\n"
	.size	.L.str.61.490, 35

	.type	.L.str.62.491,@object   # @.str.62.491
.L.str.62.491:
	.asciz	"Zero-ed piece inconsistency\n"
	.size	.L.str.62.491, 29

	.type	.L.str.63.492,@object   # @.str.63.492
.L.str.63.492:
	.asciz	"Empty square has piece pointer\n"
	.size	.L.str.63.492, 32

	.type	.L.str.64.493,@object   # @.str.64.493
.L.str.64.493:
	.asciz	"Filled square %d has no piece pointer\n"
	.size	.L.str.64.493, 39

	.type	.L.str.65.494,@object   # @.str.65.494
.L.str.65.494:
	.asciz	"Square->piece->square inconsistency\n"
	.size	.L.str.65.494, 37

	.type	.L.str.66.497,@object   # @.str.66.497
.L.str.66.497:
	.asciz	"\nSjeng version SPEC 1.0, Copyright (C) 2000-2005 Gian-Carlo Pascutto\n\n"
	.size	.L.str.66.497, 71

	.type	.L.str.67.500,@object   # @.str.67.500
.L.str.67.500:
	.asciz	"\nPlease enter the desired depth:\n"
	.size	.L.str.67.500, 34

	.type	.L.str.68.501,@object   # @.str.68.501
.L.str.68.501:
	.asciz	"\nDo you want tree () output?  (y/n)\n"
	.size	.L.str.68.501, 37

	.type	.L.str.69.502,@object   # @.str.69.502
.L.str.69.502:
	.asciz	"\nPlease enter the name of the output file for tree ():\n"
	.size	.L.str.69.502, 56

	.type	.L.str.70.503,@object   # @.str.70.503
.L.str.70.503:
	.asciz	"w"
	.size	.L.str.70.503, 2

	.type	.L.str.71.504,@object   # @.str.71.504
.L.str.71.504:
	.asciz	"Couldn't open file %s\n"
	.size	.L.str.71.504, 23

	.type	.L.str.72.505,@object   # @.str.72.505
.L.str.72.505:
	.asciz	"\nDo you want to output diagrams? (y/n)\n"
	.size	.L.str.72.505, 40

	.type	.L.str.73.506,@object   # @.str.73.506
.L.str.73.506:
	.asciz	"\n\n%s\nRaw nodes for depth %d: %i\n%s\n\n"
	.size	.L.str.73.506, 37

	.type	.Lreset_board.init_board,@object # @reset_board.init_board
	.section	.rodata,"a",@progbits
	.p2align	4
.Lreset_board.init_board:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	.Lreset_board.init_board, 576

	.type	state,@object           # @state
	.local	state
	.comm	state,2500,16
	.type	next,@object            # @next
	.local	next
	.comm	next,8,8

	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
