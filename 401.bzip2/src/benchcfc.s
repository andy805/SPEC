	.text
	.file	"llvm-link"
	.globl	BZ2_blockSort           # -- Begin function BZ2_blockSort
	.p2align	4, 0x90
	.type	BZ2_blockSort,@function
BZ2_blockSort:                          # @BZ2_blockSort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-29683, %ax            # imm = 0x8C0D
	xorw	%cx, %ax
	cmpw	$2, %ax
	jne	.LBB0_56
# %bb.1:                                # %BZ2_blockSort.split153
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rdi, (%r15)
	movq	(%r15), %rdx
	movq	56(%rdx), %rdx
	movq	%rdx, (%rbx)
	movq	(%r15), %rdx
	movq	64(%rdx), %rdx
	movq	%rdx, (%r10)
	movq	(%r15), %rdx
	movq	40(%rdx), %rdx
	movq	%rdx, (%rcx)
	movq	(%r15), %rdx
	movl	108(%rdx), %edx
	movl	%edx, (%r13)
	movq	(%r15), %rdx
	movl	656(%rdx), %edx
	movl	%edx, (%r14)
	movq	(%r15), %rdx
	movl	88(%rdx), %edx
	movl	%edx, (%rax)
	movl	(%r13), %edx
	movw	$2, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$10000, %edx            # imm = 0x2710
	jge	.LBB0_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$16, %ax
	jne	.LBB0_56
# %bb.3:                                # %BZ2_blockSort.split
	movq	(%r15), %rax
	movq	24(%rax), %rdi
	movq	(%r15), %rax
	movq	32(%rax), %rsi
	movq	(%rcx), %rdx
	movl	(%r13), %ecx
	movl	(%r14), %r8d
	movw	$16, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	movq	%r9, %r14
	callq	fallbackSort
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movw	$16, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	movw	$16, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB0_36
.LBB0_4:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$81, %dx
	cmpw	$83, %dx
	jne	.LBB0_56
# %bb.5:                                # %BZ2_blockSort.split103
	movl	(%r13), %edx
	addl	$34, %edx
	movl	%edx, (%r9)
	movl	(%r9), %edx
	andl	$1, %edx
	movw	$83, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	je	.LBB0_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$47, %dx
	cmpw	$124, %dx
	jne	.LBB0_56
# %bb.7:                                # %BZ2_blockSort.split107
	movl	(%r9), %edx
	addl	$1, %edx
	movl	%edx, (%r9)
	movw	$124, BasicBlockSignatureTracker
	movw	$47, RunTimeSignatureAdjuster
.LBB0_8:
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$216, %dx
	xorw	%si, %dx
	cmpw	$139, %dx
	jne	.LBB0_56
# %bb.9:                                # %BZ2_blockSort.split109
	movq	(%r10), %rdx
	movslq	(%r9), %rsi
	addq	%rsi, %rdx
	movq	%rdx, (%r8)
	movl	(%rax), %edx
	movw	$139, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %edx
	jge	.LBB0_12
# %bb.10:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$21, %dx
	cmpw	$158, %dx
	jne	.LBB0_56
# %bb.11:                               # %BZ2_blockSort.split111
	movl	$1, (%rax)
	movw	$158, BasicBlockSignatureTracker
	movw	$21, RunTimeSignatureAdjuster
.LBB0_12:
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$79, %dx
	xorw	%si, %dx
	cmpw	$196, %dx
	jne	.LBB0_56
# %bb.13:                               # %BZ2_blockSort.split113
	movl	(%rax), %edx
	movw	$196, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$100, %edx
	jle	.LBB0_16
# %bb.14:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$34, %dx
	cmpw	$230, %dx
	jne	.LBB0_56
# %bb.15:                               # %BZ2_blockSort.split115
	movl	$100, (%rax)
	movw	$230, BasicBlockSignatureTracker
	movw	$34, RunTimeSignatureAdjuster
.LBB0_16:
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$41, %dx
	xorw	%si, %dx
	cmpw	$237, %dx
	jne	.LBB0_56
# %bb.17:                               # %BZ2_blockSort.split117
	movq	%r9, -56(%rbp)          # 8-byte Spill
	movl	$3, %esi
	movl	(%r13), %edi
	movl	(%rax), %eax
	subl	$1, %eax
	cltd
	idivl	%esi
	imull	%eax, %edi
	movl	%edi, (%r12)
	movl	(%r12), %eax
	movl	%eax, (%r11)
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	movq	(%rbx), %rdi
	movq	(%r10), %rsi
	movq	(%r8), %rdx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	(%rcx), %rcx
	movl	(%r13), %r8d
	movl	(%r14), %r9d
	movw	$237, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	subq	$16, %rsp
	movq	%r11, %rbx
	movq	%r11, (%rsp)
	callq	mainSort
	addq	$16, %rsp
	movw	$237, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	movl	(%r14), %eax
	movw	$237, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB0_26
# %bb.18:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$508, %ax               # imm = 0x1FC
	cmpw	$273, %ax               # imm = 0x111
	movq	%rbx, %rsi
	jne	.LBB0_56
# %bb.19:                               # %BZ2_blockSort.split119
	movq	stderr, %rdi
	movl	(%r12), %edx
	subl	(%rsi), %edx
	movl	(%r13), %ecx
	movl	(%r12), %eax
	subl	(%rsi), %eax
	cvtsi2ssl	%eax, %xmm0
	movl	(%r13), %eax
	movw	$273, BasicBlockSignatureTracker # imm = 0x111
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB0_22
# %bb.20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$276, %ax               # imm = 0x114
	jne	.LBB0_56
# %bb.21:                               # %BZ2_blockSort.split123
	movl	$1, %r8d
	movw	$276, BasicBlockSignatureTracker # imm = 0x114
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB0_24
.LBB0_22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$281, %ax               # imm = 0x119
	jne	.LBB0_56
# %bb.23:                               # %BZ2_blockSort.split125
	movl	(%r13), %r8d
	movw	$281, BasicBlockSignatureTracker # imm = 0x119
	movw	$13, RunTimeSignatureAdjuster
.LBB0_24:
	movw	BasicBlockSignatureTracker, %si
	movw	RunTimeSignatureAdjuster, %ax
	xorw	$8, %si
	xorw	%ax, %si
	cmpw	$284, %si               # imm = 0x11C
	jne	.LBB0_56
# %bb.25:                               # %BZ2_blockSort.split127
	movabsq	$.L.str, %rsi
	cvtsi2ssl	%r8d, %xmm1
	divss	%xmm1, %xmm0
	cvtss2sd	%xmm0, %xmm0
	movb	$1, %al
	callq	fprintf
	movw	$284, BasicBlockSignatureTracker # imm = 0x11C
	movw	$497, RunTimeSignatureAdjuster # imm = 0x1F1
.LBB0_26:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$461, %ax               # imm = 0x1CD
	xorw	%cx, %ax
	cmpw	$288, %ax               # imm = 0x120
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	jne	.LBB0_56
# %bb.27:                               # %BZ2_blockSort.split121
	movl	(%rbx), %eax
	movw	$288, BasicBlockSignatureTracker # imm = 0x120
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB0_34
# %bb.28:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$290, %ax               # imm = 0x122
	jne	.LBB0_56
# %bb.29:                               # %BZ2_blockSort.split129
	movl	(%r14), %eax
	movw	$290, BasicBlockSignatureTracker # imm = 0x122
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB0_32
# %bb.30:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$314, %ax               # imm = 0x13A
	jne	.LBB0_56
# %bb.31:                               # %BZ2_blockSort.split133
	movabsq	$.L.str.1, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movw	$314, BasicBlockSignatureTracker # imm = 0x13A
	movw	$24, RunTimeSignatureAdjuster
.LBB0_32:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$126, %ax
	xorw	%dx, %ax
	cmpw	$348, %ax               # imm = 0x15C
	jne	.LBB0_56
# %bb.33:                               # %BZ2_blockSort.split135
	movq	(%r15), %rax
	movq	24(%rax), %rdi
	movq	(%r15), %rax
	movq	32(%rax), %rsi
	movq	(%rcx), %rdx
	movl	(%r13), %ecx
	movl	(%r14), %r8d
	movw	$348, BasicBlockSignatureTracker # imm = 0x15C
	movw	$332, RunTimeSignatureAdjuster # imm = 0x14C
	callq	fallbackSort
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movw	$348, BasicBlockSignatureTracker # imm = 0x15C
	movw	$332, RunTimeSignatureAdjuster # imm = 0x14C
	movw	$348, BasicBlockSignatureTracker # imm = 0x15C
	movw	$124, RunTimeSignatureAdjuster
.LBB0_34:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$79, %ax
	xorw	%cx, %ax
	cmpw	$367, %ax               # imm = 0x16F
	jne	.LBB0_56
# %bb.35:                               # %BZ2_blockSort.split131
	movw	$367, BasicBlockSignatureTracker # imm = 0x16F
	movw	$383, RunTimeSignatureAdjuster # imm = 0x17F
.LBB0_36:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$433, %ax               # imm = 0x1B1
	xorw	%cx, %ax
	cmpw	$417, %ax               # imm = 0x1A1
	jne	.LBB0_56
# %bb.37:                               # %BZ2_blockSort.split105
	movq	(%r15), %rax
	movl	$-1, 48(%rax)
	movl	$0, (%rsi)
	movw	$417, BasicBlockSignatureTracker # imm = 0x1A1
	movw	$0, RunTimeSignatureAdjuster
.LBB0_38:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$14, %ax
	xorw	%cx, %ax
	cmpw	$431, %ax               # imm = 0x1AF
	jne	.LBB0_55
# %bb.39:                               # %BZ2_blockSort.split137
                                        #   in Loop: Header=BB0_38 Depth=1
	movl	(%rsi), %eax
	movq	(%r15), %rcx
	movl	108(%rcx), %ecx
	movw	$431, BasicBlockSignatureTracker # imm = 0x1AF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB0_48
# %bb.40:                               #   in Loop: Header=BB0_38 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$104, %ax
	cmpw	$455, %ax               # imm = 0x1C7
	jne	.LBB0_55
# %bb.41:                               # %BZ2_blockSort.split139
                                        #   in Loop: Header=BB0_38 Depth=1
	movq	(%rdx), %rax
	movslq	(%rsi), %rcx
	movl	(%rax,%rcx,4), %eax
	movw	$455, BasicBlockSignatureTracker # imm = 0x1C7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB0_44
# %bb.42:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$36, %ax
	cmpw	$483, %ax               # imm = 0x1E3
	jne	.LBB0_56
# %bb.43:                               # %BZ2_blockSort.split143
	movl	(%rsi), %eax
	movq	(%r15), %rcx
	movl	%eax, 48(%rcx)
	movw	$483, BasicBlockSignatureTracker # imm = 0x1E3
	movw	$76, RunTimeSignatureAdjuster
	jmp	.LBB0_49
.LBB0_44:                               #   in Loop: Header=BB0_38 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$511, %ax               # imm = 0x1FF
	jne	.LBB0_55
# %bb.45:                               # %BZ2_blockSort.split145
                                        #   in Loop: Header=BB0_38 Depth=1
	movw	$511, BasicBlockSignatureTracker # imm = 0x1FF
	movw	$0, RunTimeSignatureAdjuster
# %bb.46:                               #   in Loop: Header=BB0_38 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$989, %ax               # imm = 0x3DD
	cmpw	$546, %ax               # imm = 0x222
	jne	.LBB0_55
# %bb.47:                               # %BZ2_blockSort.split147
                                        #   in Loop: Header=BB0_38 Depth=1
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movw	$546, BasicBlockSignatureTracker # imm = 0x222
	movw	$899, RunTimeSignatureAdjuster # imm = 0x383
	jmp	.LBB0_38
.LBB0_48:                               # %.loopexit
	jmp	.LBB0_49
.LBB0_49:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$903, %ax               # imm = 0x387
	xorw	%cx, %ax
	cmpw	$552, %ax               # imm = 0x228
	jne	.LBB0_56
# %bb.50:                               # %BZ2_blockSort.split141
	movq	(%r15), %rax
	movl	48(%rax), %eax
	movw	$552, BasicBlockSignatureTracker # imm = 0x228
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB0_53
# %bb.51:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$111, %ax
	cmpw	$583, %ax               # imm = 0x247
	jne	.LBB0_56
# %bb.52:                               # %BZ2_blockSort.split151
	movw	$583, BasicBlockSignatureTracker # imm = 0x247
	movw	$0, RunTimeSignatureAdjuster
	movl	$1003, %edi             # imm = 0x3EB
	callq	BZ2_bz__AssertH__fail
	movw	$583, BasicBlockSignatureTracker # imm = 0x247
	movw	$111, RunTimeSignatureAdjuster
	movw	$583, BasicBlockSignatureTracker # imm = 0x247
	movw	$111, RunTimeSignatureAdjuster
.LBB0_53:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$100, %ax
	xorw	%cx, %ax
	cmpw	$588, %ax               # imm = 0x24C
	jne	.LBB0_56
# %bb.54:                               # %BZ2_blockSort.split149
	movw	$588, BasicBlockSignatureTracker # imm = 0x24C
	movw	$-30433, RunTimeSignatureAdjuster # imm = 0x891F
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB0_55:                               # %CFerrorHandler.BZ2_blockSort.loopexit
	jmp	.LBB0_56
.LBB0_56:                               # %CFerrorHandler.BZ2_blockSort
	callq	FAULT_DETECTED_CFC
.Lfunc_end0:
	.size	BZ2_blockSort, .Lfunc_end0-BZ2_blockSort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fallbackSort
	.type	fallbackSort,@function
fallbackSort:                           # @fallbackSort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$628, %ax               # imm = 0x274
	xorw	%bx, %ax
	cmpw	$612, %ax               # imm = 0x264
	jne	.LBB1_229
# %bb.1:                                # %fallbackSort.split389
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$628, %ax               # imm = 0x274
	xorw	%bx, %ax
	cmpw	$612, %ax               # imm = 0x264
	jne	.LBB1_229
# %bb.2:                                # %fallbackSort.split
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r9
	addq	$-1040, %r9             # imm = 0xFBF0
	movq	%r9, -80(%rbp)          # 8-byte Spill
	movq	%r9, %rsp
	movq	%rsp, %r9
	addq	$-1024, %r9             # imm = 0xFC00
	movq	%r9, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -120(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -48(%rbp)         # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -112(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -72(%rbp)         # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -128(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -136(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -104(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -144(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%r12, -88(%rbp)         # 8-byte Spill
	movq	%rdi, (%r12)
	movq	%rsi, (%r13)
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, (%rax)
	movl	%ecx, (%rbx)
	movl	%r8d, (%r15)
	movq	(%r13), %rax
	movq	%rax, (%r14)
	movl	(%r15), %eax
	movw	$612, BasicBlockSignatureTracker # imm = 0x264
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB1_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$200, %ax
	cmpw	$684, %ax               # imm = 0x2AC
	jne	.LBB1_229
# %bb.4:                                # %fallbackSort.split391
	movabsq	$.L.str.2, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	movq	%r9, %r12
	movq	%r13, -96(%rbp)         # 8-byte Spill
	movq	%r10, %r13
	movq	%r15, -64(%rbp)         # 8-byte Spill
	movq	%r14, %r15
	movq	%r11, %r14
	callq	fprintf
	movq	%r14, %r11
	movq	%r15, %r14
	movq	-64(%rbp), %r15         # 8-byte Reload
	movq	%r13, %r10
	movq	-96(%rbp), %r13         # 8-byte Reload
	movq	%r12, %r9
	movw	$684, BasicBlockSignatureTracker # imm = 0x2AC
	movw	$200, RunTimeSignatureAdjuster
.LBB1_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$208, %ax
	xorw	%cx, %ax
	cmpw	$692, %ax               # imm = 0x2B4
	jne	.LBB1_229
# %bb.6:                                # %fallbackSort.split393
	movl	$0, (%r11)
	movw	$692, BasicBlockSignatureTracker # imm = 0x2B4
	movw	$0, RunTimeSignatureAdjuster
.LBB1_7:                                # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10, %ax
	xorw	%cx, %ax
	cmpw	$702, %ax               # imm = 0x2BE
	jne	.LBB1_228
# %bb.8:                                # %fallbackSort.split395
                                        #   in Loop: Header=BB1_7 Depth=1
	movl	(%r11), %eax
	movw	$702, BasicBlockSignatureTracker # imm = 0x2BE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$257, %eax              # imm = 0x101
	jge	.LBB1_13
# %bb.9:                                #   in Loop: Header=BB1_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$723, %ax               # imm = 0x2D3
	jne	.LBB1_228
# %bb.10:                               # %fallbackSort.split397
                                        #   in Loop: Header=BB1_7 Depth=1
	movslq	(%r11), %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	$0, (%rcx,%rax,4)
	movw	$723, BasicBlockSignatureTracker # imm = 0x2D3
	movw	$0, RunTimeSignatureAdjuster
# %bb.11:                               #   in Loop: Header=BB1_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$744, %ax               # imm = 0x2E8
	jne	.LBB1_228
# %bb.12:                               # %fallbackSort.split401
                                        #   in Loop: Header=BB1_7 Depth=1
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%r11)
	movw	$744, BasicBlockSignatureTracker # imm = 0x2E8
	movw	$92, RunTimeSignatureAdjuster
	jmp	.LBB1_7
.LBB1_13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$479, %ax               # imm = 0x1DF
	cmpw	$865, %ax               # imm = 0x361
	jne	.LBB1_229
# %bb.14:                               # %fallbackSort.split399
	movl	$0, (%r11)
	movw	$865, BasicBlockSignatureTracker # imm = 0x361
	movw	$0, RunTimeSignatureAdjuster
.LBB1_15:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$231, %ax
	xorw	%cx, %ax
	cmpw	$902, %ax               # imm = 0x386
	jne	.LBB1_227
# %bb.16:                               # %fallbackSort.split403
                                        #   in Loop: Header=BB1_15 Depth=1
	movl	(%r11), %eax
	movl	(%rbx), %ecx
	movw	$902, BasicBlockSignatureTracker # imm = 0x386
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB1_21
# %bb.17:                               #   in Loop: Header=BB1_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$929, %ax               # imm = 0x3A1
	jne	.LBB1_227
# %bb.18:                               # %fallbackSort.split405
                                        #   in Loop: Header=BB1_15 Depth=1
	movq	(%r14), %rax
	movslq	(%r11), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdx,%rax,4)
	movw	$929, BasicBlockSignatureTracker # imm = 0x3A1
	movw	$0, RunTimeSignatureAdjuster
# %bb.19:                               #   in Loop: Header=BB1_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$939, %ax               # imm = 0x3AB
	jne	.LBB1_227
# %bb.20:                               # %fallbackSort.split409
                                        #   in Loop: Header=BB1_15 Depth=1
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%r11)
	movw	$939, BasicBlockSignatureTracker # imm = 0x3AB
	movw	$202, RunTimeSignatureAdjuster
	jmp	.LBB1_15
.LBB1_21:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$954, %ax               # imm = 0x3BA
	jne	.LBB1_229
# %bb.22:                               # %fallbackSort.split407
	movl	$0, (%r11)
	movw	$954, BasicBlockSignatureTracker # imm = 0x3BA
	movw	$0, RunTimeSignatureAdjuster
.LBB1_23:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$69, %ax
	xorw	%cx, %ax
	cmpw	$1023, %ax              # imm = 0x3FF
	jne	.LBB1_226
# %bb.24:                               # %fallbackSort.split411
                                        #   in Loop: Header=BB1_23 Depth=1
	movl	(%r11), %eax
	movw	$1023, BasicBlockSignatureTracker # imm = 0x3FF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jge	.LBB1_29
# %bb.25:                               #   in Loop: Header=BB1_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2046, %ax              # imm = 0x7FE
	cmpw	$1025, %ax              # imm = 0x401
	jne	.LBB1_226
# %bb.26:                               # %fallbackSort.split413
                                        #   in Loop: Header=BB1_23 Depth=1
	movslq	(%r11), %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	movslq	(%r11), %rcx
	movl	%eax, (%r9,%rcx,4)
	movw	$1025, BasicBlockSignatureTracker # imm = 0x401
	movw	$0, RunTimeSignatureAdjuster
# %bb.27:                               #   in Loop: Header=BB1_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$1043, %ax              # imm = 0x413
	jne	.LBB1_226
# %bb.28:                               # %fallbackSort.split417
                                        #   in Loop: Header=BB1_23 Depth=1
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%r11)
	movw	$1043, BasicBlockSignatureTracker # imm = 0x413
	movw	$1961, RunTimeSignatureAdjuster # imm = 0x7A9
	jmp	.LBB1_23
.LBB1_29:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1980, %ax              # imm = 0x7BC
	cmpw	$1091, %ax              # imm = 0x443
	jne	.LBB1_229
# %bb.30:                               # %fallbackSort.split415
	movl	$1, (%r11)
	movw	$1091, BasicBlockSignatureTracker # imm = 0x443
	movw	$0, RunTimeSignatureAdjuster
.LBB1_31:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$5, %ax
	xorw	%cx, %ax
	cmpw	$1094, %ax              # imm = 0x446
	jne	.LBB1_225
# %bb.32:                               # %fallbackSort.split419
                                        #   in Loop: Header=BB1_31 Depth=1
	movl	(%r11), %eax
	movw	$1094, BasicBlockSignatureTracker # imm = 0x446
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$257, %eax              # imm = 0x101
	jge	.LBB1_37
# %bb.33:                               #   in Loop: Header=BB1_31 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$1118, %ax              # imm = 0x45E
	jne	.LBB1_225
# %bb.34:                               # %fallbackSort.split421
                                        #   in Loop: Header=BB1_31 Depth=1
	movl	(%r11), %eax
	subl	$1, %eax
	cltq
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi,%rax,4), %eax
	movq	%r11, %rdx
	movslq	(%r11), %rcx
	addl	(%rsi,%rcx,4), %eax
	movl	%eax, (%rsi,%rcx,4)
	movw	$1118, BasicBlockSignatureTracker # imm = 0x45E
	movw	$0, RunTimeSignatureAdjuster
# %bb.35:                               #   in Loop: Header=BB1_31 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$217, %ax
	cmpw	$1159, %ax              # imm = 0x487
	movq	%rdx, %r11
	jne	.LBB1_225
# %bb.36:                               # %fallbackSort.split425
                                        #   in Loop: Header=BB1_31 Depth=1
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%r11)
	movw	$1159, BasicBlockSignatureTracker # imm = 0x487
	movw	$196, RunTimeSignatureAdjuster
	jmp	.LBB1_31
.LBB1_37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$220, %ax
	cmpw	$1178, %ax              # imm = 0x49A
	jne	.LBB1_229
# %bb.38:                               # %fallbackSort.split423
	movq	%r10, %r12
	movq	%r9, -96(%rbp)          # 8-byte Spill
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	movq	%r11, %rbx
	movl	$0, (%r11)
	movw	$1178, BasicBlockSignatureTracker # imm = 0x49A
	movw	$0, RunTimeSignatureAdjuster
.LBB1_39:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$1190, %ax              # imm = 0x4A6
	jne	.LBB1_224
# %bb.40:                               # %fallbackSort.split427
                                        #   in Loop: Header=BB1_39 Depth=1
	movl	(%rbx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$1190, BasicBlockSignatureTracker # imm = 0x4A6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB1_45
# %bb.41:                               #   in Loop: Header=BB1_39 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$1196, %ax              # imm = 0x4AC
	jne	.LBB1_224
# %bb.42:                               # %fallbackSort.split429
                                        #   in Loop: Header=BB1_39 Depth=1
	movq	(%r14), %rax
	movq	%rbx, %rdx
	movslq	(%rdx), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	movslq	(%rcx), %rax
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi,%rax,4), %eax
	subl	$1, %eax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movl	(%rsi), %eax
	movslq	(%rcx), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movl	(%rdx), %eax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$1196, BasicBlockSignatureTracker # imm = 0x4AC
	movw	$0, RunTimeSignatureAdjuster
# %bb.43:                               #   in Loop: Header=BB1_39 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$76, %ax
	cmpw	$1248, %ax              # imm = 0x4E0
	jne	.LBB1_224
# %bb.44:                               # %fallbackSort.split433
                                        #   in Loop: Header=BB1_39 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$1248, BasicBlockSignatureTracker # imm = 0x4E0
	movw	$122, RunTimeSignatureAdjuster
	jmp	.LBB1_39
.LBB1_45:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$72, %ax
	cmpw	$1262, %ax              # imm = 0x4EE
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rbx, %rsi
	jne	.LBB1_229
# %bb.46:                               # %fallbackSort.split431
	movl	$32, %ecx
	movl	(%rax), %eax
	cltd
	idivl	%ecx
	addl	$2, %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$0, (%rsi)
	movw	$1262, BasicBlockSignatureTracker # imm = 0x4EE
	movw	$0, RunTimeSignatureAdjuster
.LBB1_47:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$507, %ax               # imm = 0x1FB
	xorw	%cx, %ax
	cmpw	$1301, %ax              # imm = 0x515
	jne	.LBB1_223
# %bb.48:                               # %fallbackSort.split435
                                        #   in Loop: Header=BB1_47 Depth=1
	movl	(%rbx), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$1301, BasicBlockSignatureTracker # imm = 0x515
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB1_53
# %bb.49:                               #   in Loop: Header=BB1_47 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$71, %ax
	cmpw	$1362, %ax              # imm = 0x552
	jne	.LBB1_223
# %bb.50:                               # %fallbackSort.split437
                                        #   in Loop: Header=BB1_47 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movslq	(%rbx), %rcx
	movl	$0, (%rax,%rcx,4)
	movw	$1362, BasicBlockSignatureTracker # imm = 0x552
	movw	$0, RunTimeSignatureAdjuster
# %bb.51:                               #   in Loop: Header=BB1_47 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$211, %ax
	cmpw	$1409, %ax              # imm = 0x581
	jne	.LBB1_223
# %bb.52:                               # %fallbackSort.split441
                                        #   in Loop: Header=BB1_47 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$1409, BasicBlockSignatureTracker # imm = 0x581
	movw	$367, RunTimeSignatureAdjuster # imm = 0x16F
	jmp	.LBB1_47
.LBB1_53:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$156, %ax
	cmpw	$1417, %ax              # imm = 0x589
	movq	%rbx, %rax
	jne	.LBB1_229
# %bb.54:                               # %fallbackSort.split439
	movl	$0, (%rax)
	movw	$1417, BasicBlockSignatureTracker # imm = 0x589
	movw	$0, RunTimeSignatureAdjuster
.LBB1_55:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$104, %ax
	xorw	%cx, %ax
	cmpw	$1505, %ax              # imm = 0x5E1
	jne	.LBB1_222
# %bb.56:                               # %fallbackSort.split443
                                        #   in Loop: Header=BB1_55 Depth=1
	movl	(%rbx), %eax
	movw	$1505, BasicBlockSignatureTracker # imm = 0x5E1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jge	.LBB1_61
# %bb.57:                               #   in Loop: Header=BB1_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$965, %ax               # imm = 0x3C5
	cmpw	$1572, %ax              # imm = 0x624
	jne	.LBB1_222
# %bb.58:                               # %fallbackSort.split445
                                        #   in Loop: Header=BB1_55 Depth=1
	movl	$1, %eax
	movq	%rbx, %rdx
	movslq	(%rdx), %rcx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi,%rcx,4), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%rdx), %rdx
	movl	(%rsi,%rdx,4), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movw	$1572, BasicBlockSignatureTracker # imm = 0x624
	movw	$0, RunTimeSignatureAdjuster
# %bb.59:                               #   in Loop: Header=BB1_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$1579, %ax              # imm = 0x62B
	jne	.LBB1_222
# %bb.60:                               # %fallbackSort.split449
                                        #   in Loop: Header=BB1_55 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$1579, BasicBlockSignatureTracker # imm = 0x62B
	movw	$930, RunTimeSignatureAdjuster # imm = 0x3A2
	jmp	.LBB1_55
.LBB1_61:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$985, %ax               # imm = 0x3D9
	cmpw	$1592, %ax              # imm = 0x638
	movq	%rbx, %rax
	jne	.LBB1_229
# %bb.62:                               # %fallbackSort.split447
	movl	$0, (%rax)
	movw	$1592, BasicBlockSignatureTracker # imm = 0x638
	movw	$0, RunTimeSignatureAdjuster
.LBB1_63:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$112, %ax
	xorw	%cx, %ax
	cmpw	$1608, %ax              # imm = 0x648
	jne	.LBB1_221
# %bb.64:                               # %fallbackSort.split451
                                        #   in Loop: Header=BB1_63 Depth=1
	movl	(%rbx), %eax
	movw	$1608, BasicBlockSignatureTracker # imm = 0x648
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$32, %eax
	jge	.LBB1_69
# %bb.65:                               #   in Loop: Header=BB1_63 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$1634, %ax              # imm = 0x662
	jne	.LBB1_221
# %bb.66:                               # %fallbackSort.split453
                                        #   in Loop: Header=BB1_63 Depth=1
	movl	$1, %eax
	movq	-64(%rbp), %r8          # 8-byte Reload
	movl	(%r8), %ecx
	movq	%rbx, %r9
	movl	(%r9), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %rcx
	movl	(%r8), %esi
	movl	(%r9), %edi
	shll	$1, %edi
	addl	%edi, %esi
	sarl	$5, %esi
	movslq	%esi, %rsi
	orl	(%rcx,%rsi,4), %edx
	movl	%edx, (%rcx,%rsi,4)
	movl	(%r8), %ecx
	movl	(%r9), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	$1, %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	xorl	$-1, %eax
	movq	(%r10), %rcx
	movl	(%r8), %edx
	movl	(%r9), %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	$1, %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	andl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movw	$1634, BasicBlockSignatureTracker # imm = 0x662
	movw	$0, RunTimeSignatureAdjuster
# %bb.67:                               #   in Loop: Header=BB1_63 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$1660, %ax              # imm = 0x67C
	jne	.LBB1_221
# %bb.68:                               # %fallbackSort.split457
                                        #   in Loop: Header=BB1_63 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$1660, BasicBlockSignatureTracker # imm = 0x67C
	movw	$68, RunTimeSignatureAdjuster
	jmp	.LBB1_63
.LBB1_69:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$196, %ax
	cmpw	$1676, %ax              # imm = 0x68C
	jne	.LBB1_229
# %bb.70:                               # %fallbackSort.split455
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	movw	$1676, BasicBlockSignatureTracker # imm = 0x68C
	movw	$0, RunTimeSignatureAdjuster
.LBB1_71:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_77 Depth 2
                                        #     Child Loop BB1_93 Depth 2
                                        #       Child Loop BB1_95 Depth 3
                                        #       Child Loop BB1_107 Depth 3
                                        #       Child Loop BB1_113 Depth 3
                                        #       Child Loop BB1_125 Depth 3
                                        #       Child Loop BB1_137 Depth 3
                                        #       Child Loop BB1_143 Depth 3
                                        #       Child Loop BB1_157 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$1685, %ax              # imm = 0x695
	jne	.LBB1_220
# %bb.72:                               # %fallbackSort.split459
                                        #   in Loop: Header=BB1_71 Depth=1
	movl	(%r15), %eax
	movw	$1685, BasicBlockSignatureTracker # imm = 0x695
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB1_75
# %bb.73:                               #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$1690, %ax              # imm = 0x69A
	jne	.LBB1_220
# %bb.74:                               # %fallbackSort.split461
                                        #   in Loop: Header=BB1_71 Depth=1
	movabsq	$.L.str.3, %rsi
	movq	stderr, %rdi
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movw	$1690, BasicBlockSignatureTracker # imm = 0x69A
	movw	$15, RunTimeSignatureAdjuster
.LBB1_75:                               #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$1705, %ax              # imm = 0x6A9
	jne	.LBB1_220
# %bb.76:                               # %fallbackSort.split463
                                        #   in Loop: Header=BB1_71 Depth=1
	movl	$0, (%r12)
	movl	$0, (%rbx)
	movw	$1705, BasicBlockSignatureTracker # imm = 0x6A9
	movw	$0, RunTimeSignatureAdjuster
.LBB1_77:                               #   Parent Loop BB1_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$125, %ax
	xorw	%cx, %ax
	cmpw	$1748, %ax              # imm = 0x6D4
	jne	.LBB1_219
# %bb.78:                               # %fallbackSort.split465
                                        #   in Loop: Header=BB1_77 Depth=2
	movl	(%rbx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$1748, BasicBlockSignatureTracker # imm = 0x6D4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB1_91
# %bb.79:                               #   in Loop: Header=BB1_77 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$1769, %ax              # imm = 0x6E9
	jne	.LBB1_219
# %bb.80:                               # %fallbackSort.split467
                                        #   in Loop: Header=BB1_77 Depth=2
	movl	$1, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	%rbx, %rsi
	movl	(%rsi), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %edx
	movl	(%rsi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	andl	%eax, %edx
	movw	$1769, BasicBlockSignatureTracker # imm = 0x6E9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	je	.LBB1_83
# %bb.81:                               #   in Loop: Header=BB1_77 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$1787, %ax              # imm = 0x6FB
	jne	.LBB1_219
# %bb.82:                               # %fallbackSort.split471
                                        #   in Loop: Header=BB1_77 Depth=2
	movl	(%rbx), %eax
	movl	%eax, (%r12)
	movw	$1787, BasicBlockSignatureTracker # imm = 0x6FB
	movw	$18, RunTimeSignatureAdjuster
.LBB1_83:                               #   in Loop: Header=BB1_77 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$501, %ax               # imm = 0x1F5
	xorw	%cx, %ax
	cmpw	$1820, %ax              # imm = 0x71C
	jne	.LBB1_219
# %bb.84:                               # %fallbackSort.split473
                                        #   in Loop: Header=BB1_77 Depth=2
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$1820, BasicBlockSignatureTracker # imm = 0x71C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB1_87
# %bb.85:                               #   in Loop: Header=BB1_77 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$1829, %ax              # imm = 0x725
	jne	.LBB1_219
# %bb.86:                               # %fallbackSort.split475
                                        #   in Loop: Header=BB1_77 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movw	$1829, BasicBlockSignatureTracker # imm = 0x725
	movw	$57, RunTimeSignatureAdjuster
.LBB1_87:                               #   in Loop: Header=BB1_77 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$59, %ax
	xorw	%cx, %ax
	cmpw	$1831, %ax              # imm = 0x727
	jne	.LBB1_219
# %bb.88:                               # %fallbackSort.split477
                                        #   in Loop: Header=BB1_77 Depth=2
	movl	(%r12), %eax
	movq	(%r13), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$1831, BasicBlockSignatureTracker # imm = 0x727
	movw	$0, RunTimeSignatureAdjuster
# %bb.89:                               #   in Loop: Header=BB1_77 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$125, %ax
	cmpw	$1882, %ax              # imm = 0x75A
	jne	.LBB1_219
# %bb.90:                               # %fallbackSort.split479
                                        #   in Loop: Header=BB1_77 Depth=2
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$1882, BasicBlockSignatureTracker # imm = 0x75A
	movw	$499, RunTimeSignatureAdjuster # imm = 0x1F3
	jmp	.LBB1_77
.LBB1_91:                               #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$433, %ax               # imm = 0x1B1
	cmpw	$1893, %ax              # imm = 0x765
	jne	.LBB1_220
# %bb.92:                               # %fallbackSort.split469
                                        #   in Loop: Header=BB1_71 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$-1, (%rax)
	movw	$1893, BasicBlockSignatureTracker # imm = 0x765
	movw	$0, RunTimeSignatureAdjuster
.LBB1_93:                               #   Parent Loop BB1_71 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB1_95 Depth 3
                                        #       Child Loop BB1_107 Depth 3
                                        #       Child Loop BB1_113 Depth 3
                                        #       Child Loop BB1_125 Depth 3
                                        #       Child Loop BB1_137 Depth 3
                                        #       Child Loop BB1_143 Depth 3
                                        #       Child Loop BB1_157 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$1898, %ax              # imm = 0x76A
	jne	.LBB1_218
# %bb.94:                               # %fallbackSort.split481
                                        #   in Loop: Header=BB1_93 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$1898, BasicBlockSignatureTracker # imm = 0x76A
	movw	$0, RunTimeSignatureAdjuster
.LBB1_95:                               #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$1914, %ax              # imm = 0x77A
	jne	.LBB1_217
# %bb.96:                               # %fallbackSort.split483
                                        #   in Loop: Header=BB1_95 Depth=3
	xorl	%eax, %eax
	movl	$1, %edx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %esi
	sarl	$5, %esi
	movslq	%esi, %rsi
	movl	(%rcx,%rsi,4), %esi
	movl	(%rdi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	andl	%edx, %esi
	movw	$1914, BasicBlockSignatureTracker # imm = 0x77A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %esi
	je	.LBB1_99
# %bb.97:                               #   in Loop: Header=BB1_95 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$224, %ax
	cmpw	$1946, %ax              # imm = 0x79A
	jne	.LBB1_217
# %bb.98:                               # %fallbackSort.split485
                                        #   in Loop: Header=BB1_95 Depth=3
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	andl	$31, %eax
	cmpl	$0, %eax
	setne	%al
	movw	$1946, BasicBlockSignatureTracker # imm = 0x79A
	movw	$224, RunTimeSignatureAdjuster
.LBB1_99:                               #   in Loop: Header=BB1_95 Depth=3
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$179, %cx
	xorw	%dx, %cx
	cmpw	$1993, %cx              # imm = 0x7C9
	jne	.LBB1_217
# %bb.100:                              # %fallbackSort.split487
                                        #   in Loop: Header=BB1_95 Depth=3
	movw	$1993, BasicBlockSignatureTracker # imm = 0x7C9
	movw	$0, RunTimeSignatureAdjuster
	testb	$1, %al
	jne	.LBB1_101
	jmp	.LBB1_103
.LBB1_101:                              #   in Loop: Header=BB1_95 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$2008, %ax              # imm = 0x7D8
	jne	.LBB1_217
# %bb.102:                              # %fallbackSort.split489
                                        #   in Loop: Header=BB1_95 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$2008, BasicBlockSignatureTracker # imm = 0x7D8
	movw	$178, RunTimeSignatureAdjuster
	jmp	.LBB1_95
.LBB1_103:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$2039, %ax              # imm = 0x7F7
	jne	.LBB1_218
# %bb.104:                              # %fallbackSort.split491
                                        #   in Loop: Header=BB1_93 Depth=2
	movl	$1, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %edx
	movl	(%rsi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	andl	%eax, %edx
	movw	$2039, BasicBlockSignatureTracker # imm = 0x7F7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	je	.LBB1_119
# %bb.105:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4003, %ax              # imm = 0xFA3
	cmpw	$2132, %ax              # imm = 0x854
	jne	.LBB1_218
# %bb.106:                              # %fallbackSort.split493
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2132, BasicBlockSignatureTracker # imm = 0x854
	movw	$0, RunTimeSignatureAdjuster
.LBB1_107:                              #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$54, %ax
	xorw	%cx, %ax
	cmpw	$2146, %ax              # imm = 0x862
	jne	.LBB1_216
# %bb.108:                              # %fallbackSort.split497
                                        #   in Loop: Header=BB1_107 Depth=3
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movw	$2146, BasicBlockSignatureTracker # imm = 0x862
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB1_111
# %bb.109:                              #   in Loop: Header=BB1_107 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$2165, %ax              # imm = 0x875
	jne	.LBB1_216
# %bb.110:                              # %fallbackSort.split499
                                        #   in Loop: Header=BB1_107 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$32, %eax
	movl	%eax, (%rcx)
	movw	$2165, BasicBlockSignatureTracker # imm = 0x875
	movw	$33, RunTimeSignatureAdjuster
	jmp	.LBB1_107
.LBB1_111:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$245, %ax
	cmpw	$2199, %ax              # imm = 0x897
	jne	.LBB1_218
# %bb.112:                              # %fallbackSort.split501
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2199, BasicBlockSignatureTracker # imm = 0x897
	movw	$0, RunTimeSignatureAdjuster
.LBB1_113:                              #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$47, %ax
	xorw	%cx, %ax
	cmpw	$2232, %ax              # imm = 0x8B8
	jne	.LBB1_215
# %bb.114:                              # %fallbackSort.split503
                                        #   in Loop: Header=BB1_113 Depth=3
	movl	$1, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %edx
	movl	(%rsi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	andl	%eax, %edx
	movw	$2232, BasicBlockSignatureTracker # imm = 0x8B8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	je	.LBB1_117
# %bb.115:                              #   in Loop: Header=BB1_113 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$112, %ax
	cmpw	$2248, %ax              # imm = 0x8C8
	jne	.LBB1_215
# %bb.116:                              # %fallbackSort.split505
                                        #   in Loop: Header=BB1_113 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$2248, BasicBlockSignatureTracker # imm = 0x8C8
	movw	$95, RunTimeSignatureAdjuster
	jmp	.LBB1_113
.LBB1_117:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$104, %ax
	cmpw	$2256, %ax              # imm = 0x8D0
	jne	.LBB1_218
# %bb.118:                              # %fallbackSort.split507
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2256, BasicBlockSignatureTracker # imm = 0x8D0
	movw	$3879, RunTimeSignatureAdjuster # imm = 0xF27
.LBB1_119:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3877, %ax              # imm = 0xF25
	xorw	%cx, %ax
	cmpw	$2258, %ax              # imm = 0x8D2
	jne	.LBB1_218
# %bb.120:                              # %fallbackSort.split495
                                        #   in Loop: Header=BB1_93 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	subl	$1, %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$2258, BasicBlockSignatureTracker # imm = 0x8D2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB1_123
# %bb.121:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$2261, %ax              # imm = 0x8D5
	jne	.LBB1_220
# %bb.122:                              # %fallbackSort.split509
                                        #   in Loop: Header=BB1_71 Depth=1
	movw	$2261, BasicBlockSignatureTracker # imm = 0x8D5
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB1_171
.LBB1_123:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$2284, %ax              # imm = 0x8EC
	jne	.LBB1_218
# %bb.124:                              # %fallbackSort.split511
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2284, BasicBlockSignatureTracker # imm = 0x8EC
	movw	$0, RunTimeSignatureAdjuster
.LBB1_125:                              #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3, %ax
	xorw	%cx, %ax
	cmpw	$2287, %ax              # imm = 0x8EF
	jne	.LBB1_214
# %bb.126:                              # %fallbackSort.split515
                                        #   in Loop: Header=BB1_125 Depth=3
	xorl	%eax, %eax
	movl	$1, %edx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %esi
	sarl	$5, %esi
	movslq	%esi, %rsi
	movl	(%rcx,%rsi,4), %esi
	movl	(%rdi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	andl	%edx, %esi
	movw	$2287, BasicBlockSignatureTracker # imm = 0x8EF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %esi
	jne	.LBB1_129
# %bb.127:                              #   in Loop: Header=BB1_125 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$491, %ax               # imm = 0x1EB
	cmpw	$2308, %ax              # imm = 0x904
	jne	.LBB1_214
# %bb.128:                              # %fallbackSort.split519
                                        #   in Loop: Header=BB1_125 Depth=3
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	andl	$31, %eax
	cmpl	$0, %eax
	setne	%al
	movw	$2308, BasicBlockSignatureTracker # imm = 0x904
	movw	$491, RunTimeSignatureAdjuster # imm = 0x1EB
.LBB1_129:                              #   in Loop: Header=BB1_125 Depth=3
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$488, %cx               # imm = 0x1E8
	xorw	%dx, %cx
	cmpw	$2311, %cx              # imm = 0x907
	jne	.LBB1_214
# %bb.130:                              # %fallbackSort.split517
                                        #   in Loop: Header=BB1_125 Depth=3
	movw	$2311, BasicBlockSignatureTracker # imm = 0x907
	movw	$0, RunTimeSignatureAdjuster
	testb	$1, %al
	jne	.LBB1_131
	jmp	.LBB1_133
.LBB1_131:                              #   in Loop: Header=BB1_125 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$2335, %ax              # imm = 0x91F
	jne	.LBB1_214
# %bb.132:                              # %fallbackSort.split521
                                        #   in Loop: Header=BB1_125 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$2335, BasicBlockSignatureTracker # imm = 0x91F
	movw	$499, RunTimeSignatureAdjuster # imm = 0x1F3
	jmp	.LBB1_125
.LBB1_133:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$2348, %ax              # imm = 0x92C
	jne	.LBB1_218
# %bb.134:                              # %fallbackSort.split523
                                        #   in Loop: Header=BB1_93 Depth=2
	movl	$1, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %edx
	movl	(%rsi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	andl	%eax, %edx
	movw	$2348, BasicBlockSignatureTracker # imm = 0x92C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	jne	.LBB1_149
# %bb.135:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$2361, %ax              # imm = 0x939
	jne	.LBB1_218
# %bb.136:                              # %fallbackSort.split527
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2361, BasicBlockSignatureTracker # imm = 0x939
	movw	$0, RunTimeSignatureAdjuster
.LBB1_137:                              #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$115, %ax
	xorw	%cx, %ax
	cmpw	$2378, %ax              # imm = 0x94A
	jne	.LBB1_213
# %bb.138:                              # %fallbackSort.split529
                                        #   in Loop: Header=BB1_137 Depth=3
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movw	$2378, BasicBlockSignatureTracker # imm = 0x94A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB1_141
# %bb.139:                              #   in Loop: Header=BB1_137 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$192, %ax
	cmpw	$2442, %ax              # imm = 0x98A
	jne	.LBB1_213
# %bb.140:                              # %fallbackSort.split531
                                        #   in Loop: Header=BB1_137 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$32, %eax
	movl	%eax, (%rcx)
	movw	$2442, BasicBlockSignatureTracker # imm = 0x98A
	movw	$179, RunTimeSignatureAdjuster
	jmp	.LBB1_137
.LBB1_141:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$223, %ax
	cmpw	$2453, %ax              # imm = 0x995
	jne	.LBB1_218
# %bb.142:                              # %fallbackSort.split533
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2453, BasicBlockSignatureTracker # imm = 0x995
	movw	$0, RunTimeSignatureAdjuster
.LBB1_143:                              #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$77, %ax
	xorw	%cx, %ax
	cmpw	$2520, %ax              # imm = 0x9D8
	jne	.LBB1_212
# %bb.144:                              # %fallbackSort.split535
                                        #   in Loop: Header=BB1_143 Depth=3
	movl	$1, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %edx
	movl	(%rsi), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	setne	%al
	xorb	$-1, %al
	movw	$2520, BasicBlockSignatureTracker # imm = 0x9D8
	movw	$0, RunTimeSignatureAdjuster
	testb	$1, %al
	jne	.LBB1_145
	jmp	.LBB1_147
.LBB1_145:                              #   in Loop: Header=BB1_143 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$2530, %ax              # imm = 0x9E2
	jne	.LBB1_212
# %bb.146:                              # %fallbackSort.split537
                                        #   in Loop: Header=BB1_143 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$2530, BasicBlockSignatureTracker # imm = 0x9E2
	movw	$119, RunTimeSignatureAdjuster
	jmp	.LBB1_143
.LBB1_147:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$38, %ax
	cmpw	$2558, %ax              # imm = 0x9FE
	jne	.LBB1_218
# %bb.148:                              # %fallbackSort.split539
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2558, BasicBlockSignatureTracker # imm = 0x9FE
	movw	$210, RunTimeSignatureAdjuster
.LBB1_149:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$799, %ax               # imm = 0x31F
	xorw	%cx, %ax
	cmpw	$2611, %ax              # imm = 0xA33
	jne	.LBB1_218
# %bb.150:                              # %fallbackSort.split525
                                        #   in Loop: Header=BB1_93 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	subl	$1, %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$2611, BasicBlockSignatureTracker # imm = 0xA33
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB1_153
# %bb.151:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$2612, %ax              # imm = 0xA34
	jne	.LBB1_220
# %bb.152:                              # %fallbackSort.split541
                                        #   in Loop: Header=BB1_71 Depth=1
	movw	$2612, BasicBlockSignatureTracker # imm = 0xA34
	movw	$737, RunTimeSignatureAdjuster # imm = 0x2E1
	jmp	.LBB1_171
.LBB1_153:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$83, %ax
	cmpw	$2656, %ax              # imm = 0xA60
	jne	.LBB1_218
# %bb.154:                              # %fallbackSort.split543
                                        #   in Loop: Header=BB1_93 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$2656, BasicBlockSignatureTracker # imm = 0xA60
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB1_169
# %bb.155:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$2661, %ax              # imm = 0xA65
	jne	.LBB1_218
# %bb.156:                              # %fallbackSort.split545
                                        #   in Loop: Header=BB1_93 Depth=2
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	(%r8), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	addl	$1, %eax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	addl	(%rdx), %eax
	movl	%eax, (%rdx)
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r13), %rsi
	movl	(%rcx), %edx
	movl	(%r8), %ecx
	movw	$2661, BasicBlockSignatureTracker # imm = 0xA65
	movw	$0, RunTimeSignatureAdjuster
	callq	fallbackQSort3
	movw	$2661, BasicBlockSignatureTracker # imm = 0xA65
	movw	$0, RunTimeSignatureAdjuster
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	$-1, (%rax)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movl	%eax, (%rbx)
	movw	$2661, BasicBlockSignatureTracker # imm = 0xA65
	movw	$0, RunTimeSignatureAdjuster
.LBB1_157:                              #   Parent Loop BB1_71 Depth=1
                                        #     Parent Loop BB1_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$241, %ax
	xorw	%cx, %ax
	cmpw	$2708, %ax              # imm = 0xA94
	jne	.LBB1_211
# %bb.158:                              # %fallbackSort.split549
                                        #   in Loop: Header=BB1_157 Depth=3
	movl	(%rbx), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$2708, BasicBlockSignatureTracker # imm = 0xA94
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB1_167
# %bb.159:                              #   in Loop: Header=BB1_157 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$2716, %ax              # imm = 0xA9C
	jne	.LBB1_211
# %bb.160:                              # %fallbackSort.split551
                                        #   in Loop: Header=BB1_157 Depth=3
	movq	(%r13), %rax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%rbx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movl	(%rcx), %ecx
	movw	$2716, BasicBlockSignatureTracker # imm = 0xA9C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB1_163
# %bb.161:                              #   in Loop: Header=BB1_157 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$2718, %ax              # imm = 0xA9E
	jne	.LBB1_211
# %bb.162:                              # %fallbackSort.split555
                                        #   in Loop: Header=BB1_157 Depth=3
	movl	$1, %eax
	movq	%rbx, %rdx
	movl	(%rdx), %ecx
	andl	$31, %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	(%rdx), %edx
	sarl	$5, %edx
	movslq	%edx, %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$2718, BasicBlockSignatureTracker # imm = 0xA9E
	movw	$2, RunTimeSignatureAdjuster
.LBB1_163:                              #   in Loop: Header=BB1_157 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$121, %ax
	xorw	%cx, %ax
	cmpw	$2789, %ax              # imm = 0xAE5
	jne	.LBB1_211
# %bb.164:                              # %fallbackSort.split557
                                        #   in Loop: Header=BB1_157 Depth=3
	movw	$2789, BasicBlockSignatureTracker # imm = 0xAE5
	movw	$0, RunTimeSignatureAdjuster
# %bb.165:                              #   in Loop: Header=BB1_157 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$2806, %ax              # imm = 0xAF6
	jne	.LBB1_211
# %bb.166:                              # %fallbackSort.split559
                                        #   in Loop: Header=BB1_157 Depth=3
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$2806, BasicBlockSignatureTracker # imm = 0xAF6
	movw	$147, RunTimeSignatureAdjuster
	jmp	.LBB1_157
.LBB1_167:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$108, %ax
	cmpw	$2808, %ax              # imm = 0xAF8
	jne	.LBB1_218
# %bb.168:                              # %fallbackSort.split553
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2808, BasicBlockSignatureTracker # imm = 0xAF8
	movw	$152, RunTimeSignatureAdjuster
.LBB1_169:                              #   in Loop: Header=BB1_93 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$353, %ax               # imm = 0x161
	xorw	%cx, %ax
	cmpw	$2817, %ax              # imm = 0xB01
	jne	.LBB1_218
# %bb.170:                              # %fallbackSort.split547
                                        #   in Loop: Header=BB1_93 Depth=2
	movw	$2817, BasicBlockSignatureTracker # imm = 0xB01
	movw	$3172, RunTimeSignatureAdjuster # imm = 0xC64
	jmp	.LBB1_93
.LBB1_171:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$982, %ax               # imm = 0x3D6
	xorw	%cx, %ax
	cmpw	$2819, %ax              # imm = 0xB03
	jne	.LBB1_220
# %bb.172:                              # %fallbackSort.split513
                                        #   in Loop: Header=BB1_71 Depth=1
	movl	(%r15), %eax
	movw	$2819, BasicBlockSignatureTracker # imm = 0xB03
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB1_175
# %bb.173:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$2827, %ax              # imm = 0xB0B
	jne	.LBB1_220
# %bb.174:                              # %fallbackSort.split561
                                        #   in Loop: Header=BB1_71 Depth=1
	movabsq	$.L.str.4, %rsi
	movq	stderr, %rdi
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movw	$2827, BasicBlockSignatureTracker # imm = 0xB0B
	movw	$8, RunTimeSignatureAdjuster
.LBB1_175:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$61, %ax
	xorw	%cx, %ax
	cmpw	$2878, %ax              # imm = 0xB3E
	jne	.LBB1_220
# %bb.176:                              # %fallbackSort.split563
                                        #   in Loop: Header=BB1_71 Depth=1
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	shll	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$2878, BasicBlockSignatureTracker # imm = 0xB3E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB1_179
# %bb.177:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$87, %ax
	cmpw	$2921, %ax              # imm = 0xB69
	jne	.LBB1_220
# %bb.178:                              # %fallbackSort.split567
                                        #   in Loop: Header=BB1_71 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$2921, BasicBlockSignatureTracker # imm = 0xB69
	movw	$87, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB1_181
.LBB1_179:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$168, %ax
	xorw	%cx, %ax
	cmpw	$2966, %ax              # imm = 0xB96
	jne	.LBB1_229
# %bb.180:                              # %fallbackSort.split565
	movw	$2966, BasicBlockSignatureTracker # imm = 0xB96
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB1_185
.LBB1_181:                              # %Buffer__
                                        #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11558, %ax             # imm = 0x2D26
	cmpw	$9807, %ax              # imm = 0x264F
	jne	.LBB1_220
# %bb.182:                              # %fallbackSort.split569
                                        #   in Loop: Header=BB1_71 Depth=1
	movw	$9807, BasicBlockSignatureTracker # imm = 0x264F
	movw	$11558, RunTimeSignatureAdjuster # imm = 0x2D26
# %bb.183:                              #   in Loop: Header=BB1_71 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$202, %ax
	xorw	%cx, %ax
	cmpw	$2979, %ax              # imm = 0xBA3
	jne	.LBB1_220
# %bb.184:                              # %fallbackSort.split595
                                        #   in Loop: Header=BB1_71 Depth=1
	movw	$2979, BasicBlockSignatureTracker # imm = 0xBA3
	movw	$3375, RunTimeSignatureAdjuster # imm = 0xD2F
	jmp	.LBB1_71
.LBB1_185:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$34, %ax
	cmpw	$2996, %ax              # imm = 0xBB4
	jne	.LBB1_229
# %bb.186:                              # %fallbackSort.split571
	movl	(%r15), %eax
	movw	$2996, BasicBlockSignatureTracker # imm = 0xBB4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB1_189
# %bb.187:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$68, %ax
	cmpw	$3056, %ax              # imm = 0xBF0
	jne	.LBB1_229
# %bb.188:                              # %fallbackSort.split573
	movabsq	$.L.str.5, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$3056, BasicBlockSignatureTracker # imm = 0xBF0
	movw	$68, RunTimeSignatureAdjuster
.LBB1_189:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$67, %ax
	xorw	%cx, %ax
	cmpw	$3063, %ax              # imm = 0xBF7
	movq	%r12, %rax
	movq	%rbx, %rcx
	jne	.LBB1_229
# %bb.190:                              # %fallbackSort.split575
	movl	$0, (%rax)
	movl	$0, (%rcx)
	movw	$3063, BasicBlockSignatureTracker # imm = 0xBF7
	movw	$0, RunTimeSignatureAdjuster
.LBB1_191:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_195 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10, %ax
	xorw	%cx, %ax
	cmpw	$3069, %ax              # imm = 0xBFD
	jne	.LBB1_210
# %bb.192:                              # %fallbackSort.split577
                                        #   in Loop: Header=BB1_191 Depth=1
	movl	(%rbx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$3069, BasicBlockSignatureTracker # imm = 0xBFD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB1_203
# %bb.193:                              #   in Loop: Header=BB1_191 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2012, %ax              # imm = 0x7DC
	cmpw	$3105, %ax              # imm = 0xC21
	jne	.LBB1_210
# %bb.194:                              # %fallbackSort.split579
                                        #   in Loop: Header=BB1_191 Depth=1
	movw	$3105, BasicBlockSignatureTracker # imm = 0xC21
	movw	$0, RunTimeSignatureAdjuster
.LBB1_195:                              #   Parent Loop BB1_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$123, %ax
	xorw	%cx, %ax
	cmpw	$3162, %ax              # imm = 0xC5A
	jne	.LBB1_209
# %bb.196:                              # %fallbackSort.split583
                                        #   in Loop: Header=BB1_195 Depth=2
	movslq	(%r12), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	movw	$3162, BasicBlockSignatureTracker # imm = 0xC5A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB1_199
# %bb.197:                              #   in Loop: Header=BB1_195 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$3173, %ax              # imm = 0xC65
	jne	.LBB1_209
# %bb.198:                              # %fallbackSort.split585
                                        #   in Loop: Header=BB1_195 Depth=2
	movq	%r12, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$3173, BasicBlockSignatureTracker # imm = 0xC65
	movw	$68, RunTimeSignatureAdjuster
	jmp	.LBB1_195
.LBB1_199:                              #   in Loop: Header=BB1_191 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$218, %ax
	cmpw	$3200, %ax              # imm = 0xC80
	jne	.LBB1_210
# %bb.200:                              # %fallbackSort.split587
                                        #   in Loop: Header=BB1_191 Depth=1
	movq	%r12, %rsi
	movslq	(%rsi), %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rax,4), %ecx
	addl	$-1, %ecx
	movl	%ecx, (%rdx,%rax,4)
	movl	(%rsi), %eax
	movq	(%r14), %rcx
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdx
	movslq	(%rbx), %rsi
	movl	(%rdx,%rsi,4), %edx
	movb	%al, (%rcx,%rdx)
	movw	$3200, BasicBlockSignatureTracker # imm = 0xC80
	movw	$0, RunTimeSignatureAdjuster
# %bb.201:                              #   in Loop: Header=BB1_191 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$3263, %ax              # imm = 0xCBF
	jne	.LBB1_210
# %bb.202:                              # %fallbackSort.split589
                                        #   in Loop: Header=BB1_191 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$3263, BasicBlockSignatureTracker # imm = 0xCBF
	movw	$1864, RunTimeSignatureAdjuster # imm = 0x748
	jmp	.LBB1_191
.LBB1_203:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1840, %ax              # imm = 0x730
	cmpw	$3277, %ax              # imm = 0xCCD
	jne	.LBB1_229
# %bb.204:                              # %fallbackSort.split581
	movl	(%r12), %eax
	movw	$3277, BasicBlockSignatureTracker # imm = 0xCCD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jl	.LBB1_207
# %bb.205:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$3310, %ax              # imm = 0xCEE
	jne	.LBB1_229
# %bb.206:                              # %fallbackSort.split593
	movw	$3310, BasicBlockSignatureTracker # imm = 0xCEE
	movw	$3753, RunTimeSignatureAdjuster # imm = 0xEA9
	movl	$1005, %edi             # imm = 0x3ED
	callq	BZ2_bz__AssertH__fail
	movw	$3310, BasicBlockSignatureTracker # imm = 0xCEE
	movw	$3753, RunTimeSignatureAdjuster # imm = 0xEA9
	movw	$3310, BasicBlockSignatureTracker # imm = 0xCEE
	movw	$35, RunTimeSignatureAdjuster
.LBB1_207:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$467, %ax               # imm = 0x1D3
	xorw	%cx, %ax
	cmpw	$3358, %ax              # imm = 0xD1E
	jne	.LBB1_229
# %bb.208:                              # %fallbackSort.split591
	movw	$3358, BasicBlockSignatureTracker # imm = 0xD1E
	movw	$3356, RunTimeSignatureAdjuster # imm = 0xD1C
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB1_209:                              # %CFerrorHandler.fallbackSort.loopexit
	jmp	.LBB1_229
.LBB1_210:                              # %CFerrorHandler.fallbackSort.loopexit1
	jmp	.LBB1_229
.LBB1_211:                              # %CFerrorHandler.fallbackSort.loopexit2
	jmp	.LBB1_229
.LBB1_212:                              # %CFerrorHandler.fallbackSort.loopexit3
	jmp	.LBB1_229
.LBB1_213:                              # %CFerrorHandler.fallbackSort.loopexit4
	jmp	.LBB1_229
.LBB1_214:                              # %CFerrorHandler.fallbackSort.loopexit5
	jmp	.LBB1_229
.LBB1_215:                              # %CFerrorHandler.fallbackSort.loopexit6
	jmp	.LBB1_229
.LBB1_216:                              # %CFerrorHandler.fallbackSort.loopexit7
	jmp	.LBB1_229
.LBB1_217:                              # %CFerrorHandler.fallbackSort.loopexit8
	jmp	.LBB1_229
.LBB1_218:                              # %CFerrorHandler.fallbackSort.loopexit9
	jmp	.LBB1_229
.LBB1_219:                              # %CFerrorHandler.fallbackSort.loopexit10
	jmp	.LBB1_229
.LBB1_220:                              # %CFerrorHandler.fallbackSort.loopexit11
	jmp	.LBB1_229
.LBB1_221:                              # %CFerrorHandler.fallbackSort.loopexit12
	jmp	.LBB1_229
.LBB1_222:                              # %CFerrorHandler.fallbackSort.loopexit13
	jmp	.LBB1_229
.LBB1_223:                              # %CFerrorHandler.fallbackSort.loopexit14
	jmp	.LBB1_229
.LBB1_224:                              # %CFerrorHandler.fallbackSort.loopexit15
	jmp	.LBB1_229
.LBB1_225:                              # %CFerrorHandler.fallbackSort.loopexit16
	jmp	.LBB1_229
.LBB1_226:                              # %CFerrorHandler.fallbackSort.loopexit17
	jmp	.LBB1_229
.LBB1_227:                              # %CFerrorHandler.fallbackSort.loopexit18
	jmp	.LBB1_229
.LBB1_228:                              # %CFerrorHandler.fallbackSort.loopexit19
	jmp	.LBB1_229
.LBB1_229:                              # %CFerrorHandler.fallbackSort
	callq	FAULT_DETECTED_CFC
.Lfunc_end1:
	.size	fallbackSort, .Lfunc_end1-fallbackSort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mainSort
	.type	mainSort,@function
mainSort:                               # @mainSort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$200, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -72(%rbp)         # 4-byte Spill
	movw	BasicBlockSignatureTracker, %bx
	movw	RunTimeSignatureAdjuster, %ax
	xorw	$3462, %bx              # imm = 0xD86
	xorw	%ax, %bx
	cmpw	$3435, %bx              # imm = 0xD6B
	jne	.LBB2_260
# %bb.1:                                # %mainSort.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -48(%rbp)         # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -96(%rbp)         # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -64(%rbp)         # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -208(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-1024, %r10            # imm = 0xFC00
	movq	%r10, -120(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-256, %r10
	movq	%r10, -152(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-1024, %r10            # imm = 0xFC00
	movq	%r10, -144(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-1024, %r10            # imm = 0xFC00
	movq	%r10, -136(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -168(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -176(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -216(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -192(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -112(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -200(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -240(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -160(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -128(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -232(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -224(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%r11, %r14
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rdi, (%rax)
	movq	%rsi, (%r9)
	movq	%rdx, (%r14)
	movq	%rcx, (%r12)
	movl	%r8d, (%rbx)
	movl	-72(%rbp), %eax         # 4-byte Reload
	movl	%eax, (%r15)
	movq	16(%rbp), %rax
	movq	%rax, (%r13)
	movl	(%r15), %eax
	movw	$3435, BasicBlockSignatureTracker # imm = 0xD6B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB2_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$247, %ax
	cmpw	$3484, %ax              # imm = 0xD9C
	jne	.LBB2_260
# %bb.3:                                # %mainSort.split445
	movabsq	$.L.str.6, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	movq	%r13, -184(%rbp)        # 8-byte Spill
	movq	%r15, -72(%rbp)         # 8-byte Spill
	movq	%r12, -88(%rbp)         # 8-byte Spill
	movq	%r14, -80(%rbp)         # 8-byte Spill
	movq	%r9, %r14
	movq	%r10, %r12
	callq	fprintf
	movq	%r12, %r10
	movq	%r14, %r9
	movq	-80(%rbp), %r14         # 8-byte Reload
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	-72(%rbp), %r15         # 8-byte Reload
	movq	-184(%rbp), %r13        # 8-byte Reload
	movw	$3484, BasicBlockSignatureTracker # imm = 0xD9C
	movw	$247, RunTimeSignatureAdjuster
.LBB2_4:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$207, %ax
	xorw	%cx, %ax
	cmpw	$3492, %ax              # imm = 0xDA4
	jne	.LBB2_260
# %bb.5:                                # %mainSort.split447
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movl	$65536, (%rdx)          # imm = 0x10000
	movw	$3492, BasicBlockSignatureTracker # imm = 0xDA4
	movw	$0, RunTimeSignatureAdjuster
.LBB2_6:                                # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$89, %ax
	xorw	%cx, %ax
	cmpw	$3581, %ax              # imm = 0xDFD
	jne	.LBB2_259
# %bb.7:                                # %mainSort.split449
                                        #   in Loop: Header=BB2_6 Depth=1
	movl	(%rdx), %eax
	movw	$3581, BasicBlockSignatureTracker # imm = 0xDFD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB2_12
# %bb.8:                                #   in Loop: Header=BB2_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$972, %ax               # imm = 0x3CC
	cmpw	$3633, %ax              # imm = 0xE31
	jne	.LBB2_259
# %bb.9:                                # %mainSort.split451
                                        #   in Loop: Header=BB2_6 Depth=1
	movq	(%r12), %rax
	movslq	(%rdx), %rcx
	movl	$0, (%rax,%rcx,4)
	movw	$3633, BasicBlockSignatureTracker # imm = 0xE31
	movw	$0, RunTimeSignatureAdjuster
# %bb.10:                               #   in Loop: Header=BB2_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$118, %ax
	cmpw	$3655, %ax              # imm = 0xE47
	jne	.LBB2_259
# %bb.11:                               # %mainSort.split455
                                        #   in Loop: Header=BB2_6 Depth=1
	movl	(%rdx), %eax
	addl	$-1, %eax
	movl	%eax, (%rdx)
	movw	$3655, BasicBlockSignatureTracker # imm = 0xE47
	movw	$995, RunTimeSignatureAdjuster # imm = 0x3E3
	jmp	.LBB2_6
.LBB2_12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$901, %ax               # imm = 0x385
	cmpw	$3704, %ax              # imm = 0xE78
	jne	.LBB2_260
# %bb.13:                               # %mainSort.split453
	movq	(%r9), %rax
	movzbl	(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rbx), %eax
	subl	$1, %eax
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movw	$3704, BasicBlockSignatureTracker # imm = 0xE78
	movw	$0, RunTimeSignatureAdjuster
.LBB2_14:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3, %ax
	xorw	%cx, %ax
	cmpw	$3707, %ax              # imm = 0xE7B
	jne	.LBB2_258
# %bb.15:                               # %mainSort.split457
                                        #   in Loop: Header=BB2_14 Depth=1
	movl	(%rsi), %eax
	movw	$3707, BasicBlockSignatureTracker # imm = 0xE7B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB2_20
# %bb.16:                               #   in Loop: Header=BB2_14 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$229, %ax
	cmpw	$3742, %ax              # imm = 0xE9E
	jne	.LBB2_258
# %bb.17:                               # %mainSort.split459
                                        #   in Loop: Header=BB2_14 Depth=1
	movq	(%r14), %rax
	movslq	(%rsi), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movslq	(%rsi), %rdx
	movzbl	(%rcx,%rdx), %ecx
	movzwl	%cx, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movl	%eax, (%rdi)
	movq	(%r12), %rax
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%r14), %rax
	movl	(%rsi), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movl	(%rdi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movl	(%rsi), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	movzwl	%cx, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movl	%eax, (%rdi)
	movq	(%r12), %rax
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%r14), %rax
	movl	(%rsi), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movl	(%rdi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movl	(%rsi), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	movzwl	%cx, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movl	%eax, (%rdi)
	movq	(%r12), %rax
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%r14), %rax
	movl	(%rsi), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movl	(%rdi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movl	(%rsi), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	movzwl	%cx, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movl	%eax, (%rdi)
	movq	(%r12), %rax
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movw	$3742, BasicBlockSignatureTracker # imm = 0xE9E
	movw	$0, RunTimeSignatureAdjuster
# %bb.18:                               #   in Loop: Header=BB2_14 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$3749, %ax              # imm = 0xEA5
	jne	.LBB2_258
# %bb.19:                               # %mainSort.split463
                                        #   in Loop: Header=BB2_14 Depth=1
	movl	(%rsi), %eax
	subl	$4, %eax
	movl	%eax, (%rsi)
	movw	$3749, BasicBlockSignatureTracker # imm = 0xEA5
	movw	$221, RunTimeSignatureAdjuster
	jmp	.LBB2_14
.LBB2_20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$208, %ax
	cmpw	$3755, %ax              # imm = 0xEAB
	jne	.LBB2_260
# %bb.21:                               # %mainSort.split461
	movw	$3755, BasicBlockSignatureTracker # imm = 0xEAB
	movw	$0, RunTimeSignatureAdjuster
	movq	-56(%rbp), %rsi         # 8-byte Reload
.LBB2_22:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$97, %ax
	xorw	%cx, %ax
	cmpw	$3786, %ax              # imm = 0xECA
	jne	.LBB2_257
# %bb.23:                               # %mainSort.split465
                                        #   in Loop: Header=BB2_22 Depth=1
	movl	(%rsi), %eax
	movw	$3786, BasicBlockSignatureTracker # imm = 0xECA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB2_28
# %bb.24:                               #   in Loop: Header=BB2_22 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$3806, %ax              # imm = 0xEDE
	jne	.LBB2_257
# %bb.25:                               # %mainSort.split467
                                        #   in Loop: Header=BB2_22 Depth=1
	movq	(%r14), %rax
	movslq	(%rsi), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movslq	(%rsi), %rdx
	movzbl	(%rcx,%rdx), %ecx
	movzwl	%cx, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movl	%eax, (%rdi)
	movq	(%r12), %rax
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movw	$3806, BasicBlockSignatureTracker # imm = 0xEDE
	movw	$0, RunTimeSignatureAdjuster
# %bb.26:                               #   in Loop: Header=BB2_22 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$3810, %ax              # imm = 0xEE2
	jne	.LBB2_257
# %bb.27:                               # %mainSort.split471
                                        #   in Loop: Header=BB2_22 Depth=1
	movl	(%rsi), %eax
	addl	$-1, %eax
	movl	%eax, (%rsi)
	movw	$3810, BasicBlockSignatureTracker # imm = 0xEE2
	movw	$73, RunTimeSignatureAdjuster
	jmp	.LBB2_22
.LBB2_28:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$3811, %ax              # imm = 0xEE3
	jne	.LBB2_260
# %bb.29:                               # %mainSort.split469
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	$0, (%rsi)
	movw	$3811, BasicBlockSignatureTracker # imm = 0xEE3
	movw	$0, RunTimeSignatureAdjuster
.LBB2_30:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$486, %ax               # imm = 0x1E6
	xorw	%cx, %ax
	cmpw	$3845, %ax              # imm = 0xF05
	jne	.LBB2_256
# %bb.31:                               # %mainSort.split473
                                        #   in Loop: Header=BB2_30 Depth=1
	movl	(%rsi), %eax
	movw	$3845, BasicBlockSignatureTracker # imm = 0xF05
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$34, %eax
	jge	.LBB2_36
# %bb.32:                               #   in Loop: Header=BB2_30 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$3890, %ax              # imm = 0xF32
	jne	.LBB2_256
# %bb.33:                               # %mainSort.split475
                                        #   in Loop: Header=BB2_30 Depth=1
	movq	%r10, -72(%rbp)         # 8-byte Spill
	movq	(%r9), %rax
	movslq	(%rsi), %rcx
	movb	(%rax,%rcx), %al
	movq	%r9, %r8
	movq	(%r9), %rcx
	movl	(%rbx), %edx
	addl	(%rsi), %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movq	%r14, %rdi
	movq	(%r14), %rax
	movq	%rbx, %rdx
	movl	(%rbx), %ecx
	addl	(%rsi), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movw	$3890, BasicBlockSignatureTracker # imm = 0xF32
	movw	$0, RunTimeSignatureAdjuster
# %bb.34:                               #   in Loop: Header=BB2_30 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$3911, %ax              # imm = 0xF47
	movq	%rdx, %rbx
	movq	%r8, %r9
	movq	%rdi, %r14
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %r10         # 8-byte Reload
	jne	.LBB2_256
# %bb.35:                               # %mainSort.split479
                                        #   in Loop: Header=BB2_30 Depth=1
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movw	$3911, BasicBlockSignatureTracker # imm = 0xF47
	movw	$420, RunTimeSignatureAdjuster # imm = 0x1A4
	jmp	.LBB2_30
.LBB2_36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$91, %ax
	cmpw	$3934, %ax              # imm = 0xF5E
	jne	.LBB2_260
# %bb.37:                               # %mainSort.split477
	movq	%r10, -72(%rbp)         # 8-byte Spill
	movq	%r9, -88(%rbp)          # 8-byte Spill
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movl	(%r15), %eax
	movw	$3934, BasicBlockSignatureTracker # imm = 0xF5E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB2_40
# %bb.38:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$3958, %ax              # imm = 0xF76
	jne	.LBB2_260
# %bb.39:                               # %mainSort.split481
	movabsq	$.L.str.2, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$3958, BasicBlockSignatureTracker # imm = 0xF76
	movw	$40, RunTimeSignatureAdjuster
.LBB2_40:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$231, %ax
	xorw	%cx, %ax
	cmpw	$4025, %ax              # imm = 0xFB9
	jne	.LBB2_260
# %bb.41:                               # %mainSort.split483
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$1, (%rax)
	movw	$4025, BasicBlockSignatureTracker # imm = 0xFB9
	movw	$0, RunTimeSignatureAdjuster
.LBB2_42:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$105, %ax
	xorw	%cx, %ax
	cmpw	$4048, %ax              # imm = 0xFD0
	jne	.LBB2_255
# %bb.43:                               # %mainSort.split485
                                        #   in Loop: Header=BB2_42 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4048, BasicBlockSignatureTracker # imm = 0xFD0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$65536, %eax            # imm = 0x10000
	jg	.LBB2_48
# %bb.44:                               #   in Loop: Header=BB2_42 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$4056, %ax              # imm = 0xFD8
	jne	.LBB2_255
# %bb.45:                               # %mainSort.split487
                                        #   in Loop: Header=BB2_42 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movw	$4056, BasicBlockSignatureTracker # imm = 0xFD8
	movw	$0, RunTimeSignatureAdjuster
# %bb.46:                               #   in Loop: Header=BB2_42 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$4069, %ax              # imm = 0xFE5
	jne	.LBB2_255
# %bb.47:                               # %mainSort.split491
                                        #   in Loop: Header=BB2_42 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$4069, BasicBlockSignatureTracker # imm = 0xFE5
	movw	$92, RunTimeSignatureAdjuster
	jmp	.LBB2_42
.LBB2_48:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8146, %ax              # imm = 0x1FD2
	cmpw	$4098, %ax              # imm = 0x1002
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	jne	.LBB2_260
# %bb.49:                               # %mainSort.split489
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	shll	$8, %eax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movw	%ax, (%rdx)
	movl	(%rcx), %eax
	subl	$1, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$4098, BasicBlockSignatureTracker # imm = 0x1002
	movw	$0, RunTimeSignatureAdjuster
.LBB2_50:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$4109, %ax              # imm = 0x100D
	jne	.LBB2_254
# %bb.51:                               # %mainSort.split493
                                        #   in Loop: Header=BB2_50 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4109, BasicBlockSignatureTracker # imm = 0x100D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB2_56
# %bb.52:                               #   in Loop: Header=BB2_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$4113, %ax              # imm = 0x1011
	jne	.LBB2_254
# %bb.53:                               # %mainSort.split495
                                        #   in Loop: Header=BB2_50 Depth=1
	movq	-216(%rbp), %rsi        # 8-byte Reload
	movzwl	(%rsi), %eax
	sarl	$8, %eax
	movq	-88(%rbp), %r9          # 8-byte Reload
	movq	(%r9), %rcx
	movq	-56(%rbp), %r10         # 8-byte Reload
	movslq	(%r10), %rdx
	movzbl	(%rcx,%rdx), %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, (%rsi)
	movq	%r12, %rbx
	movq	(%rbx), %rax
	movzwl	(%rsi), %ecx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movl	(%rdi), %eax
	movq	(%rbx), %rcx
	movzwl	(%rsi), %edx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	(%r8), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movzwl	(%rsi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movl	(%r10), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, (%rsi)
	movq	(%rbx), %rax
	movzwl	(%rsi), %ecx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%rdi), %eax
	movq	(%rbx), %rcx
	movzwl	(%rsi), %edx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	subl	$1, %eax
	movq	(%r8), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movzwl	(%rsi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movl	(%r10), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, (%rsi)
	movq	(%rbx), %rax
	movzwl	(%rsi), %ecx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%rdi), %eax
	movq	(%rbx), %rcx
	movzwl	(%rsi), %edx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	subl	$2, %eax
	movq	(%r8), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movzwl	(%rsi), %eax
	sarl	$8, %eax
	movq	(%r9), %rcx
	movl	(%r10), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, (%rsi)
	movq	(%rbx), %rax
	movzwl	(%rsi), %ecx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%rdi), %eax
	movq	(%rbx), %rcx
	movzwl	(%rsi), %edx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	subl	$3, %eax
	movq	(%r8), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$4113, BasicBlockSignatureTracker # imm = 0x1011
	movw	$0, RunTimeSignatureAdjuster
# %bb.54:                               #   in Loop: Header=BB2_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$4119, %ax              # imm = 0x1017
	jne	.LBB2_254
# %bb.55:                               # %mainSort.split499
                                        #   in Loop: Header=BB2_50 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	subl	$4, %eax
	movl	%eax, (%rcx)
	movw	$4119, BasicBlockSignatureTracker # imm = 0x1017
	movw	$21, RunTimeSignatureAdjuster
	jmp	.LBB2_50
.LBB2_56:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$4122, %ax              # imm = 0x101A
	jne	.LBB2_260
# %bb.57:                               # %mainSort.split497
	movw	$4122, BasicBlockSignatureTracker # imm = 0x101A
	movw	$0, RunTimeSignatureAdjuster
.LBB2_58:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$43, %ax
	xorw	%cx, %ax
	cmpw	$4145, %ax              # imm = 0x1031
	jne	.LBB2_253
# %bb.59:                               # %mainSort.split501
                                        #   in Loop: Header=BB2_58 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4145, BasicBlockSignatureTracker # imm = 0x1031
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB2_64
# %bb.60:                               #   in Loop: Header=BB2_58 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$4157, %ax              # imm = 0x103D
	jne	.LBB2_253
# %bb.61:                               # %mainSort.split503
                                        #   in Loop: Header=BB2_58 Depth=1
	movq	-216(%rbp), %rbx        # 8-byte Reload
	movzwl	(%rbx), %eax
	sarl	$8, %eax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rdx
	movzbl	(%rcx,%rdx), %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, (%rbx)
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movl	(%rdi), %eax
	movq	(%rdx), %rcx
	movzwl	(%rbx), %edx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rsi), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$4157, BasicBlockSignatureTracker # imm = 0x103D
	movw	$0, RunTimeSignatureAdjuster
# %bb.62:                               #   in Loop: Header=BB2_58 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$108, %ax
	cmpw	$4177, %ax              # imm = 0x1051
	jne	.LBB2_253
# %bb.63:                               # %mainSort.split507
                                        #   in Loop: Header=BB2_58 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$4177, BasicBlockSignatureTracker # imm = 0x1051
	movw	$75, RunTimeSignatureAdjuster
	jmp	.LBB2_58
.LBB2_64:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$111, %ax
	cmpw	$4190, %ax              # imm = 0x105E
	jne	.LBB2_260
# %bb.65:                               # %mainSort.split505
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$4190, BasicBlockSignatureTracker # imm = 0x105E
	movw	$0, RunTimeSignatureAdjuster
.LBB2_66:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$50, %ax
	xorw	%cx, %ax
	cmpw	$4204, %ax              # imm = 0x106C
	jne	.LBB2_252
# %bb.67:                               # %mainSort.split509
                                        #   in Loop: Header=BB2_66 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4204, BasicBlockSignatureTracker # imm = 0x106C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB2_72
# %bb.68:                               #   in Loop: Header=BB2_66 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$226, %ax
	cmpw	$4238, %ax              # imm = 0x108E
	jne	.LBB2_252
# %bb.69:                               # %mainSort.split511
                                        #   in Loop: Header=BB2_66 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movb	$0, (%rdx,%rax)
	movl	(%rcx), %eax
	movslq	(%rcx), %rcx
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movw	$4238, BasicBlockSignatureTracker # imm = 0x108E
	movw	$0, RunTimeSignatureAdjuster
# %bb.70:                               #   in Loop: Header=BB2_66 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$4241, %ax              # imm = 0x1091
	jne	.LBB2_252
# %bb.71:                               # %mainSort.split515
                                        #   in Loop: Header=BB2_66 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$4241, BasicBlockSignatureTracker # imm = 0x1091
	movw	$207, RunTimeSignatureAdjuster
	jmp	.LBB2_66
.LBB2_72:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$171, %ax
	cmpw	$4295, %ax              # imm = 0x10C7
	jne	.LBB2_260
# %bb.73:                               # %mainSort.split513
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	movw	$4295, BasicBlockSignatureTracker # imm = 0x10C7
	movw	$0, RunTimeSignatureAdjuster
.LBB2_74:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$11, %ax
	xorw	%cx, %ax
	cmpw	$4300, %ax              # imm = 0x10CC
	jne	.LBB2_251
# %bb.75:                               # %mainSort.split517
                                        #   in Loop: Header=BB2_74 Depth=1
	movq	-112(%rbp), %rcx        # 8-byte Reload
	imull	$3, (%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$4300, BasicBlockSignatureTracker # imm = 0x10CC
	movw	$0, RunTimeSignatureAdjuster
# %bb.76:                               #   in Loop: Header=BB2_74 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$453, %ax               # imm = 0x1C5
	cmpw	$4361, %ax              # imm = 0x1109
	jne	.LBB2_251
# %bb.77:                               # %mainSort.split519
                                        #   in Loop: Header=BB2_74 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$4361, BasicBlockSignatureTracker # imm = 0x1109
	movw	$462, RunTimeSignatureAdjuster # imm = 0x1CE
	cmpl	$256, %eax              # imm = 0x100
	jle	.LBB2_74
# %bb.78:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20227, %ax             # imm = 0x4F03
	cmpw	$24074, %ax             # imm = 0x5E0A
	jne	.LBB2_260
# %bb.79:                               # %mainSort.split521
	movw	$24074, BasicBlockSignatureTracker # imm = 0x5E0A
	movw	$20227, RunTimeSignatureAdjuster # imm = 0x4F03
# %bb.80:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$4367, %ax              # imm = 0x110F
	jne	.LBB2_260
# %bb.81:                               # %mainSort.split677
	movw	$4367, BasicBlockSignatureTracker # imm = 0x110F
	movw	$0, RunTimeSignatureAdjuster
.LBB2_82:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_84 Depth 2
                                        #       Child Loop BB2_88 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$4371, %ax              # imm = 0x1113
	jne	.LBB2_250
# %bb.83:                               # %mainSort.split523
                                        #   in Loop: Header=BB2_82 Depth=1
	movl	$3, %ecx
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	cltd
	idivl	%ecx
	movl	%eax, (%rsi)
	movl	(%rsi), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$4371, BasicBlockSignatureTracker # imm = 0x1113
	movw	$0, RunTimeSignatureAdjuster
.LBB2_84:                               #   Parent Loop BB2_82 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB2_88 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$9, %ax
	xorw	%cx, %ax
	cmpw	$4378, %ax              # imm = 0x111A
	jne	.LBB2_249
# %bb.85:                               # %mainSort.split525
                                        #   in Loop: Header=BB2_84 Depth=2
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4378, BasicBlockSignatureTracker # imm = 0x111A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB2_102
# %bb.86:                               #   in Loop: Header=BB2_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$4427, %ax              # imm = 0x114B
	jne	.LBB2_249
# %bb.87:                               # %mainSort.split527
                                        #   in Loop: Header=BB2_84 Depth=2
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rax
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx,%rax,4), %eax
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rcx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$4427, BasicBlockSignatureTracker # imm = 0x114B
	movw	$0, RunTimeSignatureAdjuster
.LBB2_88:                               #   Parent Loop BB2_82 Depth=1
                                        #     Parent Loop BB2_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$23, %ax
	xorw	%cx, %ax
	cmpw	$4444, %ax              # imm = 0x115C
	jne	.LBB2_248
# %bb.89:                               # %mainSort.split531
                                        #   in Loop: Header=BB2_88 Depth=3
	movq	%r12, %rsi
	movq	(%rsi), %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %ecx
	movq	-112(%rbp), %rbx        # 8-byte Reload
	subl	(%rbx), %ecx
	movslq	%ecx, %rcx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movl	(%rdi,%rcx,4), %ecx
	addl	$1, %ecx
	shll	$8, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movl	(%rdx), %edx
	subl	(%rbx), %edx
	movslq	%edx, %rdx
	movl	(%rdi,%rdx,4), %edx
	shll	$8, %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movq	(%rsi), %rcx
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movl	(%rdi), %edx
	addl	$1, %edx
	shll	$8, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	(%rsi), %rdx
	movl	(%rdi), %esi
	shll	$8, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movw	$4444, BasicBlockSignatureTracker # imm = 0x115C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jbe	.LBB2_96
# %bb.90:                               #   in Loop: Header=BB2_88 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$4454, %ax              # imm = 0x1166
	jne	.LBB2_248
# %bb.91:                               # %mainSort.split533
                                        #   in Loop: Header=BB2_88 Depth=3
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %eax
	movq	-112(%rbp), %rdi        # 8-byte Reload
	subl	(%rdi), %eax
	cltq
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi,%rax,4), %eax
	movslq	(%rdx), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	(%rdx), %eax
	subl	(%rdi), %eax
	movl	%eax, (%rdx)
	movl	(%rdx), %eax
	movl	(%rdi), %ecx
	subl	$1, %ecx
	movw	$4454, BasicBlockSignatureTracker # imm = 0x1166
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB2_94
# %bb.92:                               #   in Loop: Header=BB2_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$229, %ax
	cmpw	$4483, %ax              # imm = 0x1183
	jne	.LBB2_249
# %bb.93:                               # %mainSort.split537
                                        #   in Loop: Header=BB2_84 Depth=2
	movw	$4483, BasicBlockSignatureTracker # imm = 0x1183
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB2_98
.LBB2_94:                               #   in Loop: Header=BB2_88 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$245, %ax
	cmpw	$4499, %ax              # imm = 0x1193
	jne	.LBB2_248
# %bb.95:                               # %mainSort.split539
                                        #   in Loop: Header=BB2_88 Depth=3
	movw	$4499, BasicBlockSignatureTracker # imm = 0x1193
	movw	$216, RunTimeSignatureAdjuster
	jmp	.LBB2_88
.LBB2_96:                               #   in Loop: Header=BB2_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$244, %ax
	cmpw	$4520, %ax              # imm = 0x11A8
	jne	.LBB2_249
# %bb.97:                               # %mainSort.split535
                                        #   in Loop: Header=BB2_84 Depth=2
	movw	$4520, BasicBlockSignatureTracker # imm = 0x11A8
	movw	$43, RunTimeSignatureAdjuster
.LBB2_98:                               #   in Loop: Header=BB2_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$4530, %ax              # imm = 0x11B2
	jne	.LBB2_249
# %bb.99:                               # %mainSort.split541
                                        #   in Loop: Header=BB2_84 Depth=2
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movw	$4530, BasicBlockSignatureTracker # imm = 0x11B2
	movw	$0, RunTimeSignatureAdjuster
# %bb.100:                              #   in Loop: Header=BB2_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$4547, %ax              # imm = 0x11C3
	jne	.LBB2_249
# %bb.101:                              # %mainSort.split543
                                        #   in Loop: Header=BB2_84 Depth=2
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$4547, BasicBlockSignatureTracker # imm = 0x11C3
	movw	$208, RunTimeSignatureAdjuster
	jmp	.LBB2_84
.LBB2_102:                              #   in Loop: Header=BB2_82 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$232, %ax
	cmpw	$4594, %ax              # imm = 0x11F2
	jne	.LBB2_250
# %bb.103:                              # %mainSort.split529
                                        #   in Loop: Header=BB2_82 Depth=1
	movw	$4594, BasicBlockSignatureTracker # imm = 0x11F2
	movw	$0, RunTimeSignatureAdjuster
# %bb.104:                              #   in Loop: Header=BB2_82 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1020, %ax              # imm = 0x3FC
	cmpw	$4622, %ax              # imm = 0x120E
	jne	.LBB2_250
# %bb.105:                              # %mainSort.split545
                                        #   in Loop: Header=BB2_82 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$4622, BasicBlockSignatureTracker # imm = 0x120E
	movw	$769, RunTimeSignatureAdjuster # imm = 0x301
	cmpl	$1, %eax
	jne	.LBB2_82
# %bb.106:                              # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1640, %ax              # imm = 0x668
	cmpw	$5222, %ax              # imm = 0x1466
	jne	.LBB2_260
# %bb.107:                              # %mainSort.split547
	movw	$5222, BasicBlockSignatureTracker # imm = 0x1466
	movw	$1640, RunTimeSignatureAdjuster # imm = 0x668
# %bb.108:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$4623, %ax              # imm = 0x120F
	jne	.LBB2_260
# %bb.109:                              # %mainSort.split679
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$4623, BasicBlockSignatureTracker # imm = 0x120F
	movw	$0, RunTimeSignatureAdjuster
.LBB2_110:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_114 Depth 2
                                        #     Child Loop BB2_146 Depth 2
                                        #     Child Loop BB2_154 Depth 2
                                        #     Child Loop BB2_170 Depth 2
                                        #     Child Loop BB2_196 Depth 2
                                        #     Child Loop BB2_206 Depth 2
                                        #     Child Loop BB2_212 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$4639, %ax              # imm = 0x121F
	jne	.LBB2_247
# %bb.111:                              # %mainSort.split549
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4639, BasicBlockSignatureTracker # imm = 0x121F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB2_232
# %bb.112:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$125, %ax
	cmpw	$4706, %ax              # imm = 0x1262
	jne	.LBB2_247
# %bb.113:                              # %mainSort.split551
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$4706, BasicBlockSignatureTracker # imm = 0x1262
	movw	$0, RunTimeSignatureAdjuster
.LBB2_114:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29, %ax
	xorw	%cx, %ax
	cmpw	$4735, %ax              # imm = 0x127F
	jne	.LBB2_246
# %bb.115:                              # %mainSort.split555
                                        #   in Loop: Header=BB2_114 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$4735, BasicBlockSignatureTracker # imm = 0x127F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB2_140
# %bb.116:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$247, %ax
	cmpw	$4744, %ax              # imm = 0x1288
	jne	.LBB2_246
# %bb.117:                              # %mainSort.split557
                                        #   in Loop: Header=BB2_114 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$4744, BasicBlockSignatureTracker # imm = 0x1288
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB2_136
# %bb.118:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$4760, %ax              # imm = 0x1298
	jne	.LBB2_246
# %bb.119:                              # %mainSort.split561
                                        #   in Loop: Header=BB2_114 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	(%rcx), %eax
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%r12), %rax
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$2097152, %eax          # imm = 0x200000
	movw	$4760, BasicBlockSignatureTracker # imm = 0x1298
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB2_134
# %bb.120:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$4769, %ax              # imm = 0x12A1
	jne	.LBB2_246
# %bb.121:                              # %mainSort.split567
                                        #   in Loop: Header=BB2_114 Depth=2
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	-208(%rbp), %rsi        # 8-byte Reload
	movslq	(%rsi), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movq	(%rdx), %rax
	movl	(%rsi), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	subl	$1, %eax
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movl	(%rdi), %ecx
	movw	$4769, BasicBlockSignatureTracker # imm = 0x12A1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB2_132
# %bb.122:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$4772, %ax              # imm = 0x12A4
	jne	.LBB2_246
# %bb.123:                              # %mainSort.split569
                                        #   in Loop: Header=BB2_114 Depth=2
	movl	(%r15), %eax
	movw	$4772, BasicBlockSignatureTracker # imm = 0x12A4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jl	.LBB2_126
# %bb.124:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$4787, %ax              # imm = 0x12B3
	jne	.LBB2_246
# %bb.125:                              # %mainSort.split573
                                        #   in Loop: Header=BB2_114 Depth=2
	movabsq	$.L.str.7, %rsi
	movq	stderr, %rdi
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r8d
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r9d
	movq	-72(%rbp), %rax         # 8-byte Reload
	subl	(%rax), %r9d
	addl	$1, %r9d
	movb	$0, %al
	callq	fprintf
	movw	$4787, BasicBlockSignatureTracker # imm = 0x12B3
	movw	$23, RunTimeSignatureAdjuster
.LBB2_126:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$4792, %ax              # imm = 0x12B8
	jne	.LBB2_246
# %bb.127:                              # %mainSort.split575
                                        #   in Loop: Header=BB2_114 Depth=2
	movl	$2, %eax
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	movq	(%r14), %rdx
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %r8d
	movq	-200(%rbp), %rbx        # 8-byte Reload
	movl	(%rbx), %r9d
	movq	%r13, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	(%rax), %r10
	movw	$4792, BasicBlockSignatureTracker # imm = 0x12B8
	movw	$0, RunTimeSignatureAdjuster
	subq	$16, %rsp
	movl	$2, (%rsp)
	movq	%r10, 8(%rsp)
	callq	mainQSort3
	addq	$16, %rsp
	movw	$4792, BasicBlockSignatureTracker # imm = 0x12B8
	movw	$0, RunTimeSignatureAdjuster
	movl	(%rbx), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	subl	(%rcx), %eax
	addl	$1, %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movl	(%rax), %eax
	movw	$4792, BasicBlockSignatureTracker # imm = 0x12B8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB2_130
# %bb.128:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$4797, %ax              # imm = 0x12BD
	jne	.LBB2_260
# %bb.129:                              # %mainSort.split577
	movw	$4797, BasicBlockSignatureTracker # imm = 0x12BD
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB2_238
.LBB2_130:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$401, %ax               # imm = 0x191
	cmpw	$4905, %ax              # imm = 0x1329
	jne	.LBB2_246
# %bb.131:                              # %mainSort.split579
                                        #   in Loop: Header=BB2_114 Depth=2
	movw	$4905, BasicBlockSignatureTracker # imm = 0x1329
	movw	$392, RunTimeSignatureAdjuster # imm = 0x188
.LBB2_132:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$402, %ax               # imm = 0x192
	xorw	%cx, %ax
	cmpw	$4915, %ax              # imm = 0x1333
	jne	.LBB2_246
# %bb.133:                              # %mainSort.split571
                                        #   in Loop: Header=BB2_114 Depth=2
	movw	$4915, BasicBlockSignatureTracker # imm = 0x1333
	movw	$427, RunTimeSignatureAdjuster # imm = 0x1AB
.LBB2_134:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$422, %ax               # imm = 0x1A6
	xorw	%cx, %ax
	cmpw	$4926, %ax              # imm = 0x133E
	jne	.LBB2_246
# %bb.135:                              # %mainSort.split565
                                        #   in Loop: Header=BB2_114 Depth=2
	movq	(%r12), %rax
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$2097152, %edx          # imm = 0x200000
	movl	%edx, (%rax,%rcx,4)
	movw	$4926, BasicBlockSignatureTracker # imm = 0x133E
	movw	$438, RunTimeSignatureAdjuster # imm = 0x1B6
.LBB2_136:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$457, %ax               # imm = 0x1C9
	xorw	%cx, %ax
	cmpw	$4929, %ax              # imm = 0x1341
	jne	.LBB2_246
# %bb.137:                              # %mainSort.split563
                                        #   in Loop: Header=BB2_114 Depth=2
	movw	$4929, BasicBlockSignatureTracker # imm = 0x1341
	movw	$0, RunTimeSignatureAdjuster
# %bb.138:                              #   in Loop: Header=BB2_114 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$4936, %ax              # imm = 0x1348
	jne	.LBB2_246
# %bb.139:                              # %mainSort.split583
                                        #   in Loop: Header=BB2_114 Depth=2
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$4936, BasicBlockSignatureTracker # imm = 0x1348
	movw	$298, RunTimeSignatureAdjuster # imm = 0x12A
	jmp	.LBB2_114
.LBB2_140:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$307, %ax               # imm = 0x133
	cmpw	$4940, %ax              # imm = 0x134C
	jne	.LBB2_247
# %bb.141:                              # %mainSort.split559
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movw	$4940, BasicBlockSignatureTracker # imm = 0x134C
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB2_144
# %bb.142:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$4985, %ax              # imm = 0x1379
	jne	.LBB2_247
# %bb.143:                              # %mainSort.split585
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	$4985, BasicBlockSignatureTracker # imm = 0x1379
	movw	$4414, RunTimeSignatureAdjuster # imm = 0x113E
	movl	$1006, %edi             # imm = 0x3EE
	callq	BZ2_bz__AssertH__fail
	movw	$4985, BasicBlockSignatureTracker # imm = 0x1379
	movw	$4414, RunTimeSignatureAdjuster # imm = 0x113E
	movw	$4985, BasicBlockSignatureTracker # imm = 0x1379
	movw	$53, RunTimeSignatureAdjuster
.LBB2_144:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$220, %ax
	xorw	%cx, %ax
	cmpw	$5008, %ax              # imm = 0x1390
	jne	.LBB2_247
# %bb.145:                              # %mainSort.split587
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$5008, BasicBlockSignatureTracker # imm = 0x1390
	movw	$0, RunTimeSignatureAdjuster
.LBB2_146:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$81, %ax
	xorw	%cx, %ax
	cmpw	$5057, %ax              # imm = 0x13C1
	jne	.LBB2_245
# %bb.147:                              # %mainSort.split589
                                        #   in Loop: Header=BB2_146 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$5057, BasicBlockSignatureTracker # imm = 0x13C1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB2_152
# %bb.148:                              #   in Loop: Header=BB2_146 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$5064, %ax              # imm = 0x13C8
	jne	.LBB2_245
# %bb.149:                              # %mainSort.split591
                                        #   in Loop: Header=BB2_146 Depth=2
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	shll	$8, %ecx
	movq	-64(%rbp), %rdi         # 8-byte Reload
	addl	(%rdi), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	movslq	(%rsi), %rcx
	movq	-144(%rbp), %rbx        # 8-byte Reload
	movl	%eax, (%rbx,%rcx,4)
	movq	(%rdx), %rax
	movl	(%rsi), %ecx
	shll	$8, %ecx
	addl	(%rdi), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	subl	$1, %eax
	movslq	(%rsi), %rcx
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movw	$5064, BasicBlockSignatureTracker # imm = 0x13C8
	movw	$0, RunTimeSignatureAdjuster
# %bb.150:                              #   in Loop: Header=BB2_146 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1993, %ax              # imm = 0x7C9
	cmpw	$5121, %ax              # imm = 0x1401
	jne	.LBB2_245
# %bb.151:                              # %mainSort.split595
                                        #   in Loop: Header=BB2_146 Depth=2
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$5121, BasicBlockSignatureTracker # imm = 0x1401
	movw	$1937, RunTimeSignatureAdjuster # imm = 0x791
	jmp	.LBB2_146
.LBB2_152:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2004, %ax              # imm = 0x7D4
	cmpw	$5141, %ax              # imm = 0x1415
	jne	.LBB2_247
# %bb.153:                              # %mainSort.split593
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	(%r12), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	shll	$8, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$5141, BasicBlockSignatureTracker # imm = 0x1415
	movw	$0, RunTimeSignatureAdjuster
.LBB2_154:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$5153, %ax              # imm = 0x1421
	jne	.LBB2_244
# %bb.155:                              # %mainSort.split597
                                        #   in Loop: Header=BB2_154 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %ecx
	movw	$5153, BasicBlockSignatureTracker # imm = 0x1421
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB2_168
# %bb.156:                              #   in Loop: Header=BB2_154 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$118, %ax
	cmpw	$5207, %ax              # imm = 0x1457
	jne	.LBB2_244
# %bb.157:                              # %mainSort.split599
                                        #   in Loop: Header=BB2_154 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$5207, BasicBlockSignatureTracker # imm = 0x1457
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB2_160
# %bb.158:                              #   in Loop: Header=BB2_154 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$5212, %ax              # imm = 0x145C
	jne	.LBB2_244
# %bb.159:                              # %mainSort.split603
                                        #   in Loop: Header=BB2_154 Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movw	$5212, BasicBlockSignatureTracker # imm = 0x145C
	movw	$11, RunTimeSignatureAdjuster
.LBB2_160:                              #   in Loop: Header=BB2_154 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$5219, %ax              # imm = 0x1463
	jne	.LBB2_244
# %bb.161:                              # %mainSort.split605
                                        #   in Loop: Header=BB2_154 Depth=2
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movzbl	(%rcx), %eax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movw	$5219, BasicBlockSignatureTracker # imm = 0x1463
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB2_164
# %bb.162:                              #   in Loop: Header=BB2_154 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$226, %ax
	cmpw	$5249, %ax              # imm = 0x1481
	jne	.LBB2_244
# %bb.163:                              # %mainSort.split609
                                        #   in Loop: Header=BB2_154 Depth=2
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-168(%rbp), %rdx        # 8-byte Reload
	movzbl	(%rdx), %edx
	movq	-144(%rbp), %rbx        # 8-byte Reload
	movl	(%rbx,%rdx,4), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rbx,%rdx,4)
	movslq	%esi, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$5249, BasicBlockSignatureTracker # imm = 0x1481
	movw	$226, RunTimeSignatureAdjuster
.LBB2_164:                              #   in Loop: Header=BB2_154 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$225, %ax
	xorw	%cx, %ax
	cmpw	$5250, %ax              # imm = 0x1482
	jne	.LBB2_244
# %bb.165:                              # %mainSort.split607
                                        #   in Loop: Header=BB2_154 Depth=2
	movw	$5250, BasicBlockSignatureTracker # imm = 0x1482
	movw	$0, RunTimeSignatureAdjuster
# %bb.166:                              #   in Loop: Header=BB2_154 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$5301, %ax              # imm = 0x14B5
	jne	.LBB2_244
# %bb.167:                              # %mainSort.split611
                                        #   in Loop: Header=BB2_154 Depth=2
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$5301, BasicBlockSignatureTracker # imm = 0x14B5
	movw	$160, RunTimeSignatureAdjuster
	jmp	.LBB2_154
.LBB2_168:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$214, %ax
	cmpw	$5367, %ax              # imm = 0x14F7
	jne	.LBB2_247
# %bb.169:                              # %mainSort.split601
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	(%r12), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$1, %ecx
	shll	$8, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	subl	$1, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$5367, BasicBlockSignatureTracker # imm = 0x14F7
	movw	$0, RunTimeSignatureAdjuster
.LBB2_170:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$5368, %ax              # imm = 0x14F8
	jne	.LBB2_243
# %bb.171:                              # %mainSort.split613
                                        #   in Loop: Header=BB2_170 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %ecx
	movw	$5368, BasicBlockSignatureTracker # imm = 0x14F8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB2_184
# %bb.172:                              #   in Loop: Header=BB2_170 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$5372, %ax              # imm = 0x14FC
	jne	.LBB2_243
# %bb.173:                              # %mainSort.split615
                                        #   in Loop: Header=BB2_170 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$5372, BasicBlockSignatureTracker # imm = 0x14FC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB2_176
# %bb.174:                              #   in Loop: Header=BB2_170 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$5374, %ax              # imm = 0x14FE
	jne	.LBB2_243
# %bb.175:                              # %mainSort.split619
                                        #   in Loop: Header=BB2_170 Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movw	$5374, BasicBlockSignatureTracker # imm = 0x14FE
	movw	$2, RunTimeSignatureAdjuster
.LBB2_176:                              #   in Loop: Header=BB2_170 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$510, %ax               # imm = 0x1FE
	xorw	%cx, %ax
	cmpw	$5378, %ax              # imm = 0x1502
	jne	.LBB2_243
# %bb.177:                              # %mainSort.split621
                                        #   in Loop: Header=BB2_170 Depth=2
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movzbl	(%rcx), %eax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movw	$5378, BasicBlockSignatureTracker # imm = 0x1502
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB2_180
# %bb.178:                              #   in Loop: Header=BB2_170 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$5381, %ax              # imm = 0x1505
	jne	.LBB2_243
# %bb.179:                              # %mainSort.split625
                                        #   in Loop: Header=BB2_170 Depth=2
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-168(%rbp), %rdx        # 8-byte Reload
	movzbl	(%rdx), %edx
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movl	(%rbx,%rdx,4), %esi
	movl	%esi, %edi
	addl	$-1, %edi
	movl	%edi, (%rbx,%rdx,4)
	movslq	%esi, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$5381, BasicBlockSignatureTracker # imm = 0x1505
	movw	$7, RunTimeSignatureAdjuster
.LBB2_180:                              #   in Loop: Header=BB2_170 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$5414, %ax              # imm = 0x1526
	jne	.LBB2_243
# %bb.181:                              # %mainSort.split623
                                        #   in Loop: Header=BB2_170 Depth=2
	movw	$5414, BasicBlockSignatureTracker # imm = 0x1526
	movw	$0, RunTimeSignatureAdjuster
# %bb.182:                              #   in Loop: Header=BB2_170 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$5459, %ax              # imm = 0x1553
	jne	.LBB2_243
# %bb.183:                              # %mainSort.split627
                                        #   in Loop: Header=BB2_170 Depth=2
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$5459, BasicBlockSignatureTracker # imm = 0x1553
	movw	$420, RunTimeSignatureAdjuster # imm = 0x1A4
	jmp	.LBB2_170
.LBB2_184:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$361, %ax               # imm = 0x169
	cmpw	$5521, %ax              # imm = 0x1591
	jne	.LBB2_247
# %bb.185:                              # %mainSort.split617
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rax
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx,%rax,4), %eax
	subl	$1, %eax
	movslq	(%rcx), %rcx
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx,%rcx,4), %ecx
	movw	$5521, BasicBlockSignatureTracker # imm = 0x1591
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB2_194
# %bb.186:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$5548, %ax              # imm = 0x15AC
	jne	.LBB2_247
# %bb.187:                              # %mainSort.split631
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	movw	$5548, BasicBlockSignatureTracker # imm = 0x15AC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB2_190
# %bb.188:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$5566, %ax              # imm = 0x15BE
	jne	.LBB2_247
# %bb.189:                              # %mainSort.split633
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	subl	$1, %ecx
	movw	$5566, BasicBlockSignatureTracker # imm = 0x15BE
	movw	$18, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB2_192
.LBB2_190:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$114, %ax
	xorw	%cx, %ax
	cmpw	$5598, %ax              # imm = 0x15DE
	jne	.LBB2_247
# %bb.191:                              # %mainSort.split635
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	$5598, BasicBlockSignatureTracker # imm = 0x15DE
	movw	$6041, RunTimeSignatureAdjuster # imm = 0x1799
	movl	$1007, %edi             # imm = 0x3EF
	callq	BZ2_bz__AssertH__fail
	movw	$5598, BasicBlockSignatureTracker # imm = 0x15DE
	movw	$6041, RunTimeSignatureAdjuster # imm = 0x1799
	movw	$5598, BasicBlockSignatureTracker # imm = 0x15DE
	movw	$79, RunTimeSignatureAdjuster
	jmp	.LBB2_194
.LBB2_192:                              # %Buffer__2
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-27905, %ax            # imm = 0x92FF
	cmpw	$-30911, %ax            # imm = 0x8741
	jne	.LBB2_247
# %bb.193:                              # %mainSort.split637
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	$-30911, BasicBlockSignatureTracker # imm = 0x8741
	movw	$-27952, RunTimeSignatureAdjuster # imm = 0x92D0
.LBB2_194:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$117, %ax
	xorw	%cx, %ax
	cmpw	$5604, %ax              # imm = 0x15E4
	jne	.LBB2_247
# %bb.195:                              # %mainSort.split629
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$5604, BasicBlockSignatureTracker # imm = 0x15E4
	movw	$0, RunTimeSignatureAdjuster
.LBB2_196:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3, %ax
	xorw	%cx, %ax
	cmpw	$5607, %ax              # imm = 0x15E7
	jne	.LBB2_242
# %bb.197:                              # %mainSort.split639
                                        #   in Loop: Header=BB2_196 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$5607, BasicBlockSignatureTracker # imm = 0x15E7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB2_202
# %bb.198:                              #   in Loop: Header=BB2_196 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$5611, %ax              # imm = 0x15EB
	jne	.LBB2_242
# %bb.199:                              # %mainSort.split641
                                        #   in Loop: Header=BB2_196 Depth=2
	movq	(%r12), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	shll	$8, %ecx
	movq	-64(%rbp), %rdx         # 8-byte Reload
	addl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edx
	orl	$2097152, %edx          # imm = 0x200000
	movl	%edx, (%rax,%rcx,4)
	movw	$5611, BasicBlockSignatureTracker # imm = 0x15EB
	movw	$0, RunTimeSignatureAdjuster
# %bb.200:                              #   in Loop: Header=BB2_196 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$5613, %ax              # imm = 0x15ED
	jne	.LBB2_242
# %bb.201:                              # %mainSort.split645
                                        #   in Loop: Header=BB2_196 Depth=2
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$5613, BasicBlockSignatureTracker # imm = 0x15ED
	movw	$9, RunTimeSignatureAdjuster
	jmp	.LBB2_196
.LBB2_202:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$995, %ax               # imm = 0x3E3
	cmpw	$5636, %ax              # imm = 0x1604
	jne	.LBB2_247
# %bb.203:                              # %mainSort.split643
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movb	$1, (%rcx,%rax)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$5636, BasicBlockSignatureTracker # imm = 0x1604
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jge	.LBB2_228
# %bb.204:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$5645, %ax              # imm = 0x160D
	jne	.LBB2_247
# %bb.205:                              # %mainSort.split647
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	shll	$8, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movq	(%rdx), %rax
	movl	(%rsi), %ecx
	addl	$1, %ecx
	shll	$8, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$-2097153, %eax         # imm = 0xFFDFFFFF
	subl	(%rdi), %eax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$5645, BasicBlockSignatureTracker # imm = 0x160D
	movw	$0, RunTimeSignatureAdjuster
.LBB2_206:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$5651, %ax              # imm = 0x1613
	jne	.LBB2_241
# %bb.207:                              # %mainSort.split651
                                        #   in Loop: Header=BB2_206 Depth=2
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	movw	$5651, BasicBlockSignatureTracker # imm = 0x1613
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$65534, %eax            # imm = 0xFFFE
	jle	.LBB2_210
# %bb.208:                              #   in Loop: Header=BB2_206 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$5656, %ax              # imm = 0x1618
	jne	.LBB2_241
# %bb.209:                              # %mainSort.split653
                                        #   in Loop: Header=BB2_206 Depth=2
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$5656, BasicBlockSignatureTracker # imm = 0x1618
	movw	$21, RunTimeSignatureAdjuster
	jmp	.LBB2_206
.LBB2_210:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$5730, %ax              # imm = 0x1662
	jne	.LBB2_247
# %bb.211:                              # %mainSort.split655
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	subl	$1, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$5730, BasicBlockSignatureTracker # imm = 0x1662
	movw	$0, RunTimeSignatureAdjuster
.LBB2_212:                              #   Parent Loop BB2_110 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$20, %ax
	xorw	%cx, %ax
	cmpw	$5750, %ax              # imm = 0x1676
	jne	.LBB2_240
# %bb.213:                              # %mainSort.split657
                                        #   in Loop: Header=BB2_212 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$5750, BasicBlockSignatureTracker # imm = 0x1676
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB2_222
# %bb.214:                              #   in Loop: Header=BB2_212 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$248, %ax
	cmpw	$5774, %ax              # imm = 0x168E
	jne	.LBB2_240
# %bb.215:                              # %mainSort.split659
                                        #   in Loop: Header=BB2_212 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	addl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-232(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	(%rdx), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movw	%ax, (%rcx)
	movw	(%rcx), %ax
	movq	(%r14), %rcx
	movslq	(%rsi), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	(%rsi), %eax
	movw	$5774, BasicBlockSignatureTracker # imm = 0x168E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$34, %eax
	jge	.LBB2_218
# %bb.216:                              #   in Loop: Header=BB2_212 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$5776, %ax              # imm = 0x1690
	jne	.LBB2_240
# %bb.217:                              # %mainSort.split663
                                        #   in Loop: Header=BB2_212 Depth=2
	movq	-224(%rbp), %rax        # 8-byte Reload
	movw	(%rax), %ax
	movq	(%r14), %rcx
	movq	-232(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %edx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	addl	(%rsi), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	$5776, BasicBlockSignatureTracker # imm = 0x1690
	movw	$30, RunTimeSignatureAdjuster
.LBB2_218:                              #   in Loop: Header=BB2_212 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$24, %ax
	xorw	%cx, %ax
	cmpw	$5782, %ax              # imm = 0x1696
	jne	.LBB2_240
# %bb.219:                              # %mainSort.split665
                                        #   in Loop: Header=BB2_212 Depth=2
	movw	$5782, BasicBlockSignatureTracker # imm = 0x1696
	movw	$0, RunTimeSignatureAdjuster
# %bb.220:                              #   in Loop: Header=BB2_212 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$84, %ax
	cmpw	$5826, %ax              # imm = 0x16C2
	jne	.LBB2_240
# %bb.221:                              # %mainSort.split667
                                        #   in Loop: Header=BB2_212 Depth=2
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$5826, BasicBlockSignatureTracker # imm = 0x16C2
	movw	$160, RunTimeSignatureAdjuster
	jmp	.LBB2_212
.LBB2_222:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$178, %ax
	cmpw	$5828, %ax              # imm = 0x16C4
	jne	.LBB2_247
# %bb.223:                              # %mainSort.split661
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	subl	$1, %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
                                        # kill: def %cl killed %ecx
	sarl	%cl, %eax
	movw	$5828, BasicBlockSignatureTracker # imm = 0x16C4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$65535, %eax            # imm = 0xFFFF
	jle	.LBB2_226
# %bb.224:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$5855, %ax              # imm = 0x16DF
	jne	.LBB2_247
# %bb.225:                              # %mainSort.split671
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	$5855, BasicBlockSignatureTracker # imm = 0x16DF
	movw	$5272, RunTimeSignatureAdjuster # imm = 0x1498
	movl	$1002, %edi             # imm = 0x3EA
	callq	BZ2_bz__AssertH__fail
	movw	$5855, BasicBlockSignatureTracker # imm = 0x16DF
	movw	$5272, RunTimeSignatureAdjuster # imm = 0x1498
	movw	$5855, BasicBlockSignatureTracker # imm = 0x16DF
	movw	$27, RunTimeSignatureAdjuster
.LBB2_226:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$5859, %ax              # imm = 0x16E3
	jne	.LBB2_247
# %bb.227:                              # %mainSort.split669
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	$5859, BasicBlockSignatureTracker # imm = 0x16E3
	movw	$231, RunTimeSignatureAdjuster
.LBB2_228:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$250, %ax
	xorw	%cx, %ax
	cmpw	$5886, %ax              # imm = 0x16FE
	jne	.LBB2_247
# %bb.229:                              # %mainSort.split649
                                        #   in Loop: Header=BB2_110 Depth=1
	movw	$5886, BasicBlockSignatureTracker # imm = 0x16FE
	movw	$0, RunTimeSignatureAdjuster
# %bb.230:                              #   in Loop: Header=BB2_110 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$498, %ax               # imm = 0x1F2
	cmpw	$5900, %ax              # imm = 0x170C
	jne	.LBB2_247
# %bb.231:                              # %mainSort.split673
                                        #   in Loop: Header=BB2_110 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$5900, BasicBlockSignatureTracker # imm = 0x170C
	movw	$1283, RunTimeSignatureAdjuster # imm = 0x503
	jmp	.LBB2_110
.LBB2_232:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1333, %ax              # imm = 0x535
	cmpw	$5930, %ax              # imm = 0x172A
	jne	.LBB2_260
# %bb.233:                              # %mainSort.split553
	movl	(%r15), %eax
	movw	$5930, BasicBlockSignatureTracker # imm = 0x172A
	movw	$1431, RunTimeSignatureAdjuster # imm = 0x597
	cmpl	$4, %eax
	jl	.LBB2_238
# %bb.234:                              # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-26675, %ax            # imm = 0x97CD
	cmpw	$-32537, %ax            # imm = 0x80E7
	jne	.LBB2_260
# %bb.235:                              # %mainSort.split675
	movw	$-32537, BasicBlockSignatureTracker # imm = 0x80E7
	movw	$-26675, RunTimeSignatureAdjuster # imm = 0x97CD
# %bb.236:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$5, %ax
	xorw	%cx, %ax
	cmpw	$5935, %ax              # imm = 0x172F
	movq	-80(%rbp), %rax         # 8-byte Reload
	jne	.LBB2_260
# %bb.237:                              # %mainSort.split681
	movabsq	$.L.str.8, %rsi
	movq	stderr, %rdi
	movl	(%rax), %edx
	movq	-176(%rbp), %rbx        # 8-byte Reload
	movl	(%rbx), %ecx
	movl	(%rax), %r8d
	subl	(%rbx), %r8d
	movb	$0, %al
	callq	fprintf
	movw	$5935, BasicBlockSignatureTracker # imm = 0x172F
	movw	$1426, RunTimeSignatureAdjuster # imm = 0x592
.LBB2_238:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1412, %ax              # imm = 0x584
	xorw	%cx, %ax
	cmpw	$5945, %ax              # imm = 0x1739
	jne	.LBB2_260
# %bb.239:                              # %mainSort.split581
	movw	$5945, BasicBlockSignatureTracker # imm = 0x1739
	movw	$6141, RunTimeSignatureAdjuster # imm = 0x17FD
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB2_240:                              # %CFerrorHandler.mainSort.loopexit
	jmp	.LBB2_260
.LBB2_241:                              # %CFerrorHandler.mainSort.loopexit1
	jmp	.LBB2_260
.LBB2_242:                              # %CFerrorHandler.mainSort.loopexit2
	jmp	.LBB2_260
.LBB2_243:                              # %CFerrorHandler.mainSort.loopexit3
	jmp	.LBB2_260
.LBB2_244:                              # %CFerrorHandler.mainSort.loopexit4
	jmp	.LBB2_260
.LBB2_245:                              # %CFerrorHandler.mainSort.loopexit5
	jmp	.LBB2_260
.LBB2_246:                              # %CFerrorHandler.mainSort.loopexit6
	jmp	.LBB2_260
.LBB2_247:                              # %CFerrorHandler.mainSort.loopexit7
	jmp	.LBB2_260
.LBB2_248:                              # %CFerrorHandler.mainSort.loopexit8
	jmp	.LBB2_260
.LBB2_249:                              # %CFerrorHandler.mainSort.loopexit9
	jmp	.LBB2_260
.LBB2_250:                              # %CFerrorHandler.mainSort.loopexit10
	jmp	.LBB2_260
.LBB2_251:                              # %CFerrorHandler.mainSort.loopexit11
	jmp	.LBB2_260
.LBB2_252:                              # %CFerrorHandler.mainSort.loopexit12
	jmp	.LBB2_260
.LBB2_253:                              # %CFerrorHandler.mainSort.loopexit13
	jmp	.LBB2_260
.LBB2_254:                              # %CFerrorHandler.mainSort.loopexit14
	jmp	.LBB2_260
.LBB2_255:                              # %CFerrorHandler.mainSort.loopexit15
	jmp	.LBB2_260
.LBB2_256:                              # %CFerrorHandler.mainSort.loopexit16
	jmp	.LBB2_260
.LBB2_257:                              # %CFerrorHandler.mainSort.loopexit17
	jmp	.LBB2_260
.LBB2_258:                              # %CFerrorHandler.mainSort.loopexit18
	jmp	.LBB2_260
.LBB2_259:                              # %CFerrorHandler.mainSort.loopexit19
	jmp	.LBB2_260
.LBB2_260:                              # %CFerrorHandler.mainSort
	callq	FAULT_DETECTED_CFC
.Lfunc_end2:
	.size	mainSort, .Lfunc_end2-mainSort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mainQSort3
	.type	mainQSort3,@function
mainQSort3:                             # @mainQSort3
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$264, %rsp              # imm = 0x108
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$1523, %ax              # imm = 0x5F3
	xorw	%bx, %ax
	cmpw	$5963, %ax              # imm = 0x174B
	jne	.LBB3_114
# %bb.1:                                # %mainQSort3.split
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movl	%ecx, -152(%rbp)        # 4-byte Spill
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rsi, -192(%rbp)        # 8-byte Spill
	movq	%rdi, %rcx
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movl	%r9d, -136(%rbp)        # 4-byte Spill
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movl	%r8d, -160(%rbp)        # 4-byte Spill
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rsi
	addq	$-400, %rsi             # imm = 0xFE70
	movq	%rsi, %rsp
	movq	%rsp, %rbx
	addq	$-400, %rbx             # imm = 0xFE70
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-400, %r15             # imm = 0xFE70
	movq	%r15, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%r12, -64(%rbp)         # 8-byte Spill
	movq	%rcx, (%r12)
	movq	%r10, %r12
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%r12)
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%r13)
	movq	%r11, -200(%rbp)        # 8-byte Spill
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	%eax, (%r11)
	movl	-160(%rbp), %eax        # 4-byte Reload
	movl	%eax, (%r9)
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, (%rdi)
	movl	16(%rbp), %eax
	movl	%eax, (%rdx)
	movq	%r8, -192(%rbp)         # 8-byte Spill
	movq	24(%rbp), %rax
	movq	%rax, (%r8)
	movl	$0, (%r14)
	movl	(%r9), %eax
	movslq	(%r14), %rcx
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	movl	%eax, (%rsi,%rcx,4)
	movl	(%rdi), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rbx,%rcx,4)
	movl	(%rdx), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%r15,%rcx,4)
	movl	(%r14), %eax
	addl	$1, %eax
	movl	%eax, (%r14)
	movw	$5963, BasicBlockSignatureTracker # imm = 0x174B
	movw	$0, RunTimeSignatureAdjuster
.LBB3_2:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_23 Depth 2
                                        #       Child Loop BB3_25 Depth 3
                                        #       Child Loop BB3_42 Depth 3
                                        #     Child Loop BB3_75 Depth 2
                                        #     Child Loop BB3_87 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$34, %ax
	xorw	%cx, %ax
	cmpw	$5993, %ax              # imm = 0x1769
	jne	.LBB3_113
# %bb.3:                                # %mainQSort3.split190
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	(%r14), %eax
	movw	$5993, BasicBlockSignatureTracker # imm = 0x1769
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB3_105
# %bb.4:                                #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$6010, %ax              # imm = 0x177A
	jne	.LBB3_113
# %bb.5:                                # %mainQSort3.split192
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	(%r14), %eax
	movw	$6010, BasicBlockSignatureTracker # imm = 0x177A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$100, %eax
	jl	.LBB3_8
# %bb.6:                                #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$240, %ax
	cmpw	$6026, %ax              # imm = 0x178A
	jne	.LBB3_113
# %bb.7:                                # %mainQSort3.split198
                                        #   in Loop: Header=BB3_2 Depth=1
	movw	$6026, BasicBlockSignatureTracker # imm = 0x178A
	movw	$5581, RunTimeSignatureAdjuster # imm = 0x15CD
	movl	$1001, %edi             # imm = 0x3E9
	callq	BZ2_bz__AssertH__fail
	movw	$6026, BasicBlockSignatureTracker # imm = 0x178A
	movw	$5581, RunTimeSignatureAdjuster # imm = 0x15CD
	movw	$6026, BasicBlockSignatureTracker # imm = 0x178A
	movw	$240, RunTimeSignatureAdjuster
.LBB3_8:                                #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$211, %ax
	xorw	%cx, %ax
	cmpw	$6057, %ax              # imm = 0x17A9
	jne	.LBB3_113
# %bb.9:                                # %mainQSort3.split196
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	(%r14), %eax
	addl	$-1, %eax
	movl	%eax, (%r14)
	movslq	(%r14), %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movslq	(%r14), %rax
	movl	(%rbx,%rax,4), %eax
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	%eax, (%rdx)
	movslq	(%r14), %rax
	movl	(%r15,%rax,4), %eax
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movl	(%rdx), %eax
	subl	(%rcx), %eax
	movw	$6057, BasicBlockSignatureTracker # imm = 0x17A9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$20, %eax
	jl	.LBB3_12
# %bb.10:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$6060, %ax              # imm = 0x17AC
	jne	.LBB3_113
# %bb.11:                               # %mainQSort3.split202
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$6060, BasicBlockSignatureTracker # imm = 0x17AC
	movw	$5, RunTimeSignatureAdjuster
	cmpl	$14, %eax
	jle	.LBB3_19
.LBB3_12:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$102, %ax
	xorw	%cx, %ax
	cmpw	$6095, %ax              # imm = 0x17CF
	jne	.LBB3_113
# %bb.13:                               # %mainQSort3.split200
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	%r15, -136(%rbp)        # 8-byte Spill
	movq	%rbx, %r15
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r12), %rsi
	movq	(%r13), %rdx
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %r8d
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %r9d
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-192(%rbp), %rbx        # 8-byte Reload
	movq	(%rbx), %r10
	movw	$6095, BasicBlockSignatureTracker # imm = 0x17CF
	movw	$0, RunTimeSignatureAdjuster
	subq	$16, %rsp
	movl	%eax, (%rsp)
	movq	%r10, 8(%rsp)
	callq	mainSimpleSort
	addq	$16, %rsp
	movw	$6095, BasicBlockSignatureTracker # imm = 0x17CF
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rax
	movl	(%rax), %eax
	movw	$6095, BasicBlockSignatureTracker # imm = 0x17CF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB3_16
# %bb.14:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$6113, %ax              # imm = 0x17E1
	jne	.LBB3_114
# %bb.15:                               # %mainQSort3.split206
	movw	$6113, BasicBlockSignatureTracker # imm = 0x17E1
	movw	$136, RunTimeSignatureAdjuster
	jmp	.LBB3_106
.LBB3_16:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4035, %ax              # imm = 0xFC3
	cmpw	$6156, %ax              # imm = 0x180C
	movq	%r15, %rbx
	movq	-136(%rbp), %r15        # 8-byte Reload
	jne	.LBB3_113
# %bb.17:                               # %mainQSort3.split208
                                        #   in Loop: Header=BB3_2 Depth=1
	movw	$6156, BasicBlockSignatureTracker # imm = 0x180C
	movw	$3911, RunTimeSignatureAdjuster # imm = 0xF47
.LBB3_18:                               # %.backedge7
                                        #   in Loop: Header=BB3_2 Depth=1
	jmp	.LBB3_2
.LBB3_19:                               # %Buffer__
                                        #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27522, %ax             # imm = 0x6B82
	cmpw	$31790, %ax             # imm = 0x7C2E
	jne	.LBB3_113
# %bb.20:                               # %mainQSort3.split204
                                        #   in Loop: Header=BB3_2 Depth=1
	movw	$31790, BasicBlockSignatureTracker # imm = 0x7C2E
	movw	$27522, RunTimeSignatureAdjuster # imm = 0x6B82
# %bb.21:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4021, %ax              # imm = 0xFB5
	xorw	%cx, %ax
	cmpw	$6169, %ax              # imm = 0x1819
	jne	.LBB3_113
# %bb.22:                               # %mainQSort3.split290
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	%r15, -136(%rbp)        # 8-byte Spill
	movq	%rbx, -160(%rbp)        # 8-byte Spill
	movq	(%r12), %rsi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rcx
	movq	-80(%rbp), %r15         # 8-byte Reload
	movslq	(%r15), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-88(%rbp), %rax         # 8-byte Reload
	addl	(%rax), %ecx
	movl	%ecx, %ecx
	movb	(%rsi,%rcx), %r8b
	movq	(%r12), %rcx
	movq	(%rdi), %rdx
	movq	-72(%rbp), %rbx         # 8-byte Reload
	movslq	(%rbx), %rsi
	movl	(%rdx,%rsi,4), %edx
	addl	(%rax), %edx
	movl	%edx, %edx
	movb	(%rcx,%rdx), %cl
	movq	(%r12), %rdx
	movq	(%rdi), %rsi
	movl	(%r15), %edi
	addl	(%rbx), %edi
	sarl	$1, %edi
	movslq	%edi, %rdi
	movl	(%rsi,%rdi,4), %esi
	addl	(%rax), %esi
	movl	%esi, %esi
	movb	(%rdx,%rsi), %dl
	movw	$6169, BasicBlockSignatureTracker # imm = 0x1819
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%r8b, %edi
	movzbl	%cl, %esi
	movzbl	%dl, %edx
	callq	mmed3
	movw	$6169, BasicBlockSignatureTracker # imm = 0x1819
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%r15), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rbx), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$6169, BasicBlockSignatureTracker # imm = 0x1819
	movw	$0, RunTimeSignatureAdjuster
.LBB3_23:                               #   Parent Loop BB3_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB3_25 Depth 3
                                        #       Child Loop BB3_42 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$130, %ax
	xorw	%cx, %ax
	cmpw	$6299, %ax              # imm = 0x189B
	jne	.LBB3_112
# %bb.24:                               # %mainQSort3.split210
                                        #   in Loop: Header=BB3_23 Depth=2
	movw	$6299, BasicBlockSignatureTracker # imm = 0x189B
	movw	$0, RunTimeSignatureAdjuster
.LBB3_25:                               #   Parent Loop BB3_2 Depth=1
                                        #     Parent Loop BB3_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$38, %ax
	xorw	%cx, %ax
	cmpw	$6333, %ax              # imm = 0x18BD
	jne	.LBB3_109
# %bb.26:                               # %mainQSort3.split212
                                        #   in Loop: Header=BB3_25 Depth=3
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$6333, BasicBlockSignatureTracker # imm = 0x18BD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB3_29
# %bb.27:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$102, %ax
	cmpw	$6363, %ax              # imm = 0x18DB
	jne	.LBB3_112
# %bb.28:                               # %mainQSort3.split214
                                        #   in Loop: Header=BB3_23 Depth=2
	movq	%r12, %r8
	movw	$6363, BasicBlockSignatureTracker # imm = 0x18DB
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB3_40
.LBB3_29:                               #   in Loop: Header=BB3_25 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$69, %ax
	cmpw	$6392, %ax              # imm = 0x18F8
	jne	.LBB3_109
# %bb.30:                               # %mainQSort3.split216
                                        #   in Loop: Header=BB3_25 Depth=3
	movq	%r12, %r8
	movq	(%r12), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-88(%rbp), %rdx         # 8-byte Reload
	addl	(%rdx), %ecx
	movl	%ecx, %ecx
	movzbl	(%rax,%rcx), %eax
	movq	-184(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$6392, BasicBlockSignatureTracker # imm = 0x18F8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB3_34
# %bb.31:                               #   in Loop: Header=BB3_25 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$495, %ax               # imm = 0x1EF
	cmpw	$6423, %ax              # imm = 0x1917
	jne	.LBB3_109
# %bb.32:                               # %mainQSort3.split220
                                        #   in Loop: Header=BB3_25 Depth=3
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-304(%rbp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movq	(%rsi), %rax
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%rbx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r9), %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movw	$6423, BasicBlockSignatureTracker # imm = 0x1917
	movw	$396, RunTimeSignatureAdjuster # imm = 0x18C
.LBB3_33:                               # %.backedge2
                                        #   in Loop: Header=BB3_25 Depth=3
	movq	%r8, %r12
	jmp	.LBB3_25
.LBB3_34:                               #   in Loop: Header=BB3_25 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$486, %ax               # imm = 0x1E6
	cmpw	$6430, %ax              # imm = 0x191E
	jne	.LBB3_109
# %bb.35:                               # %mainQSort3.split222
                                        #   in Loop: Header=BB3_25 Depth=3
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$6430, BasicBlockSignatureTracker # imm = 0x191E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB3_38
# %bb.36:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$73, %ax
	cmpw	$6487, %ax              # imm = 0x1957
	jne	.LBB3_112
# %bb.37:                               # %mainQSort3.split224
                                        #   in Loop: Header=BB3_23 Depth=2
	movw	$6487, BasicBlockSignatureTracker # imm = 0x1957
	movw	$396, RunTimeSignatureAdjuster # imm = 0x18C
	jmp	.LBB3_40
.LBB3_38:                               #   in Loop: Header=BB3_25 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$6506, %ax              # imm = 0x196A
	jne	.LBB3_109
# %bb.39:                               # %mainQSort3.split226
                                        #   in Loop: Header=BB3_25 Depth=3
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$6506, BasicBlockSignatureTracker # imm = 0x196A
	movw	$497, RunTimeSignatureAdjuster # imm = 0x1F1
	jmp	.LBB3_33
.LBB3_40:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$350, %ax               # imm = 0x15E
	xorw	%cx, %ax
	cmpw	$6533, %ax              # imm = 0x1985
	movq	%r8, %rdi
	jne	.LBB3_112
# %bb.41:                               # %mainQSort3.split218
                                        #   in Loop: Header=BB3_23 Depth=2
	movw	$6533, BasicBlockSignatureTracker # imm = 0x1985
	movw	$0, RunTimeSignatureAdjuster
.LBB3_42:                               #   Parent Loop BB3_2 Depth=1
                                        #     Parent Loop BB3_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$77, %ax
	xorw	%cx, %ax
	cmpw	$6600, %ax              # imm = 0x19C8
	jne	.LBB3_108
# %bb.43:                               # %mainQSort3.split228
                                        #   in Loop: Header=BB3_42 Depth=3
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$6600, BasicBlockSignatureTracker # imm = 0x19C8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB3_46
# %bb.44:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$6629, %ax              # imm = 0x19E5
	jne	.LBB3_112
# %bb.45:                               # %mainQSort3.split230
                                        #   in Loop: Header=BB3_23 Depth=2
	movw	$6629, BasicBlockSignatureTracker # imm = 0x19E5
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB3_57
.LBB3_46:                               #   in Loop: Header=BB3_42 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1004, %ax              # imm = 0x3EC
	cmpw	$6692, %ax              # imm = 0x1A24
	jne	.LBB3_108
# %bb.47:                               # %mainQSort3.split232
                                        #   in Loop: Header=BB3_42 Depth=3
	movq	(%rdi), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-88(%rbp), %rdx         # 8-byte Reload
	addl	(%rdx), %ecx
	movl	%ecx, %ecx
	movzbl	(%rax,%rcx), %eax
	movq	-184(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$6692, BasicBlockSignatureTracker # imm = 0x1A24
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB3_51
# %bb.48:                               #   in Loop: Header=BB3_42 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$6697, %ax              # imm = 0x1A29
	jne	.LBB3_108
# %bb.49:                               # %mainQSort3.split236
                                        #   in Loop: Header=BB3_42 Depth=3
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-56(%rbp), %r8          # 8-byte Reload
	movslq	(%r8), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-296(%rbp), %r10        # 8-byte Reload
	movl	%eax, (%r10)
	movq	(%rsi), %rax
	movq	-112(%rbp), %rbx        # 8-byte Reload
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%r8), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	movq	(%rsi), %rcx
	movslq	(%rbx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rbx), %eax
	addl	$-1, %eax
	movl	%eax, (%rbx)
	movl	(%r8), %eax
	addl	$-1, %eax
	movl	%eax, (%r8)
	movw	$6697, BasicBlockSignatureTracker # imm = 0x1A29
	movw	$940, RunTimeSignatureAdjuster # imm = 0x3AC
.LBB3_50:                               # %.backedge
                                        #   in Loop: Header=BB3_42 Depth=3
	jmp	.LBB3_42
.LBB3_51:                               #   in Loop: Header=BB3_42 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$6699, %ax              # imm = 0x1A2B
	jne	.LBB3_108
# %bb.52:                               # %mainQSort3.split238
                                        #   in Loop: Header=BB3_42 Depth=3
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$6699, BasicBlockSignatureTracker # imm = 0x1A2B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB3_55
# %bb.53:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$6708, %ax              # imm = 0x1A34
	jne	.LBB3_112
# %bb.54:                               # %mainQSort3.split240
                                        #   in Loop: Header=BB3_23 Depth=2
	movw	$6708, BasicBlockSignatureTracker # imm = 0x1A34
	movw	$977, RunTimeSignatureAdjuster # imm = 0x3D1
	jmp	.LBB3_57
.LBB3_55:                               #   in Loop: Header=BB3_42 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$6720, %ax              # imm = 0x1A40
	jne	.LBB3_108
# %bb.56:                               # %mainQSort3.split242
                                        #   in Loop: Header=BB3_42 Depth=3
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$6720, BasicBlockSignatureTracker # imm = 0x1A40
	movw	$965, RunTimeSignatureAdjuster # imm = 0x3C5
	jmp	.LBB3_50
.LBB3_57:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$953, %ax               # imm = 0x3B9
	xorw	%cx, %ax
	cmpw	$6748, %ax              # imm = 0x1A5C
	jne	.LBB3_112
# %bb.58:                               # %mainQSort3.split234
                                        #   in Loop: Header=BB3_23 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$6748, BasicBlockSignatureTracker # imm = 0x1A5C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB3_61
# %bb.59:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$6768, %ax              # imm = 0x1A70
	jne	.LBB3_113
# %bb.60:                               # %mainQSort3.split244
                                        #   in Loop: Header=BB3_2 Depth=1
	movw	$6768, BasicBlockSignatureTracker # imm = 0x1A70
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB3_63
.LBB3_61:                               #   in Loop: Header=BB3_23 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$221, %ax
	cmpw	$6785, %ax              # imm = 0x1A81
	movq	%rdi, %r12
	jne	.LBB3_112
# %bb.62:                               # %mainQSort3.split246
                                        #   in Loop: Header=BB3_23 Depth=2
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-288(%rbp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movq	(%rsi), %rax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r8), %eax
	movq	(%rsi), %rcx
	movslq	(%rbx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%rbx), %eax
	addl	$-1, %eax
	movl	%eax, (%rbx)
	movw	$6785, BasicBlockSignatureTracker # imm = 0x1A81
	movw	$664, RunTimeSignatureAdjuster # imm = 0x298
	jmp	.LBB3_23
.LBB3_63:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$235, %ax
	cmpw	$6811, %ax              # imm = 0x1A9B
	jne	.LBB3_113
# %bb.64:                               # %mainQSort3.split248
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$6811, BasicBlockSignatureTracker # imm = 0x1A9B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB3_67
# %bb.65:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$68, %ax
	cmpw	$6879, %ax              # imm = 0x1ADF
	movq	%rdi, %r12
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	-136(%rbp), %r15        # 8-byte Reload
	jne	.LBB3_113
# %bb.66:                               # %mainQSort3.split250
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%r14), %rcx
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rbx,%rcx,4)
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	addl	$1, %eax
	movslq	(%r14), %rcx
	movl	%eax, (%r15,%rcx,4)
	movl	(%r14), %eax
	addl	$1, %eax
	movl	%eax, (%r14)
	movw	$6879, BasicBlockSignatureTracker # imm = 0x1ADF
	movw	$3476, RunTimeSignatureAdjuster # imm = 0xD94
	jmp	.LBB3_18
.LBB3_67:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$6894, %ax              # imm = 0x1AEE
	jne	.LBB3_113
# %bb.68:                               # %mainQSort3.split252
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	subl	(%rcx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	subl	(%rdx), %ecx
	movw	$6894, BasicBlockSignatureTracker # imm = 0x1AEE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB3_71
# %bb.69:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$491, %ax               # imm = 0x1EB
	cmpw	$6917, %ax              # imm = 0x1B05
	jne	.LBB3_113
# %bb.70:                               # %mainQSort3.split254
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	subl	(%rcx), %eax
	movw	$6917, BasicBlockSignatureTracker # imm = 0x1B05
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB3_73
.LBB3_71:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$502, %ax               # imm = 0x1F6
	cmpw	$6936, %ax              # imm = 0x1B18
	jne	.LBB3_113
# %bb.72:                               # %mainQSort3.split256
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movw	$6936, BasicBlockSignatureTracker # imm = 0x1B18
	movw	$29, RunTimeSignatureAdjuster
.LBB3_73:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$59, %cx
	xorw	%dx, %cx
	cmpw	$6974, %cx              # imm = 0x1B3E
	jne	.LBB3_113
# %bb.74:                               # %mainQSort3.split258
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-232(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	subl	(%rcx), %eax
	movq	-224(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rcx), %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$6974, BasicBlockSignatureTracker # imm = 0x1B3E
	movw	$0, RunTimeSignatureAdjuster
.LBB3_75:                               #   Parent Loop BB3_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$112, %ax
	xorw	%cx, %ax
	cmpw	$6990, %ax              # imm = 0x1B4E
	jne	.LBB3_111
# %bb.76:                               # %mainQSort3.split260
                                        #   in Loop: Header=BB3_75 Depth=2
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$6990, BasicBlockSignatureTracker # imm = 0x1B4E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB3_79
# %bb.77:                               #   in Loop: Header=BB3_75 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$6993, %ax              # imm = 0x1B51
	jne	.LBB3_111
# %bb.78:                               # %mainQSort3.split262
                                        #   in Loop: Header=BB3_75 Depth=2
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-232(%rbp), %rbx        # 8-byte Reload
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-280(%rbp), %r10        # 8-byte Reload
	movl	%eax, (%r10)
	movq	(%rsi), %rax
	movq	-224(%rbp), %r8         # 8-byte Reload
	movslq	(%r8), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%rbx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	movq	(%rsi), %rcx
	movslq	(%r8), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movl	(%r8), %eax
	addl	$1, %eax
	movl	%eax, (%r8)
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$6993, BasicBlockSignatureTracker # imm = 0x1B51
	movw	$111, RunTimeSignatureAdjuster
	jmp	.LBB3_75
.LBB3_79:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$7008, %ax              # imm = 0x1B60
	jne	.LBB3_113
# %bb.80:                               # %mainQSort3.split264
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movl	(%rcx), %ecx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subl	(%rdx), %ecx
	movw	$7008, BasicBlockSignatureTracker # imm = 0x1B60
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB3_83
# %bb.81:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$7017, %ax              # imm = 0x1B69
	jne	.LBB3_113
# %bb.82:                               # %mainQSort3.split266
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movw	$7017, BasicBlockSignatureTracker # imm = 0x1B69
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB3_85
.LBB3_83:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$7037, %ax              # imm = 0x1B7D
	jne	.LBB3_113
# %bb.84:                               # %mainQSort3.split268
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	subl	(%rcx), %eax
	movw	$7037, BasicBlockSignatureTracker # imm = 0x1B7D
	movw	$20, RunTimeSignatureAdjuster
.LBB3_85:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$237, %cx
	xorw	%dx, %cx
	cmpw	$7044, %cx              # imm = 0x1B84
	jne	.LBB3_113
# %bb.86:                               # %mainQSort3.split270
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	subl	(%rcx), %eax
	addl	$1, %eax
	movq	-208(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rcx), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$7044, BasicBlockSignatureTracker # imm = 0x1B84
	movw	$0, RunTimeSignatureAdjuster
.LBB3_87:                               #   Parent Loop BB3_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$12, %ax
	xorw	%cx, %ax
	cmpw	$7048, %ax              # imm = 0x1B88
	jne	.LBB3_110
# %bb.88:                               # %mainQSort3.split272
                                        #   in Loop: Header=BB3_87 Depth=2
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$7048, BasicBlockSignatureTracker # imm = 0x1B88
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB3_91
# %bb.89:                               #   in Loop: Header=BB3_87 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$7053, %ax              # imm = 0x1B8D
	jne	.LBB3_110
# %bb.90:                               # %mainQSort3.split274
                                        #   in Loop: Header=BB3_87 Depth=2
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-216(%rbp), %rbx        # 8-byte Reload
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-272(%rbp), %r10        # 8-byte Reload
	movl	%eax, (%r10)
	movq	(%rsi), %rax
	movq	-208(%rbp), %r8         # 8-byte Reload
	movslq	(%r8), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%rbx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	movq	(%rsi), %rcx
	movslq	(%r8), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movl	(%r8), %eax
	addl	$1, %eax
	movl	%eax, (%r8)
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$7053, BasicBlockSignatureTracker # imm = 0x1B8D
	movw	$9, RunTimeSignatureAdjuster
	jmp	.LBB3_87
.LBB3_91:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$7066, %ax              # imm = 0x1B9A
	jne	.LBB3_113
# %bb.92:                               # %mainQSort3.split276
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-80(%rbp), %rbx         # 8-byte Reload
	movl	(%rbx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	(%rcx), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	subl	$1, %eax
	movq	-128(%rbp), %r10        # 8-byte Reload
	movl	%eax, (%r10)
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	(%r8), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subl	(%rdx), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rbx), %eax
	movq	-104(%rbp), %rbx        # 8-byte Reload
	movl	%eax, (%rbx)
	movl	(%r10), %eax
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %eax
	movq	-144(%rbp), %r11        # 8-byte Reload
	movl	%eax, (%r11)
	movl	(%rcx), %eax
	movl	%eax, 4(%rbx)
	movl	(%r8), %eax
	movl	%eax, 4(%rsi)
	movl	(%rdx), %eax
	movl	%eax, 4(%r11)
	movl	(%r10), %eax
	addl	$1, %eax
	movl	%eax, 8(%rbx)
	movl	(%rcx), %eax
	subl	$1, %eax
	movl	%eax, 8(%rsi)
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, 8(%r11)
	movl	(%rsi), %eax
	subl	(%rbx), %eax
	movl	4(%rsi), %ecx
	subl	4(%rbx), %ecx
	movw	$7066, BasicBlockSignatureTracker # imm = 0x1B9A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB3_95
# %bb.93:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$7077, %ax              # imm = 0x1BA5
	jne	.LBB3_113
# %bb.94:                               # %mainQSort3.split278
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movq	-264(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	4(%rcx), %eax
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movl	%eax, 4(%rcx)
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, (%rdx)
	movl	4(%rcx), %eax
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movl	%eax, 4(%rcx)
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, (%rdx)
	movl	4(%rcx), %eax
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movl	%eax, 4(%rcx)
	movw	$7077, BasicBlockSignatureTracker # imm = 0x1BA5
	movw	$63, RunTimeSignatureAdjuster
.LBB3_95:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$40, %ax
	xorw	%cx, %ax
	cmpw	$7090, %ax              # imm = 0x1BB2
	jne	.LBB3_113
# %bb.96:                               # %mainQSort3.split280
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	4(%rcx), %eax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	subl	4(%rdx), %eax
	movl	8(%rcx), %ecx
	subl	8(%rdx), %ecx
	movw	$7090, BasicBlockSignatureTracker # imm = 0x1BB2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB3_99
# %bb.97:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$7094, %ax              # imm = 0x1BB6
	jne	.LBB3_113
# %bb.98:                               # %mainQSort3.split282
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	4(%rcx), %eax
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	8(%rcx), %eax
	movl	%eax, 4(%rcx)
	movl	(%rdx), %eax
	movl	%eax, 8(%rcx)
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	4(%rcx), %eax
	movl	%eax, (%rdx)
	movl	8(%rcx), %eax
	movl	%eax, 4(%rcx)
	movl	(%rdx), %eax
	movl	%eax, 8(%rcx)
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	4(%rcx), %eax
	movl	%eax, (%rdx)
	movl	8(%rcx), %eax
	movl	%eax, 4(%rcx)
	movl	(%rdx), %eax
	movl	%eax, 8(%rcx)
	movw	$7094, BasicBlockSignatureTracker # imm = 0x1BB6
	movw	$4, RunTimeSignatureAdjuster
.LBB3_99:                               #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$77, %ax
	xorw	%cx, %ax
	cmpw	$7167, %ax              # imm = 0x1BFF
	jne	.LBB3_113
# %bb.100:                              # %mainQSort3.split284
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	movq	-104(%rbp), %rdx        # 8-byte Reload
	subl	(%rdx), %eax
	movl	4(%rcx), %ecx
	subl	4(%rdx), %ecx
	movw	$7167, BasicBlockSignatureTracker # imm = 0x1BFF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB3_103
# %bb.101:                              #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2020, %ax              # imm = 0x7E4
	cmpw	$7195, %ax              # imm = 0x1C1B
	jne	.LBB3_113
# %bb.102:                              # %mainQSort3.split286
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movq	-248(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	4(%rcx), %eax
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movl	%eax, 4(%rcx)
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, (%rdx)
	movl	4(%rcx), %eax
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movl	%eax, 4(%rcx)
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, (%rdx)
	movl	4(%rcx), %eax
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movl	%eax, 4(%rcx)
	movw	$7195, BasicBlockSignatureTracker # imm = 0x1C1B
	movw	$2020, RunTimeSignatureAdjuster # imm = 0x7E4
.LBB3_103:                              #   in Loop: Header=BB3_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2016, %ax              # imm = 0x7E0
	xorw	%cx, %ax
	cmpw	$7199, %ax              # imm = 0x1C1F
	movq	%rdi, %r12
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	-136(%rbp), %r15        # 8-byte Reload
	jne	.LBB3_113
# %bb.104:                              # %mainQSort3.split288
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	movslq	(%r14), %rcx
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rbx,%rcx,4)
	movq	-144(%rbp), %r8         # 8-byte Reload
	movl	(%r8), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%r15,%rcx,4)
	movl	(%r14), %eax
	addl	$1, %eax
	movl	%eax, (%r14)
	movl	4(%rsi), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	4(%rdi), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rbx,%rcx,4)
	movl	4(%r8), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%r15,%rcx,4)
	movl	(%r14), %eax
	addl	$1, %eax
	movl	%eax, (%r14)
	movl	8(%rsi), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	8(%rdi), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%rbx,%rcx,4)
	movl	8(%r8), %eax
	movslq	(%r14), %rcx
	movl	%eax, (%r15,%rcx,4)
	movl	(%r14), %eax
	addl	$1, %eax
	movl	%eax, (%r14)
	movw	$7199, BasicBlockSignatureTracker # imm = 0x1C1F
	movw	$2900, RunTimeSignatureAdjuster # imm = 0xB54
	jmp	.LBB3_18
.LBB3_105:                              # %.loopexit
	jmp	.LBB3_106
.LBB3_106:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2884, %ax              # imm = 0xB44
	xorw	%cx, %ax
	cmpw	$7213, %ax              # imm = 0x1C2D
	jne	.LBB3_114
# %bb.107:                              # %mainQSort3.split194
	movw	$7213, BasicBlockSignatureTracker # imm = 0x1C2D
	movw	$3721, RunTimeSignatureAdjuster # imm = 0xE89
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB3_108:                              # %CFerrorHandler.mainQSort3.loopexit
	jmp	.LBB3_114
.LBB3_109:                              # %CFerrorHandler.mainQSort3.loopexit1
	jmp	.LBB3_114
.LBB3_110:                              # %CFerrorHandler.mainQSort3.loopexit3
	jmp	.LBB3_114
.LBB3_111:                              # %CFerrorHandler.mainQSort3.loopexit4
	jmp	.LBB3_114
.LBB3_112:                              # %CFerrorHandler.mainQSort3.loopexit5
	jmp	.LBB3_114
.LBB3_113:                              # %CFerrorHandler.mainQSort3.loopexit6
	jmp	.LBB3_114
.LBB3_114:                              # %CFerrorHandler.mainQSort3
	callq	FAULT_DETECTED_CFC
.Lfunc_end3:
	.size	mainQSort3, .Lfunc_end3-mainQSort3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mainSimpleSort
	.type	mainSimpleSort,@function
mainSimpleSort:                         # @mainSimpleSort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$2946, %ax              # imm = 0xB82
	xorw	%bx, %ax
	cmpw	$7245, %ax              # imm = 0x1C4D
	jne	.LBB4_82
# %bb.1:                                # %mainSimpleSort.split
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movl	%r9d, %r13d
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, -88(%rbp)          # 8-byte Spill
	movq	%r9, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	-112(%rbp), %r9         # 8-byte Reload
	movq	%r9, (%rdi)
	movq	%r11, -112(%rbp)        # 8-byte Spill
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%r11)
	movq	%r10, -96(%rbp)         # 8-byte Spill
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%r10)
	movq	%r12, -104(%rbp)        # 8-byte Spill
	movl	%ecx, (%r12)
	movl	%r8d, (%rsi)
	movl	%r13d, (%r14)
	movq	%r15, -120(%rbp)        # 8-byte Spill
	movl	16(%rbp), %eax
	movl	%eax, (%r15)
	movq	%rbx, %r12
	movq	24(%rbp), %rax
	movq	%rax, (%rbx)
	movl	(%r14), %ecx
	subl	(%rsi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdx)
	movl	(%rdx), %ecx
	movw	$7245, BasicBlockSignatureTracker # imm = 0x1C4D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %ecx
	jge	.LBB4_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$7292, %ax              # imm = 0x1C7C
	jne	.LBB4_82
# %bb.3:                                # %mainSimpleSort.split132
	movw	$7292, BasicBlockSignatureTracker # imm = 0x1C7C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB4_74
.LBB4_4:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$239, %cx
	cmpw	$7330, %cx              # imm = 0x1CA2
	jne	.LBB4_82
# %bb.5:                                # %mainSimpleSort.split134
	movq	-88(%rbp), %rbx         # 8-byte Reload
	movl	$0, (%rbx)
	movw	$7330, BasicBlockSignatureTracker # imm = 0x1CA2
	movw	$0, RunTimeSignatureAdjuster
.LBB4_6:                                # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %ax
	xorw	$17, %cx
	xorw	%ax, %cx
	cmpw	$7347, %cx              # imm = 0x1CB3
	jne	.LBB4_81
# %bb.7:                                # %mainSimpleSort.split138
                                        #   in Loop: Header=BB4_6 Depth=1
	movslq	(%rbx), %rcx
	movl	incs(,%rcx,4), %ecx
	movl	(%rdx), %eax
	movw	$7347, BasicBlockSignatureTracker # imm = 0x1CB3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jge	.LBB4_10
# %bb.8:                                #   in Loop: Header=BB4_6 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$123, %cx
	cmpw	$7368, %cx              # imm = 0x1CC8
	jne	.LBB4_81
# %bb.9:                                # %mainSimpleSort.split140
                                        #   in Loop: Header=BB4_6 Depth=1
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movw	$7368, BasicBlockSignatureTracker # imm = 0x1CC8
	movw	$106, RunTimeSignatureAdjuster
	jmp	.LBB4_6
.LBB4_10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$127, %ax
	cmpw	$7372, %ax              # imm = 0x1CCC
	jne	.LBB4_82
# %bb.11:                               # %mainSimpleSort.split142
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %eax
	addl	$-1, %eax
	movl	%eax, (%rdx)
	movw	$7372, BasicBlockSignatureTracker # imm = 0x1CCC
	movw	$0, RunTimeSignatureAdjuster
.LBB4_12:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_18 Depth 2
                                        #       Child Loop BB4_24 Depth 3
                                        #       Child Loop BB4_39 Depth 3
                                        #       Child Loop BB4_54 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$384, %ax               # imm = 0x180
	xorw	%cx, %ax
	cmpw	$7500, %ax              # imm = 0x1D4C
	jne	.LBB4_80
# %bb.13:                               # %mainSimpleSort.split144
                                        #   in Loop: Header=BB4_12 Depth=1
	movl	(%rdx), %eax
	movw	$7500, BasicBlockSignatureTracker # imm = 0x1D4C
	movw	$304, RunTimeSignatureAdjuster # imm = 0x130
	cmpl	$0, %eax
	jl	.LBB4_73
# %bb.14:                               # %Buffer__
                                        #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-31760, %ax            # imm = 0x83F0
	cmpw	$-24900, %ax            # imm = 0x9EBC
	jne	.LBB4_80
# %bb.15:                               # %mainSimpleSort.split146
                                        #   in Loop: Header=BB4_12 Depth=1
	movw	$-24900, BasicBlockSignatureTracker # imm = 0x9EBC
	movw	$-31760, RunTimeSignatureAdjuster # imm = 0x83F0
# %bb.16:                               #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$7539, %ax              # imm = 0x1D73
	jne	.LBB4_80
# %bb.17:                               # %mainSimpleSort.split200
                                        #   in Loop: Header=BB4_12 Depth=1
	movslq	(%rdx), %rax
	movl	incs(,%rax,4), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rsi), %eax
	addl	(%rcx), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$7539, BasicBlockSignatureTracker # imm = 0x1D73
	movw	$0, RunTimeSignatureAdjuster
.LBB4_18:                               #   Parent Loop BB4_12 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_24 Depth 3
                                        #       Child Loop BB4_39 Depth 3
                                        #       Child Loop BB4_54 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$241, %ax
	xorw	%cx, %ax
	cmpw	$7554, %ax              # imm = 0x1D82
	jne	.LBB4_79
# %bb.19:                               # %mainSimpleSort.split148
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r14), %ecx
	movw	$7554, BasicBlockSignatureTracker # imm = 0x1D82
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB4_22
# %bb.20:                               #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$77, %ax
	cmpw	$7631, %ax              # imm = 0x1DCF
	jne	.LBB4_80
# %bb.21:                               # %mainSimpleSort.split150
                                        #   in Loop: Header=BB4_12 Depth=1
	movw	$7631, BasicBlockSignatureTracker # imm = 0x1DCF
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB4_69
.LBB4_22:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$7635, %ax              # imm = 0x1DD3
	jne	.LBB4_79
# %bb.23:                               # %mainSimpleSort.split152
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	(%rdi), %rax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$7635, BasicBlockSignatureTracker # imm = 0x1DD3
	movw	$0, RunTimeSignatureAdjuster
.LBB4_24:                               #   Parent Loop BB4_12 Depth=1
                                        #     Parent Loop BB4_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$7637, %ax              # imm = 0x1DD5
	jne	.LBB4_78
# %bb.25:                               # %mainSimpleSort.split156
                                        #   in Loop: Header=BB4_24 Depth=3
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	movq	%rdi, %r15
	movq	(%rdi), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	subl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-120(%rbp), %rax        # 8-byte Reload
	addl	(%rax), %edi
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %esi
	addl	(%rax), %esi
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdx
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r8d
	movq	(%r12), %r9
	movw	$7637, BasicBlockSignatureTracker # imm = 0x1DD5
	movw	$0, RunTimeSignatureAdjuster
	callq	mainGtU
	movw	$7637, BasicBlockSignatureTracker # imm = 0x1DD5
	movw	$0, RunTimeSignatureAdjuster
	movw	$7637, BasicBlockSignatureTracker # imm = 0x1DD5
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB4_32
# %bb.26:                               #   in Loop: Header=BB4_24 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$7640, %ax              # imm = 0x1DD8
	movq	%r15, %rdx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	jne	.LBB4_78
# %bb.27:                               # %mainSimpleSort.split158
                                        #   in Loop: Header=BB4_24 Depth=3
	movq	(%rdx), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %ecx
	movq	-80(%rbp), %rbx         # 8-byte Reload
	subl	(%rbx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	subl	(%rbx), %eax
	movl	%eax, (%rdi)
	movl	(%rdi), %eax
	movl	(%rsi), %ecx
	addl	(%rbx), %ecx
	subl	$1, %ecx
	movw	$7640, BasicBlockSignatureTracker # imm = 0x1DD8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB4_30
# %bb.28:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$7651, %ax              # imm = 0x1DE3
	jne	.LBB4_79
# %bb.29:                               # %mainSimpleSort.split162
                                        #   in Loop: Header=BB4_18 Depth=2
	movw	$7651, BasicBlockSignatureTracker # imm = 0x1DE3
	movw	$54, RunTimeSignatureAdjuster
	jmp	.LBB4_33
.LBB4_30:                               #   in Loop: Header=BB4_24 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$7661, %ax              # imm = 0x1DED
	movq	%r15, %rdi
	movq	-72(%rbp), %rsi         # 8-byte Reload
	jne	.LBB4_78
# %bb.31:                               # %mainSimpleSort.split164
                                        #   in Loop: Header=BB4_24 Depth=3
	movw	$7661, BasicBlockSignatureTracker # imm = 0x1DED
	movw	$62, RunTimeSignatureAdjuster
	jmp	.LBB4_24
.LBB4_32:                               # %.loopexit4
                                        #   in Loop: Header=BB4_18 Depth=2
	jmp	.LBB4_33
.LBB4_33:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$7665, %ax              # imm = 0x1DF1
	movq	%r15, %rcx
	movq	%r14, %rsi
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB4_79
# %bb.34:                               # %mainSimpleSort.split160
                                        #   in Loop: Header=BB4_18 Depth=2
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movl	(%rsi), %ecx
	movw	$7665, BasicBlockSignatureTracker # imm = 0x1DF1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB4_37
# %bb.35:                               #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$784, %ax               # imm = 0x310
	cmpw	$7905, %ax              # imm = 0x1EE1
	movq	%r15, %rdi
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	-88(%rbp), %rdx         # 8-byte Reload
	jne	.LBB4_80
# %bb.36:                               # %mainSimpleSort.split166
                                        #   in Loop: Header=BB4_12 Depth=1
	movw	$7905, BasicBlockSignatureTracker # imm = 0x1EE1
	movw	$814, RunTimeSignatureAdjuster # imm = 0x32E
	jmp	.LBB4_69
.LBB4_37:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$778, %ax               # imm = 0x30A
	cmpw	$7931, %ax              # imm = 0x1EFB
	movq	%r15, %rax
	movq	-56(%rbp), %rsi         # 8-byte Reload
	jne	.LBB4_79
# %bb.38:                               # %mainSimpleSort.split168
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	(%rax), %rax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, (%rsi)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$7931, BasicBlockSignatureTracker # imm = 0x1EFB
	movw	$0, RunTimeSignatureAdjuster
.LBB4_39:                               #   Parent Loop BB4_12 Depth=1
                                        #     Parent Loop BB4_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$493, %ax               # imm = 0x1ED
	xorw	%cx, %ax
	cmpw	$7958, %ax              # imm = 0x1F16
	jne	.LBB4_77
# %bb.40:                               # %mainSimpleSort.split170
                                        #   in Loop: Header=BB4_39 Depth=3
	movq	(%r15), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	subl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-120(%rbp), %rax        # 8-byte Reload
	addl	(%rax), %edi
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %esi
	addl	(%rax), %esi
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdx
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r8d
	movq	(%r12), %r9
	movw	$7958, BasicBlockSignatureTracker # imm = 0x1F16
	movw	$707, RunTimeSignatureAdjuster # imm = 0x2C3
	callq	mainGtU
	movw	$7958, BasicBlockSignatureTracker # imm = 0x1F16
	movw	$707, RunTimeSignatureAdjuster # imm = 0x2C3
	movw	$7958, BasicBlockSignatureTracker # imm = 0x1F16
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB4_47
# %bb.41:                               #   in Loop: Header=BB4_39 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$7966, %ax              # imm = 0x1F1E
	jne	.LBB4_77
# %bb.42:                               # %mainSimpleSort.split172
                                        #   in Loop: Header=BB4_39 Depth=3
	movq	%r15, %rdx
	movq	(%rdx), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	subl	(%rdi), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rsi), %eax
	subl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	(%rsi), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	(%rdi), %ecx
	subl	$1, %ecx
	movw	$7966, BasicBlockSignatureTracker # imm = 0x1F1E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB4_45
# %bb.43:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$7973, %ax              # imm = 0x1F25
	jne	.LBB4_79
# %bb.44:                               # %mainSimpleSort.split176
                                        #   in Loop: Header=BB4_18 Depth=2
	movw	$7973, BasicBlockSignatureTracker # imm = 0x1F25
	movw	$51, RunTimeSignatureAdjuster
	jmp	.LBB4_48
.LBB4_45:                               #   in Loop: Header=BB4_39 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$7977, %ax              # imm = 0x1F29
	jne	.LBB4_77
# %bb.46:                               # %mainSimpleSort.split178
                                        #   in Loop: Header=BB4_39 Depth=3
	movw	$7977, BasicBlockSignatureTracker # imm = 0x1F29
	movw	$466, RunTimeSignatureAdjuster # imm = 0x1D2
	jmp	.LBB4_39
.LBB4_47:                               # %.loopexit2
                                        #   in Loop: Header=BB4_18 Depth=2
	jmp	.LBB4_48
.LBB4_48:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$7978, %ax              # imm = 0x1F2A
	movq	%r15, %rcx
	movq	%r14, %rsi
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB4_79
# %bb.49:                               # %mainSimpleSort.split174
                                        #   in Loop: Header=BB4_18 Depth=2
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movl	(%rsi), %ecx
	movw	$7978, BasicBlockSignatureTracker # imm = 0x1F2A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB4_52
# %bb.50:                               #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$102, %ax
	cmpw	$8012, %ax              # imm = 0x1F4C
	movq	%r15, %rdi
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	-88(%rbp), %rdx         # 8-byte Reload
	jne	.LBB4_80
# %bb.51:                               # %mainSimpleSort.split180
                                        #   in Loop: Header=BB4_12 Depth=1
	movw	$8012, BasicBlockSignatureTracker # imm = 0x1F4C
	movw	$643, RunTimeSignatureAdjuster # imm = 0x283
	jmp	.LBB4_69
.LBB4_52:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$140, %ax
	cmpw	$8102, %ax              # imm = 0x1FA6
	movq	%r15, %rax
	movq	-56(%rbp), %rsi         # 8-byte Reload
	jne	.LBB4_79
# %bb.53:                               # %mainSimpleSort.split182
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	(%rax), %rax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, (%rsi)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$8102, BasicBlockSignatureTracker # imm = 0x1FA6
	movw	$0, RunTimeSignatureAdjuster
.LBB4_54:                               #   Parent Loop BB4_12 Depth=1
                                        #     Parent Loop BB4_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$13, %ax
	xorw	%cx, %ax
	cmpw	$8107, %ax              # imm = 0x1FAB
	jne	.LBB4_76
# %bb.55:                               # %mainSimpleSort.split184
                                        #   in Loop: Header=BB4_54 Depth=3
	movq	(%r15), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	subl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-120(%rbp), %rax        # 8-byte Reload
	addl	(%rax), %edi
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %esi
	addl	(%rax), %esi
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdx
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r8d
	movq	(%r12), %r9
	movw	$8107, BasicBlockSignatureTracker # imm = 0x1FAB
	movw	$638, RunTimeSignatureAdjuster # imm = 0x27E
	callq	mainGtU
	movw	$8107, BasicBlockSignatureTracker # imm = 0x1FAB
	movw	$638, RunTimeSignatureAdjuster # imm = 0x27E
	movw	$8107, BasicBlockSignatureTracker # imm = 0x1FAB
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB4_62
# %bb.56:                               #   in Loop: Header=BB4_54 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16317, %ax             # imm = 0x3FBD
	cmpw	$8214, %ax              # imm = 0x2016
	jne	.LBB4_76
# %bb.57:                               # %mainSimpleSort.split186
                                        #   in Loop: Header=BB4_54 Depth=3
	movq	%r15, %rdx
	movq	(%rdx), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	subl	(%rdi), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rsi), %eax
	subl	(%rdi), %eax
	movl	%eax, (%rsi)
	movl	(%rsi), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	(%rdi), %ecx
	subl	$1, %ecx
	movw	$8214, BasicBlockSignatureTracker # imm = 0x2016
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB4_60
# %bb.58:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$8245, %ax              # imm = 0x2035
	jne	.LBB4_79
# %bb.59:                               # %mainSimpleSort.split190
                                        #   in Loop: Header=BB4_18 Depth=2
	movw	$8245, BasicBlockSignatureTracker # imm = 0x2035
	movw	$16286, RunTimeSignatureAdjuster # imm = 0x3F9E
	jmp	.LBB4_63
.LBB4_60:                               #   in Loop: Header=BB4_54 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$71, %ax
	cmpw	$8273, %ax              # imm = 0x2051
	jne	.LBB4_76
# %bb.61:                               # %mainSimpleSort.split192
                                        #   in Loop: Header=BB4_54 Depth=3
	movw	$8273, BasicBlockSignatureTracker # imm = 0x2051
	movw	$16375, RunTimeSignatureAdjuster # imm = 0x3FF7
	jmp	.LBB4_54
.LBB4_62:                               # %.loopexit
                                        #   in Loop: Header=BB4_18 Depth=2
	jmp	.LBB4_63
.LBB4_63:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16327, %ax             # imm = 0x3FC7
	xorw	%cx, %ax
	cmpw	$8300, %ax              # imm = 0x206C
	movq	%r15, %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB4_79
# %bb.64:                               # %mainSimpleSort.split188
                                        #   in Loop: Header=BB4_18 Depth=2
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movq	(%r12), %rax
	movl	(%rax), %eax
	movw	$8300, BasicBlockSignatureTracker # imm = 0x206C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB4_67
# %bb.65:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$235, %ax
	cmpw	$8327, %ax              # imm = 0x2087
	jne	.LBB4_82
# %bb.66:                               # %mainSimpleSort.split194
	movw	$8327, BasicBlockSignatureTracker # imm = 0x2087
	movw	$15611, RunTimeSignatureAdjuster # imm = 0x3CFB
	jmp	.LBB4_74
.LBB4_67:                               #   in Loop: Header=BB4_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$224, %ax
	cmpw	$8332, %ax              # imm = 0x208C
	movq	%r15, %rdi
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	-88(%rbp), %rdx         # 8-byte Reload
	jne	.LBB4_79
# %bb.68:                               # %mainSimpleSort.split196
                                        #   in Loop: Header=BB4_18 Depth=2
	movw	$8332, BasicBlockSignatureTracker # imm = 0x208C
	movw	$15871, RunTimeSignatureAdjuster # imm = 0x3DFF
	jmp	.LBB4_18
.LBB4_69:                               #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15743, %ax             # imm = 0x3D7F
	xorw	%cx, %ax
	cmpw	$8368, %ax              # imm = 0x20B0
	jne	.LBB4_80
# %bb.70:                               # %mainSimpleSort.split154
                                        #   in Loop: Header=BB4_12 Depth=1
	movw	$8368, BasicBlockSignatureTracker # imm = 0x20B0
	movw	$0, RunTimeSignatureAdjuster
# %bb.71:                               #   in Loop: Header=BB4_12 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$114, %ax
	cmpw	$8386, %ax              # imm = 0x20C2
	jne	.LBB4_80
# %bb.72:                               # %mainSimpleSort.split198
                                        #   in Loop: Header=BB4_12 Depth=1
	movl	(%rdx), %eax
	addl	$-1, %eax
	movl	%eax, (%rdx)
	movw	$8386, BasicBlockSignatureTracker # imm = 0x20C2
	movw	$15374, RunTimeSignatureAdjuster # imm = 0x3C0E
	jmp	.LBB4_12
.LBB4_73:                               # %.loopexit7
	jmp	.LBB4_74
.LBB4_74:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15546, %ax             # imm = 0x3CBA
	xorw	%cx, %ax
	cmpw	$8390, %ax              # imm = 0x20C6
	jne	.LBB4_82
# %bb.75:                               # %mainSimpleSort.split136
	movw	$8390, BasicBlockSignatureTracker # imm = 0x20C6
	movw	$14191, RunTimeSignatureAdjuster # imm = 0x376F
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB4_76:                               # %CFerrorHandler.mainSimpleSort.loopexit
	jmp	.LBB4_82
.LBB4_77:                               # %CFerrorHandler.mainSimpleSort.loopexit1
	jmp	.LBB4_82
.LBB4_78:                               # %CFerrorHandler.mainSimpleSort.loopexit3
	jmp	.LBB4_82
.LBB4_79:                               # %CFerrorHandler.mainSimpleSort.loopexit5
	jmp	.LBB4_82
.LBB4_80:                               # %CFerrorHandler.mainSimpleSort.loopexit6
	jmp	.LBB4_82
.LBB4_81:                               # %CFerrorHandler.mainSimpleSort.loopexit8
	jmp	.LBB4_82
.LBB4_82:                               # %CFerrorHandler.mainSimpleSort
	callq	FAULT_DETECTED_CFC
.Lfunc_end4:
	.size	mainSimpleSort, .Lfunc_end4-mainSimpleSort
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mmed3
	.type	mmed3,@function
mmed3:                                  # @mmed3
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$14601, %ax             # imm = 0x3909
	xorw	%cx, %ax
	cmpw	$8464, %ax              # imm = 0x2110
	jne	.LBB5_14
# %bb.1:                                # %mmed3.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movb	%dil, (%r9)
	movb	%sil, (%r8)
	movb	%dl, (%rax)
	movzbl	(%r9), %edx
	movzbl	(%r8), %esi
	movw	$8464, BasicBlockSignatureTracker # imm = 0x2110
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%esi, %edx
	jle	.LBB5_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$95, %dx
	cmpw	$8527, %dx              # imm = 0x214F
	jne	.LBB5_14
# %bb.3:                                # %mmed3.split27
	movb	(%r9), %dl
	movb	%dl, (%rcx)
	movb	(%r8), %dl
	movb	%dl, (%r9)
	movb	(%rcx), %cl
	movb	%cl, (%r8)
	movw	$8527, BasicBlockSignatureTracker # imm = 0x214F
	movw	$95, RunTimeSignatureAdjuster
.LBB5_4:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$122, %cx
	xorw	%dx, %cx
	cmpw	$8554, %cx              # imm = 0x216A
	jne	.LBB5_14
# %bb.5:                                # %mmed3.split29
	movzbl	(%r8), %ecx
	movzbl	(%rax), %edx
	movw	$8554, BasicBlockSignatureTracker # imm = 0x216A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jle	.LBB5_12
# %bb.6:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$251, %cx
	cmpw	$8593, %cx              # imm = 0x2191
	jne	.LBB5_14
# %bb.7:                                # %mmed3.split31
	movb	(%rax), %al
	movb	%al, (%r8)
	movzbl	(%r9), %eax
	movzbl	(%r8), %ecx
	movw	$8593, BasicBlockSignatureTracker # imm = 0x2191
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB5_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$8607, %ax              # imm = 0x219F
	jne	.LBB5_14
# %bb.9:                                # %mmed3.split35
	movb	(%r9), %al
	movb	%al, (%r8)
	movw	$8607, BasicBlockSignatureTracker # imm = 0x219F
	movw	$14, RunTimeSignatureAdjuster
.LBB5_10:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$8629, %ax              # imm = 0x21B5
	jne	.LBB5_14
# %bb.11:                               # %mmed3.split37
	movw	$8629, BasicBlockSignatureTracker # imm = 0x21B5
	movw	$223, RunTimeSignatureAdjuster
.LBB5_12:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$160, %ax
	xorw	%cx, %ax
	cmpw	$8650, %ax              # imm = 0x21CA
	jne	.LBB5_14
# %bb.13:                               # %mmed3.split33
	movb	(%r8), %al
	movw	$8650, BasicBlockSignatureTracker # imm = 0x21CA
	movw	$13926, RunTimeSignatureAdjuster # imm = 0x3666
	movzbl	%al, %eax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB5_14:                               # %CFerrorHandler.mmed3
	callq	FAULT_DETECTED_CFC
.Lfunc_end5:
	.size	mmed3, .Lfunc_end5-mmed3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mainGtU
	.type	mainGtU,@function
mainGtU:                                # @mainGtU
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, %r12d
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$16358, %ax             # imm = 0x3FE6
	xorw	%bx, %ax
	cmpw	$8755, %ax              # imm = 0x2233
	jne	.LBB6_135
# %bb.1:                                # %mainGtU.split220
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$16358, %ax             # imm = 0x3FE6
	xorw	%bx, %ax
	cmpw	$8755, %ax              # imm = 0x2233
	jne	.LBB6_135
# %bb.2:                                # %mainGtU.split218
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$16358, %ax             # imm = 0x3FE6
	xorw	%bx, %ax
	cmpw	$8755, %ax              # imm = 0x2233
	jne	.LBB6_135
# %bb.3:                                # %mainGtU.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movl	%esi, -84(%rbp)         # 4-byte Spill
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -72(%rbp)         # 8-byte Spill
	movq	%r10, %rsp
	movq	-56(%rbp), %r10         # 8-byte Reload
	movl	%r12d, (%r10)
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, (%rbx)
	movq	%rdx, (%r14)
	movq	%r15, %r12
	movq	%rcx, (%r15)
	movq	%r11, %r15
	movl	%r8d, (%r11)
	movq	%r14, %rax
	movq	%r13, %r8
	movq	%r9, (%r13)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rax), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movzbl	(%rdi), %ecx
	movzbl	(%rsi), %edx
	movw	$8755, BasicBlockSignatureTracker # imm = 0x2233
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$8762, %ax              # imm = 0x223A
	jne	.LBB6_135
# %bb.5:                                # %mainGtU.split222
	movzbl	(%rdi), %eax
	movzbl	(%rsi), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$8762, BasicBlockSignatureTracker # imm = 0x223A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB6_132
.LBB6_6:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$83, %cx
	cmpw	$8800, %cx              # imm = 0x2260
	jne	.LBB6_135
# %bb.7:                                # %mainGtU.split224
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rax), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movzbl	(%rdi), %ecx
	movzbl	(%rsi), %edx
	movw	$8800, BasicBlockSignatureTracker # imm = 0x2260
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$242, %ax
	cmpw	$8850, %ax              # imm = 0x2292
	jne	.LBB6_135
# %bb.9:                                # %mainGtU.split228
	movzbl	(%rdi), %eax
	movzbl	(%rsi), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$8850, BasicBlockSignatureTracker # imm = 0x2292
	movw	$168, RunTimeSignatureAdjuster
	jmp	.LBB6_132
.LBB6_10:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$213, %cx
	cmpw	$8885, %cx              # imm = 0x22B5
	jne	.LBB6_135
# %bb.11:                               # %mainGtU.split230
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rax), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movzbl	(%rdi), %ecx
	movzbl	(%rsi), %edx
	movw	$8885, BasicBlockSignatureTracker # imm = 0x22B5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_14
# %bb.12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$105, %ax
	cmpw	$8924, %ax              # imm = 0x22DC
	jne	.LBB6_135
# %bb.13:                               # %mainGtU.split232
	movzbl	(%rdi), %eax
	movzbl	(%rsi), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$8924, BasicBlockSignatureTracker # imm = 0x22DC
	movw	$230, RunTimeSignatureAdjuster
	jmp	.LBB6_132
.LBB6_14:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$107, %cx
	cmpw	$8926, %cx              # imm = 0x22DE
	jne	.LBB6_135
# %bb.15:                               # %mainGtU.split234
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rax), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movzbl	(%rdi), %ecx
	movzbl	(%rsi), %edx
	movw	$8926, BasicBlockSignatureTracker # imm = 0x22DE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_18
# %bb.16:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$8932, %ax              # imm = 0x22E4
	jne	.LBB6_135
# %bb.17:                               # %mainGtU.split236
	movzbl	(%rdi), %eax
	movzbl	(%rsi), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$8932, BasicBlockSignatureTracker # imm = 0x22E4
	movw	$222, RunTimeSignatureAdjuster
	jmp	.LBB6_132
.LBB6_18:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$476, %cx               # imm = 0x1DC
	cmpw	$8962, %cx              # imm = 0x2302
	jne	.LBB6_135
# %bb.19:                               # %mainGtU.split238
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rax), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movzbl	(%rdi), %ecx
	movzbl	(%rsi), %edx
	movw	$8962, BasicBlockSignatureTracker # imm = 0x2302
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_22
# %bb.20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$8964, %ax              # imm = 0x2304
	jne	.LBB6_135
# %bb.21:                               # %mainGtU.split240
	movzbl	(%rdi), %eax
	movzbl	(%rsi), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$8964, BasicBlockSignatureTracker # imm = 0x2304
	movw	$318, RunTimeSignatureAdjuster # imm = 0x13E
	jmp	.LBB6_132
.LBB6_22:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$25, %cx
	cmpw	$8987, %cx              # imm = 0x231B
	jne	.LBB6_135
# %bb.23:                               # %mainGtU.split242
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rax), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movzbl	(%rdi), %ecx
	movzbl	(%rsi), %edx
	movw	$8987, BasicBlockSignatureTracker # imm = 0x231B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_26
# %bb.24:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$9002, %ax              # imm = 0x232A
	jne	.LBB6_135
# %bb.25:                               # %mainGtU.split244
	movzbl	(%rdi), %eax
	movzbl	(%rsi), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9002, BasicBlockSignatureTracker # imm = 0x232A
	movw	$272, RunTimeSignatureAdjuster # imm = 0x110
	jmp	.LBB6_132
.LBB6_26:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$46, %cx
	cmpw	$9013, %cx              # imm = 0x2335
	jne	.LBB6_135
# %bb.27:                               # %mainGtU.split246
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rax), %rcx
	movl	(%r10), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	%rax, %r13
	movq	(%rax), %rcx
	movq	%rbx, %r14
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rsi)
	movq	%rdi, %r11
	movzbl	(%rdi), %ecx
	movq	%rsi, %r10
	movzbl	(%rsi), %edx
	movw	$9013, BasicBlockSignatureTracker # imm = 0x2335
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_30
# %bb.28:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$126, %ax
	cmpw	$9035, %ax              # imm = 0x234B
	jne	.LBB6_135
# %bb.29:                               # %mainGtU.split248
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9035, BasicBlockSignatureTracker # imm = 0x234B
	movw	$369, RunTimeSignatureAdjuster # imm = 0x171
	jmp	.LBB6_132
.LBB6_30:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$110, %cx
	cmpw	$9051, %cx              # imm = 0x235B
	movq	%r10, %r9
	movq	%r11, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rbx
	movq	%r13, %rsi
	jne	.LBB6_135
# %bb.31:                               # %mainGtU.split250
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rsi), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%r9)
	movzbl	(%rdi), %ecx
	movzbl	(%r9), %edx
	movw	$9051, BasicBlockSignatureTracker # imm = 0x235B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_34
# %bb.32:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$9063, %ax              # imm = 0x2367
	jne	.LBB6_135
# %bb.33:                               # %mainGtU.split252
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9063, BasicBlockSignatureTracker # imm = 0x2367
	movw	$349, RunTimeSignatureAdjuster # imm = 0x15D
	jmp	.LBB6_132
.LBB6_34:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$194, %cx
	cmpw	$9113, %cx              # imm = 0x2399
	movq	%r10, %r9
	movq	%r11, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rbx
	movq	%r13, %rsi
	jne	.LBB6_135
# %bb.35:                               # %mainGtU.split254
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rsi), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%r9)
	movzbl	(%rdi), %ecx
	movzbl	(%r9), %edx
	movw	$9113, BasicBlockSignatureTracker # imm = 0x2399
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_38
# %bb.36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$95, %ax
	cmpw	$9158, %ax              # imm = 0x23C6
	jne	.LBB6_135
# %bb.37:                               # %mainGtU.split256
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9158, BasicBlockSignatureTracker # imm = 0x23C6
	movw	$508, RunTimeSignatureAdjuster # imm = 0x1FC
	jmp	.LBB6_132
.LBB6_38:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$127, %cx
	cmpw	$9190, %cx              # imm = 0x23E6
	movq	%r10, %r9
	movq	%r11, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rbx
	movq	%r13, %rsi
	jne	.LBB6_135
# %bb.39:                               # %mainGtU.split258
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rsi), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%r9)
	movzbl	(%rdi), %ecx
	movzbl	(%r9), %edx
	movw	$9190, BasicBlockSignatureTracker # imm = 0x23E6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_42
# %bb.40:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2027, %ax              # imm = 0x7EB
	cmpw	$9229, %ax              # imm = 0x240D
	jne	.LBB6_135
# %bb.41:                               # %mainGtU.split260
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9229, BasicBlockSignatureTracker # imm = 0x240D
	movw	$1591, RunTimeSignatureAdjuster # imm = 0x637
	jmp	.LBB6_132
.LBB6_42:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$1959, %cx              # imm = 0x7A7
	cmpw	$9281, %cx              # imm = 0x2441
	movq	%r10, %r9
	movq	%r11, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rbx
	movq	%r13, %rsi
	jne	.LBB6_135
# %bb.43:                               # %mainGtU.split262
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rsi), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%r9)
	movzbl	(%rdi), %ecx
	movzbl	(%r9), %edx
	movw	$9281, BasicBlockSignatureTracker # imm = 0x2441
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_46
# %bb.44:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$9300, %ax              # imm = 0x2454
	jne	.LBB6_135
# %bb.45:                               # %mainGtU.split264
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9300, BasicBlockSignatureTracker # imm = 0x2454
	movw	$1646, RunTimeSignatureAdjuster # imm = 0x66E
	jmp	.LBB6_132
.LBB6_46:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$251, %cx
	cmpw	$9402, %cx              # imm = 0x24BA
	movq	%r10, %r9
	movq	%r11, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rbx
	movq	%r13, %rsi
	jne	.LBB6_135
# %bb.47:                               # %mainGtU.split266
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	(%rbx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rbx)
	movq	(%rsi), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%rdi)
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	movb	(%rcx,%rdx), %cl
	movb	%cl, (%r9)
	movzbl	(%rdi), %ecx
	movzbl	(%r9), %edx
	movw	$9402, BasicBlockSignatureTracker # imm = 0x24BA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_50
# %bb.48:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$441, %ax               # imm = 0x1B9
	cmpw	$9475, %ax              # imm = 0x2503
	jne	.LBB6_135
# %bb.49:                               # %mainGtU.split268
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9475, BasicBlockSignatureTracker # imm = 0x2503
	movw	$1849, RunTimeSignatureAdjuster # imm = 0x739
	jmp	.LBB6_132
.LBB6_50:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$425, %cx               # imm = 0x1A9
	cmpw	$9491, %cx              # imm = 0x2513
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rdx
	jne	.LBB6_135
# %bb.51:                               # %mainGtU.split270
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	(%rdx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdx)
	movl	(%r15), %ecx
	addl	$8, %ecx
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	%ecx, (%rax)
	movw	$9491, BasicBlockSignatureTracker # imm = 0x2513
	movw	$0, RunTimeSignatureAdjuster
.LBB6_52:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$36, %cx
	xorw	%dx, %cx
	cmpw	$9527, %cx              # imm = 0x2537
	jne	.LBB6_134
# %bb.53:                               # %mainGtU.split272
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r13, %rax
	movq	(%rax), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rax), %rcx
	movl	(%r14), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9527, BasicBlockSignatureTracker # imm = 0x2537
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_56
# %bb.54:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$114, %ax
	cmpw	$9541, %ax              # imm = 0x2545
	jne	.LBB6_135
# %bb.55:                               # %mainGtU.split274
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9541, BasicBlockSignatureTracker # imm = 0x2545
	movw	$1919, RunTimeSignatureAdjuster # imm = 0x77F
	jmp	.LBB6_132
.LBB6_56:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$109, %cx
	cmpw	$9562, %cx              # imm = 0x255A
	jne	.LBB6_134
# %bb.57:                               # %mainGtU.split276
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9562, BasicBlockSignatureTracker # imm = 0x255A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_60
# %bb.58:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$9573, %ax              # imm = 0x2565
	jne	.LBB6_135
# %bb.59:                               # %mainGtU.split278
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9573, BasicBlockSignatureTracker # imm = 0x2565
	movw	$1887, RunTimeSignatureAdjuster # imm = 0x75F
	jmp	.LBB6_132
.LBB6_60:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$60, %cx
	cmpw	$9574, %cx              # imm = 0x2566
	jne	.LBB6_134
# %bb.61:                               # %mainGtU.split280
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9574, BasicBlockSignatureTracker # imm = 0x2566
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_64
# %bb.62:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$9578, %ax              # imm = 0x256A
	jne	.LBB6_135
# %bb.63:                               # %mainGtU.split282
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9578, BasicBlockSignatureTracker # imm = 0x256A
	movw	$1872, RunTimeSignatureAdjuster # imm = 0x750
	jmp	.LBB6_132
.LBB6_64:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$21, %cx
	cmpw	$9587, %cx              # imm = 0x2573
	jne	.LBB6_134
# %bb.65:                               # %mainGtU.split284
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9587, BasicBlockSignatureTracker # imm = 0x2573
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_68
# %bb.66:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$9593, %ax              # imm = 0x2579
	jne	.LBB6_135
# %bb.67:                               # %mainGtU.split286
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9593, BasicBlockSignatureTracker # imm = 0x2579
	movw	$1859, RunTimeSignatureAdjuster # imm = 0x743
	jmp	.LBB6_132
.LBB6_68:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$229, %cx
	cmpw	$9622, %cx              # imm = 0x2596
	jne	.LBB6_134
# %bb.69:                               # %mainGtU.split288
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9622, BasicBlockSignatureTracker # imm = 0x2596
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_72
# %bb.70:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$9635, %ax              # imm = 0x25A3
	jne	.LBB6_135
# %bb.71:                               # %mainGtU.split290
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9635, BasicBlockSignatureTracker # imm = 0x25A3
	movw	$1945, RunTimeSignatureAdjuster # imm = 0x799
	jmp	.LBB6_132
.LBB6_72:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$61, %cx
	cmpw	$9643, %cx              # imm = 0x25AB
	jne	.LBB6_134
# %bb.73:                               # %mainGtU.split292
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9643, BasicBlockSignatureTracker # imm = 0x25AB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_76
# %bb.74:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$100, %ax
	cmpw	$9679, %ax              # imm = 0x25CF
	jne	.LBB6_135
# %bb.75:                               # %mainGtU.split294
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9679, BasicBlockSignatureTracker # imm = 0x25CF
	movw	$2037, RunTimeSignatureAdjuster # imm = 0x7F5
	jmp	.LBB6_132
.LBB6_76:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$112, %cx
	cmpw	$9691, %cx              # imm = 0x25DB
	jne	.LBB6_134
# %bb.77:                               # %mainGtU.split296
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9691, BasicBlockSignatureTracker # imm = 0x25DB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_80
# %bb.78:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$9696, %ax              # imm = 0x25E0
	jne	.LBB6_135
# %bb.79:                               # %mainGtU.split298
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9696, BasicBlockSignatureTracker # imm = 0x25E0
	movw	$2010, RunTimeSignatureAdjuster # imm = 0x7DA
	jmp	.LBB6_132
.LBB6_80:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$973, %cx               # imm = 0x3CD
	cmpw	$9750, %cx              # imm = 0x2616
	jne	.LBB6_134
# %bb.81:                               # %mainGtU.split300
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9750, BasicBlockSignatureTracker # imm = 0x2616
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_84
# %bb.82:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$9759, %ax              # imm = 0x261F
	jne	.LBB6_135
# %bb.83:                               # %mainGtU.split302
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9759, BasicBlockSignatureTracker # imm = 0x261F
	movw	$1061, RunTimeSignatureAdjuster # imm = 0x425
	jmp	.LBB6_132
.LBB6_84:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$45, %cx
	cmpw	$9787, %cx              # imm = 0x263B
	jne	.LBB6_134
# %bb.85:                               # %mainGtU.split304
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9787, BasicBlockSignatureTracker # imm = 0x263B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_88
# %bb.86:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$9808, %ax              # imm = 0x2650
	jne	.LBB6_135
# %bb.87:                               # %mainGtU.split306
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9808, BasicBlockSignatureTracker # imm = 0x2650
	movw	$1130, RunTimeSignatureAdjuster # imm = 0x46A
	jmp	.LBB6_132
.LBB6_88:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$185, %cx
	cmpw	$9858, %cx              # imm = 0x2682
	jne	.LBB6_134
# %bb.89:                               # %mainGtU.split308
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9858, BasicBlockSignatureTracker # imm = 0x2682
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_92
# %bb.90:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$9896, %ax              # imm = 0x26A8
	jne	.LBB6_135
# %bb.91:                               # %mainGtU.split310
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9896, BasicBlockSignatureTracker # imm = 0x26A8
	movw	$1170, RunTimeSignatureAdjuster # imm = 0x492
	jmp	.LBB6_132
.LBB6_92:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$41, %cx
	cmpw	$9899, %cx              # imm = 0x26AB
	jne	.LBB6_134
# %bb.93:                               # %mainGtU.split312
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9899, BasicBlockSignatureTracker # imm = 0x26AB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_96
# %bb.94:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$9902, %ax              # imm = 0x26AE
	jne	.LBB6_135
# %bb.95:                               # %mainGtU.split314
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9902, BasicBlockSignatureTracker # imm = 0x26AE
	movw	$1172, RunTimeSignatureAdjuster # imm = 0x494
	jmp	.LBB6_132
.LBB6_96:                               #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$30, %cx
	cmpw	$9909, %cx              # imm = 0x26B5
	jne	.LBB6_134
# %bb.97:                               # %mainGtU.split316
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9909, BasicBlockSignatureTracker # imm = 0x26B5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_100
# %bb.98:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$9915, %ax              # imm = 0x26BB
	jne	.LBB6_135
# %bb.99:                               # %mainGtU.split318
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9915, BasicBlockSignatureTracker # imm = 0x26BB
	movw	$1153, RunTimeSignatureAdjuster # imm = 0x481
	jmp	.LBB6_132
.LBB6_100:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$119, %cx
	cmpw	$9922, %cx              # imm = 0x26C2
	jne	.LBB6_134
# %bb.101:                              # %mainGtU.split320
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9922, BasicBlockSignatureTracker # imm = 0x26C2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_104
# %bb.102:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$9938, %ax              # imm = 0x26D2
	jne	.LBB6_135
# %bb.103:                              # %mainGtU.split322
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9938, BasicBlockSignatureTracker # imm = 0x26D2
	movw	$1256, RunTimeSignatureAdjuster # imm = 0x4E8
	jmp	.LBB6_132
.LBB6_104:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$20, %cx
	cmpw	$9942, %cx              # imm = 0x26D6
	jne	.LBB6_134
# %bb.105:                              # %mainGtU.split324
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$9942, BasicBlockSignatureTracker # imm = 0x26D6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_108
# %bb.106:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$9978, %ax              # imm = 0x26FA
	jne	.LBB6_135
# %bb.107:                              # %mainGtU.split326
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$9978, BasicBlockSignatureTracker # imm = 0x26FA
	movw	$1216, RunTimeSignatureAdjuster # imm = 0x4C0
	jmp	.LBB6_132
.LBB6_108:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$40, %cx
	cmpw	$9982, %cx              # imm = 0x26FE
	jne	.LBB6_134
# %bb.109:                              # %mainGtU.split328
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdi
	movl	(%rdi), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdi)
	movq	%r13, %rbx
	movq	(%rbx), %rcx
	movl	(%rax), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r11, %rsi
	movb	%cl, (%rsi)
	movq	(%rbx), %rcx
	movl	(%rdi), %edx
	movb	(%rcx,%rdx), %cl
	movq	%r10, %rdx
	movb	%cl, (%rdx)
	movzbl	(%rsi), %ecx
	movzbl	(%rdx), %edx
	movw	$9982, BasicBlockSignatureTracker # imm = 0x26FE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_112
# %bb.110:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$490, %ax               # imm = 0x1EA
	cmpw	$10004, %ax             # imm = 0x2714
	jne	.LBB6_135
# %bb.111:                              # %mainGtU.split330
	movzbl	(%r11), %eax
	movzbl	(%r10), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$10004, BasicBlockSignatureTracker # imm = 0x2714
	movw	$1326, RunTimeSignatureAdjuster # imm = 0x52E
	jmp	.LBB6_132
.LBB6_112:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$488, %cx               # imm = 0x1E8
	cmpw	$10006, %cx             # imm = 0x2716
	jne	.LBB6_134
# %bb.113:                              # %mainGtU.split332
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	%r12, %r9
	movq	(%r9), %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movw	%cx, (%rax)
	movq	(%r9), %rcx
	movl	(%r14), %edx
	movw	(%rcx,%rdx,2), %cx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movw	%cx, (%rdx)
	movzwl	(%rax), %ecx
	movzwl	(%rdx), %edx
	movw	$10006, BasicBlockSignatureTracker # imm = 0x2716
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB6_116
# %bb.114:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$10017, %ax             # imm = 0x2721
	jne	.LBB6_135
# %bb.115:                              # %mainGtU.split334
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzwl	(%rcx), %ecx
	cmpl	%ecx, %eax
	setg	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$10017, BasicBlockSignatureTracker # imm = 0x2721
	movw	$1307, RunTimeSignatureAdjuster # imm = 0x51B
	jmp	.LBB6_132
.LBB6_116:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$73, %cx
	cmpw	$10079, %cx             # imm = 0x275F
	jne	.LBB6_134
# %bb.117:                              # %mainGtU.split336
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	%r14, %rdx
	movl	(%rdx), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rdx)
	movl	(%rax), %ecx
	movl	(%r15), %edx
	movw	$10079, BasicBlockSignatureTracker # imm = 0x275F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jb	.LBB6_120
# %bb.118:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$60, %cx
	cmpw	$10083, %cx             # imm = 0x2763
	jne	.LBB6_134
# %bb.119:                              # %mainGtU.split338
                                        #   in Loop: Header=BB6_52 Depth=1
	movl	(%r15), %ecx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, (%rax)
	movw	$10083, BasicBlockSignatureTracker # imm = 0x2763
	movw	$60, RunTimeSignatureAdjuster
.LBB6_120:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$40, %cx
	xorw	%dx, %cx
	cmpw	$10103, %cx             # imm = 0x2777
	jne	.LBB6_134
# %bb.121:                              # %mainGtU.split340
                                        #   in Loop: Header=BB6_52 Depth=1
	movl	(%r14), %ecx
	movl	(%r15), %edx
	movw	$10103, BasicBlockSignatureTracker # imm = 0x2777
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jb	.LBB6_124
# %bb.122:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$14, %cx
	cmpw	$10105, %cx             # imm = 0x2779
	jne	.LBB6_134
# %bb.123:                              # %mainGtU.split342
                                        #   in Loop: Header=BB6_52 Depth=1
	movl	(%r15), %ecx
	movq	%r14, %rax
	movl	(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, (%rax)
	movw	$10105, BasicBlockSignatureTracker # imm = 0x2779
	movw	$14, RunTimeSignatureAdjuster
.LBB6_124:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$244, %cx
	xorw	%dx, %cx
	cmpw	$10115, %cx             # imm = 0x2783
	jne	.LBB6_134
# %bb.125:                              # %mainGtU.split344
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, (%rax)
	movq	(%r8), %rcx
	movl	(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, (%rcx)
	movw	$10115, BasicBlockSignatureTracker # imm = 0x2783
	movw	$0, RunTimeSignatureAdjuster
# %bb.126:                              #   in Loop: Header=BB6_52 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$22, %cx
	cmpw	$10133, %cx             # imm = 0x2795
	jne	.LBB6_134
# %bb.127:                              # %mainGtU.split346
                                        #   in Loop: Header=BB6_52 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movw	$10133, BasicBlockSignatureTracker # imm = 0x2795
	movw	$646, RunTimeSignatureAdjuster # imm = 0x286
	cmpl	$0, %ecx
	jge	.LBB6_52
# %bb.128:                              # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29652, %ax             # imm = 0x73D4
	cmpw	$21569, %ax             # imm = 0x5441
	jne	.LBB6_135
# %bb.129:                              # %mainGtU.split348
	movw	$21569, BasicBlockSignatureTracker # imm = 0x5441
	movw	$29652, RunTimeSignatureAdjuster # imm = 0x73D4
# %bb.130:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$10145, %ax             # imm = 0x27A1
	jne	.LBB6_135
# %bb.131:                              # %mainGtU.split350
	movq	-48(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movw	$10145, BasicBlockSignatureTracker # imm = 0x27A1
	movw	$1435, RunTimeSignatureAdjuster # imm = 0x59B
.LBB6_132:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1426, %ax              # imm = 0x592
	xorw	%cx, %ax
	cmpw	$10152, %ax             # imm = 0x27A8
	jne	.LBB6_135
# %bb.133:                              # %mainGtU.split226
	movq	-48(%rbp), %rax         # 8-byte Reload
	movb	(%rax), %al
	movw	$10152, BasicBlockSignatureTracker # imm = 0x27A8
	movw	$14971, RunTimeSignatureAdjuster # imm = 0x3A7B
	movzbl	%al, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB6_134:                              # %CFerrorHandler.mainGtU.loopexit
	jmp	.LBB6_135
.LBB6_135:                              # %CFerrorHandler.mainGtU
	callq	FAULT_DETECTED_CFC
.Lfunc_end6:
	.size	mainGtU, .Lfunc_end6-mainGtU
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fallbackQSort3
	.type	fallbackQSort3,@function
fallbackQSort3:                         # @fallbackQSort3
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$11691, %ax             # imm = 0x2DAB
	xorw	%bx, %ax
	cmpw	$10190, %ax             # imm = 0x27CE
	jne	.LBB7_111
# %bb.1:                                # %fallbackQSort3.split
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -88(%rbp)         # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -112(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -104(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -96(%rbp)         # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -128(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -72(%rbp)         # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -64(%rbp)         # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -120(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -192(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %r13
	addq	$-400, %r13             # imm = 0xFE70
	movq	%r13, %rsp
	movq	%rsp, %r15
	addq	$-400, %r15             # imm = 0xFE70
	movq	%r15, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -216(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -208(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -184(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -176(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -144(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -200(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -168(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -160(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, -136(%rbp)        # 8-byte Spill
	movq	%r12, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rdi, (%r8)
	movq	%rsi, (%r9)
	movl	%edx, (%rax)
	movl	%ecx, (%r11)
	movq	%r10, -224(%rbp)        # 8-byte Spill
	movl	$0, (%r10)
	movl	$0, (%rbx)
	movl	(%rax), %eax
	movslq	(%rbx), %rcx
	movl	%eax, (%r13,%rcx,4)
	movl	(%r11), %eax
	movslq	(%rbx), %rcx
	movq	%r15, -152(%rbp)        # 8-byte Spill
	movl	%eax, (%r15,%rcx,4)
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movw	$10190, BasicBlockSignatureTracker # imm = 0x27CE
	movw	$0, RunTimeSignatureAdjuster
.LBB7_2:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_27 Depth 2
                                        #       Child Loop BB7_29 Depth 3
                                        #       Child Loop BB7_46 Depth 3
                                        #     Child Loop BB7_79 Depth 2
                                        #     Child Loop BB7_91 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$56, %ax
	xorw	%cx, %ax
	cmpw	$10230, %ax             # imm = 0x27F6
	jne	.LBB7_110
# %bb.3:                                # %fallbackQSort3.split181
                                        #   in Loop: Header=BB7_2 Depth=1
	movl	(%rbx), %eax
	movw	$10230, BasicBlockSignatureTracker # imm = 0x27F6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB7_103
# %bb.4:                                #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$10232, %ax             # imm = 0x27F8
	jne	.LBB7_110
# %bb.5:                                # %fallbackQSort3.split183
                                        #   in Loop: Header=BB7_2 Depth=1
	movl	(%rbx), %eax
	movw	$10232, BasicBlockSignatureTracker # imm = 0x27F8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$100, %eax
	jl	.LBB7_8
# %bb.6:                                #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$10234, %ax             # imm = 0x27FA
	jne	.LBB7_110
# %bb.7:                                # %fallbackQSort3.split189
                                        #   in Loop: Header=BB7_2 Depth=1
	movw	$10234, BasicBlockSignatureTracker # imm = 0x27FA
	movw	$9661, RunTimeSignatureAdjuster # imm = 0x25BD
	movl	$1004, %edi             # imm = 0x3EC
	movq	%r8, -48(%rbp)          # 8-byte Spill
	movq	%r9, %r15
	movq	%r14, -80(%rbp)         # 8-byte Spill
	callq	BZ2_bz__AssertH__fail
	movq	-80(%rbp), %r14         # 8-byte Reload
	movq	%r15, %r9
	movq	-48(%rbp), %r8          # 8-byte Reload
	movw	$10234, BasicBlockSignatureTracker # imm = 0x27FA
	movw	$9661, RunTimeSignatureAdjuster # imm = 0x25BD
	movw	$10234, BasicBlockSignatureTracker # imm = 0x27FA
	movw	$2, RunTimeSignatureAdjuster
.LBB7_8:                                #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3, %ax
	xorw	%cx, %ax
	cmpw	$10235, %ax             # imm = 0x27FB
	jne	.LBB7_110
# %bb.9:                                # %fallbackQSort3.split187
                                        #   in Loop: Header=BB7_2 Depth=1
	movl	(%rbx), %eax
	addl	$-1, %eax
	movl	%eax, (%rbx)
	movslq	(%rbx), %rax
	movl	(%r13,%rax,4), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movslq	(%rbx), %rax
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx,%rax,4), %eax
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rdx), %eax
	subl	(%rcx), %eax
	movw	$10235, BasicBlockSignatureTracker # imm = 0x27FB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$10, %eax
	jge	.LBB7_13
# %bb.10:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4063, %ax              # imm = 0xFDF
	cmpw	$10276, %ax             # imm = 0x2824
	jne	.LBB7_110
# %bb.11:                               # %fallbackQSort3.split191
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	%r14, -80(%rbp)         # 8-byte Spill
	movq	%r8, -48(%rbp)          # 8-byte Spill
	movq	(%r8), %rdi
	movq	%r9, %r14
	movq	(%r9), %rsi
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movw	$10276, BasicBlockSignatureTracker # imm = 0x2824
	movw	$0, RunTimeSignatureAdjuster
	callq	fallbackSimpleSort
	movw	$10276, BasicBlockSignatureTracker # imm = 0x2824
	movw	$4074, RunTimeSignatureAdjuster # imm = 0xFEA
	movw	$10276, BasicBlockSignatureTracker # imm = 0x2824
	movw	$4074, RunTimeSignatureAdjuster # imm = 0xFEA
.LBB7_12:                               # %.backedge7
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-48(%rbp), %r8          # 8-byte Reload
	movq	%r14, %r9
	movq	-80(%rbp), %r14         # 8-byte Reload
	jmp	.LBB7_2
.LBB7_13:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4042, %ax              # imm = 0xFCA
	cmpw	$10289, %ax             # imm = 0x2831
	jne	.LBB7_110
# %bb.14:                               # %fallbackQSort3.split193
                                        #   in Loop: Header=BB7_2 Depth=1
	movl	$3, %ecx
	movq	-224(%rbp), %rdx        # 8-byte Reload
	imull	$7621, (%rdx), %eax     # imm = 0x1DC5
	addl	$1, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, (%rdx)
	movl	(%rdx), %eax
	xorl	%edx, %edx
	divl	%ecx
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	%edx, (%rax)
	movl	(%rax), %eax
	movw	$10289, BasicBlockSignatureTracker # imm = 0x2831
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.15:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$10295, %ax             # imm = 0x2837
	jne	.LBB7_110
# %bb.16:                               # %fallbackQSort3.split195
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	(%r9), %rax
	movq	(%r8), %rcx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$10295, BasicBlockSignatureTracker # imm = 0x2837
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_25
.LBB7_17:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$122, %ax
	cmpw	$10315, %ax             # imm = 0x284B
	jne	.LBB7_110
# %bb.18:                               # %fallbackQSort3.split197
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$10315, BasicBlockSignatureTracker # imm = 0x284B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB7_21
# %bb.19:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$10348, %ax             # imm = 0x286C
	jne	.LBB7_110
# %bb.20:                               # %fallbackQSort3.split201
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	(%r9), %rax
	movq	(%r8), %rcx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %edx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addl	(%rsi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$10348, BasicBlockSignatureTracker # imm = 0x286C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_23
.LBB7_21:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$10352, %ax             # imm = 0x2870
	jne	.LBB7_110
# %bb.22:                               # %fallbackQSort3.split203
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	(%r9), %rax
	movq	(%r8), %rcx
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$10352, BasicBlockSignatureTracker # imm = 0x2870
	movw	$28, RunTimeSignatureAdjuster
.LBB7_23:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$230, %ax
	xorw	%cx, %ax
	cmpw	$10378, %ax             # imm = 0x288A
	jne	.LBB7_110
# %bb.24:                               # %fallbackQSort3.split205
                                        #   in Loop: Header=BB7_2 Depth=1
	movw	$10378, BasicBlockSignatureTracker # imm = 0x288A
	movw	$189, RunTimeSignatureAdjuster
.LBB7_25:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$173, %ax
	xorw	%cx, %ax
	cmpw	$10394, %ax             # imm = 0x289A
	jne	.LBB7_110
# %bb.26:                               # %fallbackQSort3.split199
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi)
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movw	$10394, BasicBlockSignatureTracker # imm = 0x289A
	movw	$0, RunTimeSignatureAdjuster
.LBB7_27:                               #   Parent Loop BB7_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_29 Depth 3
                                        #       Child Loop BB7_46 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$42, %ax
	xorw	%cx, %ax
	cmpw	$10416, %ax             # imm = 0x28B0
	jne	.LBB7_109
# %bb.28:                               # %fallbackQSort3.split207
                                        #   in Loop: Header=BB7_27 Depth=2
	movw	$10416, BasicBlockSignatureTracker # imm = 0x28B0
	movw	$0, RunTimeSignatureAdjuster
.LBB7_29:                               #   Parent Loop BB7_2 Depth=1
                                        #     Parent Loop BB7_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$9, %ax
	xorw	%cx, %ax
	cmpw	$10425, %ax             # imm = 0x28B9
	jne	.LBB7_106
# %bb.30:                               # %fallbackQSort3.split209
                                        #   in Loop: Header=BB7_29 Depth=3
	movl	(%rdi), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$10425, BasicBlockSignatureTracker # imm = 0x28B9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB7_33
# %bb.31:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$114, %ax
	cmpw	$10443, %ax             # imm = 0x28CB
	jne	.LBB7_109
# %bb.32:                               # %fallbackQSort3.split211
                                        #   in Loop: Header=BB7_27 Depth=2
	movw	$10443, BasicBlockSignatureTracker # imm = 0x28CB
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_44
.LBB7_33:                               #   in Loop: Header=BB7_29 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$10445, %ax             # imm = 0x28CD
	jne	.LBB7_106
# %bb.34:                               # %fallbackQSort3.split213
                                        #   in Loop: Header=BB7_29 Depth=3
	movq	%rbx, %r10
	movq	%r14, -80(%rbp)         # 8-byte Spill
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	(%r9), %rax
	movq	%r8, %r9
	movq	(%r8), %rcx
	movq	%rdi, %r11
	movslq	(%rdi), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$10445, BasicBlockSignatureTracker # imm = 0x28CD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB7_38
# %bb.35:                               #   in Loop: Header=BB7_29 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$10451, %ax             # imm = 0x28D3
	movq	%r9, %rdi
	movq	%r11, %rbx
	jne	.LBB7_106
# %bb.36:                               # %fallbackQSort3.split217
                                        #   in Loop: Header=BB7_29 Depth=3
	movq	(%rdi), %rax
	movslq	(%rbx), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-216(%rbp), %r8         # 8-byte Reload
	movl	%eax, (%r8)
	movq	(%rdi), %rax
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movslq	(%rsi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdi), %rcx
	movslq	(%rbx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r8), %eax
	movq	(%rdi), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movw	$10451, BasicBlockSignatureTracker # imm = 0x28D3
	movw	$99, RunTimeSignatureAdjuster
.LBB7_37:                               # %.backedge2
                                        #   in Loop: Header=BB7_29 Depth=3
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, %rdi
	movq	-80(%rbp), %r14         # 8-byte Reload
	movq	%r10, %rbx
	jmp	.LBB7_29
.LBB7_38:                               #   in Loop: Header=BB7_29 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$10454, %ax             # imm = 0x28D6
	jne	.LBB7_106
# %bb.39:                               # %fallbackQSort3.split219
                                        #   in Loop: Header=BB7_29 Depth=3
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$10454, BasicBlockSignatureTracker # imm = 0x28D6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB7_42
# %bb.40:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$10458, %ax             # imm = 0x28DA
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	-80(%rbp), %r14         # 8-byte Reload
	movq	%r10, %rbx
	jne	.LBB7_109
# %bb.41:                               # %fallbackQSort3.split221
                                        #   in Loop: Header=BB7_27 Depth=2
	movw	$10458, BasicBlockSignatureTracker # imm = 0x28DA
	movw	$17, RunTimeSignatureAdjuster
	jmp	.LBB7_44
.LBB7_42:                               #   in Loop: Header=BB7_29 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$10478, %ax             # imm = 0x28EE
	movq	%r11, %rcx
	jne	.LBB7_106
# %bb.43:                               # %fallbackQSort3.split223
                                        #   in Loop: Header=BB7_29 Depth=3
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$10478, BasicBlockSignatureTracker # imm = 0x28EE
	movw	$94, RunTimeSignatureAdjuster
	jmp	.LBB7_37
.LBB7_44:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$55, %ax
	xorw	%cx, %ax
	cmpw	$10492, %ax             # imm = 0x28FC
	jne	.LBB7_109
# %bb.45:                               # %fallbackQSort3.split215
                                        #   in Loop: Header=BB7_27 Depth=2
	movq	%r14, -80(%rbp)         # 8-byte Spill
	movq	%r9, %r14
	movq	%r8, -48(%rbp)          # 8-byte Spill
	movw	$10492, BasicBlockSignatureTracker # imm = 0x28FC
	movw	$0, RunTimeSignatureAdjuster
.LBB7_46:                               #   Parent Loop BB7_2 Depth=1
                                        #     Parent Loop BB7_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$484, %ax               # imm = 0x1E4
	xorw	%cx, %ax
	cmpw	$10520, %ax             # imm = 0x2918
	jne	.LBB7_105
# %bb.47:                               # %fallbackQSort3.split225
                                        #   in Loop: Header=BB7_46 Depth=3
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$10520, BasicBlockSignatureTracker # imm = 0x2918
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB7_50
# %bb.48:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$77, %ax
	cmpw	$10581, %ax             # imm = 0x2955
	jne	.LBB7_109
# %bb.49:                               # %fallbackQSort3.split227
                                        #   in Loop: Header=BB7_27 Depth=2
	movw	$10581, BasicBlockSignatureTracker # imm = 0x2955
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_61
.LBB7_50:                               #   in Loop: Header=BB7_46 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$155, %ax
	cmpw	$10627, %ax             # imm = 0x2983
	jne	.LBB7_105
# %bb.51:                               # %fallbackQSort3.split229
                                        #   in Loop: Header=BB7_46 Depth=3
	movq	(%r14), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$10627, BasicBlockSignatureTracker # imm = 0x2983
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB7_55
# %bb.52:                               #   in Loop: Header=BB7_46 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$10678, %ax             # imm = 0x29B6
	jne	.LBB7_105
# %bb.53:                               # %fallbackQSort3.split233
                                        #   in Loop: Header=BB7_46 Depth=3
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-56(%rbp), %r8          # 8-byte Reload
	movslq	(%r8), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-80(%rbp), %r9          # 8-byte Reload
	movl	%eax, (%r9)
	movq	(%rsi), %rax
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%r8), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r9), %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	addl	$-1, %eax
	movl	%eax, (%rdi)
	movl	(%r8), %eax
	addl	$-1, %eax
	movl	%eax, (%r8)
	movw	$10678, BasicBlockSignatureTracker # imm = 0x29B6
	movw	$330, RunTimeSignatureAdjuster # imm = 0x14A
.LBB7_54:                               # %.backedge
                                        #   in Loop: Header=BB7_46 Depth=3
	jmp	.LBB7_46
.LBB7_55:                               #   in Loop: Header=BB7_46 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$73, %ax
	cmpw	$10698, %ax             # imm = 0x29CA
	jne	.LBB7_105
# %bb.56:                               # %fallbackQSort3.split235
                                        #   in Loop: Header=BB7_46 Depth=3
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$10698, BasicBlockSignatureTracker # imm = 0x29CA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB7_59
# %bb.57:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$10699, %ax             # imm = 0x29CB
	jne	.LBB7_109
# %bb.58:                               # %fallbackQSort3.split237
                                        #   in Loop: Header=BB7_27 Depth=2
	movw	$10699, BasicBlockSignatureTracker # imm = 0x29CB
	movw	$158, RunTimeSignatureAdjuster
	jmp	.LBB7_61
.LBB7_59:                               #   in Loop: Header=BB7_46 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$10707, %ax             # imm = 0x29D3
	jne	.LBB7_105
# %bb.60:                               # %fallbackQSort3.split239
                                        #   in Loop: Header=BB7_46 Depth=3
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$10707, BasicBlockSignatureTracker # imm = 0x29D3
	movw	$303, RunTimeSignatureAdjuster # imm = 0x12F
	jmp	.LBB7_54
.LBB7_61:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$180, %ax
	xorw	%cx, %ax
	cmpw	$10721, %ax             # imm = 0x29E1
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	jne	.LBB7_109
# %bb.62:                               # %fallbackQSort3.split231
                                        #   in Loop: Header=BB7_27 Depth=2
	movl	(%rax), %eax
	movl	(%rcx), %ecx
	movw	$10721, BasicBlockSignatureTracker # imm = 0x29E1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB7_65
# %bb.63:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$10730, %ax             # imm = 0x29EA
	jne	.LBB7_110
# %bb.64:                               # %fallbackQSort3.split241
                                        #   in Loop: Header=BB7_2 Depth=1
	movw	$10730, BasicBlockSignatureTracker # imm = 0x29EA
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_67
.LBB7_65:                               #   in Loop: Header=BB7_27 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$962, %ax               # imm = 0x3C2
	cmpw	$10787, %ax             # imm = 0x2A23
	movq	-48(%rbp), %r8          # 8-byte Reload
	movq	%r14, %r9
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-80(%rbp), %r14         # 8-byte Reload
	jne	.LBB7_109
# %bb.66:                               # %fallbackQSort3.split243
                                        #   in Loop: Header=BB7_27 Depth=2
	movq	(%r8), %rax
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-208(%rbp), %r10        # 8-byte Reload
	movl	%eax, (%r10)
	movq	(%r8), %rax
	movslq	(%rsi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%r8), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r10), %eax
	movq	(%r8), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%rsi), %eax
	addl	$-1, %eax
	movl	%eax, (%rsi)
	movw	$10787, BasicBlockSignatureTracker # imm = 0x2A23
	movw	$697, RunTimeSignatureAdjuster # imm = 0x2B9
	jmp	.LBB7_27
.LBB7_67:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$981, %ax               # imm = 0x3D5
	cmpw	$10815, %ax             # imm = 0x2A3F
	jne	.LBB7_110
# %bb.68:                               # %fallbackQSort3.split245
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$10815, BasicBlockSignatureTracker # imm = 0x2A3F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB7_71
# %bb.69:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$10820, %ax             # imm = 0x2A44
	jne	.LBB7_110
# %bb.70:                               # %fallbackQSort3.split247
                                        #   in Loop: Header=BB7_2 Depth=1
	movw	$10820, BasicBlockSignatureTracker # imm = 0x2A44
	movw	$3466, RunTimeSignatureAdjuster # imm = 0xD8A
	jmp	.LBB7_12
.LBB7_71:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$94, %ax
	cmpw	$10849, %ax             # imm = 0x2A61
	movq	-88(%rbp), %rcx         # 8-byte Reload
	jne	.LBB7_110
# %bb.72:                               # %fallbackQSort3.split249
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %eax
	movq	-72(%rbp), %rsi         # 8-byte Reload
	subl	(%rsi), %eax
	movl	(%rcx), %ecx
	subl	(%rdx), %ecx
	movw	$10849, BasicBlockSignatureTracker # imm = 0x2A61
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB7_75
# %bb.73:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$10875, %ax             # imm = 0x2A7B
	jne	.LBB7_110
# %bb.74:                               # %fallbackQSort3.split251
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	subl	(%rcx), %eax
	movw	$10875, BasicBlockSignatureTracker # imm = 0x2A7B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_77
.LBB7_75:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$246, %ax
	cmpw	$10903, %ax             # imm = 0x2A97
	movq	-88(%rbp), %rax         # 8-byte Reload
	jne	.LBB7_110
# %bb.76:                               # %fallbackQSort3.split253
                                        #   in Loop: Header=BB7_2 Depth=1
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movw	$10903, BasicBlockSignatureTracker # imm = 0x2A97
	movw	$236, RunTimeSignatureAdjuster
.LBB7_77:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$228, %cx
	xorw	%dx, %cx
	cmpw	$10911, %cx             # imm = 0x2A9F
	movq	-88(%rbp), %rcx         # 8-byte Reload
	jne	.LBB7_110
# %bb.78:                               # %fallbackQSort3.split255
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	%eax, (%rdx)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movl	(%rcx), %eax
	subl	(%rdx), %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$10911, BasicBlockSignatureTracker # imm = 0x2A9F
	movw	$0, RunTimeSignatureAdjuster
.LBB7_79:                               #   Parent Loop BB7_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$85, %ax
	xorw	%cx, %ax
	cmpw	$10954, %ax             # imm = 0x2ACA
	jne	.LBB7_108
# %bb.80:                               # %fallbackQSort3.split257
                                        #   in Loop: Header=BB7_79 Depth=2
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$10954, BasicBlockSignatureTracker # imm = 0x2ACA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB7_83
# %bb.81:                               #   in Loop: Header=BB7_79 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$10959, %ax             # imm = 0x2ACF
	jne	.LBB7_108
# %bb.82:                               # %fallbackQSort3.split259
                                        #   in Loop: Header=BB7_79 Depth=2
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-200(%rbp), %r9         # 8-byte Reload
	movl	%eax, (%r9)
	movq	(%rsi), %rax
	movq	-176(%rbp), %r8         # 8-byte Reload
	movslq	(%r8), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r9), %eax
	movq	(%rsi), %rcx
	movslq	(%r8), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%r8), %eax
	addl	$1, %eax
	movl	%eax, (%r8)
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$10959, BasicBlockSignatureTracker # imm = 0x2ACF
	movw	$80, RunTimeSignatureAdjuster
	jmp	.LBB7_79
.LBB7_83:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$10972, %ax             # imm = 0x2ADC
	movq	-56(%rbp), %rdx         # 8-byte Reload
	jne	.LBB7_110
# %bb.84:                               # %fallbackQSort3.split261
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movl	(%rcx), %ecx
	subl	(%rdx), %ecx
	movw	$10972, BasicBlockSignatureTracker # imm = 0x2ADC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB7_87
# %bb.85:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$10989, %ax             # imm = 0x2AED
	jne	.LBB7_110
# %bb.86:                               # %fallbackQSort3.split263
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	movw	$10989, BasicBlockSignatureTracker # imm = 0x2AED
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_89
.LBB7_87:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$10998, %ax             # imm = 0x2AF6
	movq	-56(%rbp), %rcx         # 8-byte Reload
	jne	.LBB7_110
# %bb.88:                               # %fallbackQSort3.split265
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	subl	(%rcx), %eax
	movw	$10998, BasicBlockSignatureTracker # imm = 0x2AF6
	movw	$27, RunTimeSignatureAdjuster
.LBB7_89:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$19, %cx
	xorw	%dx, %cx
	cmpw	$11006, %cx             # imm = 0x2AFE
	movq	-88(%rbp), %rcx         # 8-byte Reload
	jne	.LBB7_110
# %bb.90:                               # %fallbackQSort3.split267
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rcx), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	subl	(%rdx), %eax
	addl	$1, %eax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rdx), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$11006, BasicBlockSignatureTracker # imm = 0x2AFE
	movw	$0, RunTimeSignatureAdjuster
.LBB7_91:                               #   Parent Loop BB7_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$494, %ax               # imm = 0x1EE
	xorw	%cx, %ax
	cmpw	$11024, %ax             # imm = 0x2B10
	jne	.LBB7_107
# %bb.92:                               # %fallbackQSort3.split269
                                        #   in Loop: Header=BB7_91 Depth=2
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$11024, BasicBlockSignatureTracker # imm = 0x2B10
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB7_95
# %bb.93:                               #   in Loop: Header=BB7_91 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$11028, %ax             # imm = 0x2B14
	jne	.LBB7_107
# %bb.94:                               # %fallbackQSort3.split271
                                        #   in Loop: Header=BB7_91 Depth=2
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movq	-168(%rbp), %rdi        # 8-byte Reload
	movslq	(%rdi), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, (%r12)
	movq	(%rsi), %rax
	movq	-160(%rbp), %r8         # 8-byte Reload
	movslq	(%r8), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r12), %eax
	movq	(%rsi), %rcx
	movslq	(%r8), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movl	(%r8), %eax
	addl	$1, %eax
	movl	%eax, (%r8)
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$11028, BasicBlockSignatureTracker # imm = 0x2B14
	movw	$490, RunTimeSignatureAdjuster # imm = 0x1EA
	jmp	.LBB7_91
.LBB7_95:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$115, %ax
	cmpw	$11107, %ax             # imm = 0x2B63
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	jne	.LBB7_110
# %bb.96:                               # %fallbackQSort3.split273
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	(%r8), %eax
	addl	(%rcx), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	subl	(%rcx), %eax
	subl	$1, %eax
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movl	%eax, (%rsi)
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	subl	(%rdx), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rsi), %eax
	subl	(%r8), %eax
	movl	(%rdi), %ecx
	subl	(%rdx), %ecx
	movw	$11107, BasicBlockSignatureTracker # imm = 0x2B63
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB7_99
# %bb.97:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$11129, %ax             # imm = 0x2B79
	movq	%r13, %rdx
	movq	%rbx, %rdi
	jne	.LBB7_110
# %bb.98:                               # %fallbackQSort3.split275
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi,%rcx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movw	$11129, BasicBlockSignatureTracker # imm = 0x2B79
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB7_101
.LBB7_99:                               #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$239, %ax
	cmpw	$11148, %ax             # imm = 0x2B8C
	movq	%r13, %rdx
	movq	%rbx, %rdi
	jne	.LBB7_110
# %bb.100:                              # %fallbackQSort3.split277
                                        #   in Loop: Header=BB7_2 Depth=1
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi,%rcx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	(%rdi), %eax
	addl	$1, %eax
	movl	%eax, (%rdi)
	movw	$11148, BasicBlockSignatureTracker # imm = 0x2B8C
	movw	$245, RunTimeSignatureAdjuster
.LBB7_101:                              #   in Loop: Header=BB7_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$233, %ax
	xorw	%cx, %ax
	cmpw	$11152, %ax             # imm = 0x2B90
	jne	.LBB7_110
# %bb.102:                              # %fallbackQSort3.split279
                                        #   in Loop: Header=BB7_2 Depth=1
	movw	$11152, BasicBlockSignatureTracker # imm = 0x2B90
	movw	$3166, RunTimeSignatureAdjuster # imm = 0xC5E
	jmp	.LBB7_12
.LBB7_103:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3183, %ax              # imm = 0xC6F
	cmpw	$11161, %ax             # imm = 0x2B99
	jne	.LBB7_111
# %bb.104:                              # %fallbackQSort3.split185
	movw	$11161, BasicBlockSignatureTracker # imm = 0x2B99
	movw	$8697, RunTimeSignatureAdjuster # imm = 0x21F9
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB7_105:                              # %CFerrorHandler.fallbackQSort3.loopexit
	jmp	.LBB7_111
.LBB7_106:                              # %CFerrorHandler.fallbackQSort3.loopexit1
	jmp	.LBB7_111
.LBB7_107:                              # %CFerrorHandler.fallbackQSort3.loopexit3
	jmp	.LBB7_111
.LBB7_108:                              # %CFerrorHandler.fallbackQSort3.loopexit4
	jmp	.LBB7_111
.LBB7_109:                              # %CFerrorHandler.fallbackQSort3.loopexit5
	jmp	.LBB7_111
.LBB7_110:                              # %CFerrorHandler.fallbackQSort3.loopexit6
	jmp	.LBB7_111
.LBB7_111:                              # %CFerrorHandler.fallbackQSort3
	callq	FAULT_DETECTED_CFC
.Lfunc_end7:
	.size	fallbackQSort3, .Lfunc_end7-fallbackQSort3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fallbackSimpleSort
	.type	fallbackSimpleSort,@function
fallbackSimpleSort:                     # @fallbackSimpleSort
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$973, %ax               # imm = 0x3CD
	xorw	%bx, %ax
	cmpw	$11241, %ax             # imm = 0x2BE9
	jne	.LBB8_57
# %bb.1:                                # %fallbackSimpleSort.split
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%r8)
	movq	%rsi, (%r9)
	movl	%edx, (%r10)
	movl	%ecx, (%rax)
	movl	(%r10), %ecx
	movl	(%rax), %edx
	movw	$11241, BasicBlockSignatureTracker # imm = 0x2BE9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jne	.LBB8_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$11243, %ax             # imm = 0x2BEB
	jne	.LBB8_57
# %bb.3:                                # %fallbackSimpleSort.split96
	movw	$11243, BasicBlockSignatureTracker # imm = 0x2BEB
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB8_51
.LBB8_4:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$2045, %cx              # imm = 0x7FD
	cmpw	$11284, %cx             # imm = 0x2C14
	jne	.LBB8_57
# %bb.5:                                # %fallbackSimpleSort.split98
	movl	(%rax), %ecx
	subl	(%r10), %ecx
	movw	$11284, BasicBlockSignatureTracker # imm = 0x2C14
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %ecx
	jle	.LBB8_28
# %bb.6:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$33, %cx
	cmpw	$11317, %cx             # imm = 0x2C35
	jne	.LBB8_57
# %bb.7:                                # %fallbackSimpleSort.split102
	movl	(%rax), %ecx
	subl	$4, %ecx
	movl	%ecx, (%r11)
	movw	$11317, BasicBlockSignatureTracker # imm = 0x2C35
	movw	$0, RunTimeSignatureAdjuster
.LBB8_8:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_12 Depth 2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$100, %cx
	xorw	%dx, %cx
	cmpw	$11345, %cx             # imm = 0x2C51
	jne	.LBB8_56
# %bb.9:                                # %fallbackSimpleSort.split106
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	(%r11), %ecx
	movl	(%r10), %edx
	movw	$11345, BasicBlockSignatureTracker # imm = 0x2C51
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jl	.LBB8_26
# %bb.10:                               #   in Loop: Header=BB8_8 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$15, %cx
	cmpw	$11358, %cx             # imm = 0x2C5E
	jne	.LBB8_56
# %bb.11:                               # %fallbackSimpleSort.split108
                                        #   in Loop: Header=BB8_8 Depth=1
	movq	(%r8), %rcx
	movslq	(%r11), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, (%r15)
	movq	(%r9), %rcx
	movslq	(%r15), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, (%rbx)
	movl	(%r11), %ecx
	addl	$4, %ecx
	movl	%ecx, (%r14)
	movw	$11358, BasicBlockSignatureTracker # imm = 0x2C5E
	movw	$0, RunTimeSignatureAdjuster
.LBB8_12:                               #   Parent Loop BB8_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$63, %cx
	xorw	%dx, %cx
	cmpw	$11361, %cx             # imm = 0x2C61
	jne	.LBB8_55
# %bb.13:                               # %fallbackSimpleSort.split112
                                        #   in Loop: Header=BB8_12 Depth=2
	xorl	%ecx, %ecx
	movl	(%r14), %edx
	movl	(%rax), %esi
	movw	$11361, BasicBlockSignatureTracker # imm = 0x2C61
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%esi, %edx
	jg	.LBB8_16
# %bb.14:                               #   in Loop: Header=BB8_12 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$17, %cx
	cmpw	$11376, %cx             # imm = 0x2C70
	jne	.LBB8_55
# %bb.15:                               # %fallbackSimpleSort.split114
                                        #   in Loop: Header=BB8_12 Depth=2
	movl	(%rbx), %ecx
	movq	(%r9), %rdx
	movq	(%r8), %rsi
	movslq	(%r14), %rdi
	movl	(%rsi,%rdi,4), %esi
	cmpl	(%rdx,%rsi,4), %ecx
	seta	%cl
	movw	$11376, BasicBlockSignatureTracker # imm = 0x2C70
	movw	$17, RunTimeSignatureAdjuster
.LBB8_16:                               #   in Loop: Header=BB8_12 Depth=2
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$19, %dx
	xorw	%si, %dx
	cmpw	$11378, %dx             # imm = 0x2C72
	jne	.LBB8_55
# %bb.17:                               # %fallbackSimpleSort.split116
                                        #   in Loop: Header=BB8_12 Depth=2
	movw	$11378, BasicBlockSignatureTracker # imm = 0x2C72
	movw	$0, RunTimeSignatureAdjuster
	testb	$1, %cl
	jne	.LBB8_18
	jmp	.LBB8_22
.LBB8_18:                               #   in Loop: Header=BB8_12 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$15, %cx
	cmpw	$11389, %cx             # imm = 0x2C7D
	jne	.LBB8_55
# %bb.19:                               # %fallbackSimpleSort.split118
                                        #   in Loop: Header=BB8_12 Depth=2
	movq	(%r8), %rcx
	movslq	(%r14), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	(%r8), %rdx
	movl	(%r14), %esi
	subl	$4, %esi
	movslq	%esi, %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movw	$11389, BasicBlockSignatureTracker # imm = 0x2C7D
	movw	$0, RunTimeSignatureAdjuster
# %bb.20:                               #   in Loop: Header=BB8_12 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$3, %cx
	cmpw	$11390, %cx             # imm = 0x2C7E
	jne	.LBB8_55
# %bb.21:                               # %fallbackSimpleSort.split122
                                        #   in Loop: Header=BB8_12 Depth=2
	movl	(%r14), %ecx
	addl	$4, %ecx
	movl	%ecx, (%r14)
	movw	$11390, BasicBlockSignatureTracker # imm = 0x2C7E
	movw	$32, RunTimeSignatureAdjuster
	jmp	.LBB8_12
.LBB8_22:                               #   in Loop: Header=BB8_8 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$194, %cx
	cmpw	$11440, %cx             # imm = 0x2CB0
	jne	.LBB8_56
# %bb.23:                               # %fallbackSimpleSort.split120
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	(%r15), %ecx
	movq	(%r8), %rdx
	movl	(%r14), %esi
	subl	$4, %esi
	movslq	%esi, %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movw	$11440, BasicBlockSignatureTracker # imm = 0x2CB0
	movw	$0, RunTimeSignatureAdjuster
# %bb.24:                               #   in Loop: Header=BB8_8 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$112, %cx
	cmpw	$11456, %cx             # imm = 0x2CC0
	jne	.LBB8_56
# %bb.25:                               # %fallbackSimpleSort.split124
                                        #   in Loop: Header=BB8_8 Depth=1
	movl	(%r11), %ecx
	addl	$-1, %ecx
	movl	%ecx, (%r11)
	movw	$11456, BasicBlockSignatureTracker # imm = 0x2CC0
	movw	$245, RunTimeSignatureAdjuster
	jmp	.LBB8_8
.LBB8_26:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$169, %cx
	cmpw	$11512, %cx             # imm = 0x2CF8
	jne	.LBB8_57
# %bb.27:                               # %fallbackSimpleSort.split110
	movw	$11512, BasicBlockSignatureTracker # imm = 0x2CF8
	movw	$236, RunTimeSignatureAdjuster
.LBB8_28:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$233, %cx
	xorw	%dx, %cx
	cmpw	$11517, %cx             # imm = 0x2CFD
	jne	.LBB8_57
# %bb.29:                               # %fallbackSimpleSort.split104
	movl	(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, (%r11)
	movw	$11517, BasicBlockSignatureTracker # imm = 0x2CFD
	movw	$0, RunTimeSignatureAdjuster
.LBB8_30:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_36 Depth 2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$2, %cx
	xorw	%dx, %cx
	cmpw	$11519, %cx             # imm = 0x2CFF
	jne	.LBB8_54
# %bb.31:                               # %fallbackSimpleSort.split126
                                        #   in Loop: Header=BB8_30 Depth=1
	movl	(%r11), %ecx
	movl	(%r10), %edx
	movw	$11519, BasicBlockSignatureTracker # imm = 0x2CFF
	movw	$1812, RunTimeSignatureAdjuster # imm = 0x714
	cmpl	%edx, %ecx
	jl	.LBB8_50
# %bb.32:                               # %Buffer__
                                        #   in Loop: Header=BB8_30 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$-10511, %cx            # imm = 0xD6F1
	cmpw	$-1522, %cx             # imm = 0xFA0E
	jne	.LBB8_54
# %bb.33:                               # %fallbackSimpleSort.split128
                                        #   in Loop: Header=BB8_30 Depth=1
	movw	$-1522, BasicBlockSignatureTracker # imm = 0xFA0E
	movw	$-10511, RunTimeSignatureAdjuster # imm = 0xD6F1
# %bb.34:                               #   in Loop: Header=BB8_30 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$510, %cx               # imm = 0x1FE
	xorw	%dx, %cx
	cmpw	$11521, %cx             # imm = 0x2D01
	jne	.LBB8_54
# %bb.35:                               # %fallbackSimpleSort.split144
                                        #   in Loop: Header=BB8_30 Depth=1
	movq	(%r8), %rcx
	movslq	(%r11), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, (%r15)
	movq	(%r9), %rcx
	movslq	(%r15), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	%ecx, (%rbx)
	movl	(%r11), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r14)
	movw	$11521, BasicBlockSignatureTracker # imm = 0x2D01
	movw	$0, RunTimeSignatureAdjuster
.LBB8_36:                               #   Parent Loop BB8_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$13, %cx
	xorw	%dx, %cx
	cmpw	$11532, %cx             # imm = 0x2D0C
	jne	.LBB8_53
# %bb.37:                               # %fallbackSimpleSort.split130
                                        #   in Loop: Header=BB8_36 Depth=2
	xorl	%ecx, %ecx
	movl	(%r14), %edx
	movl	(%rax), %esi
	movw	$11532, BasicBlockSignatureTracker # imm = 0x2D0C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%esi, %edx
	jg	.LBB8_40
# %bb.38:                               #   in Loop: Header=BB8_36 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$22, %cx
	cmpw	$11546, %cx             # imm = 0x2D1A
	jne	.LBB8_53
# %bb.39:                               # %fallbackSimpleSort.split132
                                        #   in Loop: Header=BB8_36 Depth=2
	movl	(%rbx), %ecx
	movq	(%r9), %rdx
	movq	(%r8), %rsi
	movslq	(%r14), %rdi
	movl	(%rsi,%rdi,4), %esi
	cmpl	(%rdx,%rsi,4), %ecx
	seta	%cl
	movw	$11546, BasicBlockSignatureTracker # imm = 0x2D1A
	movw	$22, RunTimeSignatureAdjuster
.LBB8_40:                               #   in Loop: Header=BB8_36 Depth=2
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$36, %dx
	xorw	%si, %dx
	cmpw	$11560, %dx             # imm = 0x2D28
	jne	.LBB8_53
# %bb.41:                               # %fallbackSimpleSort.split134
                                        #   in Loop: Header=BB8_36 Depth=2
	movw	$11560, BasicBlockSignatureTracker # imm = 0x2D28
	movw	$0, RunTimeSignatureAdjuster
	testb	$1, %cl
	jne	.LBB8_42
	jmp	.LBB8_46
.LBB8_42:                               #   in Loop: Header=BB8_36 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$122, %cx
	cmpw	$11602, %cx             # imm = 0x2D52
	jne	.LBB8_53
# %bb.43:                               # %fallbackSimpleSort.split136
                                        #   in Loop: Header=BB8_36 Depth=2
	movq	(%r8), %rcx
	movslq	(%r14), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	(%r8), %rdx
	movl	(%r14), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movw	$11602, BasicBlockSignatureTracker # imm = 0x2D52
	movw	$0, RunTimeSignatureAdjuster
# %bb.44:                               #   in Loop: Header=BB8_36 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$1, %cx
	cmpw	$11603, %cx             # imm = 0x2D53
	jne	.LBB8_53
# %bb.45:                               # %fallbackSimpleSort.split140
                                        #   in Loop: Header=BB8_36 Depth=2
	movl	(%r14), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r14)
	movw	$11603, BasicBlockSignatureTracker # imm = 0x2D53
	movw	$82, RunTimeSignatureAdjuster
	jmp	.LBB8_36
.LBB8_46:                               #   in Loop: Header=BB8_30 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$163, %cx
	cmpw	$11659, %cx             # imm = 0x2D8B
	jne	.LBB8_54
# %bb.47:                               # %fallbackSimpleSort.split138
                                        #   in Loop: Header=BB8_30 Depth=1
	movl	(%r15), %ecx
	movq	(%r8), %rdx
	movl	(%r14), %esi
	subl	$1, %esi
	movslq	%esi, %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movw	$11659, BasicBlockSignatureTracker # imm = 0x2D8B
	movw	$0, RunTimeSignatureAdjuster
# %bb.48:                               #   in Loop: Header=BB8_30 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$46, %cx
	cmpw	$11685, %cx             # imm = 0x2DA5
	jne	.LBB8_54
# %bb.49:                               # %fallbackSimpleSort.split142
                                        #   in Loop: Header=BB8_30 Depth=1
	movl	(%r11), %ecx
	addl	$-1, %ecx
	movl	%ecx, (%r11)
	movw	$11685, BasicBlockSignatureTracker # imm = 0x2DA5
	movw	$344, RunTimeSignatureAdjuster # imm = 0x158
	jmp	.LBB8_30
.LBB8_50:                               # %.loopexit
	jmp	.LBB8_51
.LBB8_51:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1579, %ax              # imm = 0x62B
	xorw	%cx, %ax
	cmpw	$11712, %ax             # imm = 0x2DC0
	jne	.LBB8_57
# %bb.52:                               # %fallbackSimpleSort.split100
	movw	$11712, BasicBlockSignatureTracker # imm = 0x2DC0
	movw	$2619, RunTimeSignatureAdjuster # imm = 0xA3B
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB8_53:                               # %CFerrorHandler.fallbackSimpleSort.loopexit
	jmp	.LBB8_57
.LBB8_54:                               # %CFerrorHandler.fallbackSimpleSort.loopexit1
	jmp	.LBB8_57
.LBB8_55:                               # %CFerrorHandler.fallbackSimpleSort.loopexit2
	jmp	.LBB8_57
.LBB8_56:                               # %CFerrorHandler.fallbackSimpleSort.loopexit3
	jmp	.LBB8_57
.LBB8_57:                               # %CFerrorHandler.fallbackSimpleSort
	callq	FAULT_DETECTED_CFC
.Lfunc_end8:
	.size	fallbackSimpleSort, .Lfunc_end8-fallbackSimpleSort
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream
.LCPI9_0:
	.quad	4636737291354636288     # double 100
.LCPI9_1:
	.quad	4607182418800017408     # double 1
.LCPI9_2:
	.quad	4620693217682128896     # double 8
	.text
	.globl	compressStream
	.p2align	4, 0x90
	.type	compressStream,@function
compressStream:                         # @compressStream
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19039, %ax             # imm = 0x4A5F
	xorw	%cx, %ax
	cmpw	$11762, %ax             # imm = 0x2DF2
	jne	.LBB9_79
# %bb.1:                                # %compressStream.split208
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rax
	addq	$-5008, %rax            # imm = 0xEC70
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-32, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-32, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movl	%edi, (%r15)
	movl	%esi, (%r13)
	movq	$0, (%r12)
	movl	(%r13), %esi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	movw	$11762, BasicBlockSignatureTracker # imm = 0x2DF2
	movw	$0, RunTimeSignatureAdjuster
	movq	%r14, %rdi
	callq	BZ2_bzWriteOpen
	movw	$11762, BasicBlockSignatureTracker # imm = 0x2DF2
	movw	$0, RunTimeSignatureAdjuster
	movq	%rax, (%r12)
	movl	(%r14), %eax
	movw	$11762, BasicBlockSignatureTracker # imm = 0x2DF2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB9_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$11768, %ax             # imm = 0x2DF8
	jne	.LBB9_79
# %bb.3:                                # %compressStream.split
	movw	$11768, BasicBlockSignatureTracker # imm = 0x2DF8
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB9_60
.LBB9_4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1011, %ax              # imm = 0x3F3
	cmpw	$11777, %ax             # imm = 0x2E01
	jne	.LBB9_79
# %bb.5:                                # %compressStream.split138
	movl	verbosity, %eax
	movw	$11777, BasicBlockSignatureTracker # imm = 0x2E01
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB9_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$11808, %ax             # imm = 0x2E20
	jne	.LBB9_79
# %bb.7:                                # %compressStream.split142
	movabsq	$.L.str.9, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$11808, BasicBlockSignatureTracker # imm = 0x2E20
	movw	$33, RunTimeSignatureAdjuster
.LBB9_8:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$11824, %ax             # imm = 0x2E30
	jne	.LBB9_79
# %bb.9:                                # %compressStream.split144
	movw	$11824, BasicBlockSignatureTracker # imm = 0x2E30
	movw	$0, RunTimeSignatureAdjuster
.LBB9_10:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$126, %ax
	xorw	%cx, %ax
	cmpw	$11854, %ax             # imm = 0x2E4E
	jne	.LBB9_78
# %bb.11:                               # %compressStream.split146
                                        #   in Loop: Header=BB9_10 Depth=1
	movl	(%r15), %edi
	movw	$11854, BasicBlockSignatureTracker # imm = 0x2E4E
	movw	$0, RunTimeSignatureAdjuster
	callq	myfeof
	movw	$11854, BasicBlockSignatureTracker # imm = 0x2E4E
	movw	$0, RunTimeSignatureAdjuster
	movw	$11854, BasicBlockSignatureTracker # imm = 0x2E4E
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB9_14
# %bb.12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$11874, %ax             # imm = 0x2E62
	jne	.LBB9_79
# %bb.13:                               # %compressStream.split148
	movw	$11874, BasicBlockSignatureTracker # imm = 0x2E62
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB9_24
.LBB9_14:                               #   in Loop: Header=BB9_10 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$11876, %ax             # imm = 0x2E64
	jne	.LBB9_78
# %bb.15:                               # %compressStream.split150
                                        #   in Loop: Header=BB9_10 Depth=1
	movl	(%r15), %ecx
	movw	$11876, BasicBlockSignatureTracker # imm = 0x2E64
	movw	$0, RunTimeSignatureAdjuster
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	spec_fread
	movw	$11876, BasicBlockSignatureTracker # imm = 0x2E64
	movw	$0, RunTimeSignatureAdjuster
	movl	%eax, (%rbx)
	movl	(%rbx), %eax
	movw	$11876, BasicBlockSignatureTracker # imm = 0x2E64
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB9_18
# %bb.16:                               #   in Loop: Header=BB9_10 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$11889, %ax             # imm = 0x2E71
	jne	.LBB9_78
# %bb.17:                               # %compressStream.split154
                                        #   in Loop: Header=BB9_10 Depth=1
	movq	(%r12), %rsi
	movl	(%rbx), %ecx
	movw	$11889, BasicBlockSignatureTracker # imm = 0x2E71
	movw	$0, RunTimeSignatureAdjuster
	movq	%r14, %rdi
	movq	-88(%rbp), %rdx         # 8-byte Reload
	callq	BZ2_bzWrite
	movw	$11889, BasicBlockSignatureTracker # imm = 0x2E71
	movw	$21, RunTimeSignatureAdjuster
	movw	$11889, BasicBlockSignatureTracker # imm = 0x2E71
	movw	$21, RunTimeSignatureAdjuster
.LBB9_18:                               #   in Loop: Header=BB9_10 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$11893, %ax             # imm = 0x2E75
	jne	.LBB9_78
# %bb.19:                               # %compressStream.split156
                                        #   in Loop: Header=BB9_10 Depth=1
	movl	(%r14), %eax
	movw	$11893, BasicBlockSignatureTracker # imm = 0x2E75
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB9_22
# %bb.20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$11899, %ax             # imm = 0x2E7B
	jne	.LBB9_79
# %bb.21:                               # %compressStream.split158
	movw	$11899, BasicBlockSignatureTracker # imm = 0x2E7B
	movw	$899, RunTimeSignatureAdjuster # imm = 0x383
	jmp	.LBB9_60
.LBB9_22:                               #   in Loop: Header=BB9_10 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$211, %ax
	cmpw	$11942, %ax             # imm = 0x2EA6
	jne	.LBB9_78
# %bb.23:                               # %compressStream.split160
                                        #   in Loop: Header=BB9_10 Depth=1
	movw	$11942, BasicBlockSignatureTracker # imm = 0x2EA6
	movw	$150, RunTimeSignatureAdjuster
	jmp	.LBB9_10
.LBB9_24:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$163, %ax
	cmpw	$11969, %ax             # imm = 0x2EC1
	jne	.LBB9_79
# %bb.25:                               # %compressStream.split152
	movq	(%r12), %rsi
	movw	$11969, BasicBlockSignatureTracker # imm = 0x2EC1
	movw	$0, RunTimeSignatureAdjuster
	subq	$16, %rsp
	movq	%r14, %rdi
	xorl	%edx, %edx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	-48(%rbp), %r8          # 8-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	addq	$16, %rsp
	movw	$11969, BasicBlockSignatureTracker # imm = 0x2EC1
	movw	$0, RunTimeSignatureAdjuster
	movl	(%r14), %eax
	movw	$11969, BasicBlockSignatureTracker # imm = 0x2EC1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB9_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$11992, %ax             # imm = 0x2ED8
	jne	.LBB9_79
# %bb.27:                               # %compressStream.split162
	movw	$11992, BasicBlockSignatureTracker # imm = 0x2ED8
	movw	$800, RunTimeSignatureAdjuster # imm = 0x320
	jmp	.LBB9_60
.LBB9_28:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$34, %ax
	cmpw	$12003, %ax             # imm = 0x2EE3
	jne	.LBB9_79
# %bb.29:                               # %compressStream.split164
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	(%rax), %eax
	movw	$12003, BasicBlockSignatureTracker # imm = 0x2EE3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB9_32
# %bb.30:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$509, %ax               # imm = 0x1FD
	cmpw	$12062, %ax             # imm = 0x2F1E
	jne	.LBB9_79
# %bb.31:                               # %compressStream.split166
	movw	$12062, BasicBlockSignatureTracker # imm = 0x2F1E
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB9_70
.LBB9_32:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$508, %ax               # imm = 0x1FC
	cmpw	$12063, %ax             # imm = 0x2F1F
	jne	.LBB9_79
# %bb.33:                               # %compressStream.split168
	movl	(%r13), %eax
	movw	$12063, BasicBlockSignatureTracker # imm = 0x2F1F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB9_40
# %bb.34:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$88, %ax
	cmpw	$12103, %ax             # imm = 0x2F47
	jne	.LBB9_79
# %bb.35:                               # %compressStream.split172
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$0, outputHandleJustInCase
	movl	(%rax), %eax
	movw	$12103, BasicBlockSignatureTracker # imm = 0x2F47
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB9_38
# %bb.36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$12110, %ax             # imm = 0x2F4E
	jne	.LBB9_79
# %bb.37:                               # %compressStream.split176
	movw	$12110, BasicBlockSignatureTracker # imm = 0x2F4E
	movw	$80, RunTimeSignatureAdjuster
	jmp	.LBB9_70
.LBB9_38:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$12125, %ax             # imm = 0x2F5D
	jne	.LBB9_79
# %bb.39:                               # %compressStream.split178
	movw	$12125, BasicBlockSignatureTracker # imm = 0x2F5D
	movw	$66, RunTimeSignatureAdjuster
.LBB9_40:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$126, %ax
	xorw	%cx, %ax
	cmpw	$12129, %ax             # imm = 0x2F61
	jne	.LBB9_79
# %bb.41:                               # %compressStream.split174
	movl	$0, outputHandleJustInCase
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	(%rax), %eax
	movw	$12129, BasicBlockSignatureTracker # imm = 0x2F61
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB9_44
# %bb.42:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$12131, %ax             # imm = 0x2F63
	jne	.LBB9_79
# %bb.43:                               # %compressStream.split180
	movw	$12131, BasicBlockSignatureTracker # imm = 0x2F63
	movw	$125, RunTimeSignatureAdjuster
	jmp	.LBB9_70
.LBB9_44:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$12132, %ax             # imm = 0x2F64
	jne	.LBB9_79
# %bb.45:                               # %compressStream.split182
	movl	verbosity, %eax
	movw	$12132, BasicBlockSignatureTracker # imm = 0x2F64
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB9_58
# %bb.46:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$12142, %ax             # imm = 0x2F6E
	jne	.LBB9_79
# %bb.47:                               # %compressStream.split184
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$12142, BasicBlockSignatureTracker # imm = 0x2F6E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB9_54
# %bb.48:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$234, %ax
	cmpw	$12164, %ax             # imm = 0x2F84
	jne	.LBB9_79
# %bb.49:                               # %compressStream.split188
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$12164, BasicBlockSignatureTracker # imm = 0x2F84
	movw	$234, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB9_54
# %bb.50:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-6998, %ax             # imm = 0xE4AA
	cmpw	$-13522, %ax            # imm = 0xCB2E
	jne	.LBB9_79
# %bb.51:                               # %compressStream.split192
	movw	$-13522, BasicBlockSignatureTracker # imm = 0xCB2E
	movw	$-6998, RunTimeSignatureAdjuster # imm = 0xE4AA
# %bb.52:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$44, %ax
	xorw	%cx, %ax
	cmpw	$12200, %ax             # imm = 0x2FA8
	jne	.LBB9_79
# %bb.53:                               # %compressStream.split210
	movabsq	$.L.str.1.10, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$12200, BasicBlockSignatureTracker # imm = 0x2FA8
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB9_56
.LBB9_54:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$211, %ax
	xorw	%cx, %ax
	cmpw	$12221, %ax             # imm = 0x2FBD
	jne	.LBB9_79
# %bb.55:                               # %compressStream.split190
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %esi
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	-96(%rbp), %r15         # 8-byte Reload
	movq	%r15, %rdi
	callq	uInt64_from_UInt32s
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$21, RunTimeSignatureAdjuster
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %esi
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	-104(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdi
	callq	uInt64_from_UInt32s
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	%r15, %rdi
	callq	uInt64_to_double
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	-120(%rbp), %r12        # 8-byte Reload
	movsd	%xmm0, (%r12)
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	%r13, %rdi
	callq	uInt64_to_double
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	-112(%rbp), %rbx        # 8-byte Reload
	movsd	%xmm0, (%rbx)
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	-136(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	uInt64_toAscii
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	-128(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	uInt64_toAscii
	movabsq	$.L.str.2.11, %rsi
	movsd	.LCPI9_0(%rip), %xmm2   # xmm2 = mem[0],zero
	movsd	.LCPI9_1(%rip), %xmm3   # xmm3 = mem[0],zero
	movsd	.LCPI9_2(%rip), %xmm1   # xmm1 = mem[0],zero
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$0, RunTimeSignatureAdjuster
	movq	stderr, %rdi
	movsd	(%r12), %xmm0           # xmm0 = mem[0],zero
	divsd	(%rbx), %xmm0
	mulsd	(%rbx), %xmm1
	divsd	(%r12), %xmm1
	movsd	(%rbx), %xmm4           # xmm4 = mem[0],zero
	divsd	(%r12), %xmm4
	subsd	%xmm4, %xmm3
	mulsd	%xmm3, %xmm2
	movq	%r14, %rdx
	movq	%r15, %rcx
	movb	$3, %al
	callq	fprintf
	movw	$12221, BasicBlockSignatureTracker # imm = 0x2FBD
	movw	$21, RunTimeSignatureAdjuster
.LBB9_56:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$97, %ax
	xorw	%cx, %ax
	cmpw	$12233, %ax             # imm = 0x2FC9
	jne	.LBB9_79
# %bb.57:                               # %compressStream.split194
	movw	$12233, BasicBlockSignatureTracker # imm = 0x2FC9
	movw	$173, RunTimeSignatureAdjuster
.LBB9_58:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$144, %ax
	xorw	%cx, %ax
	cmpw	$12276, %ax             # imm = 0x2FF4
	jne	.LBB9_79
# %bb.59:                               # %compressStream.split186
	movw	$12276, BasicBlockSignatureTracker # imm = 0x2FF4
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB9_76
.LBB9_60:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7642, %ax              # imm = 0x1DDA
	xorw	%cx, %ax
	cmpw	$12322, %ax             # imm = 0x3022
	jne	.LBB9_79
# %bb.61:                               # %compressStream.split140
	movq	(%r12), %rsi
	movw	$12322, BasicBlockSignatureTracker(%rip) # imm = 0x3022
	movw	$7907, RunTimeSignatureAdjuster(%rip) # imm = 0x1EE3
	subq	$16, %rsp
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movl	$1, %edx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	-48(%rbp), %r8          # 8-byte Reload
	movq	-80(%rbp), %r9          # 8-byte Reload
	callq	BZ2_bzWriteClose64
	addq	$16, %rsp
	movw	$12322, BasicBlockSignatureTracker(%rip) # imm = 0x3022
	movw	$7907, RunTimeSignatureAdjuster(%rip) # imm = 0x1EE3
	movl	(%r14), %eax
	movw	$12322, BasicBlockSignatureTracker(%rip) # imm = 0x3022
	movw	$0, RunTimeSignatureAdjuster(%rip)
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB9_64
	jmp	.LBB9_62
.LBB9_62:                               # %compressStream.split140
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB9_68
	jmp	.LBB9_63
.LBB9_63:                               # %compressStream.split140
	subl	$-3, %eax
	je	.LBB9_66
	jmp	.LBB9_72
.LBB9_64:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$105, %ax
	cmpw	$12363, %ax             # imm = 0x304B
	jne	.LBB9_79
# %bb.65:                               # %compressStream.split200
	movw	$12363, BasicBlockSignatureTracker # imm = 0x304B
	movw	$0, RunTimeSignatureAdjuster
	callq	configError
	movw	$12363, BasicBlockSignatureTracker # imm = 0x304B
	movw	$0, RunTimeSignatureAdjuster
	movw	$12363, BasicBlockSignatureTracker # imm = 0x304B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB9_74
.LBB9_66:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$78, %ax
	cmpw	$12396, %ax             # imm = 0x306C
	jne	.LBB9_79
# %bb.67:                               # %compressStream.split202
	movw	$12396, BasicBlockSignatureTracker # imm = 0x306C
	movw	$0, RunTimeSignatureAdjuster
	callq	outOfMemory
	movw	$12396, BasicBlockSignatureTracker # imm = 0x306C
	movw	$39, RunTimeSignatureAdjuster
	movw	$12396, BasicBlockSignatureTracker # imm = 0x306C
	movw	$39, RunTimeSignatureAdjuster
	jmp	.LBB9_74
.LBB9_68:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$95, %ax
	cmpw	$12413, %ax             # imm = 0x307D
	jne	.LBB9_79
# %bb.69:                               # %compressStream.split204
	movw	$12413, BasicBlockSignatureTracker # imm = 0x307D
	movw	$8035, RunTimeSignatureAdjuster # imm = 0x1F63
.LBB9_70:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8081, %ax              # imm = 0x1F91
	xorw	%cx, %ax
	cmpw	$12431, %ax             # imm = 0x308F
	jne	.LBB9_79
# %bb.71:                               # %compressStream.split170
	movw	$12431, BasicBlockSignatureTracker # imm = 0x308F
	movw	$0, RunTimeSignatureAdjuster
	callq	ioError
	movw	$12431, BasicBlockSignatureTracker # imm = 0x308F
	movw	$196, RunTimeSignatureAdjuster
	movw	$12431, BasicBlockSignatureTracker # imm = 0x308F
	movw	$196, RunTimeSignatureAdjuster
	jmp	.LBB9_74
.LBB9_72:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$176, %ax
	cmpw	$12434, %ax             # imm = 0x3092
	jne	.LBB9_79
# %bb.73:                               # %compressStream.split198
	movabsq	$.L.str.3.12, %rdi
	movw	$12434, BasicBlockSignatureTracker # imm = 0x3092
	movw	$0, RunTimeSignatureAdjuster
	callq	panic
	movw	$12434, BasicBlockSignatureTracker # imm = 0x3092
	movw	$217, RunTimeSignatureAdjuster
	movw	$12434, BasicBlockSignatureTracker # imm = 0x3092
	movw	$217, RunTimeSignatureAdjuster
.LBB9_74:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$216, %ax
	xorw	%cx, %ax
	cmpw	$12435, %ax             # imm = 0x3093
	jne	.LBB9_79
# %bb.75:                               # %compressStream.split206
	movabsq	$.L.str.4.13, %rdi
	movw	$12435, BasicBlockSignatureTracker # imm = 0x3093
	movw	$1, RunTimeSignatureAdjuster
	callq	panic
	movw	$12435, BasicBlockSignatureTracker # imm = 0x3093
	movw	$1, RunTimeSignatureAdjuster
	movw	$12435, BasicBlockSignatureTracker # imm = 0x3093
	movw	$8039, RunTimeSignatureAdjuster # imm = 0x1F67
.LBB9_76:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8023, %ax              # imm = 0x1F57
	xorw	%cx, %ax
	cmpw	$12451, %ax             # imm = 0x30A3
	jne	.LBB9_79
# %bb.77:                               # %compressStream.split196
	movw	$12451, BasicBlockSignatureTracker # imm = 0x30A3
	movw	$-12901, RunTimeSignatureAdjuster # imm = 0xCD9B
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB9_78:                               # %CFerrorHandler.compressStream.loopexit
	jmp	.LBB9_79
.LBB9_79:                               # %CFerrorHandler.compressStream
	callq	FAULT_DETECTED_CFC
.Lfunc_end9:
	.size	compressStream, .Lfunc_end9-compressStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof
	.type	myfeof,@function
myfeof:                                 # @myfeof
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8047, %ax              # imm = 0x1F6F
	xorw	%cx, %ax
	cmpw	$12577, %ax             # imm = 0x3121
	jne	.LBB10_10
# %bb.1:                                # %myfeof.split32
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8047, %ax              # imm = 0x1F6F
	xorw	%cx, %ax
	cmpw	$12577, %ax             # imm = 0x3121
	jne	.LBB10_10
# %bb.2:                                # %myfeof.split30
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8047, %ax              # imm = 0x1F6F
	xorw	%cx, %ax
	cmpw	$12577, %ax             # imm = 0x3121
	jne	.LBB10_10
# %bb.3:                                # %myfeof.split
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movl	%edi, (%r15)
	movl	(%r15), %edi
	movw	$12577, BasicBlockSignatureTracker # imm = 0x3121
	movw	$0, RunTimeSignatureAdjuster
	callq	spec_getc
	movw	$12577, BasicBlockSignatureTracker # imm = 0x3121
	movw	$0, RunTimeSignatureAdjuster
	movl	%eax, (%rbx)
	movl	(%rbx), %eax
	movw	$12577, BasicBlockSignatureTracker # imm = 0x3121
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB10_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$12594, %ax             # imm = 0x3132
	jne	.LBB10_10
# %bb.5:                                # %myfeof.split24
	movb	$1, (%r14)
	movw	$12594, BasicBlockSignatureTracker # imm = 0x3132
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB10_8
.LBB10_6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$12605, %ax             # imm = 0x313D
	jne	.LBB10_10
# %bb.7:                                # %myfeof.split26
	movl	(%rbx), %eax
	movl	(%r15), %esi
	movw	$12605, BasicBlockSignatureTracker # imm = 0x313D
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%al, %edi
	callq	spec_ungetc
	movw	$12605, BasicBlockSignatureTracker # imm = 0x313D
	movw	$15, RunTimeSignatureAdjuster
	movb	$0, (%r14)
	movw	$12605, BasicBlockSignatureTracker # imm = 0x313D
	movw	$15, RunTimeSignatureAdjuster
.LBB10_8:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$122, %ax
	xorw	%cx, %ax
	cmpw	$12616, %ax             # imm = 0x3148
	jne	.LBB10_10
# %bb.9:                                # %myfeof.split28
	movb	(%r14), %al
	movw	$12616, BasicBlockSignatureTracker # imm = 0x3148
	movw	$8056, RunTimeSignatureAdjuster # imm = 0x1F78
	movzbl	%al, %eax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB10_10:                              # %CFerrorHandler.myfeof
	callq	FAULT_DETECTED_CFC
.Lfunc_end10:
	.size	myfeof, .Lfunc_end10-myfeof
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s
	.type	uInt64_from_UInt32s,@function
uInt64_from_UInt32s:                    # @uInt64_from_UInt32s
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7739, %ax              # imm = 0x1E3B
	xorw	%cx, %ax
	cmpw	$12678, %ax             # imm = 0x3186
	jne	.LBB11_3
# %bb.1:                                # %uInt64_from_UInt32s.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7739, %ax              # imm = 0x1E3B
	xorw	%cx, %ax
	cmpw	$12678, %ax             # imm = 0x3186
	jne	.LBB11_3
# %bb.2:                                # %uInt64_from_UInt32s.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rax)
	movl	%esi, (%r8)
	movl	%edx, (%rcx)
	movl	(%rcx), %edx
	shrl	$24, %edx
	andl	$255, %edx
	movq	(%rax), %rsi
	movb	%dl, 7(%rsi)
	movl	(%rcx), %edx
	shrl	$16, %edx
	andl	$255, %edx
	movq	(%rax), %rsi
	movb	%dl, 6(%rsi)
	movl	(%rcx), %edx
	shrl	$8, %edx
	andl	$255, %edx
	movq	(%rax), %rsi
	movb	%dl, 5(%rsi)
	movl	(%rcx), %ecx
	andl	$255, %ecx
	movq	(%rax), %rdx
	movb	%cl, 4(%rdx)
	movl	(%r8), %ecx
	shrl	$24, %ecx
	andl	$255, %ecx
	movq	(%rax), %rdx
	movb	%cl, 3(%rdx)
	movl	(%r8), %ecx
	shrl	$16, %ecx
	andl	$255, %ecx
	movq	(%rax), %rdx
	movb	%cl, 2(%rdx)
	movl	(%r8), %ecx
	shrl	$8, %ecx
	andl	$255, %ecx
	movq	(%rax), %rdx
	movb	%cl, 1(%rdx)
	movl	(%r8), %ecx
	andl	$255, %ecx
	movq	(%rax), %rax
	movb	%cl, (%rax)
	movw	$12678, BasicBlockSignatureTracker # imm = 0x3186
	movw	$7912, RunTimeSignatureAdjuster # imm = 0x1EE8
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB11_3:                               # %CFerrorHandler.uInt64_from_UInt32s
	callq	FAULT_DETECTED_CFC
.Lfunc_end11:
	.size	uInt64_from_UInt32s, .Lfunc_end11-uInt64_from_UInt32s
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double
.LCPI12_0:
	.quad	4607182418800017408     # double 1
.LCPI12_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double,@function
uInt64_to_double:                       # @uInt64_to_double
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7795, %ax              # imm = 0x1E73
	xorw	%cx, %ax
	cmpw	$12750, %ax             # imm = 0x31CE
	jne	.LBB12_12
# %bb.1:                                # %uInt64_to_double.split22
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7795, %ax              # imm = 0x1E73
	xorw	%cx, %ax
	cmpw	$12750, %ax             # imm = 0x31CE
	jne	.LBB12_12
# %bb.2:                                # %uInt64_to_double.split
	xorps	%xmm0, %xmm0
	movsd	.LCPI12_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rdi, (%r8)
	movsd	%xmm1, (%rsi)
	movsd	%xmm0, (%rdx)
	movl	$0, (%rcx)
	movw	$12750, BasicBlockSignatureTracker # imm = 0x31CE
	movw	$0, RunTimeSignatureAdjuster
.LBB12_3:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %di
	movw	RunTimeSignatureAdjuster, %ax
	xorw	$39, %di
	xorw	%ax, %di
	cmpw	$12777, %di             # imm = 0x31E9
	jne	.LBB12_11
# %bb.4:                                # %uInt64_to_double.split24
                                        #   in Loop: Header=BB12_3 Depth=1
	movl	(%rcx), %eax
	movw	$12777, BasicBlockSignatureTracker # imm = 0x31E9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jge	.LBB12_9
# %bb.5:                                #   in Loop: Header=BB12_3 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$12788, %ax             # imm = 0x31F4
	jne	.LBB12_11
# %bb.6:                                # %uInt64_to_double.split26
                                        #   in Loop: Header=BB12_3 Depth=1
	movsd	.LCPI12_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movsd	(%rsi), %xmm1           # xmm1 = mem[0],zero
	movq	(%r8), %rax
	movslq	(%rcx), %rdi
	movzbl	(%rax,%rdi), %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	%xmm2, %xmm1
	addsd	(%rdx), %xmm1
	movsd	%xmm1, (%rdx)
	mulsd	(%rsi), %xmm0
	movsd	%xmm0, (%rsi)
	movw	$12788, BasicBlockSignatureTracker # imm = 0x31F4
	movw	$0, RunTimeSignatureAdjuster
# %bb.7:                                #   in Loop: Header=BB12_3 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$12790, %ax             # imm = 0x31F6
	jne	.LBB12_11
# %bb.8:                                # %uInt64_to_double.split30
                                        #   in Loop: Header=BB12_3 Depth=1
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$12790, BasicBlockSignatureTracker # imm = 0x31F6
	movw	$56, RunTimeSignatureAdjuster
	jmp	.LBB12_3
.LBB12_9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$12799, %ax             # imm = 0x31FF
	jne	.LBB12_12
# %bb.10:                               # %uInt64_to_double.split28
	movsd	(%rdx), %xmm0           # xmm0 = mem[0],zero
	movw	$12799, BasicBlockSignatureTracker # imm = 0x31FF
	movw	$7825, RunTimeSignatureAdjuster # imm = 0x1E91
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB12_11:                              # %CFerrorHandler.uInt64_to_double.loopexit
	jmp	.LBB12_12
.LBB12_12:                              # %CFerrorHandler.uInt64_to_double
	callq	FAULT_DETECTED_CFC
.Lfunc_end12:
	.size	uInt64_to_double, .Lfunc_end12-uInt64_to_double
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii
	.type	uInt64_toAscii,@function
uInt64_toAscii:                         # @uInt64_toAscii
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7561, %ax              # imm = 0x1D89
	xorw	%cx, %ax
	cmpw	$12852, %ax             # imm = 0x3234
	jne	.LBB13_21
# %bb.1:                                # %uInt64_toAscii.split38
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7561, %ax              # imm = 0x1D89
	xorw	%cx, %ax
	cmpw	$12852, %ax             # imm = 0x3234
	jne	.LBB13_21
# %bb.2:                                # %uInt64_toAscii.split
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r12
	addq	$-32, %r12
	movq	%r12, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%r14)
	movq	%rsi, (%rax)
	movl	$0, (%r13)
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, (%rbx)
	movw	$12852, BasicBlockSignatureTracker # imm = 0x3234
	movw	$0, RunTimeSignatureAdjuster
.LBB13_3:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10, %ax
	xorw	%cx, %ax
	cmpw	$12862, %ax             # imm = 0x323E
	jne	.LBB13_20
# %bb.4:                                # %uInt64_toAscii.split40
                                        #   in Loop: Header=BB13_3 Depth=1
	movw	$12862, BasicBlockSignatureTracker # imm = 0x323E
	movw	$0, RunTimeSignatureAdjuster
	movq	%rbx, %rdi
	callq	uInt64_qrm10
	movw	$12862, BasicBlockSignatureTracker # imm = 0x323E
	movw	$0, RunTimeSignatureAdjuster
	movl	%eax, (%r15)
	movl	(%r15), %eax
	addl	$48, %eax
	movslq	(%r13), %rcx
	movb	%al, (%r12,%rcx)
	movl	(%r13), %eax
	addl	$1, %eax
	movl	%eax, (%r13)
	movw	$12862, BasicBlockSignatureTracker # imm = 0x323E
	movw	$0, RunTimeSignatureAdjuster
# %bb.5:                                #   in Loop: Header=BB13_3 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$104, %ax
	cmpw	$12886, %ax             # imm = 0x3256
	jne	.LBB13_20
# %bb.6:                                # %uInt64_toAscii.split42
                                        #   in Loop: Header=BB13_3 Depth=1
	movw	$12886, BasicBlockSignatureTracker # imm = 0x3256
	movw	$0, RunTimeSignatureAdjuster
	movq	%rbx, %rdi
	callq	uInt64_isZero
	movw	$12886, BasicBlockSignatureTracker # imm = 0x3256
	movw	$98, RunTimeSignatureAdjuster
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	movw	$12886, BasicBlockSignatureTracker # imm = 0x3256
	movw	$98, RunTimeSignatureAdjuster
	testb	$1, %al
	jne	.LBB13_3
# %bb.7:                                # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-14829, %ax            # imm = 0xC613
	cmpw	$-3003, %ax             # imm = 0xF445
	jne	.LBB13_21
# %bb.8:                                # %uInt64_toAscii.split44
	movw	$-3003, BasicBlockSignatureTracker # imm = 0xF445
	movw	$-14829, RunTimeSignatureAdjuster # imm = 0xC613
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$12903, %ax             # imm = 0x3267
	jne	.LBB13_21
# %bb.10:                               # %uInt64_toAscii.split54
	movq	(%r14), %rax
	movslq	(%r13), %rcx
	movb	$0, (%rax,%rcx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$12903, BasicBlockSignatureTracker # imm = 0x3267
	movw	$0, RunTimeSignatureAdjuster
.LBB13_11:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19, %ax
	xorw	%cx, %ax
	cmpw	$12916, %ax             # imm = 0x3274
	jne	.LBB13_19
# %bb.12:                               # %uInt64_toAscii.split46
                                        #   in Loop: Header=BB13_11 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r13), %ecx
	movw	$12916, BasicBlockSignatureTracker # imm = 0x3274
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB13_17
# %bb.13:                               #   in Loop: Header=BB13_11 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$255, %ax
	cmpw	$12939, %ax             # imm = 0x328B
	jne	.LBB13_19
# %bb.14:                               # %uInt64_toAscii.split48
                                        #   in Loop: Header=BB13_11 Depth=1
	movl	(%r13), %eax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	subl	(%rdx), %eax
	subl	$1, %eax
	cltq
	movb	(%r12,%rax), %al
	movq	(%r14), %rcx
	movslq	(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movw	$12939, BasicBlockSignatureTracker # imm = 0x328B
	movw	$0, RunTimeSignatureAdjuster
# %bb.15:                               #   in Loop: Header=BB13_11 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$12987, %ax             # imm = 0x32BB
	jne	.LBB13_19
# %bb.16:                               # %uInt64_toAscii.split52
                                        #   in Loop: Header=BB13_11 Depth=1
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$12987, BasicBlockSignatureTracker # imm = 0x32BB
	movw	$220, RunTimeSignatureAdjuster
	jmp	.LBB13_11
.LBB13_17:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$152, %ax
	cmpw	$13036, %ax             # imm = 0x32EC
	jne	.LBB13_21
# %bb.18:                               # %uInt64_toAscii.split50
	movw	$13036, BasicBlockSignatureTracker # imm = 0x32EC
	movw	$7554, RunTimeSignatureAdjuster # imm = 0x1D82
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB13_19:                              # %CFerrorHandler.uInt64_toAscii.loopexit
	jmp	.LBB13_21
.LBB13_20:                              # %CFerrorHandler.uInt64_toAscii.loopexit1
	jmp	.LBB13_21
.LBB13_21:                              # %CFerrorHandler.uInt64_toAscii
	callq	FAULT_DETECTED_CFC
.Lfunc_end13:
	.size	uInt64_toAscii, .Lfunc_end13-uInt64_toAscii
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function configError
	.type	configError,@function
configError:                            # @configError
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$854, %ax               # imm = 0x356
	xorw	%cx, %ax
	cmpw	$13085, %ax             # imm = 0x331D
	jne	.LBB14_3
# %bb.1:                                # %configError.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$854, %ax               # imm = 0x356
	xorw	%cx, %ax
	cmpw	$13085, %ax             # imm = 0x331D
	jne	.LBB14_3
# %bb.2:                                # %configError.split
	movabsq	$.L.str.17, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$13085, BasicBlockSignatureTracker # imm = 0x331D
	movw	$0, RunTimeSignatureAdjuster
	movl	$3, %edi
	callq	setExit
	movw	$13085, BasicBlockSignatureTracker # imm = 0x331D
	movw	$0, RunTimeSignatureAdjuster
	movl	exitValue, %edi
	callq	exit
	movw	$13085, BasicBlockSignatureTracker # imm = 0x331D
	movw	$0, RunTimeSignatureAdjuster
.LBB14_3:                               # %CFerrorHandler.configError
	callq	FAULT_DETECTED_CFC
.Lfunc_end14:
	.size	configError, .Lfunc_end14-configError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function outOfMemory
	.type	outOfMemory,@function
outOfMemory:                            # @outOfMemory
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$804, %ax               # imm = 0x324
	xorw	%cx, %ax
	cmpw	$13128, %ax             # imm = 0x3348
	jne	.LBB15_3
# %bb.1:                                # %outOfMemory.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$804, %ax               # imm = 0x324
	xorw	%cx, %ax
	cmpw	$13128, %ax             # imm = 0x3348
	jne	.LBB15_3
# %bb.2:                                # %outOfMemory.split
	movabsq	$.L.str.16, %rsi
	movq	stderr, %rdi
	movq	progName, %rdx
	movb	$0, %al
	callq	fprintf
	movw	$13128, BasicBlockSignatureTracker # imm = 0x3348
	movw	$0, RunTimeSignatureAdjuster
	callq	showFileNames
	movw	$13128, BasicBlockSignatureTracker # imm = 0x3348
	movw	$874, RunTimeSignatureAdjuster # imm = 0x36A
	movw	$13128, BasicBlockSignatureTracker # imm = 0x3348
	movw	$0, RunTimeSignatureAdjuster
	movl	$1, %edi
	callq	cleanUpAndFail
	movw	$13128, BasicBlockSignatureTracker # imm = 0x3348
	movw	$874, RunTimeSignatureAdjuster # imm = 0x36A
	movw	$13128, BasicBlockSignatureTracker # imm = 0x3348
	movw	$874, RunTimeSignatureAdjuster # imm = 0x36A
	popq	%rbp
	retq
.LBB15_3:                               # %CFerrorHandler.outOfMemory
	callq	FAULT_DETECTED_CFC
.Lfunc_end15:
	.size	outOfMemory, .Lfunc_end15-outOfMemory
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ioError
	.type	ioError,@function
ioError:                                # @ioError
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$840, %ax               # imm = 0x348
	xorw	%cx, %ax
	cmpw	$13255, %ax             # imm = 0x33C7
	jne	.LBB16_3
# %bb.1:                                # %ioError.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$840, %ax               # imm = 0x348
	xorw	%cx, %ax
	cmpw	$13255, %ax             # imm = 0x33C7
	jne	.LBB16_3
# %bb.2:                                # %ioError.split
	movabsq	$.L.str.15, %rsi
	movq	stderr, %rdi
	movq	progName, %rdx
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	perror
	movw	$13255, BasicBlockSignatureTracker # imm = 0x33C7
	movw	$143, RunTimeSignatureAdjuster
	callq	showFileNames
	movw	$13255, BasicBlockSignatureTracker # imm = 0x33C7
	movw	$143, RunTimeSignatureAdjuster
	movw	$13255, BasicBlockSignatureTracker # imm = 0x33C7
	movw	$143, RunTimeSignatureAdjuster
	movl	$1, %edi
	callq	cleanUpAndFail
	movw	$13255, BasicBlockSignatureTracker # imm = 0x33C7
	movw	$143, RunTimeSignatureAdjuster
	movw	$13255, BasicBlockSignatureTracker # imm = 0x33C7
	movw	$7385, RunTimeSignatureAdjuster # imm = 0x1CD9
	popq	%rbp
	retq
.LBB16_3:                               # %CFerrorHandler.ioError
	callq	FAULT_DETECTED_CFC
.Lfunc_end16:
	.size	ioError, .Lfunc_end16-ioError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function panic
	.type	panic,@function
panic:                                  # @panic
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$868, %ax               # imm = 0x364
	xorw	%cx, %ax
	cmpw	$13302, %ax             # imm = 0x33F6
	jne	.LBB17_7
# %bb.1:                                # %panic.split36
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$868, %ax               # imm = 0x364
	xorw	%cx, %ax
	cmpw	$13302, %ax             # imm = 0x33F6
	jne	.LBB17_7
# %bb.2:                                # %panic.split34
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$868, %ax               # imm = 0x364
	xorw	%cx, %ax
	cmpw	$13302, %ax             # imm = 0x33F6
	jne	.LBB17_7
# %bb.3:                                # %panic.split32
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$868, %ax               # imm = 0x364
	xorw	%cx, %ax
	cmpw	$13302, %ax             # imm = 0x33F6
	jne	.LBB17_7
# %bb.4:                                # %panic.split30
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$868, %ax               # imm = 0x364
	xorw	%cx, %ax
	cmpw	$13302, %ax             # imm = 0x33F6
	jne	.LBB17_7
# %bb.5:                                # %panic.split28
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$868, %ax               # imm = 0x364
	xorw	%cx, %ax
	cmpw	$13302, %ax             # imm = 0x33F6
	jne	.LBB17_7
# %bb.6:                                # %panic.split
	movabsq	$.L.str.10, %rsi
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rdi, (%rax)
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	(%rax), %rcx
	movb	$0, %al
	callq	fprintf
	movw	$13302, BasicBlockSignatureTracker # imm = 0x33F6
	movw	$190, RunTimeSignatureAdjuster
	callq	showFileNames
	movw	$13302, BasicBlockSignatureTracker # imm = 0x33F6
	movw	$190, RunTimeSignatureAdjuster
	movw	$13302, BasicBlockSignatureTracker # imm = 0x33F6
	movw	$190, RunTimeSignatureAdjuster
	movl	$3, %edi
	callq	cleanUpAndFail
	movw	$13302, BasicBlockSignatureTracker # imm = 0x33F6
	movw	$190, RunTimeSignatureAdjuster
	movw	$13302, BasicBlockSignatureTracker # imm = 0x33F6
	movw	$980, RunTimeSignatureAdjuster # imm = 0x3D4
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB17_7:                               # %CFerrorHandler.panic
	callq	FAULT_DETECTED_CFC
.Lfunc_end17:
	.size	panic, .Lfunc_end17-panic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function showFileNames
	.type	showFileNames,@function
showFileNames:                          # @showFileNames
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2028, %ax              # imm = 0x7EC
	xorw	%cx, %ax
	cmpw	$13476, %ax             # imm = 0x34A4
	jne	.LBB18_10
# %bb.1:                                # %showFileNames.split41
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2028, %ax              # imm = 0x7EC
	xorw	%cx, %ax
	cmpw	$13476, %ax             # imm = 0x34A4
	jne	.LBB18_10
# %bb.2:                                # %showFileNames.split39
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2028, %ax              # imm = 0x7EC
	xorw	%cx, %ax
	cmpw	$13476, %ax             # imm = 0x34A4
	jne	.LBB18_10
# %bb.3:                                # %showFileNames.split33
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2028, %ax              # imm = 0x7EC
	xorw	%cx, %ax
	cmpw	$13476, %ax             # imm = 0x34A4
	jne	.LBB18_10
# %bb.4:                                # %showFileNames.split31
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2028, %ax              # imm = 0x7EC
	xorw	%cx, %ax
	cmpw	$13476, %ax             # imm = 0x34A4
	jne	.LBB18_10
# %bb.5:                                # %showFileNames.split
	movb	noisy, %al
	movw	$13476, BasicBlockSignatureTracker # imm = 0x34A4
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB18_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$13477, %ax             # imm = 0x34A5
	jne	.LBB18_10
# %bb.7:                                # %showFileNames.split35
	movabsq	$.L.str.11, %rsi
	movabsq	$inName, %rdx
	movabsq	$outName, %rcx
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$13477, BasicBlockSignatureTracker # imm = 0x34A5
	movw	$1, RunTimeSignatureAdjuster
.LBB18_8:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$13501, %ax             # imm = 0x34BD
	jne	.LBB18_10
# %bb.9:                                # %showFileNames.split37
	movw	$13501, BasicBlockSignatureTracker # imm = 0x34BD
	movw	$1233, RunTimeSignatureAdjuster # imm = 0x4D1
	popq	%rbp
	retq
.LBB18_10:                              # %CFerrorHandler.showFileNames
	callq	FAULT_DETECTED_CFC
.Lfunc_end18:
	.size	showFileNames, .Lfunc_end18-showFileNames
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail
	.type	cleanUpAndFail,@function
cleanUpAndFail:                         # @cleanUpAndFail
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1954, %ax              # imm = 0x7A2
	xorw	%cx, %ax
	cmpw	$13546, %ax             # imm = 0x34EA
	jne	.LBB19_6
# %bb.1:                                # %cleanUpAndFail.split29
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1954, %ax              # imm = 0x7A2
	xorw	%cx, %ax
	cmpw	$13546, %ax             # imm = 0x34EA
	jne	.LBB19_6
# %bb.2:                                # %cleanUpAndFail.split27
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1954, %ax              # imm = 0x7A2
	xorw	%cx, %ax
	cmpw	$13546, %ax             # imm = 0x34EA
	jne	.LBB19_6
# %bb.3:                                # %cleanUpAndFail.split25
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1954, %ax              # imm = 0x7A2
	xorw	%cx, %ax
	cmpw	$13546, %ax             # imm = 0x34EA
	jne	.LBB19_6
# %bb.4:                                # %cleanUpAndFail.split23
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1954, %ax              # imm = 0x7A2
	xorw	%cx, %ax
	cmpw	$13546, %ax             # imm = 0x34EA
	jne	.LBB19_6
# %bb.5:                                # %cleanUpAndFail.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movl	%edi, (%rax)
	movl	(%rax), %edi
	movw	$13546, BasicBlockSignatureTracker # imm = 0x34EA
	movw	$2039, RunTimeSignatureAdjuster # imm = 0x7F7
	callq	setExit
	movw	$13546, BasicBlockSignatureTracker # imm = 0x34EA
	movw	$2039, RunTimeSignatureAdjuster # imm = 0x7F7
	movl	exitValue, %edi
	callq	exit
	movw	$13546, BasicBlockSignatureTracker # imm = 0x34EA
	movw	$0, RunTimeSignatureAdjuster
.LBB19_6:                               # %CFerrorHandler.cleanUpAndFail
	callq	FAULT_DETECTED_CFC
.Lfunc_end19:
	.size	cleanUpAndFail, .Lfunc_end19-cleanUpAndFail
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function setExit
	.type	setExit,@function
setExit:                                # @setExit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1536, %ax              # imm = 0x600
	xorw	%cx, %ax
	cmpw	$13597, %ax             # imm = 0x351D
	jne	.LBB20_3
# %bb.1:                                # %setExit.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1536, %ax              # imm = 0x600
	xorw	%cx, %ax
	cmpw	$13597, %ax             # imm = 0x351D
	jne	.LBB20_3
# %bb.2:                                # %setExit.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movl	%edi, (%rax)
	movl	$0, exitValue
	movw	$13597, BasicBlockSignatureTracker # imm = 0x351D
	movw	$1366, RunTimeSignatureAdjuster # imm = 0x556
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB20_3:                               # %CFerrorHandler.setExit
	callq	FAULT_DETECTED_CFC
.Lfunc_end20:
	.size	setExit, .Lfunc_end20-setExit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10
	.type	uInt64_qrm10,@function
uInt64_qrm10:                           # @uInt64_qrm10
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1890, %ax              # imm = 0x762
	xorw	%cx, %ax
	cmpw	$13660, %ax             # imm = 0x355C
	jne	.LBB21_11
# %bb.1:                                # %uInt64_qrm10.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rdi, (%r9)
	movl	$0, (%rcx)
	movl	$7, (%rsi)
	movw	$13660, BasicBlockSignatureTracker # imm = 0x355C
	movw	$0, RunTimeSignatureAdjuster
.LBB21_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$43, %ax
	xorw	%dx, %ax
	cmpw	$13687, %ax             # imm = 0x3577
	jne	.LBB21_10
# %bb.3:                                # %uInt64_qrm10.split17
                                        #   in Loop: Header=BB21_2 Depth=1
	movl	(%rsi), %eax
	movw	$13687, BasicBlockSignatureTracker # imm = 0x3577
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB21_8
# %bb.4:                                #   in Loop: Header=BB21_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$13690, %ax             # imm = 0x357A
	jne	.LBB21_10
# %bb.5:                                # %uInt64_qrm10.split19
                                        #   in Loop: Header=BB21_2 Depth=1
	movl	$10, %r10d
	movl	(%rcx), %eax
	shll	$8, %eax
	movq	(%r9), %rdx
	movslq	(%rsi), %rdi
	movzbl	(%rdx,%rdi), %edx
	addl	%edx, %eax
	movl	%eax, (%r8)
	movl	(%r8), %eax
	xorl	%edx, %edx
	divl	%r10d
	movq	(%r9), %rdx
	movslq	(%rsi), %rdi
	movb	%al, (%rdx,%rdi)
	movl	(%r8), %eax
	xorl	%edx, %edx
	divl	%r10d
	movl	%edx, (%rcx)
	movw	$13690, BasicBlockSignatureTracker # imm = 0x357A
	movw	$0, RunTimeSignatureAdjuster
# %bb.6:                                #   in Loop: Header=BB21_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$13691, %ax             # imm = 0x357B
	jne	.LBB21_10
# %bb.7:                                # %uInt64_qrm10.split23
                                        #   in Loop: Header=BB21_2 Depth=1
	movl	(%rsi), %eax
	addl	$-1, %eax
	movl	%eax, (%rsi)
	movw	$13691, BasicBlockSignatureTracker # imm = 0x357B
	movw	$39, RunTimeSignatureAdjuster
	jmp	.LBB21_2
.LBB21_8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$247, %ax
	cmpw	$13696, %ax             # imm = 0x3580
	jne	.LBB21_11
# %bb.9:                                # %uInt64_qrm10.split21
	movl	(%rcx), %eax
	movw	$13696, BasicBlockSignatureTracker # imm = 0x3580
	movw	$1972, RunTimeSignatureAdjuster # imm = 0x7B4
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB21_10:                              # %CFerrorHandler.uInt64_qrm10.loopexit
	jmp	.LBB21_11
.LBB21_11:                              # %CFerrorHandler.uInt64_qrm10
	callq	FAULT_DETECTED_CFC
.Lfunc_end21:
	.size	uInt64_qrm10, .Lfunc_end21-uInt64_qrm10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero
	.type	uInt64_isZero,@function
uInt64_isZero:                          # @uInt64_isZero
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1992, %ax              # imm = 0x7C8
	xorw	%cx, %ax
	cmpw	$13726, %ax             # imm = 0x359E
	jne	.LBB22_17
# %bb.1:                                # %uInt64_isZero.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rdi, (%rcx)
	movl	$0, (%rdx)
	movw	$13726, BasicBlockSignatureTracker # imm = 0x359E
	movw	$0, RunTimeSignatureAdjuster
.LBB22_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %si
	movw	RunTimeSignatureAdjuster, %di
	xorw	$74, %si
	xorw	%di, %si
	cmpw	$13780, %si             # imm = 0x35D4
	jne	.LBB22_16
# %bb.3:                                # %uInt64_isZero.split28
                                        #   in Loop: Header=BB22_2 Depth=1
	movl	(%rdx), %esi
	movw	$13780, BasicBlockSignatureTracker # imm = 0x35D4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %esi
	jge	.LBB22_12
# %bb.4:                                #   in Loop: Header=BB22_2 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$1, %si
	cmpw	$13781, %si             # imm = 0x35D5
	jne	.LBB22_16
# %bb.5:                                # %uInt64_isZero.split30
                                        #   in Loop: Header=BB22_2 Depth=1
	movq	(%rcx), %rsi
	movslq	(%rdx), %rdi
	movzbl	(%rsi,%rdi), %esi
	movw	$13781, BasicBlockSignatureTracker # imm = 0x35D5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %esi
	je	.LBB22_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$55, %cx
	cmpw	$13794, %cx             # imm = 0x35E2
	jne	.LBB22_17
# %bb.7:                                # %uInt64_isZero.split34
	movb	$0, (%rax)
	movw	$13794, BasicBlockSignatureTracker # imm = 0x35E2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB22_14
.LBB22_8:                               #   in Loop: Header=BB22_2 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$63, %si
	cmpw	$13802, %si             # imm = 0x35EA
	jne	.LBB22_16
# %bb.9:                                # %uInt64_isZero.split36
                                        #   in Loop: Header=BB22_2 Depth=1
	movw	$13802, BasicBlockSignatureTracker # imm = 0x35EA
	movw	$0, RunTimeSignatureAdjuster
# %bb.10:                               #   in Loop: Header=BB22_2 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$1, %si
	cmpw	$13803, %si             # imm = 0x35EB
	jne	.LBB22_16
# %bb.11:                               # %uInt64_isZero.split40
                                        #   in Loop: Header=BB22_2 Depth=1
	movl	(%rdx), %esi
	addl	$1, %esi
	movl	%esi, (%rdx)
	movw	$13803, BasicBlockSignatureTracker # imm = 0x35EB
	movw	$117, RunTimeSignatureAdjuster
	jmp	.LBB22_2
.LBB22_12:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$971, %cx               # imm = 0x3CB
	cmpw	$13855, %cx             # imm = 0x361F
	jne	.LBB22_17
# %bb.13:                               # %uInt64_isZero.split32
	movb	$1, (%rax)
	movw	$13855, BasicBlockSignatureTracker # imm = 0x361F
	movw	$1021, RunTimeSignatureAdjuster # imm = 0x3FD
.LBB22_14:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$961, %cx               # imm = 0x3C1
	xorw	%dx, %cx
	cmpw	$13859, %cx             # imm = 0x3623
	jne	.LBB22_17
# %bb.15:                               # %uInt64_isZero.split38
	movb	(%rax), %al
	movw	$13859, BasicBlockSignatureTracker # imm = 0x3623
	movw	$1053, RunTimeSignatureAdjuster # imm = 0x41D
	movzbl	%al, %eax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB22_16:                              # %CFerrorHandler.uInt64_isZero.loopexit
	jmp	.LBB22_17
.LBB22_17:                              # %CFerrorHandler.uInt64_isZero
	callq	FAULT_DETECTED_CFC
.Lfunc_end22:
	.size	uInt64_isZero, .Lfunc_end22-uInt64_isZero
	.cfi_endproc
                                        # -- End function
	.globl	uncompressStream        # -- Begin function uncompressStream
	.p2align	4, 0x90
	.type	uncompressStream,@function
uncompressStream:                       # @uncompressStream
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-13869, %ax            # imm = 0xC9D3
	xorw	%cx, %ax
	cmpw	$13896, %ax             # imm = 0x3648
	jne	.LBB23_147
# %bb.1:                                # %uncompressStream.split402
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -96(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %rbx
	addq	$-5008, %rbx            # imm = 0xEC70
	movq	%rbx, %rsp
	movq	%rsp, %r13
	addq	$-5008, %r13            # imm = 0xEC70
	movq	%r13, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%rdx, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	movq	%rdx, %rsp
	movl	%edi, (%r10)
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movl	%esi, (%rax)
	movq	$0, (%r15)
	movl	$0, (%r14)
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	movl	$0, (%rcx)
	movw	$13896, BasicBlockSignatureTracker # imm = 0x3648
	movw	$0, RunTimeSignatureAdjuster
.LBB23_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_12 Depth 2
                                        #     Child Loop BB23_42 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$42, %ax
	xorw	%cx, %ax
	cmpw	$13922, %ax             # imm = 0x3662
	jne	.LBB23_146
# %bb.3:                                # %uncompressStream.split
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movq	%r12, -64(%rbp)         # 8-byte Spill
	movq	%r9, -88(%rbp)          # 8-byte Spill
	movq	%r8, -80(%rbp)          # 8-byte Spill
	movq	%r10, -72(%rbp)         # 8-byte Spill
	movl	(%r10), %esi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	(%r14), %r9d
	movw	$13922, BasicBlockSignatureTracker # imm = 0x3662
	movw	$0, RunTimeSignatureAdjuster
	movq	%r11, -48(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%r13, %r8
	callq	BZ2_bzReadOpen
	movw	$13922, BasicBlockSignatureTracker # imm = 0x3662
	movw	$0, RunTimeSignatureAdjuster
	movq	%rax, (%r15)
	movq	(%r15), %rax
	movw	$13922, BasicBlockSignatureTracker # imm = 0x3662
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB23_6
# %bb.4:                                #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$231, %ax
	cmpw	$13957, %ax             # imm = 0x3685
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB23_146
# %bb.5:                                # %uncompressStream.split272
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	(%rax), %eax
	movw	$13957, BasicBlockSignatureTracker # imm = 0x3685
	movw	$231, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_8
.LBB23_6:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$240, %ax
	xorw	%cx, %ax
	cmpw	$13970, %ax             # imm = 0x3692
	jne	.LBB23_147
# %bb.7:                                # %uncompressStream.split270
	movw	$13970, BasicBlockSignatureTracker # imm = 0x3692
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_104
.LBB23_8:                               # %Buffer__
                                        #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-2784, %ax             # imm = 0xF520
	cmpw	$-15451, %ax            # imm = 0xC3A5
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	-48(%rbp), %rdi         # 8-byte Reload
	jne	.LBB23_146
# %bb.9:                                # %uncompressStream.split274
                                        #   in Loop: Header=BB23_2 Depth=1
	movw	$-15451, BasicBlockSignatureTracker # imm = 0xC3A5
	movw	$-2784, RunTimeSignatureAdjuster # imm = 0xF520
# %bb.10:                               #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29, %ax
	xorw	%cx, %ax
	cmpw	$13976, %ax             # imm = 0x3698
	jne	.LBB23_146
# %bb.11:                               # %uncompressStream.split404
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$13976, BasicBlockSignatureTracker # imm = 0x3698
	movw	$0, RunTimeSignatureAdjuster
.LBB23_12:                              #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$119, %ax
	xorw	%cx, %ax
	cmpw	$14063, %ax             # imm = 0x36EF
	jne	.LBB23_145
# %bb.13:                               # %uncompressStream.split278
                                        #   in Loop: Header=BB23_12 Depth=2
	movl	(%rdi), %eax
	movw	$14063, BasicBlockSignatureTracker # imm = 0x36EF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB23_32
# %bb.14:                               #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$14065, %ax             # imm = 0x36F1
	jne	.LBB23_145
# %bb.15:                               # %uncompressStream.split280
                                        #   in Loop: Header=BB23_12 Depth=2
	movq	(%r15), %rsi
	movw	$14065, BasicBlockSignatureTracker # imm = 0x36F1
	movw	$0, RunTimeSignatureAdjuster
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movw	$14065, BasicBlockSignatureTracker # imm = 0x36F1
	movw	$0, RunTimeSignatureAdjuster
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rdi), %eax
	movw	$14065, BasicBlockSignatureTracker # imm = 0x36F1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-5, %eax
	jne	.LBB23_18
# %bb.16:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$497, %ax               # imm = 0x1F1
	cmpw	$14080, %ax             # imm = 0x3700
	jne	.LBB23_147
# %bb.17:                               # %uncompressStream.split284
	movw	$14080, BasicBlockSignatureTracker # imm = 0x3700
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_86
.LBB23_18:                              #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$506, %ax               # imm = 0x1FA
	cmpw	$14091, %ax             # imm = 0x370B
	movq	-56(%rbp), %rdx         # 8-byte Reload
	jne	.LBB23_145
# %bb.19:                               # %uncompressStream.split286
                                        #   in Loop: Header=BB23_12 Depth=2
	movl	(%rdi), %eax
	movw	$14091, BasicBlockSignatureTracker # imm = 0x370B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_22
# %bb.20:                               #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$14112, %ax             # imm = 0x3720
	jne	.LBB23_145
# %bb.21:                               # %uncompressStream.split292
                                        #   in Loop: Header=BB23_12 Depth=2
	movl	(%rdi), %eax
	movw	$14112, BasicBlockSignatureTracker # imm = 0x3720
	movw	$43, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB23_28
.LBB23_22:                              #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32, %ax
	xorw	%cx, %ax
	cmpw	$14123, %ax             # imm = 0x372B
	jne	.LBB23_145
# %bb.23:                               # %uncompressStream.split290
                                        #   in Loop: Header=BB23_12 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$14123, BasicBlockSignatureTracker # imm = 0x372B
	movw	$11, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB23_30
# %bb.24:                               # %Buffer__2
                                        #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24224, %ax             # imm = 0x5EA0
	cmpw	$27019, %ax             # imm = 0x698B
	jne	.LBB23_145
# %bb.25:                               # %uncompressStream.split298
                                        #   in Loop: Header=BB23_12 Depth=2
	movw	$27019, BasicBlockSignatureTracker # imm = 0x698B
	movw	$24224, RunTimeSignatureAdjuster # imm = 0x5EA0
# %bb.26:                               #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$14133, %ax             # imm = 0x3735
	movq	-56(%rbp), %rdi         # 8-byte Reload
	jne	.LBB23_145
# %bb.27:                               # %uncompressStream.split406
                                        #   in Loop: Header=BB23_12 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movw	$14133, BasicBlockSignatureTracker # imm = 0x3735
	movw	$0, RunTimeSignatureAdjuster
	movl	$1, %esi
	callq	spec_fwrite
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movw	$14133, BasicBlockSignatureTracker # imm = 0x3735
	movw	$21, RunTimeSignatureAdjuster
	movw	$14133, BasicBlockSignatureTracker # imm = 0x3735
	movw	$21, RunTimeSignatureAdjuster
	jmp	.LBB23_30
.LBB23_28:                              # %Buffer__1
                                        #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23157, %ax             # imm = 0x5A75
	cmpw	$27989, %ax             # imm = 0x6D55
	jne	.LBB23_145
# %bb.29:                               # %uncompressStream.split294
                                        #   in Loop: Header=BB23_12 Depth=2
	movw	$27989, BasicBlockSignatureTracker # imm = 0x6D55
	movw	$23157, RunTimeSignatureAdjuster # imm = 0x5A75
.LBB23_30:                              #   in Loop: Header=BB23_12 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$104, %ax
	xorw	%cx, %ax
	cmpw	$14152, %ax             # imm = 0x3748
	jne	.LBB23_145
# %bb.31:                               # %uncompressStream.split296
                                        #   in Loop: Header=BB23_12 Depth=2
	movw	$14152, BasicBlockSignatureTracker # imm = 0x3748
	movw	$464, RunTimeSignatureAdjuster # imm = 0x1D0
	jmp	.LBB23_12
.LBB23_32:                              #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$445, %ax               # imm = 0x1BD
	cmpw	$14162, %ax             # imm = 0x3752
	jne	.LBB23_146
# %bb.33:                               # %uncompressStream.split282
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	(%rdi), %eax
	movw	$14162, BasicBlockSignatureTracker # imm = 0x3752
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	je	.LBB23_36
# %bb.34:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$14176, %ax             # imm = 0x3760
	jne	.LBB23_147
# %bb.35:                               # %uncompressStream.split300
	movw	$14176, BasicBlockSignatureTracker # imm = 0x3760
	movw	$498, RunTimeSignatureAdjuster # imm = 0x1F2
	jmp	.LBB23_104
.LBB23_36:                              #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$14184, %ax             # imm = 0x3768
	jne	.LBB23_146
# %bb.37:                               # %uncompressStream.split302
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	(%r15), %rsi
	movw	$14184, BasicBlockSignatureTracker # imm = 0x3768
	movw	$0, RunTimeSignatureAdjuster
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused
	movw	$14184, BasicBlockSignatureTracker # imm = 0x3768
	movw	$0, RunTimeSignatureAdjuster
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$14184, BasicBlockSignatureTracker # imm = 0x3768
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_40
# %bb.38:                               #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$14186, %ax             # imm = 0x376A
	jne	.LBB23_146
# %bb.39:                               # %uncompressStream.split304
                                        #   in Loop: Header=BB23_2 Depth=1
	movabsq	$.L.str.5.14, %rdi
	movw	$14186, BasicBlockSignatureTracker # imm = 0x376A
	movw	$2040, RunTimeSignatureAdjuster # imm = 0x7F8
	callq	panic
	movw	$14186, BasicBlockSignatureTracker # imm = 0x376A
	movw	$2040, RunTimeSignatureAdjuster # imm = 0x7F8
	movw	$14186, BasicBlockSignatureTracker # imm = 0x376A
	movw	$2, RunTimeSignatureAdjuster
.LBB23_40:                              #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$234, %ax
	xorw	%cx, %ax
	cmpw	$14210, %ax             # imm = 0x3782
	jne	.LBB23_146
# %bb.41:                               # %uncompressStream.split306
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$14210, BasicBlockSignatureTracker # imm = 0x3782
	movw	$0, RunTimeSignatureAdjuster
.LBB23_42:                              #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$33, %ax
	xorw	%cx, %ax
	cmpw	$14243, %ax             # imm = 0x37A3
	jne	.LBB23_144
# %bb.43:                               # %uncompressStream.split308
                                        #   in Loop: Header=BB23_42 Depth=2
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r14), %ecx
	movw	$14243, BasicBlockSignatureTracker # imm = 0x37A3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB23_48
# %bb.44:                               #   in Loop: Header=BB23_42 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$14257, %ax             # imm = 0x37B1
	jne	.LBB23_144
# %bb.45:                               # %uncompressStream.split310
                                        #   in Loop: Header=BB23_42 Depth=2
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movb	(%rax,%rcx), %al
	movslq	(%rdx), %rcx
	movb	%al, (%r13,%rcx)
	movw	$14257, BasicBlockSignatureTracker # imm = 0x37B1
	movw	$0, RunTimeSignatureAdjuster
# %bb.46:                               #   in Loop: Header=BB23_42 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$85, %ax
	cmpw	$14308, %ax             # imm = 0x37E4
	jne	.LBB23_144
# %bb.47:                               # %uncompressStream.split314
                                        #   in Loop: Header=BB23_42 Depth=2
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$14308, BasicBlockSignatureTracker # imm = 0x37E4
	movw	$102, RunTimeSignatureAdjuster
	jmp	.LBB23_42
.LBB23_48:                              #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$80, %ax
	cmpw	$14323, %ax             # imm = 0x37F3
	movq	-48(%rbp), %rdi         # 8-byte Reload
	jne	.LBB23_146
# %bb.49:                               # %uncompressStream.split312
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	(%r15), %rsi
	movw	$14323, BasicBlockSignatureTracker # imm = 0x37F3
	movw	$0, RunTimeSignatureAdjuster
	movq	%rdi, %rbx
	callq	BZ2_bzReadClose
	movw	$14323, BasicBlockSignatureTracker # imm = 0x37F3
	movw	$0, RunTimeSignatureAdjuster
	movl	(%rbx), %eax
	movw	$14323, BasicBlockSignatureTracker # imm = 0x37F3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_52
# %bb.50:                               #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$14327, %ax             # imm = 0x37F7
	jne	.LBB23_146
# %bb.51:                               # %uncompressStream.split316
                                        #   in Loop: Header=BB23_2 Depth=1
	movabsq	$.L.str.5.14, %rdi
	movw	$14327, BasicBlockSignatureTracker # imm = 0x37F7
	movw	$1893, RunTimeSignatureAdjuster # imm = 0x765
	callq	panic
	movw	$14327, BasicBlockSignatureTracker # imm = 0x37F7
	movw	$1893, RunTimeSignatureAdjuster # imm = 0x765
	movw	$14327, BasicBlockSignatureTracker # imm = 0x37F7
	movw	$4, RunTimeSignatureAdjuster
.LBB23_52:                              #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4061, %ax              # imm = 0xFDD
	xorw	%cx, %ax
	cmpw	$14382, %ax             # imm = 0x382E
	jne	.LBB23_146
# %bb.53:                               # %uncompressStream.split318
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	(%r14), %eax
	movw	$14382, BasicBlockSignatureTracker # imm = 0x382E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB23_60
# %bb.54:                               #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$14386, %ax             # imm = 0x3832
	movq	-72(%rbp), %rax         # 8-byte Reload
	jne	.LBB23_146
# %bb.55:                               # %uncompressStream.split320
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	(%rax), %edi
	movw	$14386, BasicBlockSignatureTracker # imm = 0x3832
	movw	$5756, RunTimeSignatureAdjuster # imm = 0x167C
	callq	myfeof
	movw	$14386, BasicBlockSignatureTracker # imm = 0x3832
	movw	$5756, RunTimeSignatureAdjuster # imm = 0x167C
	movzbl	%al, %eax
	movw	$14386, BasicBlockSignatureTracker # imm = 0x3832
	movw	$28, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_60
# %bb.56:                               # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10311, %ax             # imm = 0x2847
	cmpw	$4213, %ax              # imm = 0x1075
	jne	.LBB23_147
# %bb.57:                               # %uncompressStream.split324
	movw	$4213, BasicBlockSignatureTracker # imm = 0x1075
	movw	$10311, RunTimeSignatureAdjuster # imm = 0x2847
# %bb.58:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$113, %ax
	xorw	%cx, %ax
	cmpw	$14403, %ax             # imm = 0x3843
	jne	.LBB23_147
# %bb.59:                               # %uncompressStream.split408
	movw	$14403, BasicBlockSignatureTracker # imm = 0x3843
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_62
.LBB23_60:                              #   in Loop: Header=BB23_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$184, %ax
	xorw	%cx, %ax
	cmpw	$14486, %ax             # imm = 0x3896
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	-88(%rbp), %r9          # 8-byte Reload
	movq	-64(%rbp), %r12         # 8-byte Reload
	movq	-56(%rbp), %rbx         # 8-byte Reload
	movq	-48(%rbp), %r11         # 8-byte Reload
	jne	.LBB23_146
# %bb.61:                               # %uncompressStream.split322
                                        #   in Loop: Header=BB23_2 Depth=1
	movw	$14486, BasicBlockSignatureTracker # imm = 0x3896
	movw	$3806, RunTimeSignatureAdjuster # imm = 0xEDE
	jmp	.LBB23_2
.LBB23_62:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$219, %ax
	cmpw	$14488, %ax             # imm = 0x3898
	jne	.LBB23_147
# %bb.63:                               # %uncompressStream.split326
	movw	$14488, BasicBlockSignatureTracker # imm = 0x3898
	movw	$0, RunTimeSignatureAdjuster
.LBB23_64:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$43, %ax
	xorw	%cx, %ax
	cmpw	$14515, %ax             # imm = 0x38B3
	jne	.LBB23_147
# %bb.65:                               # %uncompressStream.split328
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	(%rax), %eax
	movw	$14515, BasicBlockSignatureTracker # imm = 0x38B3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB23_68
# %bb.66:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$14534, %ax             # imm = 0x38C6
	jne	.LBB23_147
# %bb.67:                               # %uncompressStream.split330
	movw	$14534, BasicBlockSignatureTracker # imm = 0x38C6
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_111
.LBB23_68:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$14558, %ax             # imm = 0x38DE
	jne	.LBB23_147
# %bb.69:                               # %uncompressStream.split332
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	(%rax), %eax
	movw	$14558, BasicBlockSignatureTracker # imm = 0x38DE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_72
# %bb.70:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$467, %ax               # imm = 0x1D3
	cmpw	$14605, %ax             # imm = 0x390D
	jne	.LBB23_147
# %bb.71:                               # %uncompressStream.split336
	movw	$14605, BasicBlockSignatureTracker # imm = 0x390D
	movw	$459, RunTimeSignatureAdjuster # imm = 0x1CB
	jmp	.LBB23_111
.LBB23_72:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$480, %ax               # imm = 0x1E0
	cmpw	$14654, %ax             # imm = 0x393E
	jne	.LBB23_147
# %bb.73:                               # %uncompressStream.split338
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$14654, BasicBlockSignatureTracker # imm = 0x393E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB23_80
# %bb.74:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$14683, %ax             # imm = 0x395B
	jne	.LBB23_147
# %bb.75:                               # %uncompressStream.split340
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$0, outputHandleJustInCase
	movl	(%rax), %eax
	movw	$14683, BasicBlockSignatureTracker # imm = 0x395B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB23_78
# %bb.76:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$216, %ax
	cmpw	$14723, %ax             # imm = 0x3983
	jne	.LBB23_147
# %bb.77:                               # %uncompressStream.split344
	movw	$14723, BasicBlockSignatureTracker # imm = 0x3983
	movw	$325, RunTimeSignatureAdjuster # imm = 0x145
	jmp	.LBB23_111
.LBB23_78:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$193, %ax
	cmpw	$14746, %ax             # imm = 0x399A
	jne	.LBB23_147
# %bb.79:                               # %uncompressStream.split346
	movw	$14746, BasicBlockSignatureTracker # imm = 0x399A
	movw	$164, RunTimeSignatureAdjuster
.LBB23_80:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$157, %ax
	xorw	%cx, %ax
	cmpw	$14755, %ax             # imm = 0x39A3
	jne	.LBB23_147
# %bb.81:                               # %uncompressStream.split342
	movl	$0, outputHandleJustInCase
	movl	verbosity, %eax
	movw	$14755, BasicBlockSignatureTracker # imm = 0x39A3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB23_84
# %bb.82:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$14761, %ax             # imm = 0x39A9
	jne	.LBB23_147
# %bb.83:                               # %uncompressStream.split348
	movabsq	$.L.str.6.15, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$14761, BasicBlockSignatureTracker # imm = 0x39A9
	movw	$10, RunTimeSignatureAdjuster
.LBB23_84:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$126, %ax
	xorw	%cx, %ax
	cmpw	$14813, %ax             # imm = 0x39DD
	jne	.LBB23_147
# %bb.85:                               # %uncompressStream.split350
	movq	-80(%rbp), %rax         # 8-byte Reload
	movb	$1, (%rax)
	movw	$14813, BasicBlockSignatureTracker # imm = 0x39DD
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_141
.LBB23_86:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3819, %ax              # imm = 0xEEB
	cmpw	$14827, %ax             # imm = 0x39EB
	jne	.LBB23_147
# %bb.87:                               # %uncompressStream.split288
	movb	forceOverwrite, %al
	movw	$14827, BasicBlockSignatureTracker # imm = 0x39EB
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB23_102
# %bb.88:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$14839, %ax             # imm = 0x39F7
	jne	.LBB23_147
# %bb.89:                               # %uncompressStream.split354
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edi
	movw	$14839, BasicBlockSignatureTracker # imm = 0x39F7
	movw	$0, RunTimeSignatureAdjuster
	callq	spec_rewind
	movw	$14839, BasicBlockSignatureTracker # imm = 0x39F7
	movw	$0, RunTimeSignatureAdjuster
	movw	$14839, BasicBlockSignatureTracker # imm = 0x39F7
	movw	$0, RunTimeSignatureAdjuster
.LBB23_90:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$14840, %ax             # imm = 0x39F8
	jne	.LBB23_143
# %bb.91:                               # %uncompressStream.split358
                                        #   in Loop: Header=BB23_90 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edi
	movw	$14840, BasicBlockSignatureTracker # imm = 0x39F8
	movw	$6070, RunTimeSignatureAdjuster # imm = 0x17B6
	callq	myfeof
	movw	$14840, BasicBlockSignatureTracker # imm = 0x39F8
	movw	$6070, RunTimeSignatureAdjuster # imm = 0x17B6
	movw	$14840, BasicBlockSignatureTracker # imm = 0x39F8
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB23_94
# %bb.92:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$980, %ax               # imm = 0x3D4
	cmpw	$14892, %ax             # imm = 0x3A2C
	jne	.LBB23_147
# %bb.93:                               # %uncompressStream.split360
	movw	$14892, BasicBlockSignatureTracker # imm = 0x3A2C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_100
.LBB23_94:                              #   in Loop: Header=BB23_90 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$969, %ax               # imm = 0x3C9
	cmpw	$14897, %ax             # imm = 0x3A31
	jne	.LBB23_143
# %bb.95:                               # %uncompressStream.split362
                                        #   in Loop: Header=BB23_90 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %ecx
	movw	$14897, BasicBlockSignatureTracker # imm = 0x3A31
	movw	$5205, RunTimeSignatureAdjuster # imm = 0x1455
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	spec_fread
	movw	$14897, BasicBlockSignatureTracker # imm = 0x3A31
	movw	$5205, RunTimeSignatureAdjuster # imm = 0x1455
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$14897, BasicBlockSignatureTracker # imm = 0x3A31
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB23_98
# %bb.96:                               #   in Loop: Header=BB23_90 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$67, %ax
	cmpw	$14962, %ax             # imm = 0x3A72
	jne	.LBB23_143
# %bb.97:                               # %uncompressStream.split366
                                        #   in Loop: Header=BB23_90 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movw	$14962, BasicBlockSignatureTracker # imm = 0x3A72
	movw	$3399, RunTimeSignatureAdjuster # imm = 0xD47
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	$1, %esi
	callq	spec_fwrite
	movw	$14962, BasicBlockSignatureTracker # imm = 0x3A72
	movw	$3399, RunTimeSignatureAdjuster # imm = 0xD47
	movw	$14962, BasicBlockSignatureTracker # imm = 0x3A72
	movw	$67, RunTimeSignatureAdjuster
.LBB23_98:                              #   in Loop: Header=BB23_90 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$147, %ax
	xorw	%cx, %ax
	cmpw	$15010, %ax             # imm = 0x3AA2
	jne	.LBB23_143
# %bb.99:                               # %uncompressStream.split368
                                        #   in Loop: Header=BB23_90 Depth=1
	movw	$15010, BasicBlockSignatureTracker # imm = 0x3AA2
	movw	$853, RunTimeSignatureAdjuster # imm = 0x355
	jmp	.LBB23_90
.LBB23_100:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$143, %ax
	cmpw	$15011, %ax             # imm = 0x3AA3
	jne	.LBB23_147
# %bb.101:                              # %uncompressStream.split364
	movw	$15011, BasicBlockSignatureTracker # imm = 0x3AA3
	movw	$571, RunTimeSignatureAdjuster # imm = 0x23B
	jmp	.LBB23_64
.LBB23_102:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$815, %ax               # imm = 0x32F
	cmpw	$15044, %ax             # imm = 0x3AC4
	jne	.LBB23_147
# %bb.103:                              # %uncompressStream.split356
	movw	$15044, BasicBlockSignatureTracker # imm = 0x3AC4
	movw	$3158, RunTimeSignatureAdjuster # imm = 0xC56
.LBB23_104:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3165, %ax              # imm = 0xC5D
	xorw	%cx, %ax
	cmpw	$15055, %ax             # imm = 0x3ACF
	jne	.LBB23_147
# %bb.105:                              # %uncompressStream.split276
	movq	(%r15), %rsi
	movw	$15055, BasicBlockSignatureTracker(%rip) # imm = 0x3ACF
	movw	$3388, RunTimeSignatureAdjuster(%rip) # imm = 0xD3C
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	BZ2_bzReadClose
	movw	$15055, BasicBlockSignatureTracker(%rip) # imm = 0x3ACF
	movw	$3388, RunTimeSignatureAdjuster(%rip) # imm = 0xD3C
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$15055, BasicBlockSignatureTracker(%rip) # imm = 0x3ACF
	movw	$0, RunTimeSignatureAdjuster(%rip)
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB23_137
# %bb.106:                              # %uncompressStream.split276
	movq	.LJTI23_0(,%rax,8), %rax
	jmpq	*%rax
.LBB23_107:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$478, %ax               # imm = 0x1DE
	cmpw	$15121, %ax             # imm = 0x3B11
	jne	.LBB23_147
# %bb.108:                              # %uncompressStream.split372
	movw	$15121, BasicBlockSignatureTracker # imm = 0x3B11
	movw	$2906, RunTimeSignatureAdjuster # imm = 0xB5A
	callq	configError
	movw	$15121, BasicBlockSignatureTracker # imm = 0x3B11
	movw	$2906, RunTimeSignatureAdjuster # imm = 0xB5A
	movw	$15121, BasicBlockSignatureTracker # imm = 0x3B11
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB23_139
.LBB23_109:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$473, %ax               # imm = 0x1D9
	cmpw	$15126, %ax             # imm = 0x3B16
	jne	.LBB23_147
# %bb.110:                              # %uncompressStream.split374
	movw	$15126, BasicBlockSignatureTracker # imm = 0x3B16
	movw	$976, RunTimeSignatureAdjuster # imm = 0x3D0
.LBB23_111:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1000, %ax              # imm = 0x3E8
	xorw	%cx, %ax
	cmpw	$15150, %ax             # imm = 0x3B2E
	jne	.LBB23_147
# %bb.112:                              # %uncompressStream.split334
	movw	$15150, BasicBlockSignatureTracker # imm = 0x3B2E
	movw	$2977, RunTimeSignatureAdjuster # imm = 0xBA1
	callq	ioError
	movw	$15150, BasicBlockSignatureTracker # imm = 0x3B2E
	movw	$2977, RunTimeSignatureAdjuster # imm = 0xBA1
	movw	$15150, BasicBlockSignatureTracker # imm = 0x3B2E
	movw	$63, RunTimeSignatureAdjuster
	jmp	.LBB23_139
.LBB23_113:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$394, %ax               # imm = 0x18A
	cmpw	$15173, %ax             # imm = 0x3B45
	jne	.LBB23_147
# %bb.114:                              # %uncompressStream.split376
	movw	$15173, BasicBlockSignatureTracker # imm = 0x3B45
	movw	$0, RunTimeSignatureAdjuster
	callq	crcError
	movw	$15173, BasicBlockSignatureTracker # imm = 0x3B45
	movw	$394, RunTimeSignatureAdjuster # imm = 0x18A
	movw	$15173, BasicBlockSignatureTracker # imm = 0x3B45
	movw	$394, RunTimeSignatureAdjuster # imm = 0x18A
.LBB23_115:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$392, %ax               # imm = 0x188
	xorw	%cx, %ax
	cmpw	$15175, %ax             # imm = 0x3B47
	jne	.LBB23_147
# %bb.116:                              # %uncompressStream.split378
	movw	$15175, BasicBlockSignatureTracker # imm = 0x3B47
	movw	$2859, RunTimeSignatureAdjuster # imm = 0xB2B
	callq	outOfMemory
	movw	$15175, BasicBlockSignatureTracker # imm = 0x3B47
	movw	$2859, RunTimeSignatureAdjuster # imm = 0xB2B
	movw	$15175, BasicBlockSignatureTracker # imm = 0x3B47
	movw	$392, RunTimeSignatureAdjuster # imm = 0x188
.LBB23_117:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$447, %ax               # imm = 0x1BF
	xorw	%cx, %ax
	cmpw	$15216, %ax             # imm = 0x3B70
	jne	.LBB23_147
# %bb.118:                              # %uncompressStream.split380
	movw	$15216, BasicBlockSignatureTracker # imm = 0x3B70
	movw	$0, RunTimeSignatureAdjuster
	callq	compressedStreamEOF
	movw	$15216, BasicBlockSignatureTracker # imm = 0x3B70
	movw	$447, RunTimeSignatureAdjuster # imm = 0x1BF
	movw	$15216, BasicBlockSignatureTracker # imm = 0x3B70
	movw	$447, RunTimeSignatureAdjuster # imm = 0x1BF
.LBB23_119:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$328, %ax               # imm = 0x148
	xorw	%cx, %ax
	cmpw	$15239, %ax             # imm = 0x3B87
	jne	.LBB23_147
# %bb.120:                              # %uncompressStream.split382
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$15239, BasicBlockSignatureTracker # imm = 0x3B87
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB23_123
# %bb.121:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$15242, %ax             # imm = 0x3B8A
	jne	.LBB23_147
# %bb.122:                              # %uncompressStream.split386
	movw	$15242, BasicBlockSignatureTracker # imm = 0x3B8A
	movw	$13, RunTimeSignatureAdjuster
.LBB23_123:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$15267, %ax             # imm = 0x3BA3
	jne	.LBB23_147
# %bb.124:                              # %uncompressStream.split388
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$15267, BasicBlockSignatureTracker # imm = 0x3BA3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB23_127
# %bb.125:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$15277, %ax             # imm = 0x3BAD
	jne	.LBB23_147
# %bb.126:                              # %uncompressStream.split390
	movw	$15277, BasicBlockSignatureTracker # imm = 0x3BAD
	movw	$14, RunTimeSignatureAdjuster
.LBB23_127:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26, %ax
	xorw	%cx, %ax
	cmpw	$15289, %ax             # imm = 0x3BB9
	jne	.LBB23_147
# %bb.128:                              # %uncompressStream.split392
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$15289, BasicBlockSignatureTracker # imm = 0x3BB9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB23_131
# %bb.129:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$15304, %ax             # imm = 0x3BC8
	jne	.LBB23_147
# %bb.130:                              # %uncompressStream.split394
	movq	-80(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movw	$15304, BasicBlockSignatureTracker # imm = 0x3BC8
	movw	$533, RunTimeSignatureAdjuster # imm = 0x215
	jmp	.LBB23_141
.LBB23_131:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$91, %ax
	cmpw	$15330, %ax             # imm = 0x3BE2
	jne	.LBB23_147
# %bb.132:                              # %uncompressStream.split396
	movb	noisy, %al
	movw	$15330, BasicBlockSignatureTracker # imm = 0x3BE2
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB23_135
# %bb.133:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$15340, %ax             # imm = 0x3BEC
	jne	.LBB23_147
# %bb.134:                              # %uncompressStream.split398
	movabsq	$.L.str.7.16, %rsi
	movabsq	$inName, %rcx
	movq	stderr, %rdi
	movq	progName, %rdx
	movb	$0, %al
	callq	fprintf
	movw	$15340, BasicBlockSignatureTracker # imm = 0x3BEC
	movw	$14, RunTimeSignatureAdjuster
.LBB23_135:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$23, %ax
	xorw	%cx, %ax
	cmpw	$15349, %ax             # imm = 0x3BF5
	jne	.LBB23_147
# %bb.136:                              # %uncompressStream.split400
	movq	-80(%rbp), %rax         # 8-byte Reload
	movb	$1, (%rax)
	movw	$15349, BasicBlockSignatureTracker # imm = 0x3BF5
	movw	$552, RunTimeSignatureAdjuster # imm = 0x228
	jmp	.LBB23_141
.LBB23_137:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1742, %ax              # imm = 0x6CE
	cmpw	$15361, %ax             # imm = 0x3C01
	jne	.LBB23_147
# %bb.138:                              # %uncompressStream.split370
	movabsq	$.L.str.8.17, %rdi
	movw	$15361, BasicBlockSignatureTracker # imm = 0x3C01
	movw	$3219, RunTimeSignatureAdjuster # imm = 0xC93
	callq	panic
	movw	$15361, BasicBlockSignatureTracker # imm = 0x3C01
	movw	$3219, RunTimeSignatureAdjuster # imm = 0xC93
	movw	$15361, BasicBlockSignatureTracker # imm = 0x3C01
	movw	$1808, RunTimeSignatureAdjuster # imm = 0x710
.LBB23_139:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1825, %ax              # imm = 0x721
	xorw	%cx, %ax
	cmpw	$15408, %ax             # imm = 0x3C30
	jne	.LBB23_147
# %bb.140:                              # %uncompressStream.split384
	movabsq	$.L.str.9.18, %rdi
	movw	$15408, BasicBlockSignatureTracker # imm = 0x3C30
	movw	$3234, RunTimeSignatureAdjuster # imm = 0xCA2
	callq	panic
	movw	$15408, BasicBlockSignatureTracker # imm = 0x3C30
	movw	$3234, RunTimeSignatureAdjuster # imm = 0xCA2
	movq	-80(%rbp), %rax         # 8-byte Reload
	movb	$1, (%rax)
	movw	$15408, BasicBlockSignatureTracker # imm = 0x3C30
	movw	$1517, RunTimeSignatureAdjuster # imm = 0x5ED
.LBB23_141:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1425, %ax              # imm = 0x591
	xorw	%cx, %ax
	cmpw	$15436, %ax             # imm = 0x3C4C
	jne	.LBB23_147
# %bb.142:                              # %uncompressStream.split352
	movq	-80(%rbp), %rax         # 8-byte Reload
	movb	(%rax), %al
	movw	$15436, BasicBlockSignatureTracker # imm = 0x3C4C
	movw	$-15890, RunTimeSignatureAdjuster # imm = 0xC1EE
	movzbl	%al, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB23_143:                             # %CFerrorHandler.uncompressStream.loopexit
	jmp	.LBB23_147
.LBB23_144:                             # %CFerrorHandler.uncompressStream.loopexit1
	jmp	.LBB23_147
.LBB23_145:                             # %CFerrorHandler.uncompressStream.loopexit2
	jmp	.LBB23_147
.LBB23_146:                             # %CFerrorHandler.uncompressStream.loopexit3
	jmp	.LBB23_147
.LBB23_147:                             # %CFerrorHandler.uncompressStream
	callq	FAULT_DETECTED_CFC
.Lfunc_end23:
	.size	uncompressStream, .Lfunc_end23-uncompressStream
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI23_0:
	.quad	.LBB23_107
	.quad	.LBB23_137
	.quad	.LBB23_117
	.quad	.LBB23_109
	.quad	.LBB23_119
	.quad	.LBB23_113
	.quad	.LBB23_115
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function crcError
	.type	crcError,@function
crcError:                               # @crcError
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1812, %ax              # imm = 0x714
	xorw	%cx, %ax
	cmpw	$15441, %ax             # imm = 0x3C51
	jne	.LBB24_2
# %bb.1:                                # %crcError.split
	movabsq	$.L.str.12, %rsi
	movq	stderr, %rdi
	movq	progName, %rdx
	movb	$0, %al
	callq	fprintf
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$3865, RunTimeSignatureAdjuster # imm = 0xF19
	callq	showFileNames
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$3865, RunTimeSignatureAdjuster # imm = 0xF19
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$0, RunTimeSignatureAdjuster
	callq	cadvise
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$3865, RunTimeSignatureAdjuster # imm = 0xF19
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$3865, RunTimeSignatureAdjuster # imm = 0xF19
	movl	$2, %edi
	callq	cleanUpAndFail
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$3865, RunTimeSignatureAdjuster # imm = 0xF19
	movw	$15441, BasicBlockSignatureTracker # imm = 0x3C51
	movw	$1694, RunTimeSignatureAdjuster # imm = 0x69E
	popq	%rbp
	retq
.LBB24_2:                               # %CFerrorHandler.crcError
	callq	FAULT_DETECTED_CFC
.Lfunc_end24:
	.size	crcError, .Lfunc_end24-crcError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compressedStreamEOF
	.type	compressedStreamEOF,@function
compressedStreamEOF:                    # @compressedStreamEOF
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2040, %ax              # imm = 0x7F8
	xorw	%cx, %ax
	cmpw	$15496, %ax             # imm = 0x3C88
	jne	.LBB25_6
# %bb.1:                                # %compressedStreamEOF.split
	movb	noisy, %al
	movw	$15496, BasicBlockSignatureTracker # imm = 0x3C88
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB25_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$15497, %ax             # imm = 0x3C89
	jne	.LBB25_6
# %bb.3:                                # %compressedStreamEOF.split11
	movabsq	$.L.str.14, %rsi
	movq	stderr, %rdi
	movq	progName, %rdx
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	perror
	movw	$15497, BasicBlockSignatureTracker # imm = 0x3C89
	movw	$4033, RunTimeSignatureAdjuster # imm = 0xFC1
	callq	showFileNames
	movw	$15497, BasicBlockSignatureTracker # imm = 0x3C89
	movw	$4033, RunTimeSignatureAdjuster # imm = 0xFC1
	movw	$15497, BasicBlockSignatureTracker # imm = 0x3C89
	movw	$216, RunTimeSignatureAdjuster
	callq	cadvise
	movw	$15497, BasicBlockSignatureTracker # imm = 0x3C89
	movw	$216, RunTimeSignatureAdjuster
	movw	$15497, BasicBlockSignatureTracker # imm = 0x3C89
	movw	$1, RunTimeSignatureAdjuster
.LBB25_4:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$15513, %ax             # imm = 0x3C99
	jne	.LBB25_6
# %bb.5:                                # %compressedStreamEOF.split13
	movw	$15513, BasicBlockSignatureTracker # imm = 0x3C99
	movw	$4049, RunTimeSignatureAdjuster # imm = 0xFD1
	movl	$2, %edi
	callq	cleanUpAndFail
	movw	$15513, BasicBlockSignatureTracker # imm = 0x3C99
	movw	$4049, RunTimeSignatureAdjuster # imm = 0xFD1
	movw	$15513, BasicBlockSignatureTracker # imm = 0x3C99
	movw	$1622, RunTimeSignatureAdjuster # imm = 0x656
	popq	%rbp
	retq
.LBB25_6:                               # %CFerrorHandler.compressedStreamEOF
	callq	FAULT_DETECTED_CFC
.Lfunc_end25:
	.size	compressedStreamEOF, .Lfunc_end25-compressedStreamEOF
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cadvise
	.type	cadvise,@function
cadvise:                                # @cadvise
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$131, %ax
	xorw	%cx, %ax
	cmpw	$15570, %ax             # imm = 0x3CD2
	jne	.LBB26_7
# %bb.1:                                # %cadvise.split16
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$131, %ax
	xorw	%cx, %ax
	cmpw	$15570, %ax             # imm = 0x3CD2
	jne	.LBB26_7
# %bb.2:                                # %cadvise.split
	movb	noisy, %al
	movw	$15570, BasicBlockSignatureTracker # imm = 0x3CD2
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB26_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$479, %ax               # imm = 0x1DF
	cmpw	$15629, %ax             # imm = 0x3D0D
	jne	.LBB26_7
# %bb.4:                                # %cadvise.split18
	movabsq	$.L.str.13, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$15629, BasicBlockSignatureTracker # imm = 0x3D0D
	movw	$479, RunTimeSignatureAdjuster # imm = 0x1DF
.LBB26_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$433, %ax               # imm = 0x1B1
	xorw	%cx, %ax
	cmpw	$15715, %ax             # imm = 0x3D63
	jne	.LBB26_7
# %bb.6:                                # %cadvise.split20
	movw	$15715, BasicBlockSignatureTracker # imm = 0x3D63
	movw	$1574, RunTimeSignatureAdjuster # imm = 0x626
	popq	%rbp
	retq
.LBB26_7:                               # %CFerrorHandler.cadvise
	callq	FAULT_DETECTED_CFC
.Lfunc_end26:
	.size	cadvise, .Lfunc_end26-cadvise
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bz__AssertH__fail   # -- Begin function BZ2_bz__AssertH__fail
	.p2align	4, 0x90
	.type	BZ2_bz__AssertH__fail,@function
BZ2_bz__AssertH__fail:                  # @BZ2_bz__AssertH__fail
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.1:                                # %BZ2_bz__AssertH__fail.split132
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.2:                                # %BZ2_bz__AssertH__fail.split130
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.3:                                # %BZ2_bz__AssertH__fail.split128
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.4:                                # %BZ2_bz__AssertH__fail.split126
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.5:                                # %BZ2_bz__AssertH__fail.split124
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.6:                                # %BZ2_bz__AssertH__fail.split122
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.7:                                # %BZ2_bz__AssertH__fail.split120
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.8:                                # %BZ2_bz__AssertH__fail.split118
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.9:                                # %BZ2_bz__AssertH__fail.split116
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.10:                               # %BZ2_bz__AssertH__fail.split114
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.11:                               # %BZ2_bz__AssertH__fail.split112
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.12:                               # %BZ2_bz__AssertH__fail.split106
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.13:                               # %BZ2_bz__AssertH__fail.split104
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.14:                               # %BZ2_bz__AssertH__fail.split102
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.15:                               # %BZ2_bz__AssertH__fail.split100
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.16:                               # %BZ2_bz__AssertH__fail.split98
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.17:                               # %BZ2_bz__AssertH__fail.split96
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16361, %ax             # imm = 0x3FE9
	xorw	%cx, %ax
	cmpw	$15790, %ax             # imm = 0x3DAE
	jne	.LBB27_23
# %bb.18:                               # %BZ2_bz__AssertH__fail.split
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movl	%edi, (%rbx)
	movq	stderr, %r15
	movl	(%rbx), %r14d
	movw	$15790, BasicBlockSignatureTracker # imm = 0x3DAE
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_bzlibVersion
	movabsq	$.L.str.21, %rsi
	movw	$15790, BasicBlockSignatureTracker # imm = 0x3DAE
	movw	$0, RunTimeSignatureAdjuster
	movq	%r15, %rdi
	movl	%r14d, %edx
	movq	%rax, %rcx
	movb	$0, %al
	callq	fprintf
	movl	(%rbx), %eax
	movw	$15790, BasicBlockSignatureTracker # imm = 0x3DAE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1007, %eax             # imm = 0x3EF
	jne	.LBB27_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$15793, %ax             # imm = 0x3DB1
	jne	.LBB27_23
# %bb.20:                               # %BZ2_bz__AssertH__fail.split108
	movabsq	$.L.str.1.22, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$15793, BasicBlockSignatureTracker # imm = 0x3DB1
	movw	$31, RunTimeSignatureAdjuster
.LBB27_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$98, %ax
	xorw	%cx, %ax
	cmpw	$15820, %ax             # imm = 0x3DCC
	jne	.LBB27_23
# %bb.22:                               # %BZ2_bz__AssertH__fail.split110
	xorl	%edi, %edi
	callq	exit
	movw	$15820, BasicBlockSignatureTracker # imm = 0x3DCC
	movw	$0, RunTimeSignatureAdjuster
.LBB27_23:                              # %CFerrorHandler.BZ2_bz__AssertH__fail
	callq	FAULT_DETECTED_CFC
.Lfunc_end27:
	.size	BZ2_bz__AssertH__fail, .Lfunc_end27-BZ2_bz__AssertH__fail
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzlibVersion        # -- Begin function BZ2_bzlibVersion
	.p2align	4, 0x90
	.type	BZ2_bzlibVersion,@function
BZ2_bzlibVersion:                       # @BZ2_bzlibVersion
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$901, %ax               # imm = 0x385
	xorw	%cx, %ax
	cmpw	$15915, %ax             # imm = 0x3E2B
	jne	.LBB28_2
# %bb.1:                                # %BZ2_bzlibVersion.split
	movabsq	$.L.str.5.23, %rax
	movw	$15915, BasicBlockSignatureTracker # imm = 0x3E2B
	movw	$15468, RunTimeSignatureAdjuster # imm = 0x3C6C
	popq	%rbp
	retq
.LBB28_2:                               # %CFerrorHandler.BZ2_bzlibVersion
	callq	FAULT_DETECTED_CFC
.Lfunc_end28:
	.size	BZ2_bzlibVersion, .Lfunc_end28-BZ2_bzlibVersion
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit      # -- Begin function BZ2_bzCompressInit
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit,@function
BZ2_bzCompressInit:                     # @BZ2_bzCompressInit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$32463, %ax             # imm = 0x7ECF
	xorw	%bx, %ax
	cmpw	$15924, %ax             # imm = 0x3E34
	jne	.LBB29_73
# %bb.1:                                # %BZ2_bzCompressInit.split208
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$32463, %ax             # imm = 0x7ECF
	xorw	%bx, %ax
	cmpw	$15924, %ax             # imm = 0x3E34
	jne	.LBB29_73
# %bb.2:                                # %BZ2_bzCompressInit.split206
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rdi, (%r12)
	movl	%esi, (%rbx)
	movl	%edx, (%r13)
	movl	%ecx, (%r14)
	movw	$15924, BasicBlockSignatureTracker # imm = 0x3E34
	movw	$0, RunTimeSignatureAdjuster
	callq	bz_config_ok
	movw	$15924, BasicBlockSignatureTracker # imm = 0x3E34
	movw	$0, RunTimeSignatureAdjuster
	movw	$15924, BasicBlockSignatureTracker # imm = 0x3E34
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB29_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$15937, %ax             # imm = 0x3E41
	jne	.LBB29_73
# %bb.4:                                # %BZ2_bzCompressInit.split150
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$-9, (%rax)
	movw	$15937, BasicBlockSignatureTracker # imm = 0x3E41
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB29_71
.LBB29_5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$15941, %ax             # imm = 0x3E45
	jne	.LBB29_73
# %bb.6:                                # %BZ2_bzCompressInit.split
	movq	(%r12), %rax
	movw	$15941, BasicBlockSignatureTracker # imm = 0x3E45
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_21
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$15962, %ax             # imm = 0x3E5A
	jne	.LBB29_73
# %bb.8:                                # %BZ2_bzCompressInit.split156
	movl	(%rbx), %eax
	movw	$15962, BasicBlockSignatureTracker # imm = 0x3E5A
	movw	$31, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB29_21
# %bb.9:                                # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-23945, %ax            # imm = 0xA277
	cmpw	$-25555, %ax            # imm = 0x9C2D
	jne	.LBB29_73
# %bb.10:                               # %BZ2_bzCompressInit.split158
	movw	$-25555, BasicBlockSignatureTracker # imm = 0x9C2D
	movw	$-23945, RunTimeSignatureAdjuster # imm = 0xA277
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4, %ax
	xorw	%cx, %ax
	cmpw	$15966, %ax             # imm = 0x3E5E
	jne	.LBB29_73
# %bb.12:                               # %BZ2_bzCompressInit.split210
	movl	(%rbx), %eax
	movw	$15966, BasicBlockSignatureTracker # imm = 0x3E5E
	movw	$27, RunTimeSignatureAdjuster
	cmpl	$9, %eax
	jg	.LBB29_21
# %bb.13:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-26920, %ax            # imm = 0x96D8
	cmpw	$-22394, %ax            # imm = 0xA886
	jne	.LBB29_73
# %bb.14:                               # %BZ2_bzCompressInit.split160
	movw	$-22394, BasicBlockSignatureTracker # imm = 0xA886
	movw	$-26920, RunTimeSignatureAdjuster # imm = 0x96D8
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$56, %ax
	xorw	%cx, %ax
	cmpw	$15974, %ax             # imm = 0x3E66
	jne	.LBB29_73
# %bb.16:                               # %BZ2_bzCompressInit.split212
	movl	(%r14), %eax
	movw	$15974, BasicBlockSignatureTracker # imm = 0x3E66
	movw	$35, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB29_21
# %bb.17:                               # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-1620, %ax             # imm = 0xF9AC
	cmpw	$-14390, %ax            # imm = 0xC7CA
	jne	.LBB29_73
# %bb.18:                               # %BZ2_bzCompressInit.split162
	movw	$-14390, BasicBlockSignatureTracker # imm = 0xC7CA
	movw	$-1620, RunTimeSignatureAdjuster # imm = 0xF9AC
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$254, %ax
	xorw	%cx, %ax
	cmpw	$16024, %ax             # imm = 0x3E98
	jne	.LBB29_73
# %bb.20:                               # %BZ2_bzCompressInit.split214
	movl	(%r14), %eax
	movw	$16024, BasicBlockSignatureTracker # imm = 0x3E98
	movw	$221, RunTimeSignatureAdjuster
	cmpl	$250, %eax
	jle	.LBB29_23
.LBB29_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$225, %ax
	xorw	%cx, %ax
	cmpw	$16036, %ax             # imm = 0x3EA4
	jne	.LBB29_73
# %bb.22:                               # %BZ2_bzCompressInit.split154
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movw	$16036, BasicBlockSignatureTracker # imm = 0x3EA4
	movw	$229, RunTimeSignatureAdjuster
	jmp	.LBB29_71
.LBB29_23:                              # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-17775, %ax            # imm = 0xBA91
	cmpw	$-31735, %ax            # imm = 0x8409
	jne	.LBB29_73
# %bb.24:                               # %BZ2_bzCompressInit.split164
	movw	$-31735, BasicBlockSignatureTracker # imm = 0x8409
	movw	$-17775, RunTimeSignatureAdjuster # imm = 0xBA91
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$16041, %ax             # imm = 0x3EA9
	jne	.LBB29_73
# %bb.26:                               # %BZ2_bzCompressInit.split216
	movl	(%r14), %eax
	movw	$16041, BasicBlockSignatureTracker # imm = 0x3EA9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB29_29
# %bb.27:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$82, %ax
	cmpw	$16123, %ax             # imm = 0x3EFB
	jne	.LBB29_73
# %bb.28:                               # %BZ2_bzCompressInit.split166
	movl	$30, (%r14)
	movw	$16123, BasicBlockSignatureTracker # imm = 0x3EFB
	movw	$82, RunTimeSignatureAdjuster
.LBB29_29:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$439, %ax               # imm = 0x1B7
	xorw	%cx, %ax
	cmpw	$16158, %ax             # imm = 0x3F1E
	jne	.LBB29_73
# %bb.30:                               # %BZ2_bzCompressInit.split168
	movq	(%r12), %rax
	movq	56(%rax), %rax
	movw	$16158, BasicBlockSignatureTracker # imm = 0x3F1E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB29_33
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$124, %ax
	cmpw	$16226, %ax             # imm = 0x3F62
	jne	.LBB29_73
# %bb.32:                               # %BZ2_bzCompressInit.split170
	movabsq	$default_bzalloc, %rax
	movq	(%r12), %rcx
	movq	%rax, 56(%rcx)
	movw	$16226, BasicBlockSignatureTracker # imm = 0x3F62
	movw	$124, RunTimeSignatureAdjuster
.LBB29_33:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$121, %ax
	xorw	%cx, %ax
	cmpw	$16231, %ax             # imm = 0x3F67
	jne	.LBB29_73
# %bb.34:                               # %BZ2_bzCompressInit.split172
	movq	(%r12), %rax
	movq	64(%rax), %rax
	movw	$16231, BasicBlockSignatureTracker # imm = 0x3F67
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB29_37
# %bb.35:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$16234, %ax             # imm = 0x3F6A
	jne	.LBB29_73
# %bb.36:                               # %BZ2_bzCompressInit.split174
	movabsq	$default_bzfree, %rax
	movq	(%r12), %rcx
	movq	%rax, 64(%rcx)
	movw	$16234, BasicBlockSignatureTracker # imm = 0x3F6A
	movw	$13, RunTimeSignatureAdjuster
.LBB29_37:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$16249, %ax             # imm = 0x3F79
	jne	.LBB29_73
# %bb.38:                               # %BZ2_bzCompressInit.split176
	movq	(%r12), %rax
	movq	56(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rcx), %rax
	movw	$16249, BasicBlockSignatureTracker # imm = 0x3F79
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB29_41
# %bb.39:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$247, %ax
	cmpw	$16270, %ax             # imm = 0x3F8E
	jne	.LBB29_73
# %bb.40:                               # %BZ2_bzCompressInit.split178
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$-3, (%rax)
	movw	$16270, BasicBlockSignatureTracker # imm = 0x3F8E
	movw	$463, RunTimeSignatureAdjuster # imm = 0x1CF
	jmp	.LBB29_71
.LBB29_41:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$228, %ax
	cmpw	$16285, %ax             # imm = 0x3F9D
	jne	.LBB29_73
# %bb.42:                               # %BZ2_bzCompressInit.split180
	movq	(%r12), %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rcx
	movq	%rax, (%rcx)
	movq	(%rdx), %rax
	movq	$0, 24(%rax)
	movq	(%rdx), %rax
	movq	$0, 32(%rax)
	movq	(%rdx), %rax
	movq	$0, 40(%rax)
	imull	$100000, (%rbx), %eax   # imm = 0x186A0
	movl	%eax, (%r15)
	movq	(%r12), %rax
	movq	56(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movslq	(%r15), %rsi
	shlq	$2, %rsi
                                        # kill: def %esi killed %esi killed %rsi
	movl	$1, %edx
	callq	*%rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movq	(%r12), %rax
	movq	56(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movl	(%r15), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def %esi killed %esi killed %rsi
	movl	$1, %edx
	callq	*%rax
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rcx
	movq	%rax, 32(%rcx)
	movq	(%r12), %rax
	movq	56(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	%r15, %rdx
	movq	(%rdx), %rcx
	movq	%rax, 40(%rcx)
	movq	(%rdx), %rax
	movq	24(%rax), %rax
	movw	$16285, BasicBlockSignatureTracker # imm = 0x3F9D
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_49
# %bb.43:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$16307, %ax             # imm = 0x3FB3
	jne	.LBB29_73
# %bb.44:                               # %BZ2_bzCompressInit.split184
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movw	$16307, BasicBlockSignatureTracker # imm = 0x3FB3
	movw	$46, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_49
# %bb.45:                               # %Buffer__4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-265, %ax              # imm = 0xFEF7
	cmpw	$-16060, %ax            # imm = 0xC144
	jne	.LBB29_73
# %bb.46:                               # %BZ2_bzCompressInit.split186
	movw	$-16060, BasicBlockSignatureTracker # imm = 0xC144
	movw	$-265, RunTimeSignatureAdjuster # imm = 0xFEF7
# %bb.47:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4, %ax
	xorw	%cx, %ax
	cmpw	$16311, %ax             # imm = 0x3FB7
	jne	.LBB29_73
# %bb.48:                               # %BZ2_bzCompressInit.split218
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movw	$16311, BasicBlockSignatureTracker # imm = 0x3FB7
	movw	$42, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB29_67
.LBB29_49:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$87, %ax
	xorw	%cx, %ax
	cmpw	$16330, %ax             # imm = 0x3FCA
	jne	.LBB29_73
# %bb.50:                               # %BZ2_bzCompressInit.split182
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movw	$16330, BasicBlockSignatureTracker # imm = 0x3FCA
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_53
# %bb.51:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$16339, %ax             # imm = 0x3FD3
	jne	.LBB29_73
# %bb.52:                               # %BZ2_bzCompressInit.split190
	movq	(%r12), %rax
	movq	64(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
	movw	$16339, BasicBlockSignatureTracker # imm = 0x3FD3
	movw	$25, RunTimeSignatureAdjuster
.LBB29_53:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$16355, %ax             # imm = 0x3FE3
	jne	.LBB29_73
# %bb.54:                               # %BZ2_bzCompressInit.split192
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movw	$16355, BasicBlockSignatureTracker # imm = 0x3FE3
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_57
# %bb.55:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$16358, %ax             # imm = 0x3FE6
	jne	.LBB29_73
# %bb.56:                               # %BZ2_bzCompressInit.split194
	movq	(%r12), %rax
	movq	64(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
	movw	$16358, BasicBlockSignatureTracker # imm = 0x3FE6
	movw	$5, RunTimeSignatureAdjuster
.LBB29_57:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32706, %ax             # imm = 0x7FC2
	xorw	%cx, %ax
	cmpw	$16417, %ax             # imm = 0x4021
	jne	.LBB29_73
# %bb.58:                               # %BZ2_bzCompressInit.split196
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movw	$16417, BasicBlockSignatureTracker # imm = 0x4021
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_61
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$16426, %ax             # imm = 0x402A
	jne	.LBB29_73
# %bb.60:                               # %BZ2_bzCompressInit.split198
	movq	(%r12), %rax
	movq	64(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
	movw	$16426, BasicBlockSignatureTracker # imm = 0x402A
	movw	$11, RunTimeSignatureAdjuster
.LBB29_61:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$104, %ax
	xorw	%cx, %ax
	cmpw	$16457, %ax             # imm = 0x4049
	jne	.LBB29_73
# %bb.62:                               # %BZ2_bzCompressInit.split200
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movw	$16457, BasicBlockSignatureTracker # imm = 0x4049
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB29_65
# %bb.63:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$16487, %ax             # imm = 0x4067
	jne	.LBB29_73
# %bb.64:                               # %BZ2_bzCompressInit.split202
	movq	(%r12), %rax
	movq	64(%rax), %rax
	movq	(%r12), %rcx
	movq	72(%rcx), %rdi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rsi
	callq	*%rax
	movw	$16487, BasicBlockSignatureTracker # imm = 0x4067
	movw	$46, RunTimeSignatureAdjuster
.LBB29_65:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$193, %ax
	xorw	%cx, %ax
	cmpw	$16520, %ax             # imm = 0x4088
	jne	.LBB29_73
# %bb.66:                               # %BZ2_bzCompressInit.split204
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$-3, (%rax)
	movw	$16520, BasicBlockSignatureTracker # imm = 0x4088
	movw	$32457, RunTimeSignatureAdjuster # imm = 0x7EC9
	jmp	.LBB29_71
.LBB29_67:                              # %Buffer__5
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-14500, %ax            # imm = 0xC75C
	cmpw	$-1813, %ax             # imm = 0xF8EB
	jne	.LBB29_73
# %bb.68:                               # %BZ2_bzCompressInit.split188
	movw	$-1813, BasicBlockSignatureTracker # imm = 0xF8EB
	movw	$-14500, RunTimeSignatureAdjuster # imm = 0xC75C
# %bb.69:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32546, %ax             # imm = 0x7F22
	xorw	%cx, %ax
	cmpw	$16533, %ax             # imm = 0x4095
	jne	.LBB29_73
# %bb.70:                               # %BZ2_bzCompressInit.split220
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movl	$0, 660(%rax)
	movq	(%r15), %rax
	movl	$2, 12(%rax)
	movq	(%r15), %rax
	movl	$2, 8(%rax)
	movq	(%r15), %rax
	movl	$0, 652(%rax)
	movl	(%rbx), %eax
	movq	(%r15), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, (%rbx), %eax   # imm = 0x186A0
	subl	$19, %eax
	movq	(%r15), %rcx
	movl	%eax, 112(%rcx)
	movl	(%r13), %eax
	movq	(%r15), %rcx
	movl	%eax, 656(%rcx)
	movl	(%r14), %eax
	movq	(%r15), %rcx
	movl	%eax, 88(%rcx)
	movq	(%r15), %rax
	movq	32(%rax), %rax
	movq	(%r15), %rcx
	movq	%rax, 64(%rcx)
	movq	(%r15), %rax
	movq	24(%rax), %rax
	movq	(%r15), %rcx
	movq	%rax, 72(%rcx)
	movq	(%r15), %rax
	movq	$0, 80(%rax)
	movq	(%r15), %rax
	movq	24(%rax), %rax
	movq	(%r15), %rcx
	movq	%rax, 56(%rcx)
	movq	(%r15), %rax
	movq	(%r12), %rcx
	movq	%rax, 48(%rcx)
	movq	(%r12), %rax
	movl	$0, 12(%rax)
	movq	(%r12), %rax
	movl	$0, 16(%rax)
	movq	(%r12), %rax
	movl	$0, 36(%rax)
	movq	(%r12), %rax
	movl	$0, 40(%rax)
	movq	(%r15), %rdi
	movw	$16533, BasicBlockSignatureTracker # imm = 0x4095
	movw	$0, RunTimeSignatureAdjuster
	callq	init_RL
	movw	$16533, BasicBlockSignatureTracker # imm = 0x4095
	movw	$32468, RunTimeSignatureAdjuster # imm = 0x7ED4
	movq	(%r15), %rdi
	movw	$16533, BasicBlockSignatureTracker # imm = 0x4095
	movw	$0, RunTimeSignatureAdjuster
	callq	prepare_new_block
	movw	$16533, BasicBlockSignatureTracker # imm = 0x4095
	movw	$32468, RunTimeSignatureAdjuster # imm = 0x7ED4
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$16533, BasicBlockSignatureTracker # imm = 0x4095
	movw	$32468, RunTimeSignatureAdjuster # imm = 0x7ED4
.LBB29_71:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32402, %ax             # imm = 0x7E92
	xorw	%cx, %ax
	cmpw	$16595, %ax             # imm = 0x40D3
	jne	.LBB29_73
# %bb.72:                               # %BZ2_bzCompressInit.split152
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$16595, BasicBlockSignatureTracker # imm = 0x40D3
	movw	$9758, RunTimeSignatureAdjuster # imm = 0x261E
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB29_73:                              # %CFerrorHandler.BZ2_bzCompressInit
	callq	FAULT_DETECTED_CFC
.Lfunc_end29:
	.size	BZ2_bzCompressInit, .Lfunc_end29-BZ2_bzCompressInit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bz_config_ok
	.type	bz_config_ok,@function
bz_config_ok:                           # @bz_config_ok
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32463, %ax             # imm = 0x7ECF
	xorw	%cx, %ax
	cmpw	$16635, %ax             # imm = 0x40FB
	jne	.LBB30_3
# %bb.1:                                # %bz_config_ok.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32463, %ax             # imm = 0x7ECF
	xorw	%cx, %ax
	cmpw	$16635, %ax             # imm = 0x40FB
	jne	.LBB30_3
# %bb.2:                                # %bz_config_ok.split
	movw	$16635, BasicBlockSignatureTracker # imm = 0x40FB
	movw	$0, RunTimeSignatureAdjuster
	movl	$1, %eax
	popq	%rbp
	retq
.LBB30_3:                               # %CFerrorHandler.bz_config_ok
	callq	FAULT_DETECTED_CFC
.Lfunc_end30:
	.size	bz_config_ok, .Lfunc_end30-bz_config_ok
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc
	.type	default_bzalloc,@function
default_bzalloc:                        # @default_bzalloc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movw	$16675, BasicBlockSignatureTracker # imm = 0x4123
	movw	$0, RunTimeSignatureAdjuster
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end31:
	.size	default_bzalloc, .Lfunc_end31-default_bzalloc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzfree
	.type	default_bzfree,@function
default_bzfree:                         # @default_bzfree
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rax
	movw	$16709, BasicBlockSignatureTracker # imm = 0x4145
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB32_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$16716, %ax             # imm = 0x414C
	jne	.LBB32_5
# %bb.2:                                # %default_bzfree.split
	movq	-8(%rbp), %rdi
	callq	free
	movw	$16716, BasicBlockSignatureTracker # imm = 0x414C
	movw	$9, RunTimeSignatureAdjuster
.LBB32_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$16729, %ax             # imm = 0x4159
	jne	.LBB32_5
# %bb.4:                                # %default_bzfree.split6
	movw	$16729, BasicBlockSignatureTracker # imm = 0x4159
	movw	$0, RunTimeSignatureAdjuster
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB32_5:                               # %CFerrorHandler.default_bzfree
	callq	FAULT_DETECTED_CFC
.Lfunc_end32:
	.size	default_bzfree, .Lfunc_end32-default_bzfree
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_RL
	.type	init_RL,@function
init_RL:                                # @init_RL
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$314, %ax               # imm = 0x13A
	xorw	%cx, %ax
	cmpw	$16815, %ax             # imm = 0x41AF
	jne	.LBB33_3
# %bb.1:                                # %init_RL.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$314, %ax               # imm = 0x13A
	xorw	%cx, %ax
	cmpw	$16815, %ax             # imm = 0x41AF
	jne	.LBB33_3
# %bb.2:                                # %init_RL.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rcx
	movl	$256, 92(%rcx)          # imm = 0x100
	movq	(%rax), %rax
	movl	$0, 96(%rax)
	movw	$16815, BasicBlockSignatureTracker # imm = 0x41AF
	movw	$32280, RunTimeSignatureAdjuster # imm = 0x7E18
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB33_3:                               # %CFerrorHandler.init_RL
	callq	FAULT_DETECTED_CFC
.Lfunc_end33:
	.size	init_RL, .Lfunc_end33-init_RL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function prepare_new_block
	.type	prepare_new_block,@function
prepare_new_block:                      # @prepare_new_block
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$333, %ax               # imm = 0x14D
	xorw	%cx, %ax
	cmpw	$16856, %ax             # imm = 0x41D8
	jne	.LBB34_12
# %bb.1:                                # %prepare_new_block.split30
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$333, %ax               # imm = 0x14D
	xorw	%cx, %ax
	cmpw	$16856, %ax             # imm = 0x41D8
	jne	.LBB34_12
# %bb.2:                                # %prepare_new_block.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rdx
	movl	$0, 108(%rdx)
	movq	(%rax), %rdx
	movl	$0, 116(%rdx)
	movq	(%rax), %rdx
	movl	$0, 120(%rdx)
	movq	(%rax), %rdx
	movl	$-1, 648(%rdx)
	movl	$0, (%rcx)
	movw	$16856, BasicBlockSignatureTracker # imm = 0x41D8
	movw	$0, RunTimeSignatureAdjuster
.LBB34_3:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$3, %dx
	xorw	%si, %dx
	cmpw	$16859, %dx             # imm = 0x41DB
	jne	.LBB34_11
# %bb.4:                                # %prepare_new_block.split22
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	(%rcx), %edx
	movw	$16859, BasicBlockSignatureTracker # imm = 0x41DB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %edx              # imm = 0x100
	jge	.LBB34_9
# %bb.5:                                #   in Loop: Header=BB34_3 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$41, %dx
	cmpw	$16882, %dx             # imm = 0x41F2
	jne	.LBB34_11
# %bb.6:                                # %prepare_new_block.split24
                                        #   in Loop: Header=BB34_3 Depth=1
	movq	(%rax), %rdx
	movslq	(%rcx), %rsi
	movb	$0, 128(%rdx,%rsi)
	movw	$16882, BasicBlockSignatureTracker # imm = 0x41F2
	movw	$0, RunTimeSignatureAdjuster
# %bb.7:                                #   in Loop: Header=BB34_3 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$1008, %dx              # imm = 0x3F0
	cmpw	$16898, %dx             # imm = 0x4202
	jne	.LBB34_11
# %bb.8:                                # %prepare_new_block.split28
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	(%rcx), %edx
	addl	$1, %edx
	movl	%edx, (%rcx)
	movw	$16898, BasicBlockSignatureTracker # imm = 0x4202
	movw	$986, RunTimeSignatureAdjuster # imm = 0x3DA
	jmp	.LBB34_3
.LBB34_9:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$979, %cx               # imm = 0x3D3
	cmpw	$16904, %cx             # imm = 0x4208
	jne	.LBB34_12
# %bb.10:                               # %prepare_new_block.split26
	movq	(%rax), %rax
	movl	660(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 660(%rax)
	movw	$16904, BasicBlockSignatureTracker # imm = 0x4208
	movw	$32191, RunTimeSignatureAdjuster # imm = 0x7DBF
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB34_11:                              # %CFerrorHandler.prepare_new_block.loopexit
	jmp	.LBB34_12
.LBB34_12:                              # %CFerrorHandler.prepare_new_block
	callq	FAULT_DETECTED_CFC
.Lfunc_end34:
	.size	prepare_new_block, .Lfunc_end34-prepare_new_block
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress          # -- Begin function BZ2_bzCompress
	.p2align	4, 0x90
	.type	BZ2_bzCompress,@function
BZ2_bzCompress:                         # @BZ2_bzCompress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10314, %ax             # imm = 0x284A
	xorw	%cx, %ax
	cmpw	$16976, %ax             # imm = 0x4250
	jne	.LBB35_89
# %bb.1:                                # %BZ2_bzCompress.split231
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10314, %ax             # imm = 0x284A
	xorw	%cx, %ax
	cmpw	$16976, %ax             # imm = 0x4250
	jne	.LBB35_89
# %bb.2:                                # %BZ2_bzCompress.split229
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10314, %ax             # imm = 0x284A
	xorw	%cx, %ax
	cmpw	$16976, %ax             # imm = 0x4250
	jne	.LBB35_89
# %bb.3:                                # %BZ2_bzCompress.split227
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%rax)
	movl	%esi, (%rcx)
	movq	(%rax), %rdx
	movw	$16976, BasicBlockSignatureTracker # imm = 0x4250
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rdx
	jne	.LBB35_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$243, %ax
	cmpw	$17059, %ax             # imm = 0x42A3
	jne	.LBB35_89
# %bb.5:                                # %BZ2_bzCompress.split
	movl	$-2, (%r14)
	movw	$17059, BasicBlockSignatureTracker # imm = 0x42A3
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB35_86
.LBB35_6:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$178, %dx
	cmpw	$17122, %dx             # imm = 0x42E2
	jne	.LBB35_89
# %bb.7:                                # %BZ2_bzCompress.split155
	movq	(%rax), %rdx
	movq	48(%rdx), %rdx
	movq	%rdx, (%r15)
	movq	(%r15), %rdx
	movw	$17122, BasicBlockSignatureTracker # imm = 0x42E2
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rdx
	jne	.LBB35_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$17132, %ax             # imm = 0x42EC
	jne	.LBB35_89
# %bb.9:                                # %BZ2_bzCompress.split159
	movl	$-2, (%r14)
	movw	$17132, BasicBlockSignatureTracker # imm = 0x42EC
	movw	$79, RunTimeSignatureAdjuster
	jmp	.LBB35_86
.LBB35_10:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$483, %dx               # imm = 0x1E3
	cmpw	$17153, %dx             # imm = 0x4301
	jne	.LBB35_89
# %bb.11:                               # %BZ2_bzCompress.split161
	movq	(%r15), %rdx
	movq	(%rdx), %rdx
	movq	(%rax), %rsi
	movw	$17153, BasicBlockSignatureTracker # imm = 0x4301
	movw	$0, RunTimeSignatureAdjuster
	cmpq	%rsi, %rdx
	je	.LBB35_14
# %bb.12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$32, %ax
	cmpw	$17185, %ax             # imm = 0x4321
	jne	.LBB35_89
# %bb.13:                               # %BZ2_bzCompress.split163
	movl	$-2, (%r14)
	movw	$17185, BasicBlockSignatureTracker # imm = 0x4321
	movw	$386, RunTimeSignatureAdjuster # imm = 0x182
	jmp	.LBB35_86
.LBB35_14:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$35, %dx
	cmpw	$17186, %dx             # imm = 0x4322
	jne	.LBB35_89
# %bb.15:                               # %BZ2_bzCompress.split165
	movw	$17186, BasicBlockSignatureTracker # imm = 0x4322
	movw	$0, RunTimeSignatureAdjuster
.LBB35_16:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$96, %dx
	xorw	%si, %dx
	cmpw	$17218, %dx             # imm = 0x4342
	jne	.LBB35_88
# %bb.17:                               # %BZ2_bzCompress.split167
                                        #   in Loop: Header=BB35_16 Depth=1
	movq	(%r15), %rdx
	movl	8(%rdx), %edx
	movw	$17218, BasicBlockSignatureTracker(%rip) # imm = 0x4342
	movw	$0, RunTimeSignatureAdjuster(%rip)
	addl	$-1, %edx
	movl	%edx, %esi
	subl	$3, %esi
	ja	.LBB35_84
# %bb.18:                               # %BZ2_bzCompress.split167
                                        #   in Loop: Header=BB35_16 Depth=1
	movq	.LJTI35_0(,%rdx,8), %rdx
	jmpq	*%rdx
.LBB35_19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$17240, %ax             # imm = 0x4358
	jne	.LBB35_89
# %bb.20:                               # %BZ2_bzCompress.split171
	movl	$-1, (%r14)
	movw	$17240, BasicBlockSignatureTracker # imm = 0x4358
	movw	$507, RunTimeSignatureAdjuster # imm = 0x1FB
	jmp	.LBB35_86
.LBB35_21:                              #   in Loop: Header=BB35_16 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$33, %dx
	cmpw	$17251, %dx             # imm = 0x4363
	jne	.LBB35_88
# %bb.22:                               # %BZ2_bzCompress.split173
                                        #   in Loop: Header=BB35_16 Depth=1
	movl	(%rcx), %edx
	movw	$17251, BasicBlockSignatureTracker # imm = 0x4363
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	jne	.LBB35_25
# %bb.23:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$230, %cx
	cmpw	$17285, %cx             # imm = 0x4385
	jne	.LBB35_89
# %bb.24:                               # %BZ2_bzCompress.split179
	movq	(%rax), %rdi
	movw	$17285, BasicBlockSignatureTracker # imm = 0x4385
	movw	$0, RunTimeSignatureAdjuster
	callq	handle_compress
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	movl	$1, %edx
	movw	$17285, BasicBlockSignatureTracker # imm = 0x4385
	movw	$294, RunTimeSignatureAdjuster # imm = 0x126
	movb	%al, (%rbx)
	movzbl	(%rbx), %eax
	cmpl	$0, %eax
	cmovnel	%edx, %ecx
	movl	%ecx, (%r14)
	movw	$17285, BasicBlockSignatureTracker # imm = 0x4385
	movw	$294, RunTimeSignatureAdjuster # imm = 0x126
	jmp	.LBB35_86
.LBB35_25:                              #   in Loop: Header=BB35_16 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$238, %dx
	cmpw	$17293, %dx             # imm = 0x438D
	jne	.LBB35_88
# %bb.26:                               # %BZ2_bzCompress.split181
                                        #   in Loop: Header=BB35_16 Depth=1
	movl	(%rcx), %edx
	movw	$17293, BasicBlockSignatureTracker # imm = 0x438D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %edx
	jne	.LBB35_30
# %bb.27:                               #   in Loop: Header=BB35_16 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$30, %dx
	cmpw	$17299, %dx             # imm = 0x4393
	jne	.LBB35_88
# %bb.28:                               # %BZ2_bzCompress.split183
                                        #   in Loop: Header=BB35_16 Depth=1
	movq	(%rax), %rdx
	movl	8(%rdx), %edx
	movq	(%r15), %rsi
	movl	%edx, 16(%rsi)
	movq	(%r15), %rdx
	movl	$3, 8(%rdx)
	movw	$17299, BasicBlockSignatureTracker # imm = 0x4393
	movw	$177, RunTimeSignatureAdjuster
.LBB35_29:                              # %.backedge
                                        #   in Loop: Header=BB35_16 Depth=1
	jmp	.LBB35_16
.LBB35_30:                              #   in Loop: Header=BB35_16 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$22, %dx
	cmpw	$17307, %dx             # imm = 0x439B
	jne	.LBB35_88
# %bb.31:                               # %BZ2_bzCompress.split185
                                        #   in Loop: Header=BB35_16 Depth=1
	movl	(%rcx), %edx
	movw	$17307, BasicBlockSignatureTracker # imm = 0x439B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %edx
	jne	.LBB35_34
# %bb.32:                               #   in Loop: Header=BB35_16 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$6, %dx
	cmpw	$17309, %dx             # imm = 0x439D
	jne	.LBB35_88
# %bb.33:                               # %BZ2_bzCompress.split187
                                        #   in Loop: Header=BB35_16 Depth=1
	movq	(%rax), %rdx
	movl	8(%rdx), %edx
	movq	(%r15), %rsi
	movl	%edx, 16(%rsi)
	movq	(%r15), %rdx
	movl	$4, 8(%rdx)
	movw	$17309, BasicBlockSignatureTracker # imm = 0x439D
	movw	$191, RunTimeSignatureAdjuster
	jmp	.LBB35_29
.LBB35_34:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$17312, %ax             # imm = 0x43A0
	jne	.LBB35_89
# %bb.35:                               # %BZ2_bzCompress.split189
	movl	$-2, (%r14)
	movw	$17312, BasicBlockSignatureTracker # imm = 0x43A0
	movw	$259, RunTimeSignatureAdjuster # imm = 0x103
	jmp	.LBB35_86
.LBB35_36:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$179, %dx
	cmpw	$17393, %dx             # imm = 0x43F1
	jne	.LBB35_89
# %bb.37:                               # %BZ2_bzCompress.split175
	movl	(%rcx), %ecx
	movw	$17393, BasicBlockSignatureTracker # imm = 0x43F1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %ecx
	je	.LBB35_40
# %bb.38:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1995, %ax              # imm = 0x7CB
	cmpw	$17466, %ax             # imm = 0x443A
	jne	.LBB35_89
# %bb.39:                               # %BZ2_bzCompress.split191
	movl	$-1, (%r14)
	movw	$17466, BasicBlockSignatureTracker # imm = 0x443A
	movw	$1689, RunTimeSignatureAdjuster # imm = 0x699
	jmp	.LBB35_86
.LBB35_40:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$1943, %cx              # imm = 0x797
	cmpw	$17510, %cx             # imm = 0x4466
	jne	.LBB35_89
# %bb.41:                               # %BZ2_bzCompress.split193
	movq	(%r15), %rcx
	movl	16(%rcx), %ecx
	movq	(%r15), %rdx
	movq	(%rdx), %rdx
	movl	8(%rdx), %edx
	movw	$17510, BasicBlockSignatureTracker # imm = 0x4466
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB35_44
# %bb.42:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$17525, %ax             # imm = 0x4475
	jne	.LBB35_89
# %bb.43:                               # %BZ2_bzCompress.split195
	movl	$-1, (%r14)
	movw	$17525, BasicBlockSignatureTracker # imm = 0x4475
	movw	$1750, RunTimeSignatureAdjuster # imm = 0x6D6
	jmp	.LBB35_86
.LBB35_44:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$211, %cx
	cmpw	$17589, %cx             # imm = 0x44B5
	jne	.LBB35_89
# %bb.45:                               # %BZ2_bzCompress.split197
	movq	(%rax), %rdi
	movw	$17589, BasicBlockSignatureTracker # imm = 0x44B5
	movw	$1840, RunTimeSignatureAdjuster # imm = 0x730
	callq	handle_compress
	movw	$17589, BasicBlockSignatureTracker # imm = 0x44B5
	movw	$1840, RunTimeSignatureAdjuster # imm = 0x730
	movb	%al, (%rbx)
	movq	(%r15), %rax
	movl	16(%rax), %eax
	movw	$17589, BasicBlockSignatureTracker # imm = 0x44B5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	ja	.LBB35_52
# %bb.46:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$17598, %ax             # imm = 0x44BE
	jne	.LBB35_89
# %bb.47:                               # %BZ2_bzCompress.split201
	movq	(%r15), %rdi
	movw	$17598, BasicBlockSignatureTracker # imm = 0x44BE
	movw	$0, RunTimeSignatureAdjuster
	callq	isempty_RL
	movw	$17598, BasicBlockSignatureTracker # imm = 0x44BE
	movw	$11, RunTimeSignatureAdjuster
	movw	$17598, BasicBlockSignatureTracker # imm = 0x44BE
	movw	$11, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB35_52
# %bb.48:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5733, %ax              # imm = 0x1665
	cmpw	$21211, %ax             # imm = 0x52DB
	jne	.LBB35_89
# %bb.49:                               # %BZ2_bzCompress.split203
	movw	$21211, BasicBlockSignatureTracker # imm = 0x52DB
	movw	$5733, RunTimeSignatureAdjuster # imm = 0x1665
# %bb.50:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$88, %ax
	xorw	%cx, %ax
	cmpw	$17638, %ax             # imm = 0x44E6
	jne	.LBB35_89
# %bb.51:                               # %BZ2_bzCompress.split233
	movq	(%r15), %rax
	movl	120(%rax), %eax
	movq	(%r15), %rcx
	movl	116(%rcx), %ecx
	movw	$17638, BasicBlockSignatureTracker # imm = 0x44E6
	movw	$83, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB35_54
.LBB35_52:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$78, %ax
	xorw	%cx, %ax
	cmpw	$17659, %ax             # imm = 0x44FB
	jne	.LBB35_89
# %bb.53:                               # %BZ2_bzCompress.split199
	movl	$2, (%r14)
	movw	$17659, BasicBlockSignatureTracker # imm = 0x44FB
	movw	$1624, RunTimeSignatureAdjuster # imm = 0x658
	jmp	.LBB35_86
.LBB35_54:                              # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-31894, %ax            # imm = 0x836A
	cmpw	$-14452, %ax            # imm = 0xC78C
	jne	.LBB35_89
# %bb.55:                               # %BZ2_bzCompress.split205
	movw	$-14452, BasicBlockSignatureTracker # imm = 0xC78C
	movw	$-31894, RunTimeSignatureAdjuster # imm = 0x836A
# %bb.56:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$508, %ax               # imm = 0x1FC
	xorw	%cx, %ax
	cmpw	$17690, %ax             # imm = 0x451A
	jne	.LBB35_89
# %bb.57:                               # %BZ2_bzCompress.split235
	movq	(%r15), %rax
	movl	$2, 8(%rax)
	movl	$1, (%r14)
	movw	$17690, BasicBlockSignatureTracker # imm = 0x451A
	movw	$1977, RunTimeSignatureAdjuster # imm = 0x7B9
	jmp	.LBB35_86
.LBB35_58:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$1650, %dx              # imm = 0x672
	cmpw	$17712, %dx             # imm = 0x4530
	jne	.LBB35_89
# %bb.59:                               # %BZ2_bzCompress.split177
	movl	(%rcx), %ecx
	movw	$17712, BasicBlockSignatureTracker # imm = 0x4530
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %ecx
	je	.LBB35_62
# %bb.60:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$86, %ax
	cmpw	$17766, %ax             # imm = 0x4566
	jne	.LBB35_89
# %bb.61:                               # %BZ2_bzCompress.split207
	movl	$-1, (%r14)
	movw	$17766, BasicBlockSignatureTracker # imm = 0x4566
	movw	$1989, RunTimeSignatureAdjuster # imm = 0x7C5
	jmp	.LBB35_86
.LBB35_62:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$87, %cx
	cmpw	$17767, %cx             # imm = 0x4567
	jne	.LBB35_89
# %bb.63:                               # %BZ2_bzCompress.split209
	movq	(%r15), %rcx
	movl	16(%rcx), %ecx
	movq	(%r15), %rdx
	movq	(%rdx), %rdx
	movl	8(%rdx), %edx
	movw	$17767, BasicBlockSignatureTracker # imm = 0x4567
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	je	.LBB35_66
# %bb.64:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$17784, %ax             # imm = 0x4578
	jne	.LBB35_89
# %bb.65:                               # %BZ2_bzCompress.split211
	movl	$-1, (%r14)
	movw	$17784, BasicBlockSignatureTracker # imm = 0x4578
	movw	$2011, RunTimeSignatureAdjuster # imm = 0x7DB
	jmp	.LBB35_86
.LBB35_66:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$252, %cx
	cmpw	$17819, %cx             # imm = 0x459B
	jne	.LBB35_89
# %bb.67:                               # %BZ2_bzCompress.split213
	movq	(%rax), %rdi
	movw	$17819, BasicBlockSignatureTracker # imm = 0x459B
	movw	$1566, RunTimeSignatureAdjuster # imm = 0x61E
	callq	handle_compress
	movw	$17819, BasicBlockSignatureTracker # imm = 0x459B
	movw	$1566, RunTimeSignatureAdjuster # imm = 0x61E
	movb	%al, (%rbx)
	movb	(%rbx), %al
	movw	$17819, BasicBlockSignatureTracker # imm = 0x459B
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB35_70
# %bb.68:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$17824, %ax             # imm = 0x45A0
	jne	.LBB35_89
# %bb.69:                               # %BZ2_bzCompress.split217
	movl	$-1, (%r14)
	movw	$17824, BasicBlockSignatureTracker # imm = 0x45A0
	movw	$1795, RunTimeSignatureAdjuster # imm = 0x703
	jmp	.LBB35_86
.LBB35_70:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$17842, %ax             # imm = 0x45B2
	jne	.LBB35_89
# %bb.71:                               # %BZ2_bzCompress.split215
	movq	(%r15), %rax
	movl	16(%rax), %eax
	movw	$17842, BasicBlockSignatureTracker # imm = 0x45B2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	ja	.LBB35_78
# %bb.72:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$86, %ax
	cmpw	$17892, %ax             # imm = 0x45E4
	jne	.LBB35_89
# %bb.73:                               # %BZ2_bzCompress.split221
	movq	(%r15), %rdi
	movw	$17892, BasicBlockSignatureTracker # imm = 0x45E4
	movw	$346, RunTimeSignatureAdjuster # imm = 0x15A
	callq	isempty_RL
	movw	$17892, BasicBlockSignatureTracker # imm = 0x45E4
	movw	$346, RunTimeSignatureAdjuster # imm = 0x15A
	movw	$17892, BasicBlockSignatureTracker # imm = 0x45E4
	movw	$86, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB35_78
# %bb.74:                               # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-4394, %ax             # imm = 0xEED6
	cmpw	$-21710, %ax            # imm = 0xAB32
	jne	.LBB35_89
# %bb.75:                               # %BZ2_bzCompress.split223
	movw	$-21710, BasicBlockSignatureTracker # imm = 0xAB32
	movw	$-4394, RunTimeSignatureAdjuster # imm = 0xEED6
# %bb.76:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$17893, %ax             # imm = 0x45E5
	jne	.LBB35_89
# %bb.77:                               # %BZ2_bzCompress.split237
	movq	(%r15), %rax
	movl	120(%rax), %eax
	movq	(%r15), %rcx
	movl	116(%rcx), %ecx
	movw	$17893, BasicBlockSignatureTracker # imm = 0x45E5
	movw	$87, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB35_80
.LBB35_78:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$916, %ax               # imm = 0x394
	xorw	%cx, %ax
	cmpw	$17958, %ax             # imm = 0x4626
	jne	.LBB35_89
# %bb.79:                               # %BZ2_bzCompress.split219
	movl	$3, (%r14)
	movw	$17958, BasicBlockSignatureTracker # imm = 0x4626
	movw	$1157, RunTimeSignatureAdjuster # imm = 0x485
	jmp	.LBB35_86
.LBB35_80:                              # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-1919, %ax             # imm = 0xF881
	cmpw	$-17052, %ax            # imm = 0xBD64
	jne	.LBB35_89
# %bb.81:                               # %BZ2_bzCompress.split225
	movw	$-17052, BasicBlockSignatureTracker # imm = 0xBD64
	movw	$-1919, RunTimeSignatureAdjuster # imm = 0xF881
# %bb.82:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$980, %ax               # imm = 0x3D4
	xorw	%cx, %ax
	cmpw	$17969, %ax             # imm = 0x4631
	jne	.LBB35_89
# %bb.83:                               # %BZ2_bzCompress.split239
	movq	(%r15), %rax
	movl	$1, 8(%rax)
	movl	$4, (%r14)
	movw	$17969, BasicBlockSignatureTracker # imm = 0x4631
	movw	$1170, RunTimeSignatureAdjuster # imm = 0x492
	jmp	.LBB35_86
.LBB35_84:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1282, %ax              # imm = 0x502
	cmpw	$17984, %ax             # imm = 0x4640
	jne	.LBB35_89
# %bb.85:                               # %BZ2_bzCompress.split169
	movl	$0, (%r14)
	movw	$17984, BasicBlockSignatureTracker # imm = 0x4640
	movw	$1251, RunTimeSignatureAdjuster # imm = 0x4E3
.LBB35_86:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1265, %ax              # imm = 0x4F1
	xorw	%cx, %ax
	cmpw	$18002, %ax             # imm = 0x4652
	jne	.LBB35_89
# %bb.87:                               # %BZ2_bzCompress.split157
	movl	(%r14), %eax
	movw	$18002, BasicBlockSignatureTracker # imm = 0x4652
	movw	$12192, RunTimeSignatureAdjuster # imm = 0x2FA0
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB35_88:                              # %CFerrorHandler.BZ2_bzCompress.loopexit
	jmp	.LBB35_89
.LBB35_89:                              # %CFerrorHandler.BZ2_bzCompress
	callq	FAULT_DETECTED_CFC
.Lfunc_end35:
	.size	BZ2_bzCompress, .Lfunc_end35-BZ2_bzCompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI35_0:
	.quad	.LBB35_19
	.quad	.LBB35_21
	.quad	.LBB35_36
	.quad	.LBB35_58
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function handle_compress
	.type	handle_compress,@function
handle_compress:                        # @handle_compress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1521, %ax              # imm = 0x5F1
	xorw	%cx, %ax
	cmpw	$18036, %ax             # imm = 0x4674
	jne	.LBB36_69
# %bb.1:                                # %handle_compress.split145
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1521, %ax              # imm = 0x5F1
	xorw	%cx, %ax
	cmpw	$18036, %ax             # imm = 0x4674
	jne	.LBB36_69
# %bb.2:                                # %handle_compress.split143
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1521, %ax              # imm = 0x5F1
	xorw	%cx, %ax
	cmpw	$18036, %ax             # imm = 0x4674
	jne	.LBB36_69
# %bb.3:                                # %handle_compress.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%rax)
	movb	$0, (%r14)
	movb	$0, (%r15)
	movq	(%rax), %rax
	movq	48(%rax), %rax
	movq	%rax, (%rbx)
	movw	$18036, BasicBlockSignatureTracker # imm = 0x4674
	movw	$0, RunTimeSignatureAdjuster
.LBB36_4:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$13, %ax
	xorw	%cx, %ax
	cmpw	$18041, %ax             # imm = 0x4679
	jne	.LBB36_68
# %bb.5:                                # %handle_compress.split147
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	12(%rax), %eax
	movw	$18041, BasicBlockSignatureTracker # imm = 0x4679
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB36_36
# %bb.6:                                #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$18044, %ax             # imm = 0x467C
	jne	.LBB36_68
# %bb.7:                                # %handle_compress.split149
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18044, BasicBlockSignatureTracker # imm = 0x467C
	movw	$0, RunTimeSignatureAdjuster
	callq	copy_output_until_stop
	movw	$18044, BasicBlockSignatureTracker # imm = 0x467C
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%al, %eax
	movzbl	(%r15), %ecx
	orl	%eax, %ecx
	movb	%cl, (%r15)
	movq	(%rbx), %rax
	movl	120(%rax), %eax
	movq	(%rbx), %rcx
	movl	116(%rcx), %ecx
	movw	$18044, BasicBlockSignatureTracker # imm = 0x467C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB36_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$229, %ax
	cmpw	$18073, %ax             # imm = 0x4699
	jne	.LBB36_69
# %bb.9:                                # %handle_compress.split153
	movw	$18073, BasicBlockSignatureTracker # imm = 0x4699
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB36_62
.LBB36_10:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$192, %ax
	cmpw	$18108, %ax             # imm = 0x46BC
	jne	.LBB36_68
# %bb.11:                               # %handle_compress.split155
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$18108, BasicBlockSignatureTracker # imm = 0x46BC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB36_22
# %bb.12:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$79, %ax
	cmpw	$18163, %ax             # imm = 0x46F3
	jne	.LBB36_68
# %bb.13:                               # %handle_compress.split159
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	16(%rax), %eax
	movw	$18163, BasicBlockSignatureTracker # imm = 0x46F3
	movw	$79, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB36_22
# %bb.14:                               # %Buffer__
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-9524, %ax             # imm = 0xDACC
	cmpw	$-25537, %ax            # imm = 0x9C3F
	jne	.LBB36_68
# %bb.15:                               # %handle_compress.split163
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$-25537, BasicBlockSignatureTracker # imm = 0x9C3F
	movw	$-9524, RunTimeSignatureAdjuster # imm = 0xDACC
# %bb.16:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10, %ax
	xorw	%cx, %ax
	cmpw	$18169, %ax             # imm = 0x46F9
	jne	.LBB36_68
# %bb.17:                               # %handle_compress.split201
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18169, BasicBlockSignatureTracker # imm = 0x46F9
	movw	$583, RunTimeSignatureAdjuster # imm = 0x247
	callq	isempty_RL
	movw	$18169, BasicBlockSignatureTracker # imm = 0x46F9
	movw	$583, RunTimeSignatureAdjuster # imm = 0x247
	movzbl	%al, %eax
	movw	$18169, BasicBlockSignatureTracker # imm = 0x46F9
	movw	$69, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB36_22
# %bb.18:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19865, %ax             # imm = 0x4D99
	cmpw	$2912, %ax              # imm = 0xB60
	jne	.LBB36_69
# %bb.19:                               # %handle_compress.split165
	movw	$2912, BasicBlockSignatureTracker # imm = 0xB60
	movw	$19865, RunTimeSignatureAdjuster # imm = 0x4D99
# %bb.20:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$485, %ax               # imm = 0x1E5
	xorw	%cx, %ax
	cmpw	$18204, %ax             # imm = 0x471C
	jne	.LBB36_69
# %bb.21:                               # %handle_compress.split203
	movw	$18204, BasicBlockSignatureTracker # imm = 0x471C
	movw	$389, RunTimeSignatureAdjuster # imm = 0x185
	jmp	.LBB36_62
.LBB36_22:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$499, %ax               # imm = 0x1F3
	xorw	%cx, %ax
	cmpw	$18255, %ax             # imm = 0x474F
	jne	.LBB36_68
# %bb.23:                               # %handle_compress.split161
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18255, BasicBlockSignatureTracker # imm = 0x474F
	movw	$2010, RunTimeSignatureAdjuster # imm = 0x7DA
	callq	prepare_new_block
	movw	$18255, BasicBlockSignatureTracker # imm = 0x474F
	movw	$2010, RunTimeSignatureAdjuster # imm = 0x7DA
	movq	(%rbx), %rax
	movl	$2, 12(%rax)
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$18255, BasicBlockSignatureTracker # imm = 0x474F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jne	.LBB36_34
# %bb.24:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$18261, %ax             # imm = 0x4755
	jne	.LBB36_68
# %bb.25:                               # %handle_compress.split167
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	16(%rax), %eax
	movw	$18261, BasicBlockSignatureTracker # imm = 0x4755
	movw	$26, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB36_34
# %bb.26:                               # %Buffer__2
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13701, %ax             # imm = 0x3585
	cmpw	$29392, %ax             # imm = 0x72D0
	jne	.LBB36_68
# %bb.27:                               # %handle_compress.split171
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$29392, BasicBlockSignatureTracker # imm = 0x72D0
	movw	$13701, RunTimeSignatureAdjuster # imm = 0x3585
# %bb.28:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$18276, %ax             # imm = 0x4764
	jne	.LBB36_68
# %bb.29:                               # %handle_compress.split205
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18276, BasicBlockSignatureTracker # imm = 0x4764
	movw	$986, RunTimeSignatureAdjuster # imm = 0x3DA
	callq	isempty_RL
	movw	$18276, BasicBlockSignatureTracker # imm = 0x4764
	movw	$986, RunTimeSignatureAdjuster # imm = 0x3DA
	movzbl	%al, %eax
	movw	$18276, BasicBlockSignatureTracker # imm = 0x4764
	movw	$43, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB36_34
# %bb.30:                               # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-6772, %ax             # imm = 0xE58C
	cmpw	$-23832, %ax            # imm = 0xA2E8
	jne	.LBB36_69
# %bb.31:                               # %handle_compress.split173
	movw	$-23832, BasicBlockSignatureTracker # imm = 0xA2E8
	movw	$-6772, RunTimeSignatureAdjuster # imm = 0xE58C
# %bb.32:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$253, %ax
	xorw	%cx, %ax
	cmpw	$18329, %ax             # imm = 0x4799
	jne	.LBB36_69
# %bb.33:                               # %handle_compress.split207
	movw	$18329, BasicBlockSignatureTracker # imm = 0x4799
	movw	$256, RunTimeSignatureAdjuster # imm = 0x100
	jmp	.LBB36_62
.LBB36_34:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$231, %ax
	xorw	%cx, %ax
	cmpw	$18344, %ax             # imm = 0x47A8
	jne	.LBB36_68
# %bb.35:                               # %handle_compress.split169
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$18344, BasicBlockSignatureTracker # imm = 0x47A8
	movw	$465, RunTimeSignatureAdjuster # imm = 0x1D1
.LBB36_36:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$432, %ax               # imm = 0x1B0
	xorw	%cx, %ax
	cmpw	$18377, %ax             # imm = 0x47C9
	jne	.LBB36_68
# %bb.37:                               # %handle_compress.split151
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	12(%rax), %eax
	movw	$18377, BasicBlockSignatureTracker # imm = 0x47C9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jne	.LBB36_60
# %bb.38:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$18428, %ax             # imm = 0x47FC
	jne	.LBB36_68
# %bb.39:                               # %handle_compress.split175
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18428, BasicBlockSignatureTracker # imm = 0x47FC
	movw	$0, RunTimeSignatureAdjuster
	callq	copy_input_until_stop
	movw	$18428, BasicBlockSignatureTracker # imm = 0x47FC
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%al, %eax
	movzbl	(%r14), %ecx
	orl	%eax, %ecx
	movb	%cl, (%r14)
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$18428, BasicBlockSignatureTracker # imm = 0x47FC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	je	.LBB36_46
# %bb.40:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4090, %ax              # imm = 0xFFA
	cmpw	$18438, %ax             # imm = 0x4806
	jne	.LBB36_68
# %bb.41:                               # %handle_compress.split179
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	16(%rax), %eax
	movw	$18438, BasicBlockSignatureTracker # imm = 0x4806
	movw	$4090, RunTimeSignatureAdjuster # imm = 0xFFA
	cmpl	$0, %eax
	jne	.LBB36_46
# %bb.42:                               # %Buffer__4
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-30279, %ax            # imm = 0x89B9
	cmpw	$-15937, %ax            # imm = 0xC1BF
	jne	.LBB36_68
# %bb.43:                               # %handle_compress.split183
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$-15937, BasicBlockSignatureTracker # imm = 0xC1BF
	movw	$-30279, RunTimeSignatureAdjuster # imm = 0x89B9
# %bb.44:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$18439, %ax             # imm = 0x4807
	jne	.LBB36_68
# %bb.45:                               # %handle_compress.split209
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18439, BasicBlockSignatureTracker # imm = 0x4807
	movw	$0, RunTimeSignatureAdjuster
	callq	flush_RL
	movw	$18439, BasicBlockSignatureTracker # imm = 0x4807
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movq	(%rbx), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	$18439, BasicBlockSignatureTracker # imm = 0x4807
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movw	$18439, BasicBlockSignatureTracker # imm = 0x4807
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rax
	movl	$1, 12(%rax)
	movw	$18439, BasicBlockSignatureTracker # imm = 0x4807
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB36_58
.LBB36_46:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4078, %ax              # imm = 0xFEE
	xorw	%cx, %ax
	cmpw	$18450, %ax             # imm = 0x4812
	jne	.LBB36_68
# %bb.47:                               # %handle_compress.split181
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movl	108(%rax), %eax
	movq	(%rbx), %rcx
	movl	112(%rcx), %ecx
	movw	$18450, BasicBlockSignatureTracker # imm = 0x4812
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB36_50
# %bb.48:                               #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$18458, %ax             # imm = 0x481A
	jne	.LBB36_68
# %bb.49:                               # %handle_compress.split187
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rdi
	movw	$18458, BasicBlockSignatureTracker # imm = 0x481A
	movw	$29, RunTimeSignatureAdjuster
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movw	$18458, BasicBlockSignatureTracker # imm = 0x481A
	movw	$29, RunTimeSignatureAdjuster
	movq	(%rbx), %rax
	movl	$1, 12(%rax)
	movw	$18458, BasicBlockSignatureTracker # imm = 0x481A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB36_56
.LBB36_50:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$18463, %ax             # imm = 0x481F
	jne	.LBB36_68
# %bb.51:                               # %handle_compress.split189
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$18463, BasicBlockSignatureTracker # imm = 0x481F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB36_54
# %bb.52:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$18466, %ax             # imm = 0x4822
	jne	.LBB36_69
# %bb.53:                               # %handle_compress.split193
	movw	$18466, BasicBlockSignatureTracker # imm = 0x4822
	movw	$3771, RunTimeSignatureAdjuster # imm = 0xEBB
	jmp	.LBB36_62
.LBB36_54:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$111, %ax
	cmpw	$18544, %ax             # imm = 0x4870
	jne	.LBB36_68
# %bb.55:                               # %handle_compress.split195
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$18544, BasicBlockSignatureTracker # imm = 0x4870
	movw	$106, RunTimeSignatureAdjuster
.LBB36_56:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$105, %ax
	xorw	%cx, %ax
	cmpw	$18547, %ax             # imm = 0x4873
	jne	.LBB36_68
# %bb.57:                               # %handle_compress.split191
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$18547, BasicBlockSignatureTracker # imm = 0x4873
	movw	$116, RunTimeSignatureAdjuster
.LBB36_58:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$123, %ax
	xorw	%cx, %ax
	cmpw	$18556, %ax             # imm = 0x487C
	jne	.LBB36_68
# %bb.59:                               # %handle_compress.split185
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$18556, BasicBlockSignatureTracker # imm = 0x487C
	movw	$4021, RunTimeSignatureAdjuster # imm = 0xFB5
.LBB36_60:                              #   in Loop: Header=BB36_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3918, %ax              # imm = 0xF4E
	xorw	%cx, %ax
	cmpw	$18567, %ax             # imm = 0x4887
	jne	.LBB36_68
# %bb.61:                               # %handle_compress.split177
                                        #   in Loop: Header=BB36_4 Depth=1
	movw	$18567, BasicBlockSignatureTracker # imm = 0x4887
	movw	$3827, RunTimeSignatureAdjuster # imm = 0xEF3
	jmp	.LBB36_4
.LBB36_62:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3600, %ax              # imm = 0xE10
	xorw	%cx, %ax
	cmpw	$18569, %ax             # imm = 0x4889
	jne	.LBB36_69
# %bb.63:                               # %handle_compress.split157
	movb	$1, %al
	movzbl	(%r14), %ecx
	movw	$18569, BasicBlockSignatureTracker # imm = 0x4889
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB36_66
# %bb.64:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$18577, %ax             # imm = 0x4891
	jne	.LBB36_69
# %bb.65:                               # %handle_compress.split199
	movzbl	(%r15), %eax
	cmpl	$0, %eax
	setne	%al
	movw	$18577, BasicBlockSignatureTracker # imm = 0x4891
	movw	$24, RunTimeSignatureAdjuster
.LBB36_66:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$16, %cx
	xorw	%dx, %cx
	cmpw	$18585, %cx             # imm = 0x4899
	jne	.LBB36_69
# %bb.67:                               # %handle_compress.split197
	andb	$1, %al
	movzbl	%al, %eax
	movw	$18585, BasicBlockSignatureTracker # imm = 0x4899
	movw	$3066, RunTimeSignatureAdjuster # imm = 0xBFA
	movzbl	%al, %eax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB36_68:                              # %CFerrorHandler.handle_compress.loopexit
	jmp	.LBB36_69
.LBB36_69:                              # %CFerrorHandler.handle_compress
	callq	FAULT_DETECTED_CFC
.Lfunc_end36:
	.size	handle_compress, .Lfunc_end36-handle_compress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function isempty_RL
	.type	isempty_RL,@function
isempty_RL:                             # @isempty_RL
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3156, %ax              # imm = 0xC54
	xorw	%cx, %ax
	cmpw	$18666, %ax             # imm = 0x48EA
	jne	.LBB37_15
# %bb.1:                                # %isempty_RL.split43
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3156, %ax              # imm = 0xC54
	xorw	%cx, %ax
	cmpw	$18666, %ax             # imm = 0x48EA
	jne	.LBB37_15
# %bb.2:                                # %isempty_RL.split41
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3156, %ax              # imm = 0xC54
	xorw	%cx, %ax
	cmpw	$18666, %ax             # imm = 0x48EA
	jne	.LBB37_15
# %bb.3:                                # %isempty_RL.split39
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3156, %ax              # imm = 0xC54
	xorw	%cx, %ax
	cmpw	$18666, %ax             # imm = 0x48EA
	jne	.LBB37_15
# %bb.4:                                # %isempty_RL.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rcx)
	movq	(%rcx), %rdx
	movl	92(%rdx), %edx
	movw	$18666, BasicBlockSignatureTracker # imm = 0x48EA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %edx              # imm = 0x100
	jae	.LBB37_11
# %bb.5:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$438, %dx               # imm = 0x1B6
	cmpw	$18780, %dx             # imm = 0x495C
	jne	.LBB37_15
# %bb.6:                                # %isempty_RL.split45
	movq	(%rcx), %rcx
	movl	96(%rcx), %ecx
	movw	$18780, BasicBlockSignatureTracker # imm = 0x495C
	movw	$438, RunTimeSignatureAdjuster # imm = 0x1B6
	cmpl	$0, %ecx
	jle	.LBB37_11
# %bb.7:                                # %Buffer__
	movw	BasicBlockSignatureTracker, %cx
	xorw	$-20606, %cx            # imm = 0xAF82
	cmpw	$-6434, %cx             # imm = 0xE6DE
	jne	.LBB37_15
# %bb.8:                                # %isempty_RL.split49
	movw	$-6434, BasicBlockSignatureTracker # imm = 0xE6DE
	movw	$-20606, RunTimeSignatureAdjuster # imm = 0xAF82
# %bb.9:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$218, %cx
	xorw	%dx, %cx
	cmpw	$18822, %cx             # imm = 0x4986
	jne	.LBB37_15
# %bb.10:                               # %isempty_RL.split53
	movb	$0, (%rax)
	movw	$18822, BasicBlockSignatureTracker # imm = 0x4986
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB37_13
.LBB37_11:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$365, %cx               # imm = 0x16D
	xorw	%dx, %cx
	cmpw	$18823, %cx             # imm = 0x4987
	jne	.LBB37_15
# %bb.12:                               # %isempty_RL.split47
	movb	$1, (%rax)
	movw	$18823, BasicBlockSignatureTracker # imm = 0x4987
	movw	$1, RunTimeSignatureAdjuster
.LBB37_13:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$10, %cx
	xorw	%dx, %cx
	cmpw	$18828, %cx             # imm = 0x498C
	jne	.LBB37_15
# %bb.14:                               # %isempty_RL.split51
	movb	(%rax), %al
	movw	$18828, BasicBlockSignatureTracker # imm = 0x498C
	movw	$3385, RunTimeSignatureAdjuster # imm = 0xD39
	movzbl	%al, %eax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB37_15:                              # %CFerrorHandler.isempty_RL
	callq	FAULT_DETECTED_CFC
.Lfunc_end37:
	.size	isempty_RL, .Lfunc_end37-isempty_RL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_output_until_stop
	.type	copy_output_until_stop,@function
copy_output_until_stop:                 # @copy_output_until_stop
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4010, %ax              # imm = 0xFAA
	xorw	%cx, %ax
	cmpw	$18902, %ax             # imm = 0x49D6
	jne	.LBB38_19
# %bb.1:                                # %copy_output_until_stop.split
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rdi, (%rcx)
	movb	$0, (%rax)
	movw	$18902, BasicBlockSignatureTracker # imm = 0x49D6
	movw	$0, RunTimeSignatureAdjuster
.LBB38_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$57, %dx
	xorw	%si, %dx
	cmpw	$18927, %dx             # imm = 0x49EF
	jne	.LBB38_18
# %bb.3:                                # %copy_output_until_stop.split33
                                        #   in Loop: Header=BB38_2 Depth=1
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	movl	32(%rdx), %edx
	movw	$18927, BasicBlockSignatureTracker # imm = 0x49EF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	jne	.LBB38_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$1002, %cx              # imm = 0x3EA
	cmpw	$18949, %cx             # imm = 0x4A05
	jne	.LBB38_19
# %bb.5:                                # %copy_output_until_stop.split35
	movw	$18949, BasicBlockSignatureTracker # imm = 0x4A05
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB38_16
.LBB38_6:                               #   in Loop: Header=BB38_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$1018, %dx              # imm = 0x3FA
	cmpw	$18965, %dx             # imm = 0x4A15
	jne	.LBB38_18
# %bb.7:                                # %copy_output_until_stop.split37
                                        #   in Loop: Header=BB38_2 Depth=1
	movq	(%rcx), %rdx
	movl	120(%rdx), %edx
	movq	(%rcx), %rsi
	movl	116(%rsi), %esi
	movw	$18965, BasicBlockSignatureTracker # imm = 0x4A15
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%esi, %edx
	jl	.LBB38_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$62, %cx
	cmpw	$18987, %cx             # imm = 0x4A2B
	jne	.LBB38_19
# %bb.9:                                # %copy_output_until_stop.split41
	movw	$18987, BasicBlockSignatureTracker # imm = 0x4A2B
	movw	$46, RunTimeSignatureAdjuster
	jmp	.LBB38_16
.LBB38_10:                              #   in Loop: Header=BB38_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$39, %dx
	cmpw	$18994, %dx             # imm = 0x4A32
	jne	.LBB38_18
# %bb.11:                               # %copy_output_until_stop.split43
                                        #   in Loop: Header=BB38_2 Depth=1
	movb	$1, (%rax)
	movq	(%rcx), %rdx
	movq	80(%rdx), %rdx
	movq	(%rcx), %rsi
	movslq	120(%rsi), %rsi
	movb	(%rdx,%rsi), %dl
	movq	(%rcx), %rsi
	movq	(%rsi), %rsi
	movq	24(%rsi), %rsi
	movb	%dl, (%rsi)
	movq	(%rcx), %rdx
	movl	120(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 120(%rdx)
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	movl	32(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 32(%rdx)
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	movq	24(%rdx), %rsi
	addq	$1, %rsi
	movq	%rsi, 24(%rdx)
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	movl	36(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 36(%rdx)
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	movl	36(%rdx), %edx
	movw	$18994, BasicBlockSignatureTracker # imm = 0x4A32
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %edx
	jne	.LBB38_14
# %bb.12:                               #   in Loop: Header=BB38_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$116, %dx
	cmpw	$19014, %dx             # imm = 0x4A46
	jne	.LBB38_18
# %bb.13:                               # %copy_output_until_stop.split45
                                        #   in Loop: Header=BB38_2 Depth=1
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	movl	40(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 40(%rdx)
	movw	$19014, BasicBlockSignatureTracker # imm = 0x4A46
	movw	$116, RunTimeSignatureAdjuster
.LBB38_14:                              #   in Loop: Header=BB38_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$123, %dx
	xorw	%si, %dx
	cmpw	$19017, %dx             # imm = 0x4A49
	jne	.LBB38_18
# %bb.15:                               # %copy_output_until_stop.split47
                                        #   in Loop: Header=BB38_2 Depth=1
	movw	$19017, BasicBlockSignatureTracker # imm = 0x4A49
	movw	$927, RunTimeSignatureAdjuster # imm = 0x39F
	jmp	.LBB38_2
.LBB38_16:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$86, %cx
	xorw	%dx, %cx
	cmpw	$19027, %cx             # imm = 0x4A53
	jne	.LBB38_19
# %bb.17:                               # %copy_output_until_stop.split39
	movb	(%rax), %al
	movw	$19027, BasicBlockSignatureTracker # imm = 0x4A53
	movw	$3114, RunTimeSignatureAdjuster # imm = 0xC2A
	movzbl	%al, %eax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB38_18:                              # %CFerrorHandler.copy_output_until_stop.loopexit
	jmp	.LBB38_19
.LBB38_19:                              # %CFerrorHandler.copy_output_until_stop
	callq	FAULT_DETECTED_CFC
.Lfunc_end38:
	.size	copy_output_until_stop, .Lfunc_end38-copy_output_until_stop
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop
	.type	copy_input_until_stop,@function
copy_input_until_stop:                  # @copy_input_until_stop
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3492, %ax              # imm = 0xDA4
	xorw	%cx, %ax
	cmpw	$19032, %ax             # imm = 0x4A58
	jne	.LBB39_94
# %bb.1:                                # %copy_input_until_stop.split
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rdi, (%r15)
	movb	$0, (%rsi)
	movq	(%r15), %rax
	movl	8(%rax), %eax
	movw	$19032, BasicBlockSignatureTracker # imm = 0x4A58
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jne	.LBB39_44
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$19047, %ax             # imm = 0x4A67
	jne	.LBB39_94
# %bb.3:                                # %copy_input_until_stop.split183
	movw	$19047, BasicBlockSignatureTracker # imm = 0x4A67
	movw	$0, RunTimeSignatureAdjuster
.LBB39_4:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$14, %ax
	xorw	%cx, %ax
	cmpw	$19049, %ax             # imm = 0x4A69
	jne	.LBB39_92
# %bb.5:                                # %copy_input_until_stop.split187
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movl	108(%rax), %eax
	movq	(%r15), %rcx
	movl	112(%rcx), %ecx
	movw	$19049, BasicBlockSignatureTracker # imm = 0x4A69
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB39_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$19053, %ax             # imm = 0x4A6D
	jne	.LBB39_94
# %bb.7:                                # %copy_input_until_stop.split189
	movw	$19053, BasicBlockSignatureTracker # imm = 0x4A6D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_42
.LBB39_8:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$235, %ax
	cmpw	$19074, %ax             # imm = 0x4A82
	jne	.LBB39_92
# %bb.9:                                # %copy_input_until_stop.split191
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$19074, BasicBlockSignatureTracker # imm = 0x4A82
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB39_12
# %bb.10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$19113, %ax             # imm = 0x4AA9
	jne	.LBB39_94
# %bb.11:                               # %copy_input_until_stop.split195
	movw	$19113, BasicBlockSignatureTracker # imm = 0x4AA9
	movw	$196, RunTimeSignatureAdjuster
	jmp	.LBB39_42
.LBB39_12:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$73, %ax
	cmpw	$19147, %ax             # imm = 0x4ACB
	jne	.LBB39_92
# %bb.13:                               # %copy_input_until_stop.split197
                                        #   in Loop: Header=BB39_4 Depth=1
	movb	$1, (%rsi)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, (%rbx)
	movl	(%rbx), %eax
	movq	(%r15), %rcx
	movl	92(%rcx), %ecx
	movw	$19147, BasicBlockSignatureTracker # imm = 0x4ACB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB39_20
# %bb.14:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$19153, %ax             # imm = 0x4AD1
	jne	.LBB39_92
# %bb.15:                               # %copy_input_until_stop.split199
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movl	96(%rax), %eax
	movw	$19153, BasicBlockSignatureTracker # imm = 0x4AD1
	movw	$26, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB39_20
# %bb.16:                               # %Buffer__
                                        #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-31770, %ax            # imm = 0x83E6
	cmpw	$-14025, %ax            # imm = 0xC937
	jne	.LBB39_92
# %bb.17:                               # %copy_input_until_stop.split203
                                        #   in Loop: Header=BB39_4 Depth=1
	movw	$-14025, BasicBlockSignatureTracker # imm = 0xC937
	movw	$-31770, RunTimeSignatureAdjuster # imm = 0x83E6
# %bb.18:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$13, %ax
	xorw	%cx, %ax
	cmpw	$19164, %ax             # imm = 0x4ADC
	jne	.LBB39_92
# %bb.19:                               # %copy_input_until_stop.split265
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movl	92(%rax), %eax
	movb	%al, (%r14)
	movq	(%r15), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	(%r15), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	(%r14), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	(%r15), %rcx
	movl	%eax, 648(%rcx)
	movq	(%r15), %rax
	movq	(%r15), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	(%r14), %al
	movq	(%r15), %rcx
	movq	64(%rcx), %rcx
	movq	(%r15), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	(%r15), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	(%rbx), %eax
	movq	(%r15), %rcx
	movl	%eax, 92(%rcx)
	movw	$19164, BasicBlockSignatureTracker # imm = 0x4ADC
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_36
.LBB39_20:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$21, %ax
	xorw	%cx, %ax
	cmpw	$19166, %ax             # imm = 0x4ADE
	jne	.LBB39_92
# %bb.21:                               # %copy_input_until_stop.split201
                                        #   in Loop: Header=BB39_4 Depth=1
	movl	(%rbx), %eax
	movq	(%r15), %rcx
	movl	92(%rcx), %ecx
	movw	$19166, BasicBlockSignatureTracker # imm = 0x4ADE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB39_24
# %bb.22:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$19172, %ax             # imm = 0x4AE4
	jne	.LBB39_92
# %bb.23:                               # %copy_input_until_stop.split209
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movl	96(%rax), %eax
	movw	$19172, BasicBlockSignatureTracker # imm = 0x4AE4
	movw	$58, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jne	.LBB39_30
.LBB39_24:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$35, %ax
	xorw	%cx, %ax
	cmpw	$19197, %ax             # imm = 0x4AFD
	jne	.LBB39_92
# %bb.25:                               # %copy_input_until_stop.split207
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movl	92(%rax), %eax
	movw	$19197, BasicBlockSignatureTracker # imm = 0x4AFD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jae	.LBB39_28
# %bb.26:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$478, %ax               # imm = 0x1DE
	cmpw	$19235, %ax             # imm = 0x4B23
	jne	.LBB39_92
# %bb.27:                               # %copy_input_until_stop.split213
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rdi
	movw	$19235, BasicBlockSignatureTracker # imm = 0x4B23
	movw	$0, RunTimeSignatureAdjuster
	movq	%rsi, %r12
	callq	add_pair_to_block
	movq	%r12, %rsi
	movw	$19235, BasicBlockSignatureTracker # imm = 0x4B23
	movw	$478, RunTimeSignatureAdjuster # imm = 0x1DE
	movw	$19235, BasicBlockSignatureTracker # imm = 0x4B23
	movw	$478, RunTimeSignatureAdjuster # imm = 0x1DE
.LBB39_28:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$473, %ax               # imm = 0x1D9
	xorw	%cx, %ax
	cmpw	$19236, %ax             # imm = 0x4B24
	jne	.LBB39_92
# %bb.29:                               # %copy_input_until_stop.split215
                                        #   in Loop: Header=BB39_4 Depth=1
	movl	(%rbx), %eax
	movq	(%r15), %rcx
	movl	%eax, 92(%rcx)
	movq	(%r15), %rax
	movl	$1, 96(%rax)
	movw	$19236, BasicBlockSignatureTracker # imm = 0x4B24
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_34
.LBB39_30:                              # %Buffer__1
                                        #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21806, %ax             # imm = 0x552E
	cmpw	$8138, %ax              # imm = 0x1FCA
	jne	.LBB39_92
# %bb.31:                               # %copy_input_until_stop.split211
                                        #   in Loop: Header=BB39_4 Depth=1
	movw	$8138, BasicBlockSignatureTracker # imm = 0x1FCA
	movw	$21806, RunTimeSignatureAdjuster # imm = 0x552E
# %bb.32:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$417, %ax               # imm = 0x1A1
	xorw	%cx, %ax
	cmpw	$19269, %ax             # imm = 0x4B45
	jne	.LBB39_92
# %bb.33:                               # %copy_input_until_stop.split267
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
	movw	$19269, BasicBlockSignatureTracker # imm = 0x4B45
	movw	$97, RunTimeSignatureAdjuster
.LBB39_34:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$64, %ax
	xorw	%cx, %ax
	cmpw	$19300, %ax             # imm = 0x4B64
	jne	.LBB39_92
# %bb.35:                               # %copy_input_until_stop.split217
                                        #   in Loop: Header=BB39_4 Depth=1
	movw	$19300, BasicBlockSignatureTracker # imm = 0x4B64
	movw	$440, RunTimeSignatureAdjuster # imm = 0x1B8
.LBB39_36:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$344, %ax               # imm = 0x158
	xorw	%cx, %ax
	cmpw	$19332, %ax             # imm = 0x4B84
	jne	.LBB39_92
# %bb.37:                               # %copy_input_until_stop.split205
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$19332, BasicBlockSignatureTracker # imm = 0x4B84
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB39_40
# %bb.38:                               #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$19383, %ax             # imm = 0x4BB7
	jne	.LBB39_92
# %bb.39:                               # %copy_input_until_stop.split219
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$19383, BasicBlockSignatureTracker # imm = 0x4BB7
	movw	$51, RunTimeSignatureAdjuster
.LBB39_40:                              #   in Loop: Header=BB39_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$71, %ax
	xorw	%cx, %ax
	cmpw	$19395, %ax             # imm = 0x4BC3
	jne	.LBB39_92
# %bb.41:                               # %copy_input_until_stop.split221
                                        #   in Loop: Header=BB39_4 Depth=1
	movw	$19395, BasicBlockSignatureTracker # imm = 0x4BC3
	movw	$420, RunTimeSignatureAdjuster # imm = 0x1A4
	jmp	.LBB39_4
.LBB39_42:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$422, %ax               # imm = 0x1A6
	xorw	%cx, %ax
	cmpw	$19403, %ax             # imm = 0x4BCB
	jne	.LBB39_94
# %bb.43:                               # %copy_input_until_stop.split193
	movw	$19403, BasicBlockSignatureTracker # imm = 0x4BCB
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_90
.LBB39_44:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$391, %ax               # imm = 0x187
	cmpw	$19423, %ax             # imm = 0x4BDF
	jne	.LBB39_94
# %bb.45:                               # %copy_input_until_stop.split185
	movw	$19423, BasicBlockSignatureTracker # imm = 0x4BDF
	movw	$0, RunTimeSignatureAdjuster
.LBB39_46:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$62, %ax
	xorw	%cx, %ax
	cmpw	$19425, %ax             # imm = 0x4BE1
	jne	.LBB39_93
# %bb.47:                               # %copy_input_until_stop.split225
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	108(%rax), %eax
	movq	(%r15), %rcx
	movl	112(%rcx), %ecx
	movw	$19425, BasicBlockSignatureTracker # imm = 0x4BE1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB39_50
# %bb.48:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2032, %ax              # imm = 0x7F0
	cmpw	$19473, %ax             # imm = 0x4C11
	jne	.LBB39_94
# %bb.49:                               # %copy_input_until_stop.split227
	movw	$19473, BasicBlockSignatureTracker # imm = 0x4C11
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_88
.LBB39_50:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2041, %ax              # imm = 0x7F9
	cmpw	$19480, %ax             # imm = 0x4C18
	jne	.LBB39_93
# %bb.51:                               # %copy_input_until_stop.split229
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$19480, BasicBlockSignatureTracker # imm = 0x4C18
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB39_54
# %bb.52:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$19490, %ax             # imm = 0x4C22
	jne	.LBB39_94
# %bb.53:                               # %copy_input_until_stop.split233
	movw	$19490, BasicBlockSignatureTracker # imm = 0x4C22
	movw	$51, RunTimeSignatureAdjuster
	jmp	.LBB39_88
.LBB39_54:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$99, %ax
	cmpw	$19579, %ax             # imm = 0x4C7B
	jne	.LBB39_93
# %bb.55:                               # %copy_input_until_stop.split235
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	16(%rax), %eax
	movw	$19579, BasicBlockSignatureTracker # imm = 0x4C7B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB39_58
# %bb.56:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$241, %ax
	cmpw	$19594, %ax             # imm = 0x4C8A
	jne	.LBB39_94
# %bb.57:                               # %copy_input_until_stop.split237
	movw	$19594, BasicBlockSignatureTracker # imm = 0x4C8A
	movw	$155, RunTimeSignatureAdjuster
	jmp	.LBB39_88
.LBB39_58:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$231, %ax
	cmpw	$19612, %ax             # imm = 0x4C9C
	jne	.LBB39_93
# %bb.59:                               # %copy_input_until_stop.split239
                                        #   in Loop: Header=BB39_46 Depth=1
	movb	$1, (%rsi)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, (%r12)
	movl	(%r12), %eax
	movq	(%r15), %rcx
	movl	92(%rcx), %ecx
	movw	$19612, BasicBlockSignatureTracker # imm = 0x4C9C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB39_66
# %bb.60:                               #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$19613, %ax             # imm = 0x4C9D
	jne	.LBB39_93
# %bb.61:                               # %copy_input_until_stop.split241
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	96(%rax), %eax
	movw	$19613, BasicBlockSignatureTracker # imm = 0x4C9D
	movw	$1, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB39_66
# %bb.62:                               # %Buffer__2
                                        #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-18472, %ax            # imm = 0xB7D8
	cmpw	$-1211, %ax             # imm = 0xFB45
	jne	.LBB39_93
# %bb.63:                               # %copy_input_until_stop.split245
                                        #   in Loop: Header=BB39_46 Depth=1
	movw	$-1211, BasicBlockSignatureTracker # imm = 0xFB45
	movw	$-18472, RunTimeSignatureAdjuster # imm = 0xB7D8
# %bb.64:                               #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$77, %ax
	xorw	%cx, %ax
	cmpw	$19664, %ax             # imm = 0x4CD0
	jne	.LBB39_93
# %bb.65:                               # %copy_input_until_stop.split269
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	92(%rax), %eax
	movb	%al, (%r13)
	movq	(%r15), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	(%r15), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	(%r13), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	(%r15), %rcx
	movl	%eax, 648(%rcx)
	movq	(%r15), %rax
	movq	(%r15), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	(%r13), %al
	movq	(%r15), %rcx
	movq	64(%rcx), %rcx
	movq	(%r15), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	(%r15), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	(%r12), %eax
	movq	(%r15), %rcx
	movl	%eax, 92(%rcx)
	movw	$19664, BasicBlockSignatureTracker # imm = 0x4CD0
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_82
.LBB39_66:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$66, %ax
	xorw	%cx, %ax
	cmpw	$19678, %ax             # imm = 0x4CDE
	jne	.LBB39_93
# %bb.67:                               # %copy_input_until_stop.split243
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	(%r12), %eax
	movq	(%r15), %rcx
	movl	92(%rcx), %ecx
	movw	$19678, BasicBlockSignatureTracker # imm = 0x4CDE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB39_70
# %bb.68:                               #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$19696, %ax             # imm = 0x4CF0
	jne	.LBB39_93
# %bb.69:                               # %copy_input_until_stop.split251
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	96(%rax), %eax
	movw	$19696, BasicBlockSignatureTracker # imm = 0x4CF0
	movw	$46, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jne	.LBB39_76
.LBB39_70:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$498, %ax               # imm = 0x1F2
	xorw	%cx, %ax
	cmpw	$19756, %ax             # imm = 0x4D2C
	jne	.LBB39_93
# %bb.71:                               # %copy_input_until_stop.split249
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	92(%rax), %eax
	movw	$19756, BasicBlockSignatureTracker # imm = 0x4D2C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jae	.LBB39_74
# %bb.72:                               #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$19757, %ax             # imm = 0x4D2D
	jne	.LBB39_93
# %bb.73:                               # %copy_input_until_stop.split255
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rdi
	movw	$19757, BasicBlockSignatureTracker # imm = 0x4D2D
	movw	$1550, RunTimeSignatureAdjuster # imm = 0x60E
	movq	%rsi, %rbx
	callq	add_pair_to_block
	movq	%rbx, %rsi
	movw	$19757, BasicBlockSignatureTracker # imm = 0x4D2D
	movw	$1550, RunTimeSignatureAdjuster # imm = 0x60E
	movw	$19757, BasicBlockSignatureTracker # imm = 0x4D2D
	movw	$1, RunTimeSignatureAdjuster
.LBB39_74:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$110, %ax
	xorw	%cx, %ax
	cmpw	$19778, %ax             # imm = 0x4D42
	jne	.LBB39_93
# %bb.75:                               # %copy_input_until_stop.split257
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	(%r12), %eax
	movq	(%r15), %rcx
	movl	%eax, 92(%rcx)
	movq	(%r15), %rax
	movl	$1, 96(%rax)
	movw	$19778, BasicBlockSignatureTracker # imm = 0x4D42
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB39_80
.LBB39_76:                              # %Buffer__3
                                        #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7304, %ax              # imm = 0x1C88
	cmpw	$20600, %ax             # imm = 0x5078
	jne	.LBB39_93
# %bb.77:                               # %copy_input_until_stop.split253
                                        #   in Loop: Header=BB39_46 Depth=1
	movw	$20600, BasicBlockSignatureTracker # imm = 0x5078
	movw	$7304, RunTimeSignatureAdjuster # imm = 0x1C88
# %bb.78:                               #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$420, %ax               # imm = 0x1A4
	xorw	%cx, %ax
	cmpw	$19796, %ax             # imm = 0x4D54
	jne	.LBB39_93
# %bb.79:                               # %copy_input_until_stop.split271
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
	movw	$19796, BasicBlockSignatureTracker # imm = 0x4D54
	movw	$22, RunTimeSignatureAdjuster
.LBB39_80:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$42, %ax
	xorw	%cx, %ax
	cmpw	$19816, %ax             # imm = 0x4D68
	jne	.LBB39_93
# %bb.81:                               # %copy_input_until_stop.split259
                                        #   in Loop: Header=BB39_46 Depth=1
	movw	$19816, BasicBlockSignatureTracker # imm = 0x4D68
	movw	$440, RunTimeSignatureAdjuster # imm = 0x1B8
.LBB39_82:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$340, %ax               # imm = 0x154
	xorw	%cx, %ax
	cmpw	$19844, %ax             # imm = 0x4D84
	jne	.LBB39_93
# %bb.83:                               # %copy_input_until_stop.split247
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	%rsi, %rdx
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$19844, BasicBlockSignatureTracker # imm = 0x4D84
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB39_86
# %bb.84:                               #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$19895, %ax             # imm = 0x4DB7
	jne	.LBB39_93
# %bb.85:                               # %copy_input_until_stop.split261
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$19895, BasicBlockSignatureTracker # imm = 0x4DB7
	movw	$51, RunTimeSignatureAdjuster
.LBB39_86:                              #   in Loop: Header=BB39_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$56, %ax
	xorw	%cx, %ax
	cmpw	$19900, %ax             # imm = 0x4DBC
	movq	%rdx, %rsi
	jne	.LBB39_93
# %bb.87:                               # %copy_input_until_stop.split263
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	(%r15), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movw	$19900, BasicBlockSignatureTracker # imm = 0x4DBC
	movw	$1635, RunTimeSignatureAdjuster # imm = 0x663
	jmp	.LBB39_46
.LBB39_88:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$478, %ax               # imm = 0x1DE
	xorw	%cx, %ax
	cmpw	$19919, %ax             # imm = 0x4DCF
	jne	.LBB39_94
# %bb.89:                               # %copy_input_until_stop.split231
	movw	$19919, BasicBlockSignatureTracker # imm = 0x4DCF
	movw	$1540, RunTimeSignatureAdjuster # imm = 0x604
.LBB39_90:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1515, %ax              # imm = 0x5EB
	xorw	%cx, %ax
	cmpw	$20000, %ax             # imm = 0x4E20
	jne	.LBB39_94
# %bb.91:                               # %copy_input_until_stop.split223
	movb	(%rsi), %al
	movw	$20000, BasicBlockSignatureTracker # imm = 0x4E20
	movw	$2537, RunTimeSignatureAdjuster # imm = 0x9E9
	movzbl	%al, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB39_92:                              # %CFerrorHandler.copy_input_until_stop.loopexit
	jmp	.LBB39_94
.LBB39_93:                              # %CFerrorHandler.copy_input_until_stop.loopexit1
	jmp	.LBB39_94
.LBB39_94:                              # %CFerrorHandler.copy_input_until_stop
	callq	FAULT_DETECTED_CFC
.Lfunc_end39:
	.size	copy_input_until_stop, .Lfunc_end39-copy_input_until_stop
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function flush_RL
	.type	flush_RL,@function
flush_RL:                               # @flush_RL
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1609, %ax              # imm = 0x649
	xorw	%cx, %ax
	cmpw	$20046, %ax             # imm = 0x4E4E
	jne	.LBB40_6
# %bb.1:                                # %flush_RL.split
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%rbx)
	movq	(%rbx), %rax
	movl	92(%rax), %eax
	movw	$20046, BasicBlockSignatureTracker # imm = 0x4E4E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jae	.LBB40_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$20083, %ax             # imm = 0x4E73
	jne	.LBB40_6
# %bb.3:                                # %flush_RL.split11
	movq	(%rbx), %rdi
	movw	$20083, BasicBlockSignatureTracker # imm = 0x4E73
	movw	$1360, RunTimeSignatureAdjuster # imm = 0x550
	callq	add_pair_to_block
	movw	$20083, BasicBlockSignatureTracker # imm = 0x4E73
	movw	$1360, RunTimeSignatureAdjuster # imm = 0x550
	movw	$20083, BasicBlockSignatureTracker # imm = 0x4E73
	movw	$61, RunTimeSignatureAdjuster
.LBB40_4:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$220, %ax
	xorw	%cx, %ax
	cmpw	$20114, %ax             # imm = 0x4E92
	jne	.LBB40_6
# %bb.5:                                # %flush_RL.split13
	movq	(%rbx), %rdi
	movw	$20114, BasicBlockSignatureTracker # imm = 0x4E92
	movw	$3591, RunTimeSignatureAdjuster # imm = 0xE07
	callq	init_RL
	movw	$20114, BasicBlockSignatureTracker # imm = 0x4E92
	movw	$3591, RunTimeSignatureAdjuster # imm = 0xE07
	movw	$20114, BasicBlockSignatureTracker # imm = 0x4E92
	movw	$1684, RunTimeSignatureAdjuster # imm = 0x694
	leaq	-8(%rbp), %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB40_6:                               # %CFerrorHandler.flush_RL
	callq	FAULT_DETECTED_CFC
.Lfunc_end40:
	.size	flush_RL, .Lfunc_end40-flush_RL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block
	.type	add_pair_to_block,@function
add_pair_to_block:                      # @add_pair_to_block
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1408, %ax              # imm = 0x580
	xorw	%cx, %ax
	cmpw	$20131, %ax             # imm = 0x4EA3
	jne	.LBB41_25
# %bb.1:                                # %add_pair_to_block.split46
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1408, %ax              # imm = 0x580
	xorw	%cx, %ax
	cmpw	$20131, %ax             # imm = 0x4EA3
	jne	.LBB41_25
# %bb.2:                                # %add_pair_to_block.split44
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1408, %ax              # imm = 0x580
	xorw	%cx, %ax
	cmpw	$20131, %ax             # imm = 0x4EA3
	jne	.LBB41_25
# %bb.3:                                # %add_pair_to_block.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rsi
	movl	92(%rsi), %esi
	movb	%sil, (%rcx)
	movl	$0, (%rdx)
	movw	$20131, BasicBlockSignatureTracker # imm = 0x4EA3
	movw	$0, RunTimeSignatureAdjuster
.LBB41_4:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %si
	movw	RunTimeSignatureAdjuster, %di
	xorw	$4, %si
	xorw	%di, %si
	cmpw	$20135, %si             # imm = 0x4EA7
	jne	.LBB41_24
# %bb.5:                                # %add_pair_to_block.split48
                                        #   in Loop: Header=BB41_4 Depth=1
	movl	(%rdx), %esi
	movq	(%rax), %rdi
	movl	96(%rdi), %edi
	movw	$20135, BasicBlockSignatureTracker # imm = 0x4EA7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %esi
	jge	.LBB41_10
# %bb.6:                                #   in Loop: Header=BB41_4 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$14, %si
	cmpw	$20137, %si             # imm = 0x4EA9
	jne	.LBB41_24
# %bb.7:                                # %add_pair_to_block.split50
                                        #   in Loop: Header=BB41_4 Depth=1
	movq	(%rax), %rsi
	movl	648(%rsi), %r8d
	shll	$8, %r8d
	movq	(%rax), %rdi
	movl	648(%rdi), %edi
	shrl	$24, %edi
	movzbl	(%rcx), %esi
	xorl	%esi, %edi
	movl	%edi, %esi
	xorl	BZ2_crc32Table(,%rsi,4), %r8d
	movq	(%rax), %rsi
	movl	%r8d, 648(%rsi)
	movw	$20137, BasicBlockSignatureTracker # imm = 0x4EA9
	movw	$0, RunTimeSignatureAdjuster
# %bb.8:                                #   in Loop: Header=BB41_4 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$3, %si
	cmpw	$20138, %si             # imm = 0x4EAA
	jne	.LBB41_24
# %bb.9:                                # %add_pair_to_block.split54
                                        #   in Loop: Header=BB41_4 Depth=1
	movl	(%rdx), %esi
	addl	$1, %esi
	movl	%esi, (%rdx)
	movw	$20138, BasicBlockSignatureTracker # imm = 0x4EAA
	movw	$9, RunTimeSignatureAdjuster
	jmp	.LBB41_4
.LBB41_10:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$118, %dx
	cmpw	$20177, %dx             # imm = 0x4ED1
	jne	.LBB41_25
# %bb.11:                               # %add_pair_to_block.split52
	movq	(%rax), %rdx
	movl	92(%rdx), %esi
	movb	$1, 128(%rdx,%rsi)
	movq	(%rax), %rdx
	movl	96(%rdx), %edx
	movw	$20177, BasicBlockSignatureTracker(%rip) # imm = 0x4ED1
	movw	$0, RunTimeSignatureAdjuster(%rip)
	movl	%edx, %esi
	subl	$1, %esi
	je	.LBB41_14
	jmp	.LBB41_12
.LBB41_12:                              # %add_pair_to_block.split52
	movl	%edx, %esi
	subl	$2, %esi
	je	.LBB41_16
	jmp	.LBB41_13
.LBB41_13:                              # %add_pair_to_block.split52
	subl	$3, %edx
	je	.LBB41_18
	jmp	.LBB41_20
.LBB41_14:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$2, %dx
	cmpw	$20179, %dx             # imm = 0x4ED3
	jne	.LBB41_25
# %bb.15:                               # %add_pair_to_block.split58
	movb	(%rcx), %cl
	movq	(%rax), %rdx
	movq	64(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	108(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movw	$20179, BasicBlockSignatureTracker # imm = 0x4ED3
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB41_22
.LBB41_16:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$7, %dx
	cmpw	$20182, %dx             # imm = 0x4ED6
	jne	.LBB41_25
# %bb.17:                               # %add_pair_to_block.split60
	movb	(%rcx), %dl
	movq	(%rax), %rsi
	movq	64(%rsi), %rsi
	movq	(%rax), %rdi
	movslq	108(%rdi), %rdi
	movb	%dl, (%rsi,%rdi)
	movq	(%rax), %rdx
	movl	108(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 108(%rdx)
	movb	(%rcx), %cl
	movq	(%rax), %rdx
	movq	64(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	108(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movw	$20182, BasicBlockSignatureTracker # imm = 0x4ED6
	movw	$5, RunTimeSignatureAdjuster
	jmp	.LBB41_22
.LBB41_18:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$61, %dx
	cmpw	$20204, %dx             # imm = 0x4EEC
	jne	.LBB41_25
# %bb.19:                               # %add_pair_to_block.split62
	movb	(%rcx), %dl
	movq	(%rax), %rsi
	movq	64(%rsi), %rsi
	movq	(%rax), %rdi
	movslq	108(%rdi), %rdi
	movb	%dl, (%rsi,%rdi)
	movq	(%rax), %rdx
	movl	108(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 108(%rdx)
	movb	(%rcx), %dl
	movq	(%rax), %rsi
	movq	64(%rsi), %rsi
	movq	(%rax), %rdi
	movslq	108(%rdi), %rdi
	movb	%dl, (%rsi,%rdi)
	movq	(%rax), %rdx
	movl	108(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 108(%rdx)
	movb	(%rcx), %cl
	movq	(%rax), %rdx
	movq	64(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	108(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movw	$20204, BasicBlockSignatureTracker # imm = 0x4EEC
	movw	$63, RunTimeSignatureAdjuster
	jmp	.LBB41_22
.LBB41_20:
	movw	BasicBlockSignatureTracker, %dx
	xorw	$41, %dx
	cmpw	$20216, %dx             # imm = 0x4EF8
	jne	.LBB41_25
# %bb.21:                               # %add_pair_to_block.split56
	movq	(%rax), %rdx
	movq	(%rax), %rsi
	movl	96(%rsi), %esi
	subl	$4, %esi
	movslq	%esi, %rsi
	movb	$1, 128(%rdx,%rsi)
	movb	(%rcx), %dl
	movq	(%rax), %rsi
	movq	64(%rsi), %rsi
	movq	(%rax), %rdi
	movslq	108(%rdi), %rdi
	movb	%dl, (%rsi,%rdi)
	movq	(%rax), %rdx
	movl	108(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 108(%rdx)
	movb	(%rcx), %dl
	movq	(%rax), %rsi
	movq	64(%rsi), %rsi
	movq	(%rax), %rdi
	movslq	108(%rdi), %rdi
	movb	%dl, (%rsi,%rdi)
	movq	(%rax), %rdx
	movl	108(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 108(%rdx)
	movb	(%rcx), %dl
	movq	(%rax), %rsi
	movq	64(%rsi), %rsi
	movq	(%rax), %rdi
	movslq	108(%rdi), %rdi
	movb	%dl, (%rsi,%rdi)
	movq	(%rax), %rdx
	movl	108(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 108(%rdx)
	movb	(%rcx), %cl
	movq	(%rax), %rdx
	movq	64(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	108(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rcx
	movl	108(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 108(%rcx)
	movq	(%rax), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movq	(%rax), %rdx
	movq	64(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	108(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movw	$20216, BasicBlockSignatureTracker # imm = 0x4EF8
	movw	$43, RunTimeSignatureAdjuster
.LBB41_22:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$479, %ax               # imm = 0x1DF
	xorw	%cx, %ax
	cmpw	$20236, %ax             # imm = 0x4F0C
	jne	.LBB41_25
# %bb.23:                               # %add_pair_to_block.split64
	movw	$20236, BasicBlockSignatureTracker # imm = 0x4F0C
	movw	$1521, RunTimeSignatureAdjuster # imm = 0x5F1
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB41_24:                              # %CFerrorHandler.add_pair_to_block.loopexit
	jmp	.LBB41_25
.LBB41_25:                              # %CFerrorHandler.add_pair_to_block
	callq	FAULT_DETECTED_CFC
.Lfunc_end41:
	.size	add_pair_to_block, .Lfunc_end41-add_pair_to_block
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd       # -- Begin function BZ2_bzCompressEnd
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd,@function
BZ2_bzCompressEnd:                      # @BZ2_bzCompressEnd
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15376, %ax             # imm = 0x3C10
	xorw	%cx, %ax
	cmpw	$20254, %ax             # imm = 0x4F1E
	jne	.LBB42_31
# %bb.1:                                # %BZ2_bzCompressEnd.split95
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15376, %ax             # imm = 0x3C10
	xorw	%cx, %ax
	cmpw	$20254, %ax             # imm = 0x4F1E
	jne	.LBB42_31
# %bb.2:                                # %BZ2_bzCompressEnd.split93
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15376, %ax             # imm = 0x3C10
	xorw	%cx, %ax
	cmpw	$20254, %ax             # imm = 0x4F1E
	jne	.LBB42_31
# %bb.3:                                # %BZ2_bzCompressEnd.split91
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15376, %ax             # imm = 0x3C10
	xorw	%cx, %ax
	cmpw	$20254, %ax             # imm = 0x4F1E
	jne	.LBB42_31
# %bb.4:                                # %BZ2_bzCompressEnd.split89
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%rbx)
	movq	(%rbx), %rax
	movw	$20254, BasicBlockSignatureTracker # imm = 0x4F1E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB42_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$20260, %ax             # imm = 0x4F24
	jne	.LBB42_31
# %bb.6:                                # %BZ2_bzCompressEnd.split
	movl	$-2, (%r14)
	movw	$20260, BasicBlockSignatureTracker # imm = 0x4F24
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB42_29
.LBB42_7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$149, %ax
	cmpw	$20363, %ax             # imm = 0x4F8B
	jne	.LBB42_31
# %bb.8:                                # %BZ2_bzCompressEnd.split65
	movq	(%rbx), %rax
	movq	48(%rax), %rax
	movq	%rax, (%r15)
	movq	(%r15), %rax
	movw	$20363, BasicBlockSignatureTracker # imm = 0x4F8B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB42_11
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$20411, %ax             # imm = 0x4FBB
	jne	.LBB42_31
# %bb.10:                               # %BZ2_bzCompressEnd.split69
	movl	$-2, (%r14)
	movw	$20411, BasicBlockSignatureTracker # imm = 0x4FBB
	movw	$159, RunTimeSignatureAdjuster
	jmp	.LBB42_29
.LBB42_11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$124, %ax
	cmpw	$20471, %ax             # imm = 0x4FF7
	jne	.LBB42_31
# %bb.12:                               # %BZ2_bzCompressEnd.split71
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	(%rbx), %rcx
	movw	$20471, BasicBlockSignatureTracker # imm = 0x4FF7
	movw	$0, RunTimeSignatureAdjuster
	cmpq	%rcx, %rax
	je	.LBB42_15
# %bb.13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8186, %ax              # imm = 0x1FFA
	cmpw	$20493, %ax             # imm = 0x500D
	jne	.LBB42_31
# %bb.14:                               # %BZ2_bzCompressEnd.split73
	movl	$-2, (%r14)
	movw	$20493, BasicBlockSignatureTracker # imm = 0x500D
	movw	$7977, RunTimeSignatureAdjuster # imm = 0x1F29
	jmp	.LBB42_29
.LBB42_15:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8168, %ax              # imm = 0x1FE8
	cmpw	$20511, %ax             # imm = 0x501F
	jne	.LBB42_31
# %bb.16:                               # %BZ2_bzCompressEnd.split75
	movq	(%r15), %rax
	movq	24(%rax), %rax
	movw	$20511, BasicBlockSignatureTracker # imm = 0x501F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB42_19
# %bb.17:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$20535, %ax             # imm = 0x5037
	jne	.LBB42_31
# %bb.18:                               # %BZ2_bzCompressEnd.split77
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%r15), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
	movw	$20535, BasicBlockSignatureTracker # imm = 0x5037
	movw	$40, RunTimeSignatureAdjuster
.LBB42_19:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$20539, %ax             # imm = 0x503B
	jne	.LBB42_31
# %bb.20:                               # %BZ2_bzCompressEnd.split79
	movq	(%r15), %rax
	movq	32(%rax), %rax
	movw	$20539, BasicBlockSignatureTracker # imm = 0x503B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB42_23
# %bb.21:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$77, %ax
	cmpw	$20598, %ax             # imm = 0x5076
	jne	.LBB42_31
# %bb.22:                               # %BZ2_bzCompressEnd.split81
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%r15), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
	movw	$20598, BasicBlockSignatureTracker # imm = 0x5076
	movw	$77, RunTimeSignatureAdjuster
.LBB42_23:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$66, %ax
	xorw	%cx, %ax
	cmpw	$20601, %ax             # imm = 0x5079
	jne	.LBB42_31
# %bb.24:                               # %BZ2_bzCompressEnd.split83
	movq	(%r15), %rax
	movq	40(%rax), %rax
	movw	$20601, BasicBlockSignatureTracker # imm = 0x5079
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB42_27
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$20605, %ax             # imm = 0x507D
	jne	.LBB42_31
# %bb.26:                               # %BZ2_bzCompressEnd.split85
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%r15), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
	movw	$20605, BasicBlockSignatureTracker # imm = 0x507D
	movw	$4, RunTimeSignatureAdjuster
.LBB42_27:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$233, %ax
	xorw	%cx, %ax
	cmpw	$20624, %ax             # imm = 0x5090
	jne	.LBB42_31
# %bb.28:                               # %BZ2_bzCompressEnd.split87
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%rbx), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	(%rbx), %rax
	movq	$0, 48(%rax)
	movl	$0, (%r14)
	movw	$20624, BasicBlockSignatureTracker # imm = 0x5090
	movw	$8116, RunTimeSignatureAdjuster # imm = 0x1FB4
.LBB42_29:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8112, %ax              # imm = 0x1FB0
	xorw	%cx, %ax
	cmpw	$20628, %ax             # imm = 0x5094
	jne	.LBB42_31
# %bb.30:                               # %BZ2_bzCompressEnd.split67
	movl	(%r14), %eax
	movw	$20628, BasicBlockSignatureTracker # imm = 0x5094
	movw	$8751, RunTimeSignatureAdjuster # imm = 0x222F
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB42_31:                              # %CFerrorHandler.BZ2_bzCompressEnd
	callq	FAULT_DETECTED_CFC
.Lfunc_end42:
	.size	BZ2_bzCompressEnd, .Lfunc_end42-BZ2_bzCompressEnd
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit    # -- Begin function BZ2_bzDecompressInit
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit,@function
BZ2_bzDecompressInit:                   # @BZ2_bzDecompressInit
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4124, %ax              # imm = 0x101C
	xorw	%cx, %ax
	cmpw	$20711, %ax             # imm = 0x50E7
	jne	.LBB43_41
# %bb.1:                                # %BZ2_bzDecompressInit.split114
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4124, %ax              # imm = 0x101C
	xorw	%cx, %ax
	cmpw	$20711, %ax             # imm = 0x50E7
	jne	.LBB43_41
# %bb.2:                                # %BZ2_bzDecompressInit.split112
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rdi, (%r13)
	movl	%esi, (%r15)
	movl	%edx, (%rbx)
	movw	$20711, BasicBlockSignatureTracker # imm = 0x50E7
	movw	$28371, RunTimeSignatureAdjuster # imm = 0x6ED3
	callq	bz_config_ok
	movw	$20711, BasicBlockSignatureTracker # imm = 0x50E7
	movw	$28371, RunTimeSignatureAdjuster # imm = 0x6ED3
	movw	$20711, BasicBlockSignatureTracker # imm = 0x50E7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB43_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$20717, %ax             # imm = 0x50ED
	jne	.LBB43_41
# %bb.4:                                # %BZ2_bzDecompressInit.split80
	movl	$-9, (%r14)
	movw	$20717, BasicBlockSignatureTracker # imm = 0x50ED
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB43_39
.LBB43_5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$475, %ax               # imm = 0x1DB
	cmpw	$20796, %ax             # imm = 0x513C
	jne	.LBB43_41
# %bb.6:                                # %BZ2_bzDecompressInit.split
	movq	(%r13), %rax
	movw	$20796, BasicBlockSignatureTracker # imm = 0x513C
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB43_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$70, %ax
	cmpw	$20858, %ax             # imm = 0x517A
	jne	.LBB43_41
# %bb.8:                                # %BZ2_bzDecompressInit.split84
	movl	$-2, (%r14)
	movw	$20858, BasicBlockSignatureTracker # imm = 0x517A
	movw	$407, RunTimeSignatureAdjuster # imm = 0x197
	jmp	.LBB43_39
.LBB43_9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$66, %ax
	cmpw	$20862, %ax             # imm = 0x517E
	jne	.LBB43_41
# %bb.10:                               # %BZ2_bzDecompressInit.split86
	movl	(%rbx), %eax
	movw	$20862, BasicBlockSignatureTracker # imm = 0x517E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB43_17
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$252, %ax
	cmpw	$20866, %ax             # imm = 0x5182
	jne	.LBB43_41
# %bb.12:                               # %BZ2_bzDecompressInit.split88
	movl	(%rbx), %eax
	movw	$20866, BasicBlockSignatureTracker # imm = 0x5182
	movw	$252, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB43_17
# %bb.13:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-3789, %ax             # imm = 0xF133
	cmpw	$-24399, %ax            # imm = 0xA0B1
	jne	.LBB43_41
# %bb.14:                               # %BZ2_bzDecompressInit.split92
	movw	$-24399, BasicBlockSignatureTracker # imm = 0xA0B1
	movw	$-3789, RunTimeSignatureAdjuster # imm = 0xF133
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$20918, %ax             # imm = 0x51B6
	jne	.LBB43_41
# %bb.16:                               # %BZ2_bzDecompressInit.split116
	movl	$-2, (%r14)
	movw	$20918, BasicBlockSignatureTracker # imm = 0x51B6
	movw	$347, RunTimeSignatureAdjuster # imm = 0x15B
	jmp	.LBB43_39
.LBB43_17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$176, %ax
	xorw	%cx, %ax
	cmpw	$20942, %ax             # imm = 0x51CE
	jne	.LBB43_41
# %bb.18:                               # %BZ2_bzDecompressInit.split90
	movl	(%r15), %eax
	movw	$20942, BasicBlockSignatureTracker # imm = 0x51CE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB43_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$38, %ax
	cmpw	$20968, %ax             # imm = 0x51E8
	jne	.LBB43_41
# %bb.20:                               # %BZ2_bzDecompressInit.split96
	movl	(%r15), %eax
	movw	$20968, BasicBlockSignatureTracker # imm = 0x51E8
	movw	$38, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jle	.LBB43_23
.LBB43_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$48, %ax
	xorw	%cx, %ax
	cmpw	$20990, %ax             # imm = 0x51FE
	jne	.LBB43_41
# %bb.22:                               # %BZ2_bzDecompressInit.split94
	movl	$-2, (%r14)
	movw	$20990, BasicBlockSignatureTracker # imm = 0x51FE
	movw	$275, RunTimeSignatureAdjuster # imm = 0x113
	jmp	.LBB43_39
.LBB43_23:                              # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9883, %ax              # imm = 0x269B
	cmpw	$30579, %ax             # imm = 0x7773
	jne	.LBB43_41
# %bb.24:                               # %BZ2_bzDecompressInit.split98
	movw	$30579, BasicBlockSignatureTracker # imm = 0x7773
	movw	$9883, RunTimeSignatureAdjuster # imm = 0x269B
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1017, %ax              # imm = 0x3F9
	xorw	%cx, %ax
	cmpw	$21009, %ax             # imm = 0x5211
	jne	.LBB43_41
# %bb.26:                               # %BZ2_bzDecompressInit.split118
	movq	(%r13), %rax
	movq	56(%rax), %rax
	movw	$21009, BasicBlockSignatureTracker # imm = 0x5211
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB43_29
# %bb.27:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$119, %ax
	cmpw	$21094, %ax             # imm = 0x5266
	jne	.LBB43_41
# %bb.28:                               # %BZ2_bzDecompressInit.split100
	movabsq	$default_bzalloc, %rax
	movq	(%r13), %rcx
	movq	%rax, 56(%rcx)
	movw	$21094, BasicBlockSignatureTracker # imm = 0x5266
	movw	$119, RunTimeSignatureAdjuster
.LBB43_29:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$120, %ax
	xorw	%cx, %ax
	cmpw	$21097, %ax             # imm = 0x5269
	jne	.LBB43_41
# %bb.30:                               # %BZ2_bzDecompressInit.split102
	movq	(%r13), %rax
	movq	64(%rax), %rax
	movw	$21097, BasicBlockSignatureTracker # imm = 0x5269
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB43_33
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$21099, %ax             # imm = 0x526B
	jne	.LBB43_41
# %bb.32:                               # %BZ2_bzDecompressInit.split104
	movabsq	$default_bzfree, %rax
	movq	(%r13), %rcx
	movq	%rax, 64(%rcx)
	movw	$21099, BasicBlockSignatureTracker # imm = 0x526B
	movw	$2, RunTimeSignatureAdjuster
.LBB43_33:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$22, %ax
	xorw	%cx, %ax
	cmpw	$21119, %ax             # imm = 0x527F
	jne	.LBB43_41
# %bb.34:                               # %BZ2_bzDecompressInit.split106
	movq	(%r13), %rax
	movq	56(%rax), %rax
	movq	(%r13), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, (%r12)
	movq	(%r12), %rax
	movw	$21119, BasicBlockSignatureTracker # imm = 0x527F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB43_37
# %bb.35:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$229, %ax
	cmpw	$21146, %ax             # imm = 0x529A
	jne	.LBB43_41
# %bb.36:                               # %BZ2_bzDecompressInit.split108
	movl	$-3, (%r14)
	movw	$21146, BasicBlockSignatureTracker # imm = 0x529A
	movw	$631, RunTimeSignatureAdjuster # imm = 0x277
	jmp	.LBB43_39
.LBB43_37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$204, %ax
	cmpw	$21171, %ax             # imm = 0x52B3
	jne	.LBB43_41
# %bb.38:                               # %BZ2_bzDecompressInit.split110
	movq	(%r13), %rax
	movq	(%r12), %rcx
	movq	%rax, (%rcx)
	movq	(%r12), %rax
	movq	(%r13), %rcx
	movq	%rax, 48(%rcx)
	movq	(%r12), %rax
	movl	$10, 8(%rax)
	movq	(%r12), %rax
	movl	$0, 36(%rax)
	movq	(%r12), %rax
	movl	$0, 32(%rax)
	movq	(%r12), %rax
	movl	$0, 3188(%rax)
	movq	(%r13), %rax
	movl	$0, 12(%rax)
	movq	(%r13), %rax
	movl	$0, 16(%rax)
	movq	(%r13), %rax
	movl	$0, 36(%rax)
	movq	(%r13), %rax
	movl	$0, 40(%rax)
	movl	(%rbx), %eax
	movq	(%r12), %rcx
	movb	%al, 44(%rcx)
	movq	(%r12), %rax
	movq	$0, 3168(%rax)
	movq	(%r12), %rax
	movq	$0, 3160(%rax)
	movq	(%r12), %rax
	movq	$0, 3152(%rax)
	movq	(%r12), %rax
	movl	$0, 48(%rax)
	movl	(%r15), %eax
	movq	(%r12), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, (%r14)
	movw	$21171, BasicBlockSignatureTracker # imm = 0x52B3
	movw	$606, RunTimeSignatureAdjuster # imm = 0x25E
.LBB43_39:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$524, %ax               # imm = 0x20C
	xorw	%cx, %ax
	cmpw	$21217, %ax             # imm = 0x52E1
	jne	.LBB43_41
# %bb.40:                               # %BZ2_bzDecompressInit.split82
	movl	(%r14), %eax
	movw	$21217, BasicBlockSignatureTracker # imm = 0x52E1
	movw	$9280, RunTimeSignatureAdjuster # imm = 0x2440
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB43_41:                              # %CFerrorHandler.BZ2_bzDecompressInit
	callq	FAULT_DETECTED_CFC
.Lfunc_end43:
	.size	BZ2_bzDecompressInit, .Lfunc_end43-BZ2_bzDecompressInit
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF          # -- Begin function BZ2_indexIntoF
	.p2align	4, 0x90
	.type	BZ2_indexIntoF,@function
BZ2_indexIntoF:                         # @BZ2_indexIntoF
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.1:                                # %BZ2_indexIntoF.split117
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.2:                                # %BZ2_indexIntoF.split115
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.3:                                # %BZ2_indexIntoF.split113
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.4:                                # %BZ2_indexIntoF.split111
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.5:                                # %BZ2_indexIntoF.split109
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.6:                                # %BZ2_indexIntoF.split107
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.7:                                # %BZ2_indexIntoF.split105
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.8:                                # %BZ2_indexIntoF.split103
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.9:                                # %BZ2_indexIntoF.split101
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.10:                               # %BZ2_indexIntoF.split99
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.11:                               # %BZ2_indexIntoF.split97
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2848, %ax              # imm = 0xB20
	xorw	%cx, %ax
	cmpw	$21260, %ax             # imm = 0x530C
	jne	.LBB44_28
# %bb.12:                               # %BZ2_indexIntoF.split95
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movl	%edi, (%r9)
	movq	%rsi, (%rdx)
	movl	$0, (%r8)
	movl	$256, (%rax)            # imm = 0x100
	movw	$21260, BasicBlockSignatureTracker # imm = 0x530C
	movw	$0, RunTimeSignatureAdjuster
.LBB44_13:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %si
	movw	RunTimeSignatureAdjuster, %di
	xorw	$44, %si
	xorw	%di, %si
	cmpw	$21280, %si             # imm = 0x5320
	jne	.LBB44_27
# %bb.14:                               # %BZ2_indexIntoF.split
                                        #   in Loop: Header=BB44_13 Depth=1
	movl	(%r8), %esi
	addl	(%rax), %esi
	sarl	$1, %esi
	movl	%esi, (%rcx)
	movl	(%r9), %r10d
	movq	(%rdx), %rdi
	movslq	(%rcx), %rsi
	movl	(%rdi,%rsi,4), %esi
	movw	$21280, BasicBlockSignatureTracker # imm = 0x5320
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%esi, %r10d
	jl	.LBB44_17
# %bb.15:                               #   in Loop: Header=BB44_13 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$13, %si
	cmpw	$21293, %si             # imm = 0x532D
	jne	.LBB44_27
# %bb.16:                               # %BZ2_indexIntoF.split85
                                        #   in Loop: Header=BB44_13 Depth=1
	movl	(%rcx), %esi
	movl	%esi, (%r8)
	movw	$21293, BasicBlockSignatureTracker # imm = 0x532D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB44_19
.LBB44_17:                              #   in Loop: Header=BB44_13 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$73, %si
	cmpw	$21353, %si             # imm = 0x5369
	jne	.LBB44_27
# %bb.18:                               # %BZ2_indexIntoF.split87
                                        #   in Loop: Header=BB44_13 Depth=1
	movl	(%rcx), %esi
	movl	%esi, (%rax)
	movw	$21353, BasicBlockSignatureTracker # imm = 0x5369
	movw	$68, RunTimeSignatureAdjuster
.LBB44_19:                              #   in Loop: Header=BB44_13 Depth=1
	movw	BasicBlockSignatureTracker, %si
	movw	RunTimeSignatureAdjuster, %di
	xorw	$177, %si
	xorw	%di, %si
	cmpw	$21404, %si             # imm = 0x539C
	jne	.LBB44_27
# %bb.20:                               # %BZ2_indexIntoF.split89
                                        #   in Loop: Header=BB44_13 Depth=1
	movw	$21404, BasicBlockSignatureTracker # imm = 0x539C
	movw	$0, RunTimeSignatureAdjuster
# %bb.21:                               #   in Loop: Header=BB44_13 Depth=1
	movw	BasicBlockSignatureTracker, %si
	xorw	$55, %si
	cmpw	$21419, %si             # imm = 0x53AB
	jne	.LBB44_27
# %bb.22:                               # %BZ2_indexIntoF.split91
                                        #   in Loop: Header=BB44_13 Depth=1
	movl	(%rax), %esi
	subl	(%r8), %esi
	movw	$21419, BasicBlockSignatureTracker # imm = 0x53AB
	movw	$167, RunTimeSignatureAdjuster
	cmpl	$1, %esi
	jne	.LBB44_13
# %bb.23:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-17249, %ax            # imm = 0xBC9F
	cmpw	$-4300, %ax             # imm = 0xEF34
	jne	.LBB44_28
# %bb.24:                               # %BZ2_indexIntoF.split93
	movw	$-4300, BasicBlockSignatureTracker # imm = 0xEF34
	movw	$-17249, RunTimeSignatureAdjuster # imm = 0xBC9F
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$97, %ax
	xorw	%cx, %ax
	cmpw	$21450, %ax             # imm = 0x53CA
	jne	.LBB44_28
# %bb.26:                               # %BZ2_indexIntoF.split119
	movl	(%r8), %eax
	movw	$21450, BasicBlockSignatureTracker # imm = 0x53CA
	movw	$3053, RunTimeSignatureAdjuster # imm = 0xBED
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB44_27:                              # %CFerrorHandler.BZ2_indexIntoF.loopexit
	jmp	.LBB44_28
.LBB44_28:                              # %CFerrorHandler.BZ2_indexIntoF
	callq	FAULT_DETECTED_CFC
.Lfunc_end44:
	.size	BZ2_indexIntoF, .Lfunc_end44-BZ2_indexIntoF
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress        # -- Begin function BZ2_bzDecompress
	.p2align	4, 0x90
	.type	BZ2_bzDecompress,@function
BZ2_bzDecompress:                       # @BZ2_bzDecompress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10393, %ax             # imm = 0x2899
	xorw	%cx, %ax
	cmpw	$21477, %ax             # imm = 0x53E5
	jne	.LBB45_80
# %bb.1:                                # %BZ2_bzDecompress.split216
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10393, %ax             # imm = 0x2899
	xorw	%cx, %ax
	cmpw	$21477, %ax             # imm = 0x53E5
	jne	.LBB45_80
# %bb.2:                                # %BZ2_bzDecompress.split214
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rcx
	movw	$21477, BasicBlockSignatureTracker # imm = 0x53E5
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	jne	.LBB45_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$21493, %ax             # imm = 0x53F5
	jne	.LBB45_80
# %bb.4:                                # %BZ2_bzDecompress.split
	movl	$-2, (%r14)
	movw	$21493, BasicBlockSignatureTracker # imm = 0x53F5
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB45_77
.LBB45_5:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$28, %cx
	cmpw	$21497, %cx             # imm = 0x53F9
	jne	.LBB45_80
# %bb.6:                                # %BZ2_bzDecompress.split142
	movq	(%rax), %rcx
	movq	48(%rcx), %rcx
	movq	%rcx, (%rbx)
	movq	(%rbx), %rcx
	movw	$21497, BasicBlockSignatureTracker # imm = 0x53F9
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	jne	.LBB45_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$21501, %ax             # imm = 0x53FD
	jne	.LBB45_80
# %bb.8:                                # %BZ2_bzDecompress.split146
	movl	$-2, (%r14)
	movw	$21501, BasicBlockSignatureTracker # imm = 0x53FD
	movw	$8, RunTimeSignatureAdjuster
	jmp	.LBB45_77
.LBB45_9:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$1977, %cx              # imm = 0x7B9
	cmpw	$21568, %cx             # imm = 0x5440
	jne	.LBB45_80
# %bb.10:                               # %BZ2_bzDecompress.split148
	movq	(%rbx), %rcx
	movq	(%rcx), %rcx
	movq	(%rax), %rax
	movw	$21568, BasicBlockSignatureTracker # imm = 0x5440
	movw	$0, RunTimeSignatureAdjuster
	cmpq	%rax, %rcx
	je	.LBB45_13
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$21582, %ax             # imm = 0x544E
	jne	.LBB45_80
# %bb.12:                               # %BZ2_bzDecompress.split150
	movl	$-2, (%r14)
	movw	$21582, BasicBlockSignatureTracker # imm = 0x544E
	movw	$1979, RunTimeSignatureAdjuster # imm = 0x7BB
	jmp	.LBB45_77
.LBB45_13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$21611, %ax             # imm = 0x546B
	jne	.LBB45_80
# %bb.14:                               # %BZ2_bzDecompress.split152
	movw	$21611, BasicBlockSignatureTracker # imm = 0x546B
	movw	$0, RunTimeSignatureAdjuster
.LBB45_15:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$251, %ax
	xorw	%cx, %ax
	cmpw	$21648, %ax             # imm = 0x5490
	jne	.LBB45_79
# %bb.16:                               # %BZ2_bzDecompress.split154
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$21648, BasicBlockSignatureTracker # imm = 0x5490
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB45_19
# %bb.17:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$21658, %ax             # imm = 0x549A
	jne	.LBB45_80
# %bb.18:                               # %BZ2_bzDecompress.split156
	movl	$-1, (%r14)
	movw	$21658, BasicBlockSignatureTracker # imm = 0x549A
	movw	$1903, RunTimeSignatureAdjuster # imm = 0x76F
	jmp	.LBB45_77
.LBB45_19:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$21667, %ax             # imm = 0x54A3
	jne	.LBB45_79
# %bb.20:                               # %BZ2_bzDecompress.split158
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$21667, BasicBlockSignatureTracker # imm = 0x54A3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jne	.LBB45_55
# %bb.21:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$93, %ax
	cmpw	$21758, %ax             # imm = 0x54FE
	jne	.LBB45_79
# %bb.22:                               # %BZ2_bzDecompress.split160
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movb	44(%rax), %al
	movw	$21758, BasicBlockSignatureTracker # imm = 0x54FE
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB45_25
# %bb.23:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$480, %ax               # imm = 0x1E0
	cmpw	$21790, %ax             # imm = 0x551E
	jne	.LBB45_79
# %bb.24:                               # %BZ2_bzDecompress.split164
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rdi
	movw	$21790, BasicBlockSignatureTracker # imm = 0x551E
	movw	$0, RunTimeSignatureAdjuster
	callq	unRLE_obuf_to_output_SMALL
	movw	$21790, BasicBlockSignatureTracker # imm = 0x551E
	movw	$0, RunTimeSignatureAdjuster
	movb	%al, (%r12)
	movw	$21790, BasicBlockSignatureTracker # imm = 0x551E
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB45_27
.LBB45_25:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$462, %ax               # imm = 0x1CE
	cmpw	$21808, %ax             # imm = 0x5530
	jne	.LBB45_79
# %bb.26:                               # %BZ2_bzDecompress.split166
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rdi
	movw	$21808, BasicBlockSignatureTracker # imm = 0x5530
	movw	$0, RunTimeSignatureAdjuster
	callq	unRLE_obuf_to_output_FAST
	movw	$21808, BasicBlockSignatureTracker # imm = 0x5530
	movw	$46, RunTimeSignatureAdjuster
	movb	%al, (%r12)
	movw	$21808, BasicBlockSignatureTracker # imm = 0x5530
	movw	$46, RunTimeSignatureAdjuster
.LBB45_27:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$94, %ax
	xorw	%cx, %ax
	cmpw	$21824, %ax             # imm = 0x5540
	jne	.LBB45_79
# %bb.28:                               # %BZ2_bzDecompress.split168
                                        #   in Loop: Header=BB45_15 Depth=1
	movb	(%r12), %al
	movw	$21824, BasicBlockSignatureTracker # imm = 0x5540
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB45_31
# %bb.29:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$21861, %ax             # imm = 0x5565
	jne	.LBB45_80
# %bb.30:                               # %BZ2_bzDecompress.split170
	movl	$-4, (%r14)
	movw	$21861, BasicBlockSignatureTracker # imm = 0x5565
	movw	$1680, RunTimeSignatureAdjuster # imm = 0x690
	jmp	.LBB45_77
.LBB45_31:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$21864, %ax             # imm = 0x5568
	jne	.LBB45_79
# %bb.32:                               # %BZ2_bzDecompress.split172
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$21864, BasicBlockSignatureTracker # imm = 0x5568
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB45_51
# %bb.33:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$250, %ax
	cmpw	$21906, %ax             # imm = 0x5592
	jne	.LBB45_79
# %bb.34:                               # %BZ2_bzDecompress.split174
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	16(%rax), %eax
	movw	$21906, BasicBlockSignatureTracker # imm = 0x5592
	movw	$250, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB45_51
# %bb.35:                               # %Buffer__
                                        #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-24224, %ax            # imm = 0xA160
	cmpw	$-2830, %ax             # imm = 0xF4F2
	jne	.LBB45_79
# %bb.36:                               # %BZ2_bzDecompress.split178
                                        #   in Loop: Header=BB45_15 Depth=1
	movw	$-2830, BasicBlockSignatureTracker # imm = 0xF4F2
	movw	$-24224, RunTimeSignatureAdjuster # imm = 0xA160
# %bb.37:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$21923, %ax             # imm = 0x55A3
	jne	.LBB45_79
# %bb.38:                               # %BZ2_bzDecompress.split218
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	(%rbx), %rcx
	movl	%eax, 3184(%rcx)
	movq	(%rbx), %rax
	movl	52(%rax), %eax
	movw	$21923, BasicBlockSignatureTracker # imm = 0x55A3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB45_41
# %bb.39:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$21941, %ax             # imm = 0x55B5
	jne	.LBB45_79
# %bb.40:                               # %BZ2_bzDecompress.split180
                                        #   in Loop: Header=BB45_15 Depth=1
	movabsq	$.L.str.2.24, %rsi
	movq	stderr, %rdi
	movq	(%rbx), %rax
	movl	3176(%rax), %edx
	movq	(%rbx), %rax
	movl	3184(%rax), %ecx
	movb	$0, %al
	callq	fprintf
	movw	$21941, BasicBlockSignatureTracker # imm = 0x55B5
	movw	$22, RunTimeSignatureAdjuster
.LBB45_41:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$103, %ax
	xorw	%cx, %ax
	cmpw	$21956, %ax             # imm = 0x55C4
	jne	.LBB45_79
# %bb.42:                               # %BZ2_bzDecompress.split182
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	52(%rax), %eax
	movw	$21956, BasicBlockSignatureTracker # imm = 0x55C4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB45_45
# %bb.43:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$21962, %ax             # imm = 0x55CA
	jne	.LBB45_79
# %bb.44:                               # %BZ2_bzDecompress.split184
                                        #   in Loop: Header=BB45_15 Depth=1
	movabsq	$.L.str.3.25, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$21962, BasicBlockSignatureTracker # imm = 0x55CA
	movw	$14, RunTimeSignatureAdjuster
.LBB45_45:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$21978, %ax             # imm = 0x55DA
	jne	.LBB45_79
# %bb.46:                               # %BZ2_bzDecompress.split186
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	3184(%rax), %eax
	movq	(%rbx), %rcx
	movl	3176(%rcx), %ecx
	movw	$21978, BasicBlockSignatureTracker # imm = 0x55DA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB45_49
# %bb.47:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$988, %ax               # imm = 0x3DC
	cmpw	$22022, %ax             # imm = 0x5606
	jne	.LBB45_80
# %bb.48:                               # %BZ2_bzDecompress.split188
	movl	$-4, (%r14)
	movw	$22022, BasicBlockSignatureTracker # imm = 0x5606
	movw	$1523, RunTimeSignatureAdjuster # imm = 0x5F3
	jmp	.LBB45_77
.LBB45_49:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$965, %ax               # imm = 0x3C5
	cmpw	$22047, %ax             # imm = 0x561F
	jne	.LBB45_79
# %bb.50:                               # %BZ2_bzDecompress.split190
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	(%rbx), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 3188(%rcx)
	movq	(%rbx), %rax
	movl	3184(%rax), %eax
	movq	(%rbx), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	(%rbx), %rax
	movl	$14, 8(%rax)
	movw	$22047, BasicBlockSignatureTracker # imm = 0x561F
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB45_53
.LBB45_51:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$845, %ax               # imm = 0x34D
	xorw	%cx, %ax
	cmpw	$22053, %ax             # imm = 0x5625
	jne	.LBB45_80
# %bb.52:                               # %BZ2_bzDecompress.split176
	movl	$0, (%r14)
	movw	$22053, BasicBlockSignatureTracker # imm = 0x5625
	movw	$1488, RunTimeSignatureAdjuster # imm = 0x5D0
	jmp	.LBB45_77
.LBB45_53:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$22065, %ax             # imm = 0x5631
	jne	.LBB45_79
# %bb.54:                               # %BZ2_bzDecompress.split192
                                        #   in Loop: Header=BB45_15 Depth=1
	movw	$22065, BasicBlockSignatureTracker # imm = 0x5631
	movw	$658, RunTimeSignatureAdjuster # imm = 0x292
.LBB45_55:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$740, %ax               # imm = 0x2E4
	xorw	%cx, %ax
	cmpw	$22087, %ax             # imm = 0x5647
	jne	.LBB45_79
# %bb.56:                               # %BZ2_bzDecompress.split162
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$22087, BasicBlockSignatureTracker # imm = 0x5647
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$10, %eax
	jl	.LBB45_75
# %bb.57:                               #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$22090, %ax             # imm = 0x564A
	jne	.LBB45_79
# %bb.58:                               # %BZ2_bzDecompress.split194
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rdi
	movw	$22090, BasicBlockSignatureTracker # imm = 0x564A
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_decompress
	movw	$22090, BasicBlockSignatureTracker # imm = 0x564A
	movw	$0, RunTimeSignatureAdjuster
	movl	%eax, (%r15)
	movl	(%r15), %eax
	movw	$22090, BasicBlockSignatureTracker # imm = 0x564A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB45_69
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$22095, %ax             # imm = 0x564F
	jne	.LBB45_80
# %bb.60:                               # %BZ2_bzDecompress.split198
	movq	(%rbx), %rax
	movl	52(%rax), %eax
	movw	$22095, BasicBlockSignatureTracker # imm = 0x564F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB45_63
# %bb.61:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$22107, %ax             # imm = 0x565B
	jne	.LBB45_80
# %bb.62:                               # %BZ2_bzDecompress.split202
	movabsq	$.L.str.4.26, %rsi
	movq	stderr, %rdi
	movq	(%rbx), %rax
	movl	3180(%rax), %edx
	movq	(%rbx), %rax
	movl	3188(%rax), %ecx
	movb	$0, %al
	callq	fprintf
	movw	$22107, BasicBlockSignatureTracker # imm = 0x565B
	movw	$20, RunTimeSignatureAdjuster
.LBB45_63:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$203, %ax
	xorw	%cx, %ax
	cmpw	$22148, %ax             # imm = 0x5684
	jne	.LBB45_80
# %bb.64:                               # %BZ2_bzDecompress.split204
	movq	(%rbx), %rax
	movl	3188(%rax), %eax
	movq	(%rbx), %rcx
	movl	3180(%rcx), %ecx
	movw	$22148, BasicBlockSignatureTracker # imm = 0x5684
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB45_67
# %bb.65:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$22177, %ax             # imm = 0x56A1
	jne	.LBB45_80
# %bb.66:                               # %BZ2_bzDecompress.split206
	movl	$-4, (%r14)
	movw	$22177, BasicBlockSignatureTracker # imm = 0x56A1
	movw	$1364, RunTimeSignatureAdjuster # imm = 0x554
	jmp	.LBB45_77
.LBB45_67:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$47, %ax
	cmpw	$22187, %ax             # imm = 0x56AB
	jne	.LBB45_80
# %bb.68:                               # %BZ2_bzDecompress.split208
	movl	(%r15), %eax
	movl	%eax, (%r14)
	movw	$22187, BasicBlockSignatureTracker # imm = 0x56AB
	movw	$1374, RunTimeSignatureAdjuster # imm = 0x55E
	jmp	.LBB45_77
.LBB45_69:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$135, %ax
	cmpw	$22221, %ax             # imm = 0x56CD
	jne	.LBB45_79
# %bb.70:                               # %BZ2_bzDecompress.split200
                                        #   in Loop: Header=BB45_15 Depth=1
	movq	(%rbx), %rax
	movl	8(%rax), %eax
	movw	$22221, BasicBlockSignatureTracker # imm = 0x56CD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	je	.LBB45_73
# %bb.71:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$22231, %ax             # imm = 0x56D7
	jne	.LBB45_80
# %bb.72:                               # %BZ2_bzDecompress.split210
	movl	(%r15), %eax
	movl	%eax, (%r14)
	movw	$22231, BasicBlockSignatureTracker # imm = 0x56D7
	movw	$1314, RunTimeSignatureAdjuster # imm = 0x522
	jmp	.LBB45_77
.LBB45_73:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$472, %ax               # imm = 0x1D8
	cmpw	$22293, %ax             # imm = 0x5715
	jne	.LBB45_79
# %bb.74:                               # %BZ2_bzDecompress.split212
                                        #   in Loop: Header=BB45_15 Depth=1
	movw	$22293, BasicBlockSignatureTracker # imm = 0x5715
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
.LBB45_75:                              #   in Loop: Header=BB45_15 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$381, %ax               # imm = 0x17D
	xorw	%cx, %ax
	cmpw	$22330, %ax             # imm = 0x573A
	jne	.LBB45_79
# %bb.76:                               # %BZ2_bzDecompress.split196
                                        #   in Loop: Header=BB45_15 Depth=1
	movw	$22330, BasicBlockSignatureTracker # imm = 0x573A
	movw	$849, RunTimeSignatureAdjuster # imm = 0x351
	jmp	.LBB45_15
.LBB45_77:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1209, %ax              # imm = 0x4B9
	xorw	%cx, %ax
	cmpw	$22348, %ax             # imm = 0x574C
	jne	.LBB45_80
# %bb.78:                               # %BZ2_bzDecompress.split144
	movl	(%r14), %eax
	movw	$22348, BasicBlockSignatureTracker # imm = 0x574C
	movw	$11307, RunTimeSignatureAdjuster # imm = 0x2C2B
	leaq	-32(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB45_79:                              # %CFerrorHandler.BZ2_bzDecompress.loopexit
	jmp	.LBB45_80
.LBB45_80:                              # %CFerrorHandler.BZ2_bzDecompress
	callq	FAULT_DETECTED_CFC
.Lfunc_end45:
	.size	BZ2_bzDecompress, .Lfunc_end45-BZ2_bzDecompress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL
	.type	unRLE_obuf_to_output_SMALL,@function
unRLE_obuf_to_output_SMALL:             # @unRLE_obuf_to_output_SMALL
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$655, %ax               # imm = 0x28F
	xorw	%cx, %ax
	cmpw	$22417, %ax             # imm = 0x5791
	jne	.LBB46_154
# %bb.1:                                # %unRLE_obuf_to_output_SMALL.split
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%rbx)
	movq	(%rbx), %rax
	movb	20(%rax), %al
	movw	$22417, BasicBlockSignatureTracker # imm = 0x5791
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB46_95
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$22419, %ax             # imm = 0x5793
	jne	.LBB46_154
# %bb.3:                                # %unRLE_obuf_to_output_SMALL.split256
	movw	$22419, BasicBlockSignatureTracker # imm = 0x5793
	movw	$0, RunTimeSignatureAdjuster
.LBB46_4:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_6 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8, %ax
	xorw	%cx, %ax
	cmpw	$22427, %ax             # imm = 0x579B
	jne	.LBB46_151
# %bb.5:                                # %unRLE_obuf_to_output_SMALL.split260
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$22427, BasicBlockSignatureTracker # imm = 0x579B
	movw	$0, RunTimeSignatureAdjuster
.LBB46_6:                               #   Parent Loop BB46_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4, %ax
	xorw	%cx, %ax
	cmpw	$22431, %ax             # imm = 0x579F
	jne	.LBB46_150
# %bb.7:                                # %unRLE_obuf_to_output_SMALL.split262
                                        #   in Loop: Header=BB46_6 Depth=2
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movw	$22431, BasicBlockSignatureTracker # imm = 0x579F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$47, %ax
	cmpw	$22448, %ax             # imm = 0x57B0
	jne	.LBB46_154
# %bb.9:                                # %unRLE_obuf_to_output_SMALL.split264
	movb	$0, (%r14)
	movw	$22448, BasicBlockSignatureTracker # imm = 0x57B0
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB46_148
.LBB46_10:                              #   in Loop: Header=BB46_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$22449, %ax             # imm = 0x57B1
	jne	.LBB46_150
# %bb.11:                               # %unRLE_obuf_to_output_SMALL.split266
                                        #   in Loop: Header=BB46_6 Depth=2
	movq	(%rbx), %rax
	movl	16(%rax), %eax
	movw	$22449, BasicBlockSignatureTracker # imm = 0x57B1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_14
# %bb.12:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$121, %ax
	cmpw	$22472, %ax             # imm = 0x57C8
	jne	.LBB46_151
# %bb.13:                               # %unRLE_obuf_to_output_SMALL.split270
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$22472, BasicBlockSignatureTracker # imm = 0x57C8
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB46_20
.LBB46_14:                              #   in Loop: Header=BB46_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$97, %ax
	cmpw	$22480, %ax             # imm = 0x57D0
	jne	.LBB46_150
# %bb.15:                               # %unRLE_obuf_to_output_SMALL.split272
                                        #   in Loop: Header=BB46_6 Depth=2
	movq	(%rbx), %rax
	movb	12(%rax), %al
	movq	(%rbx), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	(%rbx), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	(%rbx), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	(%rbx), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 3184(%rcx)
	movq	(%rbx), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movw	$22480, BasicBlockSignatureTracker # imm = 0x57D0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_18
# %bb.16:                               #   in Loop: Header=BB46_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$22495, %ax             # imm = 0x57DF
	jne	.LBB46_150
# %bb.17:                               # %unRLE_obuf_to_output_SMALL.split276
                                        #   in Loop: Header=BB46_6 Depth=2
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movw	$22495, BasicBlockSignatureTracker # imm = 0x57DF
	movw	$15, RunTimeSignatureAdjuster
.LBB46_18:                              #   in Loop: Header=BB46_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$54, %ax
	xorw	%cx, %ax
	cmpw	$22502, %ax             # imm = 0x57E6
	jne	.LBB46_150
# %bb.19:                               # %unRLE_obuf_to_output_SMALL.split278
                                        #   in Loop: Header=BB46_6 Depth=2
	movw	$22502, BasicBlockSignatureTracker # imm = 0x57E6
	movw	$125, RunTimeSignatureAdjuster
	jmp	.LBB46_6
.LBB46_20:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$47, %ax
	cmpw	$22503, %ax             # imm = 0x57E7
	jne	.LBB46_151
# %bb.21:                               # %unRLE_obuf_to_output_SMALL.split274
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$22503, BasicBlockSignatureTracker # imm = 0x57E7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_24
# %bb.22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4073, %ax              # imm = 0xFE9
	cmpw	$22542, %ax             # imm = 0x580E
	jne	.LBB46_154
# %bb.23:                               # %unRLE_obuf_to_output_SMALL.split280
	movb	$0, (%r14)
	movw	$22542, BasicBlockSignatureTracker # imm = 0x580E
	movw	$4030, RunTimeSignatureAdjuster # imm = 0xFBE
	jmp	.LBB46_148
.LBB46_24:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4032, %ax              # imm = 0xFC0
	cmpw	$22567, %ax             # imm = 0x5827
	jne	.LBB46_151
# %bb.25:                               # %unRLE_obuf_to_output_SMALL.split282
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$22567, BasicBlockSignatureTracker # imm = 0x5827
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB46_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$22571, %ax             # imm = 0x582B
	jne	.LBB46_154
# %bb.27:                               # %unRLE_obuf_to_output_SMALL.split284
	movb	$1, (%r14)
	movw	$22571, BasicBlockSignatureTracker # imm = 0x582B
	movw	$3995, RunTimeSignatureAdjuster # imm = 0xF9B
	jmp	.LBB46_148
.LBB46_28:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$22572, %ax             # imm = 0x582C
	jne	.LBB46_151
# %bb.29:                               # %unRLE_obuf_to_output_SMALL.split286
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$1, 16(%rax)
	movq	(%rbx), %rax
	movl	64(%rax), %eax
	movq	(%rbx), %rcx
	movb	%al, 12(%rcx)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$22572, BasicBlockSignatureTracker # imm = 0x582C
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_indexIntoF
	movw	$22572, BasicBlockSignatureTracker # imm = 0x582C
	movw	$0, RunTimeSignatureAdjuster
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	24(%rax), %eax
	movw	$22572, BasicBlockSignatureTracker # imm = 0x582C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_36
# %bb.30:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$124, %ax
	cmpw	$22608, %ax             # imm = 0x5850
	jne	.LBB46_151
# %bb.31:                               # %unRLE_obuf_to_output_SMALL.split288
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rbx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rbx), %rax
	movl	28(%rax), %eax
	movw	$22608, BasicBlockSignatureTracker # imm = 0x5850
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB46_34
# %bb.32:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$22609, %ax             # imm = 0x5851
	jne	.LBB46_151
# %bb.33:                               # %unRLE_obuf_to_output_SMALL.split292
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$0, 28(%rax)
	movw	$22609, BasicBlockSignatureTracker # imm = 0x5851
	movw	$1, RunTimeSignatureAdjuster
.LBB46_34:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$12, %ax
	xorw	%cx, %ax
	cmpw	$22620, %ax             # imm = 0x585C
	jne	.LBB46_151
# %bb.35:                               # %unRLE_obuf_to_output_SMALL.split294
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$22620, BasicBlockSignatureTracker # imm = 0x585C
	movw	$112, RunTimeSignatureAdjuster
.LBB46_36:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$160, %ax
	xorw	%cx, %ax
	cmpw	$22668, %ax             # imm = 0x588C
	jne	.LBB46_151
# %bb.37:                               # %unRLE_obuf_to_output_SMALL.split290
                                        #   in Loop: Header=BB46_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rbx), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rbx), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movzbl	(%r15), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%r15)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$22668, BasicBlockSignatureTracker # imm = 0x588C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_41
# %bb.38:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$22685, %ax             # imm = 0x589D
	jne	.LBB46_151
# %bb.39:                               # %unRLE_obuf_to_output_SMALL.split296
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$22685, BasicBlockSignatureTracker # imm = 0x589D
	movw	$3854, RunTimeSignatureAdjuster # imm = 0xF0E
.LBB46_40:                              # %.backedge
                                        #   in Loop: Header=BB46_4 Depth=1
	jmp	.LBB46_4
.LBB46_41:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$22695, %ax             # imm = 0x58A7
	jne	.LBB46_151
# %bb.42:                               # %unRLE_obuf_to_output_SMALL.split298
                                        #   in Loop: Header=BB46_4 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	64(%rcx), %ecx
	movw	$22695, BasicBlockSignatureTracker # imm = 0x58A7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB46_45
# %bb.43:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$22705, %ax             # imm = 0x58B1
	jne	.LBB46_151
# %bb.44:                               # %unRLE_obuf_to_output_SMALL.split300
                                        #   in Loop: Header=BB46_4 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movw	$22705, BasicBlockSignatureTracker # imm = 0x58B1
	movw	$3874, RunTimeSignatureAdjuster # imm = 0xF22
	jmp	.LBB46_40
.LBB46_45:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$22714, %ax             # imm = 0x58BA
	jne	.LBB46_151
# %bb.46:                               # %unRLE_obuf_to_output_SMALL.split302
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$2, 16(%rax)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$22714, BasicBlockSignatureTracker # imm = 0x58BA
	movw	$150, RunTimeSignatureAdjuster
	callq	BZ2_indexIntoF
	movw	$22714, BasicBlockSignatureTracker # imm = 0x58BA
	movw	$150, RunTimeSignatureAdjuster
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	24(%rax), %eax
	movw	$22714, BasicBlockSignatureTracker # imm = 0x58BA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_53
# %bb.47:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$22715, %ax             # imm = 0x58BB
	jne	.LBB46_151
# %bb.48:                               # %unRLE_obuf_to_output_SMALL.split304
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rbx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rbx), %rax
	movl	28(%rax), %eax
	movw	$22715, BasicBlockSignatureTracker # imm = 0x58BB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB46_51
# %bb.49:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$98, %ax
	cmpw	$22745, %ax             # imm = 0x58D9
	jne	.LBB46_151
# %bb.50:                               # %unRLE_obuf_to_output_SMALL.split308
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$0, 28(%rax)
	movw	$22745, BasicBlockSignatureTracker # imm = 0x58D9
	movw	$98, RunTimeSignatureAdjuster
.LBB46_51:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$95, %ax
	xorw	%cx, %ax
	cmpw	$22756, %ax             # imm = 0x58E4
	jne	.LBB46_151
# %bb.52:                               # %unRLE_obuf_to_output_SMALL.split310
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$22756, BasicBlockSignatureTracker # imm = 0x58E4
	movw	$94, RunTimeSignatureAdjuster
.LBB46_53:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$86, %ax
	xorw	%cx, %ax
	cmpw	$22764, %ax             # imm = 0x58EC
	jne	.LBB46_151
# %bb.54:                               # %unRLE_obuf_to_output_SMALL.split306
                                        #   in Loop: Header=BB46_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rbx), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rbx), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movzbl	(%r15), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%r15)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$22764, BasicBlockSignatureTracker # imm = 0x58EC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_57
# %bb.55:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$502, %ax               # imm = 0x1F6
	cmpw	$22810, %ax             # imm = 0x591A
	jne	.LBB46_151
# %bb.56:                               # %unRLE_obuf_to_output_SMALL.split312
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$22810, BasicBlockSignatureTracker # imm = 0x591A
	movw	$3721, RunTimeSignatureAdjuster # imm = 0xE89
	jmp	.LBB46_40
.LBB46_57:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$416, %ax               # imm = 0x1A0
	cmpw	$22860, %ax             # imm = 0x594C
	jne	.LBB46_151
# %bb.58:                               # %unRLE_obuf_to_output_SMALL.split314
                                        #   in Loop: Header=BB46_4 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	64(%rcx), %ecx
	movw	$22860, BasicBlockSignatureTracker # imm = 0x594C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB46_61
# %bb.59:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$22880, %ax             # imm = 0x5960
	jne	.LBB46_151
# %bb.60:                               # %unRLE_obuf_to_output_SMALL.split316
                                        #   in Loop: Header=BB46_4 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movw	$22880, BasicBlockSignatureTracker # imm = 0x5960
	movw	$3827, RunTimeSignatureAdjuster # imm = 0xEF3
	jmp	.LBB46_40
.LBB46_61:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$34, %ax
	cmpw	$22894, %ax             # imm = 0x596E
	jne	.LBB46_151
# %bb.62:                               # %unRLE_obuf_to_output_SMALL.split318
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$3, 16(%rax)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$22894, BasicBlockSignatureTracker # imm = 0x596E
	movw	$322, RunTimeSignatureAdjuster # imm = 0x142
	callq	BZ2_indexIntoF
	movw	$22894, BasicBlockSignatureTracker # imm = 0x596E
	movw	$322, RunTimeSignatureAdjuster # imm = 0x142
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	24(%rax), %eax
	movw	$22894, BasicBlockSignatureTracker # imm = 0x596E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_69
# %bb.63:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$178, %ax
	cmpw	$23004, %ax             # imm = 0x59DC
	jne	.LBB46_151
# %bb.64:                               # %unRLE_obuf_to_output_SMALL.split320
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rbx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rbx), %rax
	movl	28(%rax), %eax
	movw	$23004, BasicBlockSignatureTracker # imm = 0x59DC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB46_67
# %bb.65:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$23026, %ax             # imm = 0x59F2
	jne	.LBB46_151
# %bb.66:                               # %unRLE_obuf_to_output_SMALL.split324
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$0, 28(%rax)
	movw	$23026, BasicBlockSignatureTracker # imm = 0x59F2
	movw	$46, RunTimeSignatureAdjuster
.LBB46_67:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1000, %ax              # imm = 0x3E8
	xorw	%cx, %ax
	cmpw	$23092, %ax             # imm = 0x5A34
	jne	.LBB46_151
# %bb.68:                               # %unRLE_obuf_to_output_SMALL.split326
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$23092, BasicBlockSignatureTracker # imm = 0x5A34
	movw	$858, RunTimeSignatureAdjuster # imm = 0x35A
.LBB46_69:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$803, %ax               # imm = 0x323
	xorw	%cx, %ax
	cmpw	$23117, %ax             # imm = 0x5A4D
	jne	.LBB46_151
# %bb.70:                               # %unRLE_obuf_to_output_SMALL.split322
                                        #   in Loop: Header=BB46_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rbx), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rbx), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movzbl	(%r15), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%r15)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$23117, BasicBlockSignatureTracker # imm = 0x5A4D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_73
# %bb.71:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$23125, %ax             # imm = 0x5A55
	jne	.LBB46_151
# %bb.72:                               # %unRLE_obuf_to_output_SMALL.split328
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$23125, BasicBlockSignatureTracker # imm = 0x5A55
	movw	$3526, RunTimeSignatureAdjuster # imm = 0xDC6
	jmp	.LBB46_40
.LBB46_73:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$23126, %ax             # imm = 0x5A56
	jne	.LBB46_151
# %bb.74:                               # %unRLE_obuf_to_output_SMALL.split330
                                        #   in Loop: Header=BB46_4 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	64(%rcx), %ecx
	movw	$23126, BasicBlockSignatureTracker # imm = 0x5A56
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB46_77
# %bb.75:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$23131, %ax             # imm = 0x5A5B
	jne	.LBB46_151
# %bb.76:                               # %unRLE_obuf_to_output_SMALL.split332
                                        #   in Loop: Header=BB46_4 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movw	$23131, BasicBlockSignatureTracker # imm = 0x5A5B
	movw	$3528, RunTimeSignatureAdjuster # imm = 0xDC8
	jmp	.LBB46_40
.LBB46_77:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$23143, %ax             # imm = 0x5A67
	jne	.LBB46_151
# %bb.78:                               # %unRLE_obuf_to_output_SMALL.split334
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23143, BasicBlockSignatureTracker # imm = 0x5A67
	movw	$587, RunTimeSignatureAdjuster # imm = 0x24B
	callq	BZ2_indexIntoF
	movw	$23143, BasicBlockSignatureTracker # imm = 0x5A67
	movw	$587, RunTimeSignatureAdjuster # imm = 0x24B
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	24(%rax), %eax
	movw	$23143, BasicBlockSignatureTracker # imm = 0x5A67
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_85
# %bb.79:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$23156, %ax             # imm = 0x5A74
	jne	.LBB46_151
# %bb.80:                               # %unRLE_obuf_to_output_SMALL.split336
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rbx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rbx), %rax
	movl	28(%rax), %eax
	movw	$23156, BasicBlockSignatureTracker # imm = 0x5A74
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB46_83
# %bb.81:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$198, %ax
	cmpw	$23218, %ax             # imm = 0x5AB2
	jne	.LBB46_151
# %bb.82:                               # %unRLE_obuf_to_output_SMALL.split340
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$0, 28(%rax)
	movw	$23218, BasicBlockSignatureTracker # imm = 0x5AB2
	movw	$198, RunTimeSignatureAdjuster
.LBB46_83:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$200, %ax
	xorw	%cx, %ax
	cmpw	$23228, %ax             # imm = 0x5ABC
	jne	.LBB46_151
# %bb.84:                               # %unRLE_obuf_to_output_SMALL.split342
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$23228, BasicBlockSignatureTracker # imm = 0x5ABC
	movw	$219, RunTimeSignatureAdjuster
.LBB46_85:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$217, %ax
	xorw	%cx, %ax
	cmpw	$23230, %ax             # imm = 0x5ABE
	jne	.LBB46_151
# %bb.86:                               # %unRLE_obuf_to_output_SMALL.split338
                                        #   in Loop: Header=BB46_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rbx), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rbx), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movzbl	(%r15), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%r15)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	(%r15), %eax
	addl	$4, %eax
	movq	(%rbx), %rcx
	movl	%eax, 16(%rcx)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23230, BasicBlockSignatureTracker # imm = 0x5ABE
	movw	$658, RunTimeSignatureAdjuster # imm = 0x292
	callq	BZ2_indexIntoF
	movw	$23230, BasicBlockSignatureTracker # imm = 0x5ABE
	movw	$658, RunTimeSignatureAdjuster # imm = 0x292
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	24(%rax), %eax
	movw	$23230, BasicBlockSignatureTracker # imm = 0x5ABE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_93
# %bb.87:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$87, %ax
	cmpw	$23273, %ax             # imm = 0x5AE9
	jne	.LBB46_151
# %bb.88:                               # %unRLE_obuf_to_output_SMALL.split344
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rbx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rbx), %rax
	movl	28(%rax), %eax
	movw	$23273, BasicBlockSignatureTracker # imm = 0x5AE9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB46_91
# %bb.89:                               #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$23288, %ax             # imm = 0x5AF8
	jne	.LBB46_151
# %bb.90:                               # %unRLE_obuf_to_output_SMALL.split348
                                        #   in Loop: Header=BB46_4 Depth=1
	movq	(%rbx), %rax
	movl	$0, 28(%rax)
	movw	$23288, BasicBlockSignatureTracker # imm = 0x5AF8
	movw	$17, RunTimeSignatureAdjuster
.LBB46_91:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$21, %ax
	xorw	%cx, %ax
	cmpw	$23292, %ax             # imm = 0x5AFC
	jne	.LBB46_151
# %bb.92:                               # %unRLE_obuf_to_output_SMALL.split350
                                        #   in Loop: Header=BB46_4 Depth=1
	movw	$23292, BasicBlockSignatureTracker # imm = 0x5AFC
	movw	$66, RunTimeSignatureAdjuster
.LBB46_93:                              #   in Loop: Header=BB46_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$434, %ax               # imm = 0x1B2
	xorw	%cx, %ax
	cmpw	$23308, %ax             # imm = 0x5B0C
	jne	.LBB46_151
# %bb.94:                               # %unRLE_obuf_to_output_SMALL.split346
                                        #   in Loop: Header=BB46_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rbx), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rbx), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	(%rbx), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movw	$23308, BasicBlockSignatureTracker # imm = 0x5B0C
	movw	$3231, RunTimeSignatureAdjuster # imm = 0xC9F
	jmp	.LBB46_40
.LBB46_95:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3240, %ax              # imm = 0xCA8
	cmpw	$23353, %ax             # imm = 0x5B39
	jne	.LBB46_154
# %bb.96:                               # %unRLE_obuf_to_output_SMALL.split258
	movw	$23353, BasicBlockSignatureTracker # imm = 0x5B39
	movw	$0, RunTimeSignatureAdjuster
.LBB46_97:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_99 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7, %ax
	xorw	%cx, %ax
	cmpw	$23358, %ax             # imm = 0x5B3E
	jne	.LBB46_153
# %bb.98:                               # %unRLE_obuf_to_output_SMALL.split352
                                        #   in Loop: Header=BB46_97 Depth=1
	movw	$23358, BasicBlockSignatureTracker # imm = 0x5B3E
	movw	$0, RunTimeSignatureAdjuster
.LBB46_99:                              #   Parent Loop BB46_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$109, %ax
	xorw	%cx, %ax
	cmpw	$23379, %ax             # imm = 0x5B53
	jne	.LBB46_152
# %bb.100:                              # %unRLE_obuf_to_output_SMALL.split354
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movw	$23379, BasicBlockSignatureTracker # imm = 0x5B53
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_103
# %bb.101:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$23382, %ax             # imm = 0x5B56
	jne	.LBB46_154
# %bb.102:                              # %unRLE_obuf_to_output_SMALL.split356
	movb	$0, (%r14)
	movw	$23382, BasicBlockSignatureTracker # imm = 0x5B56
	movw	$3302, RunTimeSignatureAdjuster # imm = 0xCE6
	jmp	.LBB46_148
.LBB46_103:                             #   in Loop: Header=BB46_99 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$217, %ax
	cmpw	$23434, %ax             # imm = 0x5B8A
	jne	.LBB46_152
# %bb.104:                              # %unRLE_obuf_to_output_SMALL.split358
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	(%rbx), %rax
	movl	16(%rax), %eax
	movw	$23434, BasicBlockSignatureTracker # imm = 0x5B8A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_107
# %bb.105:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$23438, %ax             # imm = 0x5B8E
	jne	.LBB46_153
# %bb.106:                              # %unRLE_obuf_to_output_SMALL.split360
                                        #   in Loop: Header=BB46_97 Depth=1
	movw	$23438, BasicBlockSignatureTracker # imm = 0x5B8E
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB46_113
.LBB46_107:                             #   in Loop: Header=BB46_99 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$23480, %ax             # imm = 0x5BB8
	jne	.LBB46_152
# %bb.108:                              # %unRLE_obuf_to_output_SMALL.split362
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	(%rbx), %rax
	movb	12(%rax), %al
	movq	(%rbx), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	(%rbx), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	(%rbx), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	(%rbx), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	(%rbx), %rcx
	movl	%eax, 3184(%rcx)
	movq	(%rbx), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movw	$23480, BasicBlockSignatureTracker # imm = 0x5BB8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB46_111
# %bb.109:                              #   in Loop: Header=BB46_99 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$108, %ax
	cmpw	$23508, %ax             # imm = 0x5BD4
	jne	.LBB46_152
# %bb.110:                              # %unRLE_obuf_to_output_SMALL.split366
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	(%rbx), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movw	$23508, BasicBlockSignatureTracker # imm = 0x5BD4
	movw	$108, RunTimeSignatureAdjuster
.LBB46_111:                             #   in Loop: Header=BB46_99 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$81, %ax
	xorw	%cx, %ax
	cmpw	$23529, %ax             # imm = 0x5BE9
	jne	.LBB46_152
# %bb.112:                              # %unRLE_obuf_to_output_SMALL.split368
                                        #   in Loop: Header=BB46_99 Depth=2
	movw	$23529, BasicBlockSignatureTracker # imm = 0x5BE9
	movw	$215, RunTimeSignatureAdjuster
	jmp	.LBB46_99
.LBB46_113:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1942, %ax              # imm = 0x796
	cmpw	$23576, %ax             # imm = 0x5C18
	jne	.LBB46_153
# %bb.114:                              # %unRLE_obuf_to_output_SMALL.split364
                                        #   in Loop: Header=BB46_97 Depth=1
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$23576, BasicBlockSignatureTracker # imm = 0x5C18
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_117
# %bb.115:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$23603, %ax             # imm = 0x5C33
	jne	.LBB46_154
# %bb.116:                              # %unRLE_obuf_to_output_SMALL.split370
	movb	$0, (%r14)
	movw	$23603, BasicBlockSignatureTracker # imm = 0x5C33
	movw	$2947, RunTimeSignatureAdjuster # imm = 0xB83
	jmp	.LBB46_148
.LBB46_117:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$85, %ax
	cmpw	$23629, %ax             # imm = 0x5C4D
	jne	.LBB46_153
# %bb.118:                              # %unRLE_obuf_to_output_SMALL.split372
                                        #   in Loop: Header=BB46_97 Depth=1
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$23629, BasicBlockSignatureTracker # imm = 0x5C4D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB46_121
# %bb.119:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$23643, %ax             # imm = 0x5C5B
	jne	.LBB46_154
# %bb.120:                              # %unRLE_obuf_to_output_SMALL.split374
	movb	$1, (%r14)
	movw	$23643, BasicBlockSignatureTracker # imm = 0x5C5B
	movw	$3051, RunTimeSignatureAdjuster # imm = 0xBEB
	jmp	.LBB46_148
.LBB46_121:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$38, %ax
	cmpw	$23659, %ax             # imm = 0x5C6B
	jne	.LBB46_153
# %bb.122:                              # %unRLE_obuf_to_output_SMALL.split376
                                        #   in Loop: Header=BB46_97 Depth=1
	movq	(%rbx), %rax
	movl	$1, 16(%rax)
	movq	(%rbx), %rax
	movl	64(%rax), %eax
	movq	(%rbx), %rcx
	movb	%al, 12(%rcx)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23659, BasicBlockSignatureTracker # imm = 0x5C6B
	movw	$1095, RunTimeSignatureAdjuster # imm = 0x447
	callq	BZ2_indexIntoF
	movw	$23659, BasicBlockSignatureTracker # imm = 0x5C6B
	movw	$1095, RunTimeSignatureAdjuster # imm = 0x447
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$23659, BasicBlockSignatureTracker # imm = 0x5C6B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_126
# %bb.123:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$23661, %ax             # imm = 0x5C6D
	jne	.LBB46_153
# %bb.124:                              # %unRLE_obuf_to_output_SMALL.split378
                                        #   in Loop: Header=BB46_97 Depth=1
	movw	$23661, BasicBlockSignatureTracker # imm = 0x5C6D
	movw	$1876, RunTimeSignatureAdjuster # imm = 0x754
.LBB46_125:                             # %.backedge4
                                        #   in Loop: Header=BB46_97 Depth=1
	jmp	.LBB46_97
.LBB46_126:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$207, %ax
	cmpw	$23716, %ax             # imm = 0x5CA4
	jne	.LBB46_153
# %bb.127:                              # %unRLE_obuf_to_output_SMALL.split380
                                        #   in Loop: Header=BB46_97 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	64(%rcx), %ecx
	movw	$23716, BasicBlockSignatureTracker # imm = 0x5CA4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB46_130
# %bb.128:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$23728, %ax             # imm = 0x5CB0
	jne	.LBB46_153
# %bb.129:                              # %unRLE_obuf_to_output_SMALL.split382
                                        #   in Loop: Header=BB46_97 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movw	$23728, BasicBlockSignatureTracker # imm = 0x5CB0
	movw	$1929, RunTimeSignatureAdjuster # imm = 0x789
	jmp	.LBB46_125
.LBB46_130:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$91, %ax
	cmpw	$23807, %ax             # imm = 0x5CFF
	jne	.LBB46_153
# %bb.131:                              # %unRLE_obuf_to_output_SMALL.split384
                                        #   in Loop: Header=BB46_97 Depth=1
	movq	(%rbx), %rax
	movl	$2, 16(%rax)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23807, BasicBlockSignatureTracker # imm = 0x5CFF
	movw	$1235, RunTimeSignatureAdjuster # imm = 0x4D3
	callq	BZ2_indexIntoF
	movw	$23807, BasicBlockSignatureTracker # imm = 0x5CFF
	movw	$1235, RunTimeSignatureAdjuster # imm = 0x4D3
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$23807, BasicBlockSignatureTracker # imm = 0x5CFF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_134
# %bb.132:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$498, %ax               # imm = 0x1F2
	cmpw	$23821, %ax             # imm = 0x5D0D
	jne	.LBB46_153
# %bb.133:                              # %unRLE_obuf_to_output_SMALL.split386
                                        #   in Loop: Header=BB46_97 Depth=1
	movw	$23821, BasicBlockSignatureTracker # imm = 0x5D0D
	movw	$1588, RunTimeSignatureAdjuster # imm = 0x634
	jmp	.LBB46_125
.LBB46_134:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$476, %ax               # imm = 0x1DC
	cmpw	$23843, %ax             # imm = 0x5D23
	jne	.LBB46_153
# %bb.135:                              # %unRLE_obuf_to_output_SMALL.split388
                                        #   in Loop: Header=BB46_97 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	64(%rcx), %ecx
	movw	$23843, BasicBlockSignatureTracker # imm = 0x5D23
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB46_138
# %bb.136:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$23858, %ax             # imm = 0x5D32
	jne	.LBB46_153
# %bb.137:                              # %unRLE_obuf_to_output_SMALL.split390
                                        #   in Loop: Header=BB46_97 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movw	$23858, BasicBlockSignatureTracker # imm = 0x5D32
	movw	$1547, RunTimeSignatureAdjuster # imm = 0x60B
	jmp	.LBB46_125
.LBB46_138:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$23865, %ax             # imm = 0x5D39
	jne	.LBB46_153
# %bb.139:                              # %unRLE_obuf_to_output_SMALL.split392
                                        #   in Loop: Header=BB46_97 Depth=1
	movq	(%rbx), %rax
	movl	$3, 16(%rax)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23865, BasicBlockSignatureTracker # imm = 0x5D39
	movw	$1301, RunTimeSignatureAdjuster # imm = 0x515
	callq	BZ2_indexIntoF
	movw	$23865, BasicBlockSignatureTracker # imm = 0x5D39
	movw	$1301, RunTimeSignatureAdjuster # imm = 0x515
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rbx), %rax
	movl	1092(%rax), %eax
	movq	(%rbx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$23865, BasicBlockSignatureTracker # imm = 0x5D39
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB46_142
# %bb.140:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3, %ax
	cmpw	$23866, %ax             # imm = 0x5D3A
	jne	.LBB46_153
# %bb.141:                              # %unRLE_obuf_to_output_SMALL.split394
                                        #   in Loop: Header=BB46_97 Depth=1
	movw	$23866, BasicBlockSignatureTracker # imm = 0x5D3A
	movw	$1539, RunTimeSignatureAdjuster # imm = 0x603
	jmp	.LBB46_125
.LBB46_142:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$191, %ax
	cmpw	$23942, %ax             # imm = 0x5D86
	jne	.LBB46_153
# %bb.143:                              # %unRLE_obuf_to_output_SMALL.split396
                                        #   in Loop: Header=BB46_97 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	64(%rcx), %ecx
	movw	$23942, BasicBlockSignatureTracker # imm = 0x5D86
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB46_146
# %bb.144:                              #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$23971, %ax             # imm = 0x5DA3
	jne	.LBB46_153
# %bb.145:                              # %unRLE_obuf_to_output_SMALL.split398
                                        #   in Loop: Header=BB46_97 Depth=1
	movzbl	(%r15), %eax
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movw	$23971, BasicBlockSignatureTracker # imm = 0x5DA3
	movw	$1690, RunTimeSignatureAdjuster # imm = 0x69A
	jmp	.LBB46_125
.LBB46_146:                             #   in Loop: Header=BB46_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$23996, %ax             # imm = 0x5DBC
	jne	.LBB46_153
# %bb.147:                              # %unRLE_obuf_to_output_SMALL.split400
                                        #   in Loop: Header=BB46_97 Depth=1
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23996, BasicBlockSignatureTracker # imm = 0x5DBC
	movw	$1424, RunTimeSignatureAdjuster # imm = 0x590
	callq	BZ2_indexIntoF
	movw	$23996, BasicBlockSignatureTracker # imm = 0x5DBC
	movw	$1424, RunTimeSignatureAdjuster # imm = 0x590
	movb	%al, (%r15)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	(%r15), %eax
	addl	$4, %eax
	movq	(%rbx), %rcx
	movl	%eax, 16(%rcx)
	movq	(%rbx), %rax
	movl	60(%rax), %edi
	movq	(%rbx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$23996, BasicBlockSignatureTracker # imm = 0x5DBC
	movw	$1424, RunTimeSignatureAdjuster # imm = 0x590
	callq	BZ2_indexIntoF
	movw	$23996, BasicBlockSignatureTracker # imm = 0x5DBC
	movw	$1424, RunTimeSignatureAdjuster # imm = 0x590
	movq	(%rbx), %rcx
	movl	%eax, 64(%rcx)
	movq	(%rbx), %rax
	movq	3160(%rax), %rax
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rbx), %rcx
	movq	3168(%rcx), %rcx
	movq	(%rbx), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%rbx), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rbx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movw	$23996, BasicBlockSignatureTracker # imm = 0x5DBC
	movw	$1669, RunTimeSignatureAdjuster # imm = 0x685
	jmp	.LBB46_125
.LBB46_148:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2665, %ax              # imm = 0xA69
	xorw	%cx, %ax
	cmpw	$24025, %ax             # imm = 0x5DD9
	jne	.LBB46_154
# %bb.149:                              # %unRLE_obuf_to_output_SMALL.split268
	movb	(%r14), %al
	movw	$24025, BasicBlockSignatureTracker # imm = 0x5DD9
	movw	$2343, RunTimeSignatureAdjuster # imm = 0x927
	movzbl	%al, %eax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB46_150:                             # %CFerrorHandler.unRLE_obuf_to_output_SMALL.loopexit
	jmp	.LBB46_154
.LBB46_151:                             # %CFerrorHandler.unRLE_obuf_to_output_SMALL.loopexit1
	jmp	.LBB46_154
.LBB46_152:                             # %CFerrorHandler.unRLE_obuf_to_output_SMALL.loopexit2
	jmp	.LBB46_154
.LBB46_153:                             # %CFerrorHandler.unRLE_obuf_to_output_SMALL.loopexit3
	jmp	.LBB46_154
.LBB46_154:                             # %CFerrorHandler.unRLE_obuf_to_output_SMALL
	callq	FAULT_DETECTED_CFC
.Lfunc_end46:
	.size	unRLE_obuf_to_output_SMALL, .Lfunc_end46-unRLE_obuf_to_output_SMALL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST
	.type	unRLE_obuf_to_output_FAST,@function
unRLE_obuf_to_output_FAST:              # @unRLE_obuf_to_output_FAST
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2271, %ax              # imm = 0x8DF
	xorw	%cx, %ax
	cmpw	$24047, %ax             # imm = 0x5DEF
	jne	.LBB47_168
# %bb.1:                                # %unRLE_obuf_to_output_FAST.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rdi, (%rax)
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	(%rax), %rdi
	movb	20(%rdi), %al
	movw	$24047, BasicBlockSignatureTracker # imm = 0x5DEF
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB47_95
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$24059, %ax             # imm = 0x5DFB
	jne	.LBB47_168
# %bb.3:                                # %unRLE_obuf_to_output_FAST.split283
	movw	$24059, BasicBlockSignatureTracker # imm = 0x5DFB
	movw	$0, RunTimeSignatureAdjuster
.LBB47_4:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_6 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1018, %ax              # imm = 0x3FA
	xorw	%cx, %ax
	cmpw	$24065, %ax             # imm = 0x5E01
	jne	.LBB47_165
# %bb.5:                                # %unRLE_obuf_to_output_FAST.split287
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24065, BasicBlockSignatureTracker # imm = 0x5E01
	movw	$0, RunTimeSignatureAdjuster
.LBB47_6:                               #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$24080, %ax             # imm = 0x5E10
	jne	.LBB47_164
# %bb.7:                                # %unRLE_obuf_to_output_FAST.split289
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movw	$24080, BasicBlockSignatureTracker # imm = 0x5E10
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$24085, %ax             # imm = 0x5E15
	jne	.LBB47_168
# %bb.9:                                # %unRLE_obuf_to_output_FAST.split291
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movw	$24085, BasicBlockSignatureTracker # imm = 0x5E15
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB47_162
.LBB47_10:                              #   in Loop: Header=BB47_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$24091, %ax             # imm = 0x5E1B
	jne	.LBB47_164
# %bb.11:                               # %unRLE_obuf_to_output_FAST.split293
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	16(%rax), %eax
	movw	$24091, BasicBlockSignatureTracker # imm = 0x5E1B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_14
# %bb.12:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$24096, %ax             # imm = 0x5E20
	jne	.LBB47_165
# %bb.13:                               # %unRLE_obuf_to_output_FAST.split297
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24096, BasicBlockSignatureTracker # imm = 0x5E20
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB47_20
.LBB47_14:                              #   in Loop: Header=BB47_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$24124, %ax             # imm = 0x5E3C
	jne	.LBB47_164
# %bb.15:                               # %unRLE_obuf_to_output_FAST.split299
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rax
	movb	12(%rax), %al
	movq	(%rsi), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	(%rsi), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	(%rsi), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	(%rsi), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	(%rsi), %rcx
	movl	%eax, 3184(%rcx)
	movq	(%rsi), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movw	$24124, BasicBlockSignatureTracker # imm = 0x5E3C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_18
# %bb.16:                               #   in Loop: Header=BB47_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$76, %ax
	cmpw	$24176, %ax             # imm = 0x5E70
	jne	.LBB47_164
# %bb.17:                               # %unRLE_obuf_to_output_FAST.split303
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movw	$24176, BasicBlockSignatureTracker # imm = 0x5E70
	movw	$76, RunTimeSignatureAdjuster
.LBB47_18:                              #   in Loop: Header=BB47_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$68, %ax
	xorw	%cx, %ax
	cmpw	$24184, %ax             # imm = 0x5E78
	jne	.LBB47_164
# %bb.19:                               # %unRLE_obuf_to_output_FAST.split305
                                        #   in Loop: Header=BB47_6 Depth=2
	movw	$24184, BasicBlockSignatureTracker # imm = 0x5E78
	movw	$121, RunTimeSignatureAdjuster
	jmp	.LBB47_6
.LBB47_20:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$89, %ax
	cmpw	$24185, %ax             # imm = 0x5E79
	jne	.LBB47_165
# %bb.21:                               # %unRLE_obuf_to_output_FAST.split301
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rax
	movl	1092(%rax), %eax
	movq	(%rcx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$24185, BasicBlockSignatureTracker # imm = 0x5E79
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB47_24
# %bb.22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$250, %ax
	cmpw	$24195, %ax             # imm = 0x5E83
	jne	.LBB47_168
# %bb.23:                               # %unRLE_obuf_to_output_FAST.split307
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movw	$24195, BasicBlockSignatureTracker # imm = 0x5E83
	movw	$150, RunTimeSignatureAdjuster
	jmp	.LBB47_162
.LBB47_24:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$255, %ax
	cmpw	$24198, %ax             # imm = 0x5E86
	jne	.LBB47_165
# %bb.25:                               # %unRLE_obuf_to_output_FAST.split309
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rax
	movl	1092(%rax), %eax
	movq	(%rcx), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$24198, BasicBlockSignatureTracker # imm = 0x5E86
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB47_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$24203, %ax             # imm = 0x5E8B
	jne	.LBB47_168
# %bb.27:                               # %unRLE_obuf_to_output_FAST.split311
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	$1, (%rax)
	movw	$24203, BasicBlockSignatureTracker # imm = 0x5E8B
	movw	$158, RunTimeSignatureAdjuster
	jmp	.LBB47_162
.LBB47_28:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$24216, %ax             # imm = 0x5E98
	jne	.LBB47_165
# %bb.29:                               # %unRLE_obuf_to_output_FAST.split313
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movl	$1, 16(%rax)
	movq	(%rdx), %rax
	movl	64(%rax), %eax
	movq	(%rdx), %rcx
	movb	%al, 12(%rcx)
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdx), %rax
	movl	24(%rax), %eax
	movw	$24216, BasicBlockSignatureTracker # imm = 0x5E98
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_36
# %bb.30:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$24230, %ax             # imm = 0x5EA6
	jne	.LBB47_165
# %bb.31:                               # %unRLE_obuf_to_output_FAST.split315
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$24230, BasicBlockSignatureTracker # imm = 0x5EA6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB47_34
# %bb.32:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$24233, %ax             # imm = 0x5EA9
	jne	.LBB47_165
# %bb.33:                               # %unRLE_obuf_to_output_FAST.split319
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$24233, BasicBlockSignatureTracker # imm = 0x5EA9
	movw	$15, RunTimeSignatureAdjuster
.LBB47_34:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10, %ax
	xorw	%cx, %ax
	cmpw	$24236, %ax             # imm = 0x5EAC
	jne	.LBB47_165
# %bb.35:                               # %unRLE_obuf_to_output_FAST.split321
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24236, BasicBlockSignatureTracker # imm = 0x5EAC
	movw	$52, RunTimeSignatureAdjuster
.LBB47_36:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$43, %ax
	xorw	%cx, %ax
	cmpw	$24243, %ax             # imm = 0x5EB3
	jne	.LBB47_165
# %bb.37:                               # %unRLE_obuf_to_output_FAST.split317
                                        #   in Loop: Header=BB47_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%rdx)
	movq	(%rdi), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rdi), %rax
	movl	1092(%rax), %eax
	movq	(%rdi), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$24243, BasicBlockSignatureTracker # imm = 0x5EB3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB47_41
# %bb.38:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$24248, %ax             # imm = 0x5EB8
	jne	.LBB47_165
# %bb.39:                               # %unRLE_obuf_to_output_FAST.split323
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24248, BasicBlockSignatureTracker # imm = 0x5EB8
	movw	$835, RunTimeSignatureAdjuster # imm = 0x343
.LBB47_40:                              # %.backedge
                                        #   in Loop: Header=BB47_4 Depth=1
	jmp	.LBB47_4
.LBB47_41:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$24255, %ax             # imm = 0x5EBF
	jne	.LBB47_165
# %bb.42:                               # %unRLE_obuf_to_output_FAST.split325
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	64(%rcx), %ecx
	movw	$24255, BasicBlockSignatureTracker # imm = 0x5EBF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB47_45
# %bb.43:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$105, %ax
	cmpw	$24278, %ax             # imm = 0x5ED6
	jne	.LBB47_165
# %bb.44:                               # %unRLE_obuf_to_output_FAST.split327
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	%eax, 64(%rcx)
	movw	$24278, BasicBlockSignatureTracker # imm = 0x5ED6
	movw	$813, RunTimeSignatureAdjuster # imm = 0x32D
	jmp	.LBB47_40
.LBB47_45:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$100, %ax
	cmpw	$24283, %ax             # imm = 0x5EDB
	jne	.LBB47_165
# %bb.46:                               # %unRLE_obuf_to_output_FAST.split329
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movl	$2, 16(%rax)
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdx), %rax
	movl	24(%rax), %eax
	movw	$24283, BasicBlockSignatureTracker # imm = 0x5EDB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_53
# %bb.47:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$24306, %ax             # imm = 0x5EF2
	jne	.LBB47_165
# %bb.48:                               # %unRLE_obuf_to_output_FAST.split331
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$24306, BasicBlockSignatureTracker # imm = 0x5EF2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB47_51
# %bb.49:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$499, %ax               # imm = 0x1F3
	cmpw	$24321, %ax             # imm = 0x5F01
	jne	.LBB47_165
# %bb.50:                               # %unRLE_obuf_to_output_FAST.split335
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$24321, BasicBlockSignatureTracker # imm = 0x5F01
	movw	$499, RunTimeSignatureAdjuster # imm = 0x1F3
.LBB47_51:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$483, %ax               # imm = 0x1E3
	xorw	%cx, %ax
	cmpw	$24337, %ax             # imm = 0x5F11
	jne	.LBB47_165
# %bb.52:                               # %unRLE_obuf_to_output_FAST.split337
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24337, BasicBlockSignatureTracker # imm = 0x5F11
	movw	$458, RunTimeSignatureAdjuster # imm = 0x1CA
.LBB47_53:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$406, %ax               # imm = 0x196
	xorw	%cx, %ax
	cmpw	$24397, %ax             # imm = 0x5F4D
	jne	.LBB47_165
# %bb.54:                               # %unRLE_obuf_to_output_FAST.split333
                                        #   in Loop: Header=BB47_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%rdx)
	movq	(%rdi), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rdi), %rax
	movl	1092(%rax), %eax
	movq	(%rdi), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$24397, BasicBlockSignatureTracker # imm = 0x5F4D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB47_57
# %bb.55:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$24410, %ax             # imm = 0x5F5A
	jne	.LBB47_165
# %bb.56:                               # %unRLE_obuf_to_output_FAST.split339
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24410, BasicBlockSignatureTracker # imm = 0x5F5A
	movw	$673, RunTimeSignatureAdjuster # imm = 0x2A1
	jmp	.LBB47_40
.LBB47_57:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$216, %ax
	cmpw	$24469, %ax             # imm = 0x5F95
	jne	.LBB47_165
# %bb.58:                               # %unRLE_obuf_to_output_FAST.split341
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	64(%rcx), %ecx
	movw	$24469, BasicBlockSignatureTracker # imm = 0x5F95
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB47_61
# %bb.59:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$24472, %ax             # imm = 0x5F98
	jne	.LBB47_165
# %bb.60:                               # %unRLE_obuf_to_output_FAST.split343
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	%eax, 64(%rcx)
	movw	$24472, BasicBlockSignatureTracker # imm = 0x5F98
	movw	$611, RunTimeSignatureAdjuster # imm = 0x263
	jmp	.LBB47_40
.LBB47_61:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$70, %ax
	cmpw	$24531, %ax             # imm = 0x5FD3
	jne	.LBB47_165
# %bb.62:                               # %unRLE_obuf_to_output_FAST.split345
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movl	$3, 16(%rax)
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdx), %rax
	movl	24(%rax), %eax
	movw	$24531, BasicBlockSignatureTracker # imm = 0x5FD3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_69
# %bb.63:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$24547, %ax             # imm = 0x5FE3
	jne	.LBB47_165
# %bb.64:                               # %unRLE_obuf_to_output_FAST.split347
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$24547, BasicBlockSignatureTracker # imm = 0x5FE3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB47_67
# %bb.65:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$24563, %ax             # imm = 0x5FF3
	jne	.LBB47_165
# %bb.66:                               # %unRLE_obuf_to_output_FAST.split351
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$24563, BasicBlockSignatureTracker # imm = 0x5FF3
	movw	$16, RunTimeSignatureAdjuster
.LBB47_67:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16333, %ax             # imm = 0x3FCD
	xorw	%cx, %ax
	cmpw	$24622, %ax             # imm = 0x602E
	jne	.LBB47_165
# %bb.68:                               # %unRLE_obuf_to_output_FAST.split353
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24622, BasicBlockSignatureTracker # imm = 0x602E
	movw	$16381, RunTimeSignatureAdjuster # imm = 0x3FFD
.LBB47_69:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16366, %ax             # imm = 0x3FEE
	xorw	%cx, %ax
	cmpw	$24637, %ax             # imm = 0x603D
	jne	.LBB47_165
# %bb.70:                               # %unRLE_obuf_to_output_FAST.split349
                                        #   in Loop: Header=BB47_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%rdx)
	movq	(%rdi), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rdi), %rax
	movl	1092(%rax), %eax
	movq	(%rdi), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	movw	$24637, BasicBlockSignatureTracker # imm = 0x603D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB47_73
# %bb.71:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$125, %ax
	cmpw	$24640, %ax             # imm = 0x6040
	jne	.LBB47_165
# %bb.72:                               # %unRLE_obuf_to_output_FAST.split355
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24640, BasicBlockSignatureTracker # imm = 0x6040
	movw	$15803, RunTimeSignatureAdjuster # imm = 0x3DBB
	jmp	.LBB47_40
.LBB47_73:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$108, %ax
	cmpw	$24657, %ax             # imm = 0x6051
	jne	.LBB47_165
# %bb.74:                               # %unRLE_obuf_to_output_FAST.split357
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	64(%rcx), %ecx
	movw	$24657, BasicBlockSignatureTracker # imm = 0x6051
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB47_77
# %bb.75:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$24675, %ax             # imm = 0x6063
	jne	.LBB47_165
# %bb.76:                               # %unRLE_obuf_to_output_FAST.split359
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	%eax, 64(%rcx)
	movw	$24675, BasicBlockSignatureTracker # imm = 0x6063
	movw	$15768, RunTimeSignatureAdjuster # imm = 0x3D98
	jmp	.LBB47_40
.LBB47_77:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$24686, %ax             # imm = 0x606E
	jne	.LBB47_165
# %bb.78:                               # %unRLE_obuf_to_output_FAST.split361
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdx), %rax
	movl	24(%rax), %eax
	movw	$24686, BasicBlockSignatureTracker # imm = 0x606E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_85
# %bb.79:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$225, %ax
	cmpw	$24719, %ax             # imm = 0x608F
	jne	.LBB47_165
# %bb.80:                               # %unRLE_obuf_to_output_FAST.split363
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$24719, BasicBlockSignatureTracker # imm = 0x608F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB47_83
# %bb.81:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$38, %ax
	cmpw	$24745, %ax             # imm = 0x60A9
	jne	.LBB47_165
# %bb.82:                               # %unRLE_obuf_to_output_FAST.split367
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$24745, BasicBlockSignatureTracker # imm = 0x60A9
	movw	$38, RunTimeSignatureAdjuster
.LBB47_83:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$51, %ax
	xorw	%cx, %ax
	cmpw	$24764, %ax             # imm = 0x60BC
	jne	.LBB47_165
# %bb.84:                               # %unRLE_obuf_to_output_FAST.split369
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24764, BasicBlockSignatureTracker # imm = 0x60BC
	movw	$210, RunTimeSignatureAdjuster
.LBB47_85:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$163, %ax
	xorw	%cx, %ax
	cmpw	$24781, %ax             # imm = 0x60CD
	jne	.LBB47_165
# %bb.86:                               # %unRLE_obuf_to_output_FAST.split365
                                        #   in Loop: Header=BB47_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	xorl	%eax, %ecx
	movb	%cl, (%rdx)
	movq	(%rdi), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	(%rdx), %eax
	addl	$4, %eax
	movq	(%rdi), %rcx
	movl	%eax, 16(%rcx)
	movq	(%rdi), %rax
	movq	3152(%rax), %rax
	movq	(%rdi), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdi), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdi), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	(%rdi), %rcx
	movl	%eax, 64(%rcx)
	movq	(%rdi), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdi), %rax
	movl	24(%rax), %eax
	movw	$24781, BasicBlockSignatureTracker # imm = 0x60CD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_93
# %bb.87:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$24795, %ax             # imm = 0x60DB
	jne	.LBB47_165
# %bb.88:                               # %unRLE_obuf_to_output_FAST.split371
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$24795, BasicBlockSignatureTracker # imm = 0x60DB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB47_91
# %bb.89:                               #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$24815, %ax             # imm = 0x60EF
	jne	.LBB47_165
# %bb.90:                               # %unRLE_obuf_to_output_FAST.split375
                                        #   in Loop: Header=BB47_4 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$24815, BasicBlockSignatureTracker # imm = 0x60EF
	movw	$52, RunTimeSignatureAdjuster
.LBB47_91:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$24818, %ax             # imm = 0x60F2
	jne	.LBB47_165
# %bb.92:                               # %unRLE_obuf_to_output_FAST.split377
                                        #   in Loop: Header=BB47_4 Depth=1
	movw	$24818, BasicBlockSignatureTracker # imm = 0x60F2
	movw	$63, RunTimeSignatureAdjuster
.LBB47_93:                              #   in Loop: Header=BB47_4 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$464, %ax               # imm = 0x1D0
	xorw	%cx, %ax
	cmpw	$24861, %ax             # imm = 0x611D
	jne	.LBB47_165
# %bb.94:                               # %unRLE_obuf_to_output_FAST.split373
                                        #   in Loop: Header=BB47_4 Depth=1
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	(%rdi), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	(%rdi), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movw	$24861, BasicBlockSignatureTracker # imm = 0x611D
	movw	$15590, RunTimeSignatureAdjuster # imm = 0x3CE6
	jmp	.LBB47_40
.LBB47_95:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15562, %ax             # imm = 0x3CCA
	cmpw	$24869, %ax             # imm = 0x6125
	jne	.LBB47_168
# %bb.96:                               # %unRLE_obuf_to_output_FAST.split285
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rax
	movl	3184(%rax), %eax
	movl	%eax, (%r11)
	movq	(%rdi), %rax
	movb	12(%rax), %al
	movb	%al, (%r14)
	movq	(%rdi), %rax
	movl	16(%rax), %eax
	movl	%eax, (%rdx)
	movq	(%rdi), %rax
	movl	1092(%rax), %eax
	movl	%eax, (%r12)
	movq	(%rdi), %rax
	movl	64(%rax), %eax
	movl	%eax, (%r15)
	movq	(%rdi), %rax
	movq	3152(%rax), %rax
	movq	%rax, (%r13)
	movq	(%rdi), %rax
	movl	60(%rax), %eax
	movl	%eax, (%r10)
	movq	(%rdi), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, (%rsi)
	movq	(%rdi), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movl	%eax, (%rbx)
	movq	(%rdi), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, (%r9)
	movw	$24869, BasicBlockSignatureTracker # imm = 0x6125
	movw	$0, RunTimeSignatureAdjuster
.LBB47_97:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_101 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %di
	xorw	$96, %ax
	xorw	%di, %ax
	cmpw	$24901, %ax             # imm = 0x6145
	jne	.LBB47_167
# %bb.98:                               # %unRLE_obuf_to_output_FAST.split379
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	(%rdx), %eax
	movw	$24901, BasicBlockSignatureTracker # imm = 0x6145
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB47_119
# %bb.99:                               #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$24906, %ax             # imm = 0x614A
	jne	.LBB47_167
# %bb.100:                              # %unRLE_obuf_to_output_FAST.split381
                                        #   in Loop: Header=BB47_97 Depth=1
	movw	$24906, BasicBlockSignatureTracker # imm = 0x614A
	movw	$0, RunTimeSignatureAdjuster
.LBB47_101:                             #   Parent Loop BB47_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %di
	xorw	$25, %ax
	xorw	%di, %ax
	cmpw	$24915, %ax             # imm = 0x6153
	jne	.LBB47_166
# %bb.102:                              # %unRLE_obuf_to_output_FAST.split385
                                        #   in Loop: Header=BB47_101 Depth=2
	movl	(%rcx), %eax
	movw	$24915, BasicBlockSignatureTracker # imm = 0x6153
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_105
# %bb.103:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$197, %ax
	cmpw	$24982, %ax             # imm = 0x6196
	jne	.LBB47_168
# %bb.104:                              # %unRLE_obuf_to_output_FAST.split387
	movw	$24982, BasicBlockSignatureTracker # imm = 0x6196
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB47_154
.LBB47_105:                             #   in Loop: Header=BB47_101 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$203, %ax
	cmpw	$24984, %ax             # imm = 0x6198
	jne	.LBB47_166
# %bb.106:                              # %unRLE_obuf_to_output_FAST.split389
                                        #   in Loop: Header=BB47_101 Depth=2
	movl	(%rdx), %eax
	movw	$24984, BasicBlockSignatureTracker # imm = 0x6198
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB47_109
# %bb.107:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$25075, %ax             # imm = 0x61F3
	jne	.LBB47_167
# %bb.108:                              # %unRLE_obuf_to_output_FAST.split393
                                        #   in Loop: Header=BB47_97 Depth=1
	movw	$25075, BasicBlockSignatureTracker # imm = 0x61F3
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB47_111
.LBB47_109:                             #   in Loop: Header=BB47_101 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$912, %ax               # imm = 0x390
	cmpw	$25096, %ax             # imm = 0x6208
	jne	.LBB47_166
# %bb.110:                              # %unRLE_obuf_to_output_FAST.split395
                                        #   in Loop: Header=BB47_101 Depth=2
	movb	(%r14), %al
	movq	(%rsi), %rdi
	movb	%al, (%rdi)
	movl	(%r11), %eax
	shll	$8, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	movl	(%r11), %edi
	shrl	$24, %edi
	movzbl	(%r14), %eax
	xorl	%eax, %edi
	movl	%edi, %eax
	movl	-60(%rbp), %edi         # 4-byte Reload
	xorl	BZ2_crc32Table(,%rax,4), %edi
	movl	%edi, (%r11)
	movl	(%rdx), %eax
	addl	$-1, %eax
	movl	%eax, (%rdx)
	movq	(%rsi), %rax
	addq	$1, %rax
	movq	%rax, (%rsi)
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$25096, BasicBlockSignatureTracker # imm = 0x6208
	movw	$834, RunTimeSignatureAdjuster # imm = 0x342
	jmp	.LBB47_101
.LBB47_111:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1005, %ax              # imm = 0x3ED
	cmpw	$25118, %ax             # imm = 0x621E
	jne	.LBB47_167
# %bb.112:                              # %unRLE_obuf_to_output_FAST.split397
                                        #   in Loop: Header=BB47_97 Depth=1
	movw	$25118, BasicBlockSignatureTracker # imm = 0x621E
	movw	$0, RunTimeSignatureAdjuster
.LBB47_113:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %di
	xorw	$61, %ax
	xorw	%di, %ax
	cmpw	$25123, %ax             # imm = 0x6223
	jne	.LBB47_167
# %bb.114:                              # %unRLE_obuf_to_output_FAST.split399
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	(%rcx), %eax
	movw	$25123, BasicBlockSignatureTracker # imm = 0x6223
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB47_117
# %bb.115:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$25128, %ax             # imm = 0x6228
	jne	.LBB47_168
# %bb.116:                              # %unRLE_obuf_to_output_FAST.split401
	movl	$1, (%rdx)
	movw	$25128, BasicBlockSignatureTracker # imm = 0x6228
	movw	$958, RunTimeSignatureAdjuster # imm = 0x3BE
	jmp	.LBB47_154
.LBB47_117:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$25148, %ax             # imm = 0x623C
	jne	.LBB47_167
# %bb.118:                              # %unRLE_obuf_to_output_FAST.split403
                                        #   in Loop: Header=BB47_97 Depth=1
	movb	(%r14), %al
	movq	(%rsi), %rdi
	movb	%al, (%rdi)
	movl	(%r11), %eax
	shll	$8, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	movl	(%r11), %edi
	shrl	$24, %edi
	movzbl	(%r14), %eax
	xorl	%eax, %edi
	movl	%edi, %eax
	movl	-60(%rbp), %edi         # 4-byte Reload
	xorl	BZ2_crc32Table(,%rax,4), %edi
	movl	%edi, (%r11)
	movq	(%rsi), %rax
	addq	$1, %rax
	movq	%rax, (%rsi)
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$25148, BasicBlockSignatureTracker # imm = 0x623C
	movw	$889, RunTimeSignatureAdjuster # imm = 0x379
.LBB47_119:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %di
	xorw	$784, %ax               # imm = 0x310
	xorw	%di, %ax
	cmpw	$25173, %ax             # imm = 0x6255
	jne	.LBB47_167
# %bb.120:                              # %unRLE_obuf_to_output_FAST.split383
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	(%r12), %eax
	movl	(%r9), %edi
	movw	$25173, BasicBlockSignatureTracker # imm = 0x6255
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	jle	.LBB47_123
# %bb.121:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$25185, %ax             # imm = 0x6261
	jne	.LBB47_168
# %bb.122:                              # %unRLE_obuf_to_output_FAST.split405
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	$1, (%rax)
	movw	$25185, BasicBlockSignatureTracker # imm = 0x6261
	movw	$15476, RunTimeSignatureAdjuster # imm = 0x3C74
	jmp	.LBB47_162
.LBB47_123:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$25196, %ax             # imm = 0x626C
	jne	.LBB47_167
# %bb.124:                              # %unRLE_obuf_to_output_FAST.split407
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	(%r12), %eax
	movl	(%r9), %edi
	movw	$25196, BasicBlockSignatureTracker # imm = 0x626C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	jne	.LBB47_127
# %bb.125:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$25207, %ax             # imm = 0x6277
	jne	.LBB47_168
# %bb.126:                              # %unRLE_obuf_to_output_FAST.split409
	movl	$0, (%rdx)
	movw	$25207, BasicBlockSignatureTracker # imm = 0x6277
	movw	$993, RunTimeSignatureAdjuster # imm = 0x3E1
	jmp	.LBB47_154
.LBB47_127:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$233, %ax
	cmpw	$25221, %ax             # imm = 0x6285
	jne	.LBB47_167
# %bb.128:                              # %unRLE_obuf_to_output_FAST.split411
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	(%r15), %eax
	movb	%al, (%r14)
	movq	(%r13), %rax
	movl	(%r10), %edi
	movl	(%rax,%rdi,4), %eax
	movl	%eax, (%r10)
	movl	(%r10), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	%al, (%rdi)
	movl	(%r10), %eax
	shrl	$8, %eax
	movl	%eax, (%r10)
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movzbl	(%rdi), %eax
	movl	(%r15), %edi
	movw	$25221, BasicBlockSignatureTracker # imm = 0x6285
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	je	.LBB47_131
# %bb.129:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$25273, %ax             # imm = 0x62B9
	jne	.LBB47_167
# %bb.130:                              # %unRLE_obuf_to_output_FAST.split413
                                        #   in Loop: Header=BB47_97 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movl	%eax, (%r15)
	movw	$25273, BasicBlockSignatureTracker # imm = 0x62B9
	movw	$167, RunTimeSignatureAdjuster
	jmp	.LBB47_113
.LBB47_131:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$71, %ax
	cmpw	$25282, %ax             # imm = 0x62C2
	jne	.LBB47_167
# %bb.132:                              # %unRLE_obuf_to_output_FAST.split415
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	(%r12), %eax
	movl	(%r9), %edi
	movw	$25282, BasicBlockSignatureTracker # imm = 0x62C2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	jne	.LBB47_135
# %bb.133:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$25286, %ax             # imm = 0x62C6
	jne	.LBB47_167
# %bb.134:                              # %unRLE_obuf_to_output_FAST.split417
                                        #   in Loop: Header=BB47_97 Depth=1
	movw	$25286, BasicBlockSignatureTracker # imm = 0x62C6
	movw	$216, RunTimeSignatureAdjuster
	jmp	.LBB47_113
.LBB47_135:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$25332, %ax             # imm = 0x62F4
	jne	.LBB47_167
# %bb.136:                              # %unRLE_obuf_to_output_FAST.split419
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	$2, (%rdx)
	movq	(%r13), %rax
	movl	(%r10), %edi
	movl	(%rax,%rdi,4), %eax
	movl	%eax, (%r10)
	movl	(%r10), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	%al, (%rdi)
	movl	(%r10), %eax
	shrl	$8, %eax
	movl	%eax, (%r10)
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movl	(%r12), %eax
	movl	(%r9), %edi
	movw	$25332, BasicBlockSignatureTracker # imm = 0x62F4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	jne	.LBB47_140
# %bb.137:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$25336, %ax             # imm = 0x62F8
	jne	.LBB47_167
# %bb.138:                              # %unRLE_obuf_to_output_FAST.split421
                                        #   in Loop: Header=BB47_97 Depth=1
	movw	$25336, BasicBlockSignatureTracker # imm = 0x62F8
	movw	$989, RunTimeSignatureAdjuster # imm = 0x3DD
.LBB47_139:                             # %.backedge4
                                        #   in Loop: Header=BB47_97 Depth=1
	jmp	.LBB47_97
.LBB47_140:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$25342, %ax             # imm = 0x62FE
	jne	.LBB47_167
# %bb.141:                              # %unRLE_obuf_to_output_FAST.split423
                                        #   in Loop: Header=BB47_97 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movl	(%r15), %edi
	movw	$25342, BasicBlockSignatureTracker # imm = 0x62FE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	je	.LBB47_144
# %bb.142:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$470, %ax               # imm = 0x1D6
	cmpw	$25384, %ax             # imm = 0x6328
	jne	.LBB47_167
# %bb.143:                              # %unRLE_obuf_to_output_FAST.split425
                                        #   in Loop: Header=BB47_97 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movl	%eax, (%r15)
	movw	$25384, BasicBlockSignatureTracker # imm = 0x6328
	movw	$525, RunTimeSignatureAdjuster # imm = 0x20D
	jmp	.LBB47_139
.LBB47_144:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$456, %ax               # imm = 0x1C8
	cmpw	$25398, %ax             # imm = 0x6336
	jne	.LBB47_167
# %bb.145:                              # %unRLE_obuf_to_output_FAST.split427
                                        #   in Loop: Header=BB47_97 Depth=1
	movl	$3, (%rdx)
	movq	(%r13), %rax
	movl	(%r10), %edi
	movl	(%rax,%rdi,4), %eax
	movl	%eax, (%r10)
	movl	(%r10), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	%al, (%rdi)
	movl	(%r10), %eax
	shrl	$8, %eax
	movl	%eax, (%r10)
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movl	(%r12), %eax
	movl	(%r9), %edi
	movw	$25398, BasicBlockSignatureTracker # imm = 0x6336
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	jne	.LBB47_148
# %bb.146:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$181, %ax
	cmpw	$25475, %ax             # imm = 0x6383
	jne	.LBB47_167
# %bb.147:                              # %unRLE_obuf_to_output_FAST.split429
                                        #   in Loop: Header=BB47_97 Depth=1
	movw	$25475, BasicBlockSignatureTracker # imm = 0x6383
	movw	$678, RunTimeSignatureAdjuster # imm = 0x2A6
	jmp	.LBB47_139
.LBB47_148:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$178, %ax
	cmpw	$25476, %ax             # imm = 0x6384
	jne	.LBB47_167
# %bb.149:                              # %unRLE_obuf_to_output_FAST.split431
                                        #   in Loop: Header=BB47_97 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movl	(%r15), %edi
	movw	$25476, BasicBlockSignatureTracker # imm = 0x6384
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	je	.LBB47_152
# %bb.150:                              #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$25483, %ax             # imm = 0x638B
	jne	.LBB47_167
# %bb.151:                              # %unRLE_obuf_to_output_FAST.split433
                                        #   in Loop: Header=BB47_97 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movl	%eax, (%r15)
	movw	$25483, BasicBlockSignatureTracker # imm = 0x638B
	movw	$686, RunTimeSignatureAdjuster # imm = 0x2AE
	jmp	.LBB47_139
.LBB47_152:                             #   in Loop: Header=BB47_97 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$25489, %ax             # imm = 0x6391
	jne	.LBB47_167
# %bb.153:                              # %unRLE_obuf_to_output_FAST.split435
                                        #   in Loop: Header=BB47_97 Depth=1
	movq	(%r13), %rax
	movl	(%r10), %edi
	movl	(%rax,%rdi,4), %eax
	movl	%eax, (%r10)
	movl	(%r10), %eax
	andl	$255, %eax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movb	%al, (%rdi)
	movl	(%r10), %eax
	shrl	$8, %eax
	movl	%eax, (%r10)
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movzbl	(%rdi), %eax
	addl	$4, %eax
	movl	%eax, (%rdx)
	movq	(%r13), %rax
	movl	(%r10), %edi
	movl	(%rax,%rdi,4), %eax
	movl	%eax, (%r10)
	movl	(%r10), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, (%r15)
	movl	(%r10), %eax
	shrl	$8, %eax
	movl	%eax, (%r10)
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$25489, BasicBlockSignatureTracker # imm = 0x6391
	movw	$692, RunTimeSignatureAdjuster # imm = 0x2B4
	jmp	.LBB47_139
.LBB47_154:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %di
	xorw	$514, %ax               # imm = 0x202
	xorw	%di, %ax
	cmpw	$25492, %ax             # imm = 0x6394
	jne	.LBB47_168
# %bb.155:                              # %unRLE_obuf_to_output_FAST.split391
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	(%r9), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, (%r8)
	movl	(%rbx), %eax
	subl	(%rcx), %eax
	movq	(%r9), %rdi
	movq	(%rdi), %rdi
	addl	36(%rdi), %eax
	movl	%eax, 36(%rdi)
	movq	(%r9), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	(%r8), %edi
	movw	$25492, BasicBlockSignatureTracker # imm = 0x6394
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edi, %eax
	jae	.LBB47_158
# %bb.156:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$25532, %ax             # imm = 0x63BC
	jne	.LBB47_168
# %bb.157:                              # %unRLE_obuf_to_output_FAST.split437
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	40(%rax), %edi
	addl	$1, %edi
	movl	%edi, 40(%rax)
	movw	$25532, BasicBlockSignatureTracker # imm = 0x63BC
	movw	$40, RunTimeSignatureAdjuster
.LBB47_158:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %di
	xorw	$90, %ax
	xorw	%di, %ax
	cmpw	$25550, %ax             # imm = 0x63CE
	jne	.LBB47_168
# %bb.159:                              # %unRLE_obuf_to_output_FAST.split439
	movl	(%r11), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	movq	(%rbx), %rdi
	movl	%eax, 3184(%rdi)
	movb	(%r14), %al
	movq	(%rbx), %rdi
	movb	%al, 12(%rdi)
	movl	(%rdx), %eax
	movq	(%rbx), %rdx
	movl	%eax, 16(%rdx)
	movl	(%r12), %eax
	movq	(%rbx), %rdx
	movl	%eax, 1092(%rdx)
	movl	(%r15), %eax
	movq	(%rbx), %rdx
	movl	%eax, 64(%rdx)
	movq	(%r13), %rax
	movq	(%rbx), %rdx
	movq	%rax, 3152(%rdx)
	movl	(%r10), %eax
	movq	(%rbx), %rdx
	movl	%eax, 60(%rdx)
	movq	(%rsi), %rax
	movq	(%rbx), %rdx
	movq	(%rdx), %rdx
	movq	%rax, 24(%rdx)
	movl	(%rcx), %eax
	movq	(%rbx), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
	movw	$25550, BasicBlockSignatureTracker # imm = 0x63CE
	movw	$0, RunTimeSignatureAdjuster
# %bb.160:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$25571, %ax             # imm = 0x63E3
	jne	.LBB47_168
# %bb.161:                              # %unRLE_obuf_to_output_FAST.split441
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	$0, (%rax)
	movw	$25571, BasicBlockSignatureTracker # imm = 0x63E3
	movw	$15862, RunTimeSignatureAdjuster # imm = 0x3DF6
.LBB47_162:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15844, %ax             # imm = 0x3DE4
	xorw	%cx, %ax
	cmpw	$25585, %ax             # imm = 0x63F1
	jne	.LBB47_168
# %bb.163:                              # %unRLE_obuf_to_output_FAST.split295
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	(%rax), %al
	movw	$25585, BasicBlockSignatureTracker # imm = 0x63F1
	movw	$14095, RunTimeSignatureAdjuster # imm = 0x370F
	movzbl	%al, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB47_164:                             # %CFerrorHandler.unRLE_obuf_to_output_FAST.loopexit
	jmp	.LBB47_168
.LBB47_165:                             # %CFerrorHandler.unRLE_obuf_to_output_FAST.loopexit1
	jmp	.LBB47_168
.LBB47_166:                             # %CFerrorHandler.unRLE_obuf_to_output_FAST.loopexit2
	jmp	.LBB47_168
.LBB47_167:                             # %CFerrorHandler.unRLE_obuf_to_output_FAST.loopexit3
	jmp	.LBB47_168
.LBB47_168:                             # %CFerrorHandler.unRLE_obuf_to_output_FAST
	callq	FAULT_DETECTED_CFC
.Lfunc_end47:
	.size	unRLE_obuf_to_output_FAST, .Lfunc_end47-unRLE_obuf_to_output_FAST
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd     # -- Begin function BZ2_bzDecompressEnd
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd,@function
BZ2_bzDecompressEnd:                    # @BZ2_bzDecompressEnd
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7408, %ax              # imm = 0x1CF0
	xorw	%cx, %ax
	cmpw	$25614, %ax             # imm = 0x640E
	jne	.LBB48_32
# %bb.1:                                # %BZ2_bzDecompressEnd.split102
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7408, %ax              # imm = 0x1CF0
	xorw	%cx, %ax
	cmpw	$25614, %ax             # imm = 0x640E
	jne	.LBB48_32
# %bb.2:                                # %BZ2_bzDecompressEnd.split100
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7408, %ax              # imm = 0x1CF0
	xorw	%cx, %ax
	cmpw	$25614, %ax             # imm = 0x640E
	jne	.LBB48_32
# %bb.3:                                # %BZ2_bzDecompressEnd.split98
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7408, %ax              # imm = 0x1CF0
	xorw	%cx, %ax
	cmpw	$25614, %ax             # imm = 0x640E
	jne	.LBB48_32
# %bb.4:                                # %BZ2_bzDecompressEnd.split96
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7408, %ax              # imm = 0x1CF0
	xorw	%cx, %ax
	cmpw	$25614, %ax             # imm = 0x640E
	jne	.LBB48_32
# %bb.5:                                # %BZ2_bzDecompressEnd.split94
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%rbx)
	movq	(%rbx), %rax
	movw	$25614, BasicBlockSignatureTracker # imm = 0x640E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB48_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$25648, %ax             # imm = 0x6430
	jne	.LBB48_32
# %bb.7:                                # %BZ2_bzDecompressEnd.split
	movl	$-2, (%r14)
	movw	$25648, BasicBlockSignatureTracker # imm = 0x6430
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB48_30
.LBB48_8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$73, %ax
	cmpw	$25671, %ax             # imm = 0x6447
	jne	.LBB48_32
# %bb.9:                                # %BZ2_bzDecompressEnd.split70
	movq	(%rbx), %rax
	movq	48(%rax), %rax
	movq	%rax, (%r15)
	movq	(%r15), %rax
	movw	$25671, BasicBlockSignatureTracker # imm = 0x6447
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB48_12
# %bb.10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$25672, %ax             # imm = 0x6448
	jne	.LBB48_32
# %bb.11:                               # %BZ2_bzDecompressEnd.split74
	movl	$-2, (%r14)
	movw	$25672, BasicBlockSignatureTracker # imm = 0x6448
	movw	$120, RunTimeSignatureAdjuster
	jmp	.LBB48_30
.LBB48_12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$25723, %ax             # imm = 0x647B
	jne	.LBB48_32
# %bb.13:                               # %BZ2_bzDecompressEnd.split76
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	(%rbx), %rcx
	movw	$25723, BasicBlockSignatureTracker # imm = 0x647B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	%rcx, %rax
	je	.LBB48_16
# %bb.14:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$250, %ax
	cmpw	$25729, %ax             # imm = 0x6481
	jne	.LBB48_32
# %bb.15:                               # %BZ2_bzDecompressEnd.split78
	movl	$-2, (%r14)
	movw	$25729, BasicBlockSignatureTracker # imm = 0x6481
	movw	$177, RunTimeSignatureAdjuster
	jmp	.LBB48_30
.LBB48_16:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$244, %ax
	cmpw	$25743, %ax             # imm = 0x648F
	jne	.LBB48_32
# %bb.17:                               # %BZ2_bzDecompressEnd.split80
	movq	(%r15), %rax
	movq	3152(%rax), %rax
	movw	$25743, BasicBlockSignatureTracker # imm = 0x648F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB48_20
# %bb.18:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$25756, %ax             # imm = 0x649C
	jne	.LBB48_32
# %bb.19:                               # %BZ2_bzDecompressEnd.split82
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%r15), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
	movw	$25756, BasicBlockSignatureTracker # imm = 0x649C
	movw	$19, RunTimeSignatureAdjuster
.LBB48_20:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$25759, %ax             # imm = 0x649F
	jne	.LBB48_32
# %bb.21:                               # %BZ2_bzDecompressEnd.split84
	movq	(%r15), %rax
	movq	3160(%rax), %rax
	movw	$25759, BasicBlockSignatureTracker # imm = 0x649F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB48_24
# %bb.22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$25765, %ax             # imm = 0x64A5
	jne	.LBB48_32
# %bb.23:                               # %BZ2_bzDecompressEnd.split86
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%r15), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
	movw	$25765, BasicBlockSignatureTracker # imm = 0x64A5
	movw	$58, RunTimeSignatureAdjuster
.LBB48_24:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$56, %ax
	xorw	%cx, %ax
	cmpw	$25767, %ax             # imm = 0x64A7
	jne	.LBB48_32
# %bb.25:                               # %BZ2_bzDecompressEnd.split88
	movq	(%r15), %rax
	movq	3168(%rax), %rax
	movw	$25767, BasicBlockSignatureTracker # imm = 0x64A7
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB48_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$25774, %ax             # imm = 0x64AE
	jne	.LBB48_32
# %bb.27:                               # %BZ2_bzDecompressEnd.split90
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%r15), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
	movw	$25774, BasicBlockSignatureTracker # imm = 0x64AE
	movw	$9, RunTimeSignatureAdjuster
.LBB48_28:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$115, %ax
	xorw	%cx, %ax
	cmpw	$25812, %ax             # imm = 0x64D4
	jne	.LBB48_32
# %bb.29:                               # %BZ2_bzDecompressEnd.split92
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	(%rbx), %rcx
	movq	72(%rcx), %rdi
	movq	(%rbx), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	(%rbx), %rax
	movq	$0, 48(%rax)
	movl	$0, (%r14)
	movw	$25812, BasicBlockSignatureTracker # imm = 0x64D4
	movw	$228, RunTimeSignatureAdjuster
.LBB48_30:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$221, %ax
	xorw	%cx, %ax
	cmpw	$25837, %ax             # imm = 0x64ED
	jne	.LBB48_32
# %bb.31:                               # %BZ2_bzDecompressEnd.split72
	movl	(%r14), %eax
	movw	$25837, BasicBlockSignatureTracker # imm = 0x64ED
	movw	$7214, RunTimeSignatureAdjuster # imm = 0x1C2E
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB48_32:                              # %CFerrorHandler.BZ2_bzDecompressEnd
	callq	FAULT_DETECTED_CFC
.Lfunc_end48:
	.size	BZ2_bzDecompressEnd, .Lfunc_end48-BZ2_bzDecompressEnd
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen         # -- Begin function BZ2_bzWriteOpen
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen,@function
BZ2_bzWriteOpen:                        # @BZ2_bzWriteOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$18683, %ax             # imm = 0x48FB
	xorw	%bx, %ax
	cmpw	$25865, %ax             # imm = 0x6509
	jne	.LBB49_85
# %bb.1:                                # %BZ2_bzWriteOpen.split244
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$18683, %ax             # imm = 0x48FB
	xorw	%bx, %ax
	cmpw	$25865, %ax             # imm = 0x6509
	jne	.LBB49_85
# %bb.2:                                # %BZ2_bzWriteOpen.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rdi, (%r13)
	movl	%esi, (%r15)
	movl	%edx, (%rbx)
	movl	%ecx, (%r14)
	movl	%r8d, (%r12)
	movq	$0, (%r10)
	movq	(%r13), %rax
	movw	$25865, BasicBlockSignatureTracker # imm = 0x6509
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$36, %ax
	cmpw	$25901, %ax             # imm = 0x652D
	jne	.LBB49_85
# %bb.4:                                # %BZ2_bzWriteOpen.split174
	movq	(%r13), %rax
	movl	$0, (%rax)
	movw	$25901, BasicBlockSignatureTracker # imm = 0x652D
	movw	$36, RunTimeSignatureAdjuster
.LBB49_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$71, %ax
	xorw	%cx, %ax
	cmpw	$25934, %ax             # imm = 0x654E
	jne	.LBB49_85
# %bb.6:                                # %BZ2_bzWriteOpen.split176
	movq	(%r10), %rax
	movw	$25934, BasicBlockSignatureTracker # imm = 0x654E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$25946, %ax             # imm = 0x655A
	jne	.LBB49_85
# %bb.8:                                # %BZ2_bzWriteOpen.split178
	movq	(%r10), %rax
	movl	$0, 5096(%rax)
	movw	$25946, BasicBlockSignatureTracker # imm = 0x655A
	movw	$20, RunTimeSignatureAdjuster
.LBB49_9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$47, %ax
	xorw	%cx, %ax
	cmpw	$25953, %ax             # imm = 0x6561
	jne	.LBB49_85
# %bb.10:                               # %BZ2_bzWriteOpen.split180
	movl	(%r15), %eax
	movw	$25953, BasicBlockSignatureTracker # imm = 0x6561
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB49_33
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$25973, %ax             # imm = 0x6575
	jne	.LBB49_85
# %bb.12:                               # %BZ2_bzWriteOpen.split184
	movl	(%rbx), %eax
	movw	$25973, BasicBlockSignatureTracker # imm = 0x6575
	movw	$20, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB49_33
# %bb.13:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5364, %ax              # imm = 0x14F4
	cmpw	$29057, %ax             # imm = 0x7181
	jne	.LBB49_85
# %bb.14:                               # %BZ2_bzWriteOpen.split186
	movw	$29057, BasicBlockSignatureTracker # imm = 0x7181
	movw	$5364, RunTimeSignatureAdjuster # imm = 0x14F4
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$9, %ax
	xorw	%cx, %ax
	cmpw	$25980, %ax             # imm = 0x657C
	jne	.LBB49_85
# %bb.16:                               # %BZ2_bzWriteOpen.split246
	movl	(%rbx), %eax
	movw	$25980, BasicBlockSignatureTracker # imm = 0x657C
	movw	$29, RunTimeSignatureAdjuster
	cmpl	$9, %eax
	jg	.LBB49_33
# %bb.17:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-8417, %ax             # imm = 0xDF1F
	cmpw	$-17821, %ax            # imm = 0xBA63
	jne	.LBB49_85
# %bb.18:                               # %BZ2_bzWriteOpen.split188
	movw	$-17821, BasicBlockSignatureTracker # imm = 0xBA63
	movw	$-8417, RunTimeSignatureAdjuster # imm = 0xDF1F
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2, %ax
	xorw	%cx, %ax
	cmpw	$25982, %ax             # imm = 0x657E
	jne	.LBB49_85
# %bb.20:                               # %BZ2_bzWriteOpen.split248
	movl	(%r12), %eax
	movw	$25982, BasicBlockSignatureTracker # imm = 0x657E
	movw	$31, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB49_33
# %bb.21:                               # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-29623, %ax            # imm = 0x8C49
	cmpw	$-5833, %ax             # imm = 0xE937
	jne	.LBB49_85
# %bb.22:                               # %BZ2_bzWriteOpen.split190
	movq	%rbx, -72(%rbp)         # 8-byte Spill
	movq	%r11, -64(%rbp)         # 8-byte Spill
	movq	%r10, -48(%rbp)         # 8-byte Spill
	movq	%r9, -56(%rbp)          # 8-byte Spill
	movw	$-5833, BasicBlockSignatureTracker # imm = 0xE937
	movw	$-29623, RunTimeSignatureAdjuster # imm = 0x8C49
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$25983, %ax             # imm = 0x657F
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	-48(%rbp), %r10         # 8-byte Reload
	jne	.LBB49_85
# %bb.24:                               # %BZ2_bzWriteOpen.split250
	movl	(%r12), %eax
	movw	$25983, BasicBlockSignatureTracker # imm = 0x657F
	movw	$30, RunTimeSignatureAdjuster
	cmpl	$250, %eax
	jg	.LBB49_33
# %bb.25:                               # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20569, %ax             # imm = 0x5059
	cmpw	$13606, %ax             # imm = 0x3526
	jne	.LBB49_85
# %bb.26:                               # %BZ2_bzWriteOpen.split192
	movw	$13606, BasicBlockSignatureTracker # imm = 0x3526
	movw	$20569, RunTimeSignatureAdjuster # imm = 0x5059
# %bb.27:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$250, %ax
	xorw	%cx, %ax
	cmpw	$25989, %ax             # imm = 0x6585
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	-48(%rbp), %r10         # 8-byte Reload
	jne	.LBB49_85
# %bb.28:                               # %BZ2_bzWriteOpen.split252
	movl	(%r14), %eax
	movw	$25989, BasicBlockSignatureTracker # imm = 0x6585
	movw	$228, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB49_33
# %bb.29:                               # %Buffer__4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16957, %ax             # imm = 0x423D
	cmpw	$10168, %ax             # imm = 0x27B8
	jne	.LBB49_85
# %bb.30:                               # %BZ2_bzWriteOpen.split194
	movw	$10168, BasicBlockSignatureTracker # imm = 0x27B8
	movw	$16957, RunTimeSignatureAdjuster # imm = 0x423D
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2, %ax
	xorw	%cx, %ax
	cmpw	$25991, %ax             # imm = 0x6587
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	-48(%rbp), %r10         # 8-byte Reload
	jne	.LBB49_85
# %bb.32:                               # %BZ2_bzWriteOpen.split254
	movl	(%r14), %eax
	movw	$25991, BasicBlockSignatureTracker # imm = 0x6587
	movw	$230, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jle	.LBB49_43
.LBB49_33:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$213, %ax
	xorw	%cx, %ax
	cmpw	$26036, %ax             # imm = 0x65B4
	jne	.LBB49_85
# %bb.34:                               # %BZ2_bzWriteOpen.split182
	movq	(%r13), %rax
	movw	$26036, BasicBlockSignatureTracker # imm = 0x65B4
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_37
# %bb.35:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$106, %ax
	cmpw	$26078, %ax             # imm = 0x65DE
	jne	.LBB49_85
# %bb.36:                               # %BZ2_bzWriteOpen.split198
	movq	(%r13), %rax
	movl	$-2, (%rax)
	movw	$26078, BasicBlockSignatureTracker # imm = 0x65DE
	movw	$106, RunTimeSignatureAdjuster
.LBB49_37:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$945, %ax               # imm = 0x3B1
	xorw	%cx, %ax
	cmpw	$26117, %ax             # imm = 0x6605
	jne	.LBB49_85
# %bb.38:                               # %BZ2_bzWriteOpen.split200
	movq	(%r10), %rax
	movw	$26117, BasicBlockSignatureTracker # imm = 0x6605
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_41
# %bb.39:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$26131, %ax             # imm = 0x6613
	jne	.LBB49_85
# %bb.40:                               # %BZ2_bzWriteOpen.split202
	movq	(%r10), %rax
	movl	$-2, 5096(%rax)
	movw	$26131, BasicBlockSignatureTracker # imm = 0x6613
	movw	$22, RunTimeSignatureAdjuster
.LBB49_41:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$26139, %ax             # imm = 0x661B
	jne	.LBB49_85
# %bb.42:                               # %BZ2_bzWriteOpen.split204
	movq	$0, (%r9)
	movw	$26139, BasicBlockSignatureTracker # imm = 0x661B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB49_83
.LBB49_43:                              # %Buffer__5
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14148, %ax             # imm = 0x3744
	cmpw	$21187, %ax             # imm = 0x52C3
	jne	.LBB49_85
# %bb.44:                               # %BZ2_bzWriteOpen.split196
	movw	$21187, BasicBlockSignatureTracker # imm = 0x52C3
	movw	$14148, RunTimeSignatureAdjuster # imm = 0x3744
# %bb.45:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$959, %ax               # imm = 0x3BF
	xorw	%cx, %ax
	cmpw	$26168, %ax             # imm = 0x6638
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.46:                               # %BZ2_bzWriteOpen.split256
	movl	$5104, %edi             # imm = 0x13F0
	movq	%rax, %rbx
	callq	malloc
	movq	%rax, (%rbx)
	movq	(%rbx), %rax
	movw	$26168, BasicBlockSignatureTracker # imm = 0x6638
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB49_57
# %bb.47:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$26188, %ax             # imm = 0x664C
	jne	.LBB49_85
# %bb.48:                               # %BZ2_bzWriteOpen.split208
	movq	(%r13), %rax
	movw	$26188, BasicBlockSignatureTracker # imm = 0x664C
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_51
# %bb.49:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$47, %ax
	cmpw	$26211, %ax             # imm = 0x6663
	jne	.LBB49_85
# %bb.50:                               # %BZ2_bzWriteOpen.split212
	movq	(%r13), %rax
	movl	$-3, (%rax)
	movw	$26211, BasicBlockSignatureTracker # imm = 0x6663
	movw	$47, RunTimeSignatureAdjuster
.LBB49_51:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$57, %ax
	xorw	%cx, %ax
	cmpw	$26229, %ax             # imm = 0x6675
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.52:                               # %BZ2_bzWriteOpen.split214
	movq	(%rax), %rax
	movw	$26229, BasicBlockSignatureTracker # imm = 0x6675
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_55
# %bb.53:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$249, %ax
	cmpw	$26252, %ax             # imm = 0x668C
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.54:                               # %BZ2_bzWriteOpen.split216
	movq	(%rax), %rax
	movl	$-3, 5096(%rax)
	movw	$26252, BasicBlockSignatureTracker # imm = 0x668C
	movw	$249, RunTimeSignatureAdjuster
.LBB49_55:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$229, %ax
	xorw	%cx, %ax
	cmpw	$26256, %ax             # imm = 0x6690
	movq	-56(%rbp), %r9          # 8-byte Reload
	jne	.LBB49_85
# %bb.56:                               # %BZ2_bzWriteOpen.split218
	movq	$0, (%r9)
	movw	$26256, BasicBlockSignatureTracker # imm = 0x6690
	movw	$139, RunTimeSignatureAdjuster
	jmp	.LBB49_83
.LBB49_57:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$146, %ax
	cmpw	$26282, %ax             # imm = 0x66AA
	jne	.LBB49_85
# %bb.58:                               # %BZ2_bzWriteOpen.split210
	movq	(%r13), %rax
	movw	$26282, BasicBlockSignatureTracker # imm = 0x66AA
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_61
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$26292, %ax             # imm = 0x66B4
	jne	.LBB49_85
# %bb.60:                               # %BZ2_bzWriteOpen.split220
	movq	(%r13), %rax
	movl	$0, (%rax)
	movw	$26292, BasicBlockSignatureTracker # imm = 0x66B4
	movw	$30, RunTimeSignatureAdjuster
.LBB49_61:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$18, %ax
	xorw	%cx, %ax
	cmpw	$26296, %ax             # imm = 0x66B8
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.62:                               # %BZ2_bzWriteOpen.split222
	movq	(%rax), %rax
	movw	$26296, BasicBlockSignatureTracker # imm = 0x66B8
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_65
# %bb.63:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$26297, %ax             # imm = 0x66B9
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.64:                               # %BZ2_bzWriteOpen.split224
	movq	(%rax), %rax
	movl	$0, 5096(%rax)
	movw	$26297, BasicBlockSignatureTracker # imm = 0x66B9
	movw	$1, RunTimeSignatureAdjuster
.LBB49_65:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$117, %ax
	xorw	%cx, %ax
	cmpw	$26317, %ax             # imm = 0x66CD
	movq	-48(%rbp), %rdx         # 8-byte Reload
	jne	.LBB49_85
# %bb.66:                               # %BZ2_bzWriteOpen.split226
	movq	(%rdx), %rax
	movb	$0, 5100(%rax)
	movq	(%rdx), %rax
	movl	$0, 5004(%rax)
	movl	(%r15), %eax
	movq	(%rdx), %rcx
	movl	%eax, (%rcx)
	movq	(%rdx), %rax
	movb	$1, 5008(%rax)
	movq	(%rdx), %rax
	movq	$0, 5072(%rax)
	movq	(%rdx), %rax
	movq	$0, 5080(%rax)
	movq	(%rdx), %rax
	movq	$0, 5088(%rax)
	movl	(%r12), %eax
	movw	$26317, BasicBlockSignatureTracker # imm = 0x66CD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB49_69
# %bb.67:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$26339, %ax             # imm = 0x66E3
	jne	.LBB49_85
# %bb.68:                               # %BZ2_bzWriteOpen.split228
	movl	$30, (%r12)
	movw	$26339, BasicBlockSignatureTracker # imm = 0x66E3
	movw	$46, RunTimeSignatureAdjuster
.LBB49_69:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$51, %ax
	xorw	%cx, %ax
	cmpw	$26366, %ax             # imm = 0x66FE
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-64(%rbp), %rbx         # 8-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	jne	.LBB49_85
# %bb.70:                               # %BZ2_bzWriteOpen.split230
	movq	(%rax), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	(%rcx), %esi
	movl	(%r14), %edx
	movl	(%r12), %ecx
	movw	$26366, BasicBlockSignatureTracker # imm = 0x66FE
	movw	$9733, RunTimeSignatureAdjuster # imm = 0x2605
	callq	BZ2_bzCompressInit
	movw	$26366, BasicBlockSignatureTracker # imm = 0x66FE
	movw	$9733, RunTimeSignatureAdjuster # imm = 0x2605
	movl	%eax, (%rbx)
	movl	(%rbx), %eax
	movw	$26366, BasicBlockSignatureTracker # imm = 0x66FE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB49_81
# %bb.71:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$462, %ax               # imm = 0x1CE
	cmpw	$26416, %ax             # imm = 0x6730
	jne	.LBB49_85
# %bb.72:                               # %BZ2_bzWriteOpen.split232
	movq	(%r13), %rax
	movw	$26416, BasicBlockSignatureTracker # imm = 0x6730
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_75
# %bb.73:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$120, %ax
	cmpw	$26440, %ax             # imm = 0x6748
	movq	-64(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.74:                               # %BZ2_bzWriteOpen.split236
	movl	(%rax), %eax
	movq	(%r13), %rcx
	movl	%eax, (%rcx)
	movw	$26440, BasicBlockSignatureTracker # imm = 0x6748
	movw	$120, RunTimeSignatureAdjuster
.LBB49_75:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$121, %ax
	xorw	%cx, %ax
	cmpw	$26441, %ax             # imm = 0x6749
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.76:                               # %BZ2_bzWriteOpen.split238
	movq	(%rax), %rax
	movw	$26441, BasicBlockSignatureTracker # imm = 0x6749
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB49_79
# %bb.77:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$26446, %ax             # imm = 0x674E
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-64(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.78:                               # %BZ2_bzWriteOpen.split240
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movl	%eax, 5096(%rcx)
	movw	$26446, BasicBlockSignatureTracker # imm = 0x674E
	movw	$7, RunTimeSignatureAdjuster
.LBB49_79:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$26447, %ax             # imm = 0x674F
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB49_85
# %bb.80:                               # %BZ2_bzWriteOpen.split242
	movq	(%rax), %rdi
	callq	free
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	$0, (%r9)
	movw	$26447, BasicBlockSignatureTracker # imm = 0x674F
	movw	$340, RunTimeSignatureAdjuster # imm = 0x154
	jmp	.LBB49_83
.LBB49_81:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$398, %ax               # imm = 0x18E
	cmpw	$26480, %ax             # imm = 0x6770
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	jne	.LBB49_85
# %bb.82:                               # %BZ2_bzWriteOpen.split234
	movq	(%rcx), %rax
	movl	$0, 5024(%rax)
	movq	(%rcx), %rax
	movb	$1, 5100(%rax)
	movq	(%rcx), %rax
	movq	%rax, (%r9)
	movw	$26480, BasicBlockSignatureTracker # imm = 0x6770
	movw	$363, RunTimeSignatureAdjuster # imm = 0x16B
.LBB49_83:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$438, %ax               # imm = 0x1B6
	xorw	%cx, %ax
	cmpw	$26541, %ax             # imm = 0x67AD
	jne	.LBB49_85
# %bb.84:                               # %BZ2_bzWriteOpen.split206
	movq	(%r9), %rax
	movw	$26541, BasicBlockSignatureTracker # imm = 0x67AD
	movw	$0, RunTimeSignatureAdjuster
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB49_85:                              # %CFerrorHandler.BZ2_bzWriteOpen
	callq	FAULT_DETECTED_CFC
.Lfunc_end49:
	.size	BZ2_bzWriteOpen, .Lfunc_end49-BZ2_bzWriteOpen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite             # -- Begin function BZ2_bzWrite
	.p2align	4, 0x90
	.type	BZ2_bzWrite,@function
BZ2_bzWrite:                            # @BZ2_bzWrite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$18870, %ax             # imm = 0x49B6
	xorw	%bx, %ax
	cmpw	$26567, %ax             # imm = 0x67C7
	jne	.LBB50_100
# %bb.1:                                # %BZ2_bzWrite.split285
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$18870, %ax             # imm = 0x49B6
	xorw	%bx, %ax
	cmpw	$26567, %ax             # imm = 0x67C7
	jne	.LBB50_100
# %bb.2:                                # %BZ2_bzWrite.split
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%r14)
	movq	%rsi, (%rax)
	movq	%rdx, (%r8)
	movl	%ecx, (%r9)
	movq	(%rax), %rax
	movq	%rax, (%rbx)
	movq	(%r14), %rax
	movw	$26567, BasicBlockSignatureTracker # imm = 0x67C7
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$26578, %ax             # imm = 0x67D2
	jne	.LBB50_100
# %bb.4:                                # %BZ2_bzWrite.split193
	movq	(%r14), %rax
	movl	$0, (%rax)
	movw	$26578, BasicBlockSignatureTracker # imm = 0x67D2
	movw	$21, RunTimeSignatureAdjuster
.LBB50_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$20, %ax
	xorw	%cx, %ax
	cmpw	$26579, %ax             # imm = 0x67D3
	jne	.LBB50_100
# %bb.6:                                # %BZ2_bzWrite.split195
	movq	(%rbx), %rax
	movw	$26579, BasicBlockSignatureTracker # imm = 0x67D3
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$26583, %ax             # imm = 0x67D7
	jne	.LBB50_100
# %bb.8:                                # %BZ2_bzWrite.split197
	movq	(%rbx), %rax
	movl	$0, 5096(%rax)
	movw	$26583, BasicBlockSignatureTracker # imm = 0x67D7
	movw	$4, RunTimeSignatureAdjuster
.LBB50_9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$53, %ax
	xorw	%cx, %ax
	cmpw	$26598, %ax             # imm = 0x67E6
	jne	.LBB50_100
# %bb.10:                               # %BZ2_bzWrite.split199
	movq	(%rbx), %rax
	movw	$26598, BasicBlockSignatureTracker # imm = 0x67E6
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_17
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$26601, %ax             # imm = 0x67E9
	jne	.LBB50_100
# %bb.12:                               # %BZ2_bzWrite.split203
	movq	(%r8), %rax
	movw	$26601, BasicBlockSignatureTracker # imm = 0x67E9
	movw	$15, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_17
# %bb.13:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-25440, %ax            # imm = 0x9CA0
	cmpw	$-1207, %ax             # imm = 0xFB49
	jne	.LBB50_100
# %bb.14:                               # %BZ2_bzWrite.split205
	movw	$-1207, BasicBlockSignatureTracker # imm = 0xFB49
	movw	$-25440, RunTimeSignatureAdjuster # imm = 0x9CA0
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4091, %ax              # imm = 0xFFB
	xorw	%cx, %ax
	cmpw	$26642, %ax             # imm = 0x6812
	jne	.LBB50_100
# %bb.16:                               # %BZ2_bzWrite.split287
	movl	(%r9), %eax
	movw	$26642, BasicBlockSignatureTracker # imm = 0x6812
	movw	$4084, RunTimeSignatureAdjuster # imm = 0xFF4
	cmpl	$0, %eax
	jge	.LBB50_27
.LBB50_17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4009, %ax              # imm = 0xFA9
	xorw	%cx, %ax
	cmpw	$26703, %ax             # imm = 0x684F
	jne	.LBB50_100
# %bb.18:                               # %BZ2_bzWrite.split201
	movq	(%r14), %rax
	movw	$26703, BasicBlockSignatureTracker # imm = 0x684F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$26714, %ax             # imm = 0x685A
	jne	.LBB50_100
# %bb.20:                               # %BZ2_bzWrite.split209
	movq	(%r14), %rax
	movl	$-2, (%rax)
	movw	$26714, BasicBlockSignatureTracker # imm = 0x685A
	movw	$21, RunTimeSignatureAdjuster
.LBB50_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$20, %ax
	xorw	%cx, %ax
	cmpw	$26715, %ax             # imm = 0x685B
	jne	.LBB50_100
# %bb.22:                               # %BZ2_bzWrite.split211
	movq	(%rbx), %rax
	movw	$26715, BasicBlockSignatureTracker # imm = 0x685B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_25
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$26727, %ax             # imm = 0x6867
	jne	.LBB50_100
# %bb.24:                               # %BZ2_bzWrite.split213
	movq	(%rbx), %rax
	movl	$-2, 5096(%rax)
	movw	$26727, BasicBlockSignatureTracker # imm = 0x6867
	movw	$60, RunTimeSignatureAdjuster
.LBB50_25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$44, %ax
	xorw	%cx, %ax
	cmpw	$26743, %ax             # imm = 0x6877
	jne	.LBB50_100
# %bb.26:                               # %BZ2_bzWrite.split215
	movw	$26743, BasicBlockSignatureTracker # imm = 0x6877
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB50_97
.LBB50_27:                              # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25975, %ax             # imm = 0x6577
	cmpw	$3429, %ax              # imm = 0xD65
	jne	.LBB50_100
# %bb.28:                               # %BZ2_bzWrite.split207
	movw	$3429, BasicBlockSignatureTracker # imm = 0xD65
	movw	$25975, RunTimeSignatureAdjuster # imm = 0x6577
# %bb.29:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$108, %ax
	xorw	%cx, %ax
	cmpw	$26750, %ax             # imm = 0x687E
	jne	.LBB50_100
# %bb.30:                               # %BZ2_bzWrite.split289
	movq	(%rbx), %rax
	movb	5008(%rax), %al
	movw	$26750, BasicBlockSignatureTracker # imm = 0x687E
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB50_41
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$250, %ax
	cmpw	$26756, %ax             # imm = 0x6884
	jne	.LBB50_100
# %bb.32:                               # %BZ2_bzWrite.split221
	movq	(%r14), %rax
	movw	$26756, BasicBlockSignatureTracker # imm = 0x6884
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_35
# %bb.33:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$26775, %ax             # imm = 0x6897
	jne	.LBB50_100
# %bb.34:                               # %BZ2_bzWrite.split223
	movq	(%r14), %rax
	movl	$-1, (%rax)
	movw	$26775, BasicBlockSignatureTracker # imm = 0x6897
	movw	$19, RunTimeSignatureAdjuster
.LBB50_35:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27, %ax
	xorw	%cx, %ax
	cmpw	$26783, %ax             # imm = 0x689F
	movq	%rbx, %rax
	jne	.LBB50_100
# %bb.36:                               # %BZ2_bzWrite.split225
	movq	(%rax), %rax
	movw	$26783, BasicBlockSignatureTracker # imm = 0x689F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_39
# %bb.37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$91, %ax
	cmpw	$26820, %ax             # imm = 0x68C4
	jne	.LBB50_100
# %bb.38:                               # %BZ2_bzWrite.split227
	movq	(%rbx), %rax
	movl	$-1, 5096(%rax)
	movw	$26820, BasicBlockSignatureTracker # imm = 0x68C4
	movw	$91, RunTimeSignatureAdjuster
.LBB50_39:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$71, %ax
	xorw	%cx, %ax
	cmpw	$26840, %ax             # imm = 0x68D8
	jne	.LBB50_100
# %bb.40:                               # %BZ2_bzWrite.split229
	movw	$26840, BasicBlockSignatureTracker # imm = 0x68D8
	movw	$175, RunTimeSignatureAdjuster
	jmp	.LBB50_97
.LBB50_41:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$143, %ax
	cmpw	$26865, %ax             # imm = 0x68F1
	jne	.LBB50_100
# %bb.42:                               # %BZ2_bzWrite.split219
	movq	%rbx, -48(%rbp)         # 8-byte Spill
	movl	(%r9), %eax
	movw	$26865, BasicBlockSignatureTracker # imm = 0x68F1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB50_53
# %bb.43:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$379, %ax               # imm = 0x17B
	cmpw	$27018, %ax             # imm = 0x698A
	jne	.LBB50_100
# %bb.44:                               # %BZ2_bzWrite.split231
	movq	(%r14), %rax
	movw	$27018, BasicBlockSignatureTracker # imm = 0x698A
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_47
# %bb.45:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$27038, %ax             # imm = 0x699E
	jne	.LBB50_100
# %bb.46:                               # %BZ2_bzWrite.split235
	movq	(%r14), %rax
	movl	$0, (%rax)
	movw	$27038, BasicBlockSignatureTracker # imm = 0x699E
	movw	$20, RunTimeSignatureAdjuster
.LBB50_47:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$42, %ax
	xorw	%cx, %ax
	cmpw	$27040, %ax             # imm = 0x69A0
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.48:                               # %BZ2_bzWrite.split237
	movq	(%rax), %rax
	movw	$27040, BasicBlockSignatureTracker # imm = 0x69A0
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_51
# %bb.49:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$77, %ax
	cmpw	$27117, %ax             # imm = 0x69ED
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.50:                               # %BZ2_bzWrite.split239
	movq	(%rax), %rax
	movl	$0, 5096(%rax)
	movw	$27117, BasicBlockSignatureTracker # imm = 0x69ED
	movw	$77, RunTimeSignatureAdjuster
.LBB50_51:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$79, %ax
	xorw	%cx, %ax
	cmpw	$27119, %ax             # imm = 0x69EF
	jne	.LBB50_100
# %bb.52:                               # %BZ2_bzWrite.split241
	movw	$27119, BasicBlockSignatureTracker # imm = 0x69EF
	movw	$408, RunTimeSignatureAdjuster # imm = 0x198
	jmp	.LBB50_97
.LBB50_53:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$259, %ax               # imm = 0x103
	cmpw	$27122, %ax             # imm = 0x69F2
	movq	-48(%rbp), %rdx         # 8-byte Reload
	jne	.LBB50_100
# %bb.54:                               # %BZ2_bzWrite.split233
	movl	(%r9), %eax
	movq	(%rdx), %rcx
	movl	%eax, 5024(%rcx)
	movq	(%r8), %rax
	movq	(%rdx), %rcx
	movq	%rax, 5016(%rcx)
	movw	$27122, BasicBlockSignatureTracker # imm = 0x69F2
	movw	$0, RunTimeSignatureAdjuster
.LBB50_55:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1000, %ax              # imm = 0x3E8
	xorw	%cx, %ax
	cmpw	$27162, %ax             # imm = 0x6A1A
	jne	.LBB50_99
# %bb.56:                               # %BZ2_bzWrite.split243
                                        #   in Loop: Header=BB50_55 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	(%rdx), %rax
	addq	$4, %rax
	movq	(%rdx), %rcx
	movq	%rax, 5040(%rcx)
	movq	(%rdx), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movw	$27162, BasicBlockSignatureTracker # imm = 0x6A1A
	movw	$0, RunTimeSignatureAdjuster
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movw	$27162, BasicBlockSignatureTracker # imm = 0x6A1A
	movw	$0, RunTimeSignatureAdjuster
	movl	%eax, (%r15)
	movl	(%r15), %eax
	movw	$27162, BasicBlockSignatureTracker # imm = 0x6A1A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB50_67
# %bb.57:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$87, %ax
	cmpw	$27213, %ax             # imm = 0x6A4D
	jne	.LBB50_100
# %bb.58:                               # %BZ2_bzWrite.split245
	movq	(%r14), %rax
	movw	$27213, BasicBlockSignatureTracker # imm = 0x6A4D
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_61
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$27221, %ax             # imm = 0x6A55
	jne	.LBB50_100
# %bb.60:                               # %BZ2_bzWrite.split249
	movl	(%r15), %eax
	movq	(%r14), %rcx
	movl	%eax, (%rcx)
	movw	$27221, BasicBlockSignatureTracker # imm = 0x6A55
	movw	$24, RunTimeSignatureAdjuster
.LBB50_61:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26, %ax
	xorw	%cx, %ax
	cmpw	$27223, %ax             # imm = 0x6A57
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.62:                               # %BZ2_bzWrite.split251
	movq	(%rax), %rax
	movw	$27223, BasicBlockSignatureTracker # imm = 0x6A57
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_65
# %bb.63:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$210, %ax
	cmpw	$27269, %ax             # imm = 0x6A85
	movq	-48(%rbp), %rcx         # 8-byte Reload
	jne	.LBB50_100
# %bb.64:                               # %BZ2_bzWrite.split253
	movl	(%r15), %eax
	movq	(%rcx), %rcx
	movl	%eax, 5096(%rcx)
	movw	$27269, BasicBlockSignatureTracker # imm = 0x6A85
	movw	$210, RunTimeSignatureAdjuster
.LBB50_65:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$223, %ax
	xorw	%cx, %ax
	cmpw	$27272, %ax             # imm = 0x6A88
	jne	.LBB50_100
# %bb.66:                               # %BZ2_bzWrite.split255
	movw	$27272, BasicBlockSignatureTracker # imm = 0x6A88
	movw	$767, RunTimeSignatureAdjuster # imm = 0x2FF
	jmp	.LBB50_97
.LBB50_67:                              #   in Loop: Header=BB50_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$130, %ax
	cmpw	$27288, %ax             # imm = 0x6A98
	jne	.LBB50_99
# %bb.68:                               # %BZ2_bzWrite.split247
                                        #   in Loop: Header=BB50_55 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	5048(%rax), %eax
	movw	$27288, BasicBlockSignatureTracker # imm = 0x6A98
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$5000, %eax             # imm = 0x1388
	jae	.LBB50_83
# %bb.69:                               #   in Loop: Header=BB50_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$27308, %ax             # imm = 0x6AAC
	jne	.LBB50_99
# %bb.70:                               # %BZ2_bzWrite.split257
                                        #   in Loop: Header=BB50_55 Depth=1
	movl	$5000, %eax             # imm = 0x1388
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, (%r12)
	movq	(%rsi), %rdi
	addq	$4, %rdi
	movl	(%r12), %edx
	movq	(%rsi), %rax
	movl	(%rax), %ecx
	movw	$27308, BasicBlockSignatureTracker # imm = 0x6AAC
	movw	$23961, RunTimeSignatureAdjuster # imm = 0x5D99
	movl	$1, %esi
	callq	spec_fwrite
	movw	$27308, BasicBlockSignatureTracker # imm = 0x6AAC
	movw	$23961, RunTimeSignatureAdjuster # imm = 0x5D99
	movl	%eax, (%r13)
	movl	(%r12), %eax
	movl	(%r13), %ecx
	movw	$27308, BasicBlockSignatureTracker # imm = 0x6AAC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB50_81
# %bb.71:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$399, %ax               # imm = 0x18F
	cmpw	$27427, %ax             # imm = 0x6B23
	jne	.LBB50_100
# %bb.72:                               # %BZ2_bzWrite.split261
	movq	(%r14), %rax
	movw	$27427, BasicBlockSignatureTracker # imm = 0x6B23
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_75
# %bb.73:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$27464, %ax             # imm = 0x6B48
	jne	.LBB50_100
# %bb.74:                               # %BZ2_bzWrite.split265
	movq	(%r14), %rax
	movl	$-6, (%rax)
	movw	$27464, BasicBlockSignatureTracker # imm = 0x6B48
	movw	$107, RunTimeSignatureAdjuster
.LBB50_75:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$108, %ax
	xorw	%cx, %ax
	cmpw	$27471, %ax             # imm = 0x6B4F
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.76:                               # %BZ2_bzWrite.split267
	movq	(%rax), %rax
	movw	$27471, BasicBlockSignatureTracker # imm = 0x6B4F
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_79
# %bb.77:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$207, %ax
	cmpw	$27520, %ax             # imm = 0x6B80
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.78:                               # %BZ2_bzWrite.split269
	movq	(%rax), %rax
	movl	$-6, 5096(%rax)
	movw	$27520, BasicBlockSignatureTracker # imm = 0x6B80
	movw	$207, RunTimeSignatureAdjuster
.LBB50_79:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$193, %ax
	xorw	%cx, %ax
	cmpw	$27534, %ax             # imm = 0x6B8E
	jne	.LBB50_100
# %bb.80:                               # %BZ2_bzWrite.split271
	movw	$27534, BasicBlockSignatureTracker # imm = 0x6B8E
	movw	$1017, RunTimeSignatureAdjuster # imm = 0x3F9
	jmp	.LBB50_97
.LBB50_81:                              #   in Loop: Header=BB50_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$269, %ax               # imm = 0x10D
	cmpw	$27553, %ax             # imm = 0x6BA1
	jne	.LBB50_99
# %bb.82:                               # %BZ2_bzWrite.split263
                                        #   in Loop: Header=BB50_55 Depth=1
	movw	$27553, BasicBlockSignatureTracker # imm = 0x6BA1
	movw	$313, RunTimeSignatureAdjuster # imm = 0x139
.LBB50_83:                              #   in Loop: Header=BB50_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$299, %ax               # imm = 0x12B
	xorw	%cx, %ax
	cmpw	$27571, %ax             # imm = 0x6BB3
	jne	.LBB50_99
# %bb.84:                               # %BZ2_bzWrite.split259
                                        #   in Loop: Header=BB50_55 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	5024(%rax), %eax
	movw	$27571, BasicBlockSignatureTracker # imm = 0x6BB3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB50_95
# %bb.85:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$27583, %ax             # imm = 0x6BBF
	jne	.LBB50_100
# %bb.86:                               # %BZ2_bzWrite.split273
	movq	(%r14), %rax
	movw	$27583, BasicBlockSignatureTracker # imm = 0x6BBF
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_89
# %bb.87:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$100, %ax
	cmpw	$27611, %ax             # imm = 0x6BDB
	jne	.LBB50_100
# %bb.88:                               # %BZ2_bzWrite.split277
	movq	(%r14), %rax
	movl	$0, (%rax)
	movw	$27611, BasicBlockSignatureTracker # imm = 0x6BDB
	movw	$100, RunTimeSignatureAdjuster
.LBB50_89:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$79, %ax
	xorw	%cx, %ax
	cmpw	$27632, %ax             # imm = 0x6BF0
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.90:                               # %BZ2_bzWrite.split279
	movq	(%rax), %rax
	movw	$27632, BasicBlockSignatureTracker # imm = 0x6BF0
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB50_93
# %bb.91:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2020, %ax              # imm = 0x7E4
	cmpw	$27668, %ax             # imm = 0x6C14
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB50_100
# %bb.92:                               # %BZ2_bzWrite.split281
	movq	(%rax), %rax
	movl	$0, 5096(%rax)
	movw	$27668, BasicBlockSignatureTracker # imm = 0x6C14
	movw	$2020, RunTimeSignatureAdjuster # imm = 0x7E4
.LBB50_93:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1994, %ax              # imm = 0x7CA
	xorw	%cx, %ax
	cmpw	$27706, %ax             # imm = 0x6C3A
	jne	.LBB50_100
# %bb.94:                               # %BZ2_bzWrite.split283
	movw	$27706, BasicBlockSignatureTracker # imm = 0x6C3A
	movw	$1101, RunTimeSignatureAdjuster # imm = 0x44D
	jmp	.LBB50_97
.LBB50_95:                              #   in Loop: Header=BB50_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2021, %ax              # imm = 0x7E5
	cmpw	$27734, %ax             # imm = 0x6C56
	jne	.LBB50_99
# %bb.96:                               # %BZ2_bzWrite.split275
                                        #   in Loop: Header=BB50_55 Depth=1
	movw	$27734, BasicBlockSignatureTracker # imm = 0x6C56
	movw	$1444, RunTimeSignatureAdjuster # imm = 0x5A4
	jmp	.LBB50_55
.LBB50_97:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1045, %ax              # imm = 0x415
	xorw	%cx, %ax
	cmpw	$27746, %ax             # imm = 0x6C62
	jne	.LBB50_100
# %bb.98:                               # %BZ2_bzWrite.split217
	movw	$27746, BasicBlockSignatureTracker # imm = 0x6C62
	movw	$16902, RunTimeSignatureAdjuster # imm = 0x4206
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB50_99:                              # %CFerrorHandler.BZ2_bzWrite.loopexit
	jmp	.LBB50_100
.LBB50_100:                             # %CFerrorHandler.BZ2_bzWrite
	callq	FAULT_DETECTED_CFC
.Lfunc_end50:
	.size	BZ2_bzWrite, .Lfunc_end50-BZ2_bzWrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose        # -- Begin function BZ2_bzWriteClose
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose,@function
BZ2_bzWriteClose:                       # @BZ2_bzWriteClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %r9w
	xorw	$8125, %ax              # imm = 0x1FBD
	xorw	%r9w, %ax
	cmpw	$27804, %ax             # imm = 0x6C9C
	jne	.LBB51_3
# %bb.1:                                # %BZ2_bzWriteClose.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %r9w
	xorw	$8125, %ax              # imm = 0x1FBD
	xorw	%r9w, %ax
	cmpw	$27804, %ax             # imm = 0x6C9C
	jne	.LBB51_3
# %bb.2:                                # %BZ2_bzWriteClose.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%r9)
	movq	%rsi, (%r10)
	movl	%edx, (%r11)
	movq	%rcx, (%rax)
	movq	%r8, (%rbx)
	movq	(%r9), %rdi
	movq	(%r10), %rsi
	movl	(%r11), %edx
	movq	(%rax), %rcx
	movq	(%rbx), %r9
	movw	$27804, BasicBlockSignatureTracker # imm = 0x6C9C
	movw	$16989, RunTimeSignatureAdjuster # imm = 0x425D
	subq	$16, %rsp
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	addq	$16, %rsp
	movw	$27804, BasicBlockSignatureTracker # imm = 0x6C9C
	movw	$16989, RunTimeSignatureAdjuster # imm = 0x425D
	movw	$27804, BasicBlockSignatureTracker # imm = 0x6C9C
	movw	$-6508, RunTimeSignatureAdjuster # imm = 0xE694
	leaq	-8(%rbp), %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB51_3:                               # %CFerrorHandler.BZ2_bzWriteClose
	callq	FAULT_DETECTED_CFC
.Lfunc_end51:
	.size	BZ2_bzWriteClose, .Lfunc_end51-BZ2_bzWriteClose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64      # -- Begin function BZ2_bzWriteClose64
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64,@function
BZ2_bzWriteClose64:                     # @BZ2_bzWriteClose64
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r13
	movl	%edx, %r12d
	movq	%rsi, %r15
	movw	BasicBlockSignatureTracker, %bx
	movw	RunTimeSignatureAdjuster, %ax
	xorw	$17396, %bx             # imm = 0x43F4
	xorw	%ax, %bx
	cmpw	$27957, %bx             # imm = 0x6D35
	jne	.LBB52_123
# %bb.1:                                # %BZ2_bzWriteClose64.split245
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$17396, %ax             # imm = 0x43F4
	xorw	%bx, %ax
	cmpw	$27957, %ax             # imm = 0x6D35
	jne	.LBB52_123
# %bb.2:                                # %BZ2_bzWriteClose64.split243
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$17396, %ax             # imm = 0x43F4
	xorw	%bx, %ax
	cmpw	$27957, %ax             # imm = 0x6D35
	jne	.LBB52_123
# %bb.3:                                # %BZ2_bzWriteClose64.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, -72(%rbp)         # 8-byte Spill
	movq	%r11, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, -80(%rbp)         # 8-byte Spill
	movq	%r11, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, -64(%rbp)         # 8-byte Spill
	movq	%r11, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rdi, (%rax)
	movq	%rax, %rdi
	movq	%r15, (%rbx)
	movl	%r12d, (%r10)
	movq	%r13, (%r14)
	movq	%r8, (%rcx)
	movq	%r9, (%rsi)
	movq	16(%rbp), %rax
	movq	%rax, (%rdx)
	movq	(%rbx), %rax
	movq	%rax, (%r11)
	movq	(%r11), %rax
	movw	$27957, BasicBlockSignatureTracker # imm = 0x6D35
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB52_14
# %bb.4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$28004, %ax             # imm = 0x6D64
	jne	.LBB52_123
# %bb.5:                                # %BZ2_bzWriteClose64.split247
	movq	(%rdi), %rax
	movw	$28004, BasicBlockSignatureTracker # imm = 0x6D64
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_8
# %bb.6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$28008, %ax             # imm = 0x6D68
	jne	.LBB52_123
# %bb.7:                                # %BZ2_bzWriteClose64.split251
	movq	(%rdi), %rax
	movl	$0, (%rax)
	movw	$28008, BasicBlockSignatureTracker # imm = 0x6D68
	movw	$12, RunTimeSignatureAdjuster
.LBB52_8:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$28021, %ax             # imm = 0x6D75
	jne	.LBB52_123
# %bb.9:                                # %BZ2_bzWriteClose64.split253
	movq	(%r11), %rax
	movw	$28021, BasicBlockSignatureTracker # imm = 0x6D75
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_12
# %bb.10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$255, %ax
	cmpw	$28042, %ax             # imm = 0x6D8A
	jne	.LBB52_123
# %bb.11:                               # %BZ2_bzWriteClose64.split255
	movq	(%r11), %rax
	movl	$0, 5096(%rax)
	movw	$28042, BasicBlockSignatureTracker # imm = 0x6D8A
	movw	$255, RunTimeSignatureAdjuster
.LBB52_12:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$239, %ax
	xorw	%cx, %ax
	cmpw	$28058, %ax             # imm = 0x6D9A
	jne	.LBB52_123
# %bb.13:                               # %BZ2_bzWriteClose64.split257
	movw	$28058, BasicBlockSignatureTracker # imm = 0x6D9A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB52_120
.LBB52_14:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$154, %ax
	cmpw	$28079, %ax             # imm = 0x6DAF
	jne	.LBB52_123
# %bb.15:                               # %BZ2_bzWriteClose64.split249
	movq	(%r11), %rax
	movb	5008(%rax), %al
	movw	$28079, BasicBlockSignatureTracker # imm = 0x6DAF
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB52_26
# %bb.16:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$86, %ax
	cmpw	$28153, %ax             # imm = 0x6DF9
	jne	.LBB52_123
# %bb.17:                               # %BZ2_bzWriteClose64.split263
	movq	(%rdi), %rax
	movw	$28153, BasicBlockSignatureTracker # imm = 0x6DF9
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_20
# %bb.18:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$28157, %ax             # imm = 0x6DFD
	jne	.LBB52_123
# %bb.19:                               # %BZ2_bzWriteClose64.split265
	movq	(%rdi), %rax
	movl	$-1, (%rax)
	movw	$28157, BasicBlockSignatureTracker # imm = 0x6DFD
	movw	$4, RunTimeSignatureAdjuster
.LBB52_20:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1002, %ax              # imm = 0x3EA
	xorw	%cx, %ax
	cmpw	$28179, %ax             # imm = 0x6E13
	jne	.LBB52_123
# %bb.21:                               # %BZ2_bzWriteClose64.split267
	movq	(%r11), %rax
	movw	$28179, BasicBlockSignatureTracker # imm = 0x6E13
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_24
# %bb.22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$28200, %ax             # imm = 0x6E28
	jne	.LBB52_123
# %bb.23:                               # %BZ2_bzWriteClose64.split269
	movq	(%r11), %rax
	movl	$-1, 5096(%rax)
	movw	$28200, BasicBlockSignatureTracker # imm = 0x6E28
	movw	$59, RunTimeSignatureAdjuster
.LBB52_24:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$84, %ax
	xorw	%cx, %ax
	cmpw	$28231, %ax             # imm = 0x6E47
	jne	.LBB52_123
# %bb.25:                               # %BZ2_bzWriteClose64.split271
	movw	$28231, BasicBlockSignatureTracker # imm = 0x6E47
	movw	$989, RunTimeSignatureAdjuster # imm = 0x3DD
	jmp	.LBB52_120
.LBB52_26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$994, %ax               # imm = 0x3E2
	cmpw	$28237, %ax             # imm = 0x6E4D
	jne	.LBB52_123
# %bb.27:                               # %BZ2_bzWriteClose64.split261
	movq	(%r14), %rax
	movw	$28237, BasicBlockSignatureTracker # imm = 0x6E4D
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_30
# %bb.28:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$28255, %ax             # imm = 0x6E5F
	jne	.LBB52_123
# %bb.29:                               # %BZ2_bzWriteClose64.split273
	movq	(%r14), %rax
	movl	$0, (%rax)
	movw	$28255, BasicBlockSignatureTracker # imm = 0x6E5F
	movw	$18, RunTimeSignatureAdjuster
.LBB52_30:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$53, %ax
	xorw	%bx, %ax
	cmpw	$28280, %ax             # imm = 0x6E78
	jne	.LBB52_123
# %bb.31:                               # %BZ2_bzWriteClose64.split275
	movq	(%rcx), %rax
	movw	$28280, BasicBlockSignatureTracker # imm = 0x6E78
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_34
# %bb.32:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$198, %ax
	cmpw	$28350, %ax             # imm = 0x6EBE
	jne	.LBB52_123
# %bb.33:                               # %BZ2_bzWriteClose64.split277
	movq	(%rcx), %rax
	movl	$0, (%rax)
	movw	$28350, BasicBlockSignatureTracker # imm = 0x6EBE
	movw	$198, RunTimeSignatureAdjuster
.LBB52_34:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$189, %ax
	xorw	%bx, %ax
	cmpw	$28357, %ax             # imm = 0x6EC5
	jne	.LBB52_123
# %bb.35:                               # %BZ2_bzWriteClose64.split279
	movq	(%rsi), %rax
	movw	$28357, BasicBlockSignatureTracker # imm = 0x6EC5
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_38
# %bb.36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$28380, %ax             # imm = 0x6EDC
	jne	.LBB52_123
# %bb.37:                               # %BZ2_bzWriteClose64.split281
	movq	(%rsi), %rax
	movl	$0, (%rax)
	movw	$28380, BasicBlockSignatureTracker # imm = 0x6EDC
	movw	$25, RunTimeSignatureAdjuster
.LBB52_38:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$36, %ax
	xorw	%bx, %ax
	cmpw	$28385, %ax             # imm = 0x6EE1
	jne	.LBB52_123
# %bb.39:                               # %BZ2_bzWriteClose64.split283
	movq	(%rdx), %rax
	movw	$28385, BasicBlockSignatureTracker # imm = 0x6EE1
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_42
# %bb.40:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$510, %ax               # imm = 0x1FE
	cmpw	$28447, %ax             # imm = 0x6F1F
	jne	.LBB52_123
# %bb.41:                               # %BZ2_bzWriteClose64.split285
	movq	(%rdx), %rax
	movl	$0, (%rax)
	movw	$28447, BasicBlockSignatureTracker # imm = 0x6F1F
	movw	$510, RunTimeSignatureAdjuster # imm = 0x1FE
.LBB52_42:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$460, %ax               # imm = 0x1CC
	xorw	%bx, %ax
	cmpw	$28461, %ax             # imm = 0x6F2D
	jne	.LBB52_123
# %bb.43:                               # %BZ2_bzWriteClose64.split287
	movl	(%r10), %eax
	movw	$28461, BasicBlockSignatureTracker # imm = 0x6F2D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB52_90
# %bb.44:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$122, %ax
	cmpw	$28503, %ax             # imm = 0x6F57
	jne	.LBB52_123
# %bb.45:                               # %BZ2_bzWriteClose64.split291
	movq	(%r11), %rax
	movl	5096(%rax), %eax
	movw	$28503, BasicBlockSignatureTracker # imm = 0x6F57
	movw	$122, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB52_90
# %bb.46:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10424, %ax             # imm = 0x28B8
	cmpw	$18415, %ax             # imm = 0x47EF
	jne	.LBB52_123
# %bb.47:                               # %BZ2_bzWriteClose64.split293
	movq	%r10, %r15
	movq	%r14, %r13
	movq	%rcx, %r14
	movq	%rsi, %r12
	movq	%rdx, %rbx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%r11, -48(%rbp)         # 8-byte Spill
	movw	$18415, BasicBlockSignatureTracker # imm = 0x47EF
	movw	$10424, RunTimeSignatureAdjuster # imm = 0x28B8
# %bb.48:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$55, %ax
	xorw	%cx, %ax
	cmpw	$28512, %ax             # imm = 0x6F60
	jne	.LBB52_123
# %bb.49:                               # %BZ2_bzWriteClose64.split361
	movw	$28512, BasicBlockSignatureTracker # imm = 0x6F60
	movw	$0, RunTimeSignatureAdjuster
.LBB52_50:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10, %ax
	xorw	%cx, %ax
	cmpw	$28522, %ax             # imm = 0x6F6A
	jne	.LBB52_122
# %bb.51:                               # %BZ2_bzWriteClose64.split295
                                        #   in Loop: Header=BB52_50 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	(%rdx), %rax
	addq	$4, %rax
	movq	(%rdx), %rcx
	movq	%rax, 5040(%rcx)
	movq	(%rdx), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movw	$28522, BasicBlockSignatureTracker # imm = 0x6F6A
	movw	$1392, RunTimeSignatureAdjuster # imm = 0x570
	movl	$2, %esi
	callq	BZ2_bzCompress
	movw	$28522, BasicBlockSignatureTracker # imm = 0x6F6A
	movw	$1392, RunTimeSignatureAdjuster # imm = 0x570
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$28522, BasicBlockSignatureTracker # imm = 0x6F6A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	je	.LBB52_66
# %bb.52:                               #   in Loop: Header=BB52_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$28526, %ax             # imm = 0x6F6E
	jne	.LBB52_122
# %bb.53:                               # %BZ2_bzWriteClose64.split297
                                        #   in Loop: Header=BB52_50 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$28526, BasicBlockSignatureTracker # imm = 0x6F6E
	movw	$4, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	je	.LBB52_66
# %bb.54:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-11293, %ax            # imm = 0xD3E3
	cmpw	$-17267, %ax            # imm = 0xBC8D
	jne	.LBB52_123
# %bb.55:                               # %BZ2_bzWriteClose64.split301
	movw	$-17267, BasicBlockSignatureTracker # imm = 0xBC8D
	movw	$-11293, RunTimeSignatureAdjuster # imm = 0xD3E3
# %bb.56:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$28542, %ax             # imm = 0x6F7E
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB52_123
# %bb.57:                               # %BZ2_bzWriteClose64.split363
	movq	(%rax), %rax
	movw	$28542, BasicBlockSignatureTracker # imm = 0x6F7E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_60
# %bb.58:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$238, %ax
	cmpw	$28560, %ax             # imm = 0x6F90
	movq	-56(%rbp), %rcx         # 8-byte Reload
	jne	.LBB52_123
# %bb.59:                               # %BZ2_bzWriteClose64.split303
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movw	$28560, BasicBlockSignatureTracker # imm = 0x6F90
	movw	$238, RunTimeSignatureAdjuster
.LBB52_60:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$190, %ax
	xorw	%cx, %ax
	cmpw	$28608, %ax             # imm = 0x6FC0
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB52_123
# %bb.61:                               # %BZ2_bzWriteClose64.split305
	movq	(%rax), %rax
	movw	$28608, BasicBlockSignatureTracker # imm = 0x6FC0
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_64
# %bb.62:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$28618, %ax             # imm = 0x6FCA
	movq	-48(%rbp), %rbx         # 8-byte Reload
	jne	.LBB52_123
# %bb.63:                               # %BZ2_bzWriteClose64.split307
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%rbx), %rcx
	movl	%eax, 5096(%rcx)
	movw	$28618, BasicBlockSignatureTracker # imm = 0x6FCA
	movw	$10, RunTimeSignatureAdjuster
.LBB52_64:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8133, %ax              # imm = 0x1FC5
	xorw	%cx, %ax
	cmpw	$28677, %ax             # imm = 0x7005
	jne	.LBB52_123
# %bb.65:                               # %BZ2_bzWriteClose64.split309
	movw	$28677, BasicBlockSignatureTracker # imm = 0x7005
	movw	$7583, RunTimeSignatureAdjuster # imm = 0x1D9F
	jmp	.LBB52_120
.LBB52_66:                              #   in Loop: Header=BB52_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8033, %ax              # imm = 0x1F61
	xorw	%cx, %ax
	cmpw	$28683, %ax             # imm = 0x700B
	jne	.LBB52_122
# %bb.67:                               # %BZ2_bzWriteClose64.split299
                                        #   in Loop: Header=BB52_50 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	5048(%rax), %eax
	movw	$28683, BasicBlockSignatureTracker # imm = 0x700B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$5000, %eax             # imm = 0x1388
	jae	.LBB52_82
# %bb.68:                               #   in Loop: Header=BB52_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$28692, %ax             # imm = 0x7014
	jne	.LBB52_122
# %bb.69:                               # %BZ2_bzWriteClose64.split311
                                        #   in Loop: Header=BB52_50 Depth=1
	movl	$5000, %eax             # imm = 0x1388
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rcx
	subl	5048(%rcx), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rsi), %rdi
	addq	$4, %rdi
	movl	(%rcx), %edx
	movq	(%rsi), %rax
	movl	(%rax), %ecx
	movw	$28692, BasicBlockSignatureTracker # imm = 0x7014
	movw	$18209, RunTimeSignatureAdjuster # imm = 0x4721
	movl	$1, %esi
	callq	spec_fwrite
	movw	$28692, BasicBlockSignatureTracker # imm = 0x7014
	movw	$18209, RunTimeSignatureAdjuster # imm = 0x4721
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movl	(%rcx), %ecx
	movw	$28692, BasicBlockSignatureTracker # imm = 0x7014
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB52_80
# %bb.70:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$28705, %ax             # imm = 0x7021
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB52_123
# %bb.71:                               # %BZ2_bzWriteClose64.split315
	movq	(%rax), %rax
	movw	$28705, BasicBlockSignatureTracker # imm = 0x7021
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_74
# %bb.72:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$28713, %ax             # imm = 0x7029
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB52_123
# %bb.73:                               # %BZ2_bzWriteClose64.split319
	movq	(%rax), %rax
	movl	$-6, (%rax)
	movw	$28713, BasicBlockSignatureTracker # imm = 0x7029
	movw	$8, RunTimeSignatureAdjuster
.LBB52_74:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26, %ax
	xorw	%cx, %ax
	cmpw	$28731, %ax             # imm = 0x703B
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB52_123
# %bb.75:                               # %BZ2_bzWriteClose64.split321
	movq	(%rax), %rax
	movw	$28731, BasicBlockSignatureTracker # imm = 0x703B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_78
# %bb.76:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$127, %ax
	cmpw	$28740, %ax             # imm = 0x7044
	movq	-48(%rbp), %rbx         # 8-byte Reload
	jne	.LBB52_123
# %bb.77:                               # %BZ2_bzWriteClose64.split323
	movq	(%rbx), %rax
	movl	$-6, 5096(%rax)
	movw	$28740, BasicBlockSignatureTracker # imm = 0x7044
	movw	$127, RunTimeSignatureAdjuster
.LBB52_78:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$102, %ax
	xorw	%cx, %ax
	cmpw	$28765, %ax             # imm = 0x705D
	jne	.LBB52_123
# %bb.79:                               # %BZ2_bzWriteClose64.split325
	movw	$28765, BasicBlockSignatureTracker # imm = 0x705D
	movw	$7623, RunTimeSignatureAdjuster # imm = 0x1DC7
	jmp	.LBB52_120
.LBB52_80:                              #   in Loop: Header=BB52_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$118, %ax
	cmpw	$28770, %ax             # imm = 0x7062
	jne	.LBB52_122
# %bb.81:                               # %BZ2_bzWriteClose64.split317
                                        #   in Loop: Header=BB52_50 Depth=1
	movw	$28770, BasicBlockSignatureTracker # imm = 0x7062
	movw	$105, RunTimeSignatureAdjuster
.LBB52_82:                              #   in Loop: Header=BB52_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$101, %ax
	xorw	%cx, %ax
	cmpw	$28782, %ax             # imm = 0x706E
	jne	.LBB52_122
# %bb.83:                               # %BZ2_bzWriteClose64.split313
                                        #   in Loop: Header=BB52_50 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$28782, BasicBlockSignatureTracker # imm = 0x706E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB52_86
# %bb.84:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$231, %ax
	cmpw	$28809, %ax             # imm = 0x7089
	jne	.LBB52_123
# %bb.85:                               # %BZ2_bzWriteClose64.split327
	movw	$28809, BasicBlockSignatureTracker # imm = 0x7089
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB52_88
.LBB52_86:                              #   in Loop: Header=BB52_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$240, %ax
	cmpw	$28830, %ax             # imm = 0x709E
	jne	.LBB52_122
# %bb.87:                               # %BZ2_bzWriteClose64.split329
                                        #   in Loop: Header=BB52_50 Depth=1
	movw	$28830, BasicBlockSignatureTracker # imm = 0x709E
	movw	$8190, RunTimeSignatureAdjuster # imm = 0x1FFE
	jmp	.LBB52_50
.LBB52_88:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$411, %ax               # imm = 0x19B
	cmpw	$28946, %ax             # imm = 0x7112
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rbx, %rdx
	movq	%r12, %rsi
	movq	%r14, %rcx
	movq	%r13, %r14
	movq	%r15, %r10
	jne	.LBB52_123
# %bb.89:                               # %BZ2_bzWriteClose64.split331
	movw	$28946, BasicBlockSignatureTracker # imm = 0x7112
	movw	$7743, RunTimeSignatureAdjuster # imm = 0x1E3F
.LBB52_90:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$7730, %ax              # imm = 0x1E32
	xorw	%bx, %ax
	cmpw	$28959, %ax             # imm = 0x711F
	jne	.LBB52_123
# %bb.91:                               # %BZ2_bzWriteClose64.split289
	movq	%rcx, %rbx
	movl	(%r10), %eax
	movw	$28959, BasicBlockSignatureTracker # imm = 0x711F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB52_94
# %bb.92:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$83, %ax
	cmpw	$29004, %ax             # imm = 0x714C
	jne	.LBB52_123
# %bb.93:                               # %BZ2_bzWriteClose64.split335
	movw	$29004, BasicBlockSignatureTracker # imm = 0x714C
	movw	$83, RunTimeSignatureAdjuster
.LBB52_94:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$121, %ax
	xorw	%cx, %ax
	cmpw	$29030, %ax             # imm = 0x7166
	movq	%r14, %rax
	jne	.LBB52_123
# %bb.95:                               # %BZ2_bzWriteClose64.split333
	movq	(%rax), %rax
	movw	$29030, BasicBlockSignatureTracker # imm = 0x7166
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_98
# %bb.96:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$29054, %ax             # imm = 0x717E
	movq	%r11, %rax
	jne	.LBB52_123
# %bb.97:                               # %BZ2_bzWriteClose64.split337
	movq	(%rax), %rax
	movl	5028(%rax), %eax
	movq	(%r14), %rcx
	movl	%eax, (%rcx)
	movw	$29054, BasicBlockSignatureTracker # imm = 0x717E
	movw	$24, RunTimeSignatureAdjuster
.LBB52_98:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$238, %ax
	xorw	%cx, %ax
	cmpw	$29064, %ax             # imm = 0x7188
	movq	%rbx, %rax
	jne	.LBB52_123
# %bb.99:                               # %BZ2_bzWriteClose64.split339
	movq	(%rax), %rax
	movw	$29064, BasicBlockSignatureTracker # imm = 0x7188
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_102
# %bb.100:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$899, %ax               # imm = 0x383
	cmpw	$29195, %ax             # imm = 0x720B
	movq	%r11, %rax
	jne	.LBB52_123
# %bb.101:                              # %BZ2_bzWriteClose64.split341
	movq	(%rax), %rax
	movl	5032(%rax), %eax
	movq	(%rbx), %rcx
	movl	%eax, (%rcx)
	movw	$29195, BasicBlockSignatureTracker # imm = 0x720B
	movw	$899, RunTimeSignatureAdjuster # imm = 0x383
.LBB52_102:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$917, %ax               # imm = 0x395
	xorw	%cx, %ax
	cmpw	$29213, %ax             # imm = 0x721D
	movq	%rsi, %rax
	jne	.LBB52_123
# %bb.103:                              # %BZ2_bzWriteClose64.split343
	movq	(%rax), %rax
	movw	$29213, BasicBlockSignatureTracker # imm = 0x721D
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_106
# %bb.104:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$71, %ax
	cmpw	$29274, %ax             # imm = 0x725A
	movq	%r11, %rax
	jne	.LBB52_123
# %bb.105:                              # %BZ2_bzWriteClose64.split345
	movq	(%rax), %rax
	movl	5052(%rax), %eax
	movq	(%rsi), %rcx
	movl	%eax, (%rcx)
	movw	$29274, BasicBlockSignatureTracker # imm = 0x725A
	movw	$71, RunTimeSignatureAdjuster
.LBB52_106:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$126, %ax
	xorw	%cx, %ax
	cmpw	$29283, %ax             # imm = 0x7263
	movq	%rdx, %rax
	jne	.LBB52_123
# %bb.107:                              # %BZ2_bzWriteClose64.split347
	movq	(%rax), %rax
	movw	$29283, BasicBlockSignatureTracker # imm = 0x7263
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_110
# %bb.108:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$29302, %ax             # imm = 0x7276
	movq	%r11, %rax
	jne	.LBB52_123
# %bb.109:                              # %BZ2_bzWriteClose64.split349
	movq	(%rax), %rax
	movl	5056(%rax), %eax
	movq	(%rdx), %rcx
	movl	%eax, (%rcx)
	movw	$29302, BasicBlockSignatureTracker # imm = 0x7276
	movw	$21, RunTimeSignatureAdjuster
.LBB52_110:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$246, %ax
	xorw	%cx, %ax
	cmpw	$29333, %ax             # imm = 0x7295
	movq	%rdi, %rax
	jne	.LBB52_123
# %bb.111:                              # %BZ2_bzWriteClose64.split351
	movq	(%rax), %rax
	movw	$29333, BasicBlockSignatureTracker # imm = 0x7295
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_114
# %bb.112:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$29362, %ax             # imm = 0x72B2
	jne	.LBB52_123
# %bb.113:                              # %BZ2_bzWriteClose64.split353
	movq	(%rdi), %rax
	movl	$0, (%rax)
	movw	$29362, BasicBlockSignatureTracker # imm = 0x72B2
	movw	$39, RunTimeSignatureAdjuster
.LBB52_114:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$46, %ax
	xorw	%cx, %ax
	cmpw	$29371, %ax             # imm = 0x72BB
	movq	%r11, %rax
	jne	.LBB52_123
# %bb.115:                              # %BZ2_bzWriteClose64.split355
	movq	(%rax), %rax
	movw	$29371, BasicBlockSignatureTracker # imm = 0x72BB
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB52_118
# %bb.116:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$29403, %ax             # imm = 0x72DB
	movq	%r11, %rax
	jne	.LBB52_123
# %bb.117:                              # %BZ2_bzWriteClose64.split357
	movq	(%rax), %rax
	movl	$0, 5096(%rax)
	movw	$29403, BasicBlockSignatureTracker # imm = 0x72DB
	movw	$96, RunTimeSignatureAdjuster
.LBB52_118:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$437, %ax               # imm = 0x1B5
	xorw	%cx, %ax
	cmpw	$29454, %ax             # imm = 0x730E
	jne	.LBB52_123
# %bb.119:                              # %BZ2_bzWriteClose64.split359
	movq	(%r11), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movw	$29454, BasicBlockSignatureTracker # imm = 0x730E
	movw	$0, RunTimeSignatureAdjuster
	movq	%r11, %rbx
	callq	BZ2_bzCompressEnd
	movw	$29454, BasicBlockSignatureTracker # imm = 0x730E
	movw	$7828, RunTimeSignatureAdjuster # imm = 0x1E94
	movq	(%rbx), %rdi
	callq	free
	movw	$29454, BasicBlockSignatureTracker # imm = 0x730E
	movw	$7828, RunTimeSignatureAdjuster # imm = 0x1E94
.LBB52_120:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7867, %ax              # imm = 0x1EBB
	xorw	%cx, %ax
	cmpw	$29473, %ax             # imm = 0x7321
	jne	.LBB52_123
# %bb.121:                              # %BZ2_bzWriteClose64.split259
	movw	$29473, BasicBlockSignatureTracker # imm = 0x7321
	movw	$23875, RunTimeSignatureAdjuster # imm = 0x5D43
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB52_122:                             # %CFerrorHandler.BZ2_bzWriteClose64.loopexit
	jmp	.LBB52_123
.LBB52_123:                             # %CFerrorHandler.BZ2_bzWriteClose64
	callq	FAULT_DETECTED_CFC
.Lfunc_end52:
	.size	BZ2_bzWriteClose64, .Lfunc_end52-BZ2_bzWriteClose64
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen          # -- Begin function BZ2_bzReadOpen
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen,@function
BZ2_bzReadOpen:                         # @BZ2_bzReadOpen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%esi, %r10d
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$17910, %ax             # imm = 0x45F6
	xorw	%bx, %ax
	cmpw	$29588, %ax             # imm = 0x7394
	jne	.LBB53_94
# %bb.1:                                # %BZ2_bzReadOpen.split270
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$17910, %ax             # imm = 0x45F6
	xorw	%bx, %ax
	cmpw	$29588, %ax             # imm = 0x7394
	jne	.LBB53_94
# %bb.2:                                # %BZ2_bzReadOpen.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rdi, (%rbx)
	movl	%r10d, (%r13)
	movl	%edx, (%rsi)
	movl	%ecx, (%r14)
	movq	%r8, (%r12)
	movl	%r9d, (%r15)
	movq	$0, (%r11)
	movq	(%rbx), %rax
	movw	$29588, BasicBlockSignatureTracker # imm = 0x7394
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$29599, %ax             # imm = 0x739F
	jne	.LBB53_94
# %bb.4:                                # %BZ2_bzReadOpen.split186
	movq	(%rbx), %rax
	movl	$0, (%rax)
	movw	$29599, BasicBlockSignatureTracker # imm = 0x739F
	movw	$11, RunTimeSignatureAdjuster
.LBB53_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$29629, %ax             # imm = 0x73BD
	jne	.LBB53_94
# %bb.6:                                # %BZ2_bzReadOpen.split188
	movq	(%r11), %rax
	movw	$29629, BasicBlockSignatureTracker # imm = 0x73BD
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$102, %ax
	cmpw	$29659, %ax             # imm = 0x73DB
	jne	.LBB53_94
# %bb.8:                                # %BZ2_bzReadOpen.split190
	movq	(%r11), %rax
	movl	$0, 5096(%rax)
	movw	$29659, BasicBlockSignatureTracker # imm = 0x73DB
	movw	$102, RunTimeSignatureAdjuster
.LBB53_9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1983, %ax              # imm = 0x7BF
	xorw	%cx, %ax
	cmpw	$29698, %ax             # imm = 0x7402
	jne	.LBB53_94
# %bb.10:                               # %BZ2_bzReadOpen.split192
	movl	(%r13), %eax
	movw	$29698, BasicBlockSignatureTracker # imm = 0x7402
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB53_41
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$29702, %ax             # imm = 0x7406
	jne	.LBB53_94
# %bb.12:                               # %BZ2_bzReadOpen.split196
	movl	(%r14), %eax
	movw	$29702, BasicBlockSignatureTracker # imm = 0x7406
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB53_15
# %bb.13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$29710, %ax             # imm = 0x740E
	jne	.LBB53_94
# %bb.14:                               # %BZ2_bzReadOpen.split198
	movl	(%r14), %eax
	movw	$29710, BasicBlockSignatureTracker # imm = 0x740E
	movw	$8, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB53_35
.LBB53_15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$61, %ax
	xorw	%cx, %ax
	cmpw	$29755, %ax             # imm = 0x743B
	jne	.LBB53_94
# %bb.16:                               # %BZ2_bzReadOpen.split200
	movl	(%rsi), %eax
	movw	$29755, BasicBlockSignatureTracker # imm = 0x743B
	movw	$57, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB53_41
# %bb.17:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-4367, %ax             # imm = 0xEEF1
	cmpw	$-25910, %ax            # imm = 0x9ACA
	jne	.LBB53_94
# %bb.18:                               # %BZ2_bzReadOpen.split204
	movw	$-25910, BasicBlockSignatureTracker # imm = 0x9ACA
	movw	$-4367, RunTimeSignatureAdjuster # imm = 0xEEF1
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7, %ax
	xorw	%cx, %ax
	cmpw	$29756, %ax             # imm = 0x743C
	jne	.LBB53_94
# %bb.20:                               # %BZ2_bzReadOpen.split272
	movl	(%rsi), %eax
	movw	$29756, BasicBlockSignatureTracker # imm = 0x743C
	movw	$62, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jg	.LBB53_41
# %bb.21:                               # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-4059, %ax             # imm = 0xF025
	cmpw	$-31719, %ax            # imm = 0x8419
	jne	.LBB53_94
# %bb.22:                               # %BZ2_bzReadOpen.split206
	movw	$-31719, BasicBlockSignatureTracker # imm = 0x8419
	movw	$-4059, RunTimeSignatureAdjuster # imm = 0xF025
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$106, %ax
	xorw	%cx, %ax
	cmpw	$29782, %ax             # imm = 0x7456
	jne	.LBB53_94
# %bb.24:                               # %BZ2_bzReadOpen.split274
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movq	%r11, -48(%rbp)         # 8-byte Spill
	movq	(%r12), %rax
	movw	$29782, BasicBlockSignatureTracker # imm = 0x7456
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB53_27
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$29807, %ax             # imm = 0x746F
	jne	.LBB53_94
# %bb.26:                               # %BZ2_bzReadOpen.split208
	movl	(%r15), %eax
	movw	$29807, BasicBlockSignatureTracker # imm = 0x746F
	movw	$57, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB53_37
.LBB53_27:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$223, %ax
	xorw	%cx, %ax
	cmpw	$29833, %ax             # imm = 0x7489
	jne	.LBB53_94
# %bb.28:                               # %BZ2_bzReadOpen.split210
	movq	(%r12), %rax
	movw	$29833, BasicBlockSignatureTracker # imm = 0x7489
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_51
# %bb.29:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$29837, %ax             # imm = 0x748D
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-56(%rbp), %rbx         # 8-byte Reload
	jne	.LBB53_94
# %bb.30:                               # %BZ2_bzReadOpen.split214
	movl	(%r15), %eax
	movw	$29837, BasicBlockSignatureTracker # imm = 0x748D
	movw	$143, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB53_41
# %bb.31:                               # %Buffer__4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11427, %ax             # imm = 0x2CA3
	cmpw	$22574, %ax             # imm = 0x582E
	jne	.LBB53_94
# %bb.32:                               # %BZ2_bzReadOpen.split218
	movw	$22574, BasicBlockSignatureTracker # imm = 0x582E
	movw	$11427, RunTimeSignatureAdjuster # imm = 0x2CA3
# %bb.33:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$74, %ax
	xorw	%cx, %ax
	cmpw	$29895, %ax             # imm = 0x74C7
	jne	.LBB53_94
# %bb.34:                               # %BZ2_bzReadOpen.split276
	movl	(%r15), %eax
	movw	$29895, BasicBlockSignatureTracker # imm = 0x74C7
	movw	$78, RunTimeSignatureAdjuster
	cmpl	$5000, %eax             # imm = 0x1388
	jg	.LBB53_39
	jmp	.LBB53_51
.LBB53_35:                              # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29278, %ax             # imm = 0x725E
	cmpw	$1616, %ax              # imm = 0x650
	jne	.LBB53_94
# %bb.36:                               # %BZ2_bzReadOpen.split202
	movw	$1616, BasicBlockSignatureTracker # imm = 0x650
	movw	$29266, RunTimeSignatureAdjuster # imm = 0x7252
	jmp	.LBB53_41
.LBB53_37:                              # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-14867, %ax            # imm = 0xC5ED
	cmpw	$-20094, %ax            # imm = 0xB182
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-56(%rbp), %rbx         # 8-byte Reload
	jne	.LBB53_94
# %bb.38:                               # %BZ2_bzReadOpen.split212
	movw	$-20094, BasicBlockSignatureTracker # imm = 0xB182
	movw	$-14976, RunTimeSignatureAdjuster # imm = 0xC580
	jmp	.LBB53_41
.LBB53_39:                              # %Buffer__5
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21663, %ax             # imm = 0x549F
	cmpw	$8280, %ax              # imm = 0x2058
	movq	-48(%rbp), %r11         # 8-byte Reload
	movq	-56(%rbp), %rbx         # 8-byte Reload
	jne	.LBB53_94
# %bb.40:                               # %BZ2_bzReadOpen.split220
	movw	$8280, BasicBlockSignatureTracker # imm = 0x2058
	movw	$21594, RunTimeSignatureAdjuster # imm = 0x545A
.LBB53_41:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$205, %ax
	xorw	%cx, %ax
	cmpw	$29903, %ax             # imm = 0x74CF
	jne	.LBB53_94
# %bb.42:                               # %BZ2_bzReadOpen.split194
	movq	(%rbx), %rax
	movw	$29903, BasicBlockSignatureTracker # imm = 0x74CF
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_45
# %bb.43:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$500, %ax               # imm = 0x1F4
	cmpw	$30011, %ax             # imm = 0x753B
	jne	.LBB53_94
# %bb.44:                               # %BZ2_bzReadOpen.split222
	movq	(%rbx), %rax
	movl	$-2, (%rax)
	movw	$30011, BasicBlockSignatureTracker # imm = 0x753B
	movw	$500, RunTimeSignatureAdjuster # imm = 0x1F4
.LBB53_45:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$393, %ax               # imm = 0x189
	xorw	%cx, %ax
	cmpw	$30022, %ax             # imm = 0x7546
	jne	.LBB53_94
# %bb.46:                               # %BZ2_bzReadOpen.split224
	movq	(%r11), %rax
	movw	$30022, BasicBlockSignatureTracker # imm = 0x7546
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_49
# %bb.47:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$30038, %ax             # imm = 0x7556
	jne	.LBB53_94
# %bb.48:                               # %BZ2_bzReadOpen.split226
	movq	(%r11), %rax
	movl	$-2, 5096(%rax)
	movw	$30038, BasicBlockSignatureTracker # imm = 0x7556
	movw	$16, RunTimeSignatureAdjuster
.LBB53_49:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$44, %ax
	xorw	%cx, %ax
	cmpw	$30058, %ax             # imm = 0x756A
	jne	.LBB53_94
# %bb.50:                               # %BZ2_bzReadOpen.split228
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movw	$30058, BasicBlockSignatureTracker # imm = 0x756A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB53_91
.LBB53_51:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$503, %ax               # imm = 0x1F7
	xorw	%cx, %ax
	cmpw	$30078, %ax             # imm = 0x757E
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.52:                               # %BZ2_bzReadOpen.split216
	movl	$5104, %edi             # imm = 0x13F0
	movq	%rax, %rbx
	callq	malloc
	movq	%rax, (%rbx)
	movq	(%rbx), %rax
	movw	$30078, BasicBlockSignatureTracker # imm = 0x757E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB53_63
# %bb.53:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$238, %ax
	cmpw	$30096, %ax             # imm = 0x7590
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.54:                               # %BZ2_bzReadOpen.split232
	movq	(%rax), %rax
	movw	$30096, BasicBlockSignatureTracker # imm = 0x7590
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_57
# %bb.55:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$36, %ax
	cmpw	$30132, %ax             # imm = 0x75B4
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.56:                               # %BZ2_bzReadOpen.split236
	movq	(%rax), %rax
	movl	$-3, (%rax)
	movw	$30132, BasicBlockSignatureTracker # imm = 0x75B4
	movw	$36, RunTimeSignatureAdjuster
.LBB53_57:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$66, %ax
	xorw	%cx, %ax
	cmpw	$30162, %ax             # imm = 0x75D2
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.58:                               # %BZ2_bzReadOpen.split238
	movq	(%rax), %rax
	movw	$30162, BasicBlockSignatureTracker # imm = 0x75D2
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_61
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1009, %ax              # imm = 0x3F1
	cmpw	$30243, %ax             # imm = 0x7623
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.60:                               # %BZ2_bzReadOpen.split240
	movq	(%rax), %rax
	movl	$-3, 5096(%rax)
	movw	$30243, BasicBlockSignatureTracker # imm = 0x7623
	movw	$1009, RunTimeSignatureAdjuster # imm = 0x3F1
.LBB53_61:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1017, %ax              # imm = 0x3F9
	xorw	%cx, %ax
	cmpw	$30251, %ax             # imm = 0x762B
	jne	.LBB53_94
# %bb.62:                               # %BZ2_bzReadOpen.split242
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movw	$30251, BasicBlockSignatureTracker # imm = 0x762B
	movw	$833, RunTimeSignatureAdjuster # imm = 0x341
	jmp	.LBB53_91
.LBB53_63:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$795, %ax               # imm = 0x31B
	cmpw	$30309, %ax             # imm = 0x7665
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.64:                               # %BZ2_bzReadOpen.split234
	movq	(%rax), %rax
	movw	$30309, BasicBlockSignatureTracker # imm = 0x7665
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_67
# %bb.65:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$30317, %ax             # imm = 0x766D
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.66:                               # %BZ2_bzReadOpen.split244
	movq	(%rax), %rax
	movl	$0, (%rax)
	movw	$30317, BasicBlockSignatureTracker # imm = 0x766D
	movw	$8, RunTimeSignatureAdjuster
.LBB53_67:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$21, %ax
	xorw	%cx, %ax
	cmpw	$30320, %ax             # imm = 0x7670
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.68:                               # %BZ2_bzReadOpen.split246
	movq	(%rax), %rax
	movw	$30320, BasicBlockSignatureTracker # imm = 0x7670
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_71
# %bb.69:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$30321, %ax             # imm = 0x7671
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.70:                               # %BZ2_bzReadOpen.split248
	movq	(%rax), %rax
	movl	$0, 5096(%rax)
	movw	$30321, BasicBlockSignatureTracker # imm = 0x7671
	movw	$1, RunTimeSignatureAdjuster
.LBB53_71:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$235, %ax
	xorw	%cx, %ax
	cmpw	$30363, %ax             # imm = 0x769B
	movq	-48(%rbp), %rdx         # 8-byte Reload
	jne	.LBB53_94
# %bb.72:                               # %BZ2_bzReadOpen.split250
	movq	(%rdx), %rax
	movb	$0, 5100(%rax)
	movl	(%r13), %eax
	movq	(%rdx), %rcx
	movl	%eax, (%rcx)
	movq	(%rdx), %rax
	movl	$0, 5004(%rax)
	movq	(%rdx), %rax
	movb	$0, 5008(%rax)
	movq	(%rdx), %rax
	movq	$0, 5072(%rax)
	movq	(%rdx), %rax
	movq	$0, 5080(%rax)
	movq	(%rdx), %rax
	movq	$0, 5088(%rax)
	movw	$30363, BasicBlockSignatureTracker # imm = 0x769B
	movw	$0, RunTimeSignatureAdjuster
.LBB53_73:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$58, %ax
	xorw	%cx, %ax
	cmpw	$30369, %ax             # imm = 0x76A1
	jne	.LBB53_93
# %bb.74:                               # %BZ2_bzReadOpen.split252
                                        #   in Loop: Header=BB53_73 Depth=1
	movl	(%r15), %eax
	movw	$30369, BasicBlockSignatureTracker # imm = 0x76A1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB53_77
# %bb.75:                               #   in Loop: Header=BB53_73 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$30385, %ax             # imm = 0x76B1
	jne	.LBB53_93
# %bb.76:                               # %BZ2_bzReadOpen.split254
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	(%r12), %rax
	movb	(%rax), %al
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rcx
	movq	(%rsi), %rdx
	movslq	5004(%rdx), %rdx
	movb	%al, 4(%rcx,%rdx)
	movq	(%rsi), %rax
	movl	5004(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5004(%rax)
	movq	(%r12), %rax
	addq	$1, %rax
	movq	%rax, (%r12)
	movl	(%r15), %eax
	addl	$-1, %eax
	movl	%eax, (%r15)
	movw	$30385, BasicBlockSignatureTracker # imm = 0x76B1
	movw	$42, RunTimeSignatureAdjuster
	jmp	.LBB53_73
.LBB53_77:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$30391, %ax             # imm = 0x76B7
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	jne	.LBB53_94
# %bb.78:                               # %BZ2_bzReadOpen.split256
	movq	(%rax), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	(%rcx), %esi
	movl	(%r14), %edx
	movw	$30391, BasicBlockSignatureTracker # imm = 0x76B7
	movw	$13900, RunTimeSignatureAdjuster # imm = 0x364C
	callq	BZ2_bzDecompressInit
	movw	$30391, BasicBlockSignatureTracker # imm = 0x76B7
	movw	$13900, RunTimeSignatureAdjuster # imm = 0x364C
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$30391, BasicBlockSignatureTracker # imm = 0x76B7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB53_89
# %bb.79:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$82, %ax
	cmpw	$30437, %ax             # imm = 0x76E5
	movq	-56(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.80:                               # %BZ2_bzReadOpen.split258
	movq	(%rax), %rax
	movw	$30437, BasicBlockSignatureTracker # imm = 0x76E5
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_83
# %bb.81:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$30446, %ax             # imm = 0x76EE
	movq	-56(%rbp), %rcx         # 8-byte Reload
	jne	.LBB53_94
# %bb.82:                               # %BZ2_bzReadOpen.split262
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movl	%eax, (%rcx)
	movw	$30446, BasicBlockSignatureTracker # imm = 0x76EE
	movw	$11, RunTimeSignatureAdjuster
.LBB53_83:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$20, %ax
	xorw	%cx, %ax
	cmpw	$30449, %ax             # imm = 0x76F1
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.84:                               # %BZ2_bzReadOpen.split264
	movq	(%rax), %rax
	movw	$30449, BasicBlockSignatureTracker # imm = 0x76F1
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB53_87
# %bb.85:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$482, %ax               # imm = 0x1E2
	cmpw	$30483, %ax             # imm = 0x7713
	movq	-48(%rbp), %rcx         # 8-byte Reload
	jne	.LBB53_94
# %bb.86:                               # %BZ2_bzReadOpen.split266
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movl	%eax, 5096(%rcx)
	movw	$30483, BasicBlockSignatureTracker # imm = 0x7713
	movw	$482, RunTimeSignatureAdjuster # imm = 0x1E2
.LBB53_87:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$494, %ax               # imm = 0x1EE
	xorw	%cx, %ax
	cmpw	$30495, %ax             # imm = 0x771F
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB53_94
# %bb.88:                               # %BZ2_bzReadOpen.split268
	movq	(%rax), %rdi
	callq	free
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movw	$30495, BasicBlockSignatureTracker # imm = 0x771F
	movw	$629, RunTimeSignatureAdjuster # imm = 0x275
	jmp	.LBB53_91
.LBB53_89:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$405, %ax               # imm = 0x195
	cmpw	$30498, %ax             # imm = 0x7722
	movq	-48(%rbp), %rdx         # 8-byte Reload
	jne	.LBB53_94
# %bb.90:                               # %BZ2_bzReadOpen.split260
	movq	(%rdx), %rax
	movl	5004(%rax), %eax
	movq	(%rdx), %rcx
	movl	%eax, 5024(%rcx)
	movq	(%rdx), %rax
	addq	$4, %rax
	movq	(%rdx), %rcx
	movq	%rax, 5016(%rcx)
	movq	(%rdx), %rax
	movb	$1, 5100(%rax)
	movq	(%rdx), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movw	$30498, BasicBlockSignatureTracker # imm = 0x7722
	movw	$584, RunTimeSignatureAdjuster # imm = 0x248
.LBB53_91:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$593, %ax               # imm = 0x251
	xorw	%cx, %ax
	cmpw	$30523, %ax             # imm = 0x773B
	jne	.LBB53_94
# %bb.92:                               # %BZ2_bzReadOpen.split230
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movw	$30523, BasicBlockSignatureTracker # imm = 0x773B
	movw	$16755, RunTimeSignatureAdjuster # imm = 0x4173
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB53_93:                              # %CFerrorHandler.BZ2_bzReadOpen.loopexit
	jmp	.LBB53_94
.LBB53_94:                              # %CFerrorHandler.BZ2_bzReadOpen
	callq	FAULT_DETECTED_CFC
.Lfunc_end53:
	.size	BZ2_bzReadOpen, .Lfunc_end53-BZ2_bzReadOpen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose         # -- Begin function BZ2_bzReadClose
	.p2align	4, 0x90
	.type	BZ2_bzReadClose,@function
BZ2_bzReadClose:                        # @BZ2_bzReadClose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16539, %ax             # imm = 0x409B
	xorw	%cx, %ax
	cmpw	$30568, %ax             # imm = 0x7768
	jne	.LBB54_42
# %bb.1:                                # %BZ2_bzReadClose.split126
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16539, %ax             # imm = 0x409B
	xorw	%cx, %ax
	cmpw	$30568, %ax             # imm = 0x7768
	jne	.LBB54_42
# %bb.2:                                # %BZ2_bzReadClose.split86
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16539, %ax             # imm = 0x409B
	xorw	%cx, %ax
	cmpw	$30568, %ax             # imm = 0x7768
	jne	.LBB54_42
# %bb.3:                                # %BZ2_bzReadClose.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%rax)
	movq	%rsi, (%rcx)
	movq	(%rcx), %rcx
	movq	%rcx, (%rbx)
	movq	(%rax), %rcx
	movw	$30568, BasicBlockSignatureTracker # imm = 0x7768
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB54_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$229, %cx
	cmpw	$30605, %cx             # imm = 0x778D
	jne	.LBB54_42
# %bb.5:                                # %BZ2_bzReadClose.split88
	movq	(%rax), %rcx
	movl	$0, (%rcx)
	movw	$30605, BasicBlockSignatureTracker # imm = 0x778D
	movw	$229, RunTimeSignatureAdjuster
.LBB54_6:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$254, %cx
	xorw	%dx, %cx
	cmpw	$30614, %cx             # imm = 0x7796
	jne	.LBB54_42
# %bb.7:                                # %BZ2_bzReadClose.split90
	movq	(%rbx), %rcx
	movw	$30614, BasicBlockSignatureTracker # imm = 0x7796
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB54_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$35, %cx
	cmpw	$30645, %cx             # imm = 0x77B5
	jne	.LBB54_42
# %bb.9:                                # %BZ2_bzReadClose.split92
	movq	(%rbx), %rcx
	movl	$0, 5096(%rcx)
	movw	$30645, BasicBlockSignatureTracker # imm = 0x77B5
	movw	$35, RunTimeSignatureAdjuster
.LBB54_10:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$32, %cx
	xorw	%dx, %cx
	cmpw	$30646, %cx             # imm = 0x77B6
	jne	.LBB54_42
# %bb.11:                               # %BZ2_bzReadClose.split94
	movq	(%rbx), %rcx
	movw	$30646, BasicBlockSignatureTracker # imm = 0x77B6
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	jne	.LBB54_22
# %bb.12:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$8, %cx
	cmpw	$30654, %cx             # imm = 0x77BE
	jne	.LBB54_42
# %bb.13:                               # %BZ2_bzReadClose.split96
	movq	(%rax), %rcx
	movw	$30654, BasicBlockSignatureTracker # imm = 0x77BE
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB54_16
# %bb.14:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$86, %cx
	cmpw	$30696, %cx             # imm = 0x77E8
	jne	.LBB54_42
# %bb.15:                               # %BZ2_bzReadClose.split100
	movq	(%rax), %rax
	movl	$0, (%rax)
	movw	$30696, BasicBlockSignatureTracker # imm = 0x77E8
	movw	$86, RunTimeSignatureAdjuster
.LBB54_16:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3997, %ax              # imm = 0xF9D
	xorw	%cx, %ax
	cmpw	$30755, %ax             # imm = 0x7823
	jne	.LBB54_42
# %bb.17:                               # %BZ2_bzReadClose.split102
	movq	(%rbx), %rax
	movw	$30755, BasicBlockSignatureTracker # imm = 0x7823
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB54_20
# %bb.18:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$30769, %ax             # imm = 0x7831
	jne	.LBB54_42
# %bb.19:                               # %BZ2_bzReadClose.split104
	movq	(%rbx), %rax
	movl	$0, 5096(%rax)
	movw	$30769, BasicBlockSignatureTracker # imm = 0x7831
	movw	$18, RunTimeSignatureAdjuster
.LBB54_20:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$30783, %ax             # imm = 0x783F
	jne	.LBB54_42
# %bb.21:                               # %BZ2_bzReadClose.split106
	movw	$30783, BasicBlockSignatureTracker # imm = 0x783F
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB54_40
.LBB54_22:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$4082, %cx              # imm = 0xFF2
	cmpw	$30788, %cx             # imm = 0x7844
	jne	.LBB54_42
# %bb.23:                               # %BZ2_bzReadClose.split98
	movq	(%rbx), %rcx
	movb	5008(%rcx), %cl
	movw	$30788, BasicBlockSignatureTracker # imm = 0x7844
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %cl
	je	.LBB54_34
# %bb.24:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$17, %cx
	cmpw	$30805, %cx             # imm = 0x7855
	jne	.LBB54_42
# %bb.25:                               # %BZ2_bzReadClose.split110
	movq	(%rax), %rcx
	movw	$30805, BasicBlockSignatureTracker # imm = 0x7855
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB54_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$59, %cx
	cmpw	$30830, %cx             # imm = 0x786E
	jne	.LBB54_42
# %bb.27:                               # %BZ2_bzReadClose.split114
	movq	(%rax), %rax
	movl	$-1, (%rax)
	movw	$30830, BasicBlockSignatureTracker # imm = 0x786E
	movw	$59, RunTimeSignatureAdjuster
.LBB54_28:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$247, %ax
	xorw	%cx, %ax
	cmpw	$30882, %ax             # imm = 0x78A2
	jne	.LBB54_42
# %bb.29:                               # %BZ2_bzReadClose.split116
	movq	(%rbx), %rax
	movw	$30882, BasicBlockSignatureTracker # imm = 0x78A2
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB54_32
# %bb.30:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$30896, %ax             # imm = 0x78B0
	jne	.LBB54_42
# %bb.31:                               # %BZ2_bzReadClose.split118
	movq	(%rbx), %rax
	movl	$-1, 5096(%rax)
	movw	$30896, BasicBlockSignatureTracker # imm = 0x78B0
	movw	$18, RunTimeSignatureAdjuster
.LBB54_32:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$30907, %ax             # imm = 0x78BB
	jne	.LBB54_42
# %bb.33:                               # %BZ2_bzReadClose.split120
	movw	$30907, BasicBlockSignatureTracker # imm = 0x78BB
	movw	$132, RunTimeSignatureAdjuster
	jmp	.LBB54_40
.LBB54_34:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$135, %ax
	cmpw	$30915, %ax             # imm = 0x78C3
	jne	.LBB54_42
# %bb.35:                               # %BZ2_bzReadClose.split112
	movq	(%rbx), %rax
	movb	5100(%rax), %al
	movw	$30915, BasicBlockSignatureTracker # imm = 0x78C3
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB54_38
# %bb.36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$30974, %ax             # imm = 0x78FE
	jne	.LBB54_42
# %bb.37:                               # %BZ2_bzReadClose.split122
	movq	(%rbx), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movw	$30974, BasicBlockSignatureTracker # imm = 0x78FE
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_bzDecompressEnd
	movw	$30974, BasicBlockSignatureTracker # imm = 0x78FE
	movw	$61, RunTimeSignatureAdjuster
	movw	$30974, BasicBlockSignatureTracker # imm = 0x78FE
	movw	$61, RunTimeSignatureAdjuster
.LBB54_38:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$492, %ax               # imm = 0x1EC
	xorw	%cx, %ax
	cmpw	$31023, %ax             # imm = 0x792F
	jne	.LBB54_42
# %bb.39:                               # %BZ2_bzReadClose.split124
	movq	(%rbx), %rdi
	callq	free
	movw	$31023, BasicBlockSignatureTracker # imm = 0x792F
	movw	$272, RunTimeSignatureAdjuster # imm = 0x110
.LBB54_40:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$383, %ax               # imm = 0x17F
	xorw	%cx, %ax
	cmpw	$31040, %ax             # imm = 0x7940
	jne	.LBB54_42
# %bb.41:                               # %BZ2_bzReadClose.split108
	movw	$31040, BasicBlockSignatureTracker # imm = 0x7940
	movw	$20195, RunTimeSignatureAdjuster # imm = 0x4EE3
	leaq	-8(%rbp), %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB54_42:                              # %CFerrorHandler.BZ2_bzReadClose
	callq	FAULT_DETECTED_CFC
.Lfunc_end54:
	.size	BZ2_bzReadClose, .Lfunc_end54-BZ2_bzReadClose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead              # -- Begin function BZ2_bzRead
	.p2align	4, 0x90
	.type	BZ2_bzRead,@function
BZ2_bzRead:                             # @BZ2_bzRead
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$20410, %ax             # imm = 0x4FBA
	xorw	%bx, %ax
	cmpw	$31051, %ax             # imm = 0x794B
	jne	.LBB55_132
# %bb.1:                                # %BZ2_bzRead.split378
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$20410, %ax             # imm = 0x4FBA
	xorw	%bx, %ax
	cmpw	$31051, %ax             # imm = 0x794B
	jne	.LBB55_132
# %bb.2:                                # %BZ2_bzRead.split
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rdi, (%r15)
	movq	%rsi, (%rbx)
	movq	%rdx, (%rax)
	movl	%ecx, (%r12)
	movq	(%rbx), %rcx
	movq	%rcx, (%r9)
	movq	(%r15), %rcx
	movw	$31051, BasicBlockSignatureTracker # imm = 0x794B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB55_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$39, %cx
	cmpw	$31084, %cx             # imm = 0x796C
	jne	.LBB55_132
# %bb.4:                                # %BZ2_bzRead.split264
	movq	(%r15), %rcx
	movl	$0, (%rcx)
	movw	$31084, BasicBlockSignatureTracker # imm = 0x796C
	movw	$39, RunTimeSignatureAdjuster
.LBB55_5:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$63, %cx
	xorw	%dx, %cx
	cmpw	$31092, %cx             # imm = 0x7974
	jne	.LBB55_132
# %bb.6:                                # %BZ2_bzRead.split266
	movq	(%r9), %rcx
	movw	$31092, BasicBlockSignatureTracker # imm = 0x7974
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB55_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$2, %cx
	cmpw	$31094, %cx             # imm = 0x7976
	jne	.LBB55_132
# %bb.8:                                # %BZ2_bzRead.split268
	movq	(%r9), %rcx
	movl	$0, 5096(%rcx)
	movw	$31094, BasicBlockSignatureTracker # imm = 0x7976
	movw	$2, RunTimeSignatureAdjuster
.LBB55_9:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$8, %cx
	xorw	%dx, %cx
	cmpw	$31100, %cx             # imm = 0x797C
	jne	.LBB55_132
# %bb.10:                               # %BZ2_bzRead.split270
	movq	(%r9), %rcx
	movw	$31100, BasicBlockSignatureTracker # imm = 0x797C
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB55_17
# %bb.11:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$230, %cx
	cmpw	$31130, %cx             # imm = 0x799A
	jne	.LBB55_132
# %bb.12:                               # %BZ2_bzRead.split274
	movq	(%rax), %rcx
	movw	$31130, BasicBlockSignatureTracker # imm = 0x799A
	movw	$230, RunTimeSignatureAdjuster
	cmpq	$0, %rcx
	je	.LBB55_17
# %bb.13:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %cx
	xorw	$-14983, %cx            # imm = 0xC579
	cmpw	$-17181, %cx            # imm = 0xBCE3
	jne	.LBB55_132
# %bb.14:                               # %BZ2_bzRead.split276
	movw	$-17181, BasicBlockSignatureTracker # imm = 0xBCE3
	movw	$-14983, RunTimeSignatureAdjuster # imm = 0xC579
# %bb.15:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$51, %cx
	xorw	%dx, %cx
	cmpw	$31145, %cx             # imm = 0x79A9
	jne	.LBB55_132
# %bb.16:                               # %BZ2_bzRead.split380
	movl	(%r12), %ecx
	movw	$31145, BasicBlockSignatureTracker # imm = 0x79A9
	movw	$213, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jge	.LBB55_27
.LBB55_17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$198, %ax
	xorw	%cx, %ax
	cmpw	$31162, %ax             # imm = 0x79BA
	jne	.LBB55_132
# %bb.18:                               # %BZ2_bzRead.split272
	movq	(%r15), %rax
	movw	$31162, BasicBlockSignatureTracker # imm = 0x79BA
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$118, %ax
	cmpw	$31180, %ax             # imm = 0x79CC
	jne	.LBB55_132
# %bb.20:                               # %BZ2_bzRead.split280
	movq	(%r15), %rax
	movl	$-2, (%rax)
	movw	$31180, BasicBlockSignatureTracker # imm = 0x79CC
	movw	$118, RunTimeSignatureAdjuster
.LBB55_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$98, %ax
	xorw	%cx, %ax
	cmpw	$31192, %ax             # imm = 0x79D8
	jne	.LBB55_132
# %bb.22:                               # %BZ2_bzRead.split282
	movq	(%r9), %rax
	movw	$31192, BasicBlockSignatureTracker # imm = 0x79D8
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_25
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$31194, %ax             # imm = 0x79DA
	jne	.LBB55_132
# %bb.24:                               # %BZ2_bzRead.split284
	movq	(%r9), %rax
	movl	$-2, 5096(%rax)
	movw	$31194, BasicBlockSignatureTracker # imm = 0x79DA
	movw	$2, RunTimeSignatureAdjuster
.LBB55_25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$31212, %ax             # imm = 0x79EC
	jne	.LBB55_132
# %bb.26:                               # %BZ2_bzRead.split286
	movl	$0, (%r8)
	movw	$31212, BasicBlockSignatureTracker # imm = 0x79EC
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB55_129
.LBB55_27:                              # %Buffer__1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$-19626, %cx            # imm = 0xB356
	cmpw	$-13569, %cx            # imm = 0xCAFF
	jne	.LBB55_132
# %bb.28:                               # %BZ2_bzRead.split278
	movw	$-13569, BasicBlockSignatureTracker # imm = 0xCAFF
	movw	$-19626, RunTimeSignatureAdjuster # imm = 0xB356
# %bb.29:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$954, %cx               # imm = 0x3BA
	xorw	%dx, %cx
	cmpw	$31251, %cx             # imm = 0x7A13
	jne	.LBB55_132
# %bb.30:                               # %BZ2_bzRead.split382
	movq	(%r9), %rcx
	movb	5008(%rcx), %cl
	movw	$31251, BasicBlockSignatureTracker # imm = 0x7A13
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %cl
	je	.LBB55_41
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$31252, %ax             # imm = 0x7A14
	jne	.LBB55_132
# %bb.32:                               # %BZ2_bzRead.split290
	movq	(%r15), %rax
	movw	$31252, BasicBlockSignatureTracker # imm = 0x7A14
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_35
# %bb.33:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$31294, %ax             # imm = 0x7A3E
	jne	.LBB55_132
# %bb.34:                               # %BZ2_bzRead.split294
	movq	(%r15), %rax
	movl	$-1, (%rax)
	movw	$31294, BasicBlockSignatureTracker # imm = 0x7A3E
	movw	$42, RunTimeSignatureAdjuster
.LBB55_35:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$67, %ax
	xorw	%cx, %ax
	cmpw	$31319, %ax             # imm = 0x7A57
	movq	%r9, %rax
	jne	.LBB55_132
# %bb.36:                               # %BZ2_bzRead.split296
	movq	(%rax), %rax
	movw	$31319, BasicBlockSignatureTracker # imm = 0x7A57
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_39
# %bb.37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$31326, %ax             # imm = 0x7A5E
	jne	.LBB55_132
# %bb.38:                               # %BZ2_bzRead.split298
	movq	(%r9), %rax
	movl	$-1, 5096(%rax)
	movw	$31326, BasicBlockSignatureTracker # imm = 0x7A5E
	movw	$9, RunTimeSignatureAdjuster
.LBB55_39:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$247, %ax
	xorw	%cx, %ax
	cmpw	$31392, %ax             # imm = 0x7AA0
	jne	.LBB55_132
# %bb.40:                               # %BZ2_bzRead.split300
	movl	$0, (%r8)
	movw	$31392, BasicBlockSignatureTracker # imm = 0x7AA0
	movw	$844, RunTimeSignatureAdjuster # imm = 0x34C
	jmp	.LBB55_129
.LBB55_41:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$181, %cx
	cmpw	$31398, %cx             # imm = 0x7AA6
	jne	.LBB55_132
# %bb.42:                               # %BZ2_bzRead.split292
	movq	%r9, %rbx
	movq	%r8, -48(%rbp)          # 8-byte Spill
	movl	(%r12), %ecx
	movw	$31398, BasicBlockSignatureTracker # imm = 0x7AA6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB55_53
# %bb.43:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$434, %ax               # imm = 0x1B2
	cmpw	$31508, %ax             # imm = 0x7B14
	jne	.LBB55_132
# %bb.44:                               # %BZ2_bzRead.split302
	movq	(%r15), %rax
	movw	$31508, BasicBlockSignatureTracker # imm = 0x7B14
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_47
# %bb.45:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3, %ax
	cmpw	$31511, %ax             # imm = 0x7B17
	jne	.LBB55_132
# %bb.46:                               # %BZ2_bzRead.split306
	movq	(%r15), %rax
	movl	$0, (%rax)
	movw	$31511, BasicBlockSignatureTracker # imm = 0x7B17
	movw	$3, RunTimeSignatureAdjuster
.LBB55_47:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$31531, %ax             # imm = 0x7B2B
	movq	%rbx, %rax
	jne	.LBB55_132
# %bb.48:                               # %BZ2_bzRead.split308
	movq	(%rax), %rax
	movw	$31531, BasicBlockSignatureTracker # imm = 0x7B2B
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_51
# %bb.49:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$31537, %ax             # imm = 0x7B31
	jne	.LBB55_132
# %bb.50:                               # %BZ2_bzRead.split310
	movq	(%rbx), %rax
	movl	$0, 5096(%rax)
	movw	$31537, BasicBlockSignatureTracker # imm = 0x7B31
	movw	$26, RunTimeSignatureAdjuster
.LBB55_51:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$124, %ax
	xorw	%cx, %ax
	cmpw	$31575, %ax             # imm = 0x7B57
	movq	-48(%rbp), %r8          # 8-byte Reload
	jne	.LBB55_132
# %bb.52:                               # %BZ2_bzRead.split312
	movl	$0, (%r8)
	movw	$31575, BasicBlockSignatureTracker # imm = 0x7B57
	movw	$699, RunTimeSignatureAdjuster # imm = 0x2BB
	jmp	.LBB55_129
.LBB55_53:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$454, %cx               # imm = 0x1C6
	cmpw	$31584, %cx             # imm = 0x7B60
	movq	%rbx, %rsi
	jne	.LBB55_132
# %bb.54:                               # %BZ2_bzRead.split304
	movl	(%r12), %ecx
	movq	(%rsi), %rdx
	movl	%ecx, 5048(%rdx)
	movq	(%rax), %rax
	movq	(%rsi), %rcx
	movq	%rax, 5040(%rcx)
	movw	$31584, BasicBlockSignatureTracker # imm = 0x7B60
	movw	$0, RunTimeSignatureAdjuster
.LBB55_55:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7, %ax
	xorw	%cx, %ax
	cmpw	$31591, %ax             # imm = 0x7B67
	jne	.LBB55_131
# %bb.56:                               # %BZ2_bzRead.split314
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rax
	movl	5024(%rax), %eax
	movw	$31591, BasicBlockSignatureTracker # imm = 0x7B67
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB55_63
# %bb.57:                               #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$31594, %ax             # imm = 0x7B6A
	jne	.LBB55_131
# %bb.58:                               # %BZ2_bzRead.split316
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rax
	movl	(%rax), %edi
	movw	$31594, BasicBlockSignatureTracker # imm = 0x7B6A
	movw	$0, RunTimeSignatureAdjuster
	callq	myfeof.39
	movw	$31594, BasicBlockSignatureTracker # imm = 0x7B6A
	movw	$13, RunTimeSignatureAdjuster
	movw	$31594, BasicBlockSignatureTracker # imm = 0x7B6A
	movw	$13, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB55_63
# %bb.59:                               # %Buffer__2
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-18390, %ax            # imm = 0xB82A
	cmpw	$-15552, %ax            # imm = 0xC340
	jne	.LBB55_131
# %bb.60:                               # %BZ2_bzRead.split320
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	$-15552, BasicBlockSignatureTracker # imm = 0xC340
	movw	$-18390, RunTimeSignatureAdjuster # imm = 0xB82A
# %bb.61:                               #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$31603, %ax             # imm = 0x7B73
	jne	.LBB55_131
# %bb.62:                               # %BZ2_bzRead.split384
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	%rbx, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	(%rax), %rdi
	addq	$4, %rdi
	movq	(%rax), %rax
	movl	(%rax), %ecx
	movw	$31603, BasicBlockSignatureTracker # imm = 0x7B73
	movw	$21783, RunTimeSignatureAdjuster # imm = 0x5517
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	spec_fread
	movw	$31603, BasicBlockSignatureTracker # imm = 0x7B73
	movw	$21783, RunTimeSignatureAdjuster # imm = 0x5517
	movl	%eax, (%r14)
	movl	(%r14), %eax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rcx
	movl	%eax, 5004(%rcx)
	movq	(%rdx), %rax
	movl	5004(%rax), %eax
	movq	(%rdx), %rcx
	movl	%eax, 5024(%rcx)
	movq	(%rdx), %rax
	addq	$4, %rax
	movq	(%rdx), %rcx
	movq	%rax, 5016(%rcx)
	movw	$31603, BasicBlockSignatureTracker # imm = 0x7B73
	movw	$20, RunTimeSignatureAdjuster
.LBB55_63:                              #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27, %ax
	xorw	%cx, %ax
	cmpw	$31612, %ax             # imm = 0x7B7C
	jne	.LBB55_131
# %bb.64:                               # %BZ2_bzRead.split318
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movw	$31612, BasicBlockSignatureTracker # imm = 0x7B7C
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_bzDecompress
	movw	$31612, BasicBlockSignatureTracker # imm = 0x7B7C
	movw	$0, RunTimeSignatureAdjuster
	movl	%eax, (%r13)
	movl	(%r13), %eax
	movw	$31612, BasicBlockSignatureTracker # imm = 0x7B7C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB55_79
# %bb.65:                               #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$246, %ax
	cmpw	$31626, %ax             # imm = 0x7B8A
	jne	.LBB55_131
# %bb.66:                               # %BZ2_bzRead.split322
                                        #   in Loop: Header=BB55_55 Depth=1
	movl	(%r13), %eax
	movw	$31626, BasicBlockSignatureTracker # imm = 0x7B8A
	movw	$246, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	je	.LBB55_79
# %bb.67:                               # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1320, %ax              # imm = 0x528
	cmpw	$32418, %ax             # imm = 0x7EA2
	jne	.LBB55_132
# %bb.68:                               # %BZ2_bzRead.split326
	movw	$32418, BasicBlockSignatureTracker # imm = 0x7EA2
	movw	$1320, RunTimeSignatureAdjuster # imm = 0x528
# %bb.69:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$123, %ax
	xorw	%cx, %ax
	cmpw	$31729, %ax             # imm = 0x7BF1
	jne	.LBB55_132
# %bb.70:                               # %BZ2_bzRead.split386
	movq	(%r15), %rax
	movw	$31729, BasicBlockSignatureTracker # imm = 0x7BF1
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_73
# %bb.71:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2035, %ax              # imm = 0x7F3
	cmpw	$31746, %ax             # imm = 0x7C02
	jne	.LBB55_132
# %bb.72:                               # %BZ2_bzRead.split328
	movl	(%r13), %eax
	movq	(%r15), %rcx
	movl	%eax, (%rcx)
	movw	$31746, BasicBlockSignatureTracker # imm = 0x7C02
	movw	$2035, RunTimeSignatureAdjuster # imm = 0x7F3
.LBB55_73:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2034, %ax              # imm = 0x7F2
	xorw	%cx, %ax
	cmpw	$31747, %ax             # imm = 0x7C03
	movq	%rbx, %rax
	jne	.LBB55_132
# %bb.74:                               # %BZ2_bzRead.split330
	movq	(%rax), %rax
	movw	$31747, BasicBlockSignatureTracker # imm = 0x7C03
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_77
# %bb.75:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$31792, %ax             # imm = 0x7C30
	jne	.LBB55_132
# %bb.76:                               # %BZ2_bzRead.split332
	movl	(%r13), %eax
	movq	(%rbx), %rcx
	movl	%eax, 5096(%rcx)
	movw	$31792, BasicBlockSignatureTracker # imm = 0x7C30
	movw	$51, RunTimeSignatureAdjuster
.LBB55_77:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$76, %ax
	xorw	%cx, %ax
	cmpw	$31823, %ax             # imm = 0x7C4F
	movq	-48(%rbp), %r8          # 8-byte Reload
	jne	.LBB55_132
# %bb.78:                               # %BZ2_bzRead.split334
	movl	$0, (%r8)
	movw	$31823, BasicBlockSignatureTracker # imm = 0x7C4F
	movw	$1443, RunTimeSignatureAdjuster # imm = 0x5A3
	jmp	.LBB55_129
.LBB55_79:                              #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1828, %ax              # imm = 0x724
	xorw	%cx, %ax
	cmpw	$31832, %ax             # imm = 0x7C58
	jne	.LBB55_131
# %bb.80:                               # %BZ2_bzRead.split324
                                        #   in Loop: Header=BB55_55 Depth=1
	movl	(%r13), %eax
	movw	$31832, BasicBlockSignatureTracker # imm = 0x7C58
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB55_103
# %bb.81:                               #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$31839, %ax             # imm = 0x7C5F
	jne	.LBB55_131
# %bb.82:                               # %BZ2_bzRead.split336
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rax
	movl	(%rax), %edi
	movw	$31839, BasicBlockSignatureTracker # imm = 0x7C5F
	movw	$1845, RunTimeSignatureAdjuster # imm = 0x735
	callq	myfeof.39
	movw	$31839, BasicBlockSignatureTracker # imm = 0x7C5F
	movw	$1845, RunTimeSignatureAdjuster # imm = 0x735
	movzbl	%al, %eax
	movw	$31839, BasicBlockSignatureTracker # imm = 0x7C5F
	movw	$7, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB55_103
# %bb.83:                               # %Buffer__4
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-12926, %ax            # imm = 0xCD82
	cmpw	$-20003, %ax            # imm = 0xB1DD
	jne	.LBB55_131
# %bb.84:                               # %BZ2_bzRead.split340
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	$-20003, BasicBlockSignatureTracker # imm = 0xB1DD
	movw	$-12926, RunTimeSignatureAdjuster # imm = 0xCD82
# %bb.85:                               #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$54, %ax
	xorw	%cx, %ax
	cmpw	$31849, %ax             # imm = 0x7C69
	jne	.LBB55_131
# %bb.86:                               # %BZ2_bzRead.split388
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rax
	movl	5024(%rax), %eax
	movw	$31849, BasicBlockSignatureTracker # imm = 0x7C69
	movw	$49, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB55_103
# %bb.87:                               # %Buffer__5
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-4066, %ax             # imm = 0xF01E
	cmpw	$-29577, %ax            # imm = 0x8C77
	jne	.LBB55_131
# %bb.88:                               # %BZ2_bzRead.split342
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	$-29577, BasicBlockSignatureTracker # imm = 0x8C77
	movw	$-4066, RunTimeSignatureAdjuster # imm = 0xF01E
# %bb.89:                               #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19, %ax
	xorw	%cx, %ax
	cmpw	$31866, %ax             # imm = 0x7C7A
	jne	.LBB55_131
# %bb.90:                               # %BZ2_bzRead.split390
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rax
	movl	5048(%rax), %eax
	movw	$31866, BasicBlockSignatureTracker # imm = 0x7C7A
	movw	$34, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jbe	.LBB55_103
# %bb.91:                               # %Buffer__6
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-7658, %ax             # imm = 0xE216
	cmpw	$-24980, %ax            # imm = 0x9E6C
	jne	.LBB55_132
# %bb.92:                               # %BZ2_bzRead.split344
	movw	$-24980, BasicBlockSignatureTracker # imm = 0x9E6C
	movw	$-7658, RunTimeSignatureAdjuster # imm = 0xE216
# %bb.93:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$244, %ax
	xorw	%cx, %ax
	cmpw	$31886, %ax             # imm = 0x7C8E
	jne	.LBB55_132
# %bb.94:                               # %BZ2_bzRead.split392
	movq	(%r15), %rax
	movw	$31886, BasicBlockSignatureTracker # imm = 0x7C8E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_97
# %bb.95:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$31888, %ax             # imm = 0x7C90
	jne	.LBB55_132
# %bb.96:                               # %BZ2_bzRead.split346
	movq	(%r15), %rax
	movl	$-7, (%rax)
	movw	$31888, BasicBlockSignatureTracker # imm = 0x7C90
	movw	$30, RunTimeSignatureAdjuster
.LBB55_97:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$23, %ax
	xorw	%cx, %ax
	cmpw	$31897, %ax             # imm = 0x7C99
	movq	%rbx, %rax
	jne	.LBB55_132
# %bb.98:                               # %BZ2_bzRead.split348
	movq	(%rax), %rax
	movw	$31897, BasicBlockSignatureTracker # imm = 0x7C99
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_101
# %bb.99:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$31920, %ax             # imm = 0x7CB0
	jne	.LBB55_132
# %bb.100:                              # %BZ2_bzRead.split350
	movq	(%rbx), %rax
	movl	$-7, 5096(%rax)
	movw	$31920, BasicBlockSignatureTracker # imm = 0x7CB0
	movw	$41, RunTimeSignatureAdjuster
.LBB55_101:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$84, %ax
	xorw	%cx, %ax
	cmpw	$31949, %ax             # imm = 0x7CCD
	movq	-48(%rbp), %r8          # 8-byte Reload
	jne	.LBB55_132
# %bb.102:                              # %BZ2_bzRead.split352
	movl	$0, (%r8)
	movw	$31949, BasicBlockSignatureTracker # imm = 0x7CCD
	movw	$1313, RunTimeSignatureAdjuster # imm = 0x521
	jmp	.LBB55_129
.LBB55_103:                             #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$181, %ax
	xorw	%cx, %ax
	cmpw	$31981, %ax             # imm = 0x7CED
	jne	.LBB55_131
# %bb.104:                              # %BZ2_bzRead.split338
                                        #   in Loop: Header=BB55_55 Depth=1
	movl	(%r13), %eax
	movw	$31981, BasicBlockSignatureTracker # imm = 0x7CED
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB55_115
# %bb.105:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$31983, %ax             # imm = 0x7CEF
	jne	.LBB55_132
# %bb.106:                              # %BZ2_bzRead.split354
	movq	(%r15), %rax
	movw	$31983, BasicBlockSignatureTracker # imm = 0x7CEF
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_109
# %bb.107:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$31997, %ax             # imm = 0x7CFD
	jne	.LBB55_132
# %bb.108:                              # %BZ2_bzRead.split358
	movq	(%r15), %rax
	movl	$4, (%rax)
	movw	$31997, BasicBlockSignatureTracker # imm = 0x7CFD
	movw	$18, RunTimeSignatureAdjuster
.LBB55_109:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$487, %ax               # imm = 0x1E7
	xorw	%cx, %ax
	cmpw	$32008, %ax             # imm = 0x7D08
	movq	%rbx, %rax
	jne	.LBB55_132
# %bb.110:                              # %BZ2_bzRead.split360
	movq	(%rax), %rax
	movw	$32008, BasicBlockSignatureTracker # imm = 0x7D08
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_113
# %bb.111:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$47, %ax
	cmpw	$32039, %ax             # imm = 0x7D27
	movq	%rbx, %rax
	jne	.LBB55_132
# %bb.112:                              # %BZ2_bzRead.split362
	movq	(%rax), %rax
	movl	$4, 5096(%rax)
	movw	$32039, BasicBlockSignatureTracker # imm = 0x7D27
	movw	$47, RunTimeSignatureAdjuster
.LBB55_113:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$61, %ax
	xorw	%cx, %ax
	cmpw	$32053, %ax             # imm = 0x7D35
	movq	-48(%rbp), %r8          # 8-byte Reload
	jne	.LBB55_132
# %bb.114:                              # %BZ2_bzRead.split364
	movl	(%r12), %eax
	movq	(%rbx), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, (%r8)
	movw	$32053, BasicBlockSignatureTracker # imm = 0x7D35
	movw	$1241, RunTimeSignatureAdjuster # imm = 0x4D9
	jmp	.LBB55_129
.LBB55_115:                             #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$464, %ax               # imm = 0x1D0
	cmpw	$32061, %ax             # imm = 0x7D3D
	jne	.LBB55_131
# %bb.116:                              # %BZ2_bzRead.split356
                                        #   in Loop: Header=BB55_55 Depth=1
	movq	(%rbx), %rax
	movl	5048(%rax), %eax
	movw	$32061, BasicBlockSignatureTracker # imm = 0x7D3D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB55_127
# %bb.117:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$124, %ax
	cmpw	$32065, %ax             # imm = 0x7D41
	jne	.LBB55_132
# %bb.118:                              # %BZ2_bzRead.split366
	movq	(%r15), %rax
	movw	$32065, BasicBlockSignatureTracker # imm = 0x7D41
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_121
# %bb.119:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$32071, %ax             # imm = 0x7D47
	jne	.LBB55_132
# %bb.120:                              # %BZ2_bzRead.split370
	movq	(%r15), %rax
	movl	$0, (%rax)
	movw	$32071, BasicBlockSignatureTracker # imm = 0x7D47
	movw	$6, RunTimeSignatureAdjuster
.LBB55_121:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$32126, %ax             # imm = 0x7D7E
	movq	%rbx, %rax
	jne	.LBB55_132
# %bb.122:                              # %BZ2_bzRead.split372
	movq	(%rax), %rax
	movw	$32126, BasicBlockSignatureTracker # imm = 0x7D7E
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB55_125
# %bb.123:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$248, %ax
	cmpw	$32134, %ax             # imm = 0x7D86
	jne	.LBB55_132
# %bb.124:                              # %BZ2_bzRead.split374
	movq	(%rbx), %rax
	movl	$0, 5096(%rax)
	movw	$32134, BasicBlockSignatureTracker # imm = 0x7D86
	movw	$248, RunTimeSignatureAdjuster
.LBB55_125:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$242, %ax
	xorw	%cx, %ax
	cmpw	$32140, %ax             # imm = 0x7D8C
	movq	-48(%rbp), %r8          # 8-byte Reload
	jne	.LBB55_132
# %bb.126:                              # %BZ2_bzRead.split376
	movl	(%r12), %eax
	movl	%eax, (%r8)
	movw	$32140, BasicBlockSignatureTracker # imm = 0x7D8C
	movw	$1120, RunTimeSignatureAdjuster # imm = 0x460
	jmp	.LBB55_129
.LBB55_127:                             #   in Loop: Header=BB55_55 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$162, %ax
	cmpw	$32159, %ax             # imm = 0x7D9F
	jne	.LBB55_131
# %bb.128:                              # %BZ2_bzRead.split368
                                        #   in Loop: Header=BB55_55 Depth=1
	movw	$32159, BasicBlockSignatureTracker # imm = 0x7D9F
	movw	$1791, RunTimeSignatureAdjuster # imm = 0x6FF
	jmp	.LBB55_55
.LBB55_129:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1094, %ax              # imm = 0x446
	xorw	%cx, %ax
	cmpw	$32170, %ax             # imm = 0x7DAA
	jne	.LBB55_132
# %bb.130:                              # %BZ2_bzRead.split288
	movl	(%r8), %eax
	movw	$32170, BasicBlockSignatureTracker # imm = 0x7DAA
	movw	$19269, RunTimeSignatureAdjuster # imm = 0x4B45
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB55_131:                             # %CFerrorHandler.BZ2_bzRead.loopexit
	jmp	.LBB55_132
.LBB55_132:                             # %CFerrorHandler.BZ2_bzRead
	callq	FAULT_DETECTED_CFC
.Lfunc_end55:
	.size	BZ2_bzRead, .Lfunc_end55-BZ2_bzRead
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.39
	.type	myfeof.39,@function
myfeof.39:                              # @myfeof.39
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1750, %ax              # imm = 0x6D6
	xorw	%cx, %ax
	cmpw	$32188, %ax             # imm = 0x7DBC
	jne	.LBB56_9
# %bb.1:                                # %myfeof.39.split19
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1750, %ax              # imm = 0x6D6
	xorw	%cx, %ax
	cmpw	$32188, %ax             # imm = 0x7DBC
	jne	.LBB56_9
# %bb.2:                                # %myfeof.39.split
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movl	%edi, (%r15)
	movl	(%r15), %edi
	movw	$32188, BasicBlockSignatureTracker # imm = 0x7DBC
	movw	$19613, RunTimeSignatureAdjuster # imm = 0x4C9D
	callq	spec_getc
	movw	$32188, BasicBlockSignatureTracker # imm = 0x7DBC
	movw	$19613, RunTimeSignatureAdjuster # imm = 0x4C9D
	movl	%eax, (%rbx)
	movl	(%rbx), %eax
	movw	$32188, BasicBlockSignatureTracker # imm = 0x7DBC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$-1, %eax
	jne	.LBB56_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$122, %ax
	cmpw	$32198, %ax             # imm = 0x7DC6
	jne	.LBB56_9
# %bb.4:                                # %myfeof.39.split21
	movb	$1, (%r14)
	movw	$32198, BasicBlockSignatureTracker # imm = 0x7DC6
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB56_7
.LBB56_5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$92, %ax
	cmpw	$32224, %ax             # imm = 0x7DE0
	jne	.LBB56_9
# %bb.6:                                # %myfeof.39.split23
	movl	(%rbx), %eax
	movl	(%r15), %esi
	movw	$32224, BasicBlockSignatureTracker # imm = 0x7DE0
	movw	$19677, RunTimeSignatureAdjuster # imm = 0x4CDD
	movzbl	%al, %edi
	callq	spec_ungetc
	movw	$32224, BasicBlockSignatureTracker # imm = 0x7DE0
	movw	$19677, RunTimeSignatureAdjuster # imm = 0x4CDD
	movb	$0, (%r14)
	movw	$32224, BasicBlockSignatureTracker # imm = 0x7DE0
	movw	$38, RunTimeSignatureAdjuster
.LBB56_7:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$57, %ax
	xorw	%cx, %ax
	cmpw	$32255, %ax             # imm = 0x7DFF
	jne	.LBB56_9
# %bb.8:                                # %myfeof.39.split25
	movb	(%r14), %al
	movw	$32255, BasicBlockSignatureTracker # imm = 0x7DFF
	movw	$1688, RunTimeSignatureAdjuster # imm = 0x698
	movzbl	%al, %eax
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB56_9:                               # %CFerrorHandler.myfeof.39
	callq	FAULT_DETECTED_CFC
.Lfunc_end56:
	.size	myfeof.39, .Lfunc_end56-myfeof.39
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused     # -- Begin function BZ2_bzReadGetUnused
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused,@function
BZ2_bzReadGetUnused:                    # @BZ2_bzReadGetUnused
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %r8w
	xorw	$18794, %ax             # imm = 0x496A
	xorw	%r8w, %ax
	cmpw	$32258, %ax             # imm = 0x7E02
	jne	.LBB57_52
# %bb.1:                                # %BZ2_bzReadGetUnused.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rdi, (%r9)
	movq	%rsi, (%rax)
	movq	%rdx, (%r10)
	movq	%rcx, (%r11)
	movq	(%rax), %rax
	movq	%rax, (%r8)
	movq	(%r8), %rax
	movw	$32258, BasicBlockSignatureTracker # imm = 0x7E02
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB57_12
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$32259, %ax             # imm = 0x7E03
	jne	.LBB57_52
# %bb.3:                                # %BZ2_bzReadGetUnused.split100
	movq	(%r9), %rax
	movw	$32259, BasicBlockSignatureTracker # imm = 0x7E03
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$32261, %ax             # imm = 0x7E05
	jne	.LBB57_52
# %bb.5:                                # %BZ2_bzReadGetUnused.split104
	movq	(%r9), %rax
	movl	$-2, (%rax)
	movw	$32261, BasicBlockSignatureTracker # imm = 0x7E05
	movw	$6, RunTimeSignatureAdjuster
.LBB57_6:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32, %ax
	xorw	%cx, %ax
	cmpw	$32291, %ax             # imm = 0x7E23
	jne	.LBB57_52
# %bb.7:                                # %BZ2_bzReadGetUnused.split106
	movq	(%r8), %rax
	movw	$32291, BasicBlockSignatureTracker # imm = 0x7E23
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$32307, %ax             # imm = 0x7E33
	jne	.LBB57_52
# %bb.9:                                # %BZ2_bzReadGetUnused.split108
	movq	(%r8), %rax
	movl	$-2, 5096(%rax)
	movw	$32307, BasicBlockSignatureTracker # imm = 0x7E33
	movw	$16, RunTimeSignatureAdjuster
.LBB57_10:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$98, %ax
	xorw	%cx, %ax
	cmpw	$32321, %ax             # imm = 0x7E41
	jne	.LBB57_52
# %bb.11:                               # %BZ2_bzReadGetUnused.split110
	movw	$32321, BasicBlockSignatureTracker # imm = 0x7E41
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB57_50
.LBB57_12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$87, %ax
	cmpw	$32341, %ax             # imm = 0x7E55
	jne	.LBB57_52
# %bb.13:                               # %BZ2_bzReadGetUnused.split102
	movq	(%r8), %rax
	movl	5096(%rax), %eax
	movw	$32341, BasicBlockSignatureTracker # imm = 0x7E55
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	je	.LBB57_24
# %bb.14:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$32346, %ax             # imm = 0x7E5A
	jne	.LBB57_52
# %bb.15:                               # %BZ2_bzReadGetUnused.split114
	movq	(%r9), %rax
	movw	$32346, BasicBlockSignatureTracker # imm = 0x7E5A
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_18
# %bb.16:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$32354, %ax             # imm = 0x7E62
	jne	.LBB57_52
# %bb.17:                               # %BZ2_bzReadGetUnused.split118
	movq	(%r9), %rax
	movl	$-1, (%rax)
	movw	$32354, BasicBlockSignatureTracker # imm = 0x7E62
	movw	$56, RunTimeSignatureAdjuster
.LBB57_18:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$48, %ax
	xorw	%cx, %ax
	cmpw	$32362, %ax             # imm = 0x7E6A
	jne	.LBB57_52
# %bb.19:                               # %BZ2_bzReadGetUnused.split120
	movq	(%r8), %rax
	movw	$32362, BasicBlockSignatureTracker # imm = 0x7E6A
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_22
# %bb.20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$32372, %ax             # imm = 0x7E74
	jne	.LBB57_52
# %bb.21:                               # %BZ2_bzReadGetUnused.split122
	movq	(%r8), %rax
	movl	$-1, 5096(%rax)
	movw	$32372, BasicBlockSignatureTracker # imm = 0x7E74
	movw	$30, RunTimeSignatureAdjuster
.LBB57_22:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$32374, %ax             # imm = 0x7E76
	jne	.LBB57_52
# %bb.23:                               # %BZ2_bzReadGetUnused.split124
	movw	$32374, BasicBlockSignatureTracker # imm = 0x7E76
	movw	$55, RunTimeSignatureAdjuster
	jmp	.LBB57_50
.LBB57_24:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$208, %ax
	cmpw	$32389, %ax             # imm = 0x7E85
	jne	.LBB57_52
# %bb.25:                               # %BZ2_bzReadGetUnused.split116
	movq	(%r10), %rax
	movw	$32389, BasicBlockSignatureTracker # imm = 0x7E85
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$32468, %ax             # imm = 0x7ED4
	jne	.LBB57_52
# %bb.27:                               # %BZ2_bzReadGetUnused.split128
	movq	(%r11), %rax
	movw	$32468, BasicBlockSignatureTracker # imm = 0x7ED4
	movw	$81, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB57_38
.LBB57_28:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$114, %ax
	xorw	%cx, %ax
	cmpw	$32503, %ax             # imm = 0x7EF7
	jne	.LBB57_52
# %bb.29:                               # %BZ2_bzReadGetUnused.split126
	movq	(%r9), %rax
	movw	$32503, BasicBlockSignatureTracker # imm = 0x7EF7
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_32
# %bb.30:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$511, %ax               # imm = 0x1FF
	cmpw	$32520, %ax             # imm = 0x7F08
	jne	.LBB57_52
# %bb.31:                               # %BZ2_bzReadGetUnused.split132
	movq	(%r9), %rax
	movl	$-2, (%rax)
	movw	$32520, BasicBlockSignatureTracker # imm = 0x7F08
	movw	$511, RunTimeSignatureAdjuster # imm = 0x1FF
.LBB57_32:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$485, %ax               # imm = 0x1E5
	xorw	%cx, %ax
	cmpw	$32530, %ax             # imm = 0x7F12
	jne	.LBB57_52
# %bb.33:                               # %BZ2_bzReadGetUnused.split134
	movq	(%r8), %rax
	movw	$32530, BasicBlockSignatureTracker # imm = 0x7F12
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_36
# %bb.34:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$32537, %ax             # imm = 0x7F19
	jne	.LBB57_52
# %bb.35:                               # %BZ2_bzReadGetUnused.split136
	movq	(%r8), %rax
	movl	$-2, 5096(%rax)
	movw	$32537, BasicBlockSignatureTracker # imm = 0x7F19
	movw	$11, RunTimeSignatureAdjuster
.LBB57_36:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$86, %ax
	xorw	%cx, %ax
	cmpw	$32580, %ax             # imm = 0x7F44
	jne	.LBB57_52
# %bb.37:                               # %BZ2_bzReadGetUnused.split138
	movw	$32580, BasicBlockSignatureTracker # imm = 0x7F44
	movw	$261, RunTimeSignatureAdjuster # imm = 0x105
	jmp	.LBB57_50
.LBB57_38:                              # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-11274, %ax            # imm = 0xD3F6
	cmpw	$-21214, %ax            # imm = 0xAD22
	jne	.LBB57_52
# %bb.39:                               # %BZ2_bzReadGetUnused.split130
	movw	$-21214, BasicBlockSignatureTracker # imm = 0xAD22
	movw	$-11274, RunTimeSignatureAdjuster # imm = 0xD3F6
# %bb.40:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$409, %ax               # imm = 0x199
	xorw	%cx, %ax
	cmpw	$32589, %ax             # imm = 0x7F4D
	jne	.LBB57_52
# %bb.41:                               # %BZ2_bzReadGetUnused.split148
	movq	(%r9), %rax
	movw	$32589, BasicBlockSignatureTracker # imm = 0x7F4D
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_44
# %bb.42:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$32595, %ax             # imm = 0x7F53
	jne	.LBB57_52
# %bb.43:                               # %BZ2_bzReadGetUnused.split140
	movq	(%r9), %rax
	movl	$0, (%rax)
	movw	$32595, BasicBlockSignatureTracker # imm = 0x7F53
	movw	$30, RunTimeSignatureAdjuster
.LBB57_44:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$234, %ax
	xorw	%cx, %ax
	cmpw	$32679, %ax             # imm = 0x7FA7
	jne	.LBB57_52
# %bb.45:                               # %BZ2_bzReadGetUnused.split142
	movq	(%r8), %rax
	movw	$32679, BasicBlockSignatureTracker # imm = 0x7FA7
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB57_48
# %bb.46:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$32694, %ax             # imm = 0x7FB6
	jne	.LBB57_52
# %bb.47:                               # %BZ2_bzReadGetUnused.split144
	movq	(%r8), %rax
	movl	$0, 5096(%rax)
	movw	$32694, BasicBlockSignatureTracker # imm = 0x7FB6
	movw	$17, RunTimeSignatureAdjuster
.LBB57_48:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$119, %ax
	xorw	%cx, %ax
	cmpw	$32720, %ax             # imm = 0x7FD0
	jne	.LBB57_52
# %bb.49:                               # %BZ2_bzReadGetUnused.split146
	movq	(%r8), %rax
	movl	5024(%rax), %eax
	movq	(%r11), %rcx
	movl	%eax, (%rcx)
	movq	(%r8), %rax
	movq	5016(%rax), %rax
	movq	(%r10), %rcx
	movq	%rax, (%rcx)
	movw	$32720, BasicBlockSignatureTracker # imm = 0x7FD0
	movw	$401, RunTimeSignatureAdjuster # imm = 0x191
.LBB57_50:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$407, %ax               # imm = 0x197
	xorw	%cx, %ax
	cmpw	$32726, %ax             # imm = 0x7FD6
	jne	.LBB57_52
# %bb.51:                               # %BZ2_bzReadGetUnused.split112
	movw	$32726, BasicBlockSignatureTracker # imm = 0x7FD6
	movw	$18564, RunTimeSignatureAdjuster # imm = 0x4884
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB57_52:                              # %CFerrorHandler.BZ2_bzReadGetUnused
	callq	FAULT_DETECTED_CFC
.Lfunc_end57:
	.size	BZ2_bzReadGetUnused, .Lfunc_end57-BZ2_bzReadGetUnused
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress # -- Begin function BZ2_bzBuffToBuffCompress
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress,@function
BZ2_bzBuffToBuffCompress:               # @BZ2_bzBuffToBuffCompress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movl	16(%rbp), %eax
	movq	%rdi, -48(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -16(%rbp)
	movl	%r9d, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$32740, BasicBlockSignatureTracker # imm = 0x7FE4
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB58_31
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-85, %ax
	cmpw	$-32689, %ax            # imm = 0x804F
	jne	.LBB58_59
# %bb.2:                                # %BZ2_bzBuffToBuffCompress.split114
	movq	-24(%rbp), %rax
	movw	$-32689, BasicBlockSignatureTracker # imm = 0x804F
	movw	$-85, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB58_31
# %bb.3:                                # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23743, %ax             # imm = 0x5CBF
	cmpw	$-8976, %ax             # imm = 0xDCF0
	jne	.LBB58_59
# %bb.4:                                # %BZ2_bzBuffToBuffCompress.split116
	movw	$-8976, BasicBlockSignatureTracker # imm = 0xDCF0
	movw	$23743, RunTimeSignatureAdjuster # imm = 0x5CBF
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$21, %ax
	xorw	%cx, %ax
	cmpw	$-32678, %ax            # imm = 0x805A
	jne	.LBB58_59
# %bb.6:                                # %BZ2_bzBuffToBuffCompress.split154
	movq	-40(%rbp), %rax
	movw	$-32678, BasicBlockSignatureTracker # imm = 0x805A
	movw	$-66, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB58_31
# %bb.7:                                # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-16569, %ax            # imm = 0xBF47
	cmpw	$16157, %ax             # imm = 0x3F1D
	jne	.LBB58_59
# %bb.8:                                # %BZ2_bzBuffToBuffCompress.split118
	movw	$16157, BasicBlockSignatureTracker # imm = 0x3F1D
	movw	$-16569, RunTimeSignatureAdjuster # imm = 0xBF47
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$220, %ax
	xorw	%cx, %ax
	cmpw	$-32634, %ax            # imm = 0x8086
	jne	.LBB58_59
# %bb.10:                               # %BZ2_bzBuffToBuffCompress.split156
	movl	-16(%rbp), %eax
	movw	$-32634, BasicBlockSignatureTracker # imm = 0x8086
	movw	$-158, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB58_31
# %bb.11:                               # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-23533, %ax            # imm = 0xA413
	cmpw	$9365, %ax              # imm = 0x2495
	jne	.LBB58_59
# %bb.12:                               # %BZ2_bzBuffToBuffCompress.split120
	movw	$9365, BasicBlockSignatureTracker # imm = 0x2495
	movw	$-23533, RunTimeSignatureAdjuster # imm = 0xA413
# %bb.13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$-32631, %ax            # imm = 0x8089
	jne	.LBB58_59
# %bb.14:                               # %BZ2_bzBuffToBuffCompress.split158
	movl	-16(%rbp), %eax
	movw	$-32631, BasicBlockSignatureTracker # imm = 0x8089
	movw	$-147, RunTimeSignatureAdjuster
	cmpl	$9, %eax
	jg	.LBB58_31
# %bb.15:                               # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19629, %ax             # imm = 0x4CAD
	cmpw	$-13276, %ax            # imm = 0xCC24
	jne	.LBB58_59
# %bb.16:                               # %BZ2_bzBuffToBuffCompress.split122
	movw	$-13276, BasicBlockSignatureTracker # imm = 0xCC24
	movw	$19629, RunTimeSignatureAdjuster # imm = 0x4CAD
# %bb.17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3, %ax
	xorw	%cx, %ax
	cmpw	$-32630, %ax            # imm = 0x808A
	jne	.LBB58_59
# %bb.18:                               # %BZ2_bzBuffToBuffCompress.split160
	movl	-12(%rbp), %eax
	movw	$-32630, BasicBlockSignatureTracker # imm = 0x808A
	movw	$-146, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB58_31
# %bb.19:                               # %Buffer__4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-19323, %ax            # imm = 0xB485
	cmpw	$13327, %ax             # imm = 0x340F
	jne	.LBB58_59
# %bb.20:                               # %BZ2_bzBuffToBuffCompress.split124
	movw	$13327, BasicBlockSignatureTracker # imm = 0x340F
	movw	$-19323, RunTimeSignatureAdjuster # imm = 0xB485
# %bb.21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$66, %ax
	xorw	%cx, %ax
	cmpw	$-32568, %ax            # imm = 0x80C8
	jne	.LBB58_59
# %bb.22:                               # %BZ2_bzBuffToBuffCompress.split162
	movl	-12(%rbp), %eax
	movw	$-32568, BasicBlockSignatureTracker # imm = 0x80C8
	movw	$-212, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jg	.LBB58_31
# %bb.23:                               # %Buffer__5
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5854, %ax              # imm = 0x16DE
	cmpw	$-27114, %ax            # imm = 0x9616
	jne	.LBB58_59
# %bb.24:                               # %BZ2_bzBuffToBuffCompress.split126
	movw	$-27114, BasicBlockSignatureTracker # imm = 0x9616
	movw	$5854, RunTimeSignatureAdjuster # imm = 0x16DE
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$-32552, %ax            # imm = 0x80D8
	jne	.LBB58_59
# %bb.26:                               # %BZ2_bzBuffToBuffCompress.split164
	movl	16(%rbp), %eax
	movw	$-32552, BasicBlockSignatureTracker # imm = 0x80D8
	movw	$-196, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB58_31
# %bb.27:                               # %Buffer__6
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1631, %ax              # imm = 0x65F
	cmpw	$-31097, %ax            # imm = 0x8687
	jne	.LBB58_59
# %bb.28:                               # %BZ2_bzBuffToBuffCompress.split128
	movw	$-31097, BasicBlockSignatureTracker # imm = 0x8687
	movw	$1631, RunTimeSignatureAdjuster # imm = 0x65F
# %bb.29:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$-32527, %ax            # imm = 0x80F1
	jne	.LBB58_59
# %bb.30:                               # %BZ2_bzBuffToBuffCompress.split166
	movl	16(%rbp), %eax
	movw	$-32527, BasicBlockSignatureTracker # imm = 0x80F1
	movw	$-235, RunTimeSignatureAdjuster
	cmpl	$250, %eax
	jle	.LBB58_33
.LBB58_31:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-282, %ax              # imm = 0xFEE6
	xorw	%cx, %ax
	cmpw	$-32510, %ax            # imm = 0x8102
	jne	.LBB58_59
# %bb.32:                               # %BZ2_bzBuffToBuffCompress.split
	movl	$-2, -8(%rbp)
	movw	$-32510, BasicBlockSignatureTracker # imm = 0x8102
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB58_57
.LBB58_33:                              # %Buffer__7
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-25162, %ax            # imm = 0x9DB6
	cmpw	$7495, %ax              # imm = 0x1D47
	jne	.LBB58_59
# %bb.34:                               # %BZ2_bzBuffToBuffCompress.split130
	movw	$7495, BasicBlockSignatureTracker # imm = 0x1D47
	movw	$-25162, RunTimeSignatureAdjuster # imm = 0x9DB6
# %bb.35:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$505, %ax               # imm = 0x1F9
	xorw	%cx, %ax
	cmpw	$-32504, %ax            # imm = 0x8108
	jne	.LBB58_59
# %bb.36:                               # %BZ2_bzBuffToBuffCompress.split168
	movl	16(%rbp), %eax
	movw	$-32504, BasicBlockSignatureTracker # imm = 0x8108
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB58_39
# %bb.37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-32496, %ax            # imm = 0x8110
	jne	.LBB58_59
# %bb.38:                               # %BZ2_bzBuffToBuffCompress.split134
	movl	$30, 16(%rbp)
	movw	$-32496, BasicBlockSignatureTracker # imm = 0x8110
	movw	$24, RunTimeSignatureAdjuster
.LBB58_39:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$20, %ax
	xorw	%cx, %ax
	cmpw	$-32484, %ax            # imm = 0x811C
	jne	.LBB58_59
# %bb.40:                               # %BZ2_bzBuffToBuffCompress.split136
	leaq	-128(%rbp), %rdi
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	16(%rbp), %ecx
	movw	$-32484, BasicBlockSignatureTracker # imm = 0x811C
	movw	$-15897, RunTimeSignatureAdjuster # imm = 0xC1E7
	callq	BZ2_bzCompressInit
	movw	$-32484, BasicBlockSignatureTracker # imm = 0x811C
	movw	$-15897, RunTimeSignatureAdjuster # imm = 0xC1E7
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movw	$-32484, BasicBlockSignatureTracker # imm = 0x811C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB58_43
# %bb.41:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$-32474, %ax            # imm = 0x8126
	jne	.LBB58_59
# %bb.42:                               # %BZ2_bzBuffToBuffCompress.split138
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movw	$-32474, BasicBlockSignatureTracker # imm = 0x8126
	movw	$36, RunTimeSignatureAdjuster
	jmp	.LBB58_57
.LBB58_43:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$-32468, %ax            # imm = 0x812C
	jne	.LBB58_59
# %bb.44:                               # %BZ2_bzBuffToBuffCompress.split140
	leaq	-128(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -96(%rbp)
	movw	$-32468, BasicBlockSignatureTracker # imm = 0x812C
	movw	$-5322, RunTimeSignatureAdjuster # imm = 0xEB36
	movl	$2, %esi
	callq	BZ2_bzCompress
	movw	$-32468, BasicBlockSignatureTracker # imm = 0x812C
	movw	$-5322, RunTimeSignatureAdjuster # imm = 0xEB36
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movw	$-32468, BasicBlockSignatureTracker # imm = 0x812C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jne	.LBB58_47
# %bb.45:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-32453, %ax            # imm = 0x813B
	jne	.LBB58_59
# %bb.46:                               # %BZ2_bzBuffToBuffCompress.split142
	movw	$-32453, BasicBlockSignatureTracker # imm = 0x813B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB58_53
.LBB58_47:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$126, %ax
	cmpw	$-32430, %ax            # imm = 0x8152
	jne	.LBB58_59
# %bb.48:                               # %BZ2_bzBuffToBuffCompress.split144
	movl	-4(%rbp), %eax
	movw	$-32430, BasicBlockSignatureTracker # imm = 0x8152
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	je	.LBB58_51
# %bb.49:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-32429, %ax            # imm = 0x8153
	jne	.LBB58_59
# %bb.50:                               # %BZ2_bzBuffToBuffCompress.split148
	movw	$-32429, BasicBlockSignatureTracker # imm = 0x8153
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB58_55
.LBB58_51:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$192, %ax
	cmpw	$-32366, %ax            # imm = 0x8192
	jne	.LBB58_59
# %bb.52:                               # %BZ2_bzBuffToBuffCompress.split150
	leaq	-128(%rbp), %rdi
	movl	-96(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	movw	$-32366, BasicBlockSignatureTracker # imm = 0x8192
	movw	$-3428, RunTimeSignatureAdjuster # imm = 0xF29C
	callq	BZ2_bzCompressEnd
	movw	$-32366, BasicBlockSignatureTracker # imm = 0x8192
	movw	$-3428, RunTimeSignatureAdjuster # imm = 0xF29C
	movl	$0, -8(%rbp)
	movw	$-32366, BasicBlockSignatureTracker # imm = 0x8192
	movw	$144, RunTimeSignatureAdjuster
	jmp	.LBB58_57
.LBB58_53:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$238, %ax
	cmpw	$-32299, %ax            # imm = 0x81D5
	jne	.LBB58_59
# %bb.54:                               # %BZ2_bzBuffToBuffCompress.split146
	leaq	-128(%rbp), %rdi
	movw	$-32299, BasicBlockSignatureTracker # imm = 0x81D5
	movw	$-3365, RunTimeSignatureAdjuster # imm = 0xF2DB
	callq	BZ2_bzCompressEnd
	movw	$-32299, BasicBlockSignatureTracker # imm = 0x81D5
	movw	$-3365, RunTimeSignatureAdjuster # imm = 0xF2DB
	movl	$-8, -8(%rbp)
	movw	$-32299, BasicBlockSignatureTracker # imm = 0x81D5
	movw	$215, RunTimeSignatureAdjuster
	jmp	.LBB58_57
.LBB58_55:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$136, %ax
	cmpw	$-32293, %ax            # imm = 0x81DB
	jne	.LBB58_59
# %bb.56:                               # %BZ2_bzBuffToBuffCompress.split152
	leaq	-128(%rbp), %rdi
	movw	$-32293, BasicBlockSignatureTracker # imm = 0x81DB
	movw	$-3371, RunTimeSignatureAdjuster # imm = 0xF2D5
	callq	BZ2_bzCompressEnd
	movw	$-32293, BasicBlockSignatureTracker # imm = 0x81DB
	movw	$-3371, RunTimeSignatureAdjuster # imm = 0xF2D5
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movw	$-32293, BasicBlockSignatureTracker # imm = 0x81DB
	movw	$217, RunTimeSignatureAdjuster
.LBB58_57:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$793, %ax               # imm = 0x319
	xorw	%cx, %ax
	cmpw	$-32229, %ax            # imm = 0x821B
	jne	.LBB58_59
# %bb.58:                               # %BZ2_bzBuffToBuffCompress.split132
	movl	-8(%rbp), %eax
	movw	$-32229, BasicBlockSignatureTracker # imm = 0x821B
	movw	$0, RunTimeSignatureAdjuster
	addq	$128, %rsp
	popq	%rbp
	retq
.LBB58_59:                              # %CFerrorHandler.BZ2_bzBuffToBuffCompress
	callq	FAULT_DETECTED_CFC
.Lfunc_end58:
	.size	BZ2_bzBuffToBuffCompress, .Lfunc_end58-BZ2_bzBuffToBuffCompress
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress # -- Begin function BZ2_bzBuffToBuffDecompress
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress,@function
BZ2_bzBuffToBuffDecompress:             # @BZ2_bzBuffToBuffDecompress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -48(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -16(%rbp)
	movl	%r9d, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-32198, BasicBlockSignatureTracker # imm = 0x823A
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB59_21
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-32194, %ax            # imm = 0x823E
	jne	.LBB59_49
# %bb.2:                                # %BZ2_bzBuffToBuffDecompress.split88
	movq	-24(%rbp), %rax
	movw	$-32194, BasicBlockSignatureTracker # imm = 0x823E
	movw	$4, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB59_21
# %bb.3:                                # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18690, %ax             # imm = 0x4902
	cmpw	$-13508, %ax            # imm = 0xCB3C
	jne	.LBB59_49
# %bb.4:                                # %BZ2_bzBuffToBuffDecompress.split90
	movw	$-13508, BasicBlockSignatureTracker # imm = 0xCB3C
	movw	$18690, RunTimeSignatureAdjuster # imm = 0x4902
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$88, %ax
	xorw	%cx, %ax
	cmpw	$-32154, %ax            # imm = 0x8266
	jne	.LBB59_49
# %bb.6:                                # %BZ2_bzBuffToBuffDecompress.split126
	movq	-40(%rbp), %rax
	movw	$-32154, BasicBlockSignatureTracker # imm = 0x8266
	movw	$92, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB59_21
# %bb.7:                                # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11353, %ax             # imm = 0x2C59
	cmpw	$-20929, %ax            # imm = 0xAE3F
	jne	.LBB59_49
# %bb.8:                                # %BZ2_bzBuffToBuffDecompress.split92
	movw	$-20929, BasicBlockSignatureTracker # imm = 0xAE3F
	movw	$11353, RunTimeSignatureAdjuster # imm = 0x2C59
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$23, %ax
	xorw	%cx, %ax
	cmpw	$-32143, %ax            # imm = 0x8271
	jne	.LBB59_49
# %bb.10:                               # %BZ2_bzBuffToBuffDecompress.split128
	movl	-16(%rbp), %eax
	movw	$-32143, BasicBlockSignatureTracker # imm = 0x8271
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB59_13
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$-32137, %ax            # imm = 0x8277
	jne	.LBB59_49
# %bb.12:                               # %BZ2_bzBuffToBuffDecompress.split94
	movl	-16(%rbp), %eax
	movw	$-32137, BasicBlockSignatureTracker # imm = 0x8277
	movw	$6, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB59_19
.LBB59_13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$239, %ax
	xorw	%cx, %ax
	cmpw	$-32098, %ax            # imm = 0x829E
	jne	.LBB59_49
# %bb.14:                               # %BZ2_bzBuffToBuffDecompress.split96
	movl	-12(%rbp), %eax
	movw	$-32098, BasicBlockSignatureTracker # imm = 0x829E
	movw	$164, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB59_21
# %bb.15:                               # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-28087, %ax            # imm = 0x9249
	cmpw	$4311, %ax              # imm = 0x10D7
	jne	.LBB59_49
# %bb.16:                               # %BZ2_bzBuffToBuffDecompress.split100
	movw	$4311, BasicBlockSignatureTracker # imm = 0x10D7
	movw	$-28087, RunTimeSignatureAdjuster # imm = 0x9249
# %bb.17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$-32086, %ax            # imm = 0x82AA
	jne	.LBB59_49
# %bb.18:                               # %BZ2_bzBuffToBuffDecompress.split130
	movl	-12(%rbp), %eax
	movw	$-32086, BasicBlockSignatureTracker # imm = 0x82AA
	movw	$144, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jg	.LBB59_21
	jmp	.LBB59_23
.LBB59_19:                              # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-3459, %ax             # imm = 0xF27D
	cmpw	$28682, %ax             # imm = 0x700A
	jne	.LBB59_49
# %bb.20:                               # %BZ2_bzBuffToBuffDecompress.split98
	movw	$28682, BasicBlockSignatureTracker # imm = 0x700A
	movw	$-3536, RunTimeSignatureAdjuster # imm = 0xF230
.LBB59_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$133, %ax
	xorw	%cx, %ax
	cmpw	$-32065, %ax            # imm = 0x82BF
	jne	.LBB59_49
# %bb.22:                               # %BZ2_bzBuffToBuffDecompress.split
	movl	$-2, -8(%rbp)
	movw	$-32065, BasicBlockSignatureTracker # imm = 0x82BF
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB59_47
.LBB59_23:                              # %Buffer__4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-3953, %ax             # imm = 0xF08F
	cmpw	$29221, %ax             # imm = 0x7225
	jne	.LBB59_49
# %bb.24:                               # %BZ2_bzBuffToBuffDecompress.split102
	movw	$29221, BasicBlockSignatureTracker # imm = 0x7225
	movw	$-3953, RunTimeSignatureAdjuster # imm = 0xF08F
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$111, %ax
	xorw	%cx, %ax
	cmpw	$-32059, %ax            # imm = 0x82C5
	jne	.LBB59_49
# %bb.26:                               # %BZ2_bzBuffToBuffDecompress.split132
	leaq	-128(%rbp), %rdi
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movw	$-32059, BasicBlockSignatureTracker # imm = 0x82C5
	movw	$-15810, RunTimeSignatureAdjuster # imm = 0xC23E
	callq	BZ2_bzDecompressInit
	movw	$-32059, BasicBlockSignatureTracker # imm = 0x82C5
	movw	$-15810, RunTimeSignatureAdjuster # imm = 0xC23E
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movw	$-32059, BasicBlockSignatureTracker # imm = 0x82C5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB59_29
# %bb.27:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-32051, %ax            # imm = 0x82CD
	jne	.LBB59_49
# %bb.28:                               # %BZ2_bzBuffToBuffDecompress.split106
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movw	$-32051, BasicBlockSignatureTracker # imm = 0x82CD
	movw	$114, RunTimeSignatureAdjuster
	jmp	.LBB59_47
.LBB59_29:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$455, %ax               # imm = 0x1C7
	cmpw	$-31998, %ax            # imm = 0x8302
	jne	.LBB59_49
# %bb.30:                               # %BZ2_bzBuffToBuffDecompress.split108
	leaq	-128(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -96(%rbp)
	movw	$-31998, BasicBlockSignatureTracker # imm = 0x8302
	movw	$-1922, RunTimeSignatureAdjuster # imm = 0xF87E
	callq	BZ2_bzDecompress
	movw	$-31998, BasicBlockSignatureTracker # imm = 0x8302
	movw	$-1922, RunTimeSignatureAdjuster # imm = 0xF87E
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movw	$-31998, BasicBlockSignatureTracker # imm = 0x8302
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB59_33
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-31974, %ax            # imm = 0x831A
	jne	.LBB59_49
# %bb.32:                               # %BZ2_bzBuffToBuffDecompress.split110
	movw	$-31974, BasicBlockSignatureTracker # imm = 0x831A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB59_39
.LBB59_33:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-31953, %ax            # imm = 0x832F
	jne	.LBB59_49
# %bb.34:                               # %BZ2_bzBuffToBuffDecompress.split112
	movl	-4(%rbp), %eax
	movw	$-31953, BasicBlockSignatureTracker # imm = 0x832F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	je	.LBB59_37
# %bb.35:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-31943, %ax            # imm = 0x8339
	jne	.LBB59_49
# %bb.36:                               # %BZ2_bzBuffToBuffDecompress.split116
	movw	$-31943, BasicBlockSignatureTracker # imm = 0x8339
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB59_45
.LBB59_37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$-31921, %ax            # imm = 0x834F
	jne	.LBB59_49
# %bb.38:                               # %BZ2_bzBuffToBuffDecompress.split118
	leaq	-128(%rbp), %rdi
	movl	-96(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	movw	$-31921, BasicBlockSignatureTracker # imm = 0x834F
	movw	$-1103, RunTimeSignatureAdjuster # imm = 0xFBB1
	callq	BZ2_bzDecompressEnd
	movw	$-31921, BasicBlockSignatureTracker # imm = 0x834F
	movw	$-1103, RunTimeSignatureAdjuster # imm = 0xFBB1
	movl	$0, -8(%rbp)
	movw	$-31921, BasicBlockSignatureTracker # imm = 0x834F
	movw	$496, RunTimeSignatureAdjuster # imm = 0x1F0
	jmp	.LBB59_47
.LBB59_39:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$72, %ax
	cmpw	$-31918, %ax            # imm = 0x8352
	jne	.LBB59_49
# %bb.40:                               # %BZ2_bzBuffToBuffDecompress.split114
	movl	-96(%rbp), %eax
	movw	$-31918, BasicBlockSignatureTracker # imm = 0x8352
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jbe	.LBB59_43
# %bb.41:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$-31901, %ax            # imm = 0x8363
	jne	.LBB59_49
# %bb.42:                               # %BZ2_bzBuffToBuffDecompress.split122
	leaq	-128(%rbp), %rdi
	movw	$-31901, BasicBlockSignatureTracker # imm = 0x8363
	movw	$-1123, RunTimeSignatureAdjuster # imm = 0xFB9D
	callq	BZ2_bzDecompressEnd
	movw	$-31901, BasicBlockSignatureTracker # imm = 0x8363
	movw	$-1123, RunTimeSignatureAdjuster # imm = 0xFB9D
	movl	$-7, -8(%rbp)
	movw	$-31901, BasicBlockSignatureTracker # imm = 0x8363
	movw	$476, RunTimeSignatureAdjuster # imm = 0x1DC
	jmp	.LBB59_47
.LBB59_43:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$217, %ax
	cmpw	$-31861, %ax            # imm = 0x838B
	jne	.LBB59_49
# %bb.44:                               # %BZ2_bzBuffToBuffDecompress.split124
	leaq	-128(%rbp), %rdi
	movw	$-31861, BasicBlockSignatureTracker # imm = 0x838B
	movw	$-1163, RunTimeSignatureAdjuster # imm = 0xFB75
	callq	BZ2_bzDecompressEnd
	movw	$-31861, BasicBlockSignatureTracker # imm = 0x838B
	movw	$-1163, RunTimeSignatureAdjuster # imm = 0xFB75
	movl	$-8, -8(%rbp)
	movw	$-31861, BasicBlockSignatureTracker # imm = 0x838B
	movw	$308, RunTimeSignatureAdjuster # imm = 0x134
	jmp	.LBB59_47
.LBB59_45:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$152, %ax
	cmpw	$-31839, %ax            # imm = 0x83A1
	jne	.LBB59_49
# %bb.46:                               # %BZ2_bzBuffToBuffDecompress.split120
	leaq	-128(%rbp), %rdi
	movw	$-31839, BasicBlockSignatureTracker # imm = 0x83A1
	movw	$-1185, RunTimeSignatureAdjuster # imm = 0xFB5F
	callq	BZ2_bzDecompressEnd
	movw	$-31839, BasicBlockSignatureTracker # imm = 0x83A1
	movw	$-1185, RunTimeSignatureAdjuster # imm = 0xFB5F
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movw	$-31839, BasicBlockSignatureTracker # imm = 0x83A1
	movw	$286, RunTimeSignatureAdjuster # imm = 0x11E
.LBB59_47:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$277, %ax               # imm = 0x115
	xorw	%cx, %ax
	cmpw	$-31830, %ax            # imm = 0x83AA
	jne	.LBB59_49
# %bb.48:                               # %BZ2_bzBuffToBuffDecompress.split104
	movl	-8(%rbp), %eax
	movw	$-31830, BasicBlockSignatureTracker # imm = 0x83AA
	movw	$0, RunTimeSignatureAdjuster
	addq	$128, %rsp
	popq	%rbp
	retq
.LBB59_49:                              # %CFerrorHandler.BZ2_bzBuffToBuffDecompress
	callq	FAULT_DETECTED_CFC
.Lfunc_end59:
	.size	BZ2_bzBuffToBuffDecompress, .Lfunc_end59-BZ2_bzBuffToBuffDecompress
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzopen              # -- Begin function BZ2_bzopen
	.p2align	4, 0x90
	.type	BZ2_bzopen,@function
BZ2_bzopen:                             # @BZ2_bzopen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movw	$-31761, BasicBlockSignatureTracker # imm = 0x83EF
	movw	$0, RunTimeSignatureAdjuster
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	bzopen_or_bzdopen
	movw	$-31761, BasicBlockSignatureTracker # imm = 0x83EF
	movw	$0, RunTimeSignatureAdjuster
	movw	$-31761, BasicBlockSignatureTracker # imm = 0x83EF
	movw	$0, RunTimeSignatureAdjuster
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end60:
	.size	BZ2_bzopen, .Lfunc_end60-BZ2_bzopen
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen
	.type	bzopen_or_bzdopen,@function
bzopen_or_bzdopen:                      # @bzopen_or_bzdopen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$2030, %ax              # imm = 0x7EE
	xorw	%bx, %ax
	cmpw	$-31743, %ax            # imm = 0x8401
	jne	.LBB61_78
# %bb.1:                                # %bzopen_or_bzdopen.split211
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$2030, %ax              # imm = 0x7EE
	xorw	%bx, %ax
	cmpw	$-31743, %ax            # imm = 0x8401
	jne	.LBB61_78
# %bb.2:                                # %bzopen_or_bzdopen.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movl	%ecx, -56(%rbp)         # 4-byte Spill
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -88(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %rax
	addq	$-5008, %rax            # imm = 0xEC70
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rdi, %rcx
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -136(%rbp)        # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%r10, -96(%rbp)         # 8-byte Spill
	movq	%rcx, (%r10)
	movl	%esi, (%r8)
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%r11, -80(%rbp)         # 8-byte Spill
	movl	-56(%rbp), %ecx         # 4-byte Reload
	movl	%ecx, (%r11)
	movq	%r9, -64(%rbp)          # 8-byte Spill
	movl	$9, (%r9)
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	$0, (%rax)
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	%r15, -48(%rbp)         # 8-byte Spill
	movl	$0, (%r15)
	movq	-136(%rbp), %r15        # 8-byte Reload
	movq	$0, (%r15)
	movl	$0, (%rbx)
	movq	%r13, -104(%rbp)        # 8-byte Spill
	movl	$30, (%r13)
	movq	-128(%rbp), %r13        # 8-byte Reload
	movl	$0, (%r12)
	movl	$0, (%r14)
	movq	(%r13), %rax
	movw	$-31743, BasicBlockSignatureTracker # imm = 0x8401
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB61_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$-31710, %ax            # imm = 0x8422
	jne	.LBB61_78
# %bb.4:                                # %bzopen_or_bzdopen.split143
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movw	$-31710, BasicBlockSignatureTracker # imm = 0x8422
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB61_75
.LBB61_5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$-31682, %ax            # imm = 0x843E
	jne	.LBB61_78
# %bb.6:                                # %bzopen_or_bzdopen.split145
	movw	$-31682, BasicBlockSignatureTracker # imm = 0x843E
	movw	$0, RunTimeSignatureAdjuster
.LBB61_7:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$124, %ax
	xorw	%cx, %ax
	cmpw	$-31678, %ax            # imm = 0x8442
	jne	.LBB61_77
# %bb.8:                                # %bzopen_or_bzdopen.split149
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	(%r13), %rax
	movb	(%rax), %al
	movw	$-31678, BasicBlockSignatureTracker # imm = 0x8442
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB61_27
# %bb.9:                                #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-31660, %ax            # imm = 0x8454
	jne	.LBB61_77
# %bb.10:                               # %bzopen_or_bzdopen.split151
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	(%r13), %rax
	movsbl	(%rax), %eax
	movw	$-31660, BasicBlockSignatureTracker(%rip) # imm = 0x8454
	movw	$0, RunTimeSignatureAdjuster(%rip)
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB61_13
	jmp	.LBB61_11
.LBB61_11:                              # %bzopen_or_bzdopen.split151
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB61_17
	jmp	.LBB61_12
.LBB61_12:                              # %bzopen_or_bzdopen.split151
                                        #   in Loop: Header=BB61_7 Depth=1
	subl	$119, %eax
	je	.LBB61_15
	jmp	.LBB61_19
.LBB61_13:                              #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-31650, %ax            # imm = 0x845E
	jne	.LBB61_77
# %bb.14:                               # %bzopen_or_bzdopen.split157
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-31650, BasicBlockSignatureTracker # imm = 0x845E
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB61_25
.LBB61_15:                              #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$129, %ax
	cmpw	$-31531, %ax            # imm = 0x84D5
	jne	.LBB61_77
# %bb.16:                               # %bzopen_or_bzdopen.split159
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$1, (%rax)
	movw	$-31531, BasicBlockSignatureTracker # imm = 0x84D5
	movw	$139, RunTimeSignatureAdjuster
	jmp	.LBB61_25
.LBB61_17:                              #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$189, %ax
	cmpw	$-31511, %ax            # imm = 0x84E9
	jne	.LBB61_77
# %bb.18:                               # %bzopen_or_bzdopen.split161
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	$1, (%r12)
	movw	$-31511, BasicBlockSignatureTracker # imm = 0x84E9
	movw	$183, RunTimeSignatureAdjuster
	jmp	.LBB61_25
.LBB61_19:                              #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$377, %ax               # imm = 0x179
	cmpw	$-31443, %ax            # imm = 0x852D
	jne	.LBB61_77
# %bb.20:                               # %bzopen_or_bzdopen.split155
                                        #   in Loop: Header=BB61_7 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	(%r13), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	movw	$-31443, BasicBlockSignatureTracker # imm = 0x852D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB61_23
# %bb.21:                               #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$110, %ax
	cmpw	$-31421, %ax            # imm = 0x8543
	jne	.LBB61_77
# %bb.22:                               # %bzopen_or_bzdopen.split165
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	(%r13), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-31421, BasicBlockSignatureTracker # imm = 0x8543
	movw	$110, RunTimeSignatureAdjuster
.LBB61_23:                              #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$105, %ax
	xorw	%cx, %ax
	cmpw	$-31420, %ax            # imm = 0x8544
	jne	.LBB61_77
# %bb.24:                               # %bzopen_or_bzdopen.split167
                                        #   in Loop: Header=BB61_7 Depth=1
	movw	$-31420, BasicBlockSignatureTracker # imm = 0x8544
	movw	$282, RunTimeSignatureAdjuster # imm = 0x11A
.LBB61_25:                              #   in Loop: Header=BB61_7 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$306, %ax               # imm = 0x132
	xorw	%cx, %ax
	cmpw	$-31380, %ax            # imm = 0x856C
	jne	.LBB61_77
# %bb.26:                               # %bzopen_or_bzdopen.split163
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	(%r13), %rax
	addq	$1, %rax
	movq	%rax, (%r13)
	movw	$-31380, BasicBlockSignatureTracker # imm = 0x856C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	jmp	.LBB61_7
.LBB61_27:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$456, %ax               # imm = 0x1C8
	cmpw	$-31350, %ax            # imm = 0x858A
	jne	.LBB61_78
# %bb.28:                               # %bzopen_or_bzdopen.split153
	movabsq	$.L.str.7.43, %rsi
	movabsq	$.L.str.6.42, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	cmpl	$0, %ecx
	cmovneq	%rax, %rsi
	movq	-120(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdi
	callq	strcat
	movabsq	$.L.str.8.44, %rsi
	movq	%r13, %rdi
	callq	strcat
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-31350, BasicBlockSignatureTracker # imm = 0x858A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB61_41
# %bb.29:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-31317, %ax            # imm = 0x85AB
	jne	.LBB61_78
# %bb.30:                               # %bzopen_or_bzdopen.split169
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movw	$-31317, BasicBlockSignatureTracker # imm = 0x85AB
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB61_33
# %bb.31:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-31312, %ax            # imm = 0x85B0
	jne	.LBB61_78
# %bb.32:                               # %bzopen_or_bzdopen.split175
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movl	$.L.str.9.45, %esi
	callq	strcmp
	movw	$-31312, BasicBlockSignatureTracker # imm = 0x85B0
	movw	$27, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB61_35
.LBB61_33:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$98, %ax
	xorw	%cx, %ax
	cmpw	$-31287, %ax            # imm = 0x85C9
	jne	.LBB61_78
# %bb.34:                               # %bzopen_or_bzdopen.split173
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-31287, BasicBlockSignatureTracker # imm = 0x85C9
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB61_39
.LBB61_35:                              # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-4381, %ax             # imm = 0xEEE3
	cmpw	$27475, %ax             # imm = 0x6B53
	jne	.LBB61_78
# %bb.36:                               # %bzopen_or_bzdopen.split177
	movw	$27475, BasicBlockSignatureTracker # imm = 0x6B53
	movw	$-4381, RunTimeSignatureAdjuster # imm = 0xEEE3
# %bb.37:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$75, %ax
	xorw	%cx, %ax
	cmpw	$-31237, %ax            # imm = 0x85FB
	jne	.LBB61_78
# %bb.38:                               # %bzopen_or_bzdopen.split213
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-31237, BasicBlockSignatureTracker # imm = 0x85FB
	movw	$50, RunTimeSignatureAdjuster
.LBB61_39:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$963, %ax               # imm = 0x3C3
	xorw	%cx, %ax
	cmpw	$-31222, %ax            # imm = 0x860A
	jne	.LBB61_78
# %bb.40:                               # %bzopen_or_bzdopen.split179
	movw	$-31222, BasicBlockSignatureTracker # imm = 0x860A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB61_43
.LBB61_41:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$923, %ax               # imm = 0x39B
	cmpw	$-31215, %ax            # imm = 0x8611
	jne	.LBB61_78
# %bb.42:                               # %bzopen_or_bzdopen.split171
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-31215, BasicBlockSignatureTracker # imm = 0x8611
	movw	$27, RunTimeSignatureAdjuster
.LBB61_43:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$-31178, %ax            # imm = 0x8636
	jne	.LBB61_78
# %bb.44:                               # %bzopen_or_bzdopen.split181
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-31178, BasicBlockSignatureTracker # imm = 0x8636
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB61_47
# %bb.45:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-31175, %ax            # imm = 0x8639
	jne	.LBB61_78
# %bb.46:                               # %bzopen_or_bzdopen.split183
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movw	$-31175, BasicBlockSignatureTracker # imm = 0x8639
	movw	$539, RunTimeSignatureAdjuster # imm = 0x21B
	jmp	.LBB61_75
.LBB61_47:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$119, %ax
	cmpw	$-31167, %ax            # imm = 0x8641
	jne	.LBB61_78
# %bb.48:                               # %bzopen_or_bzdopen.split185
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-31167, BasicBlockSignatureTracker # imm = 0x8641
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB61_59
# %bb.49:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-31155, %ax            # imm = 0x864D
	jne	.LBB61_78
# %bb.50:                               # %bzopen_or_bzdopen.split187
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-31155, BasicBlockSignatureTracker # imm = 0x864D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jge	.LBB61_53
# %bb.51:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-31132, %ax            # imm = 0x8664
	jne	.LBB61_78
# %bb.52:                               # %bzopen_or_bzdopen.split191
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	$1, (%rax)
	movw	$-31132, BasicBlockSignatureTracker # imm = 0x8664
	movw	$41, RunTimeSignatureAdjuster
.LBB61_53:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$205, %ax
	xorw	%cx, %ax
	cmpw	$-31104, %ax            # imm = 0x8680
	jne	.LBB61_78
# %bb.54:                               # %bzopen_or_bzdopen.split193
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-31104, BasicBlockSignatureTracker # imm = 0x8680
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$9, %eax
	jle	.LBB61_57
# %bb.55:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-31089, %ax            # imm = 0x868F
	jne	.LBB61_78
# %bb.56:                               # %bzopen_or_bzdopen.split195
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	$9, (%rax)
	movw	$-31089, BasicBlockSignatureTracker # imm = 0x868F
	movw	$15, RunTimeSignatureAdjuster
.LBB61_57:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$78, %ax
	xorw	%cx, %ax
	cmpw	$-31026, %ax            # imm = 0x86CE
	jne	.LBB61_78
# %bb.58:                               # %bzopen_or_bzdopen.split197
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %esi
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movl	(%rbx), %ecx
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r8d
	movw	$-31026, BasicBlockSignatureTracker # imm = 0x86CE
	movw	$-21700, RunTimeSignatureAdjuster # imm = 0xAB3C
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	BZ2_bzWriteOpen
	movw	$-31026, BasicBlockSignatureTracker # imm = 0x86CE
	movw	$-21700, RunTimeSignatureAdjuster # imm = 0xAB3C
	movq	%rax, (%r15)
	movw	$-31026, BasicBlockSignatureTracker # imm = 0x86CE
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB61_61
.LBB61_59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$144, %ax
	cmpw	$-31023, %ax            # imm = 0x86D1
	jne	.LBB61_78
# %bb.60:                               # %bzopen_or_bzdopen.split189
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %esi
	movl	(%rbx), %edx
	movl	(%r12), %ecx
	movl	(%r14), %r9d
	movw	$-31023, BasicBlockSignatureTracker # imm = 0x86D1
	movw	$-20301, RunTimeSignatureAdjuster # imm = 0xB0B3
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %r8         # 8-byte Reload
	callq	BZ2_bzReadOpen
	movw	$-31023, BasicBlockSignatureTracker # imm = 0x86D1
	movw	$-20301, RunTimeSignatureAdjuster # imm = 0xB0B3
	movq	%rax, (%r15)
	movw	$-31023, BasicBlockSignatureTracker # imm = 0x86D1
	movw	$31, RunTimeSignatureAdjuster
.LBB61_61:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$483, %ax               # imm = 0x1E3
	xorw	%cx, %ax
	cmpw	$-30931, %ax            # imm = 0x872D
	jne	.LBB61_78
# %bb.62:                               # %bzopen_or_bzdopen.split199
	movq	%r15, %rcx
	movq	(%r15), %rax
	movw	$-30931, BasicBlockSignatureTracker # imm = 0x872D
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB61_73
# %bb.63:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3, %ax
	cmpw	$-30930, %ax            # imm = 0x872E
	jne	.LBB61_78
# %bb.64:                               # %bzopen_or_bzdopen.split201
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-30930, BasicBlockSignatureTracker # imm = 0x872E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB61_71
# %bb.65:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$97, %ax
	cmpw	$-30897, %ax            # imm = 0x874F
	jne	.LBB61_78
# %bb.66:                               # %bzopen_or_bzdopen.split205
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-30897, BasicBlockSignatureTracker # imm = 0x874F
	movw	$97, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB61_71
# %bb.67:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-26253, %ax            # imm = 0x9973
	cmpw	$7740, %ax              # imm = 0x1E3C
	jne	.LBB61_78
# %bb.68:                               # %bzopen_or_bzdopen.split209
	movw	$7740, BasicBlockSignatureTracker # imm = 0x1E3C
	movw	$-26253, RunTimeSignatureAdjuster # imm = 0x9973
# %bb.69:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29, %ax
	xorw	%cx, %ax
	cmpw	$-30894, %ax            # imm = 0x8752
	jne	.LBB61_78
# %bb.70:                               # %bzopen_or_bzdopen.split215
	movw	$-30894, BasicBlockSignatureTracker # imm = 0x8752
	movw	$124, RunTimeSignatureAdjuster
.LBB61_71:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$119, %ax
	xorw	%cx, %ax
	cmpw	$-30887, %ax            # imm = 0x8759
	jne	.LBB61_78
# %bb.72:                               # %bzopen_or_bzdopen.split207
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movw	$-30887, BasicBlockSignatureTracker # imm = 0x8759
	movw	$891, RunTimeSignatureAdjuster # imm = 0x37B
	jmp	.LBB61_75
.LBB61_73:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$115, %ax
	cmpw	$-30882, %ax            # imm = 0x875E
	jne	.LBB61_78
# %bb.74:                               # %bzopen_or_bzdopen.split203
	movq	(%rcx), %rax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movw	$-30882, BasicBlockSignatureTracker # imm = 0x875E
	movw	$892, RunTimeSignatureAdjuster # imm = 0x37C
.LBB61_75:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$859, %ax               # imm = 0x35B
	xorw	%cx, %ax
	cmpw	$-30855, %ax            # imm = 0x8779
	jne	.LBB61_78
# %bb.76:                               # %bzopen_or_bzdopen.split147
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movw	$-30855, BasicBlockSignatureTracker # imm = 0x8779
	movw	$0, RunTimeSignatureAdjuster
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB61_77:                              # %CFerrorHandler.bzopen_or_bzdopen.loopexit
	jmp	.LBB61_78
.LBB61_78:                              # %CFerrorHandler.bzopen_or_bzdopen
	callq	FAULT_DETECTED_CFC
.Lfunc_end61:
	.size	bzopen_or_bzdopen, .Lfunc_end61-bzopen_or_bzdopen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzdopen             # -- Begin function BZ2_bzdopen
	.p2align	4, 0x90
	.type	BZ2_bzdopen,@function
BZ2_bzdopen:                            # @BZ2_bzdopen
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rdx
	movw	$-30744, BasicBlockSignatureTracker # imm = 0x87E8
	movw	$1031, RunTimeSignatureAdjuster # imm = 0x407
	xorl	%edi, %edi
	movl	$1, %ecx
	callq	bzopen_or_bzdopen
	movw	$-30744, BasicBlockSignatureTracker # imm = 0x87E8
	movw	$1031, RunTimeSignatureAdjuster # imm = 0x407
	movw	$-30744, BasicBlockSignatureTracker # imm = 0x87E8
	movw	$0, RunTimeSignatureAdjuster
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end62:
	.size	BZ2_bzdopen, .Lfunc_end62-BZ2_bzdopen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread              # -- Begin function BZ2_bzread
	.p2align	4, 0x90
	.type	BZ2_bzread,@function
BZ2_bzread:                             # @BZ2_bzread
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	5096(%rax), %eax
	movw	$-30696, BasicBlockSignatureTracker # imm = 0x8818
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB63_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$-30679, %ax            # imm = 0x8829
	jne	.LBB63_15
# %bb.2:                                # %BZ2_bzread.split
	movl	$0, -4(%rbp)
	movw	$-30679, BasicBlockSignatureTracker # imm = 0x8829
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB63_13
.LBB63_3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$85, %ax
	cmpw	$-30643, %ax            # imm = 0x884D
	jne	.LBB63_15
# %bb.4:                                # %BZ2_bzread.split25
	leaq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	movw	$-30643, BasicBlockSignatureTracker # imm = 0x884D
	movw	$-16708, RunTimeSignatureAdjuster # imm = 0xBEBC
	callq	BZ2_bzRead
	movw	$-30643, BasicBlockSignatureTracker # imm = 0x884D
	movw	$-16708, RunTimeSignatureAdjuster # imm = 0xBEBC
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movw	$-30643, BasicBlockSignatureTracker # imm = 0x884D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB63_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-30629, %ax            # imm = 0x885B
	jne	.LBB63_15
# %bb.6:                                # %BZ2_bzread.split31
	movl	-8(%rbp), %eax
	movw	$-30629, BasicBlockSignatureTracker # imm = 0x885B
	movw	$22, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jne	.LBB63_9
.LBB63_7:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$-30606, %ax            # imm = 0x8872
	jne	.LBB63_15
# %bb.8:                                # %BZ2_bzread.split29
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
	movw	$-30606, BasicBlockSignatureTracker # imm = 0x8872
	movw	$91, RunTimeSignatureAdjuster
	jmp	.LBB63_13
.LBB63_9:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12879, %ax             # imm = 0x324F
	cmpw	$-17900, %ax            # imm = 0xBA14
	jne	.LBB63_15
# %bb.10:                               # %BZ2_bzread.split33
	movw	$-17900, BasicBlockSignatureTracker # imm = 0xBA14
	movw	$12879, RunTimeSignatureAdjuster # imm = 0x324F
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$34, %ax
	xorw	%cx, %ax
	cmpw	$-30599, %ax            # imm = 0x8879
	jne	.LBB63_15
# %bb.12:                               # %BZ2_bzread.split35
	movl	$-1, -4(%rbp)
	movw	$-30599, BasicBlockSignatureTracker # imm = 0x8879
	movw	$80, RunTimeSignatureAdjuster
.LBB63_13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$187, %ax
	xorw	%cx, %ax
	cmpw	$-30574, %ax            # imm = 0x8892
	jne	.LBB63_15
# %bb.14:                               # %BZ2_bzread.split27
	movl	-4(%rbp), %eax
	movw	$-30574, BasicBlockSignatureTracker # imm = 0x8892
	movw	$0, RunTimeSignatureAdjuster
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB63_15:                              # %CFerrorHandler.BZ2_bzread
	callq	FAULT_DETECTED_CFC
.Lfunc_end63:
	.size	BZ2_bzread, .Lfunc_end63-BZ2_bzread
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite             # -- Begin function BZ2_bzwrite
	.p2align	4, 0x90
	.type	BZ2_bzwrite,@function
BZ2_bzwrite:                            # @BZ2_bzwrite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-12(%rbp), %rax
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -4(%rbp)
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	movw	$-30454, BasicBlockSignatureTracker # imm = 0x890A
	movw	$-22661, RunTimeSignatureAdjuster # imm = 0xA77B
	movq	%rax, %rdi
	callq	BZ2_bzWrite
	movw	$-30454, BasicBlockSignatureTracker # imm = 0x890A
	movw	$-22661, RunTimeSignatureAdjuster # imm = 0xA77B
	movl	-12(%rbp), %eax
	movw	$-30454, BasicBlockSignatureTracker # imm = 0x890A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB64_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-30446, %ax            # imm = 0x8912
	jne	.LBB64_7
# %bb.2:                                # %BZ2_bzwrite.split
	movl	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movw	$-30446, BasicBlockSignatureTracker # imm = 0x8912
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB64_5
.LBB64_3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$-30403, %ax            # imm = 0x893D
	jne	.LBB64_7
# %bb.4:                                # %BZ2_bzwrite.split9
	movl	$-1, -8(%rbp)
	movw	$-30403, BasicBlockSignatureTracker # imm = 0x893D
	movw	$47, RunTimeSignatureAdjuster
.LBB64_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$79, %ax
	xorw	%cx, %ax
	cmpw	$-30371, %ax            # imm = 0x895D
	jne	.LBB64_7
# %bb.6:                                # %BZ2_bzwrite.split11
	movl	-8(%rbp), %eax
	movw	$-30371, BasicBlockSignatureTracker # imm = 0x895D
	movw	$0, RunTimeSignatureAdjuster
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB64_7:                               # %CFerrorHandler.BZ2_bzwrite
	callq	FAULT_DETECTED_CFC
.Lfunc_end64:
	.size	BZ2_bzwrite, .Lfunc_end64-BZ2_bzwrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzflush             # -- Begin function BZ2_bzflush
	.p2align	4, 0x90
	.type	BZ2_bzflush,@function
BZ2_bzflush:                            # @BZ2_bzflush
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movw	$-30323, BasicBlockSignatureTracker # imm = 0x898D
	movw	$0, RunTimeSignatureAdjuster
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end65:
	.size	BZ2_bzflush, .Lfunc_end65-BZ2_bzflush
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose             # -- Begin function BZ2_bzclose
	.p2align	4, 0x90
	.type	BZ2_bzclose,@function
BZ2_bzclose:                            # @BZ2_bzclose
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movw	$-30282, BasicBlockSignatureTracker # imm = 0x89B6
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB66_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$90, %ax
	cmpw	$-30228, %ax            # imm = 0x89EC
	jne	.LBB66_25
# %bb.2:                                # %BZ2_bzclose.split
	movw	$-30228, BasicBlockSignatureTracker # imm = 0x89EC
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB66_23
.LBB66_3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$958, %ax               # imm = 0x3BE
	cmpw	$-30200, %ax            # imm = 0x8A08
	jne	.LBB66_25
# %bb.4:                                # %BZ2_bzclose.split45
	movq	-8(%rbp), %rax
	movb	5008(%rax), %al
	movw	$-30200, BasicBlockSignatureTracker # imm = 0x8A08
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB66_11
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-30195, %ax            # imm = 0x8A0D
	jne	.LBB66_25
# %bb.6:                                # %BZ2_bzclose.split49
	leaq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movw	$-30195, BasicBlockSignatureTracker # imm = 0x8A0D
	movw	$-1748, RunTimeSignatureAdjuster # imm = 0xF92C
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	movw	$-30195, BasicBlockSignatureTracker # imm = 0x8A0D
	movw	$-1748, RunTimeSignatureAdjuster # imm = 0xF92C
	movl	-16(%rbp), %eax
	movw	$-30195, BasicBlockSignatureTracker # imm = 0x8A0D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB66_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-30176, %ax            # imm = 0x8A20
	jne	.LBB66_25
# %bb.8:                                # %BZ2_bzclose.split53
	movq	-8(%rbp), %rsi
	movw	$-30176, BasicBlockSignatureTracker # imm = 0x8A20
	movw	$-1791, RunTimeSignatureAdjuster # imm = 0xF901
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	movw	$-30176, BasicBlockSignatureTracker # imm = 0x8A20
	movw	$-1791, RunTimeSignatureAdjuster # imm = 0xF901
	movw	$-30176, BasicBlockSignatureTracker # imm = 0x8A20
	movw	$45, RunTimeSignatureAdjuster
.LBB66_9:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$40, %ax
	xorw	%cx, %ax
	cmpw	$-30171, %ax            # imm = 0x8A25
	jne	.LBB66_25
# %bb.10:                               # %BZ2_bzclose.split55
	movw	$-30171, BasicBlockSignatureTracker # imm = 0x8A25
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB66_13
.LBB66_11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$-30163, %ax            # imm = 0x8A2D
	jne	.LBB66_25
# %bb.12:                               # %BZ2_bzclose.split51
	leaq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movw	$-30163, BasicBlockSignatureTracker # imm = 0x8A2D
	movw	$-16930, RunTimeSignatureAdjuster # imm = 0xBDDE
	callq	BZ2_bzReadClose
	movw	$-30163, BasicBlockSignatureTracker # imm = 0x8A2D
	movw	$-16930, RunTimeSignatureAdjuster # imm = 0xBDDE
	movw	$-30163, BasicBlockSignatureTracker # imm = 0x8A2D
	movw	$8, RunTimeSignatureAdjuster
.LBB66_13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$111, %ax
	xorw	%cx, %ax
	cmpw	$-30134, %ax            # imm = 0x8A4A
	jne	.LBB66_25
# %bb.14:                               # %BZ2_bzclose.split57
	movl	-12(%rbp), %eax
	movw	$-30134, BasicBlockSignatureTracker # imm = 0x8A4A
	movw	$934, RunTimeSignatureAdjuster # imm = 0x3A6
	cmpl	$0, %eax
	je	.LBB66_23
# %bb.15:                               # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-21077, %ax            # imm = 0xADAB
	cmpw	$10209, %ax             # imm = 0x27E1
	jne	.LBB66_25
# %bb.16:                               # %BZ2_bzclose.split59
	movw	$10209, BasicBlockSignatureTracker # imm = 0x27E1
	movw	$-21077, RunTimeSignatureAdjuster # imm = 0xADAB
# %bb.17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$48, %ax
	xorw	%cx, %ax
	cmpw	$-30086, %ax            # imm = 0x8A7A
	jne	.LBB66_25
# %bb.18:                               # %BZ2_bzclose.split63
	movl	-12(%rbp), %eax
	movw	$-30086, BasicBlockSignatureTracker # imm = 0x8A7A
	movw	$918, RunTimeSignatureAdjuster # imm = 0x396
	cmpl	$1, %eax
	je	.LBB66_23
# %bb.19:                               # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-20746, %ax            # imm = 0xAEF6
	cmpw	$9356, %ax              # imm = 0x248C
	jne	.LBB66_25
# %bb.20:                               # %BZ2_bzclose.split61
	movw	$9356, BasicBlockSignatureTracker # imm = 0x248C
	movw	$-20746, RunTimeSignatureAdjuster # imm = 0xAEF6
# %bb.21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$237, %ax
	xorw	%cx, %ax
	cmpw	$-30057, %ax            # imm = 0x8A97
	jne	.LBB66_25
# %bb.22:                               # %BZ2_bzclose.split65
	movw	$-30057, BasicBlockSignatureTracker # imm = 0x8A97
	movw	$891, RunTimeSignatureAdjuster # imm = 0x37B
.LBB66_23:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$860, %ax               # imm = 0x35C
	xorw	%cx, %ax
	cmpw	$-30032, %ax            # imm = 0x8AB0
	jne	.LBB66_25
# %bb.24:                               # %BZ2_bzclose.split47
	movw	$-30032, BasicBlockSignatureTracker # imm = 0x8AB0
	movw	$0, RunTimeSignatureAdjuster
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB66_25:                              # %CFerrorHandler.BZ2_bzclose
	callq	FAULT_DETECTED_CFC
.Lfunc_end66:
	.size	BZ2_bzclose, .Lfunc_end66-BZ2_bzclose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror             # -- Begin function BZ2_bzerror
	.p2align	4, 0x90
	.type	BZ2_bzerror,@function
BZ2_bzerror:                            # @BZ2_bzerror
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movw	$-30025, BasicBlockSignatureTracker # imm = 0x8AB7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB67_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$-30014, %ax            # imm = 0x8AC2
	jne	.LBB67_5
# %bb.2:                                # %BZ2_bzerror.split
	movl	$0, -4(%rbp)
	movw	$-30014, BasicBlockSignatureTracker # imm = 0x8AC2
	movw	$117, RunTimeSignatureAdjuster
.LBB67_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$120, %ax
	xorw	%cx, %ax
	cmpw	$-30001, %ax            # imm = 0x8ACF
	jne	.LBB67_5
# %bb.4:                                # %BZ2_bzerror.split6
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -4(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rax
	movw	$-30001, BasicBlockSignatureTracker # imm = 0x8ACF
	movw	$0, RunTimeSignatureAdjuster
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB67_5:                               # %CFerrorHandler.BZ2_bzerror
	callq	FAULT_DETECTED_CFC
.Lfunc_end67:
	.size	BZ2_bzerror, .Lfunc_end67-BZ2_bzerror
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bsInitWrite         # -- Begin function BZ2_bsInitWrite
	.p2align	4, 0x90
	.type	BZ2_bsInitWrite,@function
BZ2_bsInitWrite:                        # @BZ2_bsInitWrite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1724, %ax              # imm = 0x6BC
	xorw	%cx, %ax
	cmpw	$-29962, %ax            # imm = 0x8AF6
	jne	.LBB68_2
# %bb.1:                                # %BZ2_bsInitWrite.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rcx
	movl	$0, 644(%rcx)
	movq	(%rax), %rax
	movl	$0, 640(%rax)
	movw	$-29962, BasicBlockSignatureTracker # imm = 0x8AF6
	movw	$1770, RunTimeSignatureAdjuster # imm = 0x6EA
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB68_2:                               # %CFerrorHandler.BZ2_bsInitWrite
	callq	FAULT_DETECTED_CFC
.Lfunc_end68:
	.size	BZ2_bsInitWrite, .Lfunc_end68-BZ2_bsInitWrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_compressBlock       # -- Begin function BZ2_compressBlock
	.p2align	4, 0x90
	.type	BZ2_compressBlock,@function
BZ2_compressBlock:                      # @BZ2_compressBlock
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15584, %ax            # imm = 0xC320
	xorw	%cx, %ax
	cmpw	$-29913, %ax            # imm = 0x8B27
	jne	.LBB69_31
# %bb.1:                                # %BZ2_compressBlock.split64
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15584, %ax            # imm = 0xC320
	xorw	%cx, %ax
	cmpw	$-29913, %ax            # imm = 0x8B27
	jne	.LBB69_31
# %bb.2:                                # %BZ2_compressBlock.split
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rdi, (%rbx)
	movb	%sil, (%r14)
	movq	(%rbx), %rax
	movl	108(%rax), %eax
	movw	$-29913, BasicBlockSignatureTracker # imm = 0x8B27
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB69_13
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-29892, %ax            # imm = 0x8B3C
	jne	.LBB69_31
# %bb.4:                                # %BZ2_compressBlock.split66
	movq	(%rbx), %rax
	movl	648(%rax), %eax
	xorl	$-1, %eax
	movq	(%rbx), %rcx
	movl	%eax, 648(%rcx)
	movq	(%rbx), %rax
	movl	652(%rax), %eax
	shll	$1, %eax
	movq	(%rbx), %rcx
	movl	652(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	(%rbx), %rcx
	movl	%eax, 652(%rcx)
	movq	(%rbx), %rax
	movl	648(%rax), %eax
	movq	(%rbx), %rcx
	xorl	652(%rcx), %eax
	movl	%eax, 652(%rcx)
	movq	(%rbx), %rax
	movl	660(%rax), %eax
	movw	$-29892, BasicBlockSignatureTracker # imm = 0x8B3C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jle	.LBB69_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$-29871, %ax            # imm = 0x8B51
	jne	.LBB69_31
# %bb.6:                                # %BZ2_compressBlock.split70
	movq	(%rbx), %rax
	movl	$0, 116(%rax)
	movw	$-29871, BasicBlockSignatureTracker # imm = 0x8B51
	movw	$109, RunTimeSignatureAdjuster
.LBB69_7:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$111, %ax
	xorw	%cx, %ax
	cmpw	$-29869, %ax            # imm = 0x8B53
	jne	.LBB69_31
# %bb.8:                                # %BZ2_compressBlock.split72
	movq	(%rbx), %rax
	movl	656(%rax), %eax
	movw	$-29869, BasicBlockSignatureTracker # imm = 0x8B53
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB69_11
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$136, %ax
	cmpw	$-29733, %ax            # imm = 0x8BDB
	jne	.LBB69_31
# %bb.10:                               # %BZ2_compressBlock.split74
	movabsq	$.L.str.56, %rsi
	movq	stderr, %rdi
	movq	(%rbx), %rax
	movl	660(%rax), %edx
	movq	(%rbx), %rax
	movl	648(%rax), %ecx
	movq	(%rbx), %rax
	movl	652(%rax), %r8d
	movq	(%rbx), %rax
	movl	108(%rax), %r9d
	movb	$0, %al
	callq	fprintf
	movw	$-29733, BasicBlockSignatureTracker # imm = 0x8BDB
	movw	$136, RunTimeSignatureAdjuster
.LBB69_11:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1884, %ax              # imm = 0x75C
	xorw	%cx, %ax
	cmpw	$-29681, %ax            # imm = 0x8C0F
	jne	.LBB69_31
# %bb.12:                               # %BZ2_compressBlock.split76
	movq	(%rbx), %rdi
	movw	$-29681, BasicBlockSignatureTracker # imm = 0x8C0F
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_blockSort
	movw	$-29681, BasicBlockSignatureTracker # imm = 0x8C0F
	movw	$1832, RunTimeSignatureAdjuster # imm = 0x728
	movw	$-29681, BasicBlockSignatureTracker # imm = 0x8C0F
	movw	$1832, RunTimeSignatureAdjuster # imm = 0x728
.LBB69_13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1851, %ax              # imm = 0x73B
	xorw	%cx, %ax
	cmpw	$-29668, %ax            # imm = 0x8C1C
	jne	.LBB69_31
# %bb.14:                               # %BZ2_compressBlock.split68
	movq	(%rbx), %rax
	movq	32(%rax), %rax
	movq	(%rbx), %rcx
	movslq	108(%rcx), %rcx
	addq	%rcx, %rax
	movq	(%rbx), %rcx
	movq	%rax, 80(%rcx)
	movq	(%rbx), %rax
	movl	660(%rax), %eax
	movw	$-29668, BasicBlockSignatureTracker # imm = 0x8C1C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB69_17
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$86, %ax
	cmpw	$-29622, %ax            # imm = 0x8C4A
	jne	.LBB69_31
# %bb.16:                               # %BZ2_compressBlock.split78
	movq	(%rbx), %rdi
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_bsInitWrite
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$86, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movl	$66, %esi
	callq	bsPutUChar
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$86, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movl	$90, %esi
	callq	bsPutUChar
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movl	$104, %esi
	callq	bsPutUChar
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movq	(%rbx), %rax
	movl	664(%rax), %eax
	addl	$48, %eax
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movzbl	%al, %esi
	callq	bsPutUChar
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$0, RunTimeSignatureAdjuster
	movw	$-29622, BasicBlockSignatureTracker # imm = 0x8C4A
	movw	$86, RunTimeSignatureAdjuster
.LBB69_17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$82, %ax
	xorw	%cx, %ax
	cmpw	$-29618, %ax            # imm = 0x8C4E
	jne	.LBB69_31
# %bb.18:                               # %BZ2_compressBlock.split80
	movq	(%rbx), %rax
	movl	108(%rax), %eax
	movw	$-29618, BasicBlockSignatureTracker # imm = 0x8C4E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB69_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$32, %ax
	cmpw	$-29586, %ax            # imm = 0x8C6E
	jne	.LBB69_31
# %bb.20:                               # %BZ2_compressBlock.split82
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movl	$49, %esi
	callq	bsPutUChar
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movl	$65, %esi
	callq	bsPutUChar
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movl	$89, %esi
	callq	bsPutUChar
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movl	$38, %esi
	callq	bsPutUChar
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movl	$83, %esi
	callq	bsPutUChar
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movl	$89, %esi
	callq	bsPutUChar
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movq	(%rbx), %rax
	movl	648(%rax), %esi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	callq	bsPutUInt32
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	movl	$1, %esi
	xorl	%edx, %edx
	callq	bsW
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$36, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movq	(%rbx), %rax
	movl	48(%rax), %edx
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	movl	$24, %esi
	callq	bsW
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	callq	generateMTFValues
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	callq	sendMTFValues
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$0, RunTimeSignatureAdjuster
	movw	$-29586, BasicBlockSignatureTracker # imm = 0x8C6E
	movw	$32, RunTimeSignatureAdjuster
.LBB69_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$199, %ax
	xorw	%cx, %ax
	cmpw	$-29559, %ax            # imm = 0x8C89
	jne	.LBB69_31
# %bb.22:                               # %BZ2_compressBlock.split84
	movb	(%r14), %al
	movw	$-29559, BasicBlockSignatureTracker # imm = 0x8C89
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB69_29
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-29518, %ax            # imm = 0x8CB2
	jne	.LBB69_31
# %bb.24:                               # %BZ2_compressBlock.split86
	movq	(%rbx), %rdi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movl	$23, %esi
	callq	bsPutUChar
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movl	$114, %esi
	callq	bsPutUChar
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movl	$69, %esi
	callq	bsPutUChar
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movl	$56, %esi
	callq	bsPutUChar
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movl	$80, %esi
	callq	bsPutUChar
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movl	$144, %esi
	callq	bsPutUChar
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$248, RunTimeSignatureAdjuster
	movq	(%rbx), %rdi
	movq	(%rbx), %rax
	movl	652(%rax), %esi
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$220, RunTimeSignatureAdjuster
	callq	bsPutUInt32
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$220, RunTimeSignatureAdjuster
	movq	(%rbx), %rax
	movl	656(%rax), %eax
	movw	$-29518, BasicBlockSignatureTracker # imm = 0x8CB2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB69_27
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$98, %ax
	cmpw	$-29488, %ax            # imm = 0x8CD0
	jne	.LBB69_31
# %bb.26:                               # %BZ2_compressBlock.split90
	movabsq	$.L.str.1.57, %rsi
	movq	stderr, %rdi
	movq	(%rbx), %rax
	movl	652(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-29488, BasicBlockSignatureTracker # imm = 0x8CD0
	movw	$98, RunTimeSignatureAdjuster
.LBB69_27:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$432, %ax               # imm = 0x1B0
	xorw	%cx, %ax
	cmpw	$-29438, %ax            # imm = 0x8D02
	jne	.LBB69_31
# %bb.28:                               # %BZ2_compressBlock.split92
	movq	(%rbx), %rdi
	movw	$-29438, BasicBlockSignatureTracker # imm = 0x8D02
	movw	$0, RunTimeSignatureAdjuster
	callq	bsFinishWrite
	movw	$-29438, BasicBlockSignatureTracker # imm = 0x8D02
	movw	$395, RunTimeSignatureAdjuster # imm = 0x18B
	movw	$-29438, BasicBlockSignatureTracker # imm = 0x8D02
	movw	$395, RunTimeSignatureAdjuster # imm = 0x18B
.LBB69_29:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$388, %ax               # imm = 0x184
	xorw	%cx, %ax
	cmpw	$-29427, %ax            # imm = 0x8D0D
	jne	.LBB69_31
# %bb.30:                               # %BZ2_compressBlock.split88
	movw	$-29427, BasicBlockSignatureTracker # imm = 0x8D0D
	movw	$-15093, RunTimeSignatureAdjuster # imm = 0xC50B
	leaq	-16(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB69_31:                              # %CFerrorHandler.BZ2_compressBlock
	callq	FAULT_DETECTED_CFC
.Lfunc_end69:
	.size	BZ2_compressBlock, .Lfunc_end69-BZ2_compressBlock
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bsPutUChar
	.type	bsPutUChar,@function
bsPutUChar:                             # @bsPutUChar
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.1:                                # %bsPutUChar.split106
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.2:                                # %bsPutUChar.split104
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.3:                                # %bsPutUChar.split102
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.4:                                # %bsPutUChar.split100
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.5:                                # %bsPutUChar.split98
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.6:                                # %bsPutUChar.split96
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.7:                                # %bsPutUChar.split94
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.8:                                # %bsPutUChar.split92
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.9:                                # %bsPutUChar.split90
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.10:                               # %bsPutUChar.split88
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.11:                               # %bsPutUChar.split86
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.12:                               # %bsPutUChar.split84
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.13:                               # %bsPutUChar.split82
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.14:                               # %bsPutUChar.split80
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.15:                               # %bsPutUChar.split78
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$351, %ax               # imm = 0x15F
	xorw	%cx, %ax
	cmpw	$-29419, %ax            # imm = 0x8D15
	jne	.LBB70_17
# %bb.16:                               # %bsPutUChar.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rax)
	movb	%sil, (%rcx)
	movq	(%rax), %rdi
	movzbl	(%rcx), %edx
	movw	$-29419, BasicBlockSignatureTracker # imm = 0x8D15
	movw	$379, RunTimeSignatureAdjuster # imm = 0x17B
	movl	$8, %esi
	callq	bsW
	movw	$-29419, BasicBlockSignatureTracker # imm = 0x8D15
	movw	$379, RunTimeSignatureAdjuster # imm = 0x17B
	movw	$-29419, BasicBlockSignatureTracker # imm = 0x8D15
	movw	$265, RunTimeSignatureAdjuster # imm = 0x109
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB70_17:                              # %CFerrorHandler.bsPutUChar
	callq	FAULT_DETECTED_CFC
.Lfunc_end70:
	.size	bsPutUChar, .Lfunc_end70-bsPutUChar
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bsPutUInt32
	.type	bsPutUInt32,@function
bsPutUInt32:                            # @bsPutUInt32
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$338, %ax               # imm = 0x152
	xorw	%cx, %ax
	cmpw	$-29380, %ax            # imm = 0x8D3C
	jne	.LBB71_3
# %bb.1:                                # %bsPutUInt32.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$338, %ax               # imm = 0x152
	xorw	%cx, %ax
	cmpw	$-29380, %ax            # imm = 0x8D3C
	jne	.LBB71_3
# %bb.2:                                # %bsPutUInt32.split
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%r14)
	movl	%esi, (%rbx)
	movq	(%r14), %rdi
	movl	(%rbx), %eax
	shrl	$24, %eax
	movl	%eax, %edx
	andq	$255, %rdx
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movl	$8, %esi
                                        # kill: def %edx killed %edx killed %rdx
	callq	bsW
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movq	(%r14), %rdi
	movl	(%rbx), %eax
	shrl	$16, %eax
	movl	%eax, %edx
	andq	$255, %rdx
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movl	$8, %esi
                                        # kill: def %edx killed %edx killed %rdx
	callq	bsW
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movq	(%r14), %rdi
	movl	(%rbx), %eax
	shrl	$8, %eax
	movl	%eax, %edx
	andq	$255, %rdx
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movl	$8, %esi
                                        # kill: def %edx killed %edx killed %rdx
	callq	bsW
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movq	(%r14), %rdi
	movl	(%rbx), %edx
	andq	$255, %rdx
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movl	$8, %esi
                                        # kill: def %edx killed %edx killed %rdx
	callq	bsW
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$338, RunTimeSignatureAdjuster # imm = 0x152
	movw	$-29380, BasicBlockSignatureTracker # imm = 0x8D3C
	movw	$370, RunTimeSignatureAdjuster # imm = 0x172
	leaq	-16(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB71_3:                               # %CFerrorHandler.bsPutUInt32
	callq	FAULT_DETECTED_CFC
.Lfunc_end71:
	.size	bsPutUInt32, .Lfunc_end71-bsPutUInt32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bsW
	.type	bsW,@function
bsW:                                    # @bsW
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.1:                                # %bsW.split501
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.2:                                # %bsW.split499
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.3:                                # %bsW.split497
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.4:                                # %bsW.split495
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.5:                                # %bsW.split493
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.6:                                # %bsW.split491
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.7:                                # %bsW.split489
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.8:                                # %bsW.split487
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.9:                                # %bsW.split485
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.10:                               # %bsW.split483
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.11:                               # %bsW.split481
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.12:                               # %bsW.split479
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.13:                               # %bsW.split477
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.14:                               # %bsW.split475
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.15:                               # %bsW.split473
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.16:                               # %bsW.split471
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.17:                               # %bsW.split469
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.18:                               # %bsW.split467
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.19:                               # %bsW.split465
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.20:                               # %bsW.split463
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.21:                               # %bsW.split461
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.22:                               # %bsW.split459
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.23:                               # %bsW.split457
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.24:                               # %bsW.split455
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.25:                               # %bsW.split453
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.26:                               # %bsW.split451
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.27:                               # %bsW.split449
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.28:                               # %bsW.split447
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.29:                               # %bsW.split445
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.30:                               # %bsW.split443
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.31:                               # %bsW.split441
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.32:                               # %bsW.split439
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.33:                               # %bsW.split437
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.34:                               # %bsW.split435
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.35:                               # %bsW.split433
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.36:                               # %bsW.split431
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.37:                               # %bsW.split429
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.38:                               # %bsW.split427
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.39:                               # %bsW.split425
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.40:                               # %bsW.split423
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.41:                               # %bsW.split421
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.42:                               # %bsW.split419
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.43:                               # %bsW.split417
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.44:                               # %bsW.split415
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.45:                               # %bsW.split413
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.46:                               # %bsW.split411
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.47:                               # %bsW.split409
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.48:                               # %bsW.split407
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.49:                               # %bsW.split405
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.50:                               # %bsW.split403
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.51:                               # %bsW.split401
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.52:                               # %bsW.split399
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.53:                               # %bsW.split397
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.54:                               # %bsW.split395
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.55:                               # %bsW.split393
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.56:                               # %bsW.split391
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.57:                               # %bsW.split389
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.58:                               # %bsW.split387
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.59:                               # %bsW.split385
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.60:                               # %bsW.split383
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.61:                               # %bsW.split381
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.62:                               # %bsW.split379
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.63:                               # %bsW.split377
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.64:                               # %bsW.split369
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.65:                               # %bsW.split367
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.66:                               # %bsW.split365
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.67:                               # %bsW.split363
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.68:                               # %bsW.split361
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.69:                               # %bsW.split359
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$263, %ax               # imm = 0x107
	xorw	%cx, %ax
	cmpw	$-29335, %ax            # imm = 0x8D69
	jne	.LBB72_78
# %bb.70:                               # %bsW.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rdi, (%rax)
	movl	%esi, (%r8)
	movl	%edx, (%r9)
	movw	$-29335, BasicBlockSignatureTracker # imm = 0x8D69
	movw	$0, RunTimeSignatureAdjuster
.LBB72_71:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$244, %cx
	xorw	%dx, %cx
	cmpw	$-29283, %cx            # imm = 0x8D9D
	jne	.LBB72_77
# %bb.72:                               # %bsW.split371
                                        #   in Loop: Header=BB72_71 Depth=1
	movq	(%rax), %rcx
	movl	644(%rcx), %ecx
	movw	$-29283, BasicBlockSignatureTracker # imm = 0x8D9D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %ecx
	jl	.LBB72_75
# %bb.73:                               #   in Loop: Header=BB72_71 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$35, %cx
	cmpw	$-29250, %cx            # imm = 0x8DBE
	jne	.LBB72_77
# %bb.74:                               # %bsW.split373
                                        #   in Loop: Header=BB72_71 Depth=1
	movq	(%rax), %rcx
	movl	640(%rcx), %ecx
	shrl	$24, %ecx
	movq	(%rax), %rdx
	movq	80(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	116(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rcx
	movl	116(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 116(%rcx)
	movq	(%rax), %rcx
	movl	640(%rcx), %edx
	shll	$8, %edx
	movl	%edx, 640(%rcx)
	movq	(%rax), %rcx
	movl	644(%rcx), %edx
	subl	$8, %edx
	movl	%edx, 644(%rcx)
	movw	$-29250, BasicBlockSignatureTracker # imm = 0x8DBE
	movw	$215, RunTimeSignatureAdjuster
	jmp	.LBB72_71
.LBB72_75:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$86, %cx
	cmpw	$-29237, %cx            # imm = 0x8DCB
	jne	.LBB72_78
# %bb.76:                               # %bsW.split375
	movl	$32, %ecx
	movl	(%r9), %edx
	movq	(%rax), %rsi
	subl	644(%rsi), %ecx
	subl	(%r8), %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %edx
	movq	(%rax), %rcx
	orl	640(%rcx), %edx
	movl	%edx, 640(%rcx)
	movl	(%r8), %ecx
	movq	(%rax), %rax
	addl	644(%rax), %ecx
	movl	%ecx, 644(%rax)
	movw	$-29237, BasicBlockSignatureTracker # imm = 0x8DCB
	movw	$389, RunTimeSignatureAdjuster # imm = 0x185
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB72_77:                              # %CFerrorHandler.bsW.loopexit
	jmp	.LBB72_78
.LBB72_78:                              # %CFerrorHandler.bsW
	callq	FAULT_DETECTED_CFC
.Lfunc_end72:
	.size	bsW, .Lfunc_end72-bsW
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function generateMTFValues
	.type	generateMTFValues,@function
generateMTFValues:                      # @generateMTFValues
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$432, %ax               # imm = 0x1B0
	xorw	%cx, %ax
	cmpw	$-29218, %ax            # imm = 0x8DDE
	jne	.LBB73_84
# %bb.1:                                # %generateMTFValues.split
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rdi, (%rbx)
	movq	(%rbx), %rax
	movq	56(%rax), %rax
	movq	%rax, (%r14)
	movq	(%rbx), %rax
	movq	64(%rax), %rax
	movq	%rax, (%r13)
	movq	(%rbx), %rax
	movq	72(%rax), %rax
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%rax, (%rcx)
	movq	(%rbx), %rdi
	movw	$-29218, BasicBlockSignatureTracker # imm = 0x8DDE
	movw	$0, RunTimeSignatureAdjuster
	callq	makeMaps_e
	movw	$-29218, BasicBlockSignatureTracker # imm = 0x8DDE
	movw	$0, RunTimeSignatureAdjuster
	movq	(%rbx), %rax
	movl	124(%rax), %eax
	addl	$1, %eax
	movl	%eax, (%r15)
	movl	$0, (%r12)
	movw	$-29218, BasicBlockSignatureTracker # imm = 0x8DDE
	movw	$0, RunTimeSignatureAdjuster
.LBB73_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$55, %ax
	xorw	%cx, %ax
	cmpw	$-29207, %ax            # imm = 0x8DE9
	jne	.LBB73_83
# %bb.3:                                # %generateMTFValues.split141
                                        #   in Loop: Header=BB73_2 Depth=1
	movl	(%r12), %eax
	movl	(%r15), %ecx
	movw	$-29207, BasicBlockSignatureTracker # imm = 0x8DE9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB73_8
# %bb.4:                                #   in Loop: Header=BB73_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-29195, %ax            # imm = 0x8DF5
	jne	.LBB73_83
# %bb.5:                                # %generateMTFValues.split143
                                        #   in Loop: Header=BB73_2 Depth=1
	movq	(%rbx), %rax
	movslq	(%r12), %rcx
	movl	$0, 672(%rax,%rcx,4)
	movw	$-29195, BasicBlockSignatureTracker # imm = 0x8DF5
	movw	$0, RunTimeSignatureAdjuster
# %bb.6:                                #   in Loop: Header=BB73_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1000, %ax              # imm = 0x3E8
	cmpw	$-29155, %ax            # imm = 0x8E1D
	jne	.LBB73_83
# %bb.7:                                # %generateMTFValues.split147
                                        #   in Loop: Header=BB73_2 Depth=1
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$-29155, BasicBlockSignatureTracker # imm = 0x8E1D
	movw	$963, RunTimeSignatureAdjuster # imm = 0x3C3
	jmp	.LBB73_2
.LBB73_8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$974, %ax               # imm = 0x3CE
	cmpw	$-29145, %ax            # imm = 0x8E27
	jne	.LBB73_84
# %bb.9:                                # %generateMTFValues.split145
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$0, (%r12)
	movw	$-29145, BasicBlockSignatureTracker # imm = 0x8E27
	movw	$0, RunTimeSignatureAdjuster
.LBB73_10:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19, %ax
	xorw	%cx, %ax
	cmpw	$-29132, %ax            # imm = 0x8E34
	jne	.LBB73_82
# %bb.11:                               # %generateMTFValues.split149
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	(%r12), %eax
	movq	(%rbx), %rcx
	movl	124(%rcx), %ecx
	movw	$-29132, BasicBlockSignatureTracker # imm = 0x8E34
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB73_16
# %bb.12:                               #   in Loop: Header=BB73_10 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-29122, %ax            # imm = 0x8E3E
	jne	.LBB73_82
# %bb.13:                               # %generateMTFValues.split151
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	(%r12), %eax
	movslq	(%r12), %rcx
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movb	%al, (%rdx,%rcx)
	movw	$-29122, BasicBlockSignatureTracker # imm = 0x8E3E
	movw	$0, RunTimeSignatureAdjuster
# %bb.14:                               #   in Loop: Header=BB73_10 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$154, %ax
	cmpw	$-29020, %ax            # imm = 0x8EA4
	jne	.LBB73_82
# %bb.15:                               # %generateMTFValues.split155
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$-29020, BasicBlockSignatureTracker # imm = 0x8EA4
	movw	$131, RunTimeSignatureAdjuster
	jmp	.LBB73_10
.LBB73_16:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$146, %ax
	cmpw	$-29018, %ax            # imm = 0x8EA6
	jne	.LBB73_84
# %bb.17:                               # %generateMTFValues.split153
	movl	$0, (%r12)
	movw	$-29018, BasicBlockSignatureTracker # imm = 0x8EA6
	movw	$0, RunTimeSignatureAdjuster
.LBB73_18:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_32 Depth 2
                                        #     Child Loop BB73_48 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$101, %ax
	xorw	%cx, %ax
	cmpw	$-28989, %ax            # imm = 0x8EC3
	jne	.LBB73_81
# %bb.19:                               # %generateMTFValues.split157
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	(%r12), %eax
	movq	(%rbx), %rcx
	movl	108(%rcx), %ecx
	movw	$-28989, BasicBlockSignatureTracker # imm = 0x8EC3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB73_58
# %bb.20:                               #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-28977, %ax            # imm = 0x8ECF
	jne	.LBB73_81
# %bb.21:                               # %generateMTFValues.split159
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	(%r14), %rax
	movslq	(%r12), %rcx
	movl	(%rax,%rcx,4), %eax
	subl	$1, %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$-28977, BasicBlockSignatureTracker # imm = 0x8ECF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB73_24
# %bb.22:                               #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-28969, %ax            # imm = 0x8ED7
	jne	.LBB73_81
# %bb.23:                               # %generateMTFValues.split163
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	(%rbx), %rax
	movl	108(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movw	$-28969, BasicBlockSignatureTracker # imm = 0x8ED7
	movw	$24, RunTimeSignatureAdjuster
.LBB73_24:                              #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$33, %ax
	xorw	%cx, %ax
	cmpw	$-28946, %ax            # imm = 0x8EEE
	jne	.LBB73_81
# %bb.25:                               # %generateMTFValues.split165
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	(%rbx), %rax
	movq	(%r13), %rcx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movzbl	(%rcx,%rdx), %ecx
	movb	384(%rax,%rcx), %al
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movq	-88(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movzbl	(%rcx), %ecx
	movw	$-28946, BasicBlockSignatureTracker # imm = 0x8EEE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB73_28
# %bb.26:                               #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-28945, %ax            # imm = 0x8EEF
	jne	.LBB73_81
# %bb.27:                               # %generateMTFValues.split167
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-28945, BasicBlockSignatureTracker # imm = 0x8EEF
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB73_54
.LBB73_28:                              #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$442, %ax               # imm = 0x1BA
	cmpw	$-28844, %ax            # imm = 0x8F54
	jne	.LBB73_81
# %bb.29:                               # %generateMTFValues.split169
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-28844, BasicBlockSignatureTracker # imm = 0x8F54
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB73_46
# %bb.30:                               #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-28832, %ax            # imm = 0x8F60
	jne	.LBB73_81
# %bb.31:                               # %generateMTFValues.split173
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-28832, BasicBlockSignatureTracker # imm = 0x8F60
	movw	$0, RunTimeSignatureAdjuster
.LBB73_32:                              #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$-28831, %ax            # imm = 0x8F61
	jne	.LBB73_80
# %bb.33:                               # %generateMTFValues.split177
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	andl	$1, %eax
	movw	$-28831, BasicBlockSignatureTracker # imm = 0x8F61
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB73_36
# %bb.34:                               #   in Loop: Header=BB73_32 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$-28801, %ax            # imm = 0x8F7F
	jne	.LBB73_80
# %bb.35:                               # %generateMTFValues.split179
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movw	$1, (%rax,%rcx,2)
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, (%rdx)
	movq	(%rbx), %rax
	movl	676(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 676(%rax)
	movw	$-28801, BasicBlockSignatureTracker # imm = 0x8F7F
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB73_38
.LBB73_36:                              #   in Loop: Header=BB73_32 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$201, %ax
	cmpw	$-28760, %ax            # imm = 0x8FA8
	jne	.LBB73_80
# %bb.37:                               # %generateMTFValues.split181
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movw	$0, (%rax,%rcx,2)
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, (%rdx)
	movq	(%rbx), %rax
	movl	672(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 672(%rax)
	movw	$-28760, BasicBlockSignatureTracker # imm = 0x8FA8
	movw	$215, RunTimeSignatureAdjuster
.LBB73_38:                              #   in Loop: Header=BB73_32 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$183, %ax
	xorw	%cx, %ax
	cmpw	$-28728, %ax            # imm = 0x8FC8
	jne	.LBB73_80
# %bb.39:                               # %generateMTFValues.split183
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-28728, BasicBlockSignatureTracker # imm = 0x8FC8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jge	.LBB73_42
# %bb.40:                               #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$-28726, %ax            # imm = 0x8FCA
	jne	.LBB73_81
# %bb.41:                               # %generateMTFValues.split185
                                        #   in Loop: Header=BB73_18 Depth=1
	movw	$-28726, BasicBlockSignatureTracker # imm = 0x8FCA
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB73_44
.LBB73_42:                              #   in Loop: Header=BB73_32 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-28723, %ax            # imm = 0x8FCD
	jne	.LBB73_80
# %bb.43:                               # %generateMTFValues.split187
                                        #   in Loop: Header=BB73_32 Depth=2
	movl	$2, %ecx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %eax
	subl	$2, %eax
	cltd
	idivl	%ecx
	movl	%eax, (%rsi)
	movw	$-28723, BasicBlockSignatureTracker # imm = 0x8FCD
	movw	$173, RunTimeSignatureAdjuster
	jmp	.LBB73_32
.LBB73_44:                              #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-28712, %ax            # imm = 0x8FD8
	jne	.LBB73_81
# %bb.45:                               # %generateMTFValues.split189
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-28712, BasicBlockSignatureTracker # imm = 0x8FD8
	movw	$140, RunTimeSignatureAdjuster
.LBB73_46:                              #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$142, %ax
	xorw	%cx, %ax
	cmpw	$-28710, %ax            # imm = 0x8FDA
	jne	.LBB73_81
# %bb.47:                               # %generateMTFValues.split175
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movb	1(%rcx), %al
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movb	%al, (%rdx)
	movb	(%rcx), %al
	movb	%al, 1(%rcx)
	movq	%rcx, %rax
	addq	$1, %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movb	(%rax), %al
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-28710, BasicBlockSignatureTracker # imm = 0x8FDA
	movw	$0, RunTimeSignatureAdjuster
.LBB73_48:                              #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$-28685, %ax            # imm = 0x8FF3
	jne	.LBB73_79
# %bb.49:                               # %generateMTFValues.split191
                                        #   in Loop: Header=BB73_48 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movw	$-28685, BasicBlockSignatureTracker # imm = 0x8FF3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB73_52
# %bb.50:                               #   in Loop: Header=BB73_48 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-28677, %ax            # imm = 0x8FFB
	jne	.LBB73_79
# %bb.51:                               # %generateMTFValues.split193
                                        #   in Loop: Header=BB73_48 Depth=2
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	addq	$1, %rax
	movq	%rax, (%rdx)
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movb	(%rcx), %al
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movb	%al, (%rsi)
	movq	(%rdx), %rax
	movb	(%rax), %al
	movb	%al, (%rcx)
	movb	(%rsi), %al
	movq	(%rdx), %rcx
	movb	%al, (%rcx)
	movw	$-28677, BasicBlockSignatureTracker # imm = 0x8FFB
	movw	$33, RunTimeSignatureAdjuster
	jmp	.LBB73_48
.LBB73_52:                              #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8160, %ax              # imm = 0x1FE0
	cmpw	$-28653, %ax            # imm = 0x9013
	jne	.LBB73_81
# %bb.53:                               # %generateMTFValues.split195
                                        #   in Loop: Header=BB73_18 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movb	(%rax), %al
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	subq	%rcx, %rax
	movq	-80(%rbp), %r8          # 8-byte Reload
	movl	%eax, (%r8)
	movl	(%r8), %eax
	addl	$1, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movq	(%rbx), %rax
	movl	(%r8), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movw	$-28653, BasicBlockSignatureTracker # imm = 0x9013
	movw	$7932, RunTimeSignatureAdjuster # imm = 0x1EFC
.LBB73_54:                              #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7893, %ax              # imm = 0x1ED5
	xorw	%cx, %ax
	cmpw	$-28614, %ax            # imm = 0x903A
	jne	.LBB73_81
# %bb.55:                               # %generateMTFValues.split171
                                        #   in Loop: Header=BB73_18 Depth=1
	movw	$-28614, BasicBlockSignatureTracker # imm = 0x903A
	movw	$0, RunTimeSignatureAdjuster
# %bb.56:                               #   in Loop: Header=BB73_18 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-28611, %ax            # imm = 0x903D
	jne	.LBB73_81
# %bb.57:                               # %generateMTFValues.split197
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$-28611, BasicBlockSignatureTracker # imm = 0x903D
	movw	$7835, RunTimeSignatureAdjuster # imm = 0x1E9B
	jmp	.LBB73_18
.LBB73_58:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7824, %ax              # imm = 0x1E90
	cmpw	$-28589, %ax            # imm = 0x9053
	jne	.LBB73_84
# %bb.59:                               # %generateMTFValues.split161
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-28589, BasicBlockSignatureTracker # imm = 0x9053
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB73_76
# %bb.60:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-28558, %ax            # imm = 0x9072
	jne	.LBB73_84
# %bb.61:                               # %generateMTFValues.split199
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-28558, BasicBlockSignatureTracker # imm = 0x9072
	movw	$0, RunTimeSignatureAdjuster
.LBB73_62:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$189, %ax
	xorw	%cx, %ax
	cmpw	$-28465, %ax            # imm = 0x90CF
	jne	.LBB73_78
# %bb.63:                               # %generateMTFValues.split203
                                        #   in Loop: Header=BB73_62 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	andl	$1, %eax
	movw	$-28465, BasicBlockSignatureTracker # imm = 0x90CF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB73_66
# %bb.64:                               #   in Loop: Header=BB73_62 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$-28419, %ax            # imm = 0x90FD
	jne	.LBB73_78
# %bb.65:                               # %generateMTFValues.split205
                                        #   in Loop: Header=BB73_62 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movw	$1, (%rax,%rcx,2)
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, (%rdx)
	movq	(%rbx), %rax
	movl	676(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 676(%rax)
	movw	$-28419, BasicBlockSignatureTracker # imm = 0x90FD
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB73_68
.LBB73_66:                              #   in Loop: Header=BB73_62 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$462, %ax               # imm = 0x1CE
	cmpw	$-28415, %ax            # imm = 0x9101
	jne	.LBB73_78
# %bb.67:                               # %generateMTFValues.split207
                                        #   in Loop: Header=BB73_62 Depth=1
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	movw	$0, (%rax,%rcx,2)
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, (%rdx)
	movq	(%rbx), %rax
	movl	672(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 672(%rax)
	movw	$-28415, BasicBlockSignatureTracker # imm = 0x9101
	movw	$508, RunTimeSignatureAdjuster # imm = 0x1FC
.LBB73_68:                              #   in Loop: Header=BB73_62 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$493, %ax               # imm = 0x1ED
	xorw	%cx, %ax
	cmpw	$-28400, %ax            # imm = 0x9110
	jne	.LBB73_78
# %bb.69:                               # %generateMTFValues.split209
                                        #   in Loop: Header=BB73_62 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-28400, BasicBlockSignatureTracker # imm = 0x9110
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jge	.LBB73_72
# %bb.70:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$-28394, %ax            # imm = 0x9116
	jne	.LBB73_84
# %bb.71:                               # %generateMTFValues.split211
	movw	$-28394, BasicBlockSignatureTracker # imm = 0x9116
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB73_74
.LBB73_72:                              #   in Loop: Header=BB73_62 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$93, %ax
	cmpw	$-28339, %ax            # imm = 0x914D
	jne	.LBB73_78
# %bb.73:                               # %generateMTFValues.split213
                                        #   in Loop: Header=BB73_62 Depth=1
	movl	$2, %ecx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %eax
	subl	$2, %eax
	cltd
	idivl	%ecx
	movl	%eax, (%rsi)
	movw	$-28339, BasicBlockSignatureTracker # imm = 0x914D
	movw	$319, RunTimeSignatureAdjuster # imm = 0x13F
	jmp	.LBB73_62
.LBB73_74:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$88, %ax
	cmpw	$-28338, %ax            # imm = 0x914E
	jne	.LBB73_84
# %bb.75:                               # %generateMTFValues.split215
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-28338, BasicBlockSignatureTracker # imm = 0x914E
	movw	$285, RunTimeSignatureAdjuster # imm = 0x11D
.LBB73_76:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$453, %ax               # imm = 0x1C5
	xorw	%cx, %ax
	cmpw	$-28266, %ax            # imm = 0x9196
	jne	.LBB73_84
# %bb.77:                               # %generateMTFValues.split201
	movl	(%r15), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movq	(%rbx), %rax
	movslq	(%r15), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movl	(%rsi), %eax
	movq	(%rbx), %rcx
	movl	%eax, 668(%rcx)
	movw	$-28266, BasicBlockSignatureTracker # imm = 0x9196
	movw	$7640, RunTimeSignatureAdjuster # imm = 0x1DD8
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB73_78:                              # %CFerrorHandler.generateMTFValues.loopexit
	jmp	.LBB73_84
.LBB73_79:                              # %CFerrorHandler.generateMTFValues.loopexit1
	jmp	.LBB73_84
.LBB73_80:                              # %CFerrorHandler.generateMTFValues.loopexit2
	jmp	.LBB73_84
.LBB73_81:                              # %CFerrorHandler.generateMTFValues.loopexit3
	jmp	.LBB73_84
.LBB73_82:                              # %CFerrorHandler.generateMTFValues.loopexit4
	jmp	.LBB73_84
.LBB73_83:                              # %CFerrorHandler.generateMTFValues.loopexit5
	jmp	.LBB73_84
.LBB73_84:                              # %CFerrorHandler.generateMTFValues
	callq	FAULT_DETECTED_CFC
.Lfunc_end73:
	.size	generateMTFValues, .Lfunc_end73-generateMTFValues
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function sendMTFValues
.LCPI74_0:
	.quad	4636737291354636288     # double 100
	.text
	.p2align	4, 0x90
	.type	sendMTFValues,@function
sendMTFValues:                          # @sendMTFValues
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7620, %ax              # imm = 0x1DC4
	xorw	%cx, %ax
	cmpw	$-28246, %ax            # imm = 0x91AA
	jne	.LBB74_504
# %bb.1:                                # %sendMTFValues.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-32, %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rdi, (%r9)
	movq	(%r9), %rax
	movq	72(%rax), %rax
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	%rax, (%rcx)
	movq	(%r9), %rax
	movl	656(%rax), %eax
	movw	$-28246, BasicBlockSignatureTracker # imm = 0x91AA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$110, %ax
	cmpw	$-28220, %ax            # imm = 0x91C4
	jne	.LBB74_504
# %bb.3:                                # %sendMTFValues.split873
	movq	%rsi, -184(%rbp)        # 8-byte Spill
	movabsq	$.L.str.2.58, %rsi
	movq	stderr, %rdi
	movq	(%r9), %rax
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movl	108(%rax), %edx
	movq	(%r9), %rax
	movl	668(%rax), %ecx
	movq	(%r9), %rax
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movq	%r14, -104(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	movq	%r8, -120(%rbp)         # 8-byte Spill
	movl	124(%rax), %r8d
	movb	$0, %al
	movq	%r12, %r15
	movq	%rbx, %r12
	movq	%r13, %rbx
	movq	%r9, %r13
	movq	%r11, %r14
	callq	fprintf
	movq	-168(%rbp), %rdx        # 8-byte Reload
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	%r14, %r11
	movq	-120(%rbp), %r8         # 8-byte Reload
	movq	-160(%rbp), %r10        # 8-byte Reload
	movq	-104(%rbp), %r14        # 8-byte Reload
	movq	%r13, %r9
	movq	%rbx, %r13
	movq	%r12, %rbx
	movq	%r15, %r12
	movq	-264(%rbp), %r15        # 8-byte Reload
	movw	$-28220, BasicBlockSignatureTracker # imm = 0x91C4
	movw	$110, RunTimeSignatureAdjuster
.LBB74_4:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$103, %ax
	xorw	%cx, %ax
	cmpw	$-28211, %ax            # imm = 0x91CD
	jne	.LBB74_504
# %bb.5:                                # %sendMTFValues.split875
	movq	%rdx, -168(%rbp)        # 8-byte Spill
	movq	(%r9), %rax
	movl	124(%rax), %eax
	addl	$2, %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	$0, (%rdx)
	movw	$-28211, BasicBlockSignatureTracker # imm = 0x91CD
	movw	$0, RunTimeSignatureAdjuster
.LBB74_6:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_10 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$-28205, %ax            # imm = 0x91D3
	jne	.LBB74_503
# %bb.7:                                # %sendMTFValues.split877
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	(%rdx), %eax
	movw	$-28205, BasicBlockSignatureTracker # imm = 0x91D3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$6, %eax
	jge	.LBB74_20
# %bb.8:                                #   in Loop: Header=BB74_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$-28176, %ax            # imm = 0x91F0
	jne	.LBB74_503
# %bb.9:                                # %sendMTFValues.split879
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	$0, (%r14)
	movw	$-28176, BasicBlockSignatureTracker # imm = 0x91F0
	movw	$0, RunTimeSignatureAdjuster
.LBB74_10:                              #   Parent Loop BB74_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$-28170, %ax            # imm = 0x91F6
	jne	.LBB74_502
# %bb.11:                               # %sendMTFValues.split883
                                        #   in Loop: Header=BB74_10 Depth=2
	movl	(%r14), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-28170, BasicBlockSignatureTracker # imm = 0x91F6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_16
# %bb.12:                               #   in Loop: Header=BB74_10 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$998, %ax               # imm = 0x3E6
	cmpw	$-28144, %ax            # imm = 0x9210
	jne	.LBB74_502
# %bb.13:                               # %sendMTFValues.split885
                                        #   in Loop: Header=BB74_10 Depth=2
	movq	(%r9), %rax
	addq	$37708, %rax            # imm = 0x934C
	movslq	(%rdx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r14), %rcx
	movb	$15, (%rax,%rcx)
	movw	$-28144, BasicBlockSignatureTracker # imm = 0x9210
	movw	$0, RunTimeSignatureAdjuster
# %bb.14:                               #   in Loop: Header=BB74_10 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$-28105, %ax            # imm = 0x9237
	jne	.LBB74_502
# %bb.15:                               # %sendMTFValues.split889
                                        #   in Loop: Header=BB74_10 Depth=2
	movl	(%r14), %eax
	addl	$1, %eax
	movl	%eax, (%r14)
	movw	$-28105, BasicBlockSignatureTracker # imm = 0x9237
	movw	$967, RunTimeSignatureAdjuster # imm = 0x3C7
	jmp	.LBB74_10
.LBB74_16:                              #   in Loop: Header=BB74_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$973, %ax               # imm = 0x3CD
	cmpw	$-28101, %ax            # imm = 0x923B
	jne	.LBB74_503
# %bb.17:                               # %sendMTFValues.split887
                                        #   in Loop: Header=BB74_6 Depth=1
	movw	$-28101, BasicBlockSignatureTracker # imm = 0x923B
	movw	$0, RunTimeSignatureAdjuster
# %bb.18:                               #   in Loop: Header=BB74_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$122, %ax
	cmpw	$-28095, %ax            # imm = 0x9241
	jne	.LBB74_503
# %bb.19:                               # %sendMTFValues.split891
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, (%rdx)
	movw	$-28095, BasicBlockSignatureTracker # imm = 0x9241
	movw	$908, RunTimeSignatureAdjuster # imm = 0x38C
	jmp	.LBB74_6
.LBB74_20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$917, %ax               # imm = 0x395
	cmpw	$-28090, %ax            # imm = 0x9246
	jne	.LBB74_504
# %bb.21:                               # %sendMTFValues.split881
	movq	(%r9), %rax
	movl	668(%rax), %eax
	movw	$-28090, BasicBlockSignatureTracker # imm = 0x9246
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jg	.LBB74_24
# %bb.22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-28073, %ax            # imm = 0x9257
	jne	.LBB74_504
# %bb.23:                               # %sendMTFValues.split895
	movw	$-28073, BasicBlockSignatureTracker # imm = 0x9257
	movw	$-28656, RunTimeSignatureAdjuster # imm = 0x9010
	movl	$3001, %edi             # imm = 0xBB9
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	movq	%r13, -176(%rbp)        # 8-byte Spill
	movq	%r9, %r13
	movq	%r14, -104(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	movq	%r8, %r15
	movq	%r12, -152(%rbp)        # 8-byte Spill
	movq	%r11, %r12
	movq	%rsi, %r14
	callq	BZ2_bz__AssertH__fail
	movq	%r14, %rsi
	movq	%r12, %r11
	movq	-152(%rbp), %r12        # 8-byte Reload
	movq	%r15, %r8
	movq	-160(%rbp), %r10        # 8-byte Reload
	movq	-104(%rbp), %r14        # 8-byte Reload
	movq	%r13, %r9
	movq	-176(%rbp), %r13        # 8-byte Reload
	movq	-64(%rbp), %rbx         # 8-byte Reload
	movq	-264(%rbp), %r15        # 8-byte Reload
	movw	$-28073, BasicBlockSignatureTracker # imm = 0x9257
	movw	$-28656, RunTimeSignatureAdjuster # imm = 0x9010
	movw	$-28073, BasicBlockSignatureTracker # imm = 0x9257
	movw	$17, RunTimeSignatureAdjuster
.LBB74_24:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$221, %ax
	xorw	%cx, %ax
	cmpw	$-28005, %ax            # imm = 0x929B
	jne	.LBB74_504
# %bb.25:                               # %sendMTFValues.split893
	movq	(%r9), %rax
	movl	668(%rax), %eax
	movw	$-28005, BasicBlockSignatureTracker # imm = 0x929B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$200, %eax
	jge	.LBB74_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-27987, %ax            # imm = 0x92AD
	jne	.LBB74_504
# %bb.27:                               # %sendMTFValues.split897
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$2, (%rax)
	movw	$-27987, BasicBlockSignatureTracker # imm = 0x92AD
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_48
.LBB74_28:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-27974, %ax            # imm = 0x92BA
	jne	.LBB74_504
# %bb.29:                               # %sendMTFValues.split899
	movq	(%r9), %rax
	movl	668(%rax), %eax
	movw	$-27974, BasicBlockSignatureTracker # imm = 0x92BA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$600, %eax              # imm = 0x258
	jge	.LBB74_32
# %bb.30:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$114, %ax
	cmpw	$-27960, %ax            # imm = 0x92C8
	jne	.LBB74_504
# %bb.31:                               # %sendMTFValues.split903
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$3, (%rax)
	movw	$-27960, BasicBlockSignatureTracker # imm = 0x92C8
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_46
.LBB74_32:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$105, %ax
	cmpw	$-27949, %ax            # imm = 0x92D3
	jne	.LBB74_504
# %bb.33:                               # %sendMTFValues.split905
	movq	(%r9), %rax
	movl	668(%rax), %eax
	movw	$-27949, BasicBlockSignatureTracker # imm = 0x92D3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1200, %eax             # imm = 0x4B0
	jge	.LBB74_36
# %bb.34:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-27948, %ax            # imm = 0x92D4
	jne	.LBB74_504
# %bb.35:                               # %sendMTFValues.split909
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$4, (%rax)
	movw	$-27948, BasicBlockSignatureTracker # imm = 0x92D4
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_44
.LBB74_36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$-27926, %ax            # imm = 0x92EA
	jne	.LBB74_504
# %bb.37:                               # %sendMTFValues.split911
	movq	(%r9), %rax
	movl	668(%rax), %eax
	movw	$-27926, BasicBlockSignatureTracker # imm = 0x92EA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2400, %eax             # imm = 0x960
	jge	.LBB74_40
# %bb.38:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-27912, %ax            # imm = 0x92F8
	jne	.LBB74_504
# %bb.39:                               # %sendMTFValues.split915
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$5, (%rax)
	movw	$-27912, BasicBlockSignatureTracker # imm = 0x92F8
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_42
.LBB74_40:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$-27905, %ax            # imm = 0x92FF
	jne	.LBB74_504
# %bb.41:                               # %sendMTFValues.split917
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$6, (%rax)
	movw	$-27905, BasicBlockSignatureTracker # imm = 0x92FF
	movw	$7, RunTimeSignatureAdjuster
.LBB74_42:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$472, %ax               # imm = 0x1D8
	xorw	%cx, %ax
	cmpw	$-27872, %ax            # imm = 0x9320
	jne	.LBB74_504
# %bb.43:                               # %sendMTFValues.split919
	movw	$-27872, BasicBlockSignatureTracker # imm = 0x9320
	movw	$500, RunTimeSignatureAdjuster # imm = 0x1F4
.LBB74_44:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$485, %ax               # imm = 0x1E5
	xorw	%cx, %ax
	cmpw	$-27855, %ax            # imm = 0x9331
	jne	.LBB74_504
# %bb.45:                               # %sendMTFValues.split913
	movw	$-27855, BasicBlockSignatureTracker # imm = 0x9331
	movw	$505, RunTimeSignatureAdjuster # imm = 0x1F9
.LBB74_46:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$398, %ax               # imm = 0x18E
	xorw	%cx, %ax
	cmpw	$-27834, %ax            # imm = 0x9346
	jne	.LBB74_504
# %bb.47:                               # %sendMTFValues.split907
	movw	$-27834, BasicBlockSignatureTracker # imm = 0x9346
	movw	$491, RunTimeSignatureAdjuster # imm = 0x1EB
.LBB74_48:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$455, %ax               # imm = 0x1C7
	xorw	%cx, %ax
	cmpw	$-27798, %ax            # imm = 0x936A
	jne	.LBB74_504
# %bb.49:                               # %sendMTFValues.split901
	movq	%r13, -176(%rbp)        # 8-byte Spill
	movq	%r12, -152(%rbp)        # 8-byte Spill
	movq	%r10, -160(%rbp)        # 8-byte Spill
	movq	%r14, -104(%rbp)        # 8-byte Spill
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movl	%eax, (%rdi)
	movq	(%r9), %rax
	movl	668(%rax), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	$0, (%rbx)
	movw	$-27798, BasicBlockSignatureTracker # imm = 0x936A
	movw	$0, RunTimeSignatureAdjuster
.LBB74_50:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_54 Depth 2
                                        #     Child Loop BB74_84 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$18, %ax
	xorw	%cx, %ax
	cmpw	$-27784, %ax            # imm = 0x9378
	jne	.LBB74_501
# %bb.51:                               # %sendMTFValues.split921
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	(%rdi), %eax
	movw	$-27784, BasicBlockSignatureTracker # imm = 0x9378
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB74_102
# %bb.52:                               #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$186, %ax
	cmpw	$-27710, %ax            # imm = 0x93C2
	jne	.LBB74_501
# %bb.53:                               # %sendMTFValues.split923
                                        #   in Loop: Header=BB74_50 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	cltd
	idivl	(%rdi)
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rbx), %eax
	subl	$1, %eax
	movl	%eax, (%r11)
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movl	$0, (%rdi)
	movw	$-27710, BasicBlockSignatureTracker # imm = 0x93C2
	movw	$0, RunTimeSignatureAdjuster
.LBB74_54:                              #   Parent Loop BB74_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19, %ax
	xorw	%cx, %ax
	cmpw	$-27695, %ax            # imm = 0x93D1
	jne	.LBB74_500
# %bb.55:                               # %sendMTFValues.split927
                                        #   in Loop: Header=BB74_54 Depth=2
	xorl	%eax, %eax
	movl	(%rdi), %ecx
	movl	(%rdx), %edx
	movw	$-27695, BasicBlockSignatureTracker # imm = 0x93D1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jge	.LBB74_58
# %bb.56:                               #   in Loop: Header=BB74_54 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$-27649, %ax            # imm = 0x93FF
	jne	.LBB74_500
# %bb.57:                               # %sendMTFValues.split929
                                        #   in Loop: Header=BB74_54 Depth=2
	movl	(%r11), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	setl	%al
	movw	$-27649, BasicBlockSignatureTracker # imm = 0x93FF
	movw	$46, RunTimeSignatureAdjuster
.LBB74_58:                              #   in Loop: Header=BB74_54 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$1947, %cx              # imm = 0x79B
	xorw	%dx, %cx
	cmpw	$-27574, %cx            # imm = 0x944A
	jne	.LBB74_500
# %bb.59:                               # %sendMTFValues.split931
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	%rsi, -184(%rbp)        # 8-byte Spill
	movq	%r11, %r14
	movq	%r8, %r12
	movq	%rbx, %r13
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movw	$-27574, BasicBlockSignatureTracker # imm = 0x944A
	movw	$0, RunTimeSignatureAdjuster
	testb	$1, %al
	jne	.LBB74_60
	jmp	.LBB74_62
.LBB74_60:                              #   in Loop: Header=BB74_54 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-27566, %ax            # imm = 0x9452
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r13, %rbx
	movq	%r12, %r8
	movq	%r14, %r11
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	-224(%rbp), %rdi        # 8-byte Reload
	jne	.LBB74_500
# %bb.61:                               # %sendMTFValues.split933
                                        #   in Loop: Header=BB74_54 Depth=2
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%r11)
	movq	(%r9), %rax
	movslq	(%r11), %rcx
	movl	672(%rax,%rcx,4), %eax
	addl	(%rdi), %eax
	movl	%eax, (%rdi)
	movw	$-27566, BasicBlockSignatureTracker # imm = 0x9452
	movw	$1936, RunTimeSignatureAdjuster # imm = 0x790
	jmp	.LBB74_54
.LBB74_62:                              #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-27565, %ax            # imm = 0x9453
	movq	%r13, %rcx
	movq	%r14, %rax
	jne	.LBB74_501
# %bb.63:                               # %sendMTFValues.split935
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	(%rax), %eax
	movl	(%rcx), %ecx
	movw	$-27565, BasicBlockSignatureTracker # imm = 0x9453
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB74_78
# %bb.64:                               #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-27554, %ax            # imm = 0x945E
	movq	-144(%rbp), %rax        # 8-byte Reload
	jne	.LBB74_501
# %bb.65:                               # %sendMTFValues.split937
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-27554, BasicBlockSignatureTracker # imm = 0x945E
	movw	$13, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB74_78
# %bb.66:                               # %Buffer__
                                        #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-16256, %ax            # imm = 0xC080
	cmpw	$21726, %ax             # imm = 0x54DE
	jne	.LBB74_501
# %bb.67:                               # %sendMTFValues.split941
                                        #   in Loop: Header=BB74_50 Depth=1
	movw	$21726, BasicBlockSignatureTracker # imm = 0x54DE
	movw	$-16256, RunTimeSignatureAdjuster # imm = 0xC080
# %bb.68:                               #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$34, %ax
	xorw	%cx, %ax
	cmpw	$-27524, %ax            # imm = 0x947C
	movq	-144(%rbp), %rax        # 8-byte Reload
	jne	.LBB74_501
# %bb.69:                               # %sendMTFValues.split1325
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	(%rax), %eax
	movw	$-27524, BasicBlockSignatureTracker # imm = 0x947C
	movw	$47, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	je	.LBB74_78
# %bb.70:                               # %Buffer__1
                                        #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16262, %ax             # imm = 0x3F86
	cmpw	$-21510, %ax            # imm = 0xABFA
	jne	.LBB74_501
# %bb.71:                               # %sendMTFValues.split943
                                        #   in Loop: Header=BB74_50 Depth=1
	movw	$-21510, BasicBlockSignatureTracker # imm = 0xABFA
	movw	$16262, RunTimeSignatureAdjuster # imm = 0x3F86
# %bb.72:                               #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$252, %ax
	xorw	%cx, %ax
	cmpw	$-27520, %ax            # imm = 0x9480
	movq	-144(%rbp), %rdx        # 8-byte Reload
	jne	.LBB74_501
# %bb.73:                               # %sendMTFValues.split1327
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	$2, %ecx
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	subl	(%rdx), %eax
	cltd
	idivl	%ecx
	movw	$-27520, BasicBlockSignatureTracker # imm = 0x9480
	movw	$211, RunTimeSignatureAdjuster
	cmpl	$1, %edx
	jne	.LBB74_78
# %bb.74:                               # %Buffer__2
                                        #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17039, %ax             # imm = 0x428F
	cmpw	$-10737, %ax            # imm = 0xD60F
	jne	.LBB74_501
# %bb.75:                               # %sendMTFValues.split945
                                        #   in Loop: Header=BB74_50 Depth=1
	movw	$-10737, BasicBlockSignatureTracker # imm = 0xD60F
	movw	$17039, RunTimeSignatureAdjuster # imm = 0x428F
# %bb.76:                               #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$71, %ax
	xorw	%cx, %ax
	cmpw	$-27449, %ax            # imm = 0x94C7
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%r14, %rdx
	jne	.LBB74_501
# %bb.77:                               # %sendMTFValues.split1329
                                        #   in Loop: Header=BB74_50 Depth=1
	movq	(%rax), %rax
	movslq	(%rdx), %rcx
	movl	672(%rax,%rcx,4), %eax
	movq	-224(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	subl	%eax, %ecx
	movl	%ecx, (%rsi)
	movl	(%rdx), %eax
	addl	$-1, %eax
	movl	%eax, (%rdx)
	movw	$-27449, BasicBlockSignatureTracker # imm = 0x94C7
	movw	$148, RunTimeSignatureAdjuster
.LBB74_78:                              #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$157, %ax
	xorw	%cx, %ax
	cmpw	$-27442, %ax            # imm = 0x94CE
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB74_501
# %bb.79:                               # %sendMTFValues.split939
                                        #   in Loop: Header=BB74_50 Depth=1
	movq	(%rax), %rax
	movl	656(%rax), %eax
	movw	$-27442, BasicBlockSignatureTracker # imm = 0x94CE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_82
# %bb.80:                               #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$478, %ax               # imm = 0x1DE
	cmpw	$-27376, %ax            # imm = 0x9510
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%r13, %rax
	movq	%r14, %r8
	movq	-144(%rbp), %rcx        # 8-byte Reload
	jne	.LBB74_501
# %bb.81:                               # %sendMTFValues.split947
                                        #   in Loop: Header=BB74_50 Depth=1
	movabsq	$.L.str.3.59, %rsi
	movsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	stderr, %rdi
	movl	(%rcx), %edx
	movl	(%rax), %ecx
	movl	(%r8), %r8d
	movq	-224(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r9d
	movl	(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	mulsd	%xmm1, %xmm0
	movq	(%r10), %rax
	movl	668(%rax), %eax
	cvtsi2ssl	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movb	$1, %al
	callq	fprintf
	movw	$-27376, BasicBlockSignatureTracker # imm = 0x9510
	movw	$478, RunTimeSignatureAdjuster # imm = 0x1DE
.LBB74_82:                              #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$475, %ax               # imm = 0x1DB
	xorw	%cx, %ax
	cmpw	$-27371, %ax            # imm = 0x9515
	jne	.LBB74_501
# %bb.83:                               # %sendMTFValues.split949
                                        #   in Loop: Header=BB74_50 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-27371, BasicBlockSignatureTracker # imm = 0x9515
	movw	$0, RunTimeSignatureAdjuster
.LBB74_84:                              #   Parent Loop BB74_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$38, %ax
	xorw	%cx, %ax
	cmpw	$-27341, %ax            # imm = 0x9533
	jne	.LBB74_499
# %bb.85:                               # %sendMTFValues.split951
                                        #   in Loop: Header=BB74_84 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-27341, BasicBlockSignatureTracker # imm = 0x9533
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_100
# %bb.86:                               #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-27334, %ax            # imm = 0x953A
	jne	.LBB74_499
# %bb.87:                               # %sendMTFValues.split953
                                        #   in Loop: Header=BB74_84 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r13), %ecx
	movw	$-27334, BasicBlockSignatureTracker # imm = 0x953A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB74_94
# %bb.88:                               #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$-27302, %ax            # imm = 0x955A
	jne	.LBB74_499
# %bb.89:                               # %sendMTFValues.split957
                                        #   in Loop: Header=BB74_84 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r14), %ecx
	movw	$-27302, BasicBlockSignatureTracker # imm = 0x955A
	movw	$96, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB74_94
# %bb.90:                               # %Buffer__3
                                        #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14423, %ax             # imm = 0x3857
	cmpw	$-21235, %ax            # imm = 0xAD0D
	jne	.LBB74_499
# %bb.91:                               # %sendMTFValues.split961
                                        #   in Loop: Header=BB74_84 Depth=2
	movw	$-21235, BasicBlockSignatureTracker # imm = 0xAD0D
	movw	$14423, RunTimeSignatureAdjuster # imm = 0x3857
# %bb.92:                               #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$54, %ax
	xorw	%cx, %ax
	cmpw	$-27284, %ax            # imm = 0x956C
	jne	.LBB74_499
# %bb.93:                               # %sendMTFValues.split1331
                                        #   in Loop: Header=BB74_84 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movb	$0, (%rax,%rcx)
	movw	$-27284, BasicBlockSignatureTracker # imm = 0x956C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_96
.LBB74_94:                              #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$163, %ax
	xorw	%cx, %ax
	cmpw	$-27239, %ax            # imm = 0x9599
	jne	.LBB74_499
# %bb.95:                               # %sendMTFValues.split959
                                        #   in Loop: Header=BB74_84 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movb	$15, (%rax,%rcx)
	movw	$-27239, BasicBlockSignatureTracker # imm = 0x9599
	movw	$245, RunTimeSignatureAdjuster
.LBB74_96:                              #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$221, %ax
	xorw	%cx, %ax
	cmpw	$-27215, %ax            # imm = 0x95B1
	jne	.LBB74_499
# %bb.97:                               # %sendMTFValues.split963
                                        #   in Loop: Header=BB74_84 Depth=2
	movw	$-27215, BasicBlockSignatureTracker # imm = 0x95B1
	movw	$0, RunTimeSignatureAdjuster
# %bb.98:                               #   in Loop: Header=BB74_84 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$-27190, %ax            # imm = 0x95CA
	jne	.LBB74_499
# %bb.99:                               # %sendMTFValues.split965
                                        #   in Loop: Header=BB74_84 Depth=2
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-27190, BasicBlockSignatureTracker # imm = 0x95CA
	movw	$223, RunTimeSignatureAdjuster
	jmp	.LBB74_84
.LBB74_100:                             #   in Loop: Header=BB74_50 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$214, %ax
	cmpw	$-27163, %ax            # imm = 0x95E5
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r13, %rbx
	movq	%r12, %r8
	movq	%r14, %r11
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	-144(%rbp), %rdi        # 8-byte Reload
	jne	.LBB74_501
# %bb.101:                              # %sendMTFValues.split955
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	(%rdi), %eax
	addl	$-1, %eax
	movl	%eax, (%rdi)
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movq	-224(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-136(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %ecx
	subl	%eax, %ecx
	movl	%ecx, (%rdx)
	movw	$-27163, BasicBlockSignatureTracker # imm = 0x95E5
	movw	$1679, RunTimeSignatureAdjuster # imm = 0x68F
	jmp	.LBB74_50
.LBB74_102:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1674, %ax              # imm = 0x68A
	cmpw	$-27150, %ax            # imm = 0x95F2
	jne	.LBB74_504
# %bb.103:                              # %sendMTFValues.split925
	movq	-256(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-27150, BasicBlockSignatureTracker # imm = 0x95F2
	movw	$0, RunTimeSignatureAdjuster
.LBB74_104:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_108 Depth 2
                                        #     Child Loop BB74_116 Depth 2
                                        #       Child Loop BB74_120 Depth 3
                                        #     Child Loop BB74_134 Depth 2
                                        #     Child Loop BB74_144 Depth 2
                                        #       Child Loop BB74_154 Depth 3
                                        #       Child Loop BB74_170 Depth 3
                                        #         Child Loop BB74_174 Depth 4
                                        #       Child Loop BB74_188 Depth 3
                                        #       Child Loop BB74_208 Depth 3
                                        #     Child Loop BB74_222 Depth 2
                                        #     Child Loop BB74_232 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1000, %ax              # imm = 0x3E8
	xorw	%cx, %ax
	cmpw	$-27110, %ax            # imm = 0x961A
	jne	.LBB74_498
# %bb.105:                              # %sendMTFValues.split967
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	-256(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-27110, BasicBlockSignatureTracker # imm = 0x961A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$4, %eax
	jge	.LBB74_242
# %bb.106:                              #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-27103, %ax            # imm = 0x9621
	jne	.LBB74_498
# %bb.107:                              # %sendMTFValues.split969
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	%rsi, %r14
	movq	%r11, %r13
	movq	%r8, -120(%rbp)         # 8-byte Spill
	movq	%rbx, %r12
	movq	%r9, %rbx
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-27103, BasicBlockSignatureTracker # imm = 0x9621
	movw	$0, RunTimeSignatureAdjuster
.LBB74_108:                             #   Parent Loop BB74_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$11, %ax
	xorw	%cx, %ax
	cmpw	$-27094, %ax            # imm = 0x962A
	jne	.LBB74_497
# %bb.109:                              # %sendMTFValues.split973
                                        #   in Loop: Header=BB74_108 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-27094, BasicBlockSignatureTracker # imm = 0x962A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_114
# %bb.110:                              #   in Loop: Header=BB74_108 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-27075, %ax            # imm = 0x963D
	jne	.LBB74_497
# %bb.111:                              # %sendMTFValues.split975
                                        #   in Loop: Header=BB74_108 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movl	$0, (%rcx,%rax,4)
	movw	$-27075, BasicBlockSignatureTracker # imm = 0x963D
	movw	$0, RunTimeSignatureAdjuster
# %bb.112:                              #   in Loop: Header=BB74_108 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$-27048, %ax            # imm = 0x9658
	jne	.LBB74_497
# %bb.113:                              # %sendMTFValues.split979
                                        #   in Loop: Header=BB74_108 Depth=2
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-27048, BasicBlockSignatureTracker # imm = 0x9658
	movw	$121, RunTimeSignatureAdjuster
	jmp	.LBB74_108
.LBB74_114:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$94, %ax
	cmpw	$-27020, %ax            # imm = 0x9674
	jne	.LBB74_498
# %bb.115:                              # %sendMTFValues.split977
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-27020, BasicBlockSignatureTracker # imm = 0x9674
	movw	$0, RunTimeSignatureAdjuster
.LBB74_116:                             #   Parent Loop BB74_104 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_120 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$240, %ax
	xorw	%cx, %ax
	cmpw	$-27004, %ax            # imm = 0x9684
	jne	.LBB74_496
# %bb.117:                              # %sendMTFValues.split981
                                        #   in Loop: Header=BB74_116 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-27004, BasicBlockSignatureTracker # imm = 0x9684
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_130
# %bb.118:                              #   in Loop: Header=BB74_116 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-26984, %ax            # imm = 0x9698
	jne	.LBB74_496
# %bb.119:                              # %sendMTFValues.split983
                                        #   in Loop: Header=BB74_116 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-26984, BasicBlockSignatureTracker # imm = 0x9698
	movw	$0, RunTimeSignatureAdjuster
.LBB74_120:                             #   Parent Loop BB74_104 Depth=1
                                        #     Parent Loop BB74_116 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$37, %ax
	xorw	%cx, %ax
	cmpw	$-26947, %ax            # imm = 0x96BD
	jne	.LBB74_491
# %bb.121:                              # %sendMTFValues.split987
                                        #   in Loop: Header=BB74_120 Depth=3
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-26947, BasicBlockSignatureTracker # imm = 0x96BD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_126
# %bb.122:                              #   in Loop: Header=BB74_120 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$98, %ax
	cmpw	$-26913, %ax            # imm = 0x96DF
	jne	.LBB74_491
# %bb.123:                              # %sendMTFValues.split989
                                        #   in Loop: Header=BB74_120 Depth=3
	movq	(%rbx), %rax
	addq	$45448, %rax            # imm = 0xB188
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
	movw	$-26913, BasicBlockSignatureTracker # imm = 0x96DF
	movw	$0, RunTimeSignatureAdjuster
# %bb.124:                              #   in Loop: Header=BB74_120 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$-26898, %ax            # imm = 0x96EE
	jne	.LBB74_491
# %bb.125:                              # %sendMTFValues.split993
                                        #   in Loop: Header=BB74_120 Depth=3
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26898, BasicBlockSignatureTracker # imm = 0x96EE
	movw	$118, RunTimeSignatureAdjuster
	jmp	.LBB74_120
.LBB74_126:                             #   in Loop: Header=BB74_116 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$426, %ax               # imm = 0x1AA
	cmpw	$-26857, %ax            # imm = 0x9717
	jne	.LBB74_496
# %bb.127:                              # %sendMTFValues.split991
                                        #   in Loop: Header=BB74_116 Depth=2
	movw	$-26857, BasicBlockSignatureTracker # imm = 0x9717
	movw	$0, RunTimeSignatureAdjuster
# %bb.128:                              #   in Loop: Header=BB74_116 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-26853, %ax            # imm = 0x971B
	jne	.LBB74_496
# %bb.129:                              # %sendMTFValues.split995
                                        #   in Loop: Header=BB74_116 Depth=2
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26853, BasicBlockSignatureTracker # imm = 0x971B
	movw	$367, RunTimeSignatureAdjuster # imm = 0x16F
	jmp	.LBB74_116
.LBB74_130:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$466, %ax               # imm = 0x1D2
	cmpw	$-26794, %ax            # imm = 0x9756
	jne	.LBB74_498
# %bb.131:                              # %sendMTFValues.split985
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-26794, BasicBlockSignatureTracker # imm = 0x9756
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$6, %eax
	jne	.LBB74_142
# %bb.132:                              #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-26786, %ax            # imm = 0x975E
	jne	.LBB74_498
# %bb.133:                              # %sendMTFValues.split997
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-26786, BasicBlockSignatureTracker # imm = 0x975E
	movw	$0, RunTimeSignatureAdjuster
.LBB74_134:                             #   Parent Loop BB74_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$-26761, %ax            # imm = 0x9777
	jne	.LBB74_495
# %bb.135:                              # %sendMTFValues.split1001
                                        #   in Loop: Header=BB74_134 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-26761, BasicBlockSignatureTracker # imm = 0x9777
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_140
# %bb.136:                              #   in Loop: Header=BB74_134 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$241, %ax
	cmpw	$-26746, %ax            # imm = 0x9786
	jne	.LBB74_495
# %bb.137:                              # %sendMTFValues.split1003
                                        #   in Loop: Header=BB74_134 Depth=2
	movq	%rbx, %rsi
	movq	(%rsi), %rax
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movslq	(%rdi), %rcx
	movzbl	37966(%rax,%rcx), %eax
	shll	$16, %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movzbl	37708(%rcx,%rdx), %ecx
	orl	%ecx, %eax
	movq	(%rsi), %rcx
	addq	$51640, %rcx            # imm = 0xC9B8
	movslq	(%rdi), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movq	(%rsi), %rax
	movslq	(%rdi), %rcx
	movzbl	38482(%rax,%rcx), %eax
	shll	$16, %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movzbl	38224(%rcx,%rdx), %ecx
	orl	%ecx, %eax
	movq	(%rsi), %rcx
	addq	$51640, %rcx            # imm = 0xC9B8
	movslq	(%rdi), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movq	(%rsi), %rax
	movslq	(%rdi), %rcx
	movzbl	38998(%rax,%rcx), %eax
	shll	$16, %eax
	movq	(%rsi), %rcx
	movslq	(%rdi), %rdx
	movzbl	38740(%rcx,%rdx), %ecx
	orl	%ecx, %eax
	movq	(%rsi), %rcx
	addq	$51640, %rcx            # imm = 0xC9B8
	movslq	(%rdi), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movw	$-26746, BasicBlockSignatureTracker # imm = 0x9786
	movw	$0, RunTimeSignatureAdjuster
# %bb.138:                              #   in Loop: Header=BB74_134 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-26726, %ax            # imm = 0x979A
	jne	.LBB74_495
# %bb.139:                              # %sendMTFValues.split1007
                                        #   in Loop: Header=BB74_134 Depth=2
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26726, BasicBlockSignatureTracker # imm = 0x979A
	movw	$196, RunTimeSignatureAdjuster
	jmp	.LBB74_134
.LBB74_140:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$210, %ax
	cmpw	$-26715, %ax            # imm = 0x97A5
	jne	.LBB74_498
# %bb.141:                              # %sendMTFValues.split1005
                                        #   in Loop: Header=BB74_104 Depth=1
	movw	$-26715, BasicBlockSignatureTracker # imm = 0x97A5
	movw	$243, RunTimeSignatureAdjuster
.LBB74_142:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$150, %ax
	xorw	%cx, %ax
	cmpw	$-26688, %ax            # imm = 0x97C0
	movq	%r12, %rax
	movq	%r14, %rcx
	jne	.LBB74_498
# %bb.143:                              # %sendMTFValues.split999
                                        #   in Loop: Header=BB74_104 Depth=1
	movl	$0, (%rcx)
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movl	$0, (%rcx)
	movl	$0, (%rax)
	movw	$-26688, BasicBlockSignatureTracker # imm = 0x97C0
	movw	$0, RunTimeSignatureAdjuster
.LBB74_144:                             #   Parent Loop BB74_104 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_154 Depth 3
                                        #       Child Loop BB74_170 Depth 3
                                        #         Child Loop BB74_174 Depth 4
                                        #       Child Loop BB74_188 Depth 3
                                        #       Child Loop BB74_208 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$-26663, %ax            # imm = 0x97D9
	jne	.LBB74_494
# %bb.145:                              # %sendMTFValues.split1009
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	(%r12), %eax
	movq	(%rbx), %rcx
	movl	668(%rcx), %ecx
	movw	$-26663, BasicBlockSignatureTracker # imm = 0x97D9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB74_148
# %bb.146:                              #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$-26638, %ax            # imm = 0x97F2
	jne	.LBB74_498
# %bb.147:                              # %sendMTFValues.split1011
                                        #   in Loop: Header=BB74_104 Depth=1
	movw	$-26638, BasicBlockSignatureTracker # imm = 0x97F2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_218
.LBB74_148:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4047, %ax              # imm = 0xFCF
	cmpw	$-26602, %ax            # imm = 0x9816
	jne	.LBB74_494
# %bb.149:                              # %sendMTFValues.split1013
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	(%r12), %eax
	addl	$50, %eax
	subl	$1, %eax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	(%rbx), %rcx
	movl	668(%rcx), %ecx
	movw	$-26602, BasicBlockSignatureTracker # imm = 0x9816
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB74_152
# %bb.150:                              #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$-26566, %ax            # imm = 0x983A
	jne	.LBB74_494
# %bb.151:                              # %sendMTFValues.split1017
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	(%rbx), %rax
	movl	668(%rax), %eax
	subl	$1, %eax
	movl	%eax, (%r13)
	movw	$-26566, BasicBlockSignatureTracker # imm = 0x983A
	movw	$44, RunTimeSignatureAdjuster
.LBB74_152:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$93, %ax
	xorw	%cx, %ax
	cmpw	$-26549, %ax            # imm = 0x984B
	jne	.LBB74_494
# %bb.153:                              # %sendMTFValues.split1019
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-26549, BasicBlockSignatureTracker # imm = 0x984B
	movw	$0, RunTimeSignatureAdjuster
.LBB74_154:                             #   Parent Loop BB74_104 Depth=1
                                        #     Parent Loop BB74_144 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$42, %ax
	xorw	%cx, %ax
	cmpw	$-26527, %ax            # imm = 0x9861
	jne	.LBB74_490
# %bb.155:                              # %sendMTFValues.split1021
                                        #   in Loop: Header=BB74_154 Depth=3
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-26527, BasicBlockSignatureTracker # imm = 0x9861
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_160
# %bb.156:                              #   in Loop: Header=BB74_154 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-26519, %ax            # imm = 0x9869
	jne	.LBB74_490
# %bb.157:                              # %sendMTFValues.split1023
                                        #   in Loop: Header=BB74_154 Depth=3
	movq	-72(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movw	$0, (%rcx,%rax,2)
	movw	$-26519, BasicBlockSignatureTracker # imm = 0x9869
	movw	$0, RunTimeSignatureAdjuster
# %bb.158:                              #   in Loop: Header=BB74_154 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$-26513, %ax            # imm = 0x986F
	jne	.LBB74_490
# %bb.159:                              # %sendMTFValues.split1027
                                        #   in Loop: Header=BB74_154 Depth=3
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26513, BasicBlockSignatureTracker # imm = 0x986F
	movw	$36, RunTimeSignatureAdjuster
	jmp	.LBB74_154
.LBB74_160:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$214, %ax
	cmpw	$-26441, %ax            # imm = 0x98B7
	jne	.LBB74_494
# %bb.161:                              # %sendMTFValues.split1025
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-26441, BasicBlockSignatureTracker # imm = 0x98B7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$6, %eax
	jne	.LBB74_168
# %bb.162:                              #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-26437, %ax            # imm = 0x98BB
	jne	.LBB74_494
# %bb.163:                              # %sendMTFValues.split1029
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	$50, %eax
	movl	(%r13), %ecx
	subl	(%r12), %ecx
	addl	$1, %ecx
	movw	$-26437, BasicBlockSignatureTracker # imm = 0x98BB
	movw	$12, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB74_168
# %bb.164:                              # %Buffer__4
                                        #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21736, %ax             # imm = 0x54E8
	cmpw	$-13229, %ax            # imm = 0xCC53
	jne	.LBB74_494
# %bb.165:                              # %sendMTFValues.split1033
                                        #   in Loop: Header=BB74_144 Depth=2
	movw	$-13229, BasicBlockSignatureTracker # imm = 0xCC53
	movw	$21736, RunTimeSignatureAdjuster # imm = 0x54E8
# %bb.166:                              #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$121, %ax
	xorw	%cx, %ax
	cmpw	$-26430, %ax            # imm = 0x98C2
	jne	.LBB74_494
# %bb.167:                              # %sendMTFValues.split1333
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	-312(%rbp), %r10        # 8-byte Reload
	movl	$0, (%r10)
	movq	-320(%rbp), %r11        # 8-byte Reload
	movl	$0, (%r11)
	movq	-328(%rbp), %rsi        # 8-byte Reload
	movl	$0, (%rsi)
	movq	-56(%rbp), %r9          # 8-byte Reload
	movq	(%r9), %rax
	movq	%r12, %r8
	movl	(%r8), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-304(%rbp), %rdi        # 8-byte Reload
	movw	%ax, (%rdi)
	movq	%rbx, %rdx
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$5, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$6, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$7, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$8, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$9, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$10, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$11, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$13, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$14, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$16, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$17, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$18, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$19, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$20, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$21, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$22, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$23, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$24, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$25, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$26, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$27, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$28, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$29, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$30, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$31, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$32, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$33, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$35, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$36, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$37, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$38, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$39, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$40, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$41, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$42, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$43, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$44, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$45, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$46, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$47, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$48, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movq	(%r9), %rax
	movl	(%r8), %ecx
	addl	$49, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rdi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	addl	(%r11), %eax
	movl	%eax, (%r11)
	movq	(%rdx), %rax
	addq	$51640, %rax            # imm = 0xC9B8
	movzwl	(%rdi), %ecx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	addl	(%r10), %eax
	movl	%eax, (%r10)
	movl	(%rsi), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movw	%ax, (%rcx)
	movl	(%rsi), %eax
	shrl	$16, %eax
	movw	%ax, 2(%rcx)
	movl	(%r11), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movw	%ax, 4(%rcx)
	movl	(%r11), %eax
	shrl	$16, %eax
	movw	%ax, 6(%rcx)
	movl	(%r10), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movw	%ax, 8(%rcx)
	movl	(%r10), %eax
	shrl	$16, %eax
	movw	%ax, 10(%rcx)
	movw	$-26430, BasicBlockSignatureTracker # imm = 0x98C2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_186
.LBB74_168:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$104, %ax
	xorw	%cx, %ax
	cmpw	$-26401, %ax            # imm = 0x98DF
	jne	.LBB74_494
# %bb.169:                              # %sendMTFValues.split1031
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	(%r12), %eax
	movl	%eax, (%r15)
	movw	$-26401, BasicBlockSignatureTracker # imm = 0x98DF
	movw	$0, RunTimeSignatureAdjuster
.LBB74_170:                             #   Parent Loop BB74_104 Depth=1
                                        #     Parent Loop BB74_144 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_174 Depth 4
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$459, %ax               # imm = 0x1CB
	xorw	%cx, %ax
	cmpw	$-26348, %ax            # imm = 0x9914
	jne	.LBB74_489
# %bb.171:                              # %sendMTFValues.split1037
                                        #   in Loop: Header=BB74_170 Depth=3
	movl	(%r15), %eax
	movl	(%r13), %ecx
	movw	$-26348, BasicBlockSignatureTracker # imm = 0x9914
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB74_184
# %bb.172:                              #   in Loop: Header=BB74_170 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-26340, %ax            # imm = 0x991C
	jne	.LBB74_489
# %bb.173:                              # %sendMTFValues.split1039
                                        #   in Loop: Header=BB74_170 Depth=3
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movslq	(%r15), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-280(%rbp), %rcx        # 8-byte Reload
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-26340, BasicBlockSignatureTracker # imm = 0x991C
	movw	$0, RunTimeSignatureAdjuster
.LBB74_174:                             #   Parent Loop BB74_104 Depth=1
                                        #     Parent Loop BB74_144 Depth=2
                                        #       Parent Loop BB74_170 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$-26312, %ax            # imm = 0x9938
	jne	.LBB74_486
# %bb.175:                              # %sendMTFValues.split1043
                                        #   in Loop: Header=BB74_174 Depth=4
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-26312, BasicBlockSignatureTracker # imm = 0x9938
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_180
# %bb.176:                              #   in Loop: Header=BB74_174 Depth=4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$-26301, %ax            # imm = 0x9943
	jne	.LBB74_486
# %bb.177:                              # %sendMTFValues.split1045
                                        #   in Loop: Header=BB74_174 Depth=4
	movq	(%rbx), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movq	-280(%rbp), %rcx        # 8-byte Reload
	movzwl	(%rcx), %ecx
	movzbl	(%rax,%rcx), %eax
	movslq	(%rdx), %rcx
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movzwl	(%rsi,%rcx,2), %edx
	addl	%eax, %edx
	movw	%dx, (%rsi,%rcx,2)
	movw	$-26301, BasicBlockSignatureTracker # imm = 0x9943
	movw	$0, RunTimeSignatureAdjuster
# %bb.178:                              #   in Loop: Header=BB74_174 Depth=4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-26258, %ax            # imm = 0x996E
	jne	.LBB74_486
# %bb.179:                              # %sendMTFValues.split1049
                                        #   in Loop: Header=BB74_174 Depth=4
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26258, BasicBlockSignatureTracker # imm = 0x996E
	movw	$114, RunTimeSignatureAdjuster
	jmp	.LBB74_174
.LBB74_180:                             #   in Loop: Header=BB74_170 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$187, %ax
	cmpw	$-26237, %ax            # imm = 0x9983
	jne	.LBB74_489
# %bb.181:                              # %sendMTFValues.split1047
                                        #   in Loop: Header=BB74_170 Depth=3
	movw	$-26237, BasicBlockSignatureTracker # imm = 0x9983
	movw	$0, RunTimeSignatureAdjuster
# %bb.182:                              #   in Loop: Header=BB74_170 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$-26188, %ax            # imm = 0x99B4
	jne	.LBB74_489
# %bb.183:                              # %sendMTFValues.split1051
                                        #   in Loop: Header=BB74_170 Depth=3
	movq	%r15, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26188, BasicBlockSignatureTracker # imm = 0x99B4
	movw	$363, RunTimeSignatureAdjuster # imm = 0x16B
	jmp	.LBB74_170
.LBB74_184:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$192, %ax
	cmpw	$-26156, %ax            # imm = 0x99D4
	jne	.LBB74_494
# %bb.185:                              # %sendMTFValues.split1041
                                        #   in Loop: Header=BB74_144 Depth=2
	movw	$-26156, BasicBlockSignatureTracker # imm = 0x99D4
	movw	$278, RunTimeSignatureAdjuster # imm = 0x116
.LBB74_186:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$286, %ax               # imm = 0x11E
	xorw	%cx, %ax
	cmpw	$-26148, %ax            # imm = 0x99DC
	jne	.LBB74_494
# %bb.187:                              # %sendMTFValues.split1035
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	$999999999, (%rax)      # imm = 0x3B9AC9FF
	movq	-152(%rbp), %rax        # 8-byte Reload
	movl	$-1, (%rax)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-26148, BasicBlockSignatureTracker # imm = 0x99DC
	movw	$0, RunTimeSignatureAdjuster
.LBB74_188:                             #   Parent Loop BB74_104 Depth=1
                                        #     Parent Loop BB74_144 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$-26144, %ax            # imm = 0x99E0
	jne	.LBB74_488
# %bb.189:                              # %sendMTFValues.split1053
                                        #   in Loop: Header=BB74_188 Depth=3
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-26144, BasicBlockSignatureTracker # imm = 0x99E0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_198
# %bb.190:                              #   in Loop: Header=BB74_188 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$-26142, %ax            # imm = 0x99E2
	jne	.LBB74_488
# %bb.191:                              # %sendMTFValues.split1055
                                        #   in Loop: Header=BB74_188 Depth=3
	movq	-72(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movzwl	(%rcx,%rax,2), %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-26142, BasicBlockSignatureTracker # imm = 0x99E2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_194
# %bb.192:                              #   in Loop: Header=BB74_188 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1005, %ax              # imm = 0x3ED
	cmpw	$-26097, %ax            # imm = 0x9A0F
	jne	.LBB74_488
# %bb.193:                              # %sendMTFValues.split1059
                                        #   in Loop: Header=BB74_188 Depth=3
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rax
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movzwl	(%rdx,%rax,2), %eax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movl	(%rcx), %eax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-26097, BasicBlockSignatureTracker # imm = 0x9A0F
	movw	$1005, RunTimeSignatureAdjuster # imm = 0x3ED
.LBB74_194:                             #   in Loop: Header=BB74_188 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$961, %ax               # imm = 0x3C1
	xorw	%cx, %ax
	cmpw	$-26077, %ax            # imm = 0x9A23
	jne	.LBB74_488
# %bb.195:                              # %sendMTFValues.split1061
                                        #   in Loop: Header=BB74_188 Depth=3
	movw	$-26077, BasicBlockSignatureTracker # imm = 0x9A23
	movw	$0, RunTimeSignatureAdjuster
# %bb.196:                              #   in Loop: Header=BB74_188 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-26062, %ax            # imm = 0x9A32
	jne	.LBB74_488
# %bb.197:                              # %sendMTFValues.split1063
                                        #   in Loop: Header=BB74_188 Depth=3
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-26062, BasicBlockSignatureTracker # imm = 0x9A32
	movw	$1006, RunTimeSignatureAdjuster # imm = 0x3EE
	jmp	.LBB74_188
.LBB74_198:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$943, %ax               # imm = 0x3AF
	cmpw	$-26033, %ax            # imm = 0x9A4F
	jne	.LBB74_494
# %bb.199:                              # %sendMTFValues.split1057
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movslq	(%rdx), %rax
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi,%rax,4), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rsi,%rax,4)
	movl	(%rdx), %eax
	movq	(%rbx), %rcx
	movq	%r14, %rsi
	movslq	(%rsi), %rdx
	movb	%al, 1704(%rcx,%rdx)
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-26033, BasicBlockSignatureTracker # imm = 0x9A4F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$6, %eax
	jne	.LBB74_206
# %bb.200:                              #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-26021, %ax            # imm = 0x9A5B
	jne	.LBB74_494
# %bb.201:                              # %sendMTFValues.split1065
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	$50, %eax
	movl	(%r13), %ecx
	subl	(%r12), %ecx
	addl	$1, %ecx
	movw	$-26021, BasicBlockSignatureTracker # imm = 0x9A5B
	movw	$20, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB74_206
# %bb.202:                              # %Buffer__5
                                        #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2217, %ax              # imm = 0x8A9
	cmpw	$-27918, %ax            # imm = 0x92F2
	jne	.LBB74_494
# %bb.203:                              # %sendMTFValues.split1069
                                        #   in Loop: Header=BB74_144 Depth=2
	movw	$-27918, BasicBlockSignatureTracker # imm = 0x92F2
	movw	$2217, RunTimeSignatureAdjuster # imm = 0x8A9
# %bb.204:                              #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$50, %ax
	xorw	%cx, %ax
	cmpw	$-26007, %ax            # imm = 0x9A69
	jne	.LBB74_494
# %bb.205:                              # %sendMTFValues.split1335
                                        #   in Loop: Header=BB74_144 Depth=2
	movq	%rbx, %rsi
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movq	-152(%rbp), %r9         # 8-byte Reload
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-56(%rbp), %r8          # 8-byte Reload
	movq	(%r8), %rcx
	movq	%r12, %rdi
	movl	(%rdi), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$5, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$6, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$7, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$9, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$10, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$11, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$12, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$13, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$14, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$15, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$16, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$17, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$18, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$19, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$20, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$21, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$22, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$23, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$24, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$25, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$26, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$27, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$28, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$29, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$30, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$31, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$32, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$33, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$34, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$35, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$36, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$37, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$38, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$39, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$40, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$41, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$42, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$43, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$44, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$45, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$46, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$47, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$48, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	(%rsi), %rax
	addq	$45448, %rax            # imm = 0xB188
	movslq	(%r9), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r8), %rcx
	movl	(%rdi), %edx
	addl	$49, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movw	$-26007, BasicBlockSignatureTracker # imm = 0x9A69
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_216
.LBB74_206:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$-25997, %ax            # imm = 0x9A73
	jne	.LBB74_494
# %bb.207:                              # %sendMTFValues.split1067
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	(%r12), %eax
	movl	%eax, (%r15)
	movw	$-25997, BasicBlockSignatureTracker # imm = 0x9A73
	movw	$0, RunTimeSignatureAdjuster
.LBB74_208:                             #   Parent Loop BB74_104 Depth=1
                                        #     Parent Loop BB74_144 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$244, %ax
	xorw	%cx, %ax
	cmpw	$-25977, %ax            # imm = 0x9A87
	jne	.LBB74_487
# %bb.209:                              # %sendMTFValues.split1073
                                        #   in Loop: Header=BB74_208 Depth=3
	movl	(%r15), %eax
	movl	(%r13), %ecx
	movw	$-25977, BasicBlockSignatureTracker # imm = 0x9A87
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB74_214
# %bb.210:                              #   in Loop: Header=BB74_208 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-25953, %ax            # imm = 0x9A9F
	jne	.LBB74_487
# %bb.211:                              # %sendMTFValues.split1075
                                        #   in Loop: Header=BB74_208 Depth=3
	movq	(%rbx), %rax
	addq	$45448, %rax            # imm = 0xB188
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%r15), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movw	$-25953, BasicBlockSignatureTracker # imm = 0x9A9F
	movw	$0, RunTimeSignatureAdjuster
# %bb.212:                              #   in Loop: Header=BB74_208 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$-25946, %ax            # imm = 0x9AA6
	jne	.LBB74_487
# %bb.213:                              # %sendMTFValues.split1079
                                        #   in Loop: Header=BB74_208 Depth=3
	movq	%r15, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-25946, BasicBlockSignatureTracker # imm = 0x9AA6
	movw	$213, RunTimeSignatureAdjuster
	jmp	.LBB74_208
.LBB74_214:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$89, %ax
	cmpw	$-25890, %ax            # imm = 0x9ADE
	jne	.LBB74_494
# %bb.215:                              # %sendMTFValues.split1077
                                        #   in Loop: Header=BB74_144 Depth=2
	movw	$-25890, BasicBlockSignatureTracker # imm = 0x9ADE
	movw	$183, RunTimeSignatureAdjuster
.LBB74_216:                             #   in Loop: Header=BB74_144 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$372, %ax               # imm = 0x174
	xorw	%cx, %ax
	cmpw	$-25827, %ax            # imm = 0x9B1D
	jne	.LBB74_494
# %bb.217:                              # %sendMTFValues.split1071
                                        #   in Loop: Header=BB74_144 Depth=2
	movl	(%r13), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$-25827, BasicBlockSignatureTracker # imm = 0x9B1D
	movw	$3293, RunTimeSignatureAdjuster # imm = 0xCDD
	jmp	.LBB74_144
.LBB74_218:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3265, %ax              # imm = 0xCC1
	cmpw	$-25805, %ax            # imm = 0x9B33
	movq	%rbx, %rax
	jne	.LBB74_498
# %bb.219:                              # %sendMTFValues.split1015
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	(%rax), %rax
	movl	656(%rax), %eax
	movw	$-25805, BasicBlockSignatureTracker # imm = 0x9B33
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_230
# %bb.220:                              #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$133, %ax
	cmpw	$-25674, %ax            # imm = 0x9BB6
	jne	.LBB74_498
# %bb.221:                              # %sendMTFValues.split1081
                                        #   in Loop: Header=BB74_104 Depth=1
	movabsq	$.L.str.4.60, %rsi
	movl	$8, %r8d
	movq	stderr, %rdi
	movq	-256(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	addl	$1, %ecx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	cltd
	idivl	%r8d
	movl	%ecx, %edx
	movl	%eax, %ecx
	movb	$0, %al
	callq	fprintf
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-25674, BasicBlockSignatureTracker # imm = 0x9BB6
	movw	$0, RunTimeSignatureAdjuster
.LBB74_222:                             #   Parent Loop BB74_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$127, %ax
	xorw	%cx, %ax
	cmpw	$-25655, %ax            # imm = 0x9BC9
	jne	.LBB74_493
# %bb.223:                              # %sendMTFValues.split1085
                                        #   in Loop: Header=BB74_222 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-25655, BasicBlockSignatureTracker # imm = 0x9BC9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_228
# %bb.224:                              #   in Loop: Header=BB74_222 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1994, %ax              # imm = 0x7CA
	cmpw	$-25597, %ax            # imm = 0x9C03
	jne	.LBB74_493
# %bb.225:                              # %sendMTFValues.split1087
                                        #   in Loop: Header=BB74_222 Depth=2
	movabsq	$.L.str.5.61, %rsi
	movq	stderr, %rdi
	movq	-72(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx,%rax,4), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-25597, BasicBlockSignatureTracker # imm = 0x9C03
	movw	$0, RunTimeSignatureAdjuster
# %bb.226:                              #   in Loop: Header=BB74_222 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-25589, %ax            # imm = 0x9C0B
	jne	.LBB74_493
# %bb.227:                              # %sendMTFValues.split1091
                                        #   in Loop: Header=BB74_222 Depth=2
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-25589, BasicBlockSignatureTracker # imm = 0x9C0B
	movw	$1981, RunTimeSignatureAdjuster # imm = 0x7BD
	jmp	.LBB74_222
.LBB74_228:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2015, %ax              # imm = 0x7DF
	cmpw	$-25578, %ax            # imm = 0x9C16
	jne	.LBB74_498
# %bb.229:                              # %sendMTFValues.split1089
                                        #   in Loop: Header=BB74_104 Depth=1
	movabsq	$.L.str.6.62, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$-25578, BasicBlockSignatureTracker # imm = 0x9C16
	movw	$1829, RunTimeSignatureAdjuster # imm = 0x725
.LBB74_230:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1867, %ax              # imm = 0x74B
	xorw	%cx, %ax
	cmpw	$-25480, %ax            # imm = 0x9C78
	jne	.LBB74_498
# %bb.231:                              # %sendMTFValues.split1083
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-25480, BasicBlockSignatureTracker # imm = 0x9C78
	movw	$0, RunTimeSignatureAdjuster
.LBB74_232:                             #   Parent Loop BB74_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$199, %ax
	xorw	%cx, %ax
	cmpw	$-25409, %ax            # imm = 0x9CBF
	jne	.LBB74_492
# %bb.233:                              # %sendMTFValues.split1093
                                        #   in Loop: Header=BB74_232 Depth=2
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-25409, BasicBlockSignatureTracker # imm = 0x9CBF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_238
# %bb.234:                              #   in Loop: Header=BB74_232 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$84, %ax
	cmpw	$-25365, %ax            # imm = 0x9CEB
	jne	.LBB74_492
# %bb.235:                              # %sendMTFValues.split1095
                                        #   in Loop: Header=BB74_232 Depth=2
	movq	%rbx, %rcx
	movq	(%rcx), %rdi
	addq	$37708, %rdi            # imm = 0x934C
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rdi
	movq	(%rcx), %rsi
	addq	$45448, %rsi            # imm = 0xB188
	movslq	(%rdx), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %edx
	movw	$-25365, BasicBlockSignatureTracker # imm = 0x9CEB
	movw	$0, RunTimeSignatureAdjuster
	movl	$17, %ecx
	callq	BZ2_hbMakeCodeLengths
	movw	$-25365, BasicBlockSignatureTracker # imm = 0x9CEB
	movw	$0, RunTimeSignatureAdjuster
	movw	$-25365, BasicBlockSignatureTracker # imm = 0x9CEB
	movw	$0, RunTimeSignatureAdjuster
# %bb.236:                              #   in Loop: Header=BB74_232 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$482, %ax               # imm = 0x1E2
	cmpw	$-25335, %ax            # imm = 0x9D09
	jne	.LBB74_492
# %bb.237:                              # %sendMTFValues.split1099
                                        #   in Loop: Header=BB74_232 Depth=2
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-25335, BasicBlockSignatureTracker # imm = 0x9D09
	movw	$369, RunTimeSignatureAdjuster # imm = 0x171
	jmp	.LBB74_232
.LBB74_238:                             #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$428, %ax               # imm = 0x1AC
	cmpw	$-25325, %ax            # imm = 0x9D13
	jne	.LBB74_498
# %bb.239:                              # %sendMTFValues.split1097
                                        #   in Loop: Header=BB74_104 Depth=1
	movw	$-25325, BasicBlockSignatureTracker # imm = 0x9D13
	movw	$0, RunTimeSignatureAdjuster
# %bb.240:                              #   in Loop: Header=BB74_104 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-25318, %ax            # imm = 0x9D1A
	movq	%rbx, %r9
	movq	%r12, %rbx
	movq	-120(%rbp), %r8         # 8-byte Reload
	movq	%r13, %r11
	movq	%r14, %rsi
	jne	.LBB74_498
# %bb.241:                              # %sendMTFValues.split1101
                                        #   in Loop: Header=BB74_104 Depth=1
	movq	-256(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-25318, BasicBlockSignatureTracker # imm = 0x9D1A
	movw	$2280, RunTimeSignatureAdjuster # imm = 0x8E8
	jmp	.LBB74_104
.LBB74_242:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2924, %ax              # imm = 0xB6C
	cmpw	$-25226, %ax            # imm = 0x9D76
	jne	.LBB74_504
# %bb.243:                              # %sendMTFValues.split971
	movq	%rsi, %r12
	movq	%r11, -136(%rbp)        # 8-byte Spill
	movq	%r8, -120(%rbp)         # 8-byte Spill
	movq	%rbx, %r13
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r15, %r14
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-25226, BasicBlockSignatureTracker # imm = 0x9D76
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB74_246
# %bb.244:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-25220, %ax            # imm = 0x9D7C
	jne	.LBB74_504
# %bb.245:                              # %sendMTFValues.split1105
	movw	$-25220, BasicBlockSignatureTracker # imm = 0x9D7C
	movw	$-24773, RunTimeSignatureAdjuster # imm = 0x9F3B
	movl	$3002, %edi             # imm = 0xBBA
	callq	BZ2_bz__AssertH__fail
	movw	$-25220, BasicBlockSignatureTracker # imm = 0x9D7C
	movw	$-24773, RunTimeSignatureAdjuster # imm = 0x9F3B
	movw	$-25220, BasicBlockSignatureTracker # imm = 0x9D7C
	movw	$10, RunTimeSignatureAdjuster
.LBB74_246:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$213, %ax
	xorw	%cx, %ax
	cmpw	$-25181, %ax            # imm = 0x9DA3
	movq	%r12, %rax
	jne	.LBB74_504
# %bb.247:                              # %sendMTFValues.split1103
	movl	(%rax), %eax
	movw	$-25181, BasicBlockSignatureTracker # imm = 0x9DA3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$32768, %eax            # imm = 0x8000
	jge	.LBB74_250
# %bb.248:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$-25176, %ax            # imm = 0x9DA8
	movq	%r12, %rax
	jne	.LBB74_504
# %bb.249:                              # %sendMTFValues.split1107
	movl	(%rax), %eax
	movw	$-25176, BasicBlockSignatureTracker # imm = 0x9DA8
	movw	$11, RunTimeSignatureAdjuster
	cmpl	$18002, %eax            # imm = 0x4652
	jle	.LBB74_252
.LBB74_250:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$9, %ax
	xorw	%cx, %ax
	cmpw	$-25174, %ax            # imm = 0x9DAA
	jne	.LBB74_504
# %bb.251:                              # %sendMTFValues.split1109
	movw	$-25174, BasicBlockSignatureTracker # imm = 0x9DAA
	movw	$-24595, RunTimeSignatureAdjuster # imm = 0x9FED
	movl	$3003, %edi             # imm = 0xBBB
	callq	BZ2_bz__AssertH__fail
	movw	$-25174, BasicBlockSignatureTracker # imm = 0x9DAA
	movw	$-24595, RunTimeSignatureAdjuster # imm = 0x9FED
	movw	$-25174, BasicBlockSignatureTracker # imm = 0x9DAA
	movw	$2, RunTimeSignatureAdjuster
	jmp	.LBB74_254
.LBB74_252:                             # %Buffer__6
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-6748, %ax             # imm = 0xE5A4
	cmpw	$30732, %ax             # imm = 0x780C
	jne	.LBB74_504
# %bb.253:                              # %sendMTFValues.split1111
	movw	$30732, BasicBlockSignatureTracker # imm = 0x780C
	movw	$-6748, RunTimeSignatureAdjuster # imm = 0xE5A4
.LBB74_254:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7, %ax
	xorw	%cx, %ax
	cmpw	$-25169, %ax            # imm = 0x9DAF
	movq	%r14, %rax
	jne	.LBB74_504
# %bb.255:                              # %sendMTFValues.split1113
	movl	$0, (%rax)
	movw	$-25169, BasicBlockSignatureTracker # imm = 0x9DAF
	movw	$0, RunTimeSignatureAdjuster
.LBB74_256:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$-25153, %ax            # imm = 0x9DBF
	jne	.LBB74_485
# %bb.257:                              # %sendMTFValues.split1115
                                        #   in Loop: Header=BB74_256 Depth=1
	movl	(%r14), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-25153, BasicBlockSignatureTracker # imm = 0x9DBF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_262
# %bb.258:                              #   in Loop: Header=BB74_256 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$104, %ax
	cmpw	$-25129, %ax            # imm = 0x9DD7
	jne	.LBB74_485
# %bb.259:                              # %sendMTFValues.split1117
                                        #   in Loop: Header=BB74_256 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	movslq	(%rcx), %rcx
	movq	-248(%rbp), %rdx        # 8-byte Reload
	movb	%al, (%rdx,%rcx)
	movw	$-25129, BasicBlockSignatureTracker # imm = 0x9DD7
	movw	$0, RunTimeSignatureAdjuster
# %bb.260:                              #   in Loop: Header=BB74_256 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1012, %ax              # imm = 0x3F4
	cmpw	$-25053, %ax            # imm = 0x9E23
	jne	.LBB74_485
# %bb.261:                              # %sendMTFValues.split1121
                                        #   in Loop: Header=BB74_256 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-25053, BasicBlockSignatureTracker # imm = 0x9E23
	movw	$908, RunTimeSignatureAdjuster # imm = 0x38C
	jmp	.LBB74_256
.LBB74_262:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$918, %ax               # imm = 0x396
	cmpw	$-25047, %ax            # imm = 0x9E29
	movq	%r14, %rax
	jne	.LBB74_504
# %bb.263:                              # %sendMTFValues.split1119
	movl	$0, (%rax)
	movw	$-25047, BasicBlockSignatureTracker # imm = 0x9E29
	movw	$0, RunTimeSignatureAdjuster
.LBB74_264:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_268 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$64, %ax
	xorw	%cx, %ax
	cmpw	$-24983, %ax            # imm = 0x9E69
	jne	.LBB74_484
# %bb.265:                              # %sendMTFValues.split1123
                                        #   in Loop: Header=BB74_264 Depth=1
	movl	(%r14), %eax
	movl	(%r12), %ecx
	movw	$-24983, BasicBlockSignatureTracker # imm = 0x9E69
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_276
# %bb.266:                              #   in Loop: Header=BB74_264 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-24968, %ax            # imm = 0x9E78
	jne	.LBB74_484
# %bb.267:                              # %sendMTFValues.split1125
                                        #   in Loop: Header=BB74_264 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movslq	(%r14), %rcx
	movb	1704(%rax,%rcx), %al
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movslq	(%rax), %rax
	movq	-248(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movq	-232(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-24968, BasicBlockSignatureTracker # imm = 0x9E78
	movw	$0, RunTimeSignatureAdjuster
.LBB74_268:                             #   Parent Loop BB74_264 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2, %ax
	xorw	%cx, %ax
	cmpw	$-24966, %ax            # imm = 0x9E7A
	jne	.LBB74_483
# %bb.269:                              # %sendMTFValues.split1129
                                        #   in Loop: Header=BB74_268 Depth=2
	movq	-288(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-232(%rbp), %rcx        # 8-byte Reload
	movzbl	(%rcx), %ecx
	movw	$-24966, BasicBlockSignatureTracker # imm = 0x9E7A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB74_272
# %bb.270:                              #   in Loop: Header=BB74_268 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-24961, %ax            # imm = 0x9E7F
	jne	.LBB74_483
# %bb.271:                              # %sendMTFValues.split1131
                                        #   in Loop: Header=BB74_268 Depth=2
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movb	(%rdi), %al
	movq	-336(%rbp), %rsi        # 8-byte Reload
	movb	%al, (%rsi)
	movslq	(%rcx), %rax
	movq	-248(%rbp), %rdx        # 8-byte Reload
	movb	(%rdx,%rax), %al
	movb	%al, (%rdi)
	movb	(%rsi), %al
	movslq	(%rcx), %rcx
	movb	%al, (%rdx,%rcx)
	movw	$-24961, BasicBlockSignatureTracker # imm = 0x9E7F
	movw	$7, RunTimeSignatureAdjuster
	jmp	.LBB74_268
.LBB74_272:                             #   in Loop: Header=BB74_264 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$246, %ax
	cmpw	$-24948, %ax            # imm = 0x9E8C
	jne	.LBB74_484
# %bb.273:                              # %sendMTFValues.split1133
                                        #   in Loop: Header=BB74_264 Depth=1
	movq	-232(%rbp), %rax        # 8-byte Reload
	movb	(%rax), %al
	movq	-248(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%r14), %rdx
	movb	%al, 19706(%rcx,%rdx)
	movw	$-24948, BasicBlockSignatureTracker # imm = 0x9E8C
	movw	$0, RunTimeSignatureAdjuster
# %bb.274:                              #   in Loop: Header=BB74_264 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-24947, %ax            # imm = 0x9E8D
	jne	.LBB74_484
# %bb.275:                              # %sendMTFValues.split1135
                                        #   in Loop: Header=BB74_264 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24947, BasicBlockSignatureTracker # imm = 0x9E8D
	movw	$164, RunTimeSignatureAdjuster
	jmp	.LBB74_264
.LBB74_276:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$244, %ax
	cmpw	$-24931, %ax            # imm = 0x9E9D
	jne	.LBB74_504
# %bb.277:                              # %sendMTFValues.split1127
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-24931, BasicBlockSignatureTracker # imm = 0x9E9D
	movw	$0, RunTimeSignatureAdjuster
.LBB74_278:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_282 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$53, %ax
	xorw	%cx, %ax
	cmpw	$-24920, %ax            # imm = 0x9EA8
	jne	.LBB74_482
# %bb.279:                              # %sendMTFValues.split1137
                                        #   in Loop: Header=BB74_278 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-24920, BasicBlockSignatureTracker # imm = 0x9EA8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_308
# %bb.280:                              #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-24919, %ax            # imm = 0x9EA9
	jne	.LBB74_482
# %bb.281:                              # %sendMTFValues.split1139
                                        #   in Loop: Header=BB74_278 Depth=1
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	$32, (%rax)
	movq	-208(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movl	$0, (%r14)
	movw	$-24919, BasicBlockSignatureTracker # imm = 0x9EA9
	movw	$0, RunTimeSignatureAdjuster
.LBB74_282:                             #   Parent Loop BB74_278 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29, %ax
	xorw	%cx, %ax
	cmpw	$-24908, %ax            # imm = 0x9EB4
	jne	.LBB74_481
# %bb.283:                              # %sendMTFValues.split1143
                                        #   in Loop: Header=BB74_282 Depth=2
	movl	(%r14), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-24908, BasicBlockSignatureTracker # imm = 0x9EB4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_296
# %bb.284:                              #   in Loop: Header=BB74_282 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$121, %ax
	cmpw	$-24883, %ax            # imm = 0x9ECD
	jne	.LBB74_481
# %bb.285:                              # %sendMTFValues.split1145
                                        #   in Loop: Header=BB74_282 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r14), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-24883, BasicBlockSignatureTracker # imm = 0x9ECD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB74_288
# %bb.286:                              #   in Loop: Header=BB74_282 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-24839, %ax            # imm = 0x9EF9
	jne	.LBB74_481
# %bb.287:                              # %sendMTFValues.split1149
                                        #   in Loop: Header=BB74_282 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r14), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-24839, BasicBlockSignatureTracker # imm = 0x9EF9
	movw	$52, RunTimeSignatureAdjuster
.LBB74_288:                             #   in Loop: Header=BB74_282 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$50, %ax
	xorw	%cx, %ax
	cmpw	$-24833, %ax            # imm = 0x9EFF
	jne	.LBB74_481
# %bb.289:                              # %sendMTFValues.split1151
                                        #   in Loop: Header=BB74_282 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r14), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-24833, BasicBlockSignatureTracker # imm = 0x9EFF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_292
# %bb.290:                              #   in Loop: Header=BB74_282 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$497, %ax               # imm = 0x1F1
	cmpw	$-24818, %ax            # imm = 0x9F0E
	jne	.LBB74_481
# %bb.291:                              # %sendMTFValues.split1153
                                        #   in Loop: Header=BB74_282 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r14), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-24818, BasicBlockSignatureTracker # imm = 0x9F0E
	movw	$497, RunTimeSignatureAdjuster # imm = 0x1F1
.LBB74_292:                             #   in Loop: Header=BB74_282 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$462, %ax               # imm = 0x1CE
	xorw	%cx, %ax
	cmpw	$-24783, %ax            # imm = 0x9F31
	jne	.LBB74_481
# %bb.293:                              # %sendMTFValues.split1155
                                        #   in Loop: Header=BB74_282 Depth=2
	movw	$-24783, BasicBlockSignatureTracker # imm = 0x9F31
	movw	$0, RunTimeSignatureAdjuster
# %bb.294:                              #   in Loop: Header=BB74_282 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-24776, %ax            # imm = 0x9F38
	jne	.LBB74_481
# %bb.295:                              # %sendMTFValues.split1157
                                        #   in Loop: Header=BB74_282 Depth=2
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24776, BasicBlockSignatureTracker # imm = 0x9F38
	movw	$401, RunTimeSignatureAdjuster # imm = 0x191
	jmp	.LBB74_282
.LBB74_296:                             #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$499, %ax               # imm = 0x1F3
	cmpw	$-24761, %ax            # imm = 0x9F47
	jne	.LBB74_482
# %bb.297:                              # %sendMTFValues.split1147
                                        #   in Loop: Header=BB74_278 Depth=1
	movq	-208(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-24761, BasicBlockSignatureTracker # imm = 0x9F47
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$17, %eax
	jle	.LBB74_300
# %bb.298:                              #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$-24718, %ax            # imm = 0x9F72
	jne	.LBB74_482
# %bb.299:                              # %sendMTFValues.split1159
                                        #   in Loop: Header=BB74_278 Depth=1
	movw	$-24718, BasicBlockSignatureTracker # imm = 0x9F72
	movw	$-25291, RunTimeSignatureAdjuster # imm = 0x9D35
	movl	$3004, %edi             # imm = 0xBBC
	callq	BZ2_bz__AssertH__fail
	movw	$-24718, BasicBlockSignatureTracker # imm = 0x9F72
	movw	$-25291, RunTimeSignatureAdjuster # imm = 0x9D35
	movw	$-24718, BasicBlockSignatureTracker # imm = 0x9F72
	movw	$53, RunTimeSignatureAdjuster
.LBB74_300:                             #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$59, %ax
	xorw	%cx, %ax
	cmpw	$-24708, %ax            # imm = 0x9F7C
	jne	.LBB74_482
# %bb.301:                              # %sendMTFValues.split1161
                                        #   in Loop: Header=BB74_278 Depth=1
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-24708, BasicBlockSignatureTracker # imm = 0x9F7C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jge	.LBB74_304
# %bb.302:                              #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$238, %ax
	cmpw	$-24686, %ax            # imm = 0x9F92
	jne	.LBB74_482
# %bb.303:                              # %sendMTFValues.split1163
                                        #   in Loop: Header=BB74_278 Depth=1
	movw	$-24686, BasicBlockSignatureTracker # imm = 0x9F92
	movw	$-25131, RunTimeSignatureAdjuster # imm = 0x9DD5
	movl	$3005, %edi             # imm = 0xBBD
	callq	BZ2_bz__AssertH__fail
	movw	$-24686, BasicBlockSignatureTracker # imm = 0x9F92
	movw	$-25131, RunTimeSignatureAdjuster # imm = 0x9DD5
	movw	$-24686, BasicBlockSignatureTracker # imm = 0x9F92
	movw	$238, RunTimeSignatureAdjuster
.LBB74_304:                             #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$229, %ax
	xorw	%cx, %ax
	cmpw	$-24679, %ax            # imm = 0x9F99
	jne	.LBB74_482
# %bb.305:                              # %sendMTFValues.split1165
                                        #   in Loop: Header=BB74_278 Depth=1
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdi
	addq	$39256, %rdi            # imm = 0x9958
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	(%rcx), %rsi
	addq	$37708, %rsi            # imm = 0x934C
	movslq	(%rdx), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rsi
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %edx
	movq	-208(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %ecx
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r8d
	movw	$-24679, BasicBlockSignatureTracker # imm = 0x9F99
	movw	$0, RunTimeSignatureAdjuster
	callq	BZ2_hbAssignCodes
	movw	$-24679, BasicBlockSignatureTracker # imm = 0x9F99
	movw	$0, RunTimeSignatureAdjuster
	movw	$-24679, BasicBlockSignatureTracker # imm = 0x9F99
	movw	$0, RunTimeSignatureAdjuster
# %bb.306:                              #   in Loop: Header=BB74_278 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-24648, %ax            # imm = 0x9FB8
	jne	.LBB74_482
# %bb.307:                              # %sendMTFValues.split1167
                                        #   in Loop: Header=BB74_278 Depth=1
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24648, BasicBlockSignatureTracker # imm = 0x9FB8
	movw	$293, RunTimeSignatureAdjuster # imm = 0x125
	jmp	.LBB74_278
.LBB74_308:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$377, %ax               # imm = 0x179
	cmpw	$-24623, %ax            # imm = 0x9FD1
	movq	%r14, %rax
	jne	.LBB74_504
# %bb.309:                              # %sendMTFValues.split1141
	movl	$0, (%rax)
	movw	$-24623, BasicBlockSignatureTracker # imm = 0x9FD1
	movw	$0, RunTimeSignatureAdjuster
.LBB74_310:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_314 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$43, %ax
	xorw	%cx, %ax
	cmpw	$-24582, %ax            # imm = 0x9FFA
	jne	.LBB74_480
# %bb.311:                              # %sendMTFValues.split1169
                                        #   in Loop: Header=BB74_310 Depth=1
	movl	(%r14), %eax
	movw	$-24582, BasicBlockSignatureTracker # imm = 0x9FFA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB74_328
# %bb.312:                              #   in Loop: Header=BB74_310 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16382, %ax             # imm = 0x3FFE
	cmpw	$-24572, %ax            # imm = 0xA004
	jne	.LBB74_480
# %bb.313:                              # %sendMTFValues.split1171
                                        #   in Loop: Header=BB74_310 Depth=1
	movslq	(%r14), %rax
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movb	$0, (%rcx,%rax)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-24572, BasicBlockSignatureTracker # imm = 0xA004
	movw	$0, RunTimeSignatureAdjuster
.LBB74_314:                             #   Parent Loop BB74_310 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$33, %ax
	xorw	%cx, %ax
	cmpw	$-24539, %ax            # imm = 0xA025
	jne	.LBB74_479
# %bb.315:                              # %sendMTFValues.split1175
                                        #   in Loop: Header=BB74_314 Depth=2
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-24539, BasicBlockSignatureTracker # imm = 0xA025
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB74_324
# %bb.316:                              #   in Loop: Header=BB74_314 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-24534, %ax            # imm = 0xA02A
	jne	.LBB74_479
# %bb.317:                              # %sendMTFValues.split1177
                                        #   in Loop: Header=BB74_314 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r14), %ecx
	shll	$4, %ecx
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movb	128(%rax,%rcx), %al
	movw	$-24534, BasicBlockSignatureTracker # imm = 0xA02A
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB74_320
# %bb.318:                              #   in Loop: Header=BB74_314 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-24530, %ax            # imm = 0xA02E
	jne	.LBB74_479
# %bb.319:                              # %sendMTFValues.split1181
                                        #   in Loop: Header=BB74_314 Depth=2
	movslq	(%r14), %rax
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movb	$1, (%rcx,%rax)
	movw	$-24530, BasicBlockSignatureTracker # imm = 0xA02E
	movw	$4, RunTimeSignatureAdjuster
.LBB74_320:                             #   in Loop: Header=BB74_314 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$102, %ax
	xorw	%cx, %ax
	cmpw	$-24500, %ax            # imm = 0xA04C
	jne	.LBB74_479
# %bb.321:                              # %sendMTFValues.split1183
                                        #   in Loop: Header=BB74_314 Depth=2
	movw	$-24500, BasicBlockSignatureTracker # imm = 0xA04C
	movw	$0, RunTimeSignatureAdjuster
# %bb.322:                              #   in Loop: Header=BB74_314 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-24488, %ax            # imm = 0xA058
	jne	.LBB74_479
# %bb.323:                              # %sendMTFValues.split1185
                                        #   in Loop: Header=BB74_314 Depth=2
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24488, BasicBlockSignatureTracker # imm = 0xA058
	movw	$92, RunTimeSignatureAdjuster
	jmp	.LBB74_314
.LBB74_324:                             #   in Loop: Header=BB74_310 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$69, %ax
	cmpw	$-24480, %ax            # imm = 0xA060
	jne	.LBB74_480
# %bb.325:                              # %sendMTFValues.split1179
                                        #   in Loop: Header=BB74_310 Depth=1
	movw	$-24480, BasicBlockSignatureTracker # imm = 0xA060
	movw	$0, RunTimeSignatureAdjuster
# %bb.326:                              #   in Loop: Header=BB74_310 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-24454, %ax            # imm = 0xA07A
	jne	.LBB74_480
# %bb.327:                              # %sendMTFValues.split1187
                                        #   in Loop: Header=BB74_310 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24454, BasicBlockSignatureTracker # imm = 0xA07A
	movw	$16299, RunTimeSignatureAdjuster # imm = 0x3FAB
	jmp	.LBB74_310
.LBB74_328:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16244, %ax             # imm = 0x3F74
	cmpw	$-24434, %ax            # imm = 0xA08E
	movq	%r14, %rcx
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rdx        # 8-byte Reload
	jne	.LBB74_504
# %bb.329:                              # %sendMTFValues.split1173
	movq	(%rax), %rax
	movl	116(%rax), %eax
	movl	%eax, (%rdx)
	movl	$0, (%rcx)
	movw	$-24434, BasicBlockSignatureTracker # imm = 0xA08E
	movw	$0, RunTimeSignatureAdjuster
.LBB74_330:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$33, %ax
	xorw	%cx, %ax
	cmpw	$-24401, %ax            # imm = 0xA0AF
	jne	.LBB74_478
# %bb.331:                              # %sendMTFValues.split1189
                                        #   in Loop: Header=BB74_330 Depth=1
	movl	(%r14), %eax
	movw	$-24401, BasicBlockSignatureTracker # imm = 0xA0AF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB74_342
# %bb.332:                              #   in Loop: Header=BB74_330 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$-24382, %ax            # imm = 0xA0C2
	jne	.LBB74_478
# %bb.333:                              # %sendMTFValues.split1191
                                        #   in Loop: Header=BB74_330 Depth=1
	movslq	(%r14), %rax
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movw	$-24382, BasicBlockSignatureTracker # imm = 0xA0C2
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB74_336
# %bb.334:                              #   in Loop: Header=BB74_330 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$-24367, %ax            # imm = 0xA0D1
	jne	.LBB74_478
# %bb.335:                              # %sendMTFValues.split1195
                                        #   in Loop: Header=BB74_330 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-24367, BasicBlockSignatureTracker # imm = 0xA0D1
	movw	$11455, RunTimeSignatureAdjuster # imm = 0x2CBF
	movl	$1, %esi
	movl	$1, %edx
	callq	bsW
	movw	$-24367, BasicBlockSignatureTracker # imm = 0xA0D1
	movw	$11455, RunTimeSignatureAdjuster # imm = 0x2CBF
	movw	$-24367, BasicBlockSignatureTracker # imm = 0xA0D1
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_338
.LBB74_336:                             #   in Loop: Header=BB74_330 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-24364, %ax            # imm = 0xA0D4
	jne	.LBB74_478
# %bb.337:                              # %sendMTFValues.split1197
                                        #   in Loop: Header=BB74_330 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-24364, BasicBlockSignatureTracker # imm = 0xA0D4
	movw	$11450, RunTimeSignatureAdjuster # imm = 0x2CBA
	movl	$1, %esi
	xorl	%edx, %edx
	callq	bsW
	movw	$-24364, BasicBlockSignatureTracker # imm = 0xA0D4
	movw	$11450, RunTimeSignatureAdjuster # imm = 0x2CBA
	movw	$-24364, BasicBlockSignatureTracker # imm = 0xA0D4
	movw	$5, RunTimeSignatureAdjuster
.LBB74_338:                             #   in Loop: Header=BB74_330 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$-24339, %ax            # imm = 0xA0ED
	jne	.LBB74_478
# %bb.339:                              # %sendMTFValues.split1199
                                        #   in Loop: Header=BB74_330 Depth=1
	movw	$-24339, BasicBlockSignatureTracker # imm = 0xA0ED
	movw	$0, RunTimeSignatureAdjuster
# %bb.340:                              #   in Loop: Header=BB74_330 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$511, %ax               # imm = 0x1FF
	cmpw	$-24302, %ax            # imm = 0xA112
	jne	.LBB74_478
# %bb.341:                              # %sendMTFValues.split1201
                                        #   in Loop: Header=BB74_330 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24302, BasicBlockSignatureTracker # imm = 0xA112
	movw	$412, RunTimeSignatureAdjuster # imm = 0x19C
	jmp	.LBB74_330
.LBB74_342:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$414, %ax               # imm = 0x19E
	cmpw	$-24271, %ax            # imm = 0xA131
	movq	%r14, %rax
	jne	.LBB74_504
# %bb.343:                              # %sendMTFValues.split1193
	movl	$0, (%rax)
	movw	$-24271, BasicBlockSignatureTracker # imm = 0xA131
	movw	$0, RunTimeSignatureAdjuster
.LBB74_344:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_350 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$-24265, %ax            # imm = 0xA137
	jne	.LBB74_477
# %bb.345:                              # %sendMTFValues.split1203
                                        #   in Loop: Header=BB74_344 Depth=1
	movl	(%r14), %eax
	movw	$-24265, BasicBlockSignatureTracker # imm = 0xA137
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB74_368
# %bb.346:                              #   in Loop: Header=BB74_344 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$-24230, %ax            # imm = 0xA15A
	jne	.LBB74_477
# %bb.347:                              # %sendMTFValues.split1205
                                        #   in Loop: Header=BB74_344 Depth=1
	movslq	(%r14), %rax
	movq	-240(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movw	$-24230, BasicBlockSignatureTracker # imm = 0xA15A
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB74_364
# %bb.348:                              #   in Loop: Header=BB74_344 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$203, %ax
	cmpw	$-24175, %ax            # imm = 0xA191
	jne	.LBB74_477
# %bb.349:                              # %sendMTFValues.split1209
                                        #   in Loop: Header=BB74_344 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-24175, BasicBlockSignatureTracker # imm = 0xA191
	movw	$0, RunTimeSignatureAdjuster
.LBB74_350:                             #   Parent Loop BB74_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$35, %ax
	xorw	%cx, %ax
	cmpw	$-24142, %ax            # imm = 0xA1B2
	jne	.LBB74_476
# %bb.351:                              # %sendMTFValues.split1213
                                        #   in Loop: Header=BB74_350 Depth=2
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-24142, BasicBlockSignatureTracker # imm = 0xA1B2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB74_362
# %bb.352:                              #   in Loop: Header=BB74_350 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$-24121, %ax            # imm = 0xA1C7
	jne	.LBB74_476
# %bb.353:                              # %sendMTFValues.split1215
                                        #   in Loop: Header=BB74_350 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r14), %ecx
	shll	$4, %ecx
	movq	-112(%rbp), %rdx        # 8-byte Reload
	addl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movb	128(%rax,%rcx), %al
	movw	$-24121, BasicBlockSignatureTracker # imm = 0xA1C7
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB74_356
# %bb.354:                              #   in Loop: Header=BB74_350 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-24106, %ax            # imm = 0xA1D6
	jne	.LBB74_476
# %bb.355:                              # %sendMTFValues.split1219
                                        #   in Loop: Header=BB74_350 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-24106, BasicBlockSignatureTracker # imm = 0xA1D6
	movw	$11704, RunTimeSignatureAdjuster # imm = 0x2DB8
	movl	$1, %esi
	movl	$1, %edx
	callq	bsW
	movw	$-24106, BasicBlockSignatureTracker # imm = 0xA1D6
	movw	$11704, RunTimeSignatureAdjuster # imm = 0x2DB8
	movw	$-24106, BasicBlockSignatureTracker # imm = 0xA1D6
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_358
.LBB74_356:                             #   in Loop: Header=BB74_350 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-24068, %ax            # imm = 0xA1FC
	jne	.LBB74_476
# %bb.357:                              # %sendMTFValues.split1221
                                        #   in Loop: Header=BB74_350 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-24068, BasicBlockSignatureTracker # imm = 0xA1FC
	movw	$11666, RunTimeSignatureAdjuster # imm = 0x2D92
	movl	$1, %esi
	xorl	%edx, %edx
	callq	bsW
	movw	$-24068, BasicBlockSignatureTracker # imm = 0xA1FC
	movw	$11666, RunTimeSignatureAdjuster # imm = 0x2D92
	movw	$-24068, BasicBlockSignatureTracker # imm = 0xA1FC
	movw	$42, RunTimeSignatureAdjuster
.LBB74_358:                             #   in Loop: Header=BB74_350 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$991, %ax               # imm = 0x3DF
	xorw	%cx, %ax
	cmpw	$-24055, %ax            # imm = 0xA209
	jne	.LBB74_476
# %bb.359:                              # %sendMTFValues.split1223
                                        #   in Loop: Header=BB74_350 Depth=2
	movw	$-24055, BasicBlockSignatureTracker # imm = 0xA209
	movw	$0, RunTimeSignatureAdjuster
# %bb.360:                              #   in Loop: Header=BB74_350 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$-24042, %ax            # imm = 0xA216
	jne	.LBB74_476
# %bb.361:                              # %sendMTFValues.split1225
                                        #   in Loop: Header=BB74_350 Depth=2
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24042, BasicBlockSignatureTracker # imm = 0xA216
	movw	$903, RunTimeSignatureAdjuster # imm = 0x387
	jmp	.LBB74_350
.LBB74_362:                             #   in Loop: Header=BB74_344 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$914, %ax               # imm = 0x392
	cmpw	$-24032, %ax            # imm = 0xA220
	jne	.LBB74_477
# %bb.363:                              # %sendMTFValues.split1217
                                        #   in Loop: Header=BB74_344 Depth=1
	movw	$-24032, BasicBlockSignatureTracker # imm = 0xA220
	movw	$890, RunTimeSignatureAdjuster # imm = 0x37A
.LBB74_364:                             #   in Loop: Header=BB74_344 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$892, %ax               # imm = 0x37C
	xorw	%cx, %ax
	cmpw	$-24026, %ax            # imm = 0xA226
	jne	.LBB74_477
# %bb.365:                              # %sendMTFValues.split1211
                                        #   in Loop: Header=BB74_344 Depth=1
	movw	$-24026, BasicBlockSignatureTracker # imm = 0xA226
	movw	$0, RunTimeSignatureAdjuster
# %bb.366:                              #   in Loop: Header=BB74_344 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-24016, %ax            # imm = 0xA230
	jne	.LBB74_477
# %bb.367:                              # %sendMTFValues.split1227
                                        #   in Loop: Header=BB74_344 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-24016, BasicBlockSignatureTracker # imm = 0xA230
	movw	$769, RunTimeSignatureAdjuster # imm = 0x301
	jmp	.LBB74_344
.LBB74_368:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$947, %ax               # imm = 0x3B3
	cmpw	$-23932, %ax            # imm = 0xA284
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB74_504
# %bb.369:                              # %sendMTFValues.split1207
	movq	(%rax), %rax
	movl	656(%rax), %eax
	movw	$-23932, BasicBlockSignatureTracker # imm = 0xA284
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_372
# %bb.370:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$118, %ax
	cmpw	$-23822, %ax            # imm = 0xA2F2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	jne	.LBB74_504
# %bb.371:                              # %sendMTFValues.split1229
	movabsq	$.L.str.7.63, %rsi
	movq	stderr, %rdi
	movq	(%rax), %rax
	movl	116(%rax), %edx
	subl	(%rcx), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-23822, BasicBlockSignatureTracker # imm = 0xA2F2
	movw	$118, RunTimeSignatureAdjuster
.LBB74_372:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$112, %ax
	xorw	%cx, %ax
	cmpw	$-23820, %ax            # imm = 0xA2F4
	movq	%r14, %rcx
	movq	-48(%rbp), %rbx         # 8-byte Reload
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	%r12, %rsi
	jne	.LBB74_504
# %bb.373:                              # %sendMTFValues.split1231
	movq	(%rbx), %rax
	movl	116(%rax), %eax
	movl	%eax, (%rdx)
	movq	(%rbx), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
	movw	$-23820, BasicBlockSignatureTracker # imm = 0xA2F4
	movw	$11930, RunTimeSignatureAdjuster # imm = 0x2E9A
	movq	%rsi, -184(%rbp)        # 8-byte Spill
	movl	$3, %esi
	movq	%rcx, %r15
	callq	bsW
	movw	$-23820, BasicBlockSignatureTracker # imm = 0xA2F4
	movw	$11930, RunTimeSignatureAdjuster # imm = 0x2E9A
	movq	(%rbx), %rdi
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %edx
	movw	$-23820, BasicBlockSignatureTracker # imm = 0xA2F4
	movw	$11930, RunTimeSignatureAdjuster # imm = 0x2E9A
	movl	$15, %esi
	callq	bsW
	movw	$-23820, BasicBlockSignatureTracker # imm = 0xA2F4
	movw	$11930, RunTimeSignatureAdjuster # imm = 0x2E9A
	movl	$0, (%r15)
	movw	$-23820, BasicBlockSignatureTracker # imm = 0xA2F4
	movw	$0, RunTimeSignatureAdjuster
.LBB74_374:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_378 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$14, %ax
	xorw	%cx, %ax
	cmpw	$-23814, %ax            # imm = 0xA2FA
	jne	.LBB74_475
# %bb.375:                              # %sendMTFValues.split1233
                                        #   in Loop: Header=BB74_374 Depth=1
	movl	(%r14), %eax
	movl	(%r12), %ecx
	movw	$-23814, BasicBlockSignatureTracker # imm = 0xA2FA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_388
# %bb.376:                              #   in Loop: Header=BB74_374 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$493, %ax               # imm = 0x1ED
	cmpw	$-23785, %ax            # imm = 0xA317
	jne	.LBB74_475
# %bb.377:                              # %sendMTFValues.split1235
                                        #   in Loop: Header=BB74_374 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movw	$-23785, BasicBlockSignatureTracker # imm = 0xA317
	movw	$0, RunTimeSignatureAdjuster
.LBB74_378:                             #   Parent Loop BB74_374 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$40, %ax
	xorw	%cx, %ax
	cmpw	$-23745, %ax            # imm = 0xA33F
	jne	.LBB74_474
# %bb.379:                              # %sendMTFValues.split1239
                                        #   in Loop: Header=BB74_378 Depth=2
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%r14), %rdx
	movzbl	19706(%rcx,%rdx), %ecx
	movw	$-23745, BasicBlockSignatureTracker # imm = 0xA33F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_384
# %bb.380:                              #   in Loop: Header=BB74_378 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$141, %ax
	cmpw	$-23630, %ax            # imm = 0xA3B2
	jne	.LBB74_474
# %bb.381:                              # %sendMTFValues.split1241
                                        #   in Loop: Header=BB74_378 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-23630, BasicBlockSignatureTracker # imm = 0xA3B2
	movw	$12252, RunTimeSignatureAdjuster # imm = 0x2FDC
	movl	$1, %esi
	movl	$1, %edx
	callq	bsW
	movw	$-23630, BasicBlockSignatureTracker # imm = 0xA3B2
	movw	$12252, RunTimeSignatureAdjuster # imm = 0x2FDC
	movw	$-23630, BasicBlockSignatureTracker # imm = 0xA3B2
	movw	$0, RunTimeSignatureAdjuster
# %bb.382:                              #   in Loop: Header=BB74_378 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$99, %ax
	cmpw	$-23599, %ax            # imm = 0xA3D1
	jne	.LBB74_474
# %bb.383:                              # %sendMTFValues.split1245
                                        #   in Loop: Header=BB74_378 Depth=2
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-23599, BasicBlockSignatureTracker # imm = 0xA3D1
	movw	$198, RunTimeSignatureAdjuster
	jmp	.LBB74_378
.LBB74_384:                             #   in Loop: Header=BB74_374 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$222, %ax
	cmpw	$-23583, %ax            # imm = 0xA3E1
	jne	.LBB74_475
# %bb.385:                              # %sendMTFValues.split1243
                                        #   in Loop: Header=BB74_374 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-23583, BasicBlockSignatureTracker # imm = 0xA3E1
	movw	$12175, RunTimeSignatureAdjuster # imm = 0x2F8F
	movl	$1, %esi
	xorl	%edx, %edx
	callq	bsW
	movw	$-23583, BasicBlockSignatureTracker # imm = 0xA3E1
	movw	$12175, RunTimeSignatureAdjuster # imm = 0x2F8F
	movw	$-23583, BasicBlockSignatureTracker # imm = 0xA3E1
	movw	$0, RunTimeSignatureAdjuster
# %bb.386:                              #   in Loop: Header=BB74_374 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-23575, %ax            # imm = 0xA3E9
	jne	.LBB74_475
# %bb.387:                              # %sendMTFValues.split1247
                                        #   in Loop: Header=BB74_374 Depth=1
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-23575, BasicBlockSignatureTracker # imm = 0xA3E9
	movw	$285, RunTimeSignatureAdjuster # imm = 0x11D
	jmp	.LBB74_374
.LBB74_388:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1771, %ax              # imm = 0x6EB
	cmpw	$-23535, %ax            # imm = 0xA411
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB74_504
# %bb.389:                              # %sendMTFValues.split1237
	movq	(%rax), %rax
	movl	656(%rax), %eax
	movw	$-23535, BasicBlockSignatureTracker # imm = 0xA411
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_392
# %bb.390:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-23524, %ax            # imm = 0xA41C
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	jne	.LBB74_504
# %bb.391:                              # %sendMTFValues.split1249
	movabsq	$.L.str.8.64, %rsi
	movq	stderr, %rdi
	movq	(%rax), %rax
	movl	116(%rax), %edx
	subl	(%rcx), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-23524, BasicBlockSignatureTracker # imm = 0xA41C
	movw	$13, RunTimeSignatureAdjuster
.LBB74_392:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$-23496, %ax            # imm = 0xA438
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	jne	.LBB74_504
# %bb.393:                              # %sendMTFValues.split1251
	movq	(%rax), %rax
	movl	116(%rax), %eax
	movl	%eax, (%rcx)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-23496, BasicBlockSignatureTracker # imm = 0xA438
	movw	$0, RunTimeSignatureAdjuster
.LBB74_394:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_398 Depth 2
                                        #       Child Loop BB74_402 Depth 3
                                        #       Child Loop BB74_408 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$114, %ax
	xorw	%cx, %ax
	cmpw	$-23478, %ax            # imm = 0xA44A
	jne	.LBB74_473
# %bb.395:                              # %sendMTFValues.split1253
                                        #   in Loop: Header=BB74_394 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-23478, BasicBlockSignatureTracker # imm = 0xA44A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_420
# %bb.396:                              #   in Loop: Header=BB74_394 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-23460, %ax            # imm = 0xA45C
	jne	.LBB74_473
# %bb.397:                              # %sendMTFValues.split1255
                                        #   in Loop: Header=BB74_394 Depth=1
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movzbl	(%rax), %eax
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rdx), %rdi
	movl	(%rcx), %edx
	movw	$-23460, BasicBlockSignatureTracker # imm = 0xA45C
	movw	$10290, RunTimeSignatureAdjuster # imm = 0x2832
	movl	$5, %esi
	callq	bsW
	movw	$-23460, BasicBlockSignatureTracker # imm = 0xA45C
	movw	$10290, RunTimeSignatureAdjuster # imm = 0x2832
	movl	$0, (%r14)
	movw	$-23460, BasicBlockSignatureTracker # imm = 0xA45C
	movw	$0, RunTimeSignatureAdjuster
.LBB74_398:                             #   Parent Loop BB74_394 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_402 Depth 3
                                        #       Child Loop BB74_408 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$48, %ax
	xorw	%cx, %ax
	cmpw	$-23444, %ax            # imm = 0xA46C
	jne	.LBB74_472
# %bb.399:                              # %sendMTFValues.split1259
                                        #   in Loop: Header=BB74_398 Depth=2
	movl	(%r14), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-23444, BasicBlockSignatureTracker # imm = 0xA46C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_416
# %bb.400:                              #   in Loop: Header=BB74_398 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$235, %ax
	cmpw	$-23417, %ax            # imm = 0xA487
	jne	.LBB74_472
# %bb.401:                              # %sendMTFValues.split1261
                                        #   in Loop: Header=BB74_398 Depth=2
	movw	$-23417, BasicBlockSignatureTracker # imm = 0xA487
	movw	$0, RunTimeSignatureAdjuster
.LBB74_402:                             #   Parent Loop BB74_394 Depth=1
                                        #     Parent Loop BB74_398 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$31, %ax
	xorw	%cx, %ax
	cmpw	$-23400, %ax            # imm = 0xA498
	jne	.LBB74_471
# %bb.403:                              # %sendMTFValues.split1265
                                        #   in Loop: Header=BB74_402 Depth=3
	movq	-216(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	addq	$37708, %rcx            # imm = 0x934C
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	(%r14), %rdx
	movzbl	(%rcx,%rdx), %ecx
	movw	$-23400, BasicBlockSignatureTracker # imm = 0xA498
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB74_406
# %bb.404:                              #   in Loop: Header=BB74_402 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$-23365, %ax            # imm = 0xA4BB
	jne	.LBB74_471
# %bb.405:                              # %sendMTFValues.split1267
                                        #   in Loop: Header=BB74_402 Depth=3
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-23365, BasicBlockSignatureTracker # imm = 0xA4BB
	movw	$10453, RunTimeSignatureAdjuster # imm = 0x28D5
	movl	$2, %esi
	movl	$2, %edx
	callq	bsW
	movw	$-23365, BasicBlockSignatureTracker # imm = 0xA4BB
	movw	$10453, RunTimeSignatureAdjuster # imm = 0x28D5
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-23365, BasicBlockSignatureTracker # imm = 0xA4BB
	movw	$60, RunTimeSignatureAdjuster
	jmp	.LBB74_402
.LBB74_406:                             #   in Loop: Header=BB74_398 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$77, %ax
	cmpw	$-23339, %ax            # imm = 0xA4D5
	jne	.LBB74_472
# %bb.407:                              # %sendMTFValues.split1269
                                        #   in Loop: Header=BB74_398 Depth=2
	movw	$-23339, BasicBlockSignatureTracker # imm = 0xA4D5
	movw	$0, RunTimeSignatureAdjuster
.LBB74_408:                             #   Parent Loop BB74_394 Depth=1
                                        #     Parent Loop BB74_398 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$508, %ax               # imm = 0x1FC
	xorw	%cx, %ax
	cmpw	$-23255, %ax            # imm = 0xA529
	jne	.LBB74_470
# %bb.409:                              # %sendMTFValues.split1271
                                        #   in Loop: Header=BB74_408 Depth=3
	movq	-216(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	addq	$37708, %rcx            # imm = 0x934C
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	(%r14), %rdx
	movzbl	(%rcx,%rdx), %ecx
	movw	$-23255, BasicBlockSignatureTracker # imm = 0xA529
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB74_412
# %bb.410:                              #   in Loop: Header=BB74_408 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$78, %ax
	cmpw	$-23193, %ax            # imm = 0xA567
	jne	.LBB74_470
# %bb.411:                              # %sendMTFValues.split1273
                                        #   in Loop: Header=BB74_408 Depth=3
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-23193, BasicBlockSignatureTracker # imm = 0xA567
	movw	$10505, RunTimeSignatureAdjuster # imm = 0x2909
	movl	$2, %esi
	movl	$3, %edx
	callq	bsW
	movw	$-23193, BasicBlockSignatureTracker # imm = 0xA567
	movw	$10505, RunTimeSignatureAdjuster # imm = 0x2909
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-23193, BasicBlockSignatureTracker # imm = 0xA567
	movw	$434, RunTimeSignatureAdjuster # imm = 0x1B2
	jmp	.LBB74_408
.LBB74_412:                             #   in Loop: Header=BB74_398 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$168, %ax
	cmpw	$-23167, %ax            # imm = 0xA581
	jne	.LBB74_472
# %bb.413:                              # %sendMTFValues.split1275
                                        #   in Loop: Header=BB74_398 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movw	$-23167, BasicBlockSignatureTracker # imm = 0xA581
	movw	$10735, RunTimeSignatureAdjuster # imm = 0x29EF
	movl	$1, %esi
	xorl	%edx, %edx
	callq	bsW
	movw	$-23167, BasicBlockSignatureTracker # imm = 0xA581
	movw	$10735, RunTimeSignatureAdjuster # imm = 0x29EF
	movw	$-23167, BasicBlockSignatureTracker # imm = 0xA581
	movw	$0, RunTimeSignatureAdjuster
# %bb.414:                              #   in Loop: Header=BB74_398 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-23164, %ax            # imm = 0xA584
	jne	.LBB74_472
# %bb.415:                              # %sendMTFValues.split1277
                                        #   in Loop: Header=BB74_398 Depth=2
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-23164, BasicBlockSignatureTracker # imm = 0xA584
	movw	$472, RunTimeSignatureAdjuster # imm = 0x1D8
	jmp	.LBB74_398
.LBB74_416:                             #   in Loop: Header=BB74_394 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$496, %ax               # imm = 0x1F0
	cmpw	$-23140, %ax            # imm = 0xA59C
	jne	.LBB74_473
# %bb.417:                              # %sendMTFValues.split1263
                                        #   in Loop: Header=BB74_394 Depth=1
	movw	$-23140, BasicBlockSignatureTracker # imm = 0xA59C
	movw	$0, RunTimeSignatureAdjuster
# %bb.418:                              #   in Loop: Header=BB74_394 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-23115, %ax            # imm = 0xA5B5
	jne	.LBB74_473
# %bb.419:                              # %sendMTFValues.split1279
                                        #   in Loop: Header=BB74_394 Depth=1
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-23115, BasicBlockSignatureTracker # imm = 0xA5B5
	movw	$397, RunTimeSignatureAdjuster # imm = 0x18D
	jmp	.LBB74_394
.LBB74_420:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$508, %ax               # imm = 0x1FC
	cmpw	$-23114, %ax            # imm = 0xA5B6
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB74_504
# %bb.421:                              # %sendMTFValues.split1257
	movq	(%rax), %rax
	movl	656(%rax), %eax
	movw	$-23114, BasicBlockSignatureTracker # imm = 0xA5B6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_424
# %bb.422:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$-23091, %ax            # imm = 0xA5CD
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	jne	.LBB74_504
# %bb.423:                              # %sendMTFValues.split1281
	movabsq	$.L.str.9.65, %rsi
	movq	stderr, %rdi
	movq	(%rax), %rax
	movl	116(%rax), %edx
	subl	(%rcx), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-23091, BasicBlockSignatureTracker # imm = 0xA5CD
	movw	$123, RunTimeSignatureAdjuster
.LBB74_424:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$103, %ax
	xorw	%cx, %ax
	cmpw	$-23087, %ax            # imm = 0xA5D1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%r13, %rcx
	movq	-120(%rbp), %rdx        # 8-byte Reload
	jne	.LBB74_504
# %bb.425:                              # %sendMTFValues.split1283
	movq	(%rax), %rax
	movl	116(%rax), %eax
	movl	%eax, (%rdx)
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movl	$0, (%rcx)
	movw	$-23087, BasicBlockSignatureTracker # imm = 0xA5D1
	movw	$0, RunTimeSignatureAdjuster
.LBB74_426:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_448 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$14, %ax
	xorw	%cx, %ax
	cmpw	$-23073, %ax            # imm = 0xA5DF
	jne	.LBB74_469
# %bb.427:                              # %sendMTFValues.split1285
                                        #   in Loop: Header=BB74_426 Depth=1
	movl	(%r13), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	668(%rcx), %ecx
	movw	$-23073, BasicBlockSignatureTracker # imm = 0xA5DF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB74_430
# %bb.428:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-23054, %ax            # imm = 0xA5F2
	jne	.LBB74_504
# %bb.429:                              # %sendMTFValues.split1287
	movw	$-23054, BasicBlockSignatureTracker # imm = 0xA5F2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_458
.LBB74_430:                             #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$-23051, %ax            # imm = 0xA5F5
	jne	.LBB74_469
# %bb.431:                              # %sendMTFValues.split1289
                                        #   in Loop: Header=BB74_426 Depth=1
	movl	(%r13), %eax
	addl	$50, %eax
	subl	$1, %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movl	668(%rcx), %ecx
	movw	$-23051, BasicBlockSignatureTracker # imm = 0xA5F5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB74_434
# %bb.432:                              #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$989, %ax               # imm = 0x3DD
	cmpw	$-23000, %ax            # imm = 0xA628
	jne	.LBB74_469
# %bb.433:                              # %sendMTFValues.split1293
                                        #   in Loop: Header=BB74_426 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	668(%rax), %eax
	subl	$1, %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-23000, BasicBlockSignatureTracker # imm = 0xA628
	movw	$989, RunTimeSignatureAdjuster # imm = 0x3DD
.LBB74_434:                             #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$961, %ax               # imm = 0x3C1
	xorw	%cx, %ax
	cmpw	$-22988, %ax            # imm = 0xA634
	jne	.LBB74_469
# %bb.435:                              # %sendMTFValues.split1295
                                        #   in Loop: Header=BB74_426 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-192(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movzbl	1704(%rax,%rcx), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-22988, BasicBlockSignatureTracker # imm = 0xA634
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB74_438
# %bb.436:                              #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$-22986, %ax            # imm = 0xA636
	jne	.LBB74_469
# %bb.437:                              # %sendMTFValues.split1299
                                        #   in Loop: Header=BB74_426 Depth=1
	movw	$-22986, BasicBlockSignatureTracker # imm = 0xA636
	movw	$-23439, RunTimeSignatureAdjuster # imm = 0xA471
	movl	$3006, %edi             # imm = 0xBBE
	callq	BZ2_bz__AssertH__fail
	movw	$-22986, BasicBlockSignatureTracker # imm = 0xA636
	movw	$-23439, RunTimeSignatureAdjuster # imm = 0xA471
	movw	$-22986, BasicBlockSignatureTracker # imm = 0xA636
	movw	$2, RunTimeSignatureAdjuster
.LBB74_438:                             #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$118, %ax
	xorw	%cx, %ax
	cmpw	$-22974, %ax            # imm = 0xA642
	jne	.LBB74_469
# %bb.439:                              # %sendMTFValues.split1297
                                        #   in Loop: Header=BB74_426 Depth=1
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-22974, BasicBlockSignatureTracker # imm = 0xA642
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$6, %eax
	jne	.LBB74_446
# %bb.440:                              #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-22960, %ax            # imm = 0xA650
	jne	.LBB74_469
# %bb.441:                              # %sendMTFValues.split1301
                                        #   in Loop: Header=BB74_426 Depth=1
	movl	$50, %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	subl	(%r13), %ecx
	addl	$1, %ecx
	movw	$-22960, BasicBlockSignatureTracker # imm = 0xA650
	movw	$18, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB74_446
# %bb.442:                              # %Buffer__7
                                        #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10691, %ax             # imm = 0x29C3
	cmpw	$-28781, %ax            # imm = 0x8F93
	jne	.LBB74_469
# %bb.443:                              # %sendMTFValues.split1305
                                        #   in Loop: Header=BB74_426 Depth=1
	movw	$-28781, BasicBlockSignatureTracker # imm = 0x8F93
	movw	$10691, RunTimeSignatureAdjuster # imm = 0x29C3
# %bb.444:                              #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$61, %ax
	xorw	%cx, %ax
	cmpw	$-22931, %ax            # imm = 0xA66D
	jne	.LBB74_469
# %bb.445:                              # %sendMTFValues.split1337
                                        #   in Loop: Header=BB74_426 Depth=1
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	(%rdi), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	(%rdi), %rcx
	movq	-192(%rbp), %rsi        # 8-byte Reload
	movslq	(%rsi), %rdx
	movzbl	1704(%rcx,%rdx), %ecx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rcx, %r8
	movq	(%rdi), %rax
	addq	$39256, %rax            # imm = 0x9958
	movq	(%rdi), %rcx
	movslq	(%rsi), %rdx
	movzbl	1704(%rcx,%rdx), %ecx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rcx, %rdx
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	%r13, %rcx
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movl	(%rcx), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-344(%rbp), %rbx        # 8-byte Reload
	movw	%ax, (%rbx)
	movq	(%rdi), %rdi
	movq	(%r8), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%rdx), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$5, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$6, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$7, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$8, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$9, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$10, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$11, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$12, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$13, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$14, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$16, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$17, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$18, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$19, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$20, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$21, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$22, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$23, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$24, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$25, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$26, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$27, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$28, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$29, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$30, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$31, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$32, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$33, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$35, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$36, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$37, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$38, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$39, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$40, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$41, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$42, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	(%r15), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$43, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$44, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$45, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %r15         # 8-byte Reload
	movl	(%r15), %ecx
	addl	$46, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movl	(%r15), %ecx
	addl	$47, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rdi
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$48, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	(%r15), %rdi
	movq	-88(%rbp), %r15         # 8-byte Reload
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	addl	$49, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, (%rbx)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	(%r15), %rax
	movzwl	(%rbx), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rbx), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	callq	bsW
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$10755, RunTimeSignatureAdjuster # imm = 0x2A03
	movw	$-22931, BasicBlockSignatureTracker # imm = 0xA66D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB74_456
.LBB74_446:                             #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$62, %ax
	xorw	%cx, %ax
	cmpw	$-22916, %ax            # imm = 0xA67C
	jne	.LBB74_469
# %bb.447:                              # %sendMTFValues.split1303
                                        #   in Loop: Header=BB74_426 Depth=1
	movl	(%r13), %eax
	movl	%eax, (%r14)
	movw	$-22916, BasicBlockSignatureTracker # imm = 0xA67C
	movw	$0, RunTimeSignatureAdjuster
.LBB74_448:                             #   Parent Loop BB74_426 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$241, %ax
	xorw	%cx, %ax
	cmpw	$-22899, %ax            # imm = 0xA68D
	jne	.LBB74_468
# %bb.449:                              # %sendMTFValues.split1309
                                        #   in Loop: Header=BB74_448 Depth=2
	movl	(%r14), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-22899, BasicBlockSignatureTracker # imm = 0xA68D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB74_454
# %bb.450:                              #   in Loop: Header=BB74_448 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-22876, %ax            # imm = 0xA6A4
	jne	.LBB74_468
# %bb.451:                              # %sendMTFValues.split1311
                                        #   in Loop: Header=BB74_448 Depth=2
	movq	-48(%rbp), %rbx         # 8-byte Reload
	movq	(%rbx), %rdi
	movq	(%rbx), %rax
	addq	$37708, %rax            # imm = 0x934C
	movq	(%rbx), %rcx
	movq	-192(%rbp), %r9         # 8-byte Reload
	movslq	(%r9), %rdx
	movzbl	1704(%rcx,%rdx), %ecx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movq	-56(%rbp), %r10         # 8-byte Reload
	movq	(%r10), %rcx
	movq	%r14, %r8
	movslq	(%r8), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movzbl	(%rax,%rcx), %esi
	movq	(%rbx), %rax
	addq	$39256, %rax            # imm = 0x9958
	movq	(%rbx), %rcx
	movslq	(%r9), %rdx
	movzbl	1704(%rcx,%rdx), %ecx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	(%r10), %rcx
	movslq	(%r8), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	(%rax,%rcx,4), %edx
	movw	$-22876, BasicBlockSignatureTracker # imm = 0xA6A4
	movw	$10954, RunTimeSignatureAdjuster # imm = 0x2ACA
	callq	bsW
	movw	$-22876, BasicBlockSignatureTracker # imm = 0xA6A4
	movw	$10954, RunTimeSignatureAdjuster # imm = 0x2ACA
	movw	$-22876, BasicBlockSignatureTracker # imm = 0xA6A4
	movw	$0, RunTimeSignatureAdjuster
# %bb.452:                              #   in Loop: Header=BB74_448 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-22861, %ax            # imm = 0xA6B3
	jne	.LBB74_468
# %bb.453:                              # %sendMTFValues.split1315
                                        #   in Loop: Header=BB74_448 Depth=2
	movq	%r14, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-22861, BasicBlockSignatureTracker # imm = 0xA6B3
	movw	$207, RunTimeSignatureAdjuster
	jmp	.LBB74_448
.LBB74_454:                             #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$-22859, %ax            # imm = 0xA6B5
	jne	.LBB74_469
# %bb.455:                              # %sendMTFValues.split1313
                                        #   in Loop: Header=BB74_426 Depth=1
	movw	$-22859, BasicBlockSignatureTracker # imm = 0xA6B5
	movw	$216, RunTimeSignatureAdjuster
.LBB74_456:                             #   in Loop: Header=BB74_426 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$327, %ax               # imm = 0x147
	xorw	%cx, %ax
	cmpw	$-22742, %ax            # imm = 0xA72A
	jne	.LBB74_469
# %bb.457:                              # %sendMTFValues.split1307
                                        #   in Loop: Header=BB74_426 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	addl	$1, %eax
	movl	%eax, (%r13)
	movq	-192(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-22742, BasicBlockSignatureTracker # imm = 0xA72A
	movw	$763, RunTimeSignatureAdjuster # imm = 0x2FB
	jmp	.LBB74_426
.LBB74_458:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$664, %ax               # imm = 0x298
	cmpw	$-22678, %ax            # imm = 0xA76A
	jne	.LBB74_504
# %bb.459:                              # %sendMTFValues.split1291
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r12), %ecx
	movw	$-22678, BasicBlockSignatureTracker # imm = 0xA76A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB74_462
# %bb.460:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$232, %ax
	cmpw	$-22654, %ax            # imm = 0xA782
	jne	.LBB74_504
# %bb.461:                              # %sendMTFValues.split1319
	movw	$-22654, BasicBlockSignatureTracker # imm = 0xA782
	movw	$-23099, RunTimeSignatureAdjuster # imm = 0xA5C5
	movl	$3007, %edi             # imm = 0xBBF
	callq	BZ2_bz__AssertH__fail
	movw	$-22654, BasicBlockSignatureTracker # imm = 0xA782
	movw	$-23099, RunTimeSignatureAdjuster # imm = 0xA5C5
	movw	$-22654, BasicBlockSignatureTracker # imm = 0xA782
	movw	$232, RunTimeSignatureAdjuster
.LBB74_462:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$236, %ax
	xorw	%cx, %ax
	cmpw	$-22650, %ax            # imm = 0xA786
	movq	-48(%rbp), %rax         # 8-byte Reload
	jne	.LBB74_504
# %bb.463:                              # %sendMTFValues.split1317
	movq	(%rax), %rax
	movl	656(%rax), %eax
	movw	$-22650, BasicBlockSignatureTracker # imm = 0xA786
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB74_466
# %bb.464:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-22639, %ax            # imm = 0xA791
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	-120(%rbp), %r12        # 8-byte Reload
	jne	.LBB74_504
# %bb.465:                              # %sendMTFValues.split1321
	movabsq	$.L.str.10.66, %rsi
	movq	stderr, %rdi
	movq	(%r15), %rax
	movl	116(%rax), %edx
	subl	(%r12), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-22639, BasicBlockSignatureTracker # imm = 0xA791
	movw	$23, RunTimeSignatureAdjuster
.LBB74_466:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27, %ax
	xorw	%cx, %ax
	cmpw	$-22627, %ax            # imm = 0xA79D
	jne	.LBB74_504
# %bb.467:                              # %sendMTFValues.split1323
	movw	$-22627, BasicBlockSignatureTracker # imm = 0xA79D
	movw	$11219, RunTimeSignatureAdjuster # imm = 0x2BD3
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB74_468:                             # %CFerrorHandler.sendMTFValues.loopexit
	jmp	.LBB74_504
.LBB74_469:                             # %CFerrorHandler.sendMTFValues.loopexit1
	jmp	.LBB74_504
.LBB74_470:                             # %CFerrorHandler.sendMTFValues.loopexit2
	jmp	.LBB74_504
.LBB74_471:                             # %CFerrorHandler.sendMTFValues.loopexit3
	jmp	.LBB74_504
.LBB74_472:                             # %CFerrorHandler.sendMTFValues.loopexit4
	jmp	.LBB74_504
.LBB74_473:                             # %CFerrorHandler.sendMTFValues.loopexit5
	jmp	.LBB74_504
.LBB74_474:                             # %CFerrorHandler.sendMTFValues.loopexit6
	jmp	.LBB74_504
.LBB74_475:                             # %CFerrorHandler.sendMTFValues.loopexit7
	jmp	.LBB74_504
.LBB74_476:                             # %CFerrorHandler.sendMTFValues.loopexit8
	jmp	.LBB74_504
.LBB74_477:                             # %CFerrorHandler.sendMTFValues.loopexit9
	jmp	.LBB74_504
.LBB74_478:                             # %CFerrorHandler.sendMTFValues.loopexit10
	jmp	.LBB74_504
.LBB74_479:                             # %CFerrorHandler.sendMTFValues.loopexit11
	jmp	.LBB74_504
.LBB74_480:                             # %CFerrorHandler.sendMTFValues.loopexit12
	jmp	.LBB74_504
.LBB74_481:                             # %CFerrorHandler.sendMTFValues.loopexit13
	jmp	.LBB74_504
.LBB74_482:                             # %CFerrorHandler.sendMTFValues.loopexit14
	jmp	.LBB74_504
.LBB74_483:                             # %CFerrorHandler.sendMTFValues.loopexit15
	jmp	.LBB74_504
.LBB74_484:                             # %CFerrorHandler.sendMTFValues.loopexit16
	jmp	.LBB74_504
.LBB74_485:                             # %CFerrorHandler.sendMTFValues.loopexit17
	jmp	.LBB74_504
.LBB74_486:                             # %CFerrorHandler.sendMTFValues.loopexit18
	jmp	.LBB74_504
.LBB74_487:                             # %CFerrorHandler.sendMTFValues.loopexit19
	jmp	.LBB74_504
.LBB74_488:                             # %CFerrorHandler.sendMTFValues.loopexit20
	jmp	.LBB74_504
.LBB74_489:                             # %CFerrorHandler.sendMTFValues.loopexit21
	jmp	.LBB74_504
.LBB74_490:                             # %CFerrorHandler.sendMTFValues.loopexit22
	jmp	.LBB74_504
.LBB74_491:                             # %CFerrorHandler.sendMTFValues.loopexit23
	jmp	.LBB74_504
.LBB74_492:                             # %CFerrorHandler.sendMTFValues.loopexit24
	jmp	.LBB74_504
.LBB74_493:                             # %CFerrorHandler.sendMTFValues.loopexit25
	jmp	.LBB74_504
.LBB74_494:                             # %CFerrorHandler.sendMTFValues.loopexit26
	jmp	.LBB74_504
.LBB74_495:                             # %CFerrorHandler.sendMTFValues.loopexit27
	jmp	.LBB74_504
.LBB74_496:                             # %CFerrorHandler.sendMTFValues.loopexit28
	jmp	.LBB74_504
.LBB74_497:                             # %CFerrorHandler.sendMTFValues.loopexit29
	jmp	.LBB74_504
.LBB74_498:                             # %CFerrorHandler.sendMTFValues.loopexit30
	jmp	.LBB74_504
.LBB74_499:                             # %CFerrorHandler.sendMTFValues.loopexit31
	jmp	.LBB74_504
.LBB74_500:                             # %CFerrorHandler.sendMTFValues.loopexit32
	jmp	.LBB74_504
.LBB74_501:                             # %CFerrorHandler.sendMTFValues.loopexit33
	jmp	.LBB74_504
.LBB74_502:                             # %CFerrorHandler.sendMTFValues.loopexit34
	jmp	.LBB74_504
.LBB74_503:                             # %CFerrorHandler.sendMTFValues.loopexit35
	jmp	.LBB74_504
.LBB74_504:                             # %CFerrorHandler.sendMTFValues
	callq	FAULT_DETECTED_CFC
.Lfunc_end74:
	.size	sendMTFValues, .Lfunc_end74-sendMTFValues
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bsFinishWrite
	.type	bsFinishWrite,@function
bsFinishWrite:                          # @bsFinishWrite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$10933, %ax             # imm = 0x2AB5
	xorw	%cx, %ax
	cmpw	$-22601, %ax            # imm = 0xA7B7
	jne	.LBB75_9
# %bb.1:                                # %bsFinishWrite.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rdi, (%rax)
	movw	$-22601, BasicBlockSignatureTracker # imm = 0xA7B7
	movw	$0, RunTimeSignatureAdjuster
.LBB75_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$118, %cx
	xorw	%dx, %cx
	cmpw	$-22591, %cx            # imm = 0xA7C1
	jne	.LBB75_8
# %bb.3:                                # %bsFinishWrite.split14
                                        #   in Loop: Header=BB75_2 Depth=1
	movq	(%rax), %rcx
	movl	644(%rcx), %ecx
	movw	$-22591, BasicBlockSignatureTracker # imm = 0xA7C1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jle	.LBB75_6
# %bb.4:                                #   in Loop: Header=BB75_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$8, %cx
	cmpw	$-22583, %cx            # imm = 0xA7C9
	jne	.LBB75_8
# %bb.5:                                # %bsFinishWrite.split16
                                        #   in Loop: Header=BB75_2 Depth=1
	movq	(%rax), %rcx
	movl	640(%rcx), %ecx
	shrl	$24, %ecx
	movq	(%rax), %rdx
	movq	80(%rdx), %rdx
	movq	(%rax), %rsi
	movslq	116(%rsi), %rsi
	movb	%cl, (%rdx,%rsi)
	movq	(%rax), %rcx
	movl	116(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 116(%rcx)
	movq	(%rax), %rcx
	movl	640(%rcx), %edx
	shll	$8, %edx
	movl	%edx, 640(%rcx)
	movq	(%rax), %rcx
	movl	644(%rcx), %edx
	subl	$8, %edx
	movl	%edx, 644(%rcx)
	movw	$-22583, BasicBlockSignatureTracker # imm = 0xA7C9
	movw	$126, RunTimeSignatureAdjuster
	jmp	.LBB75_2
.LBB75_6:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$-22529, %ax            # imm = 0xA7FF
	jne	.LBB75_9
# %bb.7:                                # %bsFinishWrite.split18
	movw	$-22529, BasicBlockSignatureTracker # imm = 0xA7FF
	movw	$11085, RunTimeSignatureAdjuster # imm = 0x2B4D
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB75_8:                               # %CFerrorHandler.bsFinishWrite.loopexit
	jmp	.LBB75_9
.LBB75_9:                               # %CFerrorHandler.bsFinishWrite
	callq	FAULT_DETECTED_CFC
.Lfunc_end75:
	.size	bsFinishWrite, .Lfunc_end75-bsFinishWrite
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function makeMaps_e
	.type	makeMaps_e,@function
makeMaps_e:                             # @makeMaps_e
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$9722, %ax              # imm = 0x25FA
	xorw	%cx, %ax
	cmpw	$-22492, %ax            # imm = 0xA824
	jne	.LBB76_15
# %bb.1:                                # %makeMaps_e.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rdx
	movl	$0, 124(%rdx)
	movl	$0, (%rcx)
	movw	$-22492, BasicBlockSignatureTracker # imm = 0xA824
	movw	$0, RunTimeSignatureAdjuster
.LBB76_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$3, %dx
	xorw	%si, %dx
	cmpw	$-22489, %dx            # imm = 0xA827
	jne	.LBB76_14
# %bb.3:                                # %makeMaps_e.split25
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	(%rcx), %edx
	movw	$-22489, BasicBlockSignatureTracker # imm = 0xA827
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %edx              # imm = 0x100
	jge	.LBB76_12
# %bb.4:                                #   in Loop: Header=BB76_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$22, %dx
	cmpw	$-22479, %dx            # imm = 0xA831
	jne	.LBB76_14
# %bb.5:                                # %makeMaps_e.split27
                                        #   in Loop: Header=BB76_2 Depth=1
	movq	(%rax), %rdx
	movslq	(%rcx), %rsi
	movb	128(%rdx,%rsi), %dl
	movw	$-22479, BasicBlockSignatureTracker # imm = 0xA831
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %dl
	je	.LBB76_8
# %bb.6:                                #   in Loop: Header=BB76_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$6, %dx
	cmpw	$-22473, %dx            # imm = 0xA837
	jne	.LBB76_14
# %bb.7:                                # %makeMaps_e.split31
                                        #   in Loop: Header=BB76_2 Depth=1
	movq	(%rax), %rdx
	movl	124(%rdx), %edx
	movq	(%rax), %rsi
	movslq	(%rcx), %rdi
	movb	%dl, 384(%rsi,%rdi)
	movq	(%rax), %rdx
	movl	124(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 124(%rdx)
	movw	$-22473, BasicBlockSignatureTracker # imm = 0xA837
	movw	$6, RunTimeSignatureAdjuster
.LBB76_8:                               #   in Loop: Header=BB76_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$123, %dx
	xorw	%si, %dx
	cmpw	$-22454, %dx            # imm = 0xA84A
	jne	.LBB76_14
# %bb.9:                                # %makeMaps_e.split33
                                        #   in Loop: Header=BB76_2 Depth=1
	movw	$-22454, BasicBlockSignatureTracker # imm = 0xA84A
	movw	$0, RunTimeSignatureAdjuster
# %bb.10:                               #   in Loop: Header=BB76_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$18, %dx
	cmpw	$-22440, %dx            # imm = 0xA858
	jne	.LBB76_14
# %bb.11:                               # %makeMaps_e.split35
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	(%rcx), %edx
	addl	$1, %edx
	movl	%edx, (%rcx)
	movw	$-22440, BasicBlockSignatureTracker # imm = 0xA858
	movw	$124, RunTimeSignatureAdjuster
	jmp	.LBB76_2
.LBB76_12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$70, %ax
	cmpw	$-22431, %ax            # imm = 0xA861
	jne	.LBB76_15
# %bb.13:                               # %makeMaps_e.split29
	movw	$-22431, BasicBlockSignatureTracker # imm = 0xA861
	movw	$9231, RunTimeSignatureAdjuster # imm = 0x240F
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB76_14:                              # %CFerrorHandler.makeMaps_e.loopexit
	jmp	.LBB76_15
.LBB76_15:                              # %CFerrorHandler.makeMaps_e
	callq	FAULT_DETECTED_CFC
.Lfunc_end76:
	.size	makeMaps_e, .Lfunc_end76-makeMaps_e
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_decompress          # -- Begin function BZ2_decompress
	.p2align	4, 0x90
	.type	BZ2_decompress,@function
BZ2_decompress:                         # @BZ2_decompress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$632, %rsp              # imm = 0x278
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-450, %ax              # imm = 0xFE3E
	xorw	%cx, %ax
	cmpw	$-22412, %ax            # imm = 0xA874
	jne	.LBB77_1436
# %bb.1:                                # %BZ2_decompress.split
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rdx
	addq	$-16, %rdx
	movq	%rdx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -528(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -560(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -536(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rcx, %rsp
	movq	%rdi, (%r8)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, (%r15)
	movq	(%r8), %rcx
	movl	8(%rcx), %ecx
	movw	$-22412, BasicBlockSignatureTracker # imm = 0xA874
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$10, %ecx
	jne	.LBB77_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$15, %cx
	cmpw	$-22405, %cx            # imm = 0xA87B
	jne	.LBB77_1436
# %bb.3:                                # %BZ2_decompress.split2488
	movq	(%r8), %rcx
	movl	$0, 64036(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64040(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64044(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64048(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64052(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64056(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64060(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64064(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64068(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64072(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64076(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64080(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64084(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64088(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64092(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64096(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64100(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64104(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64108(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64112(%rcx)
	movq	(%r8), %rcx
	movl	$0, 64116(%rcx)
	movq	(%r8), %rcx
	movq	$0, 64120(%rcx)
	movq	(%r8), %rcx
	movq	$0, 64128(%rcx)
	movq	(%r8), %rcx
	movq	$0, 64136(%rcx)
	movw	$-22405, BasicBlockSignatureTracker # imm = 0xA87B
	movw	$15, RunTimeSignatureAdjuster
.LBB77_4:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %di
	xorw	$219, %cx
	xorw	%di, %cx
	cmpw	$-22353, %cx            # imm = 0xA8AF
	jne	.LBB77_1436
# %bb.5:                                # %BZ2_decompress.split2490
	movq	(%r8), %rcx
	movl	64036(%rcx), %ecx
	movl	%ecx, (%r10)
	movq	(%r8), %rcx
	movl	64040(%rcx), %ecx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64044(%rcx), %ecx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64048(%rcx), %ecx
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64052(%rcx), %ecx
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64056(%rcx), %ecx
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64060(%rcx), %ecx
	movq	-328(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64064(%rcx), %ecx
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64068(%rcx), %ecx
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64072(%rcx), %ecx
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64076(%rcx), %ecx
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64080(%rcx), %ecx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64084(%rcx), %ecx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64088(%rcx), %ecx
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64092(%rcx), %ecx
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64096(%rcx), %ecx
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64100(%rcx), %ecx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64104(%rcx), %ecx
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64108(%rcx), %ecx
	movq	-168(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64112(%rcx), %ecx
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movl	64116(%rcx), %ecx
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, (%rdi)
	movq	(%r8), %rcx
	movq	64120(%rcx), %rcx
	movq	-176(%rbp), %rdi        # 8-byte Reload
	movq	%rcx, (%rdi)
	movq	(%r8), %rcx
	movq	64128(%rcx), %rcx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	movq	(%r8), %rcx
	movq	64136(%rcx), %rcx
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	%rcx, (%rdi)
	movl	$0, (%r9)
	movq	(%r8), %rcx
	movl	8(%rcx), %ecx
	movw	$-22353, BasicBlockSignatureTracker(%rip) # imm = 0xA8AF
	movw	$0, RunTimeSignatureAdjuster(%rip)
	addl	$-10, %ecx
	movl	%ecx, %edi
	subl	$40, %edi
	ja	.LBB77_1365
# %bb.6:                                # %BZ2_decompress.split2490
	movq	.LJTI77_0(,%rcx,8), %rcx
	jmpq	*%rcx
.LBB77_7:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$21, %cx
	cmpw	$-22342, %cx            # imm = 0xA8BA
	jne	.LBB77_1436
# %bb.8:                                # %BZ2_decompress.split2494
	movq	(%r8), %rcx
	movl	$10, 8(%rcx)
	movw	$-22342, BasicBlockSignatureTracker # imm = 0xA8BA
	movw	$0, RunTimeSignatureAdjuster
.LBB77_9:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %di
	xorw	$113, %cx
	xorw	%di, %cx
	cmpw	$-22325, %cx            # imm = 0xA8CB
	jne	.LBB77_1435
# %bb.10:                               # %BZ2_decompress.split2576
                                        #   in Loop: Header=BB77_9 Depth=1
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movw	$-22325, BasicBlockSignatureTracker # imm = 0xA8CB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %ecx
	jl	.LBB77_13
# %bb.11:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$31, %cx
	cmpw	$-22316, %cx            # imm = 0xA8D4
	jne	.LBB77_1436
# %bb.12:                               # %BZ2_decompress.split2578
	movq	(%r8), %rcx
	movl	32(%rcx), %edi
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edi
	andl	$255, %edi
	movl	%edi, (%rbx)
	movq	(%r8), %rcx
	movl	36(%rcx), %edi
	subl	$8, %edi
	movl	%edi, 36(%rcx)
	movl	(%rbx), %ecx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movb	%cl, (%rdi)
	movw	$-22316, BasicBlockSignatureTracker # imm = 0xA8D4
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_23
.LBB77_13:                              #   in Loop: Header=BB77_9 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$457, %cx               # imm = 0x1C9
	cmpw	$-22270, %cx            # imm = 0xA902
	jne	.LBB77_1435
# %bb.14:                               # %BZ2_decompress.split2580
                                        #   in Loop: Header=BB77_9 Depth=1
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %ecx
	movw	$-22270, BasicBlockSignatureTracker # imm = 0xA902
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_17
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$36, %ax
	cmpw	$-22234, %ax            # imm = 0xA926
	jne	.LBB77_1436
# %bb.16:                               # %BZ2_decompress.split2584
	movl	$0, (%r9)
	movw	$-22234, BasicBlockSignatureTracker # imm = 0xA926
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1369
.LBB77_17:                              #   in Loop: Header=BB77_9 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$50, %cx
	cmpw	$-22224, %cx            # imm = 0xA930
	jne	.LBB77_1435
# %bb.18:                               # %BZ2_decompress.split2586
                                        #   in Loop: Header=BB77_9 Depth=1
	movq	%r10, -248(%rbp)        # 8-byte Spill
	movq	%r9, %r10
	movq	(%r8), %rcx
	movl	32(%rcx), %ecx
	shll	$8, %ecx
	movq	(%r8), %rdi
	movq	(%rdi), %rdi
	movq	(%rdi), %rdi
	movzbl	(%rdi), %edi
	orl	%edi, %ecx
	movq	(%r8), %rdi
	movl	%ecx, 32(%rdi)
	movq	(%r8), %rcx
	movl	36(%rcx), %edi
	addl	$8, %edi
	movl	%edi, 36(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rdi
	addq	$1, %rdi
	movq	%rdi, (%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %edi
	addl	$-1, %edi
	movl	%edi, 8(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %edi
	addl	$1, %edi
	movl	%edi, 12(%rcx)
	movq	%r8, %r9
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %ecx
	movw	$-22224, BasicBlockSignatureTracker # imm = 0xA930
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_21
# %bb.19:                               #   in Loop: Header=BB77_9 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$113, %cx
	cmpw	$-22207, %cx            # imm = 0xA941
	movq	%r9, %rcx
	jne	.LBB77_1435
# %bb.20:                               # %BZ2_decompress.split2590
                                        #   in Loop: Header=BB77_9 Depth=1
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	16(%rcx), %edi
	addl	$1, %edi
	movl	%edi, 16(%rcx)
	movw	$-22207, BasicBlockSignatureTracker # imm = 0xA941
	movw	$113, RunTimeSignatureAdjuster
.LBB77_21:                              #   in Loop: Header=BB77_9 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %di
	xorw	$80, %cx
	xorw	%di, %cx
	cmpw	$-22176, %cx            # imm = 0xA960
	movq	%r9, %r8
	movq	%r10, %r9
	movq	-248(%rbp), %r10        # 8-byte Reload
	jne	.LBB77_1435
# %bb.22:                               # %BZ2_decompress.split2592
                                        #   in Loop: Header=BB77_9 Depth=1
	movw	$-22176, BasicBlockSignatureTracker # imm = 0xA960
	movw	$474, RunTimeSignatureAdjuster # imm = 0x1DA
	jmp	.LBB77_9
.LBB77_23:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$434, %cx               # imm = 0x1B2
	cmpw	$-22170, %cx            # imm = 0xA966
	jne	.LBB77_1436
# %bb.24:                               # %BZ2_decompress.split2582
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movw	$-22170, BasicBlockSignatureTracker # imm = 0xA966
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$66, %ecx
	je	.LBB77_27
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-22167, %ax            # imm = 0xA969
	jne	.LBB77_1436
# %bb.26:                               # %BZ2_decompress.split2594
	movl	$-5, (%r9)
	movw	$-22167, BasicBlockSignatureTracker # imm = 0xA969
	movw	$79, RunTimeSignatureAdjuster
	jmp	.LBB77_1369
.LBB77_27:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$8, %cx
	cmpw	$-22162, %cx            # imm = 0xA96E
	jne	.LBB77_1436
# %bb.28:                               # %BZ2_decompress.split2596
	movw	$-22162, BasicBlockSignatureTracker # imm = 0xA96E
	movw	$449, RunTimeSignatureAdjuster # imm = 0x1C1
.LBB77_29:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %di
	xorw	$361, %cx               # imm = 0x169
	xorw	%di, %cx
	cmpw	$-22074, %cx            # imm = 0xA9C6
	jne	.LBB77_1436
# %bb.30:                               # %BZ2_decompress.split2496
	movq	(%r8), %rcx
	movl	$11, 8(%rcx)
	movw	$-22074, BasicBlockSignatureTracker # imm = 0xA9C6
	movw	$0, RunTimeSignatureAdjuster
.LBB77_31:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %di
	xorw	$16, %cx
	xorw	%di, %cx
	cmpw	$-22058, %cx            # imm = 0xA9D6
	jne	.LBB77_1434
# %bb.32:                               # %BZ2_decompress.split2598
                                        #   in Loop: Header=BB77_31 Depth=1
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movw	$-22058, BasicBlockSignatureTracker # imm = 0xA9D6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %ecx
	jl	.LBB77_35
# %bb.33:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$13, %cx
	cmpw	$-22053, %cx            # imm = 0xA9DB
	jne	.LBB77_1436
# %bb.34:                               # %BZ2_decompress.split2600
	movq	(%r8), %rcx
	movl	32(%rcx), %edi
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edi
	andl	$255, %edi
	movl	%edi, (%rsi)
	movq	(%r8), %rcx
	movl	36(%rcx), %edi
	subl	$8, %edi
	movl	%edi, 36(%rcx)
	movl	(%rsi), %ecx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movb	%cl, (%rsi)
	movw	$-22053, BasicBlockSignatureTracker # imm = 0xA9DB
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_45
.LBB77_35:                              #   in Loop: Header=BB77_31 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$53, %cx
	cmpw	$-22045, %cx            # imm = 0xA9E3
	jne	.LBB77_1434
# %bb.36:                               # %BZ2_decompress.split2602
                                        #   in Loop: Header=BB77_31 Depth=1
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %ecx
	movw	$-22045, BasicBlockSignatureTracker # imm = 0xA9E3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_39
# %bb.37:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-22044, %ax            # imm = 0xA9E4
	jne	.LBB77_1436
# %bb.38:                               # %BZ2_decompress.split2606
	movl	$0, (%r9)
	movw	$-22044, BasicBlockSignatureTracker # imm = 0xA9E4
	movw	$194, RunTimeSignatureAdjuster
	jmp	.LBB77_1369
.LBB77_39:                              #   in Loop: Header=BB77_31 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$16, %cx
	cmpw	$-22029, %cx            # imm = 0xA9F3
	jne	.LBB77_1434
# %bb.40:                               # %BZ2_decompress.split2608
                                        #   in Loop: Header=BB77_31 Depth=1
	movq	(%r8), %rcx
	movl	32(%rcx), %ecx
	shll	$8, %ecx
	movq	(%r8), %rdi
	movq	(%rdi), %rdi
	movq	(%rdi), %rdi
	movzbl	(%rdi), %edi
	orl	%edi, %ecx
	movq	(%r8), %rdi
	movl	%ecx, 32(%rdi)
	movq	(%r8), %rcx
	movl	36(%rcx), %edi
	addl	$8, %edi
	movl	%edi, 36(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rdi
	addq	$1, %rdi
	movq	%rdi, (%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %edi
	addl	$-1, %edi
	movl	%edi, 8(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %edi
	addl	$1, %edi
	movl	%edi, 12(%rcx)
	movq	%r8, %rbx
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %ecx
	movw	$-22029, BasicBlockSignatureTracker # imm = 0xA9F3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_43
# %bb.41:                               #   in Loop: Header=BB77_31 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$1011, %cx              # imm = 0x3F3
	cmpw	$-22016, %cx            # imm = 0xAA00
	movq	%rbx, %rcx
	jne	.LBB77_1434
# %bb.42:                               # %BZ2_decompress.split2610
                                        #   in Loop: Header=BB77_31 Depth=1
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	16(%rcx), %edi
	addl	$1, %edi
	movl	%edi, 16(%rcx)
	movw	$-22016, BasicBlockSignatureTracker # imm = 0xAA00
	movw	$1011, RunTimeSignatureAdjuster # imm = 0x3F3
.LBB77_43:                              #   in Loop: Header=BB77_31 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %di
	xorw	$1015, %cx              # imm = 0x3F7
	xorw	%di, %cx
	cmpw	$-22012, %cx            # imm = 0xAA04
	movq	%rbx, %r8
	jne	.LBB77_1434
# %bb.44:                               # %BZ2_decompress.split2612
                                        #   in Loop: Header=BB77_31 Depth=1
	movw	$-22012, BasicBlockSignatureTracker # imm = 0xAA04
	movw	$962, RunTimeSignatureAdjuster # imm = 0x3C2
	jmp	.LBB77_31
.LBB77_45:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$970, %cx               # imm = 0x3CA
	cmpw	$-21999, %cx            # imm = 0xAA11
	jne	.LBB77_1436
# %bb.46:                               # %BZ2_decompress.split2604
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movw	$-21999, BasicBlockSignatureTracker # imm = 0xAA11
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$90, %ecx
	je	.LBB77_49
# %bb.47:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-21974, %ax            # imm = 0xAA2A
	jne	.LBB77_1436
# %bb.48:                               # %BZ2_decompress.split2614
	movl	$-5, (%r9)
	movw	$-21974, BasicBlockSignatureTracker # imm = 0xAA2A
	movw	$780, RunTimeSignatureAdjuster # imm = 0x30C
	jmp	.LBB77_1369
.LBB77_49:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$84, %cx
	cmpw	$-21947, %cx            # imm = 0xAA45
	jne	.LBB77_1436
# %bb.50:                               # %BZ2_decompress.split2616
	movw	$-21947, BasicBlockSignatureTracker # imm = 0xAA45
	movw	$746, RunTimeSignatureAdjuster # imm = 0x2EA
.LBB77_51:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$740, %cx               # imm = 0x2E4
	xorw	%si, %cx
	cmpw	$-21941, %cx            # imm = 0xAA4B
	jne	.LBB77_1436
# %bb.52:                               # %BZ2_decompress.split2498
	movq	(%r8), %rcx
	movl	$12, 8(%rcx)
	movw	$-21941, BasicBlockSignatureTracker # imm = 0xAA4B
	movw	$0, RunTimeSignatureAdjuster
.LBB77_53:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$48, %cx
	xorw	%si, %cx
	cmpw	$-21893, %cx            # imm = 0xAA7B
	jne	.LBB77_1433
# %bb.54:                               # %BZ2_decompress.split2618
                                        #   in Loop: Header=BB77_53 Depth=1
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movw	$-21893, BasicBlockSignatureTracker # imm = 0xAA7B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %ecx
	jl	.LBB77_57
# %bb.55:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$237, %cx
	cmpw	$-21866, %cx            # imm = 0xAA96
	jne	.LBB77_1436
# %bb.56:                               # %BZ2_decompress.split2620
	movq	(%r8), %rcx
	movl	32(%rcx), %esi
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %esi
	andl	$255, %esi
	movl	%esi, (%rdx)
	movq	(%r8), %rcx
	movl	36(%rcx), %esi
	subl	$8, %esi
	movl	%esi, 36(%rcx)
	movl	(%rdx), %ecx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movb	%cl, (%rdx)
	movw	$-21866, BasicBlockSignatureTracker # imm = 0xAA96
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_67
.LBB77_57:                              #   in Loop: Header=BB77_53 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$217, %cx
	cmpw	$-21854, %cx            # imm = 0xAAA2
	jne	.LBB77_1433
# %bb.58:                               # %BZ2_decompress.split2622
                                        #   in Loop: Header=BB77_53 Depth=1
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %ecx
	movw	$-21854, BasicBlockSignatureTracker # imm = 0xAAA2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_61
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-21840, %ax            # imm = 0xAAB0
	jne	.LBB77_1436
# %bb.60:                               # %BZ2_decompress.split2626
	movl	$0, (%r9)
	movw	$-21840, BasicBlockSignatureTracker # imm = 0xAAB0
	movw	$918, RunTimeSignatureAdjuster # imm = 0x396
	jmp	.LBB77_1369
.LBB77_61:                              #   in Loop: Header=BB77_53 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$20, %cx
	cmpw	$-21834, %cx            # imm = 0xAAB6
	jne	.LBB77_1433
# %bb.62:                               # %BZ2_decompress.split2628
                                        #   in Loop: Header=BB77_53 Depth=1
	movq	(%r8), %rcx
	movl	32(%rcx), %ecx
	shll	$8, %ecx
	movq	(%r8), %rsi
	movq	(%rsi), %rsi
	movq	(%rsi), %rsi
	movzbl	(%rsi), %esi
	orl	%esi, %ecx
	movq	(%r8), %rsi
	movl	%ecx, 32(%rsi)
	movq	(%r8), %rcx
	movl	36(%rcx), %esi
	addl	$8, %esi
	movl	%esi, 36(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rsi
	addq	$1, %rsi
	movq	%rsi, (%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %esi
	addl	$-1, %esi
	movl	%esi, 8(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %esi
	addl	$1, %esi
	movl	%esi, 12(%rcx)
	movq	%r8, %rdi
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %ecx
	movw	$-21834, BasicBlockSignatureTracker # imm = 0xAAB6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_65
# %bb.63:                               #   in Loop: Header=BB77_53 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$101, %cx
	cmpw	$-21805, %cx            # imm = 0xAAD3
	movq	%rdi, %rcx
	jne	.LBB77_1433
# %bb.64:                               # %BZ2_decompress.split2630
                                        #   in Loop: Header=BB77_53 Depth=1
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	16(%rcx), %esi
	addl	$1, %esi
	movl	%esi, 16(%rcx)
	movw	$-21805, BasicBlockSignatureTracker # imm = 0xAAD3
	movw	$101, RunTimeSignatureAdjuster
.LBB77_65:                              #   in Loop: Header=BB77_53 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$99, %cx
	xorw	%si, %cx
	cmpw	$-21803, %cx            # imm = 0xAAD5
	movq	%rdi, %r8
	jne	.LBB77_1433
# %bb.66:                               # %BZ2_decompress.split2632
                                        #   in Loop: Header=BB77_53 Depth=1
	movw	$-21803, BasicBlockSignatureTracker # imm = 0xAAD5
	movw	$158, RunTimeSignatureAdjuster
	jmp	.LBB77_53
.LBB77_67:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$127, %cx
	cmpw	$-21783, %cx            # imm = 0xAAE9
	jne	.LBB77_1436
# %bb.68:                               # %BZ2_decompress.split2624
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movw	$-21783, BasicBlockSignatureTracker # imm = 0xAAE9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$104, %ecx
	je	.LBB77_71
# %bb.69:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$498, %ax               # imm = 0x1F2
	cmpw	$-21733, %ax            # imm = 0xAB1B
	jne	.LBB77_1436
# %bb.70:                               # %BZ2_decompress.split2634
	movl	$-5, (%r9)
	movw	$-21733, BasicBlockSignatureTracker # imm = 0xAB1B
	movw	$573, RunTimeSignatureAdjuster # imm = 0x23D
	jmp	.LBB77_1369
.LBB77_71:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$455, %cx               # imm = 0x1C7
	cmpw	$-21714, %cx            # imm = 0xAB2E
	jne	.LBB77_1436
# %bb.72:                               # %BZ2_decompress.split2636
	movw	$-21714, BasicBlockSignatureTracker # imm = 0xAB2E
	movw	$897, RunTimeSignatureAdjuster # imm = 0x381
.LBB77_73:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$920, %cx               # imm = 0x398
	xorw	%dx, %cx
	cmpw	$-21705, %cx            # imm = 0xAB37
	jne	.LBB77_1436
# %bb.74:                               # %BZ2_decompress.split2500
	movq	(%r8), %rcx
	movl	$13, 8(%rcx)
	movw	$-21705, BasicBlockSignatureTracker # imm = 0xAB37
	movw	$0, RunTimeSignatureAdjuster
.LBB77_75:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$115, %cx
	xorw	%dx, %cx
	cmpw	$-21692, %cx            # imm = 0xAB44
	jne	.LBB77_1432
# %bb.76:                               # %BZ2_decompress.split2638
                                        #   in Loop: Header=BB77_75 Depth=1
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movw	$-21692, BasicBlockSignatureTracker # imm = 0xAB44
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %ecx
	jl	.LBB77_79
# %bb.77:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$47, %cx
	cmpw	$-21653, %cx            # imm = 0xAB6B
	jne	.LBB77_1436
# %bb.78:                               # %BZ2_decompress.split2640
	movq	(%r8), %rcx
	movl	32(%rcx), %edx
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$255, %edx
	movl	%edx, (%rax)
	movq	(%r8), %rcx
	movl	36(%rcx), %edx
	subl	$8, %edx
	movl	%edx, 36(%rcx)
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 40(%rcx)
	movw	$-21653, BasicBlockSignatureTracker # imm = 0xAB6B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_89
.LBB77_79:                              #   in Loop: Header=BB77_75 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$194, %cx
	cmpw	$-21626, %cx            # imm = 0xAB86
	jne	.LBB77_1432
# %bb.80:                               # %BZ2_decompress.split2642
                                        #   in Loop: Header=BB77_75 Depth=1
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %ecx
	movw	$-21626, BasicBlockSignatureTracker # imm = 0xAB86
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_83
# %bb.81:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-21625, %ax            # imm = 0xAB87
	jne	.LBB77_1436
# %bb.82:                               # %BZ2_decompress.split2646
	movl	$0, (%r9)
	movw	$-21625, BasicBlockSignatureTracker # imm = 0xAB87
	movw	$673, RunTimeSignatureAdjuster # imm = 0x2A1
	jmp	.LBB77_1369
.LBB77_83:                              #   in Loop: Header=BB77_75 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$10, %cx
	cmpw	$-21620, %cx            # imm = 0xAB8C
	jne	.LBB77_1432
# %bb.84:                               # %BZ2_decompress.split2648
                                        #   in Loop: Header=BB77_75 Depth=1
	movq	(%r8), %rcx
	movl	32(%rcx), %ecx
	shll	$8, %ecx
	movq	(%r8), %rdx
	movq	(%rdx), %rdx
	movq	(%rdx), %rdx
	movzbl	(%rdx), %edx
	orl	%edx, %ecx
	movq	(%r8), %rdx
	movl	%ecx, 32(%rdx)
	movq	(%r8), %rcx
	movl	36(%rcx), %edx
	addl	$8, %edx
	movl	%edx, 36(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rdx
	addq	$1, %rdx
	movq	%rdx, (%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	8(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 8(%rcx)
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 12(%rcx)
	movq	%r8, %rsi
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movl	12(%rcx), %ecx
	movw	$-21620, BasicBlockSignatureTracker # imm = 0xAB8C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB77_87
# %bb.85:                               #   in Loop: Header=BB77_75 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$2, %cx
	cmpw	$-21618, %cx            # imm = 0xAB8E
	movq	%rsi, %rcx
	jne	.LBB77_1432
# %bb.86:                               # %BZ2_decompress.split2650
                                        #   in Loop: Header=BB77_75 Depth=1
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	16(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 16(%rcx)
	movw	$-21618, BasicBlockSignatureTracker # imm = 0xAB8E
	movw	$2, RunTimeSignatureAdjuster
.LBB77_87:                              #   in Loop: Header=BB77_75 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$36, %cx
	xorw	%dx, %cx
	cmpw	$-21592, %cx            # imm = 0xABA8
	movq	%rsi, %r8
	jne	.LBB77_1432
# %bb.88:                               # %BZ2_decompress.split2652
                                        #   in Loop: Header=BB77_75 Depth=1
	movw	$-21592, BasicBlockSignatureTracker # imm = 0xABA8
	movw	$159, RunTimeSignatureAdjuster
	jmp	.LBB77_75
.LBB77_89:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$216, %ax
	cmpw	$-21581, %ax            # imm = 0xABB3
	jne	.LBB77_1436
# %bb.90:                               # %BZ2_decompress.split2644
	movq	(%r8), %rax
	movl	40(%rax), %eax
	movw	$-21581, BasicBlockSignatureTracker # imm = 0xABB3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$49, %eax
	jl	.LBB77_93
# %bb.91:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$98, %ax
	cmpw	$-21551, %ax            # imm = 0xABD1
	jne	.LBB77_1436
# %bb.92:                               # %BZ2_decompress.split2656
	movq	(%r8), %rax
	movl	40(%rax), %eax
	movw	$-21551, BasicBlockSignatureTracker # imm = 0xABD1
	movw	$98, RunTimeSignatureAdjuster
	cmpl	$57, %eax
	jle	.LBB77_95
.LBB77_93:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$108, %ax
	xorw	%cx, %ax
	cmpw	$-21537, %ax            # imm = 0xABDF
	jne	.LBB77_1436
# %bb.94:                               # %BZ2_decompress.split2654
	movl	$-5, (%r9)
	movw	$-21537, BasicBlockSignatureTracker # imm = 0xABDF
	movw	$761, RunTimeSignatureAdjuster # imm = 0x2F9
	jmp	.LBB77_1369
.LBB77_95:                              # %Buffer__
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-17851, %ax            # imm = 0xBA45
	cmpw	$4500, %ax              # imm = 0x1194
	jne	.LBB77_1436
# %bb.96:                               # %BZ2_decompress.split2658
	movq	%r11, -336(%rbp)        # 8-byte Spill
	movq	%r10, -248(%rbp)        # 8-byte Spill
	movq	%r9, -240(%rbp)         # 8-byte Spill
	movq	%r8, %rbx
	movw	$4500, BasicBlockSignatureTracker # imm = 0x1194
	movw	$-17851, RunTimeSignatureAdjuster # imm = 0xBA45
# %bb.97:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$62, %ax
	xorw	%cx, %ax
	cmpw	$-21521, %ax            # imm = 0xABEF
	movq	%rbx, %rdx
	jne	.LBB77_1436
# %bb.98:                               # %BZ2_decompress.split3832
	movq	(%rdx), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	(%rdx), %rax
	movb	44(%rax), %al
	movw	$-21521, BasicBlockSignatureTracker # imm = 0xABEF
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_109
# %bb.99:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-21511, %ax            # imm = 0xABF9
	movq	%rbx, %r8
	jne	.LBB77_1436
# %bb.100:                              # %BZ2_decompress.split2660
	movq	(%r15), %rax
	movq	56(%rax), %rax
	movq	(%r15), %rcx
	movq	72(%rcx), %rdi
	movq	(%r8), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def %esi killed %esi killed %rsi
	movl	$1, %edx
	movq	%r8, -384(%rbp)         # 8-byte Spill
	callq	*%rax
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	(%rdx), %rcx
	movq	%rax, 3160(%rcx)
	movq	(%r15), %rax
	movq	56(%rax), %rax
	movq	(%r15), %rcx
	movq	72(%rcx), %rdi
	movq	(%rdx), %rcx
	movq	%rdx, %r15
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def %esi killed %esi killed %rsi
	movl	$1, %edx
	callq	*%rax
	movq	(%r15), %rcx
	movq	%rax, 3168(%rcx)
	movq	(%r15), %rax
	movq	3160(%rax), %rax
	movw	$-21511, BasicBlockSignatureTracker # imm = 0xABF9
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	je	.LBB77_103
# %bb.101:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2027, %ax              # imm = 0x7EB
	cmpw	$-21486, %ax            # imm = 0xAC12
	movq	%rbx, %rax
	jne	.LBB77_1436
# %bb.102:                              # %BZ2_decompress.split2666
	movq	(%rax), %rax
	movq	3168(%rax), %rax
	movw	$-21486, BasicBlockSignatureTracker # imm = 0xAC12
	movw	$2027, RunTimeSignatureAdjuster # imm = 0x7EB
	cmpq	$0, %rax
	jne	.LBB77_105
.LBB77_103:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2019, %ax              # imm = 0x7E3
	xorw	%cx, %ax
	cmpw	$-21478, %ax            # imm = 0xAC1A
	movq	%rbx, %r8
	movq	-240(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	jne	.LBB77_1436
# %bb.104:                              # %BZ2_decompress.split2664
	movl	$-3, (%r9)
	movw	$-21478, BasicBlockSignatureTracker # imm = 0xAC1A
	movw	$1340, RunTimeSignatureAdjuster # imm = 0x53C
	jmp	.LBB77_1369
.LBB77_105:                             # %Buffer__1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-31237, %ax            # imm = 0x85FB
	cmpw	$10729, %ax             # imm = 0x29E9
	jne	.LBB77_1436
# %bb.106:                              # %BZ2_decompress.split2668
	movw	$10729, BasicBlockSignatureTracker # imm = 0x29E9
	movw	$-31237, RunTimeSignatureAdjuster # imm = 0x85FB
# %bb.107:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$61, %ax
	xorw	%cx, %ax
	cmpw	$-21457, %ax            # imm = 0xAC2F
	jne	.LBB77_1436
# %bb.108:                              # %BZ2_decompress.split3834
	movw	$-21457, BasicBlockSignatureTracker # imm = 0xAC2F
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_115
.LBB77_109:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2010, %ax              # imm = 0x7DA
	cmpw	$-21451, %ax            # imm = 0xAC35
	movq	%rbx, %r8
	jne	.LBB77_1436
# %bb.110:                              # %BZ2_decompress.split2662
	movq	(%r15), %rax
	movq	56(%rax), %rax
	movq	(%r15), %rcx
	movq	72(%rcx), %rdi
	movq	(%r8), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def %esi killed %esi killed %rsi
	movl	$1, %edx
	movq	%r8, %r15
	callq	*%rax
	movq	(%r15), %rcx
	movq	%rax, 3152(%rcx)
	movq	(%r15), %rax
	movq	3152(%rax), %rax
	movw	$-21451, BasicBlockSignatureTracker # imm = 0xAC35
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB77_113
# %bb.111:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-21446, %ax            # imm = 0xAC3A
	movq	%rbx, %r8
	movq	-240(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	jne	.LBB77_1436
# %bb.112:                              # %BZ2_decompress.split2672
	movl	$-3, (%r9)
	movw	$-21446, BasicBlockSignatureTracker # imm = 0xAC3A
	movw	$1308, RunTimeSignatureAdjuster # imm = 0x51C
	jmp	.LBB77_1369
.LBB77_113:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$-21439, %ax            # imm = 0xAC41
	jne	.LBB77_1436
# %bb.114:                              # %BZ2_decompress.split2674
	movw	$-21439, BasicBlockSignatureTracker # imm = 0xAC41
	movw	$110, RunTimeSignatureAdjuster
.LBB77_115:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$72, %ax
	xorw	%cx, %ax
	cmpw	$-21401, %ax            # imm = 0xAC67
	movq	%rbx, %r8
	movq	-240(%rbp), %r9         # 8-byte Reload
	movq	-248(%rbp), %r10        # 8-byte Reload
	movq	-336(%rbp), %r11        # 8-byte Reload
	jne	.LBB77_1436
# %bb.116:                              # %BZ2_decompress.split2670
	movw	$-21401, BasicBlockSignatureTracker # imm = 0xAC67
	movw	$1224, RunTimeSignatureAdjuster # imm = 0x4C8
.LBB77_117:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1240, %ax              # imm = 0x4D8
	xorw	%cx, %ax
	cmpw	$-21385, %ax            # imm = 0xAC77
	jne	.LBB77_1436
# %bb.118:                              # %BZ2_decompress.split2502
	movq	(%r8), %rax
	movl	$14, 8(%rax)
	movw	$-21385, BasicBlockSignatureTracker # imm = 0xAC77
	movw	$0, RunTimeSignatureAdjuster
.LBB77_119:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8, %ax
	xorw	%cx, %ax
	cmpw	$-21377, %ax            # imm = 0xAC7F
	jne	.LBB77_1431
# %bb.120:                              # %BZ2_decompress.split2676
                                        #   in Loop: Header=BB77_119 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-21377, BasicBlockSignatureTracker # imm = 0xAC7F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_123
# %bb.121:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$255, %ax
	cmpw	$-21376, %ax            # imm = 0xAC80
	jne	.LBB77_1436
# %bb.122:                              # %BZ2_decompress.split2678
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, (%r14)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%r14), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-21376, BasicBlockSignatureTracker # imm = 0xAC80
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_133
.LBB77_123:                             #   in Loop: Header=BB77_119 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$230, %ax
	cmpw	$-21351, %ax            # imm = 0xAC99
	jne	.LBB77_1431
# %bb.124:                              # %BZ2_decompress.split2680
                                        #   in Loop: Header=BB77_119 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-21351, BasicBlockSignatureTracker # imm = 0xAC99
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_127
# %bb.125:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-21329, %ax            # imm = 0xACAF
	jne	.LBB77_1436
# %bb.126:                              # %BZ2_decompress.split2684
	movl	$0, (%r9)
	movw	$-21329, BasicBlockSignatureTracker # imm = 0xACAF
	movw	$1417, RunTimeSignatureAdjuster # imm = 0x589
	jmp	.LBB77_1369
.LBB77_127:                             #   in Loop: Header=BB77_119 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$-21327, %ax            # imm = 0xACB1
	jne	.LBB77_1431
# %bb.128:                              # %BZ2_decompress.split2686
                                        #   in Loop: Header=BB77_119 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-21327, BasicBlockSignatureTracker # imm = 0xACB1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_131
# %bb.129:                              #   in Loop: Header=BB77_119 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-21316, %ax            # imm = 0xACBC
	movq	%rdx, %rax
	jne	.LBB77_1431
# %bb.130:                              # %BZ2_decompress.split2688
                                        #   in Loop: Header=BB77_119 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-21316, BasicBlockSignatureTracker # imm = 0xACBC
	movw	$13, RunTimeSignatureAdjuster
.LBB77_131:                             #   in Loop: Header=BB77_119 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$114, %ax
	xorw	%cx, %ax
	cmpw	$-21309, %ax            # imm = 0xACC3
	movq	%rdx, %r8
	jne	.LBB77_1431
# %bb.132:                              # %BZ2_decompress.split2690
                                        #   in Loop: Header=BB77_119 Depth=1
	movw	$-21309, BasicBlockSignatureTracker # imm = 0xACC3
	movw	$180, RunTimeSignatureAdjuster
	jmp	.LBB77_119
.LBB77_133:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$98, %ax
	cmpw	$-21278, %ax            # imm = 0xACE2
	jne	.LBB77_1436
# %bb.134:                              # %BZ2_decompress.split2682
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-21278, BasicBlockSignatureTracker # imm = 0xACE2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$23, %eax
	jne	.LBB77_137
# %bb.135:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$494, %ax               # imm = 0x1EE
	cmpw	$-21236, %ax            # imm = 0xAD0C
	jne	.LBB77_1436
# %bb.136:                              # %BZ2_decompress.split2692
	movw	$-21236, BasicBlockSignatureTracker # imm = 0xAD0C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1181
.LBB77_137:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$456, %ax               # imm = 0x1C8
	cmpw	$-21206, %ax            # imm = 0xAD2A
	jne	.LBB77_1436
# %bb.138:                              # %BZ2_decompress.split2694
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-21206, BasicBlockSignatureTracker # imm = 0xAD2A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$49, %eax
	je	.LBB77_141
# %bb.139:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-21201, %ax            # imm = 0xAD2F
	jne	.LBB77_1436
# %bb.140:                              # %BZ2_decompress.split2698
	movl	$-4, (%r9)
	movw	$-21201, BasicBlockSignatureTracker # imm = 0xAD2F
	movw	$1033, RunTimeSignatureAdjuster # imm = 0x409
	jmp	.LBB77_1369
.LBB77_141:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$127, %ax
	cmpw	$-21163, %ax            # imm = 0xAD55
	jne	.LBB77_1436
# %bb.142:                              # %BZ2_decompress.split2700
	movw	$-21163, BasicBlockSignatureTracker # imm = 0xAD55
	movw	$1530, RunTimeSignatureAdjuster # imm = 0x5FA
.LBB77_143:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1498, %ax              # imm = 0x5DA
	xorw	%cx, %ax
	cmpw	$-21131, %ax            # imm = 0xAD75
	jne	.LBB77_1436
# %bb.144:                              # %BZ2_decompress.split2504
	movq	(%r8), %rax
	movl	$15, 8(%rax)
	movw	$-21131, BasicBlockSignatureTracker # imm = 0xAD75
	movw	$0, RunTimeSignatureAdjuster
.LBB77_145:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$244, %ax
	xorw	%cx, %ax
	cmpw	$-21119, %ax            # imm = 0xAD81
	jne	.LBB77_1430
# %bb.146:                              # %BZ2_decompress.split2702
                                        #   in Loop: Header=BB77_145 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-21119, BasicBlockSignatureTracker # imm = 0xAD81
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_149
# %bb.147:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-21115, %ax            # imm = 0xAD85
	jne	.LBB77_1436
# %bb.148:                              # %BZ2_decompress.split2704
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-504(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-21115, BasicBlockSignatureTracker # imm = 0xAD85
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_159
.LBB77_149:                             #   in Loop: Header=BB77_145 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-21107, %ax            # imm = 0xAD8D
	jne	.LBB77_1430
# %bb.150:                              # %BZ2_decompress.split2706
                                        #   in Loop: Header=BB77_145 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-21107, BasicBlockSignatureTracker # imm = 0xAD8D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_153
# %bb.151:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-21094, %ax            # imm = 0xAD9A
	jne	.LBB77_1436
# %bb.152:                              # %BZ2_decompress.split2710
	movl	$0, (%r9)
	movw	$-21094, BasicBlockSignatureTracker # imm = 0xAD9A
	movw	$1212, RunTimeSignatureAdjuster # imm = 0x4BC
	jmp	.LBB77_1369
.LBB77_153:                             #   in Loop: Header=BB77_145 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$-21087, %ax            # imm = 0xADA1
	jne	.LBB77_1430
# %bb.154:                              # %BZ2_decompress.split2712
                                        #   in Loop: Header=BB77_145 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-21087, BasicBlockSignatureTracker # imm = 0xADA1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_157
# %bb.155:                              #   in Loop: Header=BB77_145 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-21062, %ax            # imm = 0xADBA
	movq	%rdx, %rax
	jne	.LBB77_1430
# %bb.156:                              # %BZ2_decompress.split2714
                                        #   in Loop: Header=BB77_145 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-21062, BasicBlockSignatureTracker # imm = 0xADBA
	movw	$27, RunTimeSignatureAdjuster
.LBB77_157:                             #   in Loop: Header=BB77_145 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$110, %ax
	xorw	%cx, %ax
	cmpw	$-21041, %ax            # imm = 0xADCF
	movq	%rdx, %r8
	jne	.LBB77_1430
# %bb.158:                              # %BZ2_decompress.split2716
                                        #   in Loop: Header=BB77_145 Depth=1
	movw	$-21041, BasicBlockSignatureTracker # imm = 0xADCF
	movw	$186, RunTimeSignatureAdjuster
	jmp	.LBB77_145
.LBB77_159:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$99, %ax
	cmpw	$-21018, %ax            # imm = 0xADE6
	jne	.LBB77_1436
# %bb.160:                              # %BZ2_decompress.split2708
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-21018, BasicBlockSignatureTracker # imm = 0xADE6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$65, %eax
	je	.LBB77_163
# %bb.161:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-21015, %ax            # imm = 0xADE9
	jne	.LBB77_1436
# %bb.162:                              # %BZ2_decompress.split2718
	movl	$-4, (%r9)
	movw	$-21015, BasicBlockSignatureTracker # imm = 0xADE9
	movw	$1231, RunTimeSignatureAdjuster # imm = 0x4CF
	jmp	.LBB77_1369
.LBB77_163:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-20996, %ax            # imm = 0xADFC
	jne	.LBB77_1436
# %bb.164:                              # %BZ2_decompress.split2720
	movw	$-20996, BasicBlockSignatureTracker # imm = 0xADFC
	movw	$1363, RunTimeSignatureAdjuster # imm = 0x553
.LBB77_165:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1719, %ax              # imm = 0x6B7
	xorw	%cx, %ax
	cmpw	$-20968, %ax            # imm = 0xAE18
	jne	.LBB77_1436
# %bb.166:                              # %BZ2_decompress.split2506
	movq	(%r8), %rax
	movl	$16, 8(%rax)
	movw	$-20968, BasicBlockSignatureTracker # imm = 0xAE18
	movw	$0, RunTimeSignatureAdjuster
.LBB77_167:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$-20943, %ax            # imm = 0xAE31
	jne	.LBB77_1429
# %bb.168:                              # %BZ2_decompress.split2722
                                        #   in Loop: Header=BB77_167 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-20943, BasicBlockSignatureTracker # imm = 0xAE31
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_171
# %bb.169:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$68, %ax
	cmpw	$-20875, %ax            # imm = 0xAE75
	jne	.LBB77_1436
# %bb.170:                              # %BZ2_decompress.split2724
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-20875, BasicBlockSignatureTracker # imm = 0xAE75
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_181
.LBB77_171:                             #   in Loop: Header=BB77_167 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$164, %ax
	cmpw	$-20843, %ax            # imm = 0xAE95
	jne	.LBB77_1429
# %bb.172:                              # %BZ2_decompress.split2726
                                        #   in Loop: Header=BB77_167 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-20843, BasicBlockSignatureTracker # imm = 0xAE95
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_175
# %bb.173:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$-20819, %ax            # imm = 0xAEAD
	jne	.LBB77_1436
# %bb.174:                              # %BZ2_decompress.split2730
	movl	$0, (%r9)
	movw	$-20819, BasicBlockSignatureTracker # imm = 0xAEAD
	movw	$1931, RunTimeSignatureAdjuster # imm = 0x78B
	jmp	.LBB77_1369
.LBB77_175:                             #   in Loop: Header=BB77_167 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$76, %ax
	cmpw	$-20775, %ax            # imm = 0xAED9
	jne	.LBB77_1429
# %bb.176:                              # %BZ2_decompress.split2732
                                        #   in Loop: Header=BB77_167 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-20775, BasicBlockSignatureTracker # imm = 0xAED9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_179
# %bb.177:                              #   in Loop: Header=BB77_167 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-20744, %ax            # imm = 0xAEF8
	movq	%rdx, %rax
	jne	.LBB77_1429
# %bb.178:                              # %BZ2_decompress.split2734
                                        #   in Loop: Header=BB77_167 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-20744, BasicBlockSignatureTracker # imm = 0xAEF8
	movw	$33, RunTimeSignatureAdjuster
.LBB77_179:                             #   in Loop: Header=BB77_167 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$468, %ax               # imm = 0x1D4
	xorw	%cx, %ax
	cmpw	$-20723, %ax            # imm = 0xAF0D
	movq	%rdx, %r8
	jne	.LBB77_1429
# %bb.180:                              # %BZ2_decompress.split2736
                                        #   in Loop: Header=BB77_167 Depth=1
	movw	$-20723, BasicBlockSignatureTracker # imm = 0xAF0D
	movw	$277, RunTimeSignatureAdjuster # imm = 0x115
	jmp	.LBB77_167
.LBB77_181:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$363, %ax               # imm = 0x16B
	cmpw	$-20706, %ax            # imm = 0xAF1E
	jne	.LBB77_1436
# %bb.182:                              # %BZ2_decompress.split2728
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-20706, BasicBlockSignatureTracker # imm = 0xAF1E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$89, %eax
	je	.LBB77_185
# %bb.183:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-20691, %ax            # imm = 0xAF2D
	jne	.LBB77_1436
# %bb.184:                              # %BZ2_decompress.split2738
	movl	$-4, (%r9)
	movw	$-20691, BasicBlockSignatureTracker # imm = 0xAF2D
	movw	$1547, RunTimeSignatureAdjuster # imm = 0x60B
	jmp	.LBB77_1369
.LBB77_185:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$84, %ax
	cmpw	$-20662, %ax            # imm = 0xAF4A
	jne	.LBB77_1436
# %bb.186:                              # %BZ2_decompress.split2740
	movw	$-20662, BasicBlockSignatureTracker # imm = 0xAF4A
	movw	$2021, RunTimeSignatureAdjuster # imm = 0x7E5
.LBB77_187:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2035, %ax              # imm = 0x7F3
	xorw	%cx, %ax
	cmpw	$-20644, %ax            # imm = 0xAF5C
	jne	.LBB77_1436
# %bb.188:                              # %BZ2_decompress.split2508
	movq	(%r8), %rax
	movl	$17, 8(%rax)
	movw	$-20644, BasicBlockSignatureTracker # imm = 0xAF5C
	movw	$0, RunTimeSignatureAdjuster
.LBB77_189:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$-20637, %ax            # imm = 0xAF63
	jne	.LBB77_1428
# %bb.190:                              # %BZ2_decompress.split2742
                                        #   in Loop: Header=BB77_189 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-20637, BasicBlockSignatureTracker # imm = 0xAF63
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_193
# %bb.191:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$251, %ax
	cmpw	$-20584, %ax            # imm = 0xAF98
	jne	.LBB77_1436
# %bb.192:                              # %BZ2_decompress.split2744
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-544(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-20584, BasicBlockSignatureTracker # imm = 0xAF98
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_203
.LBB77_193:                             #   in Loop: Header=BB77_189 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$193, %ax
	cmpw	$-20574, %ax            # imm = 0xAFA2
	jne	.LBB77_1428
# %bb.194:                              # %BZ2_decompress.split2746
                                        #   in Loop: Header=BB77_189 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-20574, BasicBlockSignatureTracker # imm = 0xAFA2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_197
# %bb.195:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-20549, %ax            # imm = 0xAFBB
	jne	.LBB77_1436
# %bb.196:                              # %BZ2_decompress.split2750
	movl	$0, (%r9)
	movw	$-20549, BasicBlockSignatureTracker # imm = 0xAFBB
	movw	$1693, RunTimeSignatureAdjuster # imm = 0x69D
	jmp	.LBB77_1369
.LBB77_197:                             #   in Loop: Header=BB77_189 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$98, %ax
	cmpw	$-20544, %ax            # imm = 0xAFC0
	jne	.LBB77_1428
# %bb.198:                              # %BZ2_decompress.split2752
                                        #   in Loop: Header=BB77_189 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-20544, BasicBlockSignatureTracker # imm = 0xAFC0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_201
# %bb.199:                              #   in Loop: Header=BB77_189 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-20534, %ax            # imm = 0xAFCA
	movq	%rdx, %rax
	jne	.LBB77_1428
# %bb.200:                              # %BZ2_decompress.split2754
                                        #   in Loop: Header=BB77_189 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-20534, BasicBlockSignatureTracker # imm = 0xAFCA
	movw	$10, RunTimeSignatureAdjuster
.LBB77_201:                             #   in Loop: Header=BB77_189 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$18, %ax
	xorw	%cx, %ax
	cmpw	$-20526, %ax            # imm = 0xAFD2
	movq	%rdx, %r8
	jne	.LBB77_1428
# %bb.202:                              # %BZ2_decompress.split2756
                                        #   in Loop: Header=BB77_189 Depth=1
	movw	$-20526, BasicBlockSignatureTracker # imm = 0xAFD2
	movw	$142, RunTimeSignatureAdjuster
	jmp	.LBB77_189
.LBB77_203:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$76, %ax
	cmpw	$-20524, %ax            # imm = 0xAFD4
	jne	.LBB77_1436
# %bb.204:                              # %BZ2_decompress.split2748
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-20524, BasicBlockSignatureTracker # imm = 0xAFD4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$38, %eax
	je	.LBB77_207
# %bb.205:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8144, %ax              # imm = 0x1FD0
	cmpw	$-20476, %ax            # imm = 0xB004
	jne	.LBB77_1436
# %bb.206:                              # %BZ2_decompress.split2758
	movl	$-4, (%r9)
	movw	$-20476, BasicBlockSignatureTracker # imm = 0xB004
	movw	$6434, RunTimeSignatureAdjuster # imm = 0x1922
	jmp	.LBB77_1369
.LBB77_207:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8080, %ax              # imm = 0x1F90
	cmpw	$-20412, %ax            # imm = 0xB044
	jne	.LBB77_1436
# %bb.208:                              # %BZ2_decompress.split2760
	movw	$-20412, BasicBlockSignatureTracker # imm = 0xB044
	movw	$6379, RunTimeSignatureAdjuster # imm = 0x18EB
.LBB77_209:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6348, %ax              # imm = 0x18CC
	xorw	%cx, %ax
	cmpw	$-20381, %ax            # imm = 0xB063
	jne	.LBB77_1436
# %bb.210:                              # %BZ2_decompress.split2510
	movq	(%r8), %rax
	movl	$18, 8(%rax)
	movw	$-20381, BasicBlockSignatureTracker # imm = 0xB063
	movw	$0, RunTimeSignatureAdjuster
.LBB77_211:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$-20355, %ax            # imm = 0xB07D
	jne	.LBB77_1427
# %bb.212:                              # %BZ2_decompress.split2762
                                        #   in Loop: Header=BB77_211 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-20355, BasicBlockSignatureTracker # imm = 0xB07D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_215
# %bb.213:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$191, %ax
	cmpw	$-20286, %ax            # imm = 0xB0C2
	jne	.LBB77_1436
# %bb.214:                              # %BZ2_decompress.split2764
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-560(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-20286, BasicBlockSignatureTracker # imm = 0xB0C2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_225
.LBB77_215:                             #   in Loop: Header=BB77_211 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$156, %ax
	cmpw	$-20255, %ax            # imm = 0xB0E1
	jne	.LBB77_1427
# %bb.216:                              # %BZ2_decompress.split2766
                                        #   in Loop: Header=BB77_211 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-20255, BasicBlockSignatureTracker # imm = 0xB0E1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_219
# %bb.217:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-20230, %ax            # imm = 0xB0FA
	jne	.LBB77_1436
# %bb.218:                              # %BZ2_decompress.split2770
	movl	$0, (%r9)
	movw	$-20230, BasicBlockSignatureTracker # imm = 0xB0FA
	movw	$6620, RunTimeSignatureAdjuster # imm = 0x19DC
	jmp	.LBB77_1369
.LBB77_219:                             #   in Loop: Header=BB77_211 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$484, %ax               # imm = 0x1E4
	cmpw	$-20219, %ax            # imm = 0xB105
	jne	.LBB77_1427
# %bb.220:                              # %BZ2_decompress.split2772
                                        #   in Loop: Header=BB77_211 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-20219, BasicBlockSignatureTracker # imm = 0xB105
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_223
# %bb.221:                              #   in Loop: Header=BB77_211 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-20211, %ax            # imm = 0xB10D
	movq	%rdx, %rax
	jne	.LBB77_1427
# %bb.222:                              # %BZ2_decompress.split2774
                                        #   in Loop: Header=BB77_211 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-20211, BasicBlockSignatureTracker # imm = 0xB10D
	movw	$8, RunTimeSignatureAdjuster
.LBB77_223:                             #   in Loop: Header=BB77_211 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$20, %ax
	xorw	%cx, %ax
	cmpw	$-20207, %ax            # imm = 0xB111
	movq	%rdx, %r8
	jne	.LBB77_1427
# %bb.224:                              # %BZ2_decompress.split2776
                                        #   in Loop: Header=BB77_211 Depth=1
	movw	$-20207, BasicBlockSignatureTracker # imm = 0xB111
	movw	$370, RunTimeSignatureAdjuster # imm = 0x172
	jmp	.LBB77_211
.LBB77_225:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$507, %ax               # imm = 0x1FB
	cmpw	$-20167, %ax            # imm = 0xB139
	jne	.LBB77_1436
# %bb.226:                              # %BZ2_decompress.split2768
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-20167, BasicBlockSignatureTracker # imm = 0xB139
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$83, %eax
	je	.LBB77_229
# %bb.227:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$-20140, %ax            # imm = 0xB154
	jne	.LBB77_1436
# %bb.228:                              # %BZ2_decompress.split2778
	movl	$-4, (%r9)
	movw	$-20140, BasicBlockSignatureTracker # imm = 0xB154
	movw	$6258, RunTimeSignatureAdjuster # imm = 0x1872
	jmp	.LBB77_1369
.LBB77_229:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$99, %ax
	cmpw	$-20134, %ax            # imm = 0xB15A
	jne	.LBB77_1436
# %bb.230:                              # %BZ2_decompress.split2780
	movw	$-20134, BasicBlockSignatureTracker # imm = 0xB15A
	movw	$6645, RunTimeSignatureAdjuster # imm = 0x19F5
.LBB77_231:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6641, %ax              # imm = 0x19F1
	xorw	%cx, %ax
	cmpw	$-20130, %ax            # imm = 0xB15E
	jne	.LBB77_1436
# %bb.232:                              # %BZ2_decompress.split2512
	movq	(%r8), %rax
	movl	$19, 8(%rax)
	movw	$-20130, BasicBlockSignatureTracker # imm = 0xB15E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_233:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$152, %ax
	xorw	%cx, %ax
	cmpw	$-20026, %ax            # imm = 0xB1C6
	jne	.LBB77_1426
# %bb.234:                              # %BZ2_decompress.split2782
                                        #   in Loop: Header=BB77_233 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-20026, BasicBlockSignatureTracker # imm = 0xB1C6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_237
# %bb.235:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-20017, %ax            # imm = 0xB1CF
	jne	.LBB77_1436
# %bb.236:                              # %BZ2_decompress.split2784
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-576(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-20017, BasicBlockSignatureTracker # imm = 0xB1CF
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_247
.LBB77_237:                             #   in Loop: Header=BB77_233 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-20010, %ax            # imm = 0xB1D6
	jne	.LBB77_1426
# %bb.238:                              # %BZ2_decompress.split2786
                                        #   in Loop: Header=BB77_233 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-20010, BasicBlockSignatureTracker # imm = 0xB1D6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_241
# %bb.239:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$-19986, %ax            # imm = 0xB1EE
	jne	.LBB77_1436
# %bb.240:                              # %BZ2_decompress.split2790
	movl	$0, (%r9)
	movw	$-19986, BasicBlockSignatureTracker # imm = 0xB1EE
	movw	$6344, RunTimeSignatureAdjuster # imm = 0x18C8
	jmp	.LBB77_1369
.LBB77_241:                             #   in Loop: Header=BB77_233 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$-19971, %ax            # imm = 0xB1FD
	jne	.LBB77_1426
# %bb.242:                              # %BZ2_decompress.split2792
                                        #   in Loop: Header=BB77_233 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-19971, BasicBlockSignatureTracker # imm = 0xB1FD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_245
# %bb.243:                              #   in Loop: Header=BB77_233 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1021, %ax              # imm = 0x3FD
	cmpw	$-19968, %ax            # imm = 0xB200
	movq	%rdx, %rax
	jne	.LBB77_1426
# %bb.244:                              # %BZ2_decompress.split2794
                                        #   in Loop: Header=BB77_233 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-19968, BasicBlockSignatureTracker # imm = 0xB200
	movw	$1021, RunTimeSignatureAdjuster # imm = 0x3FD
.LBB77_245:                             #   in Loop: Header=BB77_233 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1018, %ax              # imm = 0x3FA
	xorw	%cx, %ax
	cmpw	$-19961, %ax            # imm = 0xB207
	movq	%rdx, %r8
	jne	.LBB77_1426
# %bb.246:                              # %BZ2_decompress.split2796
                                        #   in Loop: Header=BB77_233 Depth=1
	movw	$-19961, BasicBlockSignatureTracker # imm = 0xB207
	movw	$857, RunTimeSignatureAdjuster # imm = 0x359
	jmp	.LBB77_233
.LBB77_247:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$983, %ax               # imm = 0x3D7
	cmpw	$-19944, %ax            # imm = 0xB218
	jne	.LBB77_1436
# %bb.248:                              # %BZ2_decompress.split2788
	movq	%r11, %rbx
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-19944, BasicBlockSignatureTracker # imm = 0xB218
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$89, %eax
	je	.LBB77_251
# %bb.249:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$-19930, %ax            # imm = 0xB226
	jne	.LBB77_1436
# %bb.250:                              # %BZ2_decompress.split2798
	movl	$-4, (%r9)
	movw	$-19930, BasicBlockSignatureTracker # imm = 0xB226
	movw	$6912, RunTimeSignatureAdjuster # imm = 0x1B00
	jmp	.LBB77_1369
.LBB77_251:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-19924, %ax            # imm = 0xB22C
	jne	.LBB77_1436
# %bb.252:                              # %BZ2_decompress.split2800
	movq	%r10, %r15
	movq	%r9, %r14
	movq	(%r8), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	%r8, %r12
	movq	(%r8), %rax
	movl	52(%rax), %eax
	movw	$-19924, BasicBlockSignatureTracker # imm = 0xB22C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB77_255
# %bb.253:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$-19911, %ax            # imm = 0xB239
	movq	%r12, %rax
	jne	.LBB77_1436
# %bb.254:                              # %BZ2_decompress.split2802
	movabsq	$.L.str.71, %rsi
	movq	stderr, %rdi
	movq	(%rax), %rax
	movl	48(%rax), %edx
	movb	$0, %al
	callq	fprintf
	movw	$-19911, BasicBlockSignatureTracker # imm = 0xB239
	movw	$21, RunTimeSignatureAdjuster
.LBB77_255:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$108, %ax
	xorw	%cx, %ax
	cmpw	$-19904, %ax            # imm = 0xB240
	movq	%r12, %r8
	movq	%r14, %r9
	movq	%r15, %r10
	movq	%rbx, %r11
	jne	.LBB77_1436
# %bb.256:                              # %BZ2_decompress.split2804
	movq	(%r8), %rax
	movl	$0, 3176(%rax)
	movw	$-19904, BasicBlockSignatureTracker # imm = 0xB240
	movw	$6895, RunTimeSignatureAdjuster # imm = 0x1AEF
.LBB77_257:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6888, %ax              # imm = 0x1AE8
	xorw	%cx, %ax
	cmpw	$-19897, %ax            # imm = 0xB247
	jne	.LBB77_1436
# %bb.258:                              # %BZ2_decompress.split2514
	movq	(%r8), %rax
	movl	$20, 8(%rax)
	movw	$-19897, BasicBlockSignatureTracker # imm = 0xB247
	movw	$0, RunTimeSignatureAdjuster
.LBB77_259:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$62, %ax
	xorw	%cx, %ax
	cmpw	$-19847, %ax            # imm = 0xB279
	jne	.LBB77_1425
# %bb.260:                              # %BZ2_decompress.split2806
                                        #   in Loop: Header=BB77_259 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-19847, BasicBlockSignatureTracker # imm = 0xB279
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_263
# %bb.261:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$230, %ax
	cmpw	$-19809, %ax            # imm = 0xB29F
	jne	.LBB77_1436
# %bb.262:                              # %BZ2_decompress.split2808
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-512(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-19809, BasicBlockSignatureTracker # imm = 0xB29F
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_273
.LBB77_263:                             #   in Loop: Header=BB77_259 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$215, %ax
	cmpw	$-19794, %ax            # imm = 0xB2AE
	jne	.LBB77_1425
# %bb.264:                              # %BZ2_decompress.split2810
                                        #   in Loop: Header=BB77_259 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-19794, BasicBlockSignatureTracker # imm = 0xB2AE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_267
# %bb.265:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$75, %ax
	cmpw	$-19739, %ax            # imm = 0xB2E5
	jne	.LBB77_1436
# %bb.266:                              # %BZ2_decompress.split2814
	movl	$0, (%r9)
	movw	$-19739, BasicBlockSignatureTracker # imm = 0xB2E5
	movw	$7107, RunTimeSignatureAdjuster # imm = 0x1BC3
	jmp	.LBB77_1369
.LBB77_267:                             #   in Loop: Header=BB77_259 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$85, %ax
	cmpw	$-19717, %ax            # imm = 0xB2FB
	jne	.LBB77_1425
# %bb.268:                              # %BZ2_decompress.split2816
                                        #   in Loop: Header=BB77_259 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-19717, BasicBlockSignatureTracker # imm = 0xB2FB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_271
# %bb.269:                              #   in Loop: Header=BB77_259 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$470, %ax               # imm = 0x1D6
	cmpw	$-19667, %ax            # imm = 0xB32D
	movq	%rdx, %rax
	jne	.LBB77_1425
# %bb.270:                              # %BZ2_decompress.split2818
                                        #   in Loop: Header=BB77_259 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-19667, BasicBlockSignatureTracker # imm = 0xB32D
	movw	$470, RunTimeSignatureAdjuster # imm = 0x1D6
.LBB77_271:                             #   in Loop: Header=BB77_259 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$458, %ax               # imm = 0x1CA
	xorw	%cx, %ax
	cmpw	$-19663, %ax            # imm = 0xB331
	movq	%rdx, %r8
	jne	.LBB77_1425
# %bb.272:                              # %BZ2_decompress.split2820
                                        #   in Loop: Header=BB77_259 Depth=1
	movw	$-19663, BasicBlockSignatureTracker # imm = 0xB331
	movw	$374, RunTimeSignatureAdjuster # imm = 0x176
	jmp	.LBB77_259
.LBB77_273:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$481, %ax               # imm = 0x1E1
	cmpw	$-19586, %ax            # imm = 0xB37E
	jne	.LBB77_1436
# %bb.274:                              # %BZ2_decompress.split2812
	movq	(%r8), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3176(%rcx)
	movw	$-19586, BasicBlockSignatureTracker # imm = 0xB37E
	movw	$7121, RunTimeSignatureAdjuster # imm = 0x1BD1
.LBB77_275:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7120, %ax              # imm = 0x1BD0
	xorw	%cx, %ax
	cmpw	$-19585, %ax            # imm = 0xB37F
	jne	.LBB77_1436
# %bb.276:                              # %BZ2_decompress.split2516
	movq	(%r8), %rax
	movl	$21, 8(%rax)
	movw	$-19585, BasicBlockSignatureTracker # imm = 0xB37F
	movw	$0, RunTimeSignatureAdjuster
.LBB77_277:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$187, %ax
	xorw	%cx, %ax
	cmpw	$-19516, %ax            # imm = 0xB3C4
	jne	.LBB77_1424
# %bb.278:                              # %BZ2_decompress.split2822
                                        #   in Loop: Header=BB77_277 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-19516, BasicBlockSignatureTracker # imm = 0xB3C4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_281
# %bb.279:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-19502, %ax            # imm = 0xB3D2
	jne	.LBB77_1436
# %bb.280:                              # %BZ2_decompress.split2824
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-600(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-19502, BasicBlockSignatureTracker # imm = 0xB3D2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_291
.LBB77_281:                             #   in Loop: Header=BB77_277 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$38, %ax
	cmpw	$-19486, %ax            # imm = 0xB3E2
	jne	.LBB77_1424
# %bb.282:                              # %BZ2_decompress.split2826
                                        #   in Loop: Header=BB77_277 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-19486, BasicBlockSignatureTracker # imm = 0xB3E2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_285
# %bb.283:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-19466, %ax            # imm = 0xB3F6
	jne	.LBB77_1436
# %bb.284:                              # %BZ2_decompress.split2830
	movl	$0, (%r9)
	movw	$-19466, BasicBlockSignatureTracker # imm = 0xB3F6
	movw	$6864, RunTimeSignatureAdjuster # imm = 0x1AD0
	jmp	.LBB77_1369
.LBB77_285:                             #   in Loop: Header=BB77_277 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1920, %ax              # imm = 0x780
	cmpw	$-19358, %ax            # imm = 0xB462
	jne	.LBB77_1424
# %bb.286:                              # %BZ2_decompress.split2832
                                        #   in Loop: Header=BB77_277 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-19358, BasicBlockSignatureTracker # imm = 0xB462
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_289
# %bb.287:                              #   in Loop: Header=BB77_277 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-19344, %ax            # imm = 0xB470
	movq	%rdx, %rax
	jne	.LBB77_1424
# %bb.288:                              # %BZ2_decompress.split2834
                                        #   in Loop: Header=BB77_277 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-19344, BasicBlockSignatureTracker # imm = 0xB470
	movw	$18, RunTimeSignatureAdjuster
.LBB77_289:                             #   in Loop: Header=BB77_277 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$-19341, %ax            # imm = 0xB473
	movq	%rdx, %r8
	jne	.LBB77_1424
# %bb.290:                              # %BZ2_decompress.split2836
                                        #   in Loop: Header=BB77_277 Depth=1
	movw	$-19341, BasicBlockSignatureTracker # imm = 0xB473
	movw	$1804, RunTimeSignatureAdjuster # imm = 0x70C
	jmp	.LBB77_277
.LBB77_291:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1880, %ax              # imm = 0x758
	cmpw	$-19318, %ax            # imm = 0xB48A
	jne	.LBB77_1436
# %bb.292:                              # %BZ2_decompress.split2828
	movq	(%r8), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3176(%rcx)
	movw	$-19318, BasicBlockSignatureTracker # imm = 0xB48A
	movw	$7205, RunTimeSignatureAdjuster # imm = 0x1C25
.LBB77_293:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7279, %ax              # imm = 0x1C6F
	xorw	%cx, %ax
	cmpw	$-19264, %ax            # imm = 0xB4C0
	jne	.LBB77_1436
# %bb.294:                              # %BZ2_decompress.split2518
	movq	(%r8), %rax
	movl	$22, 8(%rax)
	movw	$-19264, BasicBlockSignatureTracker # imm = 0xB4C0
	movw	$0, RunTimeSignatureAdjuster
.LBB77_295:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$23, %ax
	xorw	%cx, %ax
	cmpw	$-19241, %ax            # imm = 0xB4D7
	jne	.LBB77_1423
# %bb.296:                              # %BZ2_decompress.split2838
                                        #   in Loop: Header=BB77_295 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-19241, BasicBlockSignatureTracker # imm = 0xB4D7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_299
# %bb.297:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$-19232, %ax            # imm = 0xB4E0
	jne	.LBB77_1436
# %bb.298:                              # %BZ2_decompress.split2840
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-624(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-19232, BasicBlockSignatureTracker # imm = 0xB4E0
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_309
.LBB77_299:                             #   in Loop: Header=BB77_295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$-19224, %ax            # imm = 0xB4E8
	jne	.LBB77_1423
# %bb.300:                              # %BZ2_decompress.split2842
                                        #   in Loop: Header=BB77_295 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-19224, BasicBlockSignatureTracker # imm = 0xB4E8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_303
# %bb.301:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-19214, %ax            # imm = 0xB4F2
	jne	.LBB77_1436
# %bb.302:                              # %BZ2_decompress.split2846
	movl	$0, (%r9)
	movw	$-19214, BasicBlockSignatureTracker # imm = 0xB4F2
	movw	$7636, RunTimeSignatureAdjuster # imm = 0x1DD4
	jmp	.LBB77_1369
.LBB77_303:                             #   in Loop: Header=BB77_295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$460, %ax               # imm = 0x1CC
	cmpw	$-19164, %ax            # imm = 0xB524
	jne	.LBB77_1423
# %bb.304:                              # %BZ2_decompress.split2848
                                        #   in Loop: Header=BB77_295 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-19164, BasicBlockSignatureTracker # imm = 0xB524
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_307
# %bb.305:                              #   in Loop: Header=BB77_295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-19157, %ax            # imm = 0xB52B
	movq	%rdx, %rax
	jne	.LBB77_1423
# %bb.306:                              # %BZ2_decompress.split2850
                                        #   in Loop: Header=BB77_295 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-19157, BasicBlockSignatureTracker # imm = 0xB52B
	movw	$15, RunTimeSignatureAdjuster
.LBB77_307:                             #   in Loop: Header=BB77_295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$76, %ax
	xorw	%cx, %ax
	cmpw	$-19096, %ax            # imm = 0xB568
	movq	%rdx, %r8
	jne	.LBB77_1423
# %bb.308:                              # %BZ2_decompress.split2852
                                        #   in Loop: Header=BB77_295 Depth=1
	movw	$-19096, BasicBlockSignatureTracker # imm = 0xB568
	movw	$424, RunTimeSignatureAdjuster # imm = 0x1A8
	jmp	.LBB77_295
.LBB77_309:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$395, %ax               # imm = 0x18B
	cmpw	$-19093, %ax            # imm = 0xB56B
	jne	.LBB77_1436
# %bb.310:                              # %BZ2_decompress.split2844
	movq	(%r8), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3176(%rcx)
	movw	$-19093, BasicBlockSignatureTracker # imm = 0xB56B
	movw	$7620, RunTimeSignatureAdjuster # imm = 0x1DC4
.LBB77_311:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7619, %ax              # imm = 0x1DC3
	xorw	%cx, %ax
	cmpw	$-19092, %ax            # imm = 0xB56C
	jne	.LBB77_1436
# %bb.312:                              # %BZ2_decompress.split2520
	movq	(%r8), %rax
	movl	$23, 8(%rax)
	movw	$-19092, BasicBlockSignatureTracker # imm = 0xB56C
	movw	$0, RunTimeSignatureAdjuster
.LBB77_313:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$-19083, %ax            # imm = 0xB575
	jne	.LBB77_1422
# %bb.314:                              # %BZ2_decompress.split2854
                                        #   in Loop: Header=BB77_313 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-19083, BasicBlockSignatureTracker # imm = 0xB575
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_317
# %bb.315:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-19079, %ax            # imm = 0xB579
	jne	.LBB77_1436
# %bb.316:                              # %BZ2_decompress.split2856
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-632(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-19079, BasicBlockSignatureTracker # imm = 0xB579
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_327
.LBB77_317:                             #   in Loop: Header=BB77_313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$247, %ax
	cmpw	$-19070, %ax            # imm = 0xB582
	jne	.LBB77_1422
# %bb.318:                              # %BZ2_decompress.split2858
                                        #   in Loop: Header=BB77_313 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-19070, BasicBlockSignatureTracker # imm = 0xB582
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_321
# %bb.319:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-19054, %ax            # imm = 0xB592
	jne	.LBB77_1436
# %bb.320:                              # %BZ2_decompress.split2862
	movl	$0, (%r9)
	movw	$-19054, BasicBlockSignatureTracker # imm = 0xB592
	movw	$7348, RunTimeSignatureAdjuster # imm = 0x1CB4
	jmp	.LBB77_1369
.LBB77_321:                             #   in Loop: Header=BB77_313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$-19044, %ax            # imm = 0xB59C
	jne	.LBB77_1422
# %bb.322:                              # %BZ2_decompress.split2864
                                        #   in Loop: Header=BB77_313 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-19044, BasicBlockSignatureTracker # imm = 0xB59C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_325
# %bb.323:                              #   in Loop: Header=BB77_313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$-19039, %ax            # imm = 0xB5A1
	movq	%rdx, %rax
	jne	.LBB77_1422
# %bb.324:                              # %BZ2_decompress.split2866
                                        #   in Loop: Header=BB77_313 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-19039, BasicBlockSignatureTracker # imm = 0xB5A1
	movw	$61, RunTimeSignatureAdjuster
.LBB77_325:                             #   in Loop: Header=BB77_313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$56, %ax
	xorw	%cx, %ax
	cmpw	$-19036, %ax            # imm = 0xB5A4
	movq	%rdx, %r8
	jne	.LBB77_1422
# %bb.326:                              # %BZ2_decompress.split2868
                                        #   in Loop: Header=BB77_313 Depth=1
	movw	$-19036, BasicBlockSignatureTracker # imm = 0xB5A4
	movw	$200, RunTimeSignatureAdjuster
	jmp	.LBB77_313
.LBB77_327:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$208, %ax
	cmpw	$-19031, %ax            # imm = 0xB5A9
	jne	.LBB77_1436
# %bb.328:                              # %BZ2_decompress.split2860
	movq	(%r8), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3176(%rcx)
	movw	$-19031, BasicBlockSignatureTracker # imm = 0xB5A9
	movw	$7430, RunTimeSignatureAdjuster # imm = 0x1D06
.LBB77_329:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7442, %ax              # imm = 0x1D12
	xorw	%cx, %ax
	cmpw	$-19011, %ax            # imm = 0xB5BD
	jne	.LBB77_1436
# %bb.330:                              # %BZ2_decompress.split2522
	movq	(%r8), %rax
	movl	$24, 8(%rax)
	movw	$-19011, BasicBlockSignatureTracker # imm = 0xB5BD
	movw	$0, RunTimeSignatureAdjuster
.LBB77_331:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$127, %ax
	xorw	%cx, %ax
	cmpw	$-19006, %ax            # imm = 0xB5C2
	jne	.LBB77_1421
# %bb.332:                              # %BZ2_decompress.split2870
                                        #   in Loop: Header=BB77_331 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-19006, BasicBlockSignatureTracker # imm = 0xB5C2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_335
# %bb.333:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-18956, %ax            # imm = 0xB5F4
	jne	.LBB77_1436
# %bb.334:                              # %BZ2_decompress.split2872
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	(%r8), %rcx
	movb	%al, 20(%rcx)
	movw	$-18956, BasicBlockSignatureTracker # imm = 0xB5F4
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_345
.LBB77_335:                             #   in Loop: Header=BB77_331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$973, %ax               # imm = 0x3CD
	cmpw	$-18929, %ax            # imm = 0xB60F
	jne	.LBB77_1421
# %bb.336:                              # %BZ2_decompress.split2874
                                        #   in Loop: Header=BB77_331 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-18929, BasicBlockSignatureTracker # imm = 0xB60F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_339
# %bb.337:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-18917, %ax            # imm = 0xB61B
	jne	.LBB77_1436
# %bb.338:                              # %BZ2_decompress.split2878
	movl	$0, (%r9)
	movw	$-18917, BasicBlockSignatureTracker # imm = 0xB61B
	movw	$7997, RunTimeSignatureAdjuster # imm = 0x1F3D
	jmp	.LBB77_1369
.LBB77_339:                             #   in Loop: Header=BB77_331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$34, %ax
	cmpw	$-18899, %ax            # imm = 0xB62D
	jne	.LBB77_1421
# %bb.340:                              # %BZ2_decompress.split2880
                                        #   in Loop: Header=BB77_331 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-18899, BasicBlockSignatureTracker # imm = 0xB62D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_343
# %bb.341:                              #   in Loop: Header=BB77_331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-18883, %ax            # imm = 0xB63D
	movq	%rdx, %rax
	jne	.LBB77_1421
# %bb.342:                              # %BZ2_decompress.split2882
                                        #   in Loop: Header=BB77_331 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-18883, BasicBlockSignatureTracker # imm = 0xB63D
	movw	$16, RunTimeSignatureAdjuster
.LBB77_343:                             #   in Loop: Header=BB77_331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$111, %ax
	xorw	%cx, %ax
	cmpw	$-18878, %ax            # imm = 0xB642
	movq	%rdx, %r8
	jne	.LBB77_1421
# %bb.344:                              # %BZ2_decompress.split2884
                                        #   in Loop: Header=BB77_331 Depth=1
	movw	$-18878, BasicBlockSignatureTracker # imm = 0xB642
	movw	$1023, RunTimeSignatureAdjuster # imm = 0x3FF
	jmp	.LBB77_331
.LBB77_345:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$939, %ax               # imm = 0x3AB
	cmpw	$-18849, %ax            # imm = 0xB65F
	jne	.LBB77_1436
# %bb.346:                              # %BZ2_decompress.split2876
	movq	(%r8), %rax
	movl	$0, 56(%rax)
	movw	$-18849, BasicBlockSignatureTracker # imm = 0xB65F
	movw	$7920, RunTimeSignatureAdjuster # imm = 0x1EF0
.LBB77_347:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7885, %ax              # imm = 0x1ECD
	xorw	%cx, %ax
	cmpw	$-18846, %ax            # imm = 0xB662
	jne	.LBB77_1436
# %bb.348:                              # %BZ2_decompress.split2524
	movq	(%r8), %rax
	movl	$25, 8(%rax)
	movw	$-18846, BasicBlockSignatureTracker # imm = 0xB662
	movw	$0, RunTimeSignatureAdjuster
.LBB77_349:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8, %ax
	xorw	%cx, %ax
	cmpw	$-18838, %ax            # imm = 0xB66A
	jne	.LBB77_1420
# %bb.350:                              # %BZ2_decompress.split2886
                                        #   in Loop: Header=BB77_349 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-18838, BasicBlockSignatureTracker # imm = 0xB66A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_353
# %bb.351:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$234, %ax
	cmpw	$-18816, %ax            # imm = 0xB680
	jne	.LBB77_1436
# %bb.352:                              # %BZ2_decompress.split2888
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-648(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-18816, BasicBlockSignatureTracker # imm = 0xB680
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_363
.LBB77_353:                             #   in Loop: Header=BB77_349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$226, %ax
	cmpw	$-18808, %ax            # imm = 0xB688
	jne	.LBB77_1420
# %bb.354:                              # %BZ2_decompress.split2890
                                        #   in Loop: Header=BB77_349 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-18808, BasicBlockSignatureTracker # imm = 0xB688
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_357
# %bb.355:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-18807, %ax            # imm = 0xB689
	jne	.LBB77_1436
# %bb.356:                              # %BZ2_decompress.split2894
	movl	$0, (%r9)
	movw	$-18807, BasicBlockSignatureTracker # imm = 0xB689
	movw	$8111, RunTimeSignatureAdjuster # imm = 0x1FAF
	jmp	.LBB77_1369
.LBB77_357:                             #   in Loop: Header=BB77_349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-18790, %ax            # imm = 0xB69A
	jne	.LBB77_1420
# %bb.358:                              # %BZ2_decompress.split2896
                                        #   in Loop: Header=BB77_349 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-18790, BasicBlockSignatureTracker # imm = 0xB69A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_361
# %bb.359:                              #   in Loop: Header=BB77_349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$-18776, %ax            # imm = 0xB6A8
	movq	%rdx, %rax
	jne	.LBB77_1420
# %bb.360:                              # %BZ2_decompress.split2898
                                        #   in Loop: Header=BB77_349 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-18776, BasicBlockSignatureTracker # imm = 0xB6A8
	movw	$50, RunTimeSignatureAdjuster
.LBB77_361:                             #   in Loop: Header=BB77_349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$-18755, %ax            # imm = 0xB6BD
	movq	%rdx, %r8
	jne	.LBB77_1420
# %bb.362:                              # %BZ2_decompress.split2900
                                        #   in Loop: Header=BB77_349 Depth=1
	movw	$-18755, BasicBlockSignatureTracker # imm = 0xB6BD
	movw	$223, RunTimeSignatureAdjuster
	jmp	.LBB77_349
.LBB77_363:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$-18709, %ax            # imm = 0xB6EB
	jne	.LBB77_1436
# %bb.364:                              # %BZ2_decompress.split2892
	movq	(%r8), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 56(%rcx)
	movw	$-18709, BasicBlockSignatureTracker # imm = 0xB6EB
	movw	$7748, RunTimeSignatureAdjuster # imm = 0x1E44
.LBB77_365:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8098, %ax              # imm = 0x1FA2
	xorw	%cx, %ax
	cmpw	$-18675, %ax            # imm = 0xB70D
	jne	.LBB77_1436
# %bb.366:                              # %BZ2_decompress.split2526
	movq	(%r8), %rax
	movl	$26, 8(%rax)
	movw	$-18675, BasicBlockSignatureTracker # imm = 0xB70D
	movw	$0, RunTimeSignatureAdjuster
.LBB77_367:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25, %ax
	xorw	%cx, %ax
	cmpw	$-18668, %ax            # imm = 0xB714
	jne	.LBB77_1419
# %bb.368:                              # %BZ2_decompress.split2902
                                        #   in Loop: Header=BB77_367 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-18668, BasicBlockSignatureTracker # imm = 0xB714
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_371
# %bb.369:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-18661, %ax            # imm = 0xB71B
	jne	.LBB77_1436
# %bb.370:                              # %BZ2_decompress.split2904
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-656(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-18661, BasicBlockSignatureTracker # imm = 0xB71B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_381
.LBB77_371:                             #   in Loop: Header=BB77_367 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$-18625, %ax            # imm = 0xB73F
	jne	.LBB77_1419
# %bb.372:                              # %BZ2_decompress.split2906
                                        #   in Loop: Header=BB77_367 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-18625, BasicBlockSignatureTracker # imm = 0xB73F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_375
# %bb.373:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$110, %ax
	cmpw	$-18607, %ax            # imm = 0xB751
	jne	.LBB77_1436
# %bb.374:                              # %BZ2_decompress.split2910
	movl	$0, (%r9)
	movw	$-18607, BasicBlockSignatureTracker # imm = 0xB751
	movw	$7799, RunTimeSignatureAdjuster # imm = 0x1E77
	jmp	.LBB77_1369
.LBB77_375:                             #   in Loop: Header=BB77_367 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$106, %ax
	cmpw	$-18603, %ax            # imm = 0xB755
	jne	.LBB77_1419
# %bb.376:                              # %BZ2_decompress.split2912
                                        #   in Loop: Header=BB77_367 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-18603, BasicBlockSignatureTracker # imm = 0xB755
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_379
# %bb.377:                              #   in Loop: Header=BB77_367 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-18596, %ax            # imm = 0xB75C
	movq	%rdx, %rax
	jne	.LBB77_1419
# %bb.378:                              # %BZ2_decompress.split2914
                                        #   in Loop: Header=BB77_367 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-18596, BasicBlockSignatureTracker # imm = 0xB75C
	movw	$9, RunTimeSignatureAdjuster
.LBB77_379:                             #   in Loop: Header=BB77_367 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$-18591, %ax            # imm = 0xB761
	movq	%rdx, %r8
	jne	.LBB77_1419
# %bb.380:                              # %BZ2_decompress.split2916
                                        #   in Loop: Header=BB77_367 Depth=1
	movw	$-18591, BasicBlockSignatureTracker # imm = 0xB761
	movw	$108, RunTimeSignatureAdjuster
	jmp	.LBB77_367
.LBB77_381:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$111, %ax
	cmpw	$-18572, %ax            # imm = 0xB774
	jne	.LBB77_1436
# %bb.382:                              # %BZ2_decompress.split2908
	movq	(%r8), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 56(%rcx)
	movw	$-18572, BasicBlockSignatureTracker # imm = 0xB774
	movw	$8155, RunTimeSignatureAdjuster # imm = 0x1FDB
.LBB77_383:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8147, %ax              # imm = 0x1FD3
	xorw	%cx, %ax
	cmpw	$-18564, %ax            # imm = 0xB77C
	jne	.LBB77_1436
# %bb.384:                              # %BZ2_decompress.split2528
	movq	(%r8), %rax
	movl	$27, 8(%rax)
	movw	$-18564, BasicBlockSignatureTracker # imm = 0xB77C
	movw	$0, RunTimeSignatureAdjuster
.LBB77_385:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$236, %ax
	xorw	%cx, %ax
	cmpw	$-18544, %ax            # imm = 0xB790
	jne	.LBB77_1418
# %bb.386:                              # %BZ2_decompress.split2918
                                        #   in Loop: Header=BB77_385 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-18544, BasicBlockSignatureTracker # imm = 0xB790
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_389
# %bb.387:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$85, %ax
	cmpw	$-18491, %ax            # imm = 0xB7C5
	jne	.LBB77_1436
# %bb.388:                              # %BZ2_decompress.split2920
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-18491, BasicBlockSignatureTracker # imm = 0xB7C5
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_399
.LBB77_389:                             #   in Loop: Header=BB77_385 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$-18463, %ax            # imm = 0xB7E1
	jne	.LBB77_1418
# %bb.390:                              # %BZ2_decompress.split2922
                                        #   in Loop: Header=BB77_385 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-18463, BasicBlockSignatureTracker # imm = 0xB7E1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_393
# %bb.391:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-18459, %ax            # imm = 0xB7E5
	jne	.LBB77_1436
# %bb.392:                              # %BZ2_decompress.split2926
	movl	$0, (%r9)
	movw	$-18459, BasicBlockSignatureTracker # imm = 0xB7E5
	movw	$7875, RunTimeSignatureAdjuster # imm = 0x1EC3
	jmp	.LBB77_1369
.LBB77_393:                             #   in Loop: Header=BB77_385 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-18450, %ax            # imm = 0xB7EE
	jne	.LBB77_1418
# %bb.394:                              # %BZ2_decompress.split2928
                                        #   in Loop: Header=BB77_385 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-18450, BasicBlockSignatureTracker # imm = 0xB7EE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_397
# %bb.395:                              #   in Loop: Header=BB77_385 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4087, %ax              # imm = 0xFF7
	cmpw	$-18407, %ax            # imm = 0xB819
	movq	%rdx, %rax
	jne	.LBB77_1418
# %bb.396:                              # %BZ2_decompress.split2930
                                        #   in Loop: Header=BB77_385 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-18407, BasicBlockSignatureTracker # imm = 0xB819
	movw	$4087, RunTimeSignatureAdjuster # imm = 0xFF7
.LBB77_397:                             #   in Loop: Header=BB77_385 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3981, %ax              # imm = 0xF8D
	xorw	%cx, %ax
	cmpw	$-18333, %ax            # imm = 0xB863
	movq	%rdx, %r8
	jne	.LBB77_1418
# %bb.398:                              # %BZ2_decompress.split2932
                                        #   in Loop: Header=BB77_385 Depth=1
	movw	$-18333, BasicBlockSignatureTracker # imm = 0xB863
	movw	$3871, RunTimeSignatureAdjuster # imm = 0xF1F
	jmp	.LBB77_385
.LBB77_399:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4013, %ax              # imm = 0xFAD
	cmpw	$-18328, %ax            # imm = 0xB868
	jne	.LBB77_1436
# %bb.400:                              # %BZ2_decompress.split2924
	movq	(%r8), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 56(%rcx)
	movq	(%r8), %rax
	movl	56(%rax), %eax
	movw	$-18328, BasicBlockSignatureTracker # imm = 0xB868
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB77_403
# %bb.401:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$237, %ax
	cmpw	$-18299, %ax            # imm = 0xB885
	jne	.LBB77_1436
# %bb.402:                              # %BZ2_decompress.split2934
	movl	$-4, (%r9)
	movw	$-18299, BasicBlockSignatureTracker # imm = 0xB885
	movw	$4515, RunTimeSignatureAdjuster # imm = 0x11A3
	jmp	.LBB77_1369
.LBB77_403:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$239, %ax
	cmpw	$-18297, %ax            # imm = 0xB887
	jne	.LBB77_1436
# %bb.404:                              # %BZ2_decompress.split2936
	movq	(%r8), %rax
	movl	56(%rax), %eax
	movq	%r8, %rdx
	movq	(%r8), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	movw	$-18297, BasicBlockSignatureTracker # imm = 0xB887
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB77_407
# %bb.405:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-18282, %ax            # imm = 0xB896
	movq	%rdx, %r8
	jne	.LBB77_1436
# %bb.406:                              # %BZ2_decompress.split2938
	movl	$-4, (%r9)
	movw	$-18282, BasicBlockSignatureTracker # imm = 0xB896
	movw	$4528, RunTimeSignatureAdjuster # imm = 0x11B0
	jmp	.LBB77_1369
.LBB77_407:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$69, %ax
	cmpw	$-18238, %ax            # imm = 0xB8C2
	movq	%r10, %rax
	jne	.LBB77_1436
# %bb.408:                              # %BZ2_decompress.split2940
	movl	$0, (%rax)
	movw	$-18238, BasicBlockSignatureTracker # imm = 0xB8C2
	movw	$0, RunTimeSignatureAdjuster
.LBB77_409:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$12, %ax
	xorw	%cx, %ax
	cmpw	$-18226, %ax            # imm = 0xB8CE
	movq	%rdx, %r8
	jne	.LBB77_1436
# %bb.410:                              # %BZ2_decompress.split2942
	movl	(%r10), %eax
	movw	$-18226, BasicBlockSignatureTracker # imm = 0xB8CE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB77_439
# %bb.411:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-18221, %ax            # imm = 0xB8D3
	jne	.LBB77_1436
# %bb.412:                              # %BZ2_decompress.split2944
	movw	$-18221, BasicBlockSignatureTracker # imm = 0xB8D3
	movw	$4220, RunTimeSignatureAdjuster # imm = 0x107C
.LBB77_413:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4209, %ax              # imm = 0x1071
	xorw	%cx, %ax
	cmpw	$-18210, %ax            # imm = 0xB8DE
	jne	.LBB77_1436
# %bb.414:                              # %BZ2_decompress.split2530
	movq	(%r8), %rax
	movl	$28, 8(%rax)
	movw	$-18210, BasicBlockSignatureTracker # imm = 0xB8DE
	movw	$0, RunTimeSignatureAdjuster
.LBB77_415:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$38, %ax
	xorw	%cx, %ax
	cmpw	$-18184, %ax            # imm = 0xB8F8
	jne	.LBB77_1380
# %bb.416:                              # %BZ2_decompress.split2948
                                        #   in Loop: Header=BB77_415 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-18184, BasicBlockSignatureTracker # imm = 0xB8F8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_419
# %bb.417:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-18177, %ax            # imm = 0xB8FF
	jne	.LBB77_1436
# %bb.418:                              # %BZ2_decompress.split2950
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-480(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-18177, BasicBlockSignatureTracker # imm = 0xB8FF
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_429
.LBB77_419:                             #   in Loop: Header=BB77_415 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$507, %ax               # imm = 0x1FB
	cmpw	$-18173, %ax            # imm = 0xB903
	jne	.LBB77_1380
# %bb.420:                              # %BZ2_decompress.split2952
                                        #   in Loop: Header=BB77_415 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-18173, BasicBlockSignatureTracker # imm = 0xB903
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_423
# %bb.421:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-18162, %ax            # imm = 0xB90E
	jne	.LBB77_1436
# %bb.422:                              # %BZ2_decompress.split2956
	movl	$0, (%r9)
	movw	$-18162, BasicBlockSignatureTracker # imm = 0xB90E
	movw	$4136, RunTimeSignatureAdjuster # imm = 0x1028
	jmp	.LBB77_1369
.LBB77_423:                             #   in Loop: Header=BB77_415 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-18151, %ax            # imm = 0xB919
	jne	.LBB77_1380
# %bb.424:                              # %BZ2_decompress.split2958
                                        #   in Loop: Header=BB77_415 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-18151, BasicBlockSignatureTracker # imm = 0xB919
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_427
# %bb.425:                              #   in Loop: Header=BB77_415 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$82, %ax
	cmpw	$-18101, %ax            # imm = 0xB94B
	movq	%rdx, %rax
	jne	.LBB77_1380
# %bb.426:                              # %BZ2_decompress.split2960
                                        #   in Loop: Header=BB77_415 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-18101, BasicBlockSignatureTracker # imm = 0xB94B
	movw	$82, RunTimeSignatureAdjuster
.LBB77_427:                             #   in Loop: Header=BB77_415 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$85, %ax
	xorw	%cx, %ax
	cmpw	$-18100, %ax            # imm = 0xB94C
	movq	%rdx, %r8
	jne	.LBB77_1380
# %bb.428:                              # %BZ2_decompress.split2962
                                        #   in Loop: Header=BB77_415 Depth=1
	movw	$-18100, BasicBlockSignatureTracker # imm = 0xB94C
	movw	$402, RunTimeSignatureAdjuster # imm = 0x192
	jmp	.LBB77_415
.LBB77_429:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$429, %ax               # imm = 0x1AD
	cmpw	$-18094, %ax            # imm = 0xB952
	jne	.LBB77_1436
# %bb.430:                              # %BZ2_decompress.split2954
	movq	%r8, %rdx
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-18094, BasicBlockSignatureTracker # imm = 0xB952
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB77_433
# %bb.431:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$-18072, %ax            # imm = 0xB968
	movq	%rdx, %rax
	movq	%r10, %rcx
	jne	.LBB77_1436
# %bb.432:                              # %BZ2_decompress.split2964
	movq	(%rax), %rax
	movslq	(%rcx), %rcx
	movb	$1, 3452(%rax,%rcx)
	movw	$-18072, BasicBlockSignatureTracker # imm = 0xB968
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_435
.LBB77_433:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-18061, %ax            # imm = 0xB973
	movq	%rdx, %rax
	movq	%r10, %rcx
	jne	.LBB77_1436
# %bb.434:                              # %BZ2_decompress.split2966
	movq	(%rax), %rax
	movslq	(%rcx), %rcx
	movb	$0, 3452(%rax,%rcx)
	movw	$-18061, BasicBlockSignatureTracker # imm = 0xB973
	movw	$27, RunTimeSignatureAdjuster
.LBB77_435:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$234, %ax
	xorw	%cx, %ax
	cmpw	$-18046, %ax            # imm = 0xB982
	jne	.LBB77_1436
# %bb.436:                              # %BZ2_decompress.split2968
	movw	$-18046, BasicBlockSignatureTracker # imm = 0xB982
	movw	$0, RunTimeSignatureAdjuster
# %bb.437:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-18005, %ax            # imm = 0xB9AB
	movq	%r10, %rcx
	jne	.LBB77_1436
# %bb.438:                              # %BZ2_decompress.split2970
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-18005, BasicBlockSignatureTracker # imm = 0xB9AB
	movw	$361, RunTimeSignatureAdjuster # imm = 0x169
	jmp	.LBB77_409
.LBB77_439:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$354, %ax               # imm = 0x162
	cmpw	$-18004, %ax            # imm = 0xB9AC
	jne	.LBB77_1436
# %bb.440:                              # %BZ2_decompress.split2946
	movl	$0, (%r10)
	movw	$-18004, BasicBlockSignatureTracker # imm = 0xB9AC
	movw	$0, RunTimeSignatureAdjuster
.LBB77_441:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$-17998, %ax            # imm = 0xB9B2
	jne	.LBB77_1417
# %bb.442:                              # %BZ2_decompress.split2972
                                        #   in Loop: Header=BB77_441 Depth=1
	movl	(%r10), %eax
	movw	$-17998, BasicBlockSignatureTracker # imm = 0xB9B2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jge	.LBB77_447
# %bb.443:                              #   in Loop: Header=BB77_441 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-17995, %ax            # imm = 0xB9B5
	jne	.LBB77_1417
# %bb.444:                              # %BZ2_decompress.split2974
                                        #   in Loop: Header=BB77_441 Depth=1
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	%r10, %rsi
	movslq	(%r10), %rcx
	movb	$0, 3196(%rax,%rcx)
	movw	$-17995, BasicBlockSignatureTracker # imm = 0xB9B5
	movw	$0, RunTimeSignatureAdjuster
# %bb.445:                              #   in Loop: Header=BB77_441 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-17987, %ax            # imm = 0xB9BD
	movq	%rdx, %r8
	movq	%rsi, %r10
	jne	.LBB77_1417
# %bb.446:                              # %BZ2_decompress.split2978
                                        #   in Loop: Header=BB77_441 Depth=1
	movl	(%r10), %eax
	addl	$1, %eax
	movl	%eax, (%r10)
	movw	$-17987, BasicBlockSignatureTracker # imm = 0xB9BD
	movw	$17, RunTimeSignatureAdjuster
	jmp	.LBB77_441
.LBB77_447:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$-17966, %ax            # imm = 0xB9D2
	jne	.LBB77_1436
# %bb.448:                              # %BZ2_decompress.split2976
	movl	$0, (%r10)
	movw	$-17966, BasicBlockSignatureTracker # imm = 0xB9D2
	movw	$0, RunTimeSignatureAdjuster
.LBB77_449:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$11, %ax
	xorw	%cx, %ax
	cmpw	$-17959, %ax            # imm = 0xB9D9
	jne	.LBB77_1436
# %bb.450:                              # %BZ2_decompress.split2980
	movl	(%r10), %eax
	movw	$-17959, BasicBlockSignatureTracker # imm = 0xB9D9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB77_489
# %bb.451:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-17942, %ax            # imm = 0xB9EA
	jne	.LBB77_1436
# %bb.452:                              # %BZ2_decompress.split2982
	movq	(%r8), %rax
	movslq	(%r10), %rcx
	movb	3452(%rax,%rcx), %al
	movw	$-17942, BasicBlockSignatureTracker # imm = 0xB9EA
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_485
# %bb.453:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-17933, %ax            # imm = 0xB9F3
	jne	.LBB77_1436
# %bb.454:                              # %BZ2_decompress.split2986
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-17933, BasicBlockSignatureTracker # imm = 0xB9F3
	movw	$0, RunTimeSignatureAdjuster
.LBB77_455:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1011, %ax              # imm = 0x3F3
	xorw	%cx, %ax
	cmpw	$-17920, %ax            # imm = 0xBA00
	jne	.LBB77_1436
# %bb.456:                              # %BZ2_decompress.split2990
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-17920, BasicBlockSignatureTracker # imm = 0xBA00
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jge	.LBB77_483
# %bb.457:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$-17871, %ax            # imm = 0xBA31
	jne	.LBB77_1436
# %bb.458:                              # %BZ2_decompress.split2992
	movw	$-17871, BasicBlockSignatureTracker # imm = 0xBA31
	movw	$4766, RunTimeSignatureAdjuster # imm = 0x129E
.LBB77_459:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4835, %ax              # imm = 0x12E3
	xorw	%cx, %ax
	cmpw	$-17844, %ax            # imm = 0xBA4C
	jne	.LBB77_1436
# %bb.460:                              # %BZ2_decompress.split2532
	movq	(%r8), %rax
	movl	$29, 8(%rax)
	movw	$-17844, BasicBlockSignatureTracker # imm = 0xBA4C
	movw	$0, RunTimeSignatureAdjuster
.LBB77_461:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$61, %ax
	xorw	%cx, %ax
	cmpw	$-17807, %ax            # imm = 0xBA71
	jne	.LBB77_1381
# %bb.462:                              # %BZ2_decompress.split2996
                                        #   in Loop: Header=BB77_461 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-17807, BasicBlockSignatureTracker # imm = 0xBA71
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_465
# %bb.463:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$205, %ax
	cmpw	$-17732, %ax            # imm = 0xBABC
	jne	.LBB77_1436
# %bb.464:                              # %BZ2_decompress.split2998
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-408(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rsi), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-17732, BasicBlockSignatureTracker # imm = 0xBABC
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_475
.LBB77_465:                             #   in Loop: Header=BB77_461 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$144, %ax
	cmpw	$-17695, %ax            # imm = 0xBAE1
	jne	.LBB77_1381
# %bb.466:                              # %BZ2_decompress.split3000
                                        #   in Loop: Header=BB77_461 Depth=1
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-17695, BasicBlockSignatureTracker # imm = 0xBAE1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_469
# %bb.467:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$-17676, %ax            # imm = 0xBAF4
	movq	%rdx, %r8
	jne	.LBB77_1436
# %bb.468:                              # %BZ2_decompress.split3004
	movl	$0, (%r9)
	movw	$-17676, BasicBlockSignatureTracker # imm = 0xBAF4
	movw	$5074, RunTimeSignatureAdjuster # imm = 0x13D2
	jmp	.LBB77_1369
.LBB77_469:                             #   in Loop: Header=BB77_461 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-17668, %ax            # imm = 0xBAFC
	movq	%rdx, %rsi
	jne	.LBB77_1381
# %bb.470:                              # %BZ2_decompress.split3006
                                        #   in Loop: Header=BB77_461 Depth=1
	movq	(%rsi), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%rsi), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%rsi), %rcx
	movl	%eax, 32(%rcx)
	movq	(%rsi), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-17668, BasicBlockSignatureTracker # imm = 0xBAFC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_473
# %bb.471:                              #   in Loop: Header=BB77_461 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$498, %ax               # imm = 0x1F2
	cmpw	$-17650, %ax            # imm = 0xBB0E
	movq	%rdx, %rax
	jne	.LBB77_1381
# %bb.472:                              # %BZ2_decompress.split3008
                                        #   in Loop: Header=BB77_461 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-17650, BasicBlockSignatureTracker # imm = 0xBB0E
	movw	$498, RunTimeSignatureAdjuster # imm = 0x1F2
.LBB77_473:                             #   in Loop: Header=BB77_461 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$487, %ax               # imm = 0x1E7
	xorw	%cx, %ax
	cmpw	$-17637, %ax            # imm = 0xBB1B
	movq	%rdx, %r8
	jne	.LBB77_1381
# %bb.474:                              # %BZ2_decompress.split3010
                                        #   in Loop: Header=BB77_461 Depth=1
	movw	$-17637, BasicBlockSignatureTracker # imm = 0xBB1B
	movw	$343, RunTimeSignatureAdjuster # imm = 0x157
	jmp	.LBB77_461
.LBB77_475:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$414, %ax               # imm = 0x19E
	cmpw	$-17630, %ax            # imm = 0xBB22
	jne	.LBB77_1436
# %bb.476:                              # %BZ2_decompress.split3002
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-17630, BasicBlockSignatureTracker # imm = 0xBB22
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB77_479
# %bb.477:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-17606, %ax            # imm = 0xBB3A
	movq	%rdx, %rax
	movq	%r10, %rcx
	jne	.LBB77_1436
# %bb.478:                              # %BZ2_decompress.split3012
	movq	(%rax), %rax
	movl	(%rcx), %ecx
	shll	$4, %ecx
	movq	-88(%rbp), %rsi         # 8-byte Reload
	addl	(%rsi), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
	movw	$-17606, BasicBlockSignatureTracker # imm = 0xBB3A
	movw	$24, RunTimeSignatureAdjuster
.LBB77_479:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$97, %ax
	xorw	%cx, %ax
	cmpw	$-17597, %ax            # imm = 0xBB43
	jne	.LBB77_1436
# %bb.480:                              # %BZ2_decompress.split3014
	movw	$-17597, BasicBlockSignatureTracker # imm = 0xBB43
	movw	$0, RunTimeSignatureAdjuster
# %bb.481:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-17585, %ax            # imm = 0xBB4F
	movq	%rdx, %r8
	jne	.LBB77_1436
# %bb.482:                              # %BZ2_decompress.split3016
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-17585, BasicBlockSignatureTracker # imm = 0xBB4F
	movw	$700, RunTimeSignatureAdjuster # imm = 0x2BC
	jmp	.LBB77_455
.LBB77_483:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$385, %ax               # imm = 0x181
	cmpw	$-17535, %ax            # imm = 0xBB81
	jne	.LBB77_1436
# %bb.484:                              # %BZ2_decompress.split2994
	movw	$-17535, BasicBlockSignatureTracker # imm = 0xBB81
	movw	$619, RunTimeSignatureAdjuster # imm = 0x26B
.LBB77_485:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$575, %ax               # imm = 0x23F
	xorw	%cx, %ax
	cmpw	$-17451, %ax            # imm = 0xBBD5
	jne	.LBB77_1436
# %bb.486:                              # %BZ2_decompress.split2988
	movw	$-17451, BasicBlockSignatureTracker # imm = 0xBBD5
	movw	$0, RunTimeSignatureAdjuster
# %bb.487:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-17448, %ax            # imm = 0xBBD8
	jne	.LBB77_1436
# %bb.488:                              # %BZ2_decompress.split3018
	movl	(%r10), %eax
	addl	$1, %eax
	movl	%eax, (%r10)
	movw	$-17448, BasicBlockSignatureTracker # imm = 0xBBD8
	movw	$522, RunTimeSignatureAdjuster # imm = 0x20A
	jmp	.LBB77_449
.LBB77_489:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$569, %ax               # imm = 0x239
	cmpw	$-17440, %ax            # imm = 0xBBE0
	jne	.LBB77_1436
# %bb.490:                              # %BZ2_decompress.split2984
	movq	%r11, %r12
	movq	%r10, %r15
	movq	%r9, %r14
	movq	(%r8), %rdi
	movw	$-17440, BasicBlockSignatureTracker # imm = 0xBBE0
	movw	$0, RunTimeSignatureAdjuster
	movq	%r8, %rbx
	callq	makeMaps_d
	movq	%rbx, %r8
	movw	$-17440, BasicBlockSignatureTracker # imm = 0xBBE0
	movw	$0, RunTimeSignatureAdjuster
	movq	(%r8), %rax
	movl	3192(%rax), %eax
	movw	$-17440, BasicBlockSignatureTracker # imm = 0xBBE0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_493
# %bb.491:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$-17438, %ax            # imm = 0xBBE2
	movq	%r14, %r9
	movq	%r15, %r10
	jne	.LBB77_1436
# %bb.492:                              # %BZ2_decompress.split3020
	movl	$-4, (%r9)
	movw	$-17438, BasicBlockSignatureTracker # imm = 0xBBE2
	movw	$4804, RunTimeSignatureAdjuster # imm = 0x12C4
	jmp	.LBB77_1369
.LBB77_493:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-17422, %ax            # imm = 0xBBF2
	movq	%r14, %r9
	movq	%r15, %r10
	movq	%r12, %r11
	jne	.LBB77_1436
# %bb.494:                              # %BZ2_decompress.split3022
	movq	(%r8), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movq	-232(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-17422, BasicBlockSignatureTracker # imm = 0xBBF2
	movw	$4957, RunTimeSignatureAdjuster # imm = 0x135D
.LBB77_495:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$5295, %ax              # imm = 0x14AF
	xorw	%cx, %ax
	cmpw	$-17408, %ax            # imm = 0xBC00
	jne	.LBB77_1436
# %bb.496:                              # %BZ2_decompress.split2534
	movq	(%r8), %rax
	movl	$30, 8(%rax)
	movw	$-17408, BasicBlockSignatureTracker # imm = 0xBC00
	movw	$0, RunTimeSignatureAdjuster
.LBB77_497:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$22, %ax
	xorw	%cx, %ax
	cmpw	$-17386, %ax            # imm = 0xBC16
	jne	.LBB77_1416
# %bb.498:                              # %BZ2_decompress.split3024
                                        #   in Loop: Header=BB77_497 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-17386, BasicBlockSignatureTracker # imm = 0xBC16
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jl	.LBB77_501
# %bb.499:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-17363, %ax            # imm = 0xBC2D
	jne	.LBB77_1436
# %bb.500:                              # %BZ2_decompress.split3026
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movq	-584(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-17363, BasicBlockSignatureTracker # imm = 0xBC2D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_511
.LBB77_501:                             #   in Loop: Header=BB77_497 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$-17337, %ax            # imm = 0xBC47
	jne	.LBB77_1416
# %bb.502:                              # %BZ2_decompress.split3028
                                        #   in Loop: Header=BB77_497 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-17337, BasicBlockSignatureTracker # imm = 0xBC47
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_505
# %bb.503:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$-17320, %ax            # imm = 0xBC58
	jne	.LBB77_1436
# %bb.504:                              # %BZ2_decompress.split3032
	movl	$0, (%r9)
	movw	$-17320, BasicBlockSignatureTracker # imm = 0xBC58
	movw	$5502, RunTimeSignatureAdjuster # imm = 0x157E
	jmp	.LBB77_1369
.LBB77_505:                             #   in Loop: Header=BB77_497 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-17306, %ax            # imm = 0xBC66
	jne	.LBB77_1416
# %bb.506:                              # %BZ2_decompress.split3034
                                        #   in Loop: Header=BB77_497 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-17306, BasicBlockSignatureTracker # imm = 0xBC66
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_509
# %bb.507:                              #   in Loop: Header=BB77_497 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$198, %ax
	cmpw	$-17248, %ax            # imm = 0xBCA0
	movq	%rdx, %rax
	jne	.LBB77_1416
# %bb.508:                              # %BZ2_decompress.split3036
                                        #   in Loop: Header=BB77_497 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-17248, BasicBlockSignatureTracker # imm = 0xBCA0
	movw	$198, RunTimeSignatureAdjuster
.LBB77_509:                             #   in Loop: Header=BB77_497 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$193, %ax
	xorw	%cx, %ax
	cmpw	$-17241, %ax            # imm = 0xBCA7
	movq	%rdx, %r8
	jne	.LBB77_1416
# %bb.510:                              # %BZ2_decompress.split3038
                                        #   in Loop: Header=BB77_497 Depth=1
	movw	$-17241, BasicBlockSignatureTracker # imm = 0xBCA7
	movw	$167, RunTimeSignatureAdjuster
	jmp	.LBB77_497
.LBB77_511:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$159, %ax
	cmpw	$-17230, %ax            # imm = 0xBCB2
	jne	.LBB77_1436
# %bb.512:                              # %BZ2_decompress.split3030
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-17230, BasicBlockSignatureTracker # imm = 0xBCB2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB77_515
# %bb.513:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$124, %ax
	cmpw	$-17202, %ax            # imm = 0xBCCE
	jne	.LBB77_1436
# %bb.514:                              # %BZ2_decompress.split3042
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-17202, BasicBlockSignatureTracker # imm = 0xBCCE
	movw	$124, RunTimeSignatureAdjuster
	cmpl	$6, %eax
	jle	.LBB77_517
.LBB77_515:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$102, %ax
	xorw	%cx, %ax
	cmpw	$-17196, %ax            # imm = 0xBCD4
	jne	.LBB77_1436
# %bb.516:                              # %BZ2_decompress.split3040
	movl	$-4, (%r9)
	movw	$-17196, BasicBlockSignatureTracker # imm = 0xBCD4
	movw	$5618, RunTimeSignatureAdjuster # imm = 0x15F2
	jmp	.LBB77_1369
.LBB77_517:                             # %Buffer__2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-24379, %ax            # imm = 0xA0C5
	cmpw	$7179, %ax              # imm = 0x1C0B
	jne	.LBB77_1436
# %bb.518:                              # %BZ2_decompress.split3044
	movw	$7179, BasicBlockSignatureTracker # imm = 0x1C0B
	movw	$-24379, RunTimeSignatureAdjuster # imm = 0xA0C5
# %bb.519:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$40, %ax
	xorw	%cx, %ax
	cmpw	$-17178, %ax            # imm = 0xBCE6
	jne	.LBB77_1436
# %bb.520:                              # %BZ2_decompress.split3836
	movw	$-17178, BasicBlockSignatureTracker # imm = 0xBCE6
	movw	$5193, RunTimeSignatureAdjuster # imm = 0x1449
.LBB77_521:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$5560, %ax              # imm = 0x15B8
	xorw	%cx, %ax
	cmpw	$-17129, %ax            # imm = 0xBD17
	jne	.LBB77_1436
# %bb.522:                              # %BZ2_decompress.split2536
	movq	(%r8), %rax
	movl	$31, 8(%rax)
	movw	$-17129, BasicBlockSignatureTracker # imm = 0xBD17
	movw	$0, RunTimeSignatureAdjuster
.LBB77_523:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$-17128, %ax            # imm = 0xBD18
	jne	.LBB77_1415
# %bb.524:                              # %BZ2_decompress.split3046
                                        #   in Loop: Header=BB77_523 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-17128, BasicBlockSignatureTracker # imm = 0xBD18
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$15, %eax
	jl	.LBB77_527
# %bb.525:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-17117, %ax            # imm = 0xBD23
	jne	.LBB77_1436
# %bb.526:                              # %BZ2_decompress.split3048
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-17117, BasicBlockSignatureTracker # imm = 0xBD23
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_537
.LBB77_527:                             #   in Loop: Header=BB77_523 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$-17091, %ax            # imm = 0xBD3D
	jne	.LBB77_1415
# %bb.528:                              # %BZ2_decompress.split3050
                                        #   in Loop: Header=BB77_523 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-17091, BasicBlockSignatureTracker # imm = 0xBD3D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_531
# %bb.529:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$-17064, %ax            # imm = 0xBD58
	jne	.LBB77_1436
# %bb.530:                              # %BZ2_decompress.split3054
	movl	$0, (%r9)
	movw	$-17064, BasicBlockSignatureTracker # imm = 0xBD58
	movw	$5246, RunTimeSignatureAdjuster # imm = 0x147E
	jmp	.LBB77_1369
.LBB77_531:                             #   in Loop: Header=BB77_523 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$166, %ax
	cmpw	$-16997, %ax            # imm = 0xBD9B
	jne	.LBB77_1415
# %bb.532:                              # %BZ2_decompress.split3056
                                        #   in Loop: Header=BB77_523 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-16997, BasicBlockSignatureTracker # imm = 0xBD9B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_535
# %bb.533:                              #   in Loop: Header=BB77_523 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-16984, %ax            # imm = 0xBDA8
	movq	%rdx, %rax
	jne	.LBB77_1415
# %bb.534:                              # %BZ2_decompress.split3058
                                        #   in Loop: Header=BB77_523 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-16984, BasicBlockSignatureTracker # imm = 0xBDA8
	movw	$51, RunTimeSignatureAdjuster
.LBB77_535:                             #   in Loop: Header=BB77_523 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$48, %ax
	xorw	%cx, %ax
	cmpw	$-16981, %ax            # imm = 0xBDAB
	movq	%rdx, %r8
	jne	.LBB77_1415
# %bb.536:                              # %BZ2_decompress.split3060
                                        #   in Loop: Header=BB77_523 Depth=1
	movw	$-16981, BasicBlockSignatureTracker # imm = 0xBDAB
	movw	$188, RunTimeSignatureAdjuster
	jmp	.LBB77_523
.LBB77_537:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$142, %ax
	cmpw	$-16979, %ax            # imm = 0xBDAD
	jne	.LBB77_1436
# %bb.538:                              # %BZ2_decompress.split3052
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-16979, BasicBlockSignatureTracker # imm = 0xBDAD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jge	.LBB77_541
# %bb.539:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-16964, %ax            # imm = 0xBDBC
	jne	.LBB77_1436
# %bb.540:                              # %BZ2_decompress.split3062
	movl	$-4, (%r9)
	movw	$-16964, BasicBlockSignatureTracker # imm = 0xBDBC
	movw	$5274, RunTimeSignatureAdjuster # imm = 0x149A
	jmp	.LBB77_1369
.LBB77_541:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$112, %ax
	cmpw	$-16931, %ax            # imm = 0xBDDD
	jne	.LBB77_1436
# %bb.542:                              # %BZ2_decompress.split3064
	movq	%r10, %rsi
	movl	$0, (%r10)
	movw	$-16931, BasicBlockSignatureTracker # imm = 0xBDDD
	movw	$0, RunTimeSignatureAdjuster
.LBB77_543:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$981, %ax               # imm = 0x3D5
	xorw	%cx, %ax
	cmpw	$-16888, %ax            # imm = 0xBE08
	movq	%rsi, %r10
	jne	.LBB77_1436
# %bb.544:                              # %BZ2_decompress.split3066
	movl	(%r10), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-16888, BasicBlockSignatureTracker # imm = 0xBE08
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_579
# %bb.545:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-16875, %ax            # imm = 0xBE15
	jne	.LBB77_1436
# %bb.546:                              # %BZ2_decompress.split3068
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-16875, BasicBlockSignatureTracker # imm = 0xBE15
	movw	$0, RunTimeSignatureAdjuster
.LBB77_547:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$11, %ax
	xorw	%cx, %ax
	cmpw	$-16866, %ax            # imm = 0xBE1E
	jne	.LBB77_1436
# %bb.548:                              # %BZ2_decompress.split3072
	movw	$-16866, BasicBlockSignatureTracker # imm = 0xBE1E
	movw	$5809, RunTimeSignatureAdjuster # imm = 0x16B1
.LBB77_549:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$5771, %ax              # imm = 0x168B
	xorw	%cx, %ax
	cmpw	$-16860, %ax            # imm = 0xBE24
	jne	.LBB77_1436
# %bb.550:                              # %BZ2_decompress.split2538
	movq	(%r8), %rax
	movl	$32, 8(%rax)
	movw	$-16860, BasicBlockSignatureTracker # imm = 0xBE24
	movw	$0, RunTimeSignatureAdjuster
.LBB77_551:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$-16853, %ax            # imm = 0xBE2B
	jne	.LBB77_1382
# %bb.552:                              # %BZ2_decompress.split3074
                                        #   in Loop: Header=BB77_551 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-16853, BasicBlockSignatureTracker # imm = 0xBE2B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_555
# %bb.553:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$105, %ax
	cmpw	$-16830, %ax            # imm = 0xBE42
	jne	.LBB77_1436
# %bb.554:                              # %BZ2_decompress.split3076
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-16830, BasicBlockSignatureTracker # imm = 0xBE42
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_565
.LBB77_555:                             #   in Loop: Header=BB77_551 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$125, %ax
	cmpw	$-16810, %ax            # imm = 0xBE56
	jne	.LBB77_1382
# %bb.556:                              # %BZ2_decompress.split3078
                                        #   in Loop: Header=BB77_551 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-16810, BasicBlockSignatureTracker # imm = 0xBE56
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_559
# %bb.557:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-16806, %ax            # imm = 0xBE5A
	jne	.LBB77_1436
# %bb.558:                              # %BZ2_decompress.split3082
	movl	$0, (%r9)
	movw	$-16806, BasicBlockSignatureTracker # imm = 0xBE5A
	movw	$6012, RunTimeSignatureAdjuster # imm = 0x177C
	jmp	.LBB77_1369
.LBB77_559:                             #   in Loop: Header=BB77_551 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$247, %ax
	cmpw	$-16735, %ax            # imm = 0xBEA1
	jne	.LBB77_1382
# %bb.560:                              # %BZ2_decompress.split3084
                                        #   in Loop: Header=BB77_551 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-16735, BasicBlockSignatureTracker # imm = 0xBEA1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_563
# %bb.561:                              #   in Loop: Header=BB77_551 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$-16716, %ax            # imm = 0xBEB4
	movq	%rdx, %rax
	jne	.LBB77_1382
# %bb.562:                              # %BZ2_decompress.split3086
                                        #   in Loop: Header=BB77_551 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-16716, BasicBlockSignatureTracker # imm = 0xBEB4
	movw	$21, RunTimeSignatureAdjuster
.LBB77_563:                             #   in Loop: Header=BB77_551 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$75, %ax
	xorw	%cx, %ax
	cmpw	$-16662, %ax            # imm = 0xBEEA
	movq	%rdx, %r8
	jne	.LBB77_1382
# %bb.564:                              # %BZ2_decompress.split3088
                                        #   in Loop: Header=BB77_551 Depth=1
	movw	$-16662, BasicBlockSignatureTracker # imm = 0xBEEA
	movw	$206, RunTimeSignatureAdjuster
	jmp	.LBB77_551
.LBB77_565:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$322, %ax               # imm = 0x142
	cmpw	$-16640, %ax            # imm = 0xBF00
	jne	.LBB77_1436
# %bb.566:                              # %BZ2_decompress.split3080
	movq	%r10, %rsi
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-16640, BasicBlockSignatureTracker # imm = 0xBF00
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_569
# %bb.567:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$77, %ax
	cmpw	$-16563, %ax            # imm = 0xBF4D
	jne	.LBB77_1436
# %bb.568:                              # %BZ2_decompress.split3090
	movw	$-16563, BasicBlockSignatureTracker # imm = 0xBF4D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_575
.LBB77_569:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$90, %ax
	cmpw	$-16550, %ax            # imm = 0xBF5A
	jne	.LBB77_1436
# %bb.570:                              # %BZ2_decompress.split3092
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-16550, BasicBlockSignatureTracker # imm = 0xBF5A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_573
# %bb.571:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$-16522, %ax            # imm = 0xBF76
	movq	%rsi, %r10
	jne	.LBB77_1436
# %bb.572:                              # %BZ2_decompress.split3096
	movl	$-4, (%r9)
	movw	$-16522, BasicBlockSignatureTracker # imm = 0xBF76
	movw	$5712, RunTimeSignatureAdjuster # imm = 0x1650
	jmp	.LBB77_1369
.LBB77_573:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$223, %ax
	cmpw	$-16507, %ax            # imm = 0xBF85
	movq	%rsi, %r10
	jne	.LBB77_1436
# %bb.574:                              # %BZ2_decompress.split3098
	movw	$-16507, BasicBlockSignatureTracker # imm = 0xBF85
	movw	$400, RunTimeSignatureAdjuster # imm = 0x190
	jmp	.LBB77_547
.LBB77_575:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$225, %ax
	cmpw	$-16468, %ax            # imm = 0xBFAC
	movq	%r8, %rcx
	movq	%rsi, %rdx
	jne	.LBB77_1436
# %bb.576:                              # %BZ2_decompress.split3094
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	movslq	(%rdx), %rdx
	movb	%al, 25886(%rcx,%rdx)
	movw	$-16468, BasicBlockSignatureTracker # imm = 0xBFAC
	movw	$0, RunTimeSignatureAdjuster
# %bb.577:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$-16436, %ax            # imm = 0xBFCC
	movq	%rsi, %rcx
	jne	.LBB77_1436
# %bb.578:                              # %BZ2_decompress.split3100
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-16436, BasicBlockSignatureTracker # imm = 0xBFCC
	movw	$529, RunTimeSignatureAdjuster # imm = 0x211
	jmp	.LBB77_543
.LBB77_579:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$467, %ax               # imm = 0x1D3
	cmpw	$-16421, %ax            # imm = 0xBFDB
	jne	.LBB77_1436
# %bb.580:                              # %BZ2_decompress.split3070
	movq	-208(%rbp), %rax        # 8-byte Reload
	movb	$0, (%rax)
	movw	$-16421, BasicBlockSignatureTracker # imm = 0xBFDB
	movw	$0, RunTimeSignatureAdjuster
.LBB77_581:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$52, %ax
	xorw	%cx, %ax
	cmpw	$-16401, %ax            # imm = 0xBFEF
	jne	.LBB77_1414
# %bb.582:                              # %BZ2_decompress.split3102
                                        #   in Loop: Header=BB77_581 Depth=1
	movq	-208(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-16401, BasicBlockSignatureTracker # imm = 0xBFEF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_587
# %bb.583:                              #   in Loop: Header=BB77_581 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$32683, %ax             # imm = 0x7FAB
	cmpw	$-16316, %ax            # imm = 0xC044
	jne	.LBB77_1414
# %bb.584:                              # %BZ2_decompress.split3104
                                        #   in Loop: Header=BB77_581 Depth=1
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx), %al
	movzbl	(%rcx), %ecx
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movb	%al, (%rdx,%rcx)
	movw	$-16316, BasicBlockSignatureTracker # imm = 0xC044
	movw	$0, RunTimeSignatureAdjuster
# %bb.585:                              #   in Loop: Header=BB77_581 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-16291, %ax            # imm = 0xC05D
	jne	.LBB77_1414
# %bb.586:                              # %BZ2_decompress.split3108
                                        #   in Loop: Header=BB77_581 Depth=1
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx), %al
	addb	$1, %al
	movb	%al, (%rcx)
	movw	$-16291, BasicBlockSignatureTracker # imm = 0xC05D
	movw	$32646, RunTimeSignatureAdjuster # imm = 0x7F86
	jmp	.LBB77_581
.LBB77_587:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$32645, %ax             # imm = 0x7F85
	cmpw	$-16278, %ax            # imm = 0xC06A
	movq	%r10, %rax
	jne	.LBB77_1436
# %bb.588:                              # %BZ2_decompress.split3106
	movl	$0, (%rax)
	movw	$-16278, BasicBlockSignatureTracker # imm = 0xC06A
	movw	$0, RunTimeSignatureAdjuster
.LBB77_589:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_593 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$-16276, %ax            # imm = 0xC06C
	jne	.LBB77_1413
# %bb.590:                              # %BZ2_decompress.split3110
                                        #   in Loop: Header=BB77_589 Depth=1
	movl	(%r10), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-16276, BasicBlockSignatureTracker # imm = 0xC06C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_601
# %bb.591:                              #   in Loop: Header=BB77_589 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$168, %ax
	cmpw	$-16188, %ax            # imm = 0xC0C4
	jne	.LBB77_1413
# %bb.592:                              # %BZ2_decompress.split3112
                                        #   in Loop: Header=BB77_589 Depth=1
	movq	(%r8), %rax
	movslq	(%r10), %rcx
	movb	25886(%rax,%rcx), %al
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movzbl	(%rcx), %eax
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movb	(%rcx,%rax), %al
	movq	-368(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-16188, BasicBlockSignatureTracker # imm = 0xC0C4
	movw	$0, RunTimeSignatureAdjuster
.LBB77_593:                             #   Parent Loop BB77_589 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$-16157, %ax            # imm = 0xC0E3
	jne	.LBB77_1412
# %bb.594:                              # %BZ2_decompress.split3116
                                        #   in Loop: Header=BB77_593 Depth=2
	movq	-208(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-16157, BasicBlockSignatureTracker # imm = 0xC0E3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB77_597
# %bb.595:                              #   in Loop: Header=BB77_593 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-16145, %ax            # imm = 0xC0EF
	jne	.LBB77_1412
# %bb.596:                              # %BZ2_decompress.split3118
                                        #   in Loop: Header=BB77_593 Depth=2
	movq	-208(%rbp), %rsi        # 8-byte Reload
	movzbl	(%rsi), %eax
	subl	$1, %eax
	cltq
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movb	(%rdx,%rax), %al
	movzbl	(%rsi), %ecx
	movb	%al, (%rdx,%rcx)
	movb	(%rsi), %al
	addb	$-1, %al
	movb	%al, (%rsi)
	movw	$-16145, BasicBlockSignatureTracker # imm = 0xC0EF
	movw	$43, RunTimeSignatureAdjuster
	jmp	.LBB77_593
.LBB77_597:                             #   in Loop: Header=BB77_589 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-16141, %ax            # imm = 0xC0F3
	jne	.LBB77_1413
# %bb.598:                              # %BZ2_decompress.split3120
                                        #   in Loop: Header=BB77_589 Depth=1
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movb	(%rdx), %al
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	movb	(%rdx), %al
	movq	(%r8), %rcx
	movslq	(%r10), %rdx
	movb	%al, 7884(%rcx,%rdx)
	movw	$-16141, BasicBlockSignatureTracker # imm = 0xC0F3
	movw	$0, RunTimeSignatureAdjuster
# %bb.599:                              #   in Loop: Header=BB77_589 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$465, %ax               # imm = 0x1D1
	cmpw	$-16094, %ax            # imm = 0xC122
	jne	.LBB77_1413
# %bb.600:                              # %BZ2_decompress.split3122
                                        #   in Loop: Header=BB77_589 Depth=1
	movq	%r10, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-16094, BasicBlockSignatureTracker # imm = 0xC122
	movw	$328, RunTimeSignatureAdjuster # imm = 0x148
	jmp	.LBB77_589
.LBB77_601:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$340, %ax               # imm = 0x154
	cmpw	$-16072, %ax            # imm = 0xC138
	jne	.LBB77_1436
# %bb.602:                              # %BZ2_decompress.split3114
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-16072, BasicBlockSignatureTracker # imm = 0xC138
	movw	$0, RunTimeSignatureAdjuster
.LBB77_603:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4, %ax
	xorw	%cx, %ax
	cmpw	$-16068, %ax            # imm = 0xC13C
	jne	.LBB77_1436
# %bb.604:                              # %BZ2_decompress.split3124
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-16068, BasicBlockSignatureTracker # imm = 0xC13C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_693
# %bb.605:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$66, %ax
	cmpw	$-16002, %ax            # imm = 0xC17E
	jne	.LBB77_1436
# %bb.606:                              # %BZ2_decompress.split3126
	movw	$-16002, BasicBlockSignatureTracker # imm = 0xC17E
	movw	$27089, RunTimeSignatureAdjuster # imm = 0x69D1
.LBB77_607:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26907, %ax             # imm = 0x691B
	xorw	%cx, %ax
	cmpw	$-15948, %ax            # imm = 0xC1B4
	jne	.LBB77_1436
# %bb.608:                              # %BZ2_decompress.split2540
	movq	(%r8), %rax
	movl	$33, 8(%rax)
	movw	$-15948, BasicBlockSignatureTracker # imm = 0xC1B4
	movw	$0, RunTimeSignatureAdjuster
.LBB77_609:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$117, %ax
	xorw	%cx, %ax
	cmpw	$-15935, %ax            # imm = 0xC1C1
	jne	.LBB77_1385
# %bb.610:                              # %BZ2_decompress.split3130
                                        #   in Loop: Header=BB77_609 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-15935, BasicBlockSignatureTracker # imm = 0xC1C1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$5, %eax
	jl	.LBB77_613
# %bb.611:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-15881, %ax            # imm = 0xC1F7
	jne	.LBB77_1436
# %bb.612:                              # %BZ2_decompress.split3132
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movq	-472(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-15881, BasicBlockSignatureTracker # imm = 0xC1F7
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_623
.LBB77_613:                             #   in Loop: Header=BB77_609 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$-15875, %ax            # imm = 0xC1FD
	jne	.LBB77_1385
# %bb.614:                              # %BZ2_decompress.split3134
                                        #   in Loop: Header=BB77_609 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-15875, BasicBlockSignatureTracker # imm = 0xC1FD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_617
# %bb.615:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$-15873, %ax            # imm = 0xC1FF
	jne	.LBB77_1436
# %bb.616:                              # %BZ2_decompress.split3138
	movl	$0, (%r9)
	movw	$-15873, BasicBlockSignatureTracker # imm = 0xC1FF
	movw	$26841, RunTimeSignatureAdjuster # imm = 0x68D9
	jmp	.LBB77_1369
.LBB77_617:                             #   in Loop: Header=BB77_609 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$974, %ax               # imm = 0x3CE
	cmpw	$-15821, %ax            # imm = 0xC233
	jne	.LBB77_1385
# %bb.618:                              # %BZ2_decompress.split3140
                                        #   in Loop: Header=BB77_609 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-15821, BasicBlockSignatureTracker # imm = 0xC233
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_621
# %bb.619:                              #   in Loop: Header=BB77_609 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-15818, %ax            # imm = 0xC236
	movq	%rdx, %rax
	jne	.LBB77_1385
# %bb.620:                              # %BZ2_decompress.split3142
                                        #   in Loop: Header=BB77_609 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-15818, BasicBlockSignatureTracker # imm = 0xC236
	movw	$5, RunTimeSignatureAdjuster
.LBB77_621:                             #   in Loop: Header=BB77_609 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$114, %ax
	xorw	%cx, %ax
	cmpw	$-15807, %ax            # imm = 0xC241
	movq	%rdx, %r8
	jne	.LBB77_1385
# %bb.622:                              # %BZ2_decompress.split3144
                                        #   in Loop: Header=BB77_609 Depth=1
	movw	$-15807, BasicBlockSignatureTracker # imm = 0xC241
	movw	$1013, RunTimeSignatureAdjuster # imm = 0x3F5
	jmp	.LBB77_609
.LBB77_623:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$948, %ax               # imm = 0x3B4
	cmpw	$-15805, %ax            # imm = 0xC243
	jne	.LBB77_1436
# %bb.624:                              # %BZ2_decompress.split3136
	movl	$0, (%r10)
	movw	$-15805, BasicBlockSignatureTracker # imm = 0xC243
	movw	$0, RunTimeSignatureAdjuster
.LBB77_625:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$203, %ax
	xorw	%cx, %ax
	cmpw	$-15736, %ax            # imm = 0xC288
	jne	.LBB77_1436
# %bb.626:                              # %BZ2_decompress.split3146
	movl	(%r10), %eax
	movq	-232(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-15736, BasicBlockSignatureTracker # imm = 0xC288
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_689
# %bb.627:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$-15717, %ax            # imm = 0xC29B
	jne	.LBB77_1436
# %bb.628:                              # %BZ2_decompress.split3148
	movw	$-15717, BasicBlockSignatureTracker # imm = 0xC29B
	movw	$0, RunTimeSignatureAdjuster
.LBB77_629:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$41, %ax
	xorw	%cx, %ax
	cmpw	$-15694, %ax            # imm = 0xC2B2
	jne	.LBB77_1436
# %bb.630:                              # %BZ2_decompress.split3152
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-15694, BasicBlockSignatureTracker # imm = 0xC2B2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_633
# %bb.631:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$104, %ax
	cmpw	$-15654, %ax            # imm = 0xC2DA
	jne	.LBB77_1436
# %bb.632:                              # %BZ2_decompress.split3156
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-15654, BasicBlockSignatureTracker # imm = 0xC2DA
	movw	$104, RunTimeSignatureAdjuster
	cmpl	$20, %eax
	jle	.LBB77_635
.LBB77_633:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$423, %ax               # imm = 0x1A7
	xorw	%cx, %ax
	cmpw	$-15595, %ax            # imm = 0xC315
	jne	.LBB77_1436
# %bb.634:                              # %BZ2_decompress.split3154
	movl	$-4, (%r9)
	movw	$-15595, BasicBlockSignatureTracker # imm = 0xC315
	movw	$27187, RunTimeSignatureAdjuster # imm = 0x6A33
	jmp	.LBB77_1369
.LBB77_635:                             # %Buffer__3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29403, %ax             # imm = 0x72DB
	cmpw	$-20479, %ax            # imm = 0xB001
	jne	.LBB77_1436
# %bb.636:                              # %BZ2_decompress.split3158
	movw	$-20479, BasicBlockSignatureTracker # imm = 0xB001
	movw	$29403, RunTimeSignatureAdjuster # imm = 0x72DB
# %bb.637:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$504, %ax               # imm = 0x1F8
	xorw	%cx, %ax
	cmpw	$-15582, %ax            # imm = 0xC322
	jne	.LBB77_1436
# %bb.638:                              # %BZ2_decompress.split3838
	movw	$-15582, BasicBlockSignatureTracker # imm = 0xC322
	movw	$27533, RunTimeSignatureAdjuster # imm = 0x6B8D
.LBB77_639:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27524, %ax             # imm = 0x6B84
	xorw	%cx, %ax
	cmpw	$-15573, %ax            # imm = 0xC32B
	jne	.LBB77_1436
# %bb.640:                              # %BZ2_decompress.split2542
	movq	(%r8), %rax
	movl	$34, 8(%rax)
	movw	$-15573, BasicBlockSignatureTracker # imm = 0xC32B
	movw	$0, RunTimeSignatureAdjuster
.LBB77_641:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$-15558, %ax            # imm = 0xC33A
	jne	.LBB77_1384
# %bb.642:                              # %BZ2_decompress.split3160
                                        #   in Loop: Header=BB77_641 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-15558, BasicBlockSignatureTracker # imm = 0xC33A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_645
# %bb.643:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$104, %ax
	cmpw	$-15534, %ax            # imm = 0xC352
	jne	.LBB77_1436
# %bb.644:                              # %BZ2_decompress.split3162
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-15534, BasicBlockSignatureTracker # imm = 0xC352
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_655
.LBB77_645:                             #   in Loop: Header=BB77_641 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$89, %ax
	cmpw	$-15517, %ax            # imm = 0xC363
	jne	.LBB77_1384
# %bb.646:                              # %BZ2_decompress.split3164
                                        #   in Loop: Header=BB77_641 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-15517, BasicBlockSignatureTracker # imm = 0xC363
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_649
# %bb.647:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-15490, %ax            # imm = 0xC37E
	jne	.LBB77_1436
# %bb.648:                              # %BZ2_decompress.split3168
	movl	$0, (%r9)
	movw	$-15490, BasicBlockSignatureTracker # imm = 0xC37E
	movw	$27224, RunTimeSignatureAdjuster # imm = 0x6A58
	jmp	.LBB77_1369
.LBB77_649:                             #   in Loop: Header=BB77_641 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$204, %ax
	cmpw	$-15441, %ax            # imm = 0xC3AF
	jne	.LBB77_1384
# %bb.650:                              # %BZ2_decompress.split3170
                                        #   in Loop: Header=BB77_641 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-15441, BasicBlockSignatureTracker # imm = 0xC3AF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_653
# %bb.651:                              #   in Loop: Header=BB77_641 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$-15420, %ax            # imm = 0xC3C4
	movq	%rdx, %rax
	jne	.LBB77_1384
# %bb.652:                              # %BZ2_decompress.split3172
                                        #   in Loop: Header=BB77_641 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-15420, BasicBlockSignatureTracker # imm = 0xC3C4
	movw	$107, RunTimeSignatureAdjuster
.LBB77_653:                             #   in Loop: Header=BB77_641 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$98, %ax
	xorw	%cx, %ax
	cmpw	$-15411, %ax            # imm = 0xC3CD
	movq	%rdx, %r8
	jne	.LBB77_1384
# %bb.654:                              # %BZ2_decompress.split3174
                                        #   in Loop: Header=BB77_641 Depth=1
	movw	$-15411, BasicBlockSignatureTracker # imm = 0xC3CD
	movw	$230, RunTimeSignatureAdjuster
	jmp	.LBB77_641
.LBB77_655:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$182, %ax
	cmpw	$-15388, %ax            # imm = 0xC3E4
	jne	.LBB77_1436
# %bb.656:                              # %BZ2_decompress.split3166
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-15388, BasicBlockSignatureTracker # imm = 0xC3E4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_659
# %bb.657:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-15387, %ax            # imm = 0xC3E5
	jne	.LBB77_1436
# %bb.658:                              # %BZ2_decompress.split3176
	movw	$-15387, BasicBlockSignatureTracker # imm = 0xC3E5
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_685
.LBB77_659:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2017, %ax              # imm = 0x7E1
	cmpw	$-15355, %ax            # imm = 0xC405
	jne	.LBB77_1436
# %bb.660:                              # %BZ2_decompress.split3178
	movw	$-15355, BasicBlockSignatureTracker # imm = 0xC405
	movw	$27818, RunTimeSignatureAdjuster # imm = 0x6CAA
.LBB77_661:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27809, %ax             # imm = 0x6CA1
	xorw	%cx, %ax
	cmpw	$-15346, %ax            # imm = 0xC40E
	jne	.LBB77_1436
# %bb.662:                              # %BZ2_decompress.split2544
	movq	(%r8), %rax
	movl	$35, 8(%rax)
	movw	$-15346, BasicBlockSignatureTracker # imm = 0xC40E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_663:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$21, %ax
	xorw	%cx, %ax
	cmpw	$-15333, %ax            # imm = 0xC41B
	jne	.LBB77_1383
# %bb.664:                              # %BZ2_decompress.split3182
                                        #   in Loop: Header=BB77_663 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-15333, BasicBlockSignatureTracker # imm = 0xC41B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_667
# %bb.665:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$-15321, %ax            # imm = 0xC427
	jne	.LBB77_1436
# %bb.666:                              # %BZ2_decompress.split3184
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-456(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-15321, BasicBlockSignatureTracker # imm = 0xC427
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_677
.LBB77_667:                             #   in Loop: Header=BB77_663 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$127, %ax
	cmpw	$-15260, %ax            # imm = 0xC464
	jne	.LBB77_1383
# %bb.668:                              # %BZ2_decompress.split3186
                                        #   in Loop: Header=BB77_663 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-15260, BasicBlockSignatureTracker # imm = 0xC464
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_671
# %bb.669:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-15235, %ax            # imm = 0xC47D
	jne	.LBB77_1436
# %bb.670:                              # %BZ2_decompress.split3190
	movl	$0, (%r9)
	movw	$-15235, BasicBlockSignatureTracker # imm = 0xC47D
	movw	$27995, RunTimeSignatureAdjuster # imm = 0x6D5B
	jmp	.LBB77_1369
.LBB77_671:                             #   in Loop: Header=BB77_663 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$244, %ax
	cmpw	$-15216, %ax            # imm = 0xC490
	jne	.LBB77_1383
# %bb.672:                              # %BZ2_decompress.split3192
                                        #   in Loop: Header=BB77_663 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-15216, BasicBlockSignatureTracker # imm = 0xC490
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_675
# %bb.673:                              #   in Loop: Header=BB77_663 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$-15186, %ax            # imm = 0xC4AE
	movq	%rdx, %rax
	jne	.LBB77_1383
# %bb.674:                              # %BZ2_decompress.split3194
                                        #   in Loop: Header=BB77_663 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-15186, BasicBlockSignatureTracker # imm = 0xC4AE
	movw	$62, RunTimeSignatureAdjuster
.LBB77_675:                             #   in Loop: Header=BB77_663 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$-15177, %ax            # imm = 0xC4B7
	movq	%rdx, %r8
	jne	.LBB77_1383
# %bb.676:                              # %BZ2_decompress.split3196
                                        #   in Loop: Header=BB77_663 Depth=1
	movw	$-15177, BasicBlockSignatureTracker # imm = 0xC4B7
	movw	$185, RunTimeSignatureAdjuster
	jmp	.LBB77_663
.LBB77_677:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$229, %ax
	cmpw	$-15166, %ax            # imm = 0xC4C2
	jne	.LBB77_1436
# %bb.678:                              # %BZ2_decompress.split3188
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-15166, BasicBlockSignatureTracker # imm = 0xC4C2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_681
# %bb.679:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$-15159, %ax            # imm = 0xC4C9
	jne	.LBB77_1436
# %bb.680:                              # %BZ2_decompress.split3198
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-15159, BasicBlockSignatureTracker # imm = 0xC4C9
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_683
.LBB77_681:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-15146, %ax            # imm = 0xC4D6
	jne	.LBB77_1436
# %bb.682:                              # %BZ2_decompress.split3200
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-15146, BasicBlockSignatureTracker # imm = 0xC4D6
	movw	$31, RunTimeSignatureAdjuster
.LBB77_683:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$-15143, %ax            # imm = 0xC4D9
	jne	.LBB77_1436
# %bb.684:                              # %BZ2_decompress.split3202
	movw	$-15143, BasicBlockSignatureTracker # imm = 0xC4D9
	movw	$1602, RunTimeSignatureAdjuster # imm = 0x642
	jmp	.LBB77_629
.LBB77_685:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1777, %ax              # imm = 0x6F1
	cmpw	$-15084, %ax            # imm = 0xC514
	movq	%r8, %rcx
	movq	%r10, %rsi
	jne	.LBB77_1436
# %bb.686:                              # %BZ2_decompress.split3180
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%rcx), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	(%rsi), %rdx
	movb	%al, (%rcx,%rdx)
	movw	$-15084, BasicBlockSignatureTracker # imm = 0xC514
	movw	$0, RunTimeSignatureAdjuster
# %bb.687:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$-15041, %ax            # imm = 0xC53F
	jne	.LBB77_1436
# %bb.688:                              # %BZ2_decompress.split3204
	movl	(%r10), %eax
	addl	$1, %eax
	movl	%eax, (%r10)
	movw	$-15041, BasicBlockSignatureTracker # imm = 0xC53F
	movw	$1916, RunTimeSignatureAdjuster # imm = 0x77C
	jmp	.LBB77_625
.LBB77_689:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1996, %ax              # imm = 0x7CC
	cmpw	$-15036, %ax            # imm = 0xC544
	jne	.LBB77_1436
# %bb.690:                              # %BZ2_decompress.split3150
	movw	$-15036, BasicBlockSignatureTracker # imm = 0xC544
	movw	$0, RunTimeSignatureAdjuster
# %bb.691:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-15024, %ax            # imm = 0xC550
	jne	.LBB77_1436
# %bb.692:                              # %BZ2_decompress.split3206
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-15024, BasicBlockSignatureTracker # imm = 0xC550
	movw	$1128, RunTimeSignatureAdjuster # imm = 0x468
	jmp	.LBB77_603
.LBB77_693:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1112, %ax              # imm = 0x458
	cmpw	$-15004, %ax            # imm = 0xC564
	jne	.LBB77_1436
# %bb.694:                              # %BZ2_decompress.split3128
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movw	$-15004, BasicBlockSignatureTracker # imm = 0xC564
	movw	$0, RunTimeSignatureAdjuster
.LBB77_695:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_699 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$230, %ax
	xorw	%cx, %ax
	cmpw	$-14974, %ax            # imm = 0xC582
	jne	.LBB77_1411
# %bb.696:                              # %BZ2_decompress.split3208
                                        #   in Loop: Header=BB77_695 Depth=1
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-14974, BasicBlockSignatureTracker # imm = 0xC582
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_717
# %bb.697:                              #   in Loop: Header=BB77_695 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-14933, %ax            # imm = 0xC5AB
	jne	.LBB77_1411
# %bb.698:                              # %BZ2_decompress.split3210
                                        #   in Loop: Header=BB77_695 Depth=1
	movq	%r11, -336(%rbp)        # 8-byte Spill
	movq	%r9, -240(%rbp)         # 8-byte Spill
	movq	%r8, %r14
	movq	-312(%rbp), %rax        # 8-byte Reload
	movl	$32, (%rax)
	movq	-320(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movq	%r10, %r12
	movl	$0, (%r10)
	movw	$-14933, BasicBlockSignatureTracker # imm = 0xC5AB
	movw	$0, RunTimeSignatureAdjuster
.LBB77_699:                             #   Parent Loop BB77_695 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$103, %ax
	xorw	%cx, %ax
	cmpw	$-14900, %ax            # imm = 0xC5CC
	jne	.LBB77_1410
# %bb.700:                              # %BZ2_decompress.split3214
                                        #   in Loop: Header=BB77_699 Depth=2
	movl	(%r12), %eax
	movq	-232(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-14900, BasicBlockSignatureTracker # imm = 0xC5CC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_713
# %bb.701:                              #   in Loop: Header=BB77_699 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$46, %ax
	cmpw	$-14878, %ax            # imm = 0xC5E2
	jne	.LBB77_1410
# %bb.702:                              # %BZ2_decompress.split3216
                                        #   in Loop: Header=BB77_699 Depth=2
	movq	(%r14), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r12), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-320(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-14878, BasicBlockSignatureTracker # imm = 0xC5E2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB77_705
# %bb.703:                              #   in Loop: Header=BB77_699 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$-14868, %ax            # imm = 0xC5EC
	jne	.LBB77_1410
# %bb.704:                              # %BZ2_decompress.split3220
                                        #   in Loop: Header=BB77_699 Depth=2
	movq	(%r14), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r12), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-320(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-14868, BasicBlockSignatureTracker # imm = 0xC5EC
	movw	$14, RunTimeSignatureAdjuster
.LBB77_705:                             #   in Loop: Header=BB77_699 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$24, %ax
	xorw	%cx, %ax
	cmpw	$-14854, %ax            # imm = 0xC5FA
	jne	.LBB77_1410
# %bb.706:                              # %BZ2_decompress.split3222
                                        #   in Loop: Header=BB77_699 Depth=2
	movq	(%r14), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r12), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-312(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-14854, BasicBlockSignatureTracker # imm = 0xC5FA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_709
# %bb.707:                              #   in Loop: Header=BB77_699 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-14851, %ax            # imm = 0xC5FD
	jne	.LBB77_1410
# %bb.708:                              # %BZ2_decompress.split3224
                                        #   in Loop: Header=BB77_699 Depth=2
	movq	(%r14), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	(%r12), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-312(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-14851, BasicBlockSignatureTracker # imm = 0xC5FD
	movw	$7, RunTimeSignatureAdjuster
.LBB77_709:                             #   in Loop: Header=BB77_699 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$957, %ax               # imm = 0x3BD
	xorw	%cx, %ax
	cmpw	$-14777, %ax            # imm = 0xC647
	jne	.LBB77_1410
# %bb.710:                              # %BZ2_decompress.split3226
                                        #   in Loop: Header=BB77_699 Depth=2
	movw	$-14777, BasicBlockSignatureTracker # imm = 0xC647
	movw	$0, RunTimeSignatureAdjuster
# %bb.711:                              #   in Loop: Header=BB77_699 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$-14764, %ax            # imm = 0xC654
	jne	.LBB77_1410
# %bb.712:                              # %BZ2_decompress.split3228
                                        #   in Loop: Header=BB77_699 Depth=2
	movq	%r12, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-14764, BasicBlockSignatureTracker # imm = 0xC654
	movw	$1023, RunTimeSignatureAdjuster # imm = 0x3FF
	jmp	.LBB77_699
.LBB77_713:                             #   in Loop: Header=BB77_695 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$946, %ax               # imm = 0x3B2
	cmpw	$-14722, %ax            # imm = 0xC67E
	movq	%r14, %rbx
	jne	.LBB77_1411
# %bb.714:                              # %BZ2_decompress.split3218
                                        #   in Loop: Header=BB77_695 Depth=1
	movq	(%rbx), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movq	-96(%rbp), %r13         # 8-byte Reload
	movslq	(%r13), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	(%rbx), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	(%r13), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	(%rbx), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	(%r13), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	(%rbx), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	(%r13), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movq	-312(%rbp), %r15        # 8-byte Reload
	movl	(%r15), %r8d
	movq	-320(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r9d
	movq	-232(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-14722, BasicBlockSignatureTracker # imm = 0xC67E
	movw	$0, RunTimeSignatureAdjuster
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	addq	$16, %rsp
	movw	$-14722, BasicBlockSignatureTracker # imm = 0xC67E
	movw	$0, RunTimeSignatureAdjuster
	movl	(%r15), %eax
	movq	(%rbx), %rcx
	movslq	(%r13), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
	movw	$-14722, BasicBlockSignatureTracker # imm = 0xC67E
	movw	$0, RunTimeSignatureAdjuster
# %bb.715:                              #   in Loop: Header=BB77_695 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$190, %ax
	cmpw	$-14656, %ax            # imm = 0xC6C0
	movq	%r14, %r8
	movq	-240(%rbp), %r9         # 8-byte Reload
	movq	%r12, %r10
	movq	-336(%rbp), %r11        # 8-byte Reload
	jne	.LBB77_1411
# %bb.716:                              # %BZ2_decompress.split3230
                                        #   in Loop: Header=BB77_695 Depth=1
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-14656, BasicBlockSignatureTracker # imm = 0xC6C0
	movw	$932, RunTimeSignatureAdjuster # imm = 0x3A4
	jmp	.LBB77_695
.LBB77_717:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$862, %ax               # imm = 0x35E
	cmpw	$-14628, %ax            # imm = 0xC6DC
	jne	.LBB77_1436
# %bb.718:                              # %BZ2_decompress.split3212
	movq	(%r8), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movq	-328(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	%r8, %rsi
	movq	(%r8), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	$-1, (%rax)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movq	%r10, %rdi
	movl	$0, (%r10)
	movw	$-14628, BasicBlockSignatureTracker # imm = 0xC6DC
	movw	$0, RunTimeSignatureAdjuster
.LBB77_719:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$60, %ax
	xorw	%cx, %ax
	cmpw	$-14624, %ax            # imm = 0xC6E0
	jne	.LBB77_1409
# %bb.720:                              # %BZ2_decompress.split3232
                                        #   in Loop: Header=BB77_719 Depth=1
	movl	(%rdi), %eax
	movw	$-14624, BasicBlockSignatureTracker # imm = 0xC6E0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$255, %eax
	jg	.LBB77_725
# %bb.721:                              #   in Loop: Header=BB77_719 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2, %ax
	cmpw	$-14622, %ax            # imm = 0xC6E2
	jne	.LBB77_1409
# %bb.722:                              # %BZ2_decompress.split3234
                                        #   in Loop: Header=BB77_719 Depth=1
	movq	(%rsi), %rax
	movslq	(%rdi), %rcx
	movl	$0, 68(%rax,%rcx,4)
	movw	$-14622, BasicBlockSignatureTracker # imm = 0xC6E2
	movw	$0, RunTimeSignatureAdjuster
# %bb.723:                              #   in Loop: Header=BB77_719 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-14609, %ax            # imm = 0xC6EF
	jne	.LBB77_1409
# %bb.724:                              # %BZ2_decompress.split3238
                                        #   in Loop: Header=BB77_719 Depth=1
	movq	%rdi, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-14609, BasicBlockSignatureTracker # imm = 0xC6EF
	movw	$51, RunTimeSignatureAdjuster
	jmp	.LBB77_719
.LBB77_725:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$495, %ax               # imm = 0x1EF
	cmpw	$-14577, %ax            # imm = 0xC70F
	jne	.LBB77_1436
# %bb.726:                              # %BZ2_decompress.split3236
	movq	-352(%rbp), %rax        # 8-byte Reload
	movl	$4095, (%rax)           # imm = 0xFFF
	movq	-272(%rbp), %rax        # 8-byte Reload
	movl	$15, (%rax)
	movw	$-14577, BasicBlockSignatureTracker # imm = 0xC70F
	movw	$0, RunTimeSignatureAdjuster
.LBB77_727:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_731 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$69, %ax
	xorw	%cx, %ax
	cmpw	$-14518, %ax            # imm = 0xC74A
	jne	.LBB77_1408
# %bb.728:                              # %BZ2_decompress.split3240
                                        #   in Loop: Header=BB77_727 Depth=1
	movq	-272(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-14518, BasicBlockSignatureTracker # imm = 0xC74A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_741
# %bb.729:                              #   in Loop: Header=BB77_727 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$-14494, %ax            # imm = 0xC762
	jne	.LBB77_1408
# %bb.730:                              # %BZ2_decompress.split3242
                                        #   in Loop: Header=BB77_727 Depth=1
	movq	-296(%rbp), %rax        # 8-byte Reload
	movl	$15, (%rax)
	movw	$-14494, BasicBlockSignatureTracker # imm = 0xC762
	movw	$0, RunTimeSignatureAdjuster
.LBB77_731:                             #   Parent Loop BB77_727 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$13, %ax
	xorw	%cx, %ax
	cmpw	$-14481, %ax            # imm = 0xC76F
	jne	.LBB77_1407
# %bb.732:                              # %BZ2_decompress.split3246
                                        #   in Loop: Header=BB77_731 Depth=2
	movq	-296(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-14481, BasicBlockSignatureTracker # imm = 0xC76F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_737
# %bb.733:                              #   in Loop: Header=BB77_731 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-14473, %ax            # imm = 0xC777
	jne	.LBB77_1407
# %bb.734:                              # %BZ2_decompress.split3248
                                        #   in Loop: Header=BB77_731 Depth=2
	movq	-272(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	shll	$4, %eax
	movq	-296(%rbp), %rcx        # 8-byte Reload
	addl	(%rcx), %eax
	movq	(%rsi), %rcx
	movq	-352(%rbp), %rbx        # 8-byte Reload
	movslq	(%rbx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	(%rbx), %eax
	addl	$-1, %eax
	movl	%eax, (%rbx)
	movw	$-14473, BasicBlockSignatureTracker # imm = 0xC777
	movw	$0, RunTimeSignatureAdjuster
# %bb.735:                              #   in Loop: Header=BB77_731 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$227, %ax
	cmpw	$-14444, %ax            # imm = 0xC794
	jne	.LBB77_1407
# %bb.736:                              # %BZ2_decompress.split3252
                                        #   in Loop: Header=BB77_731 Depth=2
	movq	-296(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-14444, BasicBlockSignatureTracker # imm = 0xC794
	movw	$246, RunTimeSignatureAdjuster
	jmp	.LBB77_731
.LBB77_737:                             #   in Loop: Header=BB77_727 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$250, %ax
	cmpw	$-14443, %ax            # imm = 0xC795
	jne	.LBB77_1408
# %bb.738:                              # %BZ2_decompress.split3250
                                        #   in Loop: Header=BB77_727 Depth=1
	movq	-352(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	addl	$1, %eax
	movq	(%rsi), %rcx
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
	movw	$-14443, BasicBlockSignatureTracker # imm = 0xC795
	movw	$0, RunTimeSignatureAdjuster
# %bb.739:                              #   in Loop: Header=BB77_727 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$-14434, %ax            # imm = 0xC79E
	jne	.LBB77_1408
# %bb.740:                              # %BZ2_decompress.split3254
                                        #   in Loop: Header=BB77_727 Depth=1
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-14434, BasicBlockSignatureTracker # imm = 0xC79E
	movw	$145, RunTimeSignatureAdjuster
	jmp	.LBB77_727
.LBB77_741:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$226, %ax
	cmpw	$-14424, %ax            # imm = 0xC7A8
	jne	.LBB77_1436
# %bb.742:                              # %BZ2_decompress.split3244
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-14424, BasicBlockSignatureTracker # imm = 0xC7A8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_749
# %bb.743:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-14402, %ax            # imm = 0xC7BE
	jne	.LBB77_1436
# %bb.744:                              # %BZ2_decompress.split3256
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-14402, BasicBlockSignatureTracker # imm = 0xC7BE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_747
# %bb.745:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3990, %ax              # imm = 0xF96
	cmpw	$-14296, %ax            # imm = 0xC828
	movq	%rsi, %r8
	movq	%rdi, %r10
	jne	.LBB77_1436
# %bb.746:                              # %BZ2_decompress.split3260
	movl	$-4, (%r9)
	movw	$-14296, BasicBlockSignatureTracker # imm = 0xC828
	movw	$24846, RunTimeSignatureAdjuster # imm = 0x610E
	jmp	.LBB77_1369
.LBB77_747:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3983, %ax              # imm = 0xF8F
	cmpw	$-14287, %ax            # imm = 0xC831
	movq	%rsi, %rdx
	jne	.LBB77_1436
# %bb.748:                              # %BZ2_decompress.split3262
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$50, (%rax)
	movq	(%rdx), %rax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movl	%eax, (%rbx)
	movq	(%rdx), %rax
	movslq	(%rbx), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rdx), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	(%rbx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rdx), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	(%rbx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rdx), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	(%rbx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movw	$-14287, BasicBlockSignatureTracker # imm = 0xC831
	movw	$3993, RunTimeSignatureAdjuster # imm = 0xF99
.LBB77_749:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3996, %ax              # imm = 0xF9C
	xorw	%cx, %ax
	cmpw	$-14284, %ax            # imm = 0xC834
	movq	%rsi, %r8
	movq	%rdi, %r10
	jne	.LBB77_1436
# %bb.750:                              # %BZ2_decompress.split3258
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-14284, BasicBlockSignatureTracker # imm = 0xC834
	movw	$24731, RunTimeSignatureAdjuster # imm = 0x609B
.LBB77_751:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$24721, %ax             # imm = 0x6091
	xorw	%cx, %ax
	cmpw	$-14274, %ax            # imm = 0xC83E
	jne	.LBB77_1436
# %bb.752:                              # %BZ2_decompress.split2546
	movq	(%r8), %rax
	movl	$36, 8(%rax)
	movw	$-14274, BasicBlockSignatureTracker # imm = 0xC83E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_753:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$94, %ax
	xorw	%cx, %ax
	cmpw	$-14240, %ax            # imm = 0xC860
	jne	.LBB77_1406
# %bb.754:                              # %BZ2_decompress.split3264
                                        #   in Loop: Header=BB77_753 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-14240, BasicBlockSignatureTracker # imm = 0xC860
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_757
# %bb.755:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-14235, %ax            # imm = 0xC865
	jne	.LBB77_1436
# %bb.756:                              # %BZ2_decompress.split3266
	movl	$1, %eax
	movq	(%r8), %rcx
	movl	32(%rcx), %edx
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	subl	(%rsi), %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	movl	(%rsi), %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	subl	$1, %eax
	andl	%eax, %edx
	movq	-488(%rbp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	(%rsi), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	(%rdi), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-14235, BasicBlockSignatureTracker # imm = 0xC865
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_767
.LBB77_757:                             #   in Loop: Header=BB77_753 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-14224, %ax            # imm = 0xC870
	jne	.LBB77_1406
# %bb.758:                              # %BZ2_decompress.split3268
                                        #   in Loop: Header=BB77_753 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-14224, BasicBlockSignatureTracker # imm = 0xC870
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_761
# %bb.759:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-14211, %ax            # imm = 0xC87D
	jne	.LBB77_1436
# %bb.760:                              # %BZ2_decompress.split3272
	movl	$0, (%r9)
	movw	$-14211, BasicBlockSignatureTracker # imm = 0xC87D
	movw	$24923, RunTimeSignatureAdjuster # imm = 0x615B
	jmp	.LBB77_1369
.LBB77_761:                             #   in Loop: Header=BB77_753 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$224, %ax
	cmpw	$-14192, %ax            # imm = 0xC890
	jne	.LBB77_1406
# %bb.762:                              # %BZ2_decompress.split3274
                                        #   in Loop: Header=BB77_753 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-14192, BasicBlockSignatureTracker # imm = 0xC890
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_765
# %bb.763:                              #   in Loop: Header=BB77_753 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-14165, %ax            # imm = 0xC8AB
	movq	%rdx, %rax
	jne	.LBB77_1406
# %bb.764:                              # %BZ2_decompress.split3276
                                        #   in Loop: Header=BB77_753 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-14165, BasicBlockSignatureTracker # imm = 0xC8AB
	movw	$59, RunTimeSignatureAdjuster
.LBB77_765:                             #   in Loop: Header=BB77_753 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$-14161, %ax            # imm = 0xC8AF
	movq	%rdx, %r8
	jne	.LBB77_1406
# %bb.766:                              # %BZ2_decompress.split3278
                                        #   in Loop: Header=BB77_753 Depth=1
	movw	$-14161, BasicBlockSignatureTracker # imm = 0xC8AF
	movw	$145, RunTimeSignatureAdjuster
	jmp	.LBB77_753
.LBB77_767:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$223, %ax
	cmpw	$-14150, %ax            # imm = 0xC8BA
	jne	.LBB77_1436
# %bb.768:                              # %BZ2_decompress.split3270
	movw	$-14150, BasicBlockSignatureTracker # imm = 0xC8BA
	movw	$0, RunTimeSignatureAdjuster
.LBB77_769:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$118, %ax
	xorw	%cx, %ax
	cmpw	$-14132, %ax            # imm = 0xC8CC
	jne	.LBB77_1436
# %bb.770:                              # %BZ2_decompress.split3280
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-14132, BasicBlockSignatureTracker # imm = 0xC8CC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$20, %eax
	jle	.LBB77_773
# %bb.771:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-14122, %ax            # imm = 0xC8D6
	jne	.LBB77_1436
# %bb.772:                              # %BZ2_decompress.split3282
	movl	$-4, (%r9)
	movw	$-14122, BasicBlockSignatureTracker # imm = 0xC8D6
	movw	$25072, RunTimeSignatureAdjuster # imm = 0x61F0
	jmp	.LBB77_1369
.LBB77_773:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-14120, %ax            # imm = 0xC8D8
	jne	.LBB77_1436
# %bb.774:                              # %BZ2_decompress.split3284
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movw	$-14120, BasicBlockSignatureTracker # imm = 0xC8D8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB77_777
# %bb.775:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-14087, %ax            # imm = 0xC8F9
	jne	.LBB77_1436
# %bb.776:                              # %BZ2_decompress.split3286
	movq	%r10, %r11
	movq	%r9, %rbx
	movq	%r8, %rdi
	movw	$-14087, BasicBlockSignatureTracker # imm = 0xC8F9
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_797
.LBB77_777:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$-14081, %ax            # imm = 0xC8FF
	jne	.LBB77_1436
# %bb.778:                              # %BZ2_decompress.split3288
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-14081, BasicBlockSignatureTracker # imm = 0xC8FF
	movw	$24656, RunTimeSignatureAdjuster # imm = 0x6050
.LBB77_779:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25000, %ax             # imm = 0x61A8
	xorw	%cx, %ax
	cmpw	$-14073, %ax            # imm = 0xC907
	jne	.LBB77_1436
# %bb.780:                              # %BZ2_decompress.split2548
	movq	(%r8), %rax
	movl	$37, 8(%rax)
	movw	$-14073, BasicBlockSignatureTracker # imm = 0xC907
	movw	$0, RunTimeSignatureAdjuster
.LBB77_781:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27, %ax
	xorw	%cx, %ax
	cmpw	$-14052, %ax            # imm = 0xC91C
	jne	.LBB77_1405
# %bb.782:                              # %BZ2_decompress.split3292
                                        #   in Loop: Header=BB77_781 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-14052, BasicBlockSignatureTracker # imm = 0xC91C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_785
# %bb.783:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$-14021, %ax            # imm = 0xC93B
	jne	.LBB77_1436
# %bb.784:                              # %BZ2_decompress.split3294
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, (%r11)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%r11), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-14021, BasicBlockSignatureTracker # imm = 0xC93B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_795
.LBB77_785:                             #   in Loop: Header=BB77_781 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$83, %ax
	cmpw	$-14001, %ax            # imm = 0xC94F
	jne	.LBB77_1405
# %bb.786:                              # %BZ2_decompress.split3296
                                        #   in Loop: Header=BB77_781 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-14001, BasicBlockSignatureTracker # imm = 0xC94F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_789
# %bb.787:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-13986, %ax            # imm = 0xC95E
	jne	.LBB77_1436
# %bb.788:                              # %BZ2_decompress.split3300
	movl	$0, (%r9)
	movw	$-13986, BasicBlockSignatureTracker # imm = 0xC95E
	movw	$24696, RunTimeSignatureAdjuster # imm = 0x6078
	jmp	.LBB77_1369
.LBB77_789:                             #   in Loop: Header=BB77_781 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$32, %ax
	cmpw	$-13969, %ax            # imm = 0xC96F
	jne	.LBB77_1405
# %bb.790:                              # %BZ2_decompress.split3302
                                        #   in Loop: Header=BB77_781 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-13969, BasicBlockSignatureTracker # imm = 0xC96F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_793
# %bb.791:                              #   in Loop: Header=BB77_781 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$-13967, %ax            # imm = 0xC971
	movq	%rdx, %rax
	jne	.LBB77_1405
# %bb.792:                              # %BZ2_decompress.split3304
                                        #   in Loop: Header=BB77_781 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-13967, BasicBlockSignatureTracker # imm = 0xC971
	movw	$30, RunTimeSignatureAdjuster
.LBB77_793:                             #   in Loop: Header=BB77_781 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$27, %ax
	xorw	%cx, %ax
	cmpw	$-13964, %ax            # imm = 0xC974
	movq	%rdx, %r8
	jne	.LBB77_1405
# %bb.794:                              # %BZ2_decompress.split3306
                                        #   in Loop: Header=BB77_781 Depth=1
	movw	$-13964, BasicBlockSignatureTracker # imm = 0xC974
	movw	$115, RunTimeSignatureAdjuster
	jmp	.LBB77_781
.LBB77_795:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$76, %ax
	cmpw	$-13961, %ax            # imm = 0xC977
	jne	.LBB77_1436
# %bb.796:                              # %BZ2_decompress.split3298
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	shll	$1, %eax
	movq	-168(%rbp), %rdx        # 8-byte Reload
	orl	(%rdx), %eax
	movl	%eax, (%rcx)
	movw	$-13961, BasicBlockSignatureTracker # imm = 0xC977
	movw	$461, RunTimeSignatureAdjuster # imm = 0x1CD
	jmp	.LBB77_769
.LBB77_797:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$366, %ax               # imm = 0x16E
	cmpw	$-13929, %ax            # imm = 0xC997
	jne	.LBB77_1436
# %bb.798:                              # %BZ2_decompress.split3290
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	subl	(%rcx,%rdx,4), %eax
	movw	$-13929, BasicBlockSignatureTracker # imm = 0xC997
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_801
# %bb.799:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$-13905, %ax            # imm = 0xC9AF
	jne	.LBB77_1436
# %bb.800:                              # %BZ2_decompress.split3310
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	subl	(%rcx,%rdx,4), %eax
	movw	$-13905, BasicBlockSignatureTracker # imm = 0xC9AF
	movw	$56, RunTimeSignatureAdjuster
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB77_803
.LBB77_801:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$35, %ax
	xorw	%cx, %ax
	cmpw	$-13900, %ax            # imm = 0xC9B4
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.802:                              # %BZ2_decompress.split3308
	movl	$-4, (%r9)
	movw	$-13900, BasicBlockSignatureTracker # imm = 0xC9B4
	movw	$24722, RunTimeSignatureAdjuster # imm = 0x6092
	jmp	.LBB77_1369
.LBB77_803:                             # %Buffer__4
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7843, %ax              # imm = 0x1EA3
	cmpw	$-10484, %ax            # imm = 0xD70C
	jne	.LBB77_1436
# %bb.804:                              # %BZ2_decompress.split3312
	movw	$-10484, BasicBlockSignatureTracker # imm = 0xD70C
	movw	$7843, RunTimeSignatureAdjuster # imm = 0x1EA3
# %bb.805:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26, %ax
	xorw	%cx, %ax
	cmpw	$-13899, %ax            # imm = 0xC9B5
	jne	.LBB77_1436
# %bb.806:                              # %BZ2_decompress.split3840
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-13899, BasicBlockSignatureTracker # imm = 0xC9B5
	movw	$0, RunTimeSignatureAdjuster
.LBB77_807:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$956, %ax               # imm = 0x3BC
	xorw	%cx, %ax
	cmpw	$-13815, %ax            # imm = 0xCA09
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.808:                              # %BZ2_decompress.split3314
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-328(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-13815, BasicBlockSignatureTracker # imm = 0xCA09
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB77_811
# %bb.809:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3, %ax
	cmpw	$-13814, %ax            # imm = 0xCA0A
	jne	.LBB77_1436
# %bb.810:                              # %BZ2_decompress.split3316
	movw	$-13814, BasicBlockSignatureTracker # imm = 0xCA0A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1057
.LBB77_811:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-13807, %ax            # imm = 0xCA11
	jne	.LBB77_1436
# %bb.812:                              # %BZ2_decompress.split3318
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-13807, BasicBlockSignatureTracker # imm = 0xCA11
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	je	.LBB77_815
# %bb.813:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$-13789, %ax            # imm = 0xCA23
	jne	.LBB77_1436
# %bb.814:                              # %BZ2_decompress.split3324
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-13789, BasicBlockSignatureTracker # imm = 0xCA23
	movw	$50, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB77_929
.LBB77_815:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$88, %ax
	xorw	%cx, %ax
	cmpw	$-13751, %ax            # imm = 0xCA49
	jne	.LBB77_1436
# %bb.816:                              # %BZ2_decompress.split3322
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	$-1, (%rax)
	movq	-224(%rbp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	movw	$-13751, BasicBlockSignatureTracker # imm = 0xCA49
	movw	$0, RunTimeSignatureAdjuster
.LBB77_817:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3, %ax
	xorw	%cx, %ax
	cmpw	$-13750, %ax            # imm = 0xCA4A
	jne	.LBB77_1436
# %bb.818:                              # %BZ2_decompress.split3328
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-13750, BasicBlockSignatureTracker # imm = 0xCA4A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_821
# %bb.819:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-13741, %ax            # imm = 0xCA53
	jne	.LBB77_1436
# %bb.820:                              # %BZ2_decompress.split3330
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %eax
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, (%rdx)
	movw	$-13741, BasicBlockSignatureTracker # imm = 0xCA53
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_827
.LBB77_821:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-13703, %ax            # imm = 0xCA79
	jne	.LBB77_1436
# %bb.822:                              # %BZ2_decompress.split3332
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-13703, BasicBlockSignatureTracker # imm = 0xCA79
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jne	.LBB77_825
# %bb.823:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$246, %ax
	cmpw	$-13681, %ax            # imm = 0xCA8F
	jne	.LBB77_1436
# %bb.824:                              # %BZ2_decompress.split3336
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movl	(%rdx), %eax
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, (%rdx)
	movw	$-13681, BasicBlockSignatureTracker # imm = 0xCA8F
	movw	$246, RunTimeSignatureAdjuster
.LBB77_825:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$233, %ax
	xorw	%cx, %ax
	cmpw	$-13680, %ax            # imm = 0xCA90
	jne	.LBB77_1436
# %bb.826:                              # %BZ2_decompress.split3338
	movw	$-13680, BasicBlockSignatureTracker # imm = 0xCA90
	movw	$195, RunTimeSignatureAdjuster
.LBB77_827:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$185, %ax
	xorw	%cx, %ax
	cmpw	$-13590, %ax            # imm = 0xCAEA
	jne	.LBB77_1436
# %bb.828:                              # %BZ2_decompress.split3334
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	shll	$1, %eax
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-13590, BasicBlockSignatureTracker # imm = 0xCAEA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_835
# %bb.829:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-13584, %ax            # imm = 0xCAF0
	jne	.LBB77_1436
# %bb.830:                              # %BZ2_decompress.split3340
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-13584, BasicBlockSignatureTracker # imm = 0xCAF0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_833
# %bb.831:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$497, %ax               # imm = 0x1F1
	cmpw	$-13567, %ax            # imm = 0xCB01
	jne	.LBB77_1436
# %bb.832:                              # %BZ2_decompress.split3344
	movl	$-4, (%r9)
	movw	$-13567, BasicBlockSignatureTracker # imm = 0xCB01
	movw	$25127, RunTimeSignatureAdjuster # imm = 0x6227
	jmp	.LBB77_1369
.LBB77_833:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$502, %ax               # imm = 0x1F6
	cmpw	$-13562, %ax            # imm = 0xCB06
	jne	.LBB77_1436
# %bb.834:                              # %BZ2_decompress.split3346
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$50, (%rax)
	movq	(%r8), %rax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movslq	(%rdx), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%r8), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	(%rdx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%r8), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	(%rdx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%r8), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	(%rdx), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movw	$-13562, BasicBlockSignatureTracker # imm = 0xCB06
	movw	$492, RunTimeSignatureAdjuster # imm = 0x1EC
.LBB77_835:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$448, %ax               # imm = 0x1C0
	xorw	%cx, %ax
	cmpw	$-13526, %ax            # imm = 0xCB2A
	jne	.LBB77_1436
# %bb.836:                              # %BZ2_decompress.split3342
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-13526, BasicBlockSignatureTracker # imm = 0xCB2A
	movw	$25477, RunTimeSignatureAdjuster # imm = 0x6385
.LBB77_837:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25490, %ax             # imm = 0x6392
	xorw	%cx, %ax
	cmpw	$-13507, %ax            # imm = 0xCB3D
	jne	.LBB77_1436
# %bb.838:                              # %BZ2_decompress.split2550
	movq	(%r8), %rax
	movl	$38, 8(%rax)
	movw	$-13507, BasicBlockSignatureTracker # imm = 0xCB3D
	movw	$0, RunTimeSignatureAdjuster
.LBB77_839:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$109, %ax
	xorw	%cx, %ax
	cmpw	$-13488, %ax            # imm = 0xCB50
	jne	.LBB77_1396
# %bb.840:                              # %BZ2_decompress.split3348
                                        #   in Loop: Header=BB77_839 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-13488, BasicBlockSignatureTracker # imm = 0xCB50
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_843
# %bb.841:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$220, %ax
	cmpw	$-13428, %ax            # imm = 0xCB8C
	jne	.LBB77_1436
# %bb.842:                              # %BZ2_decompress.split3350
	movl	$1, %eax
	movq	(%r8), %rcx
	movl	32(%rcx), %edx
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	subl	(%rsi), %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	movl	(%rsi), %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	subl	$1, %eax
	andl	%eax, %edx
	movq	-448(%rbp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	(%rsi), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	(%rdi), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-13428, BasicBlockSignatureTracker # imm = 0xCB8C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_853
.LBB77_843:                             #   in Loop: Header=BB77_839 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$201, %ax
	cmpw	$-13415, %ax            # imm = 0xCB99
	jne	.LBB77_1396
# %bb.844:                              # %BZ2_decompress.split3352
                                        #   in Loop: Header=BB77_839 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-13415, BasicBlockSignatureTracker # imm = 0xCB99
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_847
# %bb.845:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$-13407, %ax            # imm = 0xCBA1
	jne	.LBB77_1436
# %bb.846:                              # %BZ2_decompress.split3356
	movl	$0, (%r9)
	movw	$-13407, BasicBlockSignatureTracker # imm = 0xCBA1
	movw	$25223, RunTimeSignatureAdjuster # imm = 0x6287
	jmp	.LBB77_1369
.LBB77_847:                             #   in Loop: Header=BB77_839 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$-13396, %ax            # imm = 0xCBAC
	jne	.LBB77_1396
# %bb.848:                              # %BZ2_decompress.split3358
                                        #   in Loop: Header=BB77_839 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-13396, BasicBlockSignatureTracker # imm = 0xCBAC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_851
# %bb.849:                              #   in Loop: Header=BB77_839 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$126, %ax
	cmpw	$-13358, %ax            # imm = 0xCBD2
	movq	%rdx, %rax
	jne	.LBB77_1396
# %bb.850:                              # %BZ2_decompress.split3360
                                        #   in Loop: Header=BB77_839 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-13358, BasicBlockSignatureTracker # imm = 0xCBD2
	movw	$126, RunTimeSignatureAdjuster
.LBB77_851:                             #   in Loop: Header=BB77_839 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$65, %ax
	xorw	%cx, %ax
	cmpw	$-13331, %ax            # imm = 0xCBED
	movq	%rdx, %r8
	jne	.LBB77_1396
# %bb.852:                              # %BZ2_decompress.split3362
                                        #   in Loop: Header=BB77_839 Depth=1
	movw	$-13331, BasicBlockSignatureTracker # imm = 0xCBED
	movw	$208, RunTimeSignatureAdjuster
	jmp	.LBB77_839
.LBB77_853:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1942, %ax              # imm = 0x796
	cmpw	$-13286, %ax            # imm = 0xCC1A
	jne	.LBB77_1436
# %bb.854:                              # %BZ2_decompress.split3354
	movw	$-13286, BasicBlockSignatureTracker # imm = 0xCC1A
	movw	$0, RunTimeSignatureAdjuster
.LBB77_855:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$55, %ax
	xorw	%cx, %ax
	cmpw	$-13267, %ax            # imm = 0xCC2D
	jne	.LBB77_1436
# %bb.856:                              # %BZ2_decompress.split3364
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-13267, BasicBlockSignatureTracker # imm = 0xCC2D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$20, %eax
	jle	.LBB77_859
# %bb.857:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$30, %ax
	cmpw	$-13261, %ax            # imm = 0xCC33
	jne	.LBB77_1436
# %bb.858:                              # %BZ2_decompress.split3366
	movl	$-4, (%r9)
	movw	$-13261, BasicBlockSignatureTracker # imm = 0xCC33
	movw	$25877, RunTimeSignatureAdjuster # imm = 0x6515
	jmp	.LBB77_1369
.LBB77_859:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$108, %ax
	cmpw	$-13247, %ax            # imm = 0xCC41
	jne	.LBB77_1436
# %bb.860:                              # %BZ2_decompress.split3368
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movw	$-13247, BasicBlockSignatureTracker # imm = 0xCC41
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB77_863
# %bb.861:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$-13203, %ax            # imm = 0xCC6D
	jne	.LBB77_1436
# %bb.862:                              # %BZ2_decompress.split3370
	movq	%r10, %r11
	movq	%r9, %rbx
	movq	%r8, %rdi
	movw	$-13203, BasicBlockSignatureTracker # imm = 0xCC6D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_883
.LBB77_863:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$-13192, %ax            # imm = 0xCC78
	jne	.LBB77_1436
# %bb.864:                              # %BZ2_decompress.split3372
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-13192, BasicBlockSignatureTracker # imm = 0xCC78
	movw	$25815, RunTimeSignatureAdjuster # imm = 0x64D7
.LBB77_865:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$25633, %ax             # imm = 0x6421
	xorw	%cx, %ax
	cmpw	$-13170, %ax            # imm = 0xCC8E
	jne	.LBB77_1436
# %bb.866:                              # %BZ2_decompress.split2552
	movq	(%r8), %rax
	movl	$39, 8(%rax)
	movw	$-13170, BasicBlockSignatureTracker # imm = 0xCC8E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_867:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$-13142, %ax            # imm = 0xCCAA
	jne	.LBB77_1395
# %bb.868:                              # %BZ2_decompress.split3376
                                        #   in Loop: Header=BB77_867 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-13142, BasicBlockSignatureTracker # imm = 0xCCAA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_871
# %bb.869:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-13138, %ax            # imm = 0xCCAE
	jne	.LBB77_1436
# %bb.870:                              # %BZ2_decompress.split3378
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-13138, BasicBlockSignatureTracker # imm = 0xCCAE
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_881
.LBB77_871:                             #   in Loop: Header=BB77_867 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-13137, %ax            # imm = 0xCCAF
	jne	.LBB77_1395
# %bb.872:                              # %BZ2_decompress.split3380
                                        #   in Loop: Header=BB77_867 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-13137, BasicBlockSignatureTracker # imm = 0xCCAF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_875
# %bb.873:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-13133, %ax            # imm = 0xCCB3
	jne	.LBB77_1436
# %bb.874:                              # %BZ2_decompress.split3384
	movl	$0, (%r9)
	movw	$-13133, BasicBlockSignatureTracker # imm = 0xCCB3
	movw	$26005, RunTimeSignatureAdjuster # imm = 0x6595
	jmp	.LBB77_1369
.LBB77_875:                             #   in Loop: Header=BB77_867 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$125, %ax
	cmpw	$-13102, %ax            # imm = 0xCCD2
	jne	.LBB77_1395
# %bb.876:                              # %BZ2_decompress.split3386
                                        #   in Loop: Header=BB77_867 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-13102, BasicBlockSignatureTracker # imm = 0xCCD2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_879
# %bb.877:                              #   in Loop: Header=BB77_867 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$-13080, %ax            # imm = 0xCCE8
	movq	%rdx, %rax
	jne	.LBB77_1395
# %bb.878:                              # %BZ2_decompress.split3388
                                        #   in Loop: Header=BB77_867 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-13080, BasicBlockSignatureTracker # imm = 0xCCE8
	movw	$58, RunTimeSignatureAdjuster
.LBB77_879:                             #   in Loop: Header=BB77_867 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$-13067, %ax            # imm = 0xCCF5
	movq	%rdx, %r8
	jne	.LBB77_1395
# %bb.880:                              # %BZ2_decompress.split3390
                                        #   in Loop: Header=BB77_867 Depth=1
	movw	$-13067, BasicBlockSignatureTracker # imm = 0xCCF5
	movw	$123, RunTimeSignatureAdjuster
	jmp	.LBB77_867
.LBB77_881:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$438, %ax               # imm = 0x1B6
	cmpw	$-13032, %ax            # imm = 0xCD18
	jne	.LBB77_1436
# %bb.882:                              # %BZ2_decompress.split3382
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	shll	$1, %eax
	movq	-168(%rbp), %rdx        # 8-byte Reload
	orl	(%rdx), %eax
	movl	%eax, (%rcx)
	movw	$-13032, BasicBlockSignatureTracker # imm = 0xCD18
	movw	$258, RunTimeSignatureAdjuster # imm = 0x102
	jmp	.LBB77_855
.LBB77_883:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$375, %ax               # imm = 0x177
	cmpw	$-13030, %ax            # imm = 0xCD1A
	jne	.LBB77_1436
# %bb.884:                              # %BZ2_decompress.split3374
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	subl	(%rcx,%rdx,4), %eax
	movw	$-13030, BasicBlockSignatureTracker # imm = 0xCD1A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_887
# %bb.885:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$153, %ax
	cmpw	$-12925, %ax            # imm = 0xCD83
	jne	.LBB77_1436
# %bb.886:                              # %BZ2_decompress.split3394
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	subl	(%rcx,%rdx,4), %eax
	movw	$-12925, BasicBlockSignatureTracker # imm = 0xCD83
	movw	$153, RunTimeSignatureAdjuster
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB77_889
.LBB77_887:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$144, %ax
	xorw	%cx, %ax
	cmpw	$-12918, %ax            # imm = 0xCD8A
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.888:                              # %BZ2_decompress.split3392
	movl	$-4, (%r9)
	movw	$-12918, BasicBlockSignatureTracker # imm = 0xCD8A
	movw	$25772, RunTimeSignatureAdjuster # imm = 0x64AC
	jmp	.LBB77_1369
.LBB77_889:                             # %Buffer__6
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8861, %ax              # imm = 0x229D
	cmpw	$-4322, %ax             # imm = 0xEF1E
	jne	.LBB77_1436
# %bb.890:                              # %BZ2_decompress.split3396
	movw	$-4322, BasicBlockSignatureTracker # imm = 0xEF1E
	movw	$8861, RunTimeSignatureAdjuster # imm = 0x229D
# %bb.891:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19, %ax
	xorw	%cx, %ax
	cmpw	$-12912, %ax            # imm = 0xCD90
	jne	.LBB77_1436
# %bb.892:                              # %BZ2_decompress.split3844
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-12912, BasicBlockSignatureTracker # imm = 0xCD90
	movw	$0, RunTimeSignatureAdjuster
# %bb.893:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-12892, %ax            # imm = 0xCDA4
	jne	.LBB77_1436
# %bb.894:                              # %BZ2_decompress.split3398
	movb	$1, %al
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-12892, BasicBlockSignatureTracker # imm = 0xCDA4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	je	.LBB77_897
# %bb.895:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-12891, %ax            # imm = 0xCDA5
	jne	.LBB77_1436
# %bb.896:                              # %BZ2_decompress.split3402
	movq	-104(%rbp), %rax        # 8-byte Reload
	cmpl	$1, (%rax)
	sete	%al
	movw	$-12891, BasicBlockSignatureTracker # imm = 0xCDA5
	movw	$1, RunTimeSignatureAdjuster
.LBB77_897:
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$19, %cx
	xorw	%dx, %cx
	cmpw	$-12873, %cx            # imm = 0xCDB7
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.898:                              # %BZ2_decompress.split3400
	movw	$-12873, BasicBlockSignatureTracker # imm = 0xCDB7
	movw	$2046, RunTimeSignatureAdjuster # imm = 0x7FE
	testb	$1, %al
	jne	.LBB77_817
# %bb.899:                              # %Buffer__7
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13846, %ax             # imm = 0x3616
	cmpw	$-1119, %ax             # imm = 0xFBA1
	jne	.LBB77_1436
# %bb.900:                              # %BZ2_decompress.split3404
	movw	$-1119, BasicBlockSignatureTracker # imm = 0xFBA1
	movw	$13846, RunTimeSignatureAdjuster # imm = 0x3616
# %bb.901:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$123, %ax
	xorw	%cx, %ax
	cmpw	$-12852, %ax            # imm = 0xCDCC
	movq	%rdi, %rsi
	jne	.LBB77_1436
# %bb.902:                              # %BZ2_decompress.split3846
	movq	-120(%rbp), %r8         # 8-byte Reload
	movl	(%r8), %eax
	addl	$1, %eax
	movl	%eax, (%r8)
	movq	(%rsi), %rax
	movq	(%rsi), %rcx
	movq	(%rsi), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movb	%al, (%rdx)
	movl	(%r8), %eax
	movq	(%rsi), %rcx
	movzbl	(%rdx), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	(%rsi), %rax
	movb	44(%rax), %al
	movw	$-12852, BasicBlockSignatureTracker # imm = 0xCDCC
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_915
# %bb.903:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$43, %ax
	cmpw	$-12825, %ax            # imm = 0xCDE7
	jne	.LBB77_1436
# %bb.904:                              # %BZ2_decompress.split3406
	movw	$-12825, BasicBlockSignatureTracker # imm = 0xCDE7
	movw	$0, RunTimeSignatureAdjuster
.LBB77_905:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1000, %ax              # imm = 0x3E8
	xorw	%cx, %ax
	cmpw	$-12785, %ax            # imm = 0xCE0F
	jne	.LBB77_1393
# %bb.906:                              # %BZ2_decompress.split3410
                                        #   in Loop: Header=BB77_905 Depth=1
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12785, BasicBlockSignatureTracker # imm = 0xCE0F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB77_913
# %bb.907:                              #   in Loop: Header=BB77_905 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-12766, %ax            # imm = 0xCE22
	jne	.LBB77_1393
# %bb.908:                              # %BZ2_decompress.split3412
                                        #   in Loop: Header=BB77_905 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-12766, BasicBlockSignatureTracker # imm = 0xCE22
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_911
# %bb.909:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-12753, %ax            # imm = 0xCE2F
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.910:                              # %BZ2_decompress.split3416
	movl	$-4, (%r9)
	movw	$-12753, BasicBlockSignatureTracker # imm = 0xCE2F
	movw	$26377, RunTimeSignatureAdjuster # imm = 0x6709
	jmp	.LBB77_1369
.LBB77_911:                             #   in Loop: Header=BB77_905 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-12742, %ax            # imm = 0xCE3A
	jne	.LBB77_1393
# %bb.912:                              # %BZ2_decompress.split3418
                                        #   in Loop: Header=BB77_905 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	(%rdi), %rcx
	movq	3160(%rcx), %rcx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-12742, BasicBlockSignatureTracker # imm = 0xCE3A
	movw	$989, RunTimeSignatureAdjuster # imm = 0x3DD
	jmp	.LBB77_905
.LBB77_913:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-12740, %ax            # imm = 0xCE3C
	jne	.LBB77_1436
# %bb.914:                              # %BZ2_decompress.split3414
	movw	$-12740, BasicBlockSignatureTracker # imm = 0xCE3C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_927
.LBB77_915:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$900, %ax               # imm = 0x384
	cmpw	$-12728, %ax            # imm = 0xCE48
	jne	.LBB77_1436
# %bb.916:                              # %BZ2_decompress.split3408
	movw	$-12728, BasicBlockSignatureTracker # imm = 0xCE48
	movw	$0, RunTimeSignatureAdjuster
.LBB77_917:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29, %ax
	xorw	%cx, %ax
	cmpw	$-12715, %ax            # imm = 0xCE55
	jne	.LBB77_1394
# %bb.918:                              # %BZ2_decompress.split3422
                                        #   in Loop: Header=BB77_917 Depth=1
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12715, BasicBlockSignatureTracker # imm = 0xCE55
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB77_925
# %bb.919:                              #   in Loop: Header=BB77_917 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-12707, %ax            # imm = 0xCE5D
	jne	.LBB77_1394
# %bb.920:                              # %BZ2_decompress.split3424
                                        #   in Loop: Header=BB77_917 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-12707, BasicBlockSignatureTracker # imm = 0xCE5D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_923
# %bb.921:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-12693, %ax            # imm = 0xCE6B
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.922:                              # %BZ2_decompress.split3428
	movl	$-4, (%r9)
	movw	$-12693, BasicBlockSignatureTracker # imm = 0xCE6B
	movw	$26445, RunTimeSignatureAdjuster # imm = 0x674D
	jmp	.LBB77_1369
.LBB77_923:                             #   in Loop: Header=BB77_917 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-12690, %ax            # imm = 0xCE6E
	jne	.LBB77_1394
# %bb.924:                              # %BZ2_decompress.split3430
                                        #   in Loop: Header=BB77_917 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movq	(%rdi), %rcx
	movq	3152(%rcx), %rcx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-12690, BasicBlockSignatureTracker # imm = 0xCE6E
	movw	$38, RunTimeSignatureAdjuster
	jmp	.LBB77_917
.LBB77_925:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$215, %ax
	cmpw	$-12670, %ax            # imm = 0xCE82
	jne	.LBB77_1436
# %bb.926:                              # %BZ2_decompress.split3426
	movw	$-12670, BasicBlockSignatureTracker # imm = 0xCE82
	movw	$190, RunTimeSignatureAdjuster
.LBB77_927:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$245, %ax
	xorw	%cx, %ax
	cmpw	$-12599, %ax            # imm = 0xCEC9
	jne	.LBB77_1436
# %bb.928:                              # %BZ2_decompress.split3420
	movw	$-12599, BasicBlockSignatureTracker # imm = 0xCEC9
	movw	$1916, RunTimeSignatureAdjuster # imm = 0x77C
	jmp	.LBB77_807
.LBB77_929:                             # %Buffer__5
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13016, %ax             # imm = 0x32D8
	cmpw	$-1797, %ax             # imm = 0xF8FB
	jne	.LBB77_1436
# %bb.930:                              # %BZ2_decompress.split3326
	movw	$-1797, BasicBlockSignatureTracker # imm = 0xF8FB
	movw	$13016, RunTimeSignatureAdjuster # imm = 0x32D8
# %bb.931:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1265, %ax              # imm = 0x4F1
	xorw	%cx, %ax
	cmpw	$-12590, %ax            # imm = 0xCED2
	jne	.LBB77_1436
# %bb.932:                              # %BZ2_decompress.split3842
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-12590, BasicBlockSignatureTracker # imm = 0xCED2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_935
# %bb.933:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$465, %ax               # imm = 0x1D1
	cmpw	$-12541, %ax            # imm = 0xCF03
	jne	.LBB77_1436
# %bb.934:                              # %BZ2_decompress.split3432
	movl	$-4, (%r9)
	movw	$-12541, BasicBlockSignatureTracker # imm = 0xCF03
	movw	$26149, RunTimeSignatureAdjuster # imm = 0x6625
	jmp	.LBB77_1369
.LBB77_935:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$451, %ax               # imm = 0x1C3
	cmpw	$-12527, %ax            # imm = 0xCF11
	jne	.LBB77_1436
# %bb.936:                              # %BZ2_decompress.split3434
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	subl	$1, %eax
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movw	$-12527, BasicBlockSignatureTracker # imm = 0xCF11
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$16, %eax
	jae	.LBB77_951
# %bb.937:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-12517, %ax            # imm = 0xCF1B
	movq	%r8, %rcx
	jne	.LBB77_1436
# %bb.938:                              # %BZ2_decompress.split3436
	movq	(%rcx), %rax
	movl	7820(%rax), %eax
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%rcx), %rax
	movl	(%rdx), %ecx
	movq	-200(%rbp), %rdx        # 8-byte Reload
	addl	(%rdx), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-12517, BasicBlockSignatureTracker # imm = 0xCF1B
	movw	$0, RunTimeSignatureAdjuster
.LBB77_939:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7, %ax
	xorw	%cx, %ax
	cmpw	$-12516, %ax            # imm = 0xCF1C
	jne	.LBB77_1400
# %bb.940:                              # %BZ2_decompress.split3440
                                        #   in Loop: Header=BB77_939 Depth=1
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12516, BasicBlockSignatureTracker # imm = 0xCF1C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jbe	.LBB77_943
# %bb.941:                              #   in Loop: Header=BB77_939 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$-12507, %ax            # imm = 0xCF25
	jne	.LBB77_1400
# %bb.942:                              # %BZ2_decompress.split3442
                                        #   in Loop: Header=BB77_939 Depth=1
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-200(%rbp), %rdi        # 8-byte Reload
	addl	(%rdi), %eax
	movq	-392(%rbp), %rbx        # 8-byte Reload
	movl	%eax, (%rbx)
	movq	%r8, %rsi
	movq	(%rsi), %rax
	movl	(%rbx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rsi), %rcx
	movslq	(%rbx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	(%rsi), %rax
	movl	(%rbx), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	(%rsi), %rax
	movl	(%rbx), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	(%rsi), %rax
	movl	(%rbx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rsi), %rcx
	movl	(%rbx), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	(%rdi), %eax
	subl	$4, %eax
	movl	%eax, (%rdi)
	movw	$-12507, BasicBlockSignatureTracker # imm = 0xCF25
	movw	$62, RunTimeSignatureAdjuster
	jmp	.LBB77_939
.LBB77_943:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-12504, %ax            # imm = 0xCF28
	jne	.LBB77_1436
# %bb.944:                              # %BZ2_decompress.split3444
	movw	$-12504, BasicBlockSignatureTracker # imm = 0xCF28
	movw	$0, RunTimeSignatureAdjuster
.LBB77_945:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$97, %ax
	xorw	%cx, %ax
	cmpw	$-12471, %ax            # imm = 0xCF49
	jne	.LBB77_1399
# %bb.946:                              # %BZ2_decompress.split3446
                                        #   in Loop: Header=BB77_945 Depth=1
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12471, BasicBlockSignatureTracker # imm = 0xCF49
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jbe	.LBB77_949
# %bb.947:                              #   in Loop: Header=BB77_945 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-12467, %ax            # imm = 0xCF4D
	jne	.LBB77_1399
# %bb.948:                              # %BZ2_decompress.split3448
                                        #   in Loop: Header=BB77_945 Depth=1
	movq	%r8, %rdx
	movq	(%rdx), %rax
	movq	-192(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	movq	-200(%rbp), %rdi        # 8-byte Reload
	addl	(%rdi), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	(%rdx), %rcx
	movl	(%rsi), %edx
	addl	(%rdi), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	(%rdi), %eax
	addl	$-1, %eax
	movl	%eax, (%rdi)
	movw	$-12467, BasicBlockSignatureTracker # imm = 0xCF4D
	movw	$101, RunTimeSignatureAdjuster
	jmp	.LBB77_945
.LBB77_949:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$-12447, %ax            # imm = 0xCF61
	movq	%r8, %rcx
	jne	.LBB77_1436
# %bb.950:                              # %BZ2_decompress.split3450
	movq	-48(%rbp), %rax         # 8-byte Reload
	movb	(%rax), %al
	movq	(%rcx), %rcx
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movslq	(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movw	$-12447, BasicBlockSignatureTracker # imm = 0xCF61
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_985
.LBB77_951:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$127, %ax
	cmpw	$-12434, %ax            # imm = 0xCF6E
	movq	%r8, %rdx
	jne	.LBB77_1436
# %bb.952:                              # %BZ2_decompress.split3438
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	shrl	$4, %eax
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rsi), %eax
	andl	$15, %eax
	movq	-400(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	movslq	(%rcx), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	(%rsi), %eax
	movq	-192(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rdx), %rax
	movslq	(%rcx), %rcx
	movb	3724(%rax,%rcx), %al
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-12434, BasicBlockSignatureTracker # imm = 0xCF6E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_953:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$-12433, %ax            # imm = 0xCF6F
	jne	.LBB77_1404
# %bb.954:                              # %BZ2_decompress.split3454
                                        #   in Loop: Header=BB77_953 Depth=1
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movq	-264(%rbp), %rdx        # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	movw	$-12433, BasicBlockSignatureTracker # imm = 0xCF6F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB77_957
# %bb.955:                              #   in Loop: Header=BB77_953 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$232, %ax
	cmpw	$-12409, %ax            # imm = 0xCF87
	jne	.LBB77_1404
# %bb.956:                              # %BZ2_decompress.split3456
                                        #   in Loop: Header=BB77_953 Depth=1
	movq	%r8, %rdx
	movq	(%rdx), %rax
	movq	-192(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	(%rsi), %eax
	addl	$-1, %eax
	movl	%eax, (%rsi)
	movw	$-12409, BasicBlockSignatureTracker # imm = 0xCF87
	movw	$233, RunTimeSignatureAdjuster
	jmp	.LBB77_953
.LBB77_957:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$246, %ax
	cmpw	$-12391, %ax            # imm = 0xCF99
	movq	%r8, %rax
	jne	.LBB77_1436
# %bb.958:                              # %BZ2_decompress.split3458
	movq	(%rax), %rax
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movw	$-12391, BasicBlockSignatureTracker # imm = 0xCF99
	movw	$0, RunTimeSignatureAdjuster
.LBB77_959:                             # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$58, %ax
	xorw	%cx, %ax
	cmpw	$-12381, %ax            # imm = 0xCFA3
	jne	.LBB77_1403
# %bb.960:                              # %BZ2_decompress.split3460
                                        #   in Loop: Header=BB77_959 Depth=1
	movq	-264(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12381, BasicBlockSignatureTracker # imm = 0xCFA3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jle	.LBB77_963
# %bb.961:                              #   in Loop: Header=BB77_959 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-12374, %ax            # imm = 0xCFAA
	jne	.LBB77_1403
# %bb.962:                              # %BZ2_decompress.split3462
                                        #   in Loop: Header=BB77_959 Depth=1
	movq	%r8, %rsi
	movq	(%rsi), %rax
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movslq	(%rdi), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	(%rsi), %rax
	movq	(%rsi), %rcx
	movl	(%rdi), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rsi), %rcx
	movq	(%rsi), %rdx
	movslq	(%rdi), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	(%rdi), %eax
	addl	$-1, %eax
	movl	%eax, (%rdi)
	movw	$-12374, BasicBlockSignatureTracker # imm = 0xCFAA
	movw	$51, RunTimeSignatureAdjuster
	jmp	.LBB77_959
.LBB77_963:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-12367, %ax            # imm = 0xCFB1
	movq	%r8, %rsi
	jne	.LBB77_1436
# %bb.964:                              # %BZ2_decompress.split3464
	movq	(%rsi), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movb	(%rax), %al
	movq	(%rsi), %rcx
	movq	(%rsi), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	(%rsi), %rax
	movl	7820(%rax), %eax
	movw	$-12367, BasicBlockSignatureTracker # imm = 0xCFB1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_983
# %bb.965:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$-12347, %ax            # imm = 0xCFC5
	jne	.LBB77_1436
# %bb.966:                              # %BZ2_decompress.split3466
	movq	-344(%rbp), %rax        # 8-byte Reload
	movl	$4095, (%rax)           # imm = 0xFFF
	movq	-256(%rbp), %rax        # 8-byte Reload
	movl	$15, (%rax)
	movw	$-12347, BasicBlockSignatureTracker # imm = 0xCFC5
	movw	$0, RunTimeSignatureAdjuster
.LBB77_967:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_971 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8139, %ax              # imm = 0x1FCB
	xorw	%cx, %ax
	cmpw	$-12274, %ax            # imm = 0xD00E
	jne	.LBB77_1402
# %bb.968:                              # %BZ2_decompress.split3470
                                        #   in Loop: Header=BB77_967 Depth=1
	movq	-256(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12274, BasicBlockSignatureTracker # imm = 0xD00E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_981
# %bb.969:                              #   in Loop: Header=BB77_967 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-12269, %ax            # imm = 0xD013
	jne	.LBB77_1402
# %bb.970:                              # %BZ2_decompress.split3472
                                        #   in Loop: Header=BB77_967 Depth=1
	movq	-288(%rbp), %rax        # 8-byte Reload
	movl	$15, (%rax)
	movw	$-12269, BasicBlockSignatureTracker # imm = 0xD013
	movw	$0, RunTimeSignatureAdjuster
.LBB77_971:                             #   Parent Loop BB77_967 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$11, %ax
	xorw	%cx, %ax
	cmpw	$-12264, %ax            # imm = 0xD018
	jne	.LBB77_1401
# %bb.972:                              # %BZ2_decompress.split3476
                                        #   in Loop: Header=BB77_971 Depth=2
	movq	-288(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12264, BasicBlockSignatureTracker # imm = 0xD018
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_977
# %bb.973:                              #   in Loop: Header=BB77_971 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$-12251, %ax            # imm = 0xD025
	jne	.LBB77_1401
# %bb.974:                              # %BZ2_decompress.split3478
                                        #   in Loop: Header=BB77_971 Depth=2
	movq	%r8, %rsi
	movq	(%rsi), %rax
	movq	(%rsi), %rcx
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	movq	-288(%rbp), %rdx        # 8-byte Reload
	addl	(%rdx), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	(%rsi), %rcx
	movq	-344(%rbp), %rsi        # 8-byte Reload
	movslq	(%rsi), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	(%rsi), %eax
	addl	$-1, %eax
	movl	%eax, (%rsi)
	movw	$-12251, BasicBlockSignatureTracker # imm = 0xD025
	movw	$0, RunTimeSignatureAdjuster
# %bb.975:                              #   in Loop: Header=BB77_971 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-12237, %ax            # imm = 0xD033
	jne	.LBB77_1401
# %bb.976:                              # %BZ2_decompress.split3482
                                        #   in Loop: Header=BB77_971 Depth=2
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-12237, BasicBlockSignatureTracker # imm = 0xD033
	movw	$32, RunTimeSignatureAdjuster
	jmp	.LBB77_971
.LBB77_977:                             #   in Loop: Header=BB77_967 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$-12215, %ax            # imm = 0xD049
	jne	.LBB77_1402
# %bb.978:                              # %BZ2_decompress.split3480
                                        #   in Loop: Header=BB77_967 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	addl	$1, %eax
	movq	(%r8), %rcx
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
	movw	$-12215, BasicBlockSignatureTracker # imm = 0xD049
	movw	$0, RunTimeSignatureAdjuster
# %bb.979:                              #   in Loop: Header=BB77_967 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-12204, %ax            # imm = 0xD054
	jne	.LBB77_1402
# %bb.980:                              # %BZ2_decompress.split3484
                                        #   in Loop: Header=BB77_967 Depth=1
	movq	-256(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movw	$-12204, BasicBlockSignatureTracker # imm = 0xD054
	movw	$8081, RunTimeSignatureAdjuster # imm = 0x1F91
	jmp	.LBB77_967
.LBB77_981:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$-12181, %ax            # imm = 0xD06B
	jne	.LBB77_1436
# %bb.982:                              # %BZ2_decompress.split3474
	movw	$-12181, BasicBlockSignatureTracker # imm = 0xD06B
	movw	$8154, RunTimeSignatureAdjuster # imm = 0x1FDA
.LBB77_983:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7992, %ax              # imm = 0x1F38
	xorw	%cx, %ax
	cmpw	$-12151, %ax            # imm = 0xD089
	jne	.LBB77_1436
# %bb.984:                              # %BZ2_decompress.split3468
	movw	$-12151, BasicBlockSignatureTracker # imm = 0xD089
	movw	$8168, RunTimeSignatureAdjuster # imm = 0x1FE8
.LBB77_985:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8172, %ax              # imm = 0x1FEC
	xorw	%cx, %ax
	cmpw	$-12147, %ax            # imm = 0xD08D
	movq	%r8, %rsi
	jne	.LBB77_1436
# %bb.986:                              # %BZ2_decompress.split3452
	movq	(%rsi), %rax
	movq	(%rsi), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	(%rsi), %rax
	movb	44(%rax), %al
	movw	$-12147, BasicBlockSignatureTracker # imm = 0xD08D
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_989
# %bb.987:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$-12110, %ax            # imm = 0xD0B2
	movq	%r8, %rdx
	jne	.LBB77_1436
# %bb.988:                              # %BZ2_decompress.split3486
	movq	(%rdx), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	(%rdx), %rcx
	movq	3160(%rcx), %rcx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	$-12110, BasicBlockSignatureTracker # imm = 0xD0B2
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_991
.LBB77_989:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$64, %ax
	cmpw	$-12083, %ax            # imm = 0xD0CD
	movq	%r8, %rdx
	jne	.LBB77_1436
# %bb.990:                              # %BZ2_decompress.split3488
	movq	(%rdx), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	(%rdx), %rcx
	movq	3152(%rcx), %rcx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$-12083, BasicBlockSignatureTracker # imm = 0xD0CD
	movw	$127, RunTimeSignatureAdjuster
.LBB77_991:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$107, %ax
	xorw	%cx, %ax
	cmpw	$-12071, %ax            # imm = 0xD0D9
	jne	.LBB77_1436
# %bb.992:                              # %BZ2_decompress.split3490
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-12071, BasicBlockSignatureTracker # imm = 0xD0D9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_999
# %bb.993:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$441, %ax               # imm = 0x1B9
	cmpw	$-11936, %ax            # imm = 0xD160
	jne	.LBB77_1436
# %bb.994:                              # %BZ2_decompress.split3492
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-11936, BasicBlockSignatureTracker # imm = 0xD160
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_997
# %bb.995:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-11907, %ax            # imm = 0xD17D
	jne	.LBB77_1436
# %bb.996:                              # %BZ2_decompress.split3496
	movl	$-4, (%r9)
	movw	$-11907, BasicBlockSignatureTracker # imm = 0xD17D
	movw	$30811, RunTimeSignatureAdjuster # imm = 0x785B
	jmp	.LBB77_1369
.LBB77_997:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$217, %ax
	cmpw	$-11847, %ax            # imm = 0xD1B9
	movq	%r8, %rdx
	jne	.LBB77_1436
# %bb.998:                              # %BZ2_decompress.split3498
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$50, (%rax)
	movq	(%rdx), %rax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movq	-280(%rbp), %rsi        # 8-byte Reload
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	movslq	(%rsi), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	(%rdx), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	(%rsi), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rdx), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	(%rsi), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rdx), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	(%rsi), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movw	$-11847, BasicBlockSignatureTracker # imm = 0xD1B9
	movw	$352, RunTimeSignatureAdjuster # imm = 0x160
.LBB77_999:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$314, %ax               # imm = 0x13A
	xorw	%cx, %ax
	cmpw	$-11805, %ax            # imm = 0xD1E3
	jne	.LBB77_1436
# %bb.1000:                             # %BZ2_decompress.split3494
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, (%rcx)
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-11805, BasicBlockSignatureTracker # imm = 0xD1E3
	movw	$31052, RunTimeSignatureAdjuster # imm = 0x794C
.LBB77_1001:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$31047, %ax             # imm = 0x7947
	xorw	%cx, %ax
	cmpw	$-11800, %ax            # imm = 0xD1E8
	jne	.LBB77_1436
# %bb.1002:                             # %BZ2_decompress.split2554
	movq	(%r8), %rax
	movl	$40, 8(%rax)
	movw	$-11800, BasicBlockSignatureTracker # imm = 0xD1E8
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1003:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1021, %ax              # imm = 0x3FD
	xorw	%cx, %ax
	cmpw	$-11755, %ax            # imm = 0xD215
	jne	.LBB77_1398
# %bb.1004:                             # %BZ2_decompress.split3500
                                        #   in Loop: Header=BB77_1003 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-11755, BasicBlockSignatureTracker # imm = 0xD215
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_1007
# %bb.1005:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$-11732, %ax            # imm = 0xD22C
	jne	.LBB77_1436
# %bb.1006:                             # %BZ2_decompress.split3502
	movl	$1, %eax
	movq	(%r8), %rcx
	movl	32(%rcx), %edx
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	subl	(%rsi), %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	movl	(%rsi), %ecx
                                        # kill: def %cl killed %ecx
	shll	%cl, %eax
	subl	$1, %eax
	andl	%eax, %edx
	movq	-432(%rbp), %rdi        # 8-byte Reload
	movl	%edx, (%rdi)
	movl	(%rsi), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	(%rdi), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-11732, BasicBlockSignatureTracker # imm = 0xD22C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1017
.LBB77_1007:                            #   in Loop: Header=BB77_1003 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$102, %ax
	cmpw	$-11661, %ax            # imm = 0xD273
	jne	.LBB77_1398
# %bb.1008:                             # %BZ2_decompress.split3504
                                        #   in Loop: Header=BB77_1003 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-11661, BasicBlockSignatureTracker # imm = 0xD273
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1011
# %bb.1009:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$6, %ax
	cmpw	$-11659, %ax            # imm = 0xD275
	jne	.LBB77_1436
# %bb.1010:                             # %BZ2_decompress.split3508
	movl	$0, (%r9)
	movw	$-11659, BasicBlockSignatureTracker # imm = 0xD275
	movw	$31571, RunTimeSignatureAdjuster # imm = 0x7B53
	jmp	.LBB77_1369
.LBB77_1011:                            #   in Loop: Header=BB77_1003 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$205, %ax
	cmpw	$-11586, %ax            # imm = 0xD2BE
	jne	.LBB77_1398
# %bb.1012:                             # %BZ2_decompress.split3510
                                        #   in Loop: Header=BB77_1003 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-11586, BasicBlockSignatureTracker # imm = 0xD2BE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1015
# %bb.1013:                             #   in Loop: Header=BB77_1003 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$108, %ax
	cmpw	$-11566, %ax            # imm = 0xD2D2
	movq	%rdx, %rax
	jne	.LBB77_1398
# %bb.1014:                             # %BZ2_decompress.split3512
                                        #   in Loop: Header=BB77_1003 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-11566, BasicBlockSignatureTracker # imm = 0xD2D2
	movw	$108, RunTimeSignatureAdjuster
.LBB77_1015:                            #   in Loop: Header=BB77_1003 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$93, %ax
	xorw	%cx, %ax
	cmpw	$-11549, %ax            # imm = 0xD2E3
	movq	%rdx, %r8
	jne	.LBB77_1398
# %bb.1016:                             # %BZ2_decompress.split3514
                                        #   in Loop: Header=BB77_1003 Depth=1
	movw	$-11549, BasicBlockSignatureTracker # imm = 0xD2E3
	movw	$779, RunTimeSignatureAdjuster # imm = 0x30B
	jmp	.LBB77_1003
.LBB77_1017:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$301, %ax               # imm = 0x12D
	cmpw	$-11519, %ax            # imm = 0xD301
	jne	.LBB77_1436
# %bb.1018:                             # %BZ2_decompress.split3506
	movw	$-11519, BasicBlockSignatureTracker # imm = 0xD301
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1019:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$91, %ax
	xorw	%cx, %ax
	cmpw	$-11430, %ax            # imm = 0xD35A
	jne	.LBB77_1436
# %bb.1020:                             # %BZ2_decompress.split3516
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-11430, BasicBlockSignatureTracker # imm = 0xD35A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$20, %eax
	jle	.LBB77_1023
# %bb.1021:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-11427, %ax            # imm = 0xD35D
	jne	.LBB77_1436
# %bb.1022:                             # %BZ2_decompress.split3518
	movl	$-4, (%r9)
	movw	$-11427, BasicBlockSignatureTracker # imm = 0xD35D
	movw	$31355, RunTimeSignatureAdjuster # imm = 0x7A7B
	jmp	.LBB77_1369
.LBB77_1023:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$-11420, %ax            # imm = 0xD364
	jne	.LBB77_1436
# %bb.1024:                             # %BZ2_decompress.split3520
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movw	$-11420, BasicBlockSignatureTracker # imm = 0xD364
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB77_1027
# %bb.1025:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-11413, %ax            # imm = 0xD36B
	jne	.LBB77_1436
# %bb.1026:                             # %BZ2_decompress.split3522
	movq	%r10, %r11
	movq	%r9, %rbx
	movq	%r8, %rdi
	movw	$-11413, BasicBlockSignatureTracker # imm = 0xD36B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1047
.LBB77_1027:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-11399, %ax            # imm = 0xD379
	jne	.LBB77_1436
# %bb.1028:                             # %BZ2_decompress.split3524
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-11399, BasicBlockSignatureTracker # imm = 0xD379
	movw	$31702, RunTimeSignatureAdjuster # imm = 0x7BD6
.LBB77_1029:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$31522, %ax             # imm = 0x7B22
	xorw	%cx, %ax
	cmpw	$-11379, %ax            # imm = 0xD38D
	jne	.LBB77_1436
# %bb.1030:                             # %BZ2_decompress.split2556
	movq	(%r8), %rax
	movl	$41, 8(%rax)
	movw	$-11379, BasicBlockSignatureTracker # imm = 0xD38D
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1031:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$73, %ax
	xorw	%cx, %ax
	cmpw	$-11324, %ax            # imm = 0xD3C4
	jne	.LBB77_1397
# %bb.1032:                             # %BZ2_decompress.split3528
                                        #   in Loop: Header=BB77_1031 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-11324, BasicBlockSignatureTracker # imm = 0xD3C4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jl	.LBB77_1035
# %bb.1033:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-11308, %ax            # imm = 0xD3D4
	jne	.LBB77_1436
# %bb.1034:                             # %BZ2_decompress.split3530
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movq	-424(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-11308, BasicBlockSignatureTracker # imm = 0xD3D4
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1045
.LBB77_1035:                            #   in Loop: Header=BB77_1031 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$-11288, %ax            # imm = 0xD3E8
	jne	.LBB77_1397
# %bb.1036:                             # %BZ2_decompress.split3532
                                        #   in Loop: Header=BB77_1031 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-11288, BasicBlockSignatureTracker # imm = 0xD3E8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1039
# %bb.1037:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2026, %ax              # imm = 0x7EA
	cmpw	$-11262, %ax            # imm = 0xD402
	jne	.LBB77_1436
# %bb.1038:                             # %BZ2_decompress.split3536
	movl	$0, (%r9)
	movw	$-11262, BasicBlockSignatureTracker # imm = 0xD402
	movw	$32036, RunTimeSignatureAdjuster # imm = 0x7D24
	jmp	.LBB77_1369
.LBB77_1039:                            #   in Loop: Header=BB77_1031 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2027, %ax              # imm = 0x7EB
	cmpw	$-11261, %ax            # imm = 0xD403
	jne	.LBB77_1397
# %bb.1040:                             # %BZ2_decompress.split3538
                                        #   in Loop: Header=BB77_1031 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-11261, BasicBlockSignatureTracker # imm = 0xD403
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1043
# %bb.1041:                             #   in Loop: Header=BB77_1031 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-11244, %ax            # imm = 0xD414
	movq	%rdx, %rax
	jne	.LBB77_1397
# %bb.1042:                             # %BZ2_decompress.split3540
                                        #   in Loop: Header=BB77_1031 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-11244, BasicBlockSignatureTracker # imm = 0xD414
	movw	$23, RunTimeSignatureAdjuster
.LBB77_1043:                            #   in Loop: Header=BB77_1031 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29, %ax
	xorw	%cx, %ax
	cmpw	$-11234, %ax            # imm = 0xD41E
	movq	%rdx, %r8
	jne	.LBB77_1397
# %bb.1044:                             # %BZ2_decompress.split3542
                                        #   in Loop: Header=BB77_1031 Depth=1
	movw	$-11234, BasicBlockSignatureTracker # imm = 0xD41E
	movw	$1939, RunTimeSignatureAdjuster # imm = 0x793
	jmp	.LBB77_1031
.LBB77_1045:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2041, %ax              # imm = 0x7F9
	cmpw	$-11219, %ax            # imm = 0xD42D
	jne	.LBB77_1436
# %bb.1046:                             # %BZ2_decompress.split3534
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	shll	$1, %eax
	movq	-168(%rbp), %rdx        # 8-byte Reload
	orl	(%rdx), %eax
	movl	%eax, (%rcx)
	movw	$-11219, BasicBlockSignatureTracker # imm = 0xD42D
	movw	$1836, RunTimeSignatureAdjuster # imm = 0x72C
	jmp	.LBB77_1019
.LBB77_1047:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1872, %ax              # imm = 0x750
	cmpw	$-11205, %ax            # imm = 0xD43B
	jne	.LBB77_1436
# %bb.1048:                             # %BZ2_decompress.split3526
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	subl	(%rcx,%rdx,4), %eax
	movw	$-11205, BasicBlockSignatureTracker # imm = 0xD43B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_1051
# %bb.1049:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$126, %ax
	cmpw	$-11195, %ax            # imm = 0xD445
	jne	.LBB77_1436
# %bb.1050:                             # %BZ2_decompress.split3546
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rdx
	subl	(%rcx,%rdx,4), %eax
	movw	$-11195, BasicBlockSignatureTracker # imm = 0xD445
	movw	$126, RunTimeSignatureAdjuster
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB77_1053
.LBB77_1051:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$124, %ax
	xorw	%cx, %ax
	cmpw	$-11193, %ax            # imm = 0xD447
	movq	%rdi, %r8
	movq	%rbx, %r9
	movq	%r11, %r10
	jne	.LBB77_1436
# %bb.1052:                             # %BZ2_decompress.split3544
	movl	$-4, (%r9)
	movw	$-11193, BasicBlockSignatureTracker # imm = 0xD447
	movw	$32097, RunTimeSignatureAdjuster # imm = 0x7D61
	jmp	.LBB77_1369
.LBB77_1053:                            # %Buffer__8
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4442, %ax              # imm = 0x115A
	cmpw	$-15073, %ax            # imm = 0xC51F
	jne	.LBB77_1436
# %bb.1054:                             # %BZ2_decompress.split3548
	movw	$-15073, BasicBlockSignatureTracker # imm = 0xC51F
	movw	$4442, RunTimeSignatureAdjuster # imm = 0x115A
# %bb.1055:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$45, %ax
	xorw	%cx, %ax
	cmpw	$-11160, %ax            # imm = 0xD468
	jne	.LBB77_1436
# %bb.1056:                             # %BZ2_decompress.split3848
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movslq	(%rsi), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-11160, BasicBlockSignatureTracker # imm = 0xD468
	movw	$7645, RunTimeSignatureAdjuster # imm = 0x1DDD
	jmp	.LBB77_807
.LBB77_1057:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7820, %ax              # imm = 0x1E8C
	cmpw	$-11130, %ax            # imm = 0xD486
	jne	.LBB77_1436
# %bb.1058:                             # %BZ2_decompress.split3320
	movq	(%r8), %rax
	movl	56(%rax), %eax
	movw	$-11130, BasicBlockSignatureTracker # imm = 0xD486
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_1061
# %bb.1059:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$-11117, %ax            # imm = 0xD493
	jne	.LBB77_1436
# %bb.1060:                             # %BZ2_decompress.split3552
	movq	(%r8), %rax
	movl	56(%rax), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-11117, BasicBlockSignatureTracker # imm = 0xD493
	movw	$21, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jl	.LBB77_1063
.LBB77_1061:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$-11103, %ax            # imm = 0xD4A1
	jne	.LBB77_1436
# %bb.1062:                             # %BZ2_decompress.split3550
	movl	$-4, (%r9)
	movw	$-11103, BasicBlockSignatureTracker # imm = 0xD4A1
	movw	$32135, RunTimeSignatureAdjuster # imm = 0x7D87
	jmp	.LBB77_1369
.LBB77_1063:                            # %Buffer__9
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-2115, %ax             # imm = 0xF7BD
	cmpw	$9006, %ax              # imm = 0x232E
	jne	.LBB77_1436
# %bb.1064:                             # %BZ2_decompress.split3554
	movq	%r10, %rbx
	movq	%r9, %r15
	movq	%r8, %r12
	movw	$9006, BasicBlockSignatureTracker # imm = 0x232E
	movw	$-2115, RunTimeSignatureAdjuster # imm = 0xF7BD
# %bb.1065:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$54, %ax
	xorw	%cx, %ax
	cmpw	$-11099, %ax            # imm = 0xD4A5
	movq	%r12, %rax
	movq	%rbx, %rcx
	jne	.LBB77_1436
# %bb.1066:                             # %BZ2_decompress.split3850
	movq	(%rax), %rax
	movl	$0, 1096(%rax)
	movl	$1, (%rcx)
	movw	$-11099, BasicBlockSignatureTracker # imm = 0xD4A5
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1067:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$22, %ax
	xorw	%cx, %ax
	cmpw	$-11085, %ax            # imm = 0xD4B3
	jne	.LBB77_1392
# %bb.1068:                             # %BZ2_decompress.split3556
                                        #   in Loop: Header=BB77_1067 Depth=1
	movl	(%rbx), %eax
	movw	$-11085, BasicBlockSignatureTracker # imm = 0xD4B3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jg	.LBB77_1073
# %bb.1069:                             #   in Loop: Header=BB77_1067 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$-11065, %ax            # imm = 0xD4C7
	jne	.LBB77_1392
# %bb.1070:                             # %BZ2_decompress.split3558
                                        #   in Loop: Header=BB77_1067 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	%rbx, %rsi
	movl	(%rsi), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
	movw	$-11065, BasicBlockSignatureTracker # imm = 0xD4C7
	movw	$0, RunTimeSignatureAdjuster
# %bb.1071:                             #   in Loop: Header=BB77_1067 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16, %ax
	cmpw	$-11049, %ax            # imm = 0xD4D7
	jne	.LBB77_1392
# %bb.1072:                             # %BZ2_decompress.split3562
                                        #   in Loop: Header=BB77_1067 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-11049, BasicBlockSignatureTracker # imm = 0xD4D7
	movw	$114, RunTimeSignatureAdjuster
	jmp	.LBB77_1067
.LBB77_1073:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$441, %ax               # imm = 0x1B9
	cmpw	$-10998, %ax            # imm = 0xD50A
	movq	%rbx, %rax
	jne	.LBB77_1436
# %bb.1074:                             # %BZ2_decompress.split3560
	movl	$1, (%rax)
	movw	$-10998, BasicBlockSignatureTracker # imm = 0xD50A
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1075:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$-10986, %ax            # imm = 0xD516
	jne	.LBB77_1391
# %bb.1076:                             # %BZ2_decompress.split3564
                                        #   in Loop: Header=BB77_1075 Depth=1
	movl	(%rbx), %eax
	movw	$-10986, BasicBlockSignatureTracker # imm = 0xD516
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jg	.LBB77_1081
# %bb.1077:                             #   in Loop: Header=BB77_1075 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$-10972, %ax            # imm = 0xD524
	jne	.LBB77_1391
# %bb.1078:                             # %BZ2_decompress.split3566
                                        #   in Loop: Header=BB77_1075 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	%rbx, %rsi
	movl	(%rsi), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
	movw	$-10972, BasicBlockSignatureTracker # imm = 0xD524
	movw	$0, RunTimeSignatureAdjuster
# %bb.1079:                             #   in Loop: Header=BB77_1075 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-10945, %ax            # imm = 0xD53F
	jne	.LBB77_1391
# %bb.1080:                             # %BZ2_decompress.split3570
                                        #   in Loop: Header=BB77_1075 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-10945, BasicBlockSignatureTracker # imm = 0xD53F
	movw	$53, RunTimeSignatureAdjuster
	jmp	.LBB77_1075
.LBB77_1081:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$87, %ax
	cmpw	$-10943, %ax            # imm = 0xD541
	movq	%rbx, %rax
	jne	.LBB77_1436
# %bb.1082:                             # %BZ2_decompress.split3568
	movl	$0, (%rax)
	movw	$-10943, BasicBlockSignatureTracker # imm = 0xD541
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1083:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$-10915, %ax            # imm = 0xD55D
	jne	.LBB77_1390
# %bb.1084:                             # %BZ2_decompress.split3572
                                        #   in Loop: Header=BB77_1083 Depth=1
	movl	(%rbx), %eax
	movw	$-10915, BasicBlockSignatureTracker # imm = 0xD55D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jg	.LBB77_1097
# %bb.1085:                             #   in Loop: Header=BB77_1083 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-10892, %ax            # imm = 0xD574
	jne	.LBB77_1390
# %bb.1086:                             # %BZ2_decompress.split3574
                                        #   in Loop: Header=BB77_1083 Depth=1
	movq	(%r12), %rax
	movslq	(%rbx), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movw	$-10892, BasicBlockSignatureTracker # imm = 0xD574
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB77_1089
# %bb.1087:                             #   in Loop: Header=BB77_1083 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$196, %ax
	cmpw	$-10832, %ax            # imm = 0xD5B0
	jne	.LBB77_1390
# %bb.1088:                             # %BZ2_decompress.split3580
                                        #   in Loop: Header=BB77_1083 Depth=1
	movq	(%r12), %rax
	movslq	(%rbx), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-10832, BasicBlockSignatureTracker # imm = 0xD5B0
	movw	$196, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB77_1091
.LBB77_1089:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$193, %ax
	xorw	%cx, %ax
	cmpw	$-10827, %ax            # imm = 0xD5B5
	movq	%r12, %r8
	movq	%r15, %r9
	movq	%rbx, %r10
	jne	.LBB77_1436
# %bb.1090:                             # %BZ2_decompress.split3578
	movl	$-4, (%r9)
	movw	$-10827, BasicBlockSignatureTracker # imm = 0xD5B5
	movw	$31891, RunTimeSignatureAdjuster # imm = 0x7C93
	jmp	.LBB77_1369
.LBB77_1091:                            # %Buffer__10
                                        #   in Loop: Header=BB77_1083 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17416, %ax             # imm = 0x4408
	cmpw	$-28232, %ax            # imm = 0x91B8
	jne	.LBB77_1390
# %bb.1092:                             # %BZ2_decompress.split3582
                                        #   in Loop: Header=BB77_1083 Depth=1
	movw	$-28232, BasicBlockSignatureTracker # imm = 0x91B8
	movw	$17416, RunTimeSignatureAdjuster # imm = 0x4408
# %bb.1093:                             #   in Loop: Header=BB77_1083 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$13, %ax
	xorw	%cx, %ax
	cmpw	$-10819, %ax            # imm = 0xD5BD
	jne	.LBB77_1390
# %bb.1094:                             # %BZ2_decompress.split3852
                                        #   in Loop: Header=BB77_1083 Depth=1
	movw	$-10819, BasicBlockSignatureTracker # imm = 0xD5BD
	movw	$0, RunTimeSignatureAdjuster
# %bb.1095:                             #   in Loop: Header=BB77_1083 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$-10792, %ax            # imm = 0xD5D8
	jne	.LBB77_1390
# %bb.1096:                             # %BZ2_decompress.split3584
                                        #   in Loop: Header=BB77_1083 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-10792, BasicBlockSignatureTracker # imm = 0xD5D8
	movw	$153, RunTimeSignatureAdjuster
	jmp	.LBB77_1083
.LBB77_1097:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$175, %ax
	cmpw	$-10766, %ax            # imm = 0xD5F2
	movq	%r12, %rcx
	jne	.LBB77_1436
# %bb.1098:                             # %BZ2_decompress.split3576
	movq	(%rcx), %rax
	movl	$0, 16(%rax)
	movq	(%rcx), %rax
	movb	$0, 12(%rax)
	movq	(%rcx), %rax
	movl	$-1, 3184(%rax)
	movq	(%rcx), %rax
	movl	$2, 8(%rax)
	movq	(%rcx), %rax
	movl	52(%rax), %eax
	movw	$-10766, BasicBlockSignatureTracker # imm = 0xD5F2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jl	.LBB77_1101
# %bb.1099:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-10763, %ax            # imm = 0xD5F5
	jne	.LBB77_1436
# %bb.1100:                             # %BZ2_decompress.split3586
	movabsq	$.L.str.1.72, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movw	$-10763, BasicBlockSignatureTracker # imm = 0xD5F5
	movw	$7, RunTimeSignatureAdjuster
.LBB77_1101:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1010, %ax              # imm = 0x3F2
	xorw	%cx, %ax
	cmpw	$-10752, %ax            # imm = 0xD600
	movq	%r12, %rax
	jne	.LBB77_1436
# %bb.1102:                             # %BZ2_decompress.split3588
	movq	(%rax), %rax
	movb	44(%rax), %al
	movw	$-10752, BasicBlockSignatureTracker # imm = 0xD600
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_1155
# %bb.1103:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-10744, %ax            # imm = 0xD608
	movq	%rbx, %rax
	jne	.LBB77_1436
# %bb.1104:                             # %BZ2_decompress.split3590
	movl	$0, (%rax)
	movw	$-10744, BasicBlockSignatureTracker # imm = 0xD608
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1105:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$6, %ax
	xorw	%cx, %ax
	cmpw	$-10738, %ax            # imm = 0xD60E
	jne	.LBB77_1388
# %bb.1106:                             # %BZ2_decompress.split3594
                                        #   in Loop: Header=BB77_1105 Depth=1
	movl	(%rbx), %eax
	movw	$-10738, BasicBlockSignatureTracker # imm = 0xD60E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %eax              # imm = 0x100
	jg	.LBB77_1111
# %bb.1107:                             #   in Loop: Header=BB77_1105 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$33, %ax
	cmpw	$-10705, %ax            # imm = 0xD62F
	jne	.LBB77_1388
# %bb.1108:                             # %BZ2_decompress.split3596
                                        #   in Loop: Header=BB77_1105 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	%rbx, %rsi
	movslq	(%rsi), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%rsi), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
	movw	$-10705, BasicBlockSignatureTracker # imm = 0xD62F
	movw	$0, RunTimeSignatureAdjuster
# %bb.1109:                             #   in Loop: Header=BB77_1105 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$103, %ax
	cmpw	$-10680, %ax            # imm = 0xD648
	jne	.LBB77_1388
# %bb.1110:                             # %BZ2_decompress.split3600
                                        #   in Loop: Header=BB77_1105 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-10680, BasicBlockSignatureTracker # imm = 0xD648
	movw	$64, RunTimeSignatureAdjuster
	jmp	.LBB77_1105
.LBB77_1111:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$92, %ax
	cmpw	$-10670, %ax            # imm = 0xD652
	movq	%rbx, %rax
	jne	.LBB77_1436
# %bb.1112:                             # %BZ2_decompress.split3598
	movl	$0, (%rax)
	movw	$-10670, BasicBlockSignatureTracker # imm = 0xD652
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1113:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$33, %ax
	xorw	%cx, %ax
	cmpw	$-10637, %ax            # imm = 0xD673
	jne	.LBB77_1387
# %bb.1114:                             # %BZ2_decompress.split3602
                                        #   in Loop: Header=BB77_1113 Depth=1
	movl	(%rbx), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-10637, BasicBlockSignatureTracker # imm = 0xD673
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_1125
# %bb.1115:                             #   in Loop: Header=BB77_1113 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$197, %ax
	cmpw	$-10570, %ax            # imm = 0xD6B6
	jne	.LBB77_1387
# %bb.1116:                             # %BZ2_decompress.split3604
                                        #   in Loop: Header=BB77_1113 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	3160(%rax), %rax
	movq	%rbx, %rsi
	movslq	(%rsi), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movq	(%rdx), %rax
	movzbl	(%rcx), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	(%rdx), %rcx
	movq	3160(%rcx), %rcx
	movslq	(%rsi), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	(%rsi), %eax
	andl	$1, %eax
	movw	$-10570, BasicBlockSignatureTracker # imm = 0xD6B6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1119
# %bb.1117:                             #   in Loop: Header=BB77_1113 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$66, %ax
	cmpw	$-10508, %ax            # imm = 0xD6F4
	jne	.LBB77_1387
# %bb.1118:                             # %BZ2_decompress.split3608
                                        #   in Loop: Header=BB77_1113 Depth=1
	movq	%r12, %rsi
	movq	(%rsi), %rax
	movq	3168(%rax), %rax
	movq	%rbx, %rdi
	movl	(%rdi), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	(%rsi), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	(%rsi), %rcx
	movq	3168(%rcx), %rcx
	movl	(%rdi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movw	$-10508, BasicBlockSignatureTracker # imm = 0xD6F4
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1121
.LBB77_1119:                            #   in Loop: Header=BB77_1113 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$434, %ax               # imm = 0x1B2
	cmpw	$-10492, %ax            # imm = 0xD704
	jne	.LBB77_1387
# %bb.1120:                             # %BZ2_decompress.split3610
                                        #   in Loop: Header=BB77_1113 Depth=1
	movq	%r12, %rsi
	movq	(%rsi), %rax
	movq	3168(%rax), %rax
	movq	%rbx, %rdi
	movl	(%rdi), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	(%rsi), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	(%rsi), %rcx
	movq	3168(%rcx), %rcx
	movl	(%rdi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movw	$-10492, BasicBlockSignatureTracker # imm = 0xD704
	movw	$496, RunTimeSignatureAdjuster # imm = 0x1F0
.LBB77_1121:                            #   in Loop: Header=BB77_1113 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$419, %ax               # imm = 0x1A3
	xorw	%cx, %ax
	cmpw	$-10409, %ax            # imm = 0xD757
	jne	.LBB77_1387
# %bb.1122:                             # %BZ2_decompress.split3612
                                        #   in Loop: Header=BB77_1113 Depth=1
	movq	(%r12), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
	movw	$-10409, BasicBlockSignatureTracker # imm = 0xD757
	movw	$0, RunTimeSignatureAdjuster
# %bb.1123:                             #   in Loop: Header=BB77_1113 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-10405, %ax            # imm = 0xD75B
	jne	.LBB77_1387
# %bb.1124:                             # %BZ2_decompress.split3614
                                        #   in Loop: Header=BB77_1113 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-10405, BasicBlockSignatureTracker # imm = 0xD75B
	movw	$265, RunTimeSignatureAdjuster # imm = 0x109
	jmp	.LBB77_1113
.LBB77_1125:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$301, %ax               # imm = 0x12D
	cmpw	$-10402, %ax            # imm = 0xD75E
	movq	%r12, %rdx
	movq	%rbx, %rsi
	jne	.LBB77_1436
# %bb.1126:                             # %BZ2_decompress.split3606
	movq	(%rdx), %rax
	movl	56(%rax), %eax
	movl	%eax, (%rsi)
	movq	(%rdx), %rax
	movq	3160(%rax), %rax
	movslq	(%rsi), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rdx), %rcx
	movq	3168(%rcx), %rcx
	movl	(%rsi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	(%rsi), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-10402, BasicBlockSignatureTracker # imm = 0xD75E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1127:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$51, %ax
	xorw	%cx, %ax
	cmpw	$-10387, %ax            # imm = 0xD76D
	jne	.LBB77_1386
# %bb.1128:                             # %BZ2_decompress.split3616
                                        #   in Loop: Header=BB77_1127 Depth=1
	movq	%r12, %rsi
	movq	(%rsi), %rax
	movq	3160(%rax), %rax
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movslq	(%rdi), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%rsi), %rcx
	movq	3168(%rcx), %rcx
	movl	(%rdi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	(%rdi), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-360(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rbx), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	(%rsi), %rcx
	movq	3160(%rcx), %rcx
	movslq	(%rdi), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	(%rdi), %eax
	andl	$1, %eax
	movw	$-10387, BasicBlockSignatureTracker # imm = 0xD76D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1131
# %bb.1129:                             #   in Loop: Header=BB77_1127 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$237, %ax
	cmpw	$-10368, %ax            # imm = 0xD780
	jne	.LBB77_1386
# %bb.1130:                             # %BZ2_decompress.split3618
                                        #   in Loop: Header=BB77_1127 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	3168(%rax), %rax
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	(%rbx), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	(%rdx), %rcx
	movq	3168(%rcx), %rcx
	movl	(%rsi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movw	$-10368, BasicBlockSignatureTracker # imm = 0xD780
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1133
.LBB77_1131:                            #   in Loop: Header=BB77_1127 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$226, %ax
	cmpw	$-10353, %ax            # imm = 0xD78F
	jne	.LBB77_1386
# %bb.1132:                             # %BZ2_decompress.split3620
                                        #   in Loop: Header=BB77_1127 Depth=1
	movq	%r12, %rdx
	movq	(%rdx), %rax
	movq	3168(%rax), %rax
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	(%rbx), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	(%rdx), %rcx
	movq	3168(%rcx), %rcx
	movl	(%rsi), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	movw	$-10353, BasicBlockSignatureTracker # imm = 0xD78F
	movw	$15, RunTimeSignatureAdjuster
.LBB77_1133:                            #   in Loop: Header=BB77_1127 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$31, %ax
	xorw	%cx, %ax
	cmpw	$-10337, %ax            # imm = 0xD79F
	jne	.LBB77_1386
# %bb.1134:                             # %BZ2_decompress.split3622
                                        #   in Loop: Header=BB77_1127 Depth=1
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, (%rbx)
	movq	-360(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movl	%eax, (%rcx)
	movw	$-10337, BasicBlockSignatureTracker # imm = 0xD79F
	movw	$0, RunTimeSignatureAdjuster
# %bb.1135:                             #   in Loop: Header=BB77_1127 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-10325, %ax            # imm = 0xD7AB
	jne	.LBB77_1386
# %bb.1136:                             # %BZ2_decompress.split3624
                                        #   in Loop: Header=BB77_1127 Depth=1
	movl	(%rbx), %eax
	movq	(%r12), %rcx
	movl	56(%rcx), %ecx
	movw	$-10325, BasicBlockSignatureTracker # imm = 0xD7AB
	movw	$245, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB77_1127
# %bb.1137:                             # %Buffer__11
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-25588, %ax            # imm = 0x9C0C
	cmpw	$19367, %ax             # imm = 0x4BA7
	jne	.LBB77_1436
# %bb.1138:                             # %BZ2_decompress.split3626
	movw	$19367, BasicBlockSignatureTracker # imm = 0x4BA7
	movw	$-25588, RunTimeSignatureAdjuster # imm = 0x9C0C
# %bb.1139:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$-10313, %ax            # imm = 0xD7B7
	movq	%r12, %rdx
	jne	.LBB77_1436
# %bb.1140:                             # %BZ2_decompress.split3854
	movq	(%rdx), %rax
	movl	56(%rax), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	$0, 1092(%rax)
	movq	(%rdx), %rax
	movb	20(%rax), %al
	movw	$-10313, BasicBlockSignatureTracker # imm = 0xD7B7
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_1151
# %bb.1141:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$-10308, %ax            # imm = 0xD7BC
	movq	%r12, %rcx
	jne	.LBB77_1436
# %bb.1142:                             # %BZ2_decompress.split3628
	movq	(%rcx), %rax
	movl	$0, 24(%rax)
	movq	(%rcx), %rax
	movl	$0, 28(%rax)
	movq	(%rcx), %rax
	movl	60(%rax), %edi
	movq	(%rcx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$-10308, BasicBlockSignatureTracker # imm = 0xD7BC
	movw	$-28784, RunTimeSignatureAdjuster # imm = 0x8F90
	movq	%rcx, %r14
	callq	BZ2_indexIntoF
	movw	$-10308, BasicBlockSignatureTracker # imm = 0xD7BC
	movw	$-28784, RunTimeSignatureAdjuster # imm = 0x8F90
	movq	(%r14), %rcx
	movl	%eax, 64(%rcx)
	movq	(%r14), %rax
	movq	3160(%rax), %rax
	movq	(%r14), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%r14), %rcx
	movq	3168(%rcx), %rcx
	movq	(%r14), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%r14), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%r14), %rcx
	movl	%eax, 60(%rcx)
	movq	(%r14), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%r14), %rax
	movl	24(%rax), %eax
	movw	$-10308, BasicBlockSignatureTracker # imm = 0xD7BC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1149
# %bb.1143:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$-10297, %ax            # imm = 0xD7C7
	movq	%r12, %rdx
	jne	.LBB77_1436
# %bb.1144:                             # %BZ2_decompress.split3632
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$-10297, BasicBlockSignatureTracker # imm = 0xD7C7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB77_1147
# %bb.1145:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$14, %ax
	cmpw	$-10295, %ax            # imm = 0xD7C9
	movq	%r12, %rax
	jne	.LBB77_1436
# %bb.1146:                             # %BZ2_decompress.split3636
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$-10295, BasicBlockSignatureTracker # imm = 0xD7C9
	movw	$14, RunTimeSignatureAdjuster
.LBB77_1147:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$49, %ax
	xorw	%cx, %ax
	cmpw	$-10250, %ax            # imm = 0xD7F6
	jne	.LBB77_1436
# %bb.1148:                             # %BZ2_decompress.split3638
	movw	$-10250, BasicBlockSignatureTracker # imm = 0xD7F6
	movw	$74, RunTimeSignatureAdjuster
.LBB77_1149:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$68, %ax
	xorw	%cx, %ax
	cmpw	$-10248, %ax            # imm = 0xD7F8
	movq	%r12, %rdi
	jne	.LBB77_1436
# %bb.1150:                             # %BZ2_decompress.split3634
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	(%rdi), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movw	$-10248, BasicBlockSignatureTracker # imm = 0xD7F8
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1153
.LBB77_1151:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$75, %ax
	cmpw	$-10244, %ax            # imm = 0xD7FC
	movq	%r12, %rcx
	jne	.LBB77_1436
# %bb.1152:                             # %BZ2_decompress.split3630
	movq	(%rcx), %rax
	movl	60(%rax), %edi
	movq	(%rcx), %rsi
	addq	$1096, %rsi             # imm = 0x448
	movw	$-10244, BasicBlockSignatureTracker # imm = 0xD7FC
	movw	$-28720, RunTimeSignatureAdjuster # imm = 0x8FD0
	movq	%rcx, %r14
	callq	BZ2_indexIntoF
	movw	$-10244, BasicBlockSignatureTracker # imm = 0xD7FC
	movw	$-28720, RunTimeSignatureAdjuster # imm = 0x8FD0
	movq	(%r14), %rcx
	movl	%eax, 64(%rcx)
	movq	(%r14), %rax
	movq	3160(%rax), %rax
	movq	(%r14), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	(%r14), %rcx
	movq	3168(%rcx), %rcx
	movq	(%r14), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	(%r14), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	(%r14), %rcx
	movl	%eax, 60(%rcx)
	movq	(%r14), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movw	$-10244, BasicBlockSignatureTracker # imm = 0xD7FC
	movw	$4, RunTimeSignatureAdjuster
.LBB77_1153:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4028, %ax              # imm = 0xFBC
	xorw	%cx, %ax
	cmpw	$-10172, %ax            # imm = 0xD844
	jne	.LBB77_1436
# %bb.1154:                             # %BZ2_decompress.split3640
	movw	$-10172, BasicBlockSignatureTracker # imm = 0xD844
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1179
.LBB77_1155:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3662, %ax              # imm = 0xE4E
	cmpw	$-10162, %ax            # imm = 0xD84E
	movq	%rbx, %rax
	jne	.LBB77_1436
# %bb.1156:                             # %BZ2_decompress.split3592
	movl	$0, (%rax)
	movw	$-10162, BasicBlockSignatureTracker # imm = 0xD84E
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1157:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$-10127, %ax            # imm = 0xD871
	jne	.LBB77_1389
# %bb.1158:                             # %BZ2_decompress.split3644
                                        #   in Loop: Header=BB77_1157 Depth=1
	movl	(%rbx), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-10127, BasicBlockSignatureTracker # imm = 0xD871
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB77_1163
# %bb.1159:                             #   in Loop: Header=BB77_1157 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$231, %ax
	cmpw	$-10090, %ax            # imm = 0xD896
	jne	.LBB77_1389
# %bb.1160:                             # %BZ2_decompress.split3646
                                        #   in Loop: Header=BB77_1157 Depth=1
	movq	%r12, %rdi
	movq	(%rdi), %rax
	movq	3152(%rax), %rax
	movq	%rbx, %rdx
	movslq	(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movq	-48(%rbp), %r8          # 8-byte Reload
	movb	%al, (%r8)
	movl	(%rdx), %eax
	shll	$8, %eax
	movq	(%rdi), %rcx
	movq	3152(%rcx), %rcx
	movq	(%rdi), %rdx
	movzbl	(%r8), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	(%rdi), %rax
	movzbl	(%r8), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
	movw	$-10090, BasicBlockSignatureTracker # imm = 0xD896
	movw	$0, RunTimeSignatureAdjuster
# %bb.1161:                             #   in Loop: Header=BB77_1157 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-10089, %ax            # imm = 0xD897
	jne	.LBB77_1389
# %bb.1162:                             # %BZ2_decompress.split3650
                                        #   in Loop: Header=BB77_1157 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-10089, BasicBlockSignatureTracker # imm = 0xD897
	movw	$217, RunTimeSignatureAdjuster
	jmp	.LBB77_1157
.LBB77_1163:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$196, %ax
	cmpw	$-10059, %ax            # imm = 0xD8B5
	movq	%r12, %rdx
	jne	.LBB77_1436
# %bb.1164:                             # %BZ2_decompress.split3648
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	$0, 1092(%rax)
	movq	(%rdx), %rax
	movb	20(%rax), %al
	movw	$-10059, BasicBlockSignatureTracker # imm = 0xD8B5
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	je	.LBB77_1175
# %bb.1165:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$434, %ax               # imm = 0x1B2
	cmpw	$-9977, %ax             # imm = 0xD907
	movq	%r12, %rdx
	jne	.LBB77_1436
# %bb.1166:                             # %BZ2_decompress.split3652
	movq	(%rdx), %rax
	movl	$0, 24(%rax)
	movq	(%rdx), %rax
	movl	$0, 28(%rax)
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	(%rdx), %rcx
	movl	%eax, 64(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	(%rdx), %rax
	movl	24(%rax), %eax
	movw	$-9977, BasicBlockSignatureTracker # imm = 0xD907
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1173
# %bb.1167:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-9957, %ax             # imm = 0xD91B
	movq	%r12, %rdx
	jne	.LBB77_1436
# %bb.1168:                             # %BZ2_decompress.split3656
	movq	(%rdx), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 24(%rcx)
	movq	(%rdx), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	(%rdx), %rax
	movl	28(%rax), %eax
	movw	$-9957, BasicBlockSignatureTracker # imm = 0xD91B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$512, %eax              # imm = 0x200
	jne	.LBB77_1171
# %bb.1169:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-9937, %ax             # imm = 0xD92F
	movq	%r12, %rax
	jne	.LBB77_1436
# %bb.1170:                             # %BZ2_decompress.split3660
	movq	(%rax), %rax
	movl	$0, 28(%rax)
	movw	$-9937, BasicBlockSignatureTracker # imm = 0xD92F
	movw	$52, RunTimeSignatureAdjuster
.LBB77_1171:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$34, %ax
	xorw	%cx, %ax
	cmpw	$-9927, %ax             # imm = 0xD939
	jne	.LBB77_1436
# %bb.1172:                             # %BZ2_decompress.split3662
	movw	$-9927, BasicBlockSignatureTracker # imm = 0xD939
	movw	$62, RunTimeSignatureAdjuster
.LBB77_1173:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$68, %ax
	xorw	%cx, %ax
	cmpw	$-9917, %ax             # imm = 0xD943
	movq	%r12, %rdi
	jne	.LBB77_1436
# %bb.1174:                             # %BZ2_decompress.split3658
	xorl	%eax, %eax
	movl	$1, %ecx
	movq	(%rdi), %rdx
	movl	24(%rdx), %esi
	addl	$-1, %esi
	movl	%esi, 24(%rdx)
	movq	(%rdi), %rdx
	movl	24(%rdx), %edx
	cmpl	$1, %edx
	cmovel	%ecx, %eax
	movq	(%rdi), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movw	$-9917, BasicBlockSignatureTracker # imm = 0xD943
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1177
.LBB77_1175:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$495, %ax               # imm = 0x1EF
	cmpw	$-9894, %ax             # imm = 0xD95A
	movq	%r12, %rdx
	jne	.LBB77_1436
# %bb.1176:                             # %BZ2_decompress.split3654
	movq	(%rdx), %rax
	movq	3152(%rax), %rax
	movq	(%rdx), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movl	%eax, 60(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	(%rdx), %rcx
	movl	%eax, 64(%rcx)
	movq	(%rdx), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	(%rdx), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movw	$-9894, BasicBlockSignatureTracker # imm = 0xD95A
	movw	$25, RunTimeSignatureAdjuster
.LBB77_1177:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$42, %ax
	xorw	%cx, %ax
	cmpw	$-9879, %ax             # imm = 0xD969
	jne	.LBB77_1436
# %bb.1178:                             # %BZ2_decompress.split3664
	movw	$-9879, BasicBlockSignatureTracker # imm = 0xD969
	movw	$301, RunTimeSignatureAdjuster # imm = 0x12D
.LBB77_1179:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$296, %ax               # imm = 0x128
	xorw	%cx, %ax
	cmpw	$-9876, %ax             # imm = 0xD96C
	movq	%r12, %r8
	movq	%r15, %r9
	movq	%rbx, %r10
	jne	.LBB77_1436
# %bb.1180:                             # %BZ2_decompress.split3642
	movl	$0, (%r9)
	movw	$-9876, BasicBlockSignatureTracker # imm = 0xD96C
	movw	$28746, RunTimeSignatureAdjuster # imm = 0x704A
	jmp	.LBB77_1369
.LBB77_1181:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29856, %ax             # imm = 0x74A0
	cmpw	$-9812, %ax             # imm = 0xD9AC
	jne	.LBB77_1436
# %bb.1182:                             # %BZ2_decompress.split2696
	movw	$-9812, BasicBlockSignatureTracker # imm = 0xD9AC
	movw	$28931, RunTimeSignatureAdjuster # imm = 0x7103
.LBB77_1183:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28945, %ax             # imm = 0x7111
	xorw	%cx, %ax
	cmpw	$-9794, %ax             # imm = 0xD9BE
	jne	.LBB77_1436
# %bb.1184:                             # %BZ2_decompress.split2558
	movq	(%r8), %rax
	movl	$42, 8(%rax)
	movw	$-9794, BasicBlockSignatureTracker # imm = 0xD9BE
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1185:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$124, %ax
	xorw	%cx, %ax
	cmpw	$-9790, %ax             # imm = 0xD9C2
	jne	.LBB77_1379
# %bb.1186:                             # %BZ2_decompress.split3666
                                        #   in Loop: Header=BB77_1185 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-9790, BasicBlockSignatureTracker # imm = 0xD9C2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1189
# %bb.1187:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$966, %ax               # imm = 0x3C6
	cmpw	$-9724, %ax             # imm = 0xDA04
	jne	.LBB77_1436
# %bb.1188:                             # %BZ2_decompress.split3668
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, (%r13)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%r13), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-9724, BasicBlockSignatureTracker # imm = 0xDA04
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1199
.LBB77_1189:                            #   in Loop: Header=BB77_1185 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$996, %ax               # imm = 0x3E4
	cmpw	$-9690, %ax             # imm = 0xDA26
	jne	.LBB77_1379
# %bb.1190:                             # %BZ2_decompress.split3670
                                        #   in Loop: Header=BB77_1185 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-9690, BasicBlockSignatureTracker # imm = 0xDA26
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1193
# %bb.1191:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-9684, %ax             # imm = 0xDA2C
	jne	.LBB77_1436
# %bb.1192:                             # %BZ2_decompress.split3674
	movl	$0, (%r9)
	movw	$-9684, BasicBlockSignatureTracker # imm = 0xDA2C
	movw	$29450, RunTimeSignatureAdjuster # imm = 0x730A
	jmp	.LBB77_1369
.LBB77_1193:                            #   in Loop: Header=BB77_1185 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$107, %ax
	cmpw	$-9651, %ax             # imm = 0xDA4D
	jne	.LBB77_1379
# %bb.1194:                             # %BZ2_decompress.split3676
                                        #   in Loop: Header=BB77_1185 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-9651, BasicBlockSignatureTracker # imm = 0xDA4D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1197
# %bb.1195:                             #   in Loop: Header=BB77_1185 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-9641, %ax             # imm = 0xDA57
	movq	%rdx, %rax
	jne	.LBB77_1379
# %bb.1196:                             # %BZ2_decompress.split3678
                                        #   in Loop: Header=BB77_1185 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-9641, BasicBlockSignatureTracker # imm = 0xDA57
	movw	$26, RunTimeSignatureAdjuster
.LBB77_1197:                            #   in Loop: Header=BB77_1185 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$19, %ax
	xorw	%cx, %ax
	cmpw	$-9634, %ax             # imm = 0xDA5E
	movq	%rdx, %r8
	jne	.LBB77_1379
# %bb.1198:                             # %BZ2_decompress.split3680
                                        #   in Loop: Header=BB77_1185 Depth=1
	movw	$-9634, BasicBlockSignatureTracker # imm = 0xDA5E
	movw	$992, RunTimeSignatureAdjuster # imm = 0x3E0
	jmp	.LBB77_1185
.LBB77_1199:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$-9631, %ax             # imm = 0xDA61
	jne	.LBB77_1436
# %bb.1200:                             # %BZ2_decompress.split3672
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-9631, BasicBlockSignatureTracker # imm = 0xDA61
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$114, %eax
	je	.LBB77_1203
# %bb.1201:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-9618, %ax             # imm = 0xDA6E
	jne	.LBB77_1436
# %bb.1202:                             # %BZ2_decompress.split3682
	movl	$-4, (%r9)
	movw	$-9618, BasicBlockSignatureTracker # imm = 0xDA6E
	movw	$29512, RunTimeSignatureAdjuster # imm = 0x7348
	jmp	.LBB77_1369
.LBB77_1203:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-9603, %ax             # imm = 0xDA7D
	jne	.LBB77_1436
# %bb.1204:                             # %BZ2_decompress.split3684
	movw	$-9603, BasicBlockSignatureTracker # imm = 0xDA7D
	movw	$29394, RunTimeSignatureAdjuster # imm = 0x72D2
.LBB77_1205:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29299, %ax             # imm = 0x7273
	xorw	%cx, %ax
	cmpw	$-9508, %ax             # imm = 0xDADC
	jne	.LBB77_1436
# %bb.1206:                             # %BZ2_decompress.split2560
	movq	(%r8), %rax
	movl	$43, 8(%rax)
	movw	$-9508, BasicBlockSignatureTracker # imm = 0xDADC
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1207:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$63, %ax
	xorw	%cx, %ax
	cmpw	$-9501, %ax             # imm = 0xDAE3
	jne	.LBB77_1378
# %bb.1208:                             # %BZ2_decompress.split3686
                                        #   in Loop: Header=BB77_1207 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-9501, BasicBlockSignatureTracker # imm = 0xDAE3
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1211
# %bb.1209:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$8, %ax
	cmpw	$-9493, %ax             # imm = 0xDAEB
	jne	.LBB77_1436
# %bb.1210:                             # %BZ2_decompress.split3688
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, (%r12)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%r12), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-9493, BasicBlockSignatureTracker # imm = 0xDAEB
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1221
.LBB77_1211:                            #   in Loop: Header=BB77_1207 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-9474, %ax             # imm = 0xDAFE
	jne	.LBB77_1378
# %bb.1212:                             # %BZ2_decompress.split3690
                                        #   in Loop: Header=BB77_1207 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-9474, BasicBlockSignatureTracker # imm = 0xDAFE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1215
# %bb.1213:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$436, %ax               # imm = 0x1B4
	cmpw	$-9398, %ax             # imm = 0xDB4A
	jne	.LBB77_1436
# %bb.1214:                             # %BZ2_decompress.split3694
	movl	$0, (%r9)
	movw	$-9398, BasicBlockSignatureTracker # imm = 0xDB4A
	movw	$29292, RunTimeSignatureAdjuster # imm = 0x726C
	jmp	.LBB77_1369
.LBB77_1215:                            #   in Loop: Header=BB77_1207 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$392, %ax               # imm = 0x188
	cmpw	$-9354, %ax             # imm = 0xDB76
	jne	.LBB77_1378
# %bb.1216:                             # %BZ2_decompress.split3696
                                        #   in Loop: Header=BB77_1207 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-9354, BasicBlockSignatureTracker # imm = 0xDB76
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1219
# %bb.1217:                             #   in Loop: Header=BB77_1207 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$243, %ax
	cmpw	$-9339, %ax             # imm = 0xDB85
	movq	%rdx, %rax
	jne	.LBB77_1378
# %bb.1218:                             # %BZ2_decompress.split3698
                                        #   in Loop: Header=BB77_1207 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-9339, BasicBlockSignatureTracker # imm = 0xDB85
	movw	$243, RunTimeSignatureAdjuster
.LBB77_1219:                            #   in Loop: Header=BB77_1207 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$227, %ax
	xorw	%cx, %ax
	cmpw	$-9323, %ax             # imm = 0xDB95
	movq	%rdx, %r8
	jne	.LBB77_1378
# %bb.1220:                             # %BZ2_decompress.split3700
                                        #   in Loop: Header=BB77_1207 Depth=1
	movw	$-9323, BasicBlockSignatureTracker # imm = 0xDB95
	movw	$329, RunTimeSignatureAdjuster # imm = 0x149
	jmp	.LBB77_1207
.LBB77_1221:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$331, %ax               # imm = 0x14B
	cmpw	$-9312, %ax             # imm = 0xDBA0
	jne	.LBB77_1436
# %bb.1222:                             # %BZ2_decompress.split3692
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-9312, BasicBlockSignatureTracker # imm = 0xDBA0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$69, %eax
	je	.LBB77_1225
# %bb.1223:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-9290, %ax             # imm = 0xDBB6
	jne	.LBB77_1436
# %bb.1224:                             # %BZ2_decompress.split3702
	movl	$-4, (%r9)
	movw	$-9290, BasicBlockSignatureTracker # imm = 0xDBB6
	movw	$29328, RunTimeSignatureAdjuster # imm = 0x7290
	jmp	.LBB77_1369
.LBB77_1225:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$-9267, %ax             # imm = 0xDBCD
	jne	.LBB77_1436
# %bb.1226:                             # %BZ2_decompress.split3704
	movw	$-9267, BasicBlockSignatureTracker # imm = 0xDBCD
	movw	$29538, RunTimeSignatureAdjuster # imm = 0x7362
.LBB77_1227:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$29566, %ax             # imm = 0x737E
	xorw	%cx, %ax
	cmpw	$-9263, %ax             # imm = 0xDBD1
	jne	.LBB77_1436
# %bb.1228:                             # %BZ2_decompress.split2562
	movq	(%r8), %rax
	movl	$44, 8(%rax)
	movw	$-9263, BasicBlockSignatureTracker # imm = 0xDBD1
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1229:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$53, %ax
	xorw	%cx, %ax
	cmpw	$-9244, %ax             # imm = 0xDBE4
	jne	.LBB77_1377
# %bb.1230:                             # %BZ2_decompress.split3706
                                        #   in Loop: Header=BB77_1229 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-9244, BasicBlockSignatureTracker # imm = 0xDBE4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1233
# %bb.1231:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2023, %ax              # imm = 0x7E7
	cmpw	$-9213, %ax             # imm = 0xDC03
	jne	.LBB77_1436
# %bb.1232:                             # %BZ2_decompress.split3708
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-520(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-9213, BasicBlockSignatureTracker # imm = 0xDC03
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1243
.LBB77_1233:                            #   in Loop: Header=BB77_1229 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2032, %ax              # imm = 0x7F0
	cmpw	$-9196, %ax             # imm = 0xDC14
	jne	.LBB77_1377
# %bb.1234:                             # %BZ2_decompress.split3710
                                        #   in Loop: Header=BB77_1229 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-9196, BasicBlockSignatureTracker # imm = 0xDC14
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1237
# %bb.1235:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-9182, %ax             # imm = 0xDC22
	jne	.LBB77_1436
# %bb.1236:                             # %BZ2_decompress.split3714
	movl	$0, (%r9)
	movw	$-9182, BasicBlockSignatureTracker # imm = 0xDC22
	movw	$29956, RunTimeSignatureAdjuster # imm = 0x7504
	jmp	.LBB77_1369
.LBB77_1237:                            #   in Loop: Header=BB77_1229 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$69, %ax
	cmpw	$-9135, %ax             # imm = 0xDC51
	jne	.LBB77_1377
# %bb.1238:                             # %BZ2_decompress.split3716
                                        #   in Loop: Header=BB77_1229 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-9135, BasicBlockSignatureTracker # imm = 0xDC51
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1241
# %bb.1239:                             #   in Loop: Header=BB77_1229 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-9115, %ax             # imm = 0xDC65
	movq	%rdx, %rax
	jne	.LBB77_1377
# %bb.1240:                             # %BZ2_decompress.split3718
                                        #   in Loop: Header=BB77_1229 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-9115, BasicBlockSignatureTracker # imm = 0xDC65
	movw	$52, RunTimeSignatureAdjuster
.LBB77_1241:                            #   in Loop: Header=BB77_1229 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$204, %ax
	xorw	%cx, %ax
	cmpw	$-9059, %ax             # imm = 0xDC9D
	movq	%rdx, %r8
	jne	.LBB77_1377
# %bb.1242:                             # %BZ2_decompress.split3720
                                        #   in Loop: Header=BB77_1229 Depth=1
	movw	$-9059, BasicBlockSignatureTracker # imm = 0xDC9D
	movw	$1868, RunTimeSignatureAdjuster # imm = 0x74C
	jmp	.LBB77_1229
.LBB77_1243:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$182, %ax
	cmpw	$-9035, %ax             # imm = 0xDCB5
	jne	.LBB77_1436
# %bb.1244:                             # %BZ2_decompress.split3712
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-9035, BasicBlockSignatureTracker # imm = 0xDCB5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$56, %eax
	je	.LBB77_1247
# %bb.1245:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-9028, %ax             # imm = 0xDCBC
	jne	.LBB77_1436
# %bb.1246:                             # %BZ2_decompress.split3722
	movl	$-4, (%r9)
	movw	$-9028, BasicBlockSignatureTracker # imm = 0xDCBC
	movw	$30106, RunTimeSignatureAdjuster # imm = 0x759A
	jmp	.LBB77_1369
.LBB77_1247:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$70, %ax
	cmpw	$-8973, %ax             # imm = 0xDCF3
	jne	.LBB77_1436
# %bb.1248:                             # %BZ2_decompress.split3724
	movw	$-8973, BasicBlockSignatureTracker # imm = 0xDCF3
	movw	$29788, RunTimeSignatureAdjuster # imm = 0x745C
.LBB77_1249:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30127, %ax             # imm = 0x75AF
	xorw	%cx, %ax
	cmpw	$-8960, %ax             # imm = 0xDD00
	jne	.LBB77_1436
# %bb.1250:                             # %BZ2_decompress.split2564
	movq	(%r8), %rax
	movl	$45, 8(%rax)
	movw	$-8960, BasicBlockSignatureTracker # imm = 0xDD00
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1251:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$55, %ax
	xorw	%cx, %ax
	cmpw	$-8905, %ax             # imm = 0xDD37
	jne	.LBB77_1376
# %bb.1252:                             # %BZ2_decompress.split3726
                                        #   in Loop: Header=BB77_1251 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-8905, BasicBlockSignatureTracker # imm = 0xDD37
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1255
# %bb.1253:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$80, %ax
	cmpw	$-8857, %ax             # imm = 0xDD67
	jne	.LBB77_1436
# %bb.1254:                             # %BZ2_decompress.split3728
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-536(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-8857, BasicBlockSignatureTracker # imm = 0xDD67
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1265
.LBB77_1255:                            #   in Loop: Header=BB77_1251 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$90, %ax
	cmpw	$-8851, %ax             # imm = 0xDD6D
	jne	.LBB77_1376
# %bb.1256:                             # %BZ2_decompress.split3730
                                        #   in Loop: Header=BB77_1251 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-8851, BasicBlockSignatureTracker # imm = 0xDD6D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1259
# %bb.1257:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-8847, %ax             # imm = 0xDD71
	jne	.LBB77_1436
# %bb.1258:                             # %BZ2_decompress.split3734
	movl	$0, (%r9)
	movw	$-8847, BasicBlockSignatureTracker # imm = 0xDD71
	movw	$29783, RunTimeSignatureAdjuster # imm = 0x7457
	jmp	.LBB77_1369
.LBB77_1259:                            #   in Loop: Header=BB77_1251 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$231, %ax
	cmpw	$-8822, %ax             # imm = 0xDD8A
	jne	.LBB77_1376
# %bb.1260:                             # %BZ2_decompress.split3736
                                        #   in Loop: Header=BB77_1251 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-8822, BasicBlockSignatureTracker # imm = 0xDD8A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1263
# %bb.1261:                             #   in Loop: Header=BB77_1251 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-8803, %ax             # imm = 0xDD9D
	movq	%rdx, %rax
	jne	.LBB77_1376
# %bb.1262:                             # %BZ2_decompress.split3738
                                        #   in Loop: Header=BB77_1251 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-8803, BasicBlockSignatureTracker # imm = 0xDD9D
	movw	$23, RunTimeSignatureAdjuster
.LBB77_1263:                            #   in Loop: Header=BB77_1251 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$95, %ax
	xorw	%cx, %ax
	cmpw	$-8747, %ax             # imm = 0xDDD5
	movq	%rdx, %r8
	jne	.LBB77_1376
# %bb.1264:                             # %BZ2_decompress.split3740
                                        #   in Loop: Header=BB77_1251 Depth=1
	movw	$-8747, BasicBlockSignatureTracker # imm = 0xDDD5
	movw	$213, RunTimeSignatureAdjuster
	jmp	.LBB77_1251
.LBB77_1265:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$142, %ax
	cmpw	$-8727, %ax             # imm = 0xDDE9
	jne	.LBB77_1436
# %bb.1266:                             # %BZ2_decompress.split3732
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-8727, BasicBlockSignatureTracker # imm = 0xDDE9
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$80, %eax
	je	.LBB77_1269
# %bb.1267:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$992, %ax               # imm = 0x3E0
	cmpw	$-8695, %ax             # imm = 0xDE09
	jne	.LBB77_1436
# %bb.1268:                             # %BZ2_decompress.split3742
	movl	$-4, (%r9)
	movw	$-8695, BasicBlockSignatureTracker # imm = 0xDE09
	movw	$30511, RunTimeSignatureAdjuster # imm = 0x772F
	jmp	.LBB77_1369
.LBB77_1269:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1016, %ax              # imm = 0x3F8
	cmpw	$-8687, %ax             # imm = 0xDE11
	jne	.LBB77_1436
# %bb.1270:                             # %BZ2_decompress.split3744
	movw	$-8687, BasicBlockSignatureTracker # imm = 0xDE11
	movw	$30398, RunTimeSignatureAdjuster # imm = 0x76BE
.LBB77_1271:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30365, %ax             # imm = 0x769D
	xorw	%cx, %ax
	cmpw	$-8654, %ax             # imm = 0xDE32
	jne	.LBB77_1436
# %bb.1272:                             # %BZ2_decompress.split2566
	movq	(%r8), %rax
	movl	$46, 8(%rax)
	movw	$-8654, BasicBlockSignatureTracker # imm = 0xDE32
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1273:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$105, %ax
	xorw	%cx, %ax
	cmpw	$-8613, %ax             # imm = 0xDE5B
	jne	.LBB77_1375
# %bb.1274:                             # %BZ2_decompress.split3746
                                        #   in Loop: Header=BB77_1273 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-8613, BasicBlockSignatureTracker # imm = 0xDE5B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1277
# %bb.1275:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-8610, %ax             # imm = 0xDE5E
	jne	.LBB77_1436
# %bb.1276:                             # %BZ2_decompress.split3748
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-552(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-8610, BasicBlockSignatureTracker # imm = 0xDE5E
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1287
.LBB77_1277:                            #   in Loop: Header=BB77_1273 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$195, %ax
	cmpw	$-8552, %ax             # imm = 0xDE98
	jne	.LBB77_1375
# %bb.1278:                             # %BZ2_decompress.split3750
                                        #   in Loop: Header=BB77_1273 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-8552, BasicBlockSignatureTracker # imm = 0xDE98
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1281
# %bb.1279:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-8551, %ax             # imm = 0xDE99
	jne	.LBB77_1436
# %bb.1280:                             # %BZ2_decompress.split3754
	movl	$0, (%r9)
	movw	$-8551, BasicBlockSignatureTracker # imm = 0xDE99
	movw	$30655, RunTimeSignatureAdjuster # imm = 0x77BF
	jmp	.LBB77_1369
.LBB77_1281:                            #   in Loop: Header=BB77_1273 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$-8534, %ax             # imm = 0xDEAA
	jne	.LBB77_1375
# %bb.1282:                             # %BZ2_decompress.split3756
                                        #   in Loop: Header=BB77_1273 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-8534, BasicBlockSignatureTracker # imm = 0xDEAA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1285
# %bb.1283:                             #   in Loop: Header=BB77_1273 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-8527, %ax             # imm = 0xDEB1
	movq	%rdx, %rax
	jne	.LBB77_1375
# %bb.1284:                             # %BZ2_decompress.split3758
                                        #   in Loop: Header=BB77_1273 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-8527, BasicBlockSignatureTracker # imm = 0xDEB1
	movw	$27, RunTimeSignatureAdjuster
.LBB77_1285:                            #   in Loop: Header=BB77_1273 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$80, %ax
	xorw	%cx, %ax
	cmpw	$-8454, %ax             # imm = 0xDEFA
	movq	%rdx, %r8
	jne	.LBB77_1375
# %bb.1286:                             # %BZ2_decompress.split3760
                                        #   in Loop: Header=BB77_1273 Depth=1
	movw	$-8454, BasicBlockSignatureTracker # imm = 0xDEFA
	movw	$200, RunTimeSignatureAdjuster
	jmp	.LBB77_1273
.LBB77_1287:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$165, %ax
	cmpw	$-8453, %ax             # imm = 0xDEFB
	jne	.LBB77_1436
# %bb.1288:                             # %BZ2_decompress.split3752
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	movw	$-8453, BasicBlockSignatureTracker # imm = 0xDEFB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$144, %eax
	je	.LBB77_1291
# %bb.1289:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$449, %ax               # imm = 0x1C1
	cmpw	$-8390, %ax             # imm = 0xDF3A
	jne	.LBB77_1436
# %bb.1290:                             # %BZ2_decompress.split3762
	movl	$-4, (%r9)
	movw	$-8390, BasicBlockSignatureTracker # imm = 0xDF3A
	movw	$30236, RunTimeSignatureAdjuster # imm = 0x761C
	jmp	.LBB77_1369
.LBB77_1291:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$445, %ax               # imm = 0x1BD
	cmpw	$-8378, %ax             # imm = 0xDF46
	jne	.LBB77_1436
# %bb.1292:                             # %BZ2_decompress.split3764
	movq	(%r8), %rax
	movl	$0, 3180(%rax)
	movw	$-8378, BasicBlockSignatureTracker # imm = 0xDF46
	movw	$30697, RunTimeSignatureAdjuster # imm = 0x77E9
.LBB77_1293:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30711, %ax             # imm = 0x77F7
	xorw	%cx, %ax
	cmpw	$-8360, %ax             # imm = 0xDF58
	jne	.LBB77_1436
# %bb.1294:                             # %BZ2_decompress.split2568
	movq	(%r8), %rax
	movl	$47, 8(%rax)
	movw	$-8360, BasicBlockSignatureTracker # imm = 0xDF58
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1295:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$40, %ax
	xorw	%cx, %ax
	cmpw	$-8336, %ax             # imm = 0xDF70
	jne	.LBB77_1374
# %bb.1296:                             # %BZ2_decompress.split3766
                                        #   in Loop: Header=BB77_1295 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-8336, BasicBlockSignatureTracker # imm = 0xDF70
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1299
# %bb.1297:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-8335, %ax             # imm = 0xDF71
	jne	.LBB77_1436
# %bb.1298:                             # %BZ2_decompress.split3768
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-568(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-8335, BasicBlockSignatureTracker # imm = 0xDF71
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1309
.LBB77_1299:                            #   in Loop: Header=BB77_1295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$242, %ax
	cmpw	$-8318, %ax             # imm = 0xDF82
	jne	.LBB77_1374
# %bb.1300:                             # %BZ2_decompress.split3770
                                        #   in Loop: Header=BB77_1295 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-8318, BasicBlockSignatureTracker # imm = 0xDF82
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1303
# %bb.1301:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$34, %ax
	cmpw	$-8288, %ax             # imm = 0xDFA0
	jne	.LBB77_1436
# %bb.1302:                             # %BZ2_decompress.split3774
	movl	$0, (%r9)
	movw	$-8288, BasicBlockSignatureTracker # imm = 0xDFA0
	movw	$30342, RunTimeSignatureAdjuster # imm = 0x7686
	jmp	.LBB77_1369
.LBB77_1303:                            #   in Loop: Header=BB77_1295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$-8283, %ax             # imm = 0xDFA5
	jne	.LBB77_1374
# %bb.1304:                             # %BZ2_decompress.split3776
                                        #   in Loop: Header=BB77_1295 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-8283, BasicBlockSignatureTracker # imm = 0xDFA5
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1307
# %bb.1305:                             #   in Loop: Header=BB77_1295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$106, %ax
	cmpw	$-8241, %ax             # imm = 0xDFCF
	movq	%rdx, %rax
	jne	.LBB77_1374
# %bb.1306:                             # %BZ2_decompress.split3778
                                        #   in Loop: Header=BB77_1295 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-8241, BasicBlockSignatureTracker # imm = 0xDFCF
	movw	$106, RunTimeSignatureAdjuster
.LBB77_1307:                            #   in Loop: Header=BB77_1295 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$127, %ax
	xorw	%cx, %ax
	cmpw	$-8230, %ax             # imm = 0xDFDA
	movq	%rdx, %r8
	jne	.LBB77_1374
# %bb.1308:                             # %BZ2_decompress.split3780
                                        #   in Loop: Header=BB77_1295 Depth=1
	movw	$-8230, BasicBlockSignatureTracker # imm = 0xDFDA
	movw	$130, RunTimeSignatureAdjuster
	jmp	.LBB77_1295
.LBB77_1309:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$145, %ax
	cmpw	$-8224, %ax             # imm = 0xDFE0
	jne	.LBB77_1436
# %bb.1310:                             # %BZ2_decompress.split3772
	movq	(%r8), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3180(%rcx)
	movw	$-8224, BasicBlockSignatureTracker # imm = 0xDFE0
	movw	$30543, RunTimeSignatureAdjuster # imm = 0x774F
.LBB77_1311:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30537, %ax             # imm = 0x7749
	xorw	%cx, %ax
	cmpw	$-8218, %ax             # imm = 0xDFE6
	jne	.LBB77_1436
# %bb.1312:                             # %BZ2_decompress.split2570
	movq	(%r8), %rax
	movl	$48, 8(%rax)
	movw	$-8218, BasicBlockSignatureTracker # imm = 0xDFE6
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1313:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$14, %ax
	xorw	%cx, %ax
	cmpw	$-8216, %ax             # imm = 0xDFE8
	jne	.LBB77_1373
# %bb.1314:                             # %BZ2_decompress.split3782
                                        #   in Loop: Header=BB77_1313 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-8216, BasicBlockSignatureTracker # imm = 0xDFE8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1317
# %bb.1315:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-8196, %ax             # imm = 0xDFFC
	jne	.LBB77_1436
# %bb.1316:                             # %BZ2_decompress.split3784
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-592(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-8196, BasicBlockSignatureTracker # imm = 0xDFFC
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1327
.LBB77_1317:                            #   in Loop: Header=BB77_1313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16350, %ax             # imm = 0x3FDE
	cmpw	$-8138, %ax             # imm = 0xE036
	jne	.LBB77_1373
# %bb.1318:                             # %BZ2_decompress.split3786
                                        #   in Loop: Header=BB77_1313 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-8138, BasicBlockSignatureTracker # imm = 0xE036
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1321
# %bb.1319:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$116, %ax
	cmpw	$-8126, %ax             # imm = 0xE042
	jne	.LBB77_1436
# %bb.1320:                             # %BZ2_decompress.split3790
	movl	$0, (%r9)
	movw	$-8126, BasicBlockSignatureTracker # imm = 0xE042
	movw	$18788, RunTimeSignatureAdjuster # imm = 0x4964
	jmp	.LBB77_1369
.LBB77_1321:                            #   in Loop: Header=BB77_1313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$121, %ax
	cmpw	$-8113, %ax             # imm = 0xE04F
	jne	.LBB77_1373
# %bb.1322:                             # %BZ2_decompress.split3792
                                        #   in Loop: Header=BB77_1313 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-8113, BasicBlockSignatureTracker # imm = 0xE04F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1325
# %bb.1323:                             #   in Loop: Header=BB77_1313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$51, %ax
	cmpw	$-8068, %ax             # imm = 0xE07C
	movq	%rdx, %rax
	jne	.LBB77_1373
# %bb.1324:                             # %BZ2_decompress.split3794
                                        #   in Loop: Header=BB77_1313 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-8068, BasicBlockSignatureTracker # imm = 0xE07C
	movw	$51, RunTimeSignatureAdjuster
.LBB77_1325:                            #   in Loop: Header=BB77_1313 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$217, %ax
	xorw	%cx, %ax
	cmpw	$-8042, %ax             # imm = 0xE096
	movq	%rdx, %r8
	jne	.LBB77_1373
# %bb.1326:                             # %BZ2_decompress.split3796
                                        #   in Loop: Header=BB77_1313 Depth=1
	movw	$-8042, BasicBlockSignatureTracker # imm = 0xE096
	movw	$16240, RunTimeSignatureAdjuster # imm = 0x3F70
	jmp	.LBB77_1313
.LBB77_1327:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$16212, %ax             # imm = 0x3F54
	cmpw	$-8024, %ax             # imm = 0xE0A8
	jne	.LBB77_1436
# %bb.1328:                             # %BZ2_decompress.split3788
	movq	(%r8), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3180(%rcx)
	movw	$-8024, BasicBlockSignatureTracker # imm = 0xE0A8
	movw	$18439, RunTimeSignatureAdjuster # imm = 0x4807
.LBB77_1329:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$18437, %ax             # imm = 0x4805
	xorw	%cx, %ax
	cmpw	$-8022, %ax             # imm = 0xE0AA
	jne	.LBB77_1436
# %bb.1330:                             # %BZ2_decompress.split2572
	movq	(%r8), %rax
	movl	$49, 8(%rax)
	movw	$-8022, BasicBlockSignatureTracker # imm = 0xE0AA
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1331:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1, %ax
	xorw	%cx, %ax
	cmpw	$-8021, %ax             # imm = 0xE0AB
	jne	.LBB77_1372
# %bb.1332:                             # %BZ2_decompress.split3798
                                        #   in Loop: Header=BB77_1331 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-8021, BasicBlockSignatureTracker # imm = 0xE0AB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1335
# %bb.1333:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-8009, %ax             # imm = 0xE0B7
	jne	.LBB77_1436
# %bb.1334:                             # %BZ2_decompress.split3800
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-608(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-8009, BasicBlockSignatureTracker # imm = 0xE0B7
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1345
.LBB77_1335:                            #   in Loop: Header=BB77_1331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$109, %ax
	cmpw	$-7994, %ax             # imm = 0xE0C6
	jne	.LBB77_1372
# %bb.1336:                             # %BZ2_decompress.split3802
                                        #   in Loop: Header=BB77_1331 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-7994, BasicBlockSignatureTracker # imm = 0xE0C6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1339
# %bb.1337:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-7983, %ax             # imm = 0xE0D1
	jne	.LBB77_1436
# %bb.1338:                             # %BZ2_decompress.split3806
	movl	$0, (%r9)
	movw	$-7983, BasicBlockSignatureTracker # imm = 0xE0D1
	movw	$18935, RunTimeSignatureAdjuster # imm = 0x49F7
	jmp	.LBB77_1369
.LBB77_1339:                            #   in Loop: Header=BB77_1331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$27, %ax
	cmpw	$-7971, %ax             # imm = 0xE0DD
	jne	.LBB77_1372
# %bb.1340:                             # %BZ2_decompress.split3808
                                        #   in Loop: Header=BB77_1331 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-7971, BasicBlockSignatureTracker # imm = 0xE0DD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1343
# %bb.1341:                             #   in Loop: Header=BB77_1331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$-7968, %ax             # imm = 0xE0E0
	movq	%rdx, %rax
	jne	.LBB77_1372
# %bb.1342:                             # %BZ2_decompress.split3810
                                        #   in Loop: Header=BB77_1331 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-7968, BasicBlockSignatureTracker # imm = 0xE0E0
	movw	$61, RunTimeSignatureAdjuster
.LBB77_1343:                            #   in Loop: Header=BB77_1331 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$32, %ax
	xorw	%cx, %ax
	cmpw	$-7939, %ax             # imm = 0xE0FD
	movq	%rdx, %r8
	jne	.LBB77_1372
# %bb.1344:                             # %BZ2_decompress.split3812
                                        #   in Loop: Header=BB77_1331 Depth=1
	movw	$-7939, BasicBlockSignatureTracker # imm = 0xE0FD
	movw	$87, RunTimeSignatureAdjuster
	jmp	.LBB77_1331
.LBB77_1345:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$386, %ax               # imm = 0x182
	cmpw	$-7883, %ax             # imm = 0xE135
	jne	.LBB77_1436
# %bb.1346:                             # %BZ2_decompress.split3804
	movq	(%r8), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3180(%rcx)
	movw	$-7883, BasicBlockSignatureTracker # imm = 0xE135
	movw	$18842, RunTimeSignatureAdjuster # imm = 0x499A
.LBB77_1347:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$18834, %ax             # imm = 0x4992
	xorw	%cx, %ax
	cmpw	$-7875, %ax             # imm = 0xE13D
	jne	.LBB77_1436
# %bb.1348:                             # %BZ2_decompress.split2574
	movq	(%r8), %rax
	movl	$50, 8(%rax)
	movw	$-7875, BasicBlockSignatureTracker # imm = 0xE13D
	movw	$0, RunTimeSignatureAdjuster
.LBB77_1349:                            # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$123, %ax
	xorw	%cx, %ax
	cmpw	$-7866, %ax             # imm = 0xE146
	jne	.LBB77_1371
# %bb.1350:                             # %BZ2_decompress.split3814
                                        #   in Loop: Header=BB77_1349 Depth=1
	movq	(%r8), %rax
	movl	36(%rax), %eax
	movw	$-7866, BasicBlockSignatureTracker # imm = 0xE146
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$8, %eax
	jl	.LBB77_1353
# %bb.1351:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-7846, %ax             # imm = 0xE15A
	jne	.LBB77_1436
# %bb.1352:                             # %BZ2_decompress.split3816
	movq	(%r8), %rax
	movl	32(%rax), %eax
	movq	(%r8), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def %cl killed %ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	(%rdx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movb	%al, (%rcx)
	movw	$-7846, BasicBlockSignatureTracker # imm = 0xE15A
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB77_1363
.LBB77_1353:                            #   in Loop: Header=BB77_1349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$-7835, %ax             # imm = 0xE165
	jne	.LBB77_1371
# %bb.1354:                             # %BZ2_decompress.split3818
                                        #   in Loop: Header=BB77_1349 Depth=1
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	movw	$-7835, BasicBlockSignatureTracker # imm = 0xE165
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1357
# %bb.1355:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$26, %ax
	cmpw	$-7809, %ax             # imm = 0xE17F
	jne	.LBB77_1436
# %bb.1356:                             # %BZ2_decompress.split3822
	movl	$0, (%r9)
	movw	$-7809, BasicBlockSignatureTracker # imm = 0xE17F
	movw	$18521, RunTimeSignatureAdjuster # imm = 0x4859
	jmp	.LBB77_1369
.LBB77_1357:                            #   in Loop: Header=BB77_1349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$194, %ax
	cmpw	$-7769, %ax             # imm = 0xE1A7
	jne	.LBB77_1371
# %bb.1358:                             # %BZ2_decompress.split3824
                                        #   in Loop: Header=BB77_1349 Depth=1
	movq	(%r8), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	(%r8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 32(%rcx)
	movq	(%r8), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	%r8, %rdx
	movq	(%r8), %rax
	movq	(%rax), %rax
	movl	12(%rax), %eax
	movw	$-7769, BasicBlockSignatureTracker # imm = 0xE1A7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB77_1361
# %bb.1359:                             #   in Loop: Header=BB77_1349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$11, %ax
	cmpw	$-7764, %ax             # imm = 0xE1AC
	movq	%rdx, %rax
	jne	.LBB77_1371
# %bb.1360:                             # %BZ2_decompress.split3826
                                        #   in Loop: Header=BB77_1349 Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	movw	$-7764, BasicBlockSignatureTracker # imm = 0xE1AC
	movw	$11, RunTimeSignatureAdjuster
.LBB77_1361:                            #   in Loop: Header=BB77_1349 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$22, %ax
	xorw	%cx, %ax
	cmpw	$-7759, %ax             # imm = 0xE1B1
	movq	%rdx, %r8
	jne	.LBB77_1371
# %bb.1362:                             # %BZ2_decompress.split3828
                                        #   in Loop: Header=BB77_1349 Depth=1
	movw	$-7759, BasicBlockSignatureTracker # imm = 0xE1B1
	movw	$140, RunTimeSignatureAdjuster
	jmp	.LBB77_1349
.LBB77_1363:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$237, %ax
	cmpw	$-7753, %ax             # imm = 0xE1B7
	jne	.LBB77_1436
# %bb.1364:                             # %BZ2_decompress.split3820
	movq	(%r8), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	(%r8), %rcx
	movl	%eax, 3180(%rcx)
	movq	(%r8), %rax
	movl	$1, 8(%rax)
	movl	$4, (%r9)
	movw	$-7753, BasicBlockSignatureTracker # imm = 0xE1B7
	movw	$18577, RunTimeSignatureAdjuster # imm = 0x4891
	jmp	.LBB77_1369
.LBB77_1365:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18803, %ax             # imm = 0x4973
	cmpw	$-7716, %ax             # imm = 0xE1DC
	jne	.LBB77_1436
# %bb.1366:                             # %BZ2_decompress.split2492
	movq	%r10, %r15
	movq	%r9, %r14
	movq	%r8, %rbx
	movw	$-7716, BasicBlockSignatureTracker # imm = 0xE1DC
	movw	$-7269, RunTimeSignatureAdjuster # imm = 0xE39B
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
	movw	$-7716, BasicBlockSignatureTracker # imm = 0xE1DC
	movw	$-7269, RunTimeSignatureAdjuster # imm = 0xE39B
	movw	$-7716, BasicBlockSignatureTracker # imm = 0xE1DC
	movw	$0, RunTimeSignatureAdjuster
# %bb.1367:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$-7710, %ax             # imm = 0xE1E2
	jne	.LBB77_1436
# %bb.1368:                             # %BZ2_decompress.split3830
	movw	$-7710, BasicBlockSignatureTracker # imm = 0xE1E2
	movw	$-7259, RunTimeSignatureAdjuster # imm = 0xE3A5
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
	movq	%r15, %r10
	movq	%r14, %r9
	movq	%rbx, %r8
	movw	$-7710, BasicBlockSignatureTracker # imm = 0xE1E2
	movw	$-7259, RunTimeSignatureAdjuster # imm = 0xE3A5
	movw	$-7710, BasicBlockSignatureTracker # imm = 0xE1E2
	movw	$18628, RunTimeSignatureAdjuster # imm = 0x48C4
.LBB77_1369:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$18651, %ax             # imm = 0x48DB
	xorw	%cx, %ax
	cmpw	$-7683, %ax             # imm = 0xE1FD
	jne	.LBB77_1436
# %bb.1370:                             # %BZ2_decompress.split2588
	movl	(%r10), %eax
	movq	(%r8), %rcx
	movl	%eax, 64036(%rcx)
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64040(%rcx)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64044(%rcx)
	movq	-232(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64048(%rcx)
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64052(%rcx)
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64056(%rcx)
	movq	-328(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64060(%rcx)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64064(%rcx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64068(%rcx)
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64072(%rcx)
	movq	-216(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64076(%rcx)
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64080(%rcx)
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64084(%rcx)
	movq	-224(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64088(%rcx)
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64092(%rcx)
	movq	-376(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64096(%rcx)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64100(%rcx)
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64104(%rcx)
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64108(%rcx)
	movq	-280(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64112(%rcx)
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	(%r8), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	(%r8), %rcx
	movq	%rax, 64120(%rcx)
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	(%r8), %rcx
	movq	%rax, 64128(%rcx)
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	(%r8), %rcx
	movq	%rax, 64136(%rcx)
	movl	(%r9), %eax
	movw	$-7683, BasicBlockSignatureTracker # imm = 0xE1FD
	movw	$-18502, RunTimeSignatureAdjuster # imm = 0xB7BA
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB77_1371:                            # %CFerrorHandler.BZ2_decompress.loopexit
	jmp	.LBB77_1436
.LBB77_1372:                            # %CFerrorHandler.BZ2_decompress.loopexit1
	jmp	.LBB77_1436
.LBB77_1373:                            # %CFerrorHandler.BZ2_decompress.loopexit2
	jmp	.LBB77_1436
.LBB77_1374:                            # %CFerrorHandler.BZ2_decompress.loopexit3
	jmp	.LBB77_1436
.LBB77_1375:                            # %CFerrorHandler.BZ2_decompress.loopexit4
	jmp	.LBB77_1436
.LBB77_1376:                            # %CFerrorHandler.BZ2_decompress.loopexit5
	jmp	.LBB77_1436
.LBB77_1377:                            # %CFerrorHandler.BZ2_decompress.loopexit6
	jmp	.LBB77_1436
.LBB77_1378:                            # %CFerrorHandler.BZ2_decompress.loopexit7
	jmp	.LBB77_1436
.LBB77_1379:                            # %CFerrorHandler.BZ2_decompress.loopexit8
	jmp	.LBB77_1436
.LBB77_1380:                            # %CFerrorHandler.BZ2_decompress.loopexit9
	jmp	.LBB77_1436
.LBB77_1381:                            # %CFerrorHandler.BZ2_decompress.loopexit10
	jmp	.LBB77_1436
.LBB77_1382:                            # %CFerrorHandler.BZ2_decompress.loopexit11
	jmp	.LBB77_1436
.LBB77_1383:                            # %CFerrorHandler.BZ2_decompress.loopexit12
	jmp	.LBB77_1436
.LBB77_1384:                            # %CFerrorHandler.BZ2_decompress.loopexit13
	jmp	.LBB77_1436
.LBB77_1385:                            # %CFerrorHandler.BZ2_decompress.loopexit14
	jmp	.LBB77_1436
.LBB77_1386:                            # %CFerrorHandler.BZ2_decompress.loopexit15
	jmp	.LBB77_1436
.LBB77_1387:                            # %CFerrorHandler.BZ2_decompress.loopexit16
	jmp	.LBB77_1436
.LBB77_1388:                            # %CFerrorHandler.BZ2_decompress.loopexit17
	jmp	.LBB77_1436
.LBB77_1389:                            # %CFerrorHandler.BZ2_decompress.loopexit18
	jmp	.LBB77_1436
.LBB77_1390:                            # %CFerrorHandler.BZ2_decompress.loopexit19
	jmp	.LBB77_1436
.LBB77_1391:                            # %CFerrorHandler.BZ2_decompress.loopexit20
	jmp	.LBB77_1436
.LBB77_1392:                            # %CFerrorHandler.BZ2_decompress.loopexit21
	jmp	.LBB77_1436
.LBB77_1393:                            # %CFerrorHandler.BZ2_decompress.loopexit22
	jmp	.LBB77_1436
.LBB77_1394:                            # %CFerrorHandler.BZ2_decompress.loopexit23
	jmp	.LBB77_1436
.LBB77_1395:                            # %CFerrorHandler.BZ2_decompress.loopexit24
	jmp	.LBB77_1436
.LBB77_1396:                            # %CFerrorHandler.BZ2_decompress.loopexit25
	jmp	.LBB77_1436
.LBB77_1397:                            # %CFerrorHandler.BZ2_decompress.loopexit26
	jmp	.LBB77_1436
.LBB77_1398:                            # %CFerrorHandler.BZ2_decompress.loopexit27
	jmp	.LBB77_1436
.LBB77_1399:                            # %CFerrorHandler.BZ2_decompress.loopexit28
	jmp	.LBB77_1436
.LBB77_1400:                            # %CFerrorHandler.BZ2_decompress.loopexit29
	jmp	.LBB77_1436
.LBB77_1401:                            # %CFerrorHandler.BZ2_decompress.loopexit30
	jmp	.LBB77_1436
.LBB77_1402:                            # %CFerrorHandler.BZ2_decompress.loopexit31
	jmp	.LBB77_1436
.LBB77_1403:                            # %CFerrorHandler.BZ2_decompress.loopexit32
	jmp	.LBB77_1436
.LBB77_1404:                            # %CFerrorHandler.BZ2_decompress.loopexit33
	jmp	.LBB77_1436
.LBB77_1405:                            # %CFerrorHandler.BZ2_decompress.loopexit34
	jmp	.LBB77_1436
.LBB77_1406:                            # %CFerrorHandler.BZ2_decompress.loopexit35
	jmp	.LBB77_1436
.LBB77_1407:                            # %CFerrorHandler.BZ2_decompress.loopexit36
	jmp	.LBB77_1436
.LBB77_1408:                            # %CFerrorHandler.BZ2_decompress.loopexit37
	jmp	.LBB77_1436
.LBB77_1409:                            # %CFerrorHandler.BZ2_decompress.loopexit38
	jmp	.LBB77_1436
.LBB77_1410:                            # %CFerrorHandler.BZ2_decompress.loopexit39
	jmp	.LBB77_1436
.LBB77_1411:                            # %CFerrorHandler.BZ2_decompress.loopexit40
	jmp	.LBB77_1436
.LBB77_1412:                            # %CFerrorHandler.BZ2_decompress.loopexit41
	jmp	.LBB77_1436
.LBB77_1413:                            # %CFerrorHandler.BZ2_decompress.loopexit42
	jmp	.LBB77_1436
.LBB77_1414:                            # %CFerrorHandler.BZ2_decompress.loopexit43
	jmp	.LBB77_1436
.LBB77_1415:                            # %CFerrorHandler.BZ2_decompress.loopexit44
	jmp	.LBB77_1436
.LBB77_1416:                            # %CFerrorHandler.BZ2_decompress.loopexit45
	jmp	.LBB77_1436
.LBB77_1417:                            # %CFerrorHandler.BZ2_decompress.loopexit46
	jmp	.LBB77_1436
.LBB77_1418:                            # %CFerrorHandler.BZ2_decompress.loopexit47
	jmp	.LBB77_1436
.LBB77_1419:                            # %CFerrorHandler.BZ2_decompress.loopexit48
	jmp	.LBB77_1436
.LBB77_1420:                            # %CFerrorHandler.BZ2_decompress.loopexit49
	jmp	.LBB77_1436
.LBB77_1421:                            # %CFerrorHandler.BZ2_decompress.loopexit50
	jmp	.LBB77_1436
.LBB77_1422:                            # %CFerrorHandler.BZ2_decompress.loopexit51
	jmp	.LBB77_1436
.LBB77_1423:                            # %CFerrorHandler.BZ2_decompress.loopexit52
	jmp	.LBB77_1436
.LBB77_1424:                            # %CFerrorHandler.BZ2_decompress.loopexit53
	jmp	.LBB77_1436
.LBB77_1425:                            # %CFerrorHandler.BZ2_decompress.loopexit54
	jmp	.LBB77_1436
.LBB77_1426:                            # %CFerrorHandler.BZ2_decompress.loopexit55
	jmp	.LBB77_1436
.LBB77_1427:                            # %CFerrorHandler.BZ2_decompress.loopexit56
	jmp	.LBB77_1436
.LBB77_1428:                            # %CFerrorHandler.BZ2_decompress.loopexit57
	jmp	.LBB77_1436
.LBB77_1429:                            # %CFerrorHandler.BZ2_decompress.loopexit58
	jmp	.LBB77_1436
.LBB77_1430:                            # %CFerrorHandler.BZ2_decompress.loopexit59
	jmp	.LBB77_1436
.LBB77_1431:                            # %CFerrorHandler.BZ2_decompress.loopexit60
	jmp	.LBB77_1436
.LBB77_1432:                            # %CFerrorHandler.BZ2_decompress.loopexit61
	jmp	.LBB77_1436
.LBB77_1433:                            # %CFerrorHandler.BZ2_decompress.loopexit62
	jmp	.LBB77_1436
.LBB77_1434:                            # %CFerrorHandler.BZ2_decompress.loopexit63
	jmp	.LBB77_1436
.LBB77_1435:                            # %CFerrorHandler.BZ2_decompress.loopexit64
	jmp	.LBB77_1436
.LBB77_1436:                            # %CFerrorHandler.BZ2_decompress
	callq	FAULT_DETECTED_CFC
.Lfunc_end77:
	.size	BZ2_decompress, .Lfunc_end77-BZ2_decompress
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI77_0:
	.quad	.LBB77_7
	.quad	.LBB77_29
	.quad	.LBB77_51
	.quad	.LBB77_73
	.quad	.LBB77_117
	.quad	.LBB77_143
	.quad	.LBB77_165
	.quad	.LBB77_187
	.quad	.LBB77_209
	.quad	.LBB77_231
	.quad	.LBB77_257
	.quad	.LBB77_275
	.quad	.LBB77_293
	.quad	.LBB77_311
	.quad	.LBB77_329
	.quad	.LBB77_347
	.quad	.LBB77_365
	.quad	.LBB77_383
	.quad	.LBB77_413
	.quad	.LBB77_459
	.quad	.LBB77_495
	.quad	.LBB77_521
	.quad	.LBB77_549
	.quad	.LBB77_607
	.quad	.LBB77_639
	.quad	.LBB77_661
	.quad	.LBB77_751
	.quad	.LBB77_779
	.quad	.LBB77_837
	.quad	.LBB77_865
	.quad	.LBB77_1001
	.quad	.LBB77_1029
	.quad	.LBB77_1183
	.quad	.LBB77_1205
	.quad	.LBB77_1227
	.quad	.LBB77_1249
	.quad	.LBB77_1271
	.quad	.LBB77_1293
	.quad	.LBB77_1311
	.quad	.LBB77_1329
	.quad	.LBB77_1347
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function makeMaps_d
	.type	makeMaps_d,@function
makeMaps_d:                             # @makeMaps_d
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$23036, %ax             # imm = 0x59FC
	xorw	%cx, %ax
	cmpw	$-7652, %ax             # imm = 0xE21C
	jne	.LBB78_15
# %bb.1:                                # %makeMaps_d.split
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rdi, (%rax)
	movq	(%rax), %rdx
	movl	$0, 3192(%rdx)
	movl	$0, (%rcx)
	movw	$-7652, BasicBlockSignatureTracker # imm = 0xE21C
	movw	$0, RunTimeSignatureAdjuster
.LBB78_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$60, %dx
	xorw	%si, %dx
	cmpw	$-7648, %dx             # imm = 0xE220
	jne	.LBB78_14
# %bb.3:                                # %makeMaps_d.split25
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	(%rcx), %edx
	movw	$-7648, BasicBlockSignatureTracker # imm = 0xE220
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$256, %edx              # imm = 0x100
	jge	.LBB78_12
# %bb.4:                                #   in Loop: Header=BB78_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$189, %dx
	cmpw	$-7523, %dx             # imm = 0xE29D
	jne	.LBB78_14
# %bb.5:                                # %makeMaps_d.split27
                                        #   in Loop: Header=BB78_2 Depth=1
	movq	(%rax), %rdx
	movslq	(%rcx), %rsi
	movb	3196(%rdx,%rsi), %dl
	movw	$-7523, BasicBlockSignatureTracker # imm = 0xE29D
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %dl
	je	.LBB78_8
# %bb.6:                                #   in Loop: Header=BB78_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$94, %dx
	cmpw	$-7485, %dx             # imm = 0xE2C3
	jne	.LBB78_14
# %bb.7:                                # %makeMaps_d.split31
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	(%rcx), %edx
	movq	(%rax), %rsi
	movq	(%rax), %rdi
	movslq	3192(%rdi), %rdi
	movb	%dl, 3468(%rsi,%rdi)
	movq	(%rax), %rdx
	movl	3192(%rdx), %esi
	addl	$1, %esi
	movl	%esi, 3192(%rdx)
	movw	$-7485, BasicBlockSignatureTracker # imm = 0xE2C3
	movw	$94, RunTimeSignatureAdjuster
.LBB78_8:                               #   in Loop: Header=BB78_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$75, %dx
	xorw	%si, %dx
	cmpw	$-7466, %dx             # imm = 0xE2D6
	jne	.LBB78_14
# %bb.9:                                # %makeMaps_d.split33
                                        #   in Loop: Header=BB78_2 Depth=1
	movw	$-7466, BasicBlockSignatureTracker # imm = 0xE2D6
	movw	$0, RunTimeSignatureAdjuster
# %bb.10:                               #   in Loop: Header=BB78_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	xorw	$8, %dx
	cmpw	$-7458, %dx             # imm = 0xE2DE
	jne	.LBB78_14
# %bb.11:                               # %makeMaps_d.split35
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	(%rcx), %edx
	addl	$1, %edx
	movl	%edx, (%rcx)
	movw	$-7458, BasicBlockSignatureTracker # imm = 0xE2DE
	movw	$194, RunTimeSignatureAdjuster
	jmp	.LBB78_2
.LBB78_12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$196, %ax
	cmpw	$-7452, %ax             # imm = 0xE2E4
	jne	.LBB78_15
# %bb.13:                               # %makeMaps_d.split29
	movw	$-7452, BasicBlockSignatureTracker # imm = 0xE2E4
	movw	$23357, RunTimeSignatureAdjuster # imm = 0x5B3D
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB78_14:                              # %CFerrorHandler.makeMaps_d.loopexit
	jmp	.LBB78_15
.LBB78_15:                              # %CFerrorHandler.makeMaps_d
	callq	FAULT_DETECTED_CFC
.Lfunc_end78:
	.size	makeMaps_d, .Lfunc_end78-makeMaps_d
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_hbMakeCodeLengths   # -- Begin function BZ2_hbMakeCodeLengths
	.p2align	4, 0x90
	.type	BZ2_hbMakeCodeLengths,@function
BZ2_hbMakeCodeLengths:                  # @BZ2_hbMakeCodeLengths
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$32767, %ax             # imm = 0x7FFF
	xorw	%bx, %ax
	cmpw	$-7404, %ax             # imm = 0xE314
	jne	.LBB79_141
# %bb.1:                                # %BZ2_hbMakeCodeLengths.split
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, -152(%rbp)        # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rax, %rsp
	movq	%rsp, %rax
	addq	$-1040, %rax            # imm = 0xFBF0
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-2064, %r14            # imm = 0xF7F0
	movq	%r14, -48(%rbp)         # 8-byte Spill
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-2064, %rbx            # imm = 0xF7F0
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, -128(%rbp)         # 8-byte Spill
	movq	%r8, %rsp
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, -120(%rbp)        # 8-byte Spill
	movq	%r10, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, -168(%rbp)        # 8-byte Spill
	movq	%r11, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -112(%rbp)        # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -72(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, -96(%rbp)         # 8-byte Spill
	movq	%r11, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%r13, -208(%rbp)        # 8-byte Spill
	movq	-184(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%r13)
	movq	%r9, %r13
	movq	%rsi, (%rdi)
	movl	%edx, (%r13)
	movq	%r15, -184(%rbp)        # 8-byte Spill
	movl	%ecx, (%r15)
	movl	$0, (%r12)
	movw	$-7404, BasicBlockSignatureTracker # imm = 0xE314
	movw	$0, RunTimeSignatureAdjuster
.LBB79_2:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$39, %cx
	xorw	%dx, %cx
	cmpw	$-7373, %cx             # imm = 0xE333
	jne	.LBB79_140
# %bb.3:                                # %BZ2_hbMakeCodeLengths.split240
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	(%r12), %ecx
	movl	(%r13), %edx
	movw	$-7373, BasicBlockSignatureTracker # imm = 0xE333
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jge	.LBB79_14
# %bb.4:                                #   in Loop: Header=BB79_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$120, %cx
	cmpw	$-7349, %cx             # imm = 0xE34B
	jne	.LBB79_140
# %bb.5:                                # %BZ2_hbMakeCodeLengths.split242
                                        #   in Loop: Header=BB79_2 Depth=1
	movq	(%rdi), %rcx
	movslq	(%r12), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movw	$-7349, BasicBlockSignatureTracker # imm = 0xE34B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %ecx
	jne	.LBB79_8
# %bb.6:                                #   in Loop: Header=BB79_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$22, %cx
	cmpw	$-7331, %cx             # imm = 0xE35D
	jne	.LBB79_140
# %bb.7:                                # %BZ2_hbMakeCodeLengths.split246
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	$1, %ecx
	movw	$-7331, BasicBlockSignatureTracker # imm = 0xE35D
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB79_10
.LBB79_8:                               #   in Loop: Header=BB79_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$56, %cx
	cmpw	$-7309, %cx             # imm = 0xE373
	jne	.LBB79_140
# %bb.9:                                # %BZ2_hbMakeCodeLengths.split248
                                        #   in Loop: Header=BB79_2 Depth=1
	movq	(%rdi), %rcx
	movslq	(%r12), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movw	$-7309, BasicBlockSignatureTracker # imm = 0xE373
	movw	$46, RunTimeSignatureAdjuster
.LBB79_10:                              #   in Loop: Header=BB79_2 Depth=1
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %si
	xorw	$154, %dx
	xorw	%si, %dx
	cmpw	$-7225, %dx             # imm = 0xE3C7
	jne	.LBB79_140
# %bb.11:                               # %BZ2_hbMakeCodeLengths.split250
                                        #   in Loop: Header=BB79_2 Depth=1
	shll	$8, %ecx
	movl	(%r12), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	%ecx, (%rsi,%rdx,4)
	movw	$-7225, BasicBlockSignatureTracker # imm = 0xE3C7
	movw	$0, RunTimeSignatureAdjuster
# %bb.12:                               #   in Loop: Header=BB79_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$35, %cx
	cmpw	$-7196, %cx             # imm = 0xE3E4
	jne	.LBB79_140
# %bb.13:                               # %BZ2_hbMakeCodeLengths.split252
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	(%r12), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r12)
	movw	$-7196, BasicBlockSignatureTracker # imm = 0xE3E4
	movw	$240, RunTimeSignatureAdjuster
	jmp	.LBB79_2
.LBB79_14:
	movq	%rax, %r15
	movw	BasicBlockSignatureTracker, %ax
	xorw	$222, %ax
	cmpw	$-7187, %ax             # imm = 0xE3ED
	jne	.LBB79_141
# %bb.15:                               # %BZ2_hbMakeCodeLengths.split244
	movq	%rbx, -144(%rbp)        # 8-byte Spill
	movq	%r10, -64(%rbp)         # 8-byte Spill
	movq	%r8, -200(%rbp)         # 8-byte Spill
	movw	$-7187, BasicBlockSignatureTracker # imm = 0xE3ED
	movw	$0, RunTimeSignatureAdjuster
.LBB79_16:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_18 Depth 2
                                        #       Child Loop BB79_22 Depth 3
                                        #     Child Loop BB79_36 Depth 2
                                        #       Child Loop BB79_40 Depth 3
                                        #       Child Loop BB79_60 Depth 3
                                        #       Child Loop BB79_86 Depth 3
                                        #     Child Loop BB79_98 Depth 2
                                        #       Child Loop BB79_102 Depth 3
                                        #     Child Loop BB79_120 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2044, %ax              # imm = 0x7FC
	xorw	%cx, %ax
	cmpw	$-7151, %ax             # imm = 0xE411
	jne	.LBB79_139
# %bb.17:                               # %BZ2_hbMakeCodeLengths.split254
                                        #   in Loop: Header=BB79_16 Depth=1
	movl	(%r13), %eax
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	$0, (%r15)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	$-2, (%rax)
	movl	$1, (%r12)
	movw	$-7151, BasicBlockSignatureTracker # imm = 0xE411
	movw	$0, RunTimeSignatureAdjuster
	movq	-200(%rbp), %rdi        # 8-byte Reload
.LBB79_18:                              #   Parent Loop BB79_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_22 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$9, %ax
	xorw	%cx, %ax
	cmpw	$-7144, %ax             # imm = 0xE418
	jne	.LBB79_138
# %bb.19:                               # %BZ2_hbMakeCodeLengths.split256
                                        #   in Loop: Header=BB79_18 Depth=2
	movl	(%r12), %eax
	movl	(%r13), %ecx
	movw	$-7144, BasicBlockSignatureTracker # imm = 0xE418
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB79_30
# %bb.20:                               #   in Loop: Header=BB79_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-7140, %ax             # imm = 0xE41C
	jne	.LBB79_138
# %bb.21:                               # %BZ2_hbMakeCodeLengths.split258
                                        #   in Loop: Header=BB79_18 Depth=2
	movslq	(%r12), %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	$-1, (%rcx,%rax,4)
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %eax
	addl	$1, %eax
	movl	%eax, (%rsi)
	movl	(%r12), %eax
	movslq	(%rsi), %rcx
	movq	%r15, %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	(%rsi), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movslq	(%rcx), %rax
	movl	(%rdx,%rax,4), %eax
	movl	%eax, (%rdi)
	movw	$-7140, BasicBlockSignatureTracker # imm = 0xE41C
	movw	$0, RunTimeSignatureAdjuster
.LBB79_22:                              #   Parent Loop BB79_16 Depth=1
                                        #     Parent Loop BB79_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$56, %ax
	xorw	%cx, %ax
	cmpw	$-7132, %ax             # imm = 0xE424
	jne	.LBB79_134
# %bb.23:                               # %BZ2_hbMakeCodeLengths.split262
                                        #   in Loop: Header=BB79_22 Depth=3
	movslq	(%rdi), %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rax,4), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movslq	(%r15,%rcx,4), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movw	$-7132, BasicBlockSignatureTracker # imm = 0xE424
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_26
# %bb.24:                               #   in Loop: Header=BB79_22 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-7125, %ax             # imm = 0xE42B
	jne	.LBB79_134
# %bb.25:                               # %BZ2_hbMakeCodeLengths.split264
                                        #   in Loop: Header=BB79_22 Depth=3
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movl	(%rsi), %eax
	sarl	$1, %eax
	cltq
	movq	%r15, %rdx
	movl	(%rdx,%rax,4), %eax
	movslq	(%rsi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	(%rsi), %eax
	sarl	$1, %eax
	movl	%eax, (%rsi)
	movw	$-7125, BasicBlockSignatureTracker # imm = 0xE42B
	movw	$55, RunTimeSignatureAdjuster
	jmp	.LBB79_22
.LBB79_26:                              #   in Loop: Header=BB79_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$111, %ax
	cmpw	$-7093, %ax             # imm = 0xE44B
	jne	.LBB79_138
# %bb.27:                               # %BZ2_hbMakeCodeLengths.split266
                                        #   in Loop: Header=BB79_18 Depth=2
	movl	(%rdi), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	%eax, (%r15,%rcx,4)
	movw	$-7093, BasicBlockSignatureTracker # imm = 0xE44B
	movw	$0, RunTimeSignatureAdjuster
# %bb.28:                               #   in Loop: Header=BB79_18 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$-7080, %ax             # imm = 0xE458
	jne	.LBB79_138
# %bb.29:                               # %BZ2_hbMakeCodeLengths.split268
                                        #   in Loop: Header=BB79_18 Depth=2
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$-7080, BasicBlockSignatureTracker # imm = 0xE458
	movw	$73, RunTimeSignatureAdjuster
	jmp	.LBB79_18
.LBB79_30:                              #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$158, %ax
	cmpw	$-7034, %ax             # imm = 0xE486
	jne	.LBB79_139
# %bb.31:                               # %BZ2_hbMakeCodeLengths.split260
                                        #   in Loop: Header=BB79_16 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-7034, BasicBlockSignatureTracker # imm = 0xE486
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$260, %eax              # imm = 0x104
	jl	.LBB79_34
# %bb.32:                               #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-7020, %ax             # imm = 0xE494
	jne	.LBB79_139
# %bb.33:                               # %BZ2_hbMakeCodeLengths.split272
                                        #   in Loop: Header=BB79_16 Depth=1
	movw	$-7020, BasicBlockSignatureTracker # imm = 0xE494
	movw	$-6445, RunTimeSignatureAdjuster # imm = 0xE6D3
	movl	$2001, %edi             # imm = 0x7D1
	movq	%r11, %r14
	callq	BZ2_bz__AssertH__fail
	movq	%r14, %r11
	movw	$-7020, BasicBlockSignatureTracker # imm = 0xE494
	movw	$-6445, RunTimeSignatureAdjuster # imm = 0xE6D3
	movw	$-7020, BasicBlockSignatureTracker # imm = 0xE494
	movw	$18, RunTimeSignatureAdjuster
.LBB79_34:                              #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$16, %ax
	xorw	%cx, %ax
	cmpw	$-7018, %ax             # imm = 0xE496
	jne	.LBB79_139
# %bb.35:                               # %BZ2_hbMakeCodeLengths.split270
                                        #   in Loop: Header=BB79_16 Depth=1
	movq	%r11, -88(%rbp)         # 8-byte Spill
	movw	$-7018, BasicBlockSignatureTracker # imm = 0xE496
	movw	$0, RunTimeSignatureAdjuster
.LBB79_36:                              #   Parent Loop BB79_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_40 Depth 3
                                        #       Child Loop BB79_60 Depth 3
                                        #       Child Loop BB79_86 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$103, %ax
	xorw	%cx, %ax
	cmpw	$-6927, %ax             # imm = 0xE4F1
	jne	.LBB79_137
# %bb.37:                               # %BZ2_hbMakeCodeLengths.split274
                                        #   in Loop: Header=BB79_36 Depth=2
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movw	$-6927, BasicBlockSignatureTracker # imm = 0xE4F1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jle	.LBB79_92
# %bb.38:                               #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$507, %ax               # imm = 0x1FB
	cmpw	$-6902, %ax             # imm = 0xE50A
	jne	.LBB79_137
# %bb.39:                               # %BZ2_hbMakeCodeLengths.split276
                                        #   in Loop: Header=BB79_36 Depth=2
	movq	%r15, %rcx
	movl	4(%rcx), %eax
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movl	%eax, (%rdx)
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movslq	(%rdx), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, 4(%rcx)
	movl	(%rdx), %eax
	addl	$-1, %eax
	movl	%eax, (%rdx)
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	movslq	(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	movq	-168(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-6902, BasicBlockSignatureTracker # imm = 0xE50A
	movw	$0, RunTimeSignatureAdjuster
.LBB79_40:                              #   Parent Loop BB79_16 Depth=1
                                        #     Parent Loop BB79_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$-6866, %ax             # imm = 0xE52E
	jne	.LBB79_133
# %bb.41:                               # %BZ2_hbMakeCodeLengths.split280
                                        #   in Loop: Header=BB79_40 Depth=3
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	shll	$1, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-6866, BasicBlockSignatureTracker # imm = 0xE52E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB79_44
# %bb.42:                               #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$24, %ax
	cmpw	$-6858, %ax             # imm = 0xE536
	jne	.LBB79_137
# %bb.43:                               # %BZ2_hbMakeCodeLengths.split282
                                        #   in Loop: Header=BB79_36 Depth=2
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movw	$-6858, BasicBlockSignatureTracker # imm = 0xE536
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB79_58
.LBB79_44:                              #   in Loop: Header=BB79_40 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$21, %ax
	cmpw	$-6853, %ax             # imm = 0xE53B
	jne	.LBB79_133
# %bb.45:                               # %BZ2_hbMakeCodeLengths.split284
                                        #   in Loop: Header=BB79_40 Depth=3
	movq	-80(%rbp), %r10         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movq	-136(%rbp), %rbx        # 8-byte Reload
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, %rdx
	movl	(%rcx), %ecx
	movw	$-6853, BasicBlockSignatureTracker # imm = 0xE53B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_52
# %bb.46:                               #   in Loop: Header=BB79_40 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$72, %ax
	cmpw	$-6797, %ax             # imm = 0xE573
	jne	.LBB79_133
# %bb.47:                               # %BZ2_hbMakeCodeLengths.split288
                                        #   in Loop: Header=BB79_40 Depth=3
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	cltq
	movq	%r15, %rdi
	movslq	(%rdi,%rax,4), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi,%rax,4), %eax
	movslq	(%rcx), %rcx
	movslq	(%rdi,%rcx,4), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movw	$-6797, BasicBlockSignatureTracker # imm = 0xE573
	movw	$72, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_52
# %bb.48:                               # %Buffer__
                                        #   in Loop: Header=BB79_40 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-23290, %ax            # imm = 0xA506
	cmpw	$16501, %ax             # imm = 0x4075
	jne	.LBB79_133
# %bb.49:                               # %BZ2_hbMakeCodeLengths.split292
                                        #   in Loop: Header=BB79_40 Depth=3
	movw	$16501, BasicBlockSignatureTracker # imm = 0x4075
	movw	$-23290, RunTimeSignatureAdjuster # imm = 0xA506
# %bb.50:                               #   in Loop: Header=BB79_40 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$7, %ax
	xorw	%cx, %ax
	cmpw	$-6796, %ax             # imm = 0xE574
	jne	.LBB79_133
# %bb.51:                               # %BZ2_hbMakeCodeLengths.split364
                                        #   in Loop: Header=BB79_40 Depth=3
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-6796, BasicBlockSignatureTracker # imm = 0xE574
	movw	$79, RunTimeSignatureAdjuster
.LBB79_52:                              #   in Loop: Header=BB79_40 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$172, %ax
	xorw	%cx, %ax
	cmpw	$-6761, %ax             # imm = 0xE597
	jne	.LBB79_133
# %bb.53:                               # %BZ2_hbMakeCodeLengths.split290
                                        #   in Loop: Header=BB79_40 Depth=3
	movq	-168(%rbp), %rax        # 8-byte Reload
	movslq	(%rax), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi,%rax,4), %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movslq	(%r15,%rcx,4), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movw	$-6761, BasicBlockSignatureTracker # imm = 0xE597
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_56
# %bb.54:                               #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$47, %ax
	cmpw	$-6728, %ax             # imm = 0xE5B8
	jne	.LBB79_137
# %bb.55:                               # %BZ2_hbMakeCodeLengths.split294
                                        #   in Loop: Header=BB79_36 Depth=2
	movw	$-6728, BasicBlockSignatureTracker # imm = 0xE5B8
	movw	$142, RunTimeSignatureAdjuster
	jmp	.LBB79_58
.LBB79_56:                              #   in Loop: Header=BB79_40 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$68, %ax
	cmpw	$-6701, %ax             # imm = 0xE5D3
	jne	.LBB79_133
# %bb.57:                               # %BZ2_hbMakeCodeLengths.split296
                                        #   in Loop: Header=BB79_40 Depth=3
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movslq	(%rdi), %rax
	movq	%r15, %rdx
	movl	(%rdx,%rax,4), %eax
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movslq	(%rsi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movw	$-6701, BasicBlockSignatureTracker # imm = 0xE5D3
	movw	$217, RunTimeSignatureAdjuster
	jmp	.LBB79_40
.LBB79_58:                              #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$196, %ax
	xorw	%cx, %ax
	cmpw	$-6670, %ax             # imm = 0xE5F2
	movq	%r8, %rsi
	movq	%r9, %rdi
	movq	%r10, %r14
	jne	.LBB79_137
# %bb.59:                               # %BZ2_hbMakeCodeLengths.split286
                                        #   in Loop: Header=BB79_36 Depth=2
	movq	%rsi, %r11
	movq	%rbx, %r8
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movq	%r15, %rbx
	movl	%eax, (%rbx,%rcx,4)
	movl	4(%rbx), %eax
	movq	%rdi, %r10
	movl	%eax, (%rdi)
	movslq	(%rdx), %rax
	movl	(%rbx,%rax,4), %eax
	movl	%eax, 4(%rbx)
	movl	(%rdx), %eax
	addl	$-1, %eax
	movq	%rdx, %r9
	movl	%eax, (%rdx)
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	$1, (%rax)
	movslq	(%rax), %rax
	movl	(%rbx,%rax,4), %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-6670, BasicBlockSignatureTracker # imm = 0xE5F2
	movw	$0, RunTimeSignatureAdjuster
.LBB79_60:                              #   Parent Loop BB79_16 Depth=1
                                        #     Parent Loop BB79_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1013, %ax              # imm = 0x3F5
	xorw	%cx, %ax
	cmpw	$-6649, %ax             # imm = 0xE607
	jne	.LBB79_132
# %bb.61:                               # %BZ2_hbMakeCodeLengths.split298
                                        #   in Loop: Header=BB79_60 Depth=3
	movq	-112(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	shll	$1, %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	(%rcx), %eax
	movl	(%r9), %ecx
	movw	$-6649, BasicBlockSignatureTracker # imm = 0xE607
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB79_64
# %bb.62:                               #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$-6622, %ax             # imm = 0xE622
	jne	.LBB79_137
# %bb.63:                               # %BZ2_hbMakeCodeLengths.split300
                                        #   in Loop: Header=BB79_36 Depth=2
	movw	$-6622, BasicBlockSignatureTracker # imm = 0xE622
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB79_78
.LBB79_64:                              #   in Loop: Header=BB79_60 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$142, %ax
	cmpw	$-6519, %ax             # imm = 0xE689
	jne	.LBB79_132
# %bb.65:                               # %BZ2_hbMakeCodeLengths.split302
                                        #   in Loop: Header=BB79_60 Depth=3
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movl	(%r9), %ecx
	movw	$-6519, BasicBlockSignatureTracker # imm = 0xE689
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_72
# %bb.66:                               #   in Loop: Header=BB79_60 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$-6471, %ax             # imm = 0xE6B9
	jne	.LBB79_132
# %bb.67:                               # %BZ2_hbMakeCodeLengths.split306
                                        #   in Loop: Header=BB79_60 Depth=3
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	cltq
	movq	%r15, %rdx
	movslq	(%rdx,%rax,4), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi,%rax,4), %eax
	movslq	(%rcx), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movl	(%rdi,%rcx,4), %ecx
	movw	$-6471, BasicBlockSignatureTracker # imm = 0xE6B9
	movw	$48, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_72
# %bb.68:                               # %Buffer__1
                                        #   in Loop: Header=BB79_60 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$-17843, %ax            # imm = 0xBA4D
	cmpw	$23796, %ax             # imm = 0x5CF4
	jne	.LBB79_132
# %bb.69:                               # %BZ2_hbMakeCodeLengths.split310
                                        #   in Loop: Header=BB79_60 Depth=3
	movw	$23796, BasicBlockSignatureTracker # imm = 0x5CF4
	movw	$-17843, RunTimeSignatureAdjuster # imm = 0xBA4D
# %bb.70:                               #   in Loop: Header=BB79_60 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$4, %ax
	xorw	%cx, %ax
	cmpw	$-6467, %ax             # imm = 0xE6BD
	jne	.LBB79_132
# %bb.71:                               # %BZ2_hbMakeCodeLengths.split366
                                        #   in Loop: Header=BB79_60 Depth=3
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-6467, BasicBlockSignatureTracker # imm = 0xE6BD
	movw	$52, RunTimeSignatureAdjuster
.LBB79_72:                              #   in Loop: Header=BB79_60 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$71, %ax
	xorw	%cx, %ax
	cmpw	$-6450, %ax             # imm = 0xE6CE
	jne	.LBB79_132
# %bb.73:                               # %BZ2_hbMakeCodeLengths.split308
                                        #   in Loop: Header=BB79_60 Depth=3
	movq	-144(%rbp), %rax        # 8-byte Reload
	movslq	(%rax), %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rax,4), %eax
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movslq	(%r15,%rcx,4), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movw	$-6450, BasicBlockSignatureTracker # imm = 0xE6CE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_76
# %bb.74:                               #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$-6447, %ax             # imm = 0xE6D1
	jne	.LBB79_137
# %bb.75:                               # %BZ2_hbMakeCodeLengths.split312
                                        #   in Loop: Header=BB79_36 Depth=2
	movw	$-6447, BasicBlockSignatureTracker # imm = 0xE6D1
	movw	$243, RunTimeSignatureAdjuster
	jmp	.LBB79_78
.LBB79_76:                              #   in Loop: Header=BB79_60 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-6439, %ax             # imm = 0xE6D9
	jne	.LBB79_132
# %bb.77:                               # %BZ2_hbMakeCodeLengths.split314
                                        #   in Loop: Header=BB79_60 Depth=3
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movslq	(%rdi), %rax
	movq	%r15, %rdx
	movl	(%rdx,%rax,4), %eax
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movslq	(%rsi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	(%rdi), %eax
	movl	%eax, (%rsi)
	movw	$-6439, BasicBlockSignatureTracker # imm = 0xE6D9
	movw	$811, RunTimeSignatureAdjuster # imm = 0x32B
	jmp	.LBB79_60
.LBB79_78:                              #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$194, %ax
	xorw	%cx, %ax
	cmpw	$-6432, %ax             # imm = 0xE6E0
	movq	%r8, %rdx
	movq	%r11, %rbx
	movq	%r10, %rdi
	movq	%r14, %rsi
	jne	.LBB79_137
# %bb.79:                               # %BZ2_hbMakeCodeLengths.split304
                                        #   in Loop: Header=BB79_36 Depth=2
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	%eax, (%r15,%rcx,4)
	movl	(%rdx), %eax
	addl	$1, %eax
	movl	%eax, (%rdx)
	movl	(%rdx), %eax
	movslq	(%rdi), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	(%rbx), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	(%rbx), %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi,%rax,4), %eax
	andl	$-256, %eax
	movslq	(%rdi), %rcx
	movl	(%rsi,%rcx,4), %ecx
	andl	$-256, %ecx
	addl	%ecx, %eax
	movslq	(%rbx), %rcx
	movl	(%rsi,%rcx,4), %ecx
	andl	$255, %ecx
	movslq	(%rdi), %rdx
	movl	(%rsi,%rdx,4), %edx
	andl	$255, %edx
	movw	$-6432, BasicBlockSignatureTracker # imm = 0xE6E0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jle	.LBB79_82
# %bb.80:                               #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$21, %cx
	cmpw	$-6411, %cx             # imm = 0xE6F5
	movq	%r11, %rcx
	jne	.LBB79_137
# %bb.81:                               # %BZ2_hbMakeCodeLengths.split316
                                        #   in Loop: Header=BB79_36 Depth=2
	movslq	(%rcx), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rcx,4), %ecx
	andl	$255, %ecx
	movw	$-6411, BasicBlockSignatureTracker # imm = 0xE6F5
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB79_84
.LBB79_82:                              #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$22, %cx
	cmpw	$-6410, %cx             # imm = 0xE6F6
	movq	%r10, %rcx
	jne	.LBB79_137
# %bb.83:                               # %BZ2_hbMakeCodeLengths.split318
                                        #   in Loop: Header=BB79_36 Depth=2
	movslq	(%rcx), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rcx,4), %ecx
	andl	$255, %ecx
	movw	$-6410, BasicBlockSignatureTracker # imm = 0xE6F6
	movw	$3, RunTimeSignatureAdjuster
.LBB79_84:                              #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %dx
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$15, %dx
	xorw	%bx, %dx
	cmpw	$-6406, %dx             # imm = 0xE6FA
	movq	%r8, %rdx
	movq	%r9, %rbx
	movq	%r14, %rsi
	jne	.LBB79_137
# %bb.85:                               # %BZ2_hbMakeCodeLengths.split320
                                        #   in Loop: Header=BB79_36 Depth=2
	addl	$1, %ecx
	orl	%ecx, %eax
	movslq	(%rdx), %rcx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movl	%eax, (%rdi,%rcx,4)
	movslq	(%rdx), %rax
	movl	$-1, (%rsi,%rax,4)
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movl	(%rdx), %eax
	movslq	(%rbx), %rcx
	movq	%r15, %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	(%rbx), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movslq	(%rcx), %rax
	movl	(%rdx,%rax,4), %eax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-6406, BasicBlockSignatureTracker # imm = 0xE6FA
	movw	$0, RunTimeSignatureAdjuster
.LBB79_86:                              #   Parent Loop BB79_16 Depth=1
                                        #     Parent Loop BB79_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$494, %ax               # imm = 0x1EE
	xorw	%cx, %ax
	cmpw	$-6380, %ax             # imm = 0xE714
	jne	.LBB79_131
# %bb.87:                               # %BZ2_hbMakeCodeLengths.split322
                                        #   in Loop: Header=BB79_86 Depth=3
	movq	-88(%rbp), %rax         # 8-byte Reload
	movslq	(%rax), %rax
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	(%rdx,%rax,4), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movslq	(%r15,%rcx,4), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movw	$-6380, BasicBlockSignatureTracker # imm = 0xE714
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB79_90
# %bb.88:                               #   in Loop: Header=BB79_86 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$88, %ax
	cmpw	$-6324, %ax             # imm = 0xE74C
	jne	.LBB79_131
# %bb.89:                               # %BZ2_hbMakeCodeLengths.split324
                                        #   in Loop: Header=BB79_86 Depth=3
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movl	(%rsi), %eax
	sarl	$1, %eax
	cltq
	movq	%r15, %rdx
	movl	(%rdx,%rax,4), %eax
	movslq	(%rsi), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	(%rsi), %eax
	sarl	$1, %eax
	movl	%eax, (%rsi)
	movw	$-6324, BasicBlockSignatureTracker # imm = 0xE74C
	movw	$438, RunTimeSignatureAdjuster # imm = 0x1B6
	jmp	.LBB79_86
.LBB79_90:                              #   in Loop: Header=BB79_36 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$90, %ax
	cmpw	$-6322, %ax             # imm = 0xE74E
	jne	.LBB79_137
# %bb.91:                               # %BZ2_hbMakeCodeLengths.split326
                                        #   in Loop: Header=BB79_36 Depth=2
	movq	-88(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rcx
	movl	%eax, (%r15,%rcx,4)
	movw	$-6322, BasicBlockSignatureTracker # imm = 0xE74E
	movw	$984, RunTimeSignatureAdjuster # imm = 0x3D8
	jmp	.LBB79_36
.LBB79_92:                              #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$912, %ax               # imm = 0x390
	cmpw	$-6303, %ax             # imm = 0xE761
	jne	.LBB79_139
# %bb.93:                               # %BZ2_hbMakeCodeLengths.split278
                                        #   in Loop: Header=BB79_16 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movw	$-6303, BasicBlockSignatureTracker # imm = 0xE761
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$516, %eax              # imm = 0x204
	jl	.LBB79_96
# %bb.94:                               #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-6282, %ax             # imm = 0xE776
	jne	.LBB79_139
# %bb.95:                               # %BZ2_hbMakeCodeLengths.split330
                                        #   in Loop: Header=BB79_16 Depth=1
	movw	$-6282, BasicBlockSignatureTracker # imm = 0xE776
	movw	$-6863, RunTimeSignatureAdjuster # imm = 0xE531
	movl	$2002, %edi             # imm = 0x7D2
	callq	BZ2_bz__AssertH__fail
	movw	$-6282, BasicBlockSignatureTracker # imm = 0xE776
	movw	$-6863, RunTimeSignatureAdjuster # imm = 0xE531
	movw	$-6282, BasicBlockSignatureTracker # imm = 0xE776
	movw	$23, RunTimeSignatureAdjuster
.LBB79_96:                              #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$172, %ax
	xorw	%cx, %ax
	cmpw	$-6195, %ax             # imm = 0xE7CD
	jne	.LBB79_139
# %bb.97:                               # %BZ2_hbMakeCodeLengths.split328
                                        #   in Loop: Header=BB79_16 Depth=1
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	-160(%rbp), %rax        # 8-byte Reload
	movb	$0, (%rax)
	movq	%r12, %rdi
	movl	$1, (%r12)
	movw	$-6195, BasicBlockSignatureTracker # imm = 0xE7CD
	movw	$0, RunTimeSignatureAdjuster
.LBB79_98:                              #   Parent Loop BB79_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_102 Depth 3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$17, %ax
	xorw	%cx, %ax
	cmpw	$-6180, %ax             # imm = 0xE7DC
	jne	.LBB79_136
# %bb.99:                               # %BZ2_hbMakeCodeLengths.split332
                                        #   in Loop: Header=BB79_98 Depth=2
	movl	(%rdi), %eax
	movl	(%r13), %ecx
	movw	$-6180, BasicBlockSignatureTracker # imm = 0xE7DC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB79_114
# %bb.100:                              #   in Loop: Header=BB79_98 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$-6164, %ax             # imm = 0xE7EC
	jne	.LBB79_136
# %bb.101:                              # %BZ2_hbMakeCodeLengths.split334
                                        #   in Loop: Header=BB79_98 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	$0, (%rax)
	movl	(%rdi), %eax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-6164, BasicBlockSignatureTracker # imm = 0xE7EC
	movw	$0, RunTimeSignatureAdjuster
.LBB79_102:                             #   Parent Loop BB79_16 Depth=1
                                        #     Parent Loop BB79_98 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26, %ax
	xorw	%cx, %ax
	cmpw	$-6154, %ax             # imm = 0xE7F6
	jne	.LBB79_130
# %bb.103:                              # %BZ2_hbMakeCodeLengths.split338
                                        #   in Loop: Header=BB79_102 Depth=3
	movq	-152(%rbp), %rax        # 8-byte Reload
	movslq	(%rax), %rax
	movl	(%rsi,%rax,4), %eax
	movw	$-6154, BasicBlockSignatureTracker # imm = 0xE7F6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jl	.LBB79_106
# %bb.104:                              #   in Loop: Header=BB79_102 Depth=3
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4080, %ax              # imm = 0xFF0
	cmpw	$-6138, %ax             # imm = 0xE806
	jne	.LBB79_130
# %bb.105:                              # %BZ2_hbMakeCodeLengths.split340
                                        #   in Loop: Header=BB79_102 Depth=3
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movslq	(%rcx), %rax
	movl	(%rsi,%rax,4), %eax
	movl	%eax, (%rcx)
	movq	-104(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-6138, BasicBlockSignatureTracker # imm = 0xE806
	movw	$4074, RunTimeSignatureAdjuster # imm = 0xFEA
	jmp	.LBB79_102
.LBB79_106:                             #   in Loop: Header=BB79_98 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4092, %ax              # imm = 0xFFC
	cmpw	$-6134, %ax             # imm = 0xE80A
	jne	.LBB79_136
# %bb.107:                              # %BZ2_hbMakeCodeLengths.split342
                                        #   in Loop: Header=BB79_98 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %r9d
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	(%rcx), %rcx
	movl	(%rdi), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%r9b, (%rcx,%rdx)
	movl	(%rax), %eax
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-6134, BasicBlockSignatureTracker # imm = 0xE80A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jle	.LBB79_110
# %bb.108:                              #   in Loop: Header=BB79_98 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$-6112, %ax             # imm = 0xE820
	jne	.LBB79_136
# %bb.109:                              # %BZ2_hbMakeCodeLengths.split344
                                        #   in Loop: Header=BB79_98 Depth=2
	movq	-160(%rbp), %rax        # 8-byte Reload
	movb	$1, (%rax)
	movw	$-6112, BasicBlockSignatureTracker # imm = 0xE820
	movw	$42, RunTimeSignatureAdjuster
.LBB79_110:                             #   in Loop: Header=BB79_98 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$40, %ax
	xorw	%cx, %ax
	cmpw	$-6110, %ax             # imm = 0xE822
	jne	.LBB79_136
# %bb.111:                              # %BZ2_hbMakeCodeLengths.split346
                                        #   in Loop: Header=BB79_98 Depth=2
	movw	$-6110, BasicBlockSignatureTracker # imm = 0xE822
	movw	$0, RunTimeSignatureAdjuster
# %bb.112:                              #   in Loop: Header=BB79_98 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1, %ax
	cmpw	$-6109, %ax             # imm = 0xE823
	jne	.LBB79_136
# %bb.113:                              # %BZ2_hbMakeCodeLengths.split348
                                        #   in Loop: Header=BB79_98 Depth=2
	movq	%rdi, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-6109, BasicBlockSignatureTracker # imm = 0xE823
	movw	$4078, RunTimeSignatureAdjuster # imm = 0xFEE
	jmp	.LBB79_98
.LBB79_114:                             #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3999, %ax              # imm = 0xF9F
	cmpw	$-6077, %ax             # imm = 0xE843
	jne	.LBB79_139
# %bb.115:                              # %BZ2_hbMakeCodeLengths.split336
                                        #   in Loop: Header=BB79_16 Depth=1
	movq	-160(%rbp), %rax        # 8-byte Reload
	movb	(%rax), %al
	movw	$-6077, BasicBlockSignatureTracker # imm = 0xE843
	movw	$0, RunTimeSignatureAdjuster
	cmpb	$0, %al
	jne	.LBB79_118
# %bb.116:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$-6052, %ax             # imm = 0xE85C
	jne	.LBB79_141
# %bb.117:                              # %BZ2_hbMakeCodeLengths.split352
	movw	$-6052, BasicBlockSignatureTracker # imm = 0xE85C
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB79_128
.LBB79_118:                             #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$-6023, %ax             # imm = 0xE879
	movq	%rdi, %rax
	jne	.LBB79_139
# %bb.119:                              # %BZ2_hbMakeCodeLengths.split350
                                        #   in Loop: Header=BB79_16 Depth=1
	movl	$1, (%rax)
	movw	$-6023, BasicBlockSignatureTracker # imm = 0xE879
	movw	$0, RunTimeSignatureAdjuster
.LBB79_120:                             #   Parent Loop BB79_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$171, %ax
	xorw	%cx, %ax
	cmpw	$-5934, %ax             # imm = 0xE8D2
	jne	.LBB79_135
# %bb.121:                              # %BZ2_hbMakeCodeLengths.split356
                                        #   in Loop: Header=BB79_120 Depth=2
	movl	(%rdi), %eax
	movl	(%r13), %ecx
	movw	$-5934, BasicBlockSignatureTracker # imm = 0xE8D2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB79_126
# %bb.122:                              #   in Loop: Header=BB79_120 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-5922, %ax             # imm = 0xE8DE
	jne	.LBB79_135
# %bb.123:                              # %BZ2_hbMakeCodeLengths.split358
                                        #   in Loop: Header=BB79_120 Depth=2
	movl	$2, %r9d
	movq	%rdi, %rcx
	movslq	(%rcx), %rax
	movq	-48(%rbp), %r12         # 8-byte Reload
	movl	(%r12,%rax,4), %eax
	sarl	$8, %eax
	movq	-104(%rbp), %r11        # 8-byte Reload
	movl	%eax, (%r11)
	movl	(%r11), %eax
	cltd
	idivl	%r9d
	addl	$1, %eax
	movl	%eax, (%r11)
	movl	(%r11), %eax
	shll	$8, %eax
	movslq	(%rcx), %rcx
	movl	%eax, (%r12,%rcx,4)
	movw	$-5922, BasicBlockSignatureTracker # imm = 0xE8DE
	movw	$0, RunTimeSignatureAdjuster
# %bb.124:                              #   in Loop: Header=BB79_120 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$62, %ax
	cmpw	$-5920, %ax             # imm = 0xE8E0
	jne	.LBB79_135
# %bb.125:                              # %BZ2_hbMakeCodeLengths.split362
                                        #   in Loop: Header=BB79_120 Depth=2
	movq	%rdi, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-5920, BasicBlockSignatureTracker # imm = 0xE8E0
	movw	$153, RunTimeSignatureAdjuster
	jmp	.LBB79_120
.LBB79_126:                             #   in Loop: Header=BB79_16 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$-5906, %ax             # imm = 0xE8EE
	movq	%rdi, %r12
	movq	-88(%rbp), %r11         # 8-byte Reload
	jne	.LBB79_139
# %bb.127:                              # %BZ2_hbMakeCodeLengths.split360
                                        #   in Loop: Header=BB79_16 Depth=1
	movw	$-5906, BasicBlockSignatureTracker # imm = 0xE8EE
	movw	$2819, RunTimeSignatureAdjuster # imm = 0xB03
	jmp	.LBB79_16
.LBB79_128:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$329, %ax               # imm = 0x149
	cmpw	$-5867, %ax             # imm = 0xE915
	jne	.LBB79_141
# %bb.129:                              # %BZ2_hbMakeCodeLengths.split354
	movw	$-5867, BasicBlockSignatureTracker # imm = 0xE915
	movw	$30122, RunTimeSignatureAdjuster # imm = 0x75AA
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB79_130:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit
	jmp	.LBB79_141
.LBB79_131:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit1
	jmp	.LBB79_141
.LBB79_132:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit2
	jmp	.LBB79_141
.LBB79_133:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit3
	jmp	.LBB79_141
.LBB79_134:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit4
	jmp	.LBB79_141
.LBB79_135:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit5
	jmp	.LBB79_141
.LBB79_136:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit6
	jmp	.LBB79_141
.LBB79_137:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit7
	jmp	.LBB79_141
.LBB79_138:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit8
	jmp	.LBB79_141
.LBB79_139:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit9
	jmp	.LBB79_141
.LBB79_140:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths.loopexit10
	jmp	.LBB79_141
.LBB79_141:                             # %CFerrorHandler.BZ2_hbMakeCodeLengths
	callq	FAULT_DETECTED_CFC
.Lfunc_end79:
	.size	BZ2_hbMakeCodeLengths, .Lfunc_end79-BZ2_hbMakeCodeLengths
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_hbAssignCodes       # -- Begin function BZ2_hbAssignCodes
	.p2align	4, 0x90
	.type	BZ2_hbAssignCodes,@function
BZ2_hbAssignCodes:                      # @BZ2_hbAssignCodes
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$30387, %ax             # imm = 0x76B3
	xorw	%bx, %ax
	cmpw	$-5846, %ax             # imm = 0xE92A
	jne	.LBB80_24
# %bb.1:                                # %BZ2_hbAssignCodes.split
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r11
	addq	$-16, %r11
	movq	%r11, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%r9)
	movq	%rsi, (%r10)
	movl	%edx, (%rax)
	movl	%ecx, (%r14)
	movl	%r8d, (%r11)
	movl	$0, (%r12)
	movl	(%rax), %eax
	movl	%eax, (%rbx)
	movw	$-5846, BasicBlockSignatureTracker # imm = 0xE92A
	movw	$0, RunTimeSignatureAdjuster
.LBB80_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_6 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$-5836, %ax             # imm = 0xE934
	jne	.LBB80_23
# %bb.3:                                # %BZ2_hbAssignCodes.split39
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	(%rbx), %eax
	movl	(%r14), %ecx
	movw	$-5836, BasicBlockSignatureTracker # imm = 0xE934
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB80_20
# %bb.4:                                #   in Loop: Header=BB80_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$-5804, %ax             # imm = 0xE954
	jne	.LBB80_23
# %bb.5:                                # %BZ2_hbAssignCodes.split41
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	$0, (%r15)
	movw	$-5804, BasicBlockSignatureTracker # imm = 0xE954
	movw	$0, RunTimeSignatureAdjuster
.LBB80_6:                               #   Parent Loop BB80_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$203, %ax
	xorw	%cx, %ax
	cmpw	$-5729, %ax             # imm = 0xE99F
	jne	.LBB80_22
# %bb.7:                                # %BZ2_hbAssignCodes.split45
                                        #   in Loop: Header=BB80_6 Depth=2
	movl	(%r15), %eax
	movl	(%r11), %ecx
	movw	$-5729, BasicBlockSignatureTracker # imm = 0xE99F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB80_16
# %bb.8:                                #   in Loop: Header=BB80_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$55, %ax
	cmpw	$-5720, %ax             # imm = 0xE9A8
	jne	.LBB80_22
# %bb.9:                                # %BZ2_hbAssignCodes.split47
                                        #   in Loop: Header=BB80_6 Depth=2
	movq	(%r10), %rax
	movslq	(%r15), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	(%rbx), %ecx
	movw	$-5720, BasicBlockSignatureTracker # imm = 0xE9A8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jne	.LBB80_12
# %bb.10:                               #   in Loop: Header=BB80_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$-5671, %ax             # imm = 0xE9D9
	jne	.LBB80_22
# %bb.11:                               # %BZ2_hbAssignCodes.split51
                                        #   in Loop: Header=BB80_6 Depth=2
	movl	(%r12), %eax
	movq	(%r9), %rcx
	movslq	(%r15), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%r12), %eax
	addl	$1, %eax
	movl	%eax, (%r12)
	movw	$-5671, BasicBlockSignatureTracker # imm = 0xE9D9
	movw	$113, RunTimeSignatureAdjuster
.LBB80_12:                              #   in Loop: Header=BB80_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$64, %ax
	xorw	%cx, %ax
	cmpw	$-5656, %ax             # imm = 0xE9E8
	jne	.LBB80_22
# %bb.13:                               # %BZ2_hbAssignCodes.split53
                                        #   in Loop: Header=BB80_6 Depth=2
	movw	$-5656, BasicBlockSignatureTracker # imm = 0xE9E8
	movw	$0, RunTimeSignatureAdjuster
# %bb.14:                               #   in Loop: Header=BB80_6 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$17, %ax
	cmpw	$-5639, %ax             # imm = 0xE9F9
	jne	.LBB80_22
# %bb.15:                               # %BZ2_hbAssignCodes.split55
                                        #   in Loop: Header=BB80_6 Depth=2
	movl	(%r15), %eax
	addl	$1, %eax
	movl	%eax, (%r15)
	movw	$-5639, BasicBlockSignatureTracker # imm = 0xE9F9
	movw	$173, RunTimeSignatureAdjuster
	jmp	.LBB80_6
.LBB80_16:                              #   in Loop: Header=BB80_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$926, %ax               # imm = 0x39E
	cmpw	$-5631, %ax             # imm = 0xEA01
	jne	.LBB80_23
# %bb.17:                               # %BZ2_hbAssignCodes.split49
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	(%r12), %eax
	shll	$1, %eax
	movl	%eax, (%r12)
	movw	$-5631, BasicBlockSignatureTracker # imm = 0xEA01
	movw	$0, RunTimeSignatureAdjuster
# %bb.18:                               #   in Loop: Header=BB80_2 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$35, %ax
	cmpw	$-5598, %ax             # imm = 0xEA22
	jne	.LBB80_23
# %bb.19:                               # %BZ2_hbAssignCodes.split57
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movw	$-5598, BasicBlockSignatureTracker # imm = 0xEA22
	movw	$776, RunTimeSignatureAdjuster # imm = 0x308
	jmp	.LBB80_2
.LBB80_20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$777, %ax               # imm = 0x309
	cmpw	$-5571, %ax             # imm = 0xEA3D
	jne	.LBB80_24
# %bb.21:                               # %BZ2_hbAssignCodes.split43
	movw	$-5571, BasicBlockSignatureTracker # imm = 0xEA3D
	movw	$30017, RunTimeSignatureAdjuster # imm = 0x7541
	leaq	-32(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB80_22:                              # %CFerrorHandler.BZ2_hbAssignCodes.loopexit
	jmp	.LBB80_24
.LBB80_23:                              # %CFerrorHandler.BZ2_hbAssignCodes.loopexit1
	jmp	.LBB80_24
.LBB80_24:                              # %CFerrorHandler.BZ2_hbAssignCodes
	callq	FAULT_DETECTED_CFC
.Lfunc_end80:
	.size	BZ2_hbAssignCodes, .Lfunc_end80-BZ2_hbAssignCodes
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_hbCreateDecodeTables # -- Begin function BZ2_hbCreateDecodeTables
	.p2align	4, 0x90
	.type	BZ2_hbCreateDecodeTables,@function
BZ2_hbCreateDecodeTables:               # @BZ2_hbCreateDecodeTables
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$11312, %ax             # imm = 0x2C30
	xorw	%bx, %ax
	cmpw	$-5554, %ax             # imm = 0xEA4E
	jne	.LBB81_78
# %bb.1:                                # %BZ2_hbCreateDecodeTables.split
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rsp, %r10
	addq	$-16, %r10
	movq	%r10, %rsp
	movl	%r8d, %edx
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movl	%r9d, %r11d
	movq	%rsp, %r9
	addq	$-16, %r9
	movq	%r9, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movq	%rbx, %rsp
	movq	%r12, -48(%rbp)         # 8-byte Spill
	movq	-80(%rbp), %rbx         # 8-byte Reload
	movq	%rbx, (%r12)
	movq	%rsi, (%rdi)
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, (%r14)
	movq	%rcx, (%r15)
	movl	%edx, (%r10)
	movl	%r11d, (%r8)
	movl	16(%rbp), %ecx
	movl	%ecx, (%rax)
	movl	$0, (%r13)
	movq	%r10, %r11
	movl	(%r10), %ecx
	movl	%ecx, (%r9)
	movw	$-5554, BasicBlockSignatureTracker # imm = 0xEA4E
	movw	$0, RunTimeSignatureAdjuster
.LBB81_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_6 Depth 2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$197, %cx
	xorw	%dx, %cx
	cmpw	$-5493, %cx             # imm = 0xEA8B
	jne	.LBB81_77
# %bb.3:                                # %BZ2_hbCreateDecodeTables.split123
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	(%r9), %ecx
	movl	(%r8), %edx
	movw	$-5493, BasicBlockSignatureTracker # imm = 0xEA8B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jg	.LBB81_20
# %bb.4:                                #   in Loop: Header=BB81_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$26, %cx
	cmpw	$-5487, %cx             # imm = 0xEA91
	jne	.LBB81_77
# %bb.5:                                # %BZ2_hbCreateDecodeTables.split125
                                        #   in Loop: Header=BB81_2 Depth=1
	movq	-64(%rbp), %r10         # 8-byte Reload
	movl	$0, (%r10)
	movw	$-5487, BasicBlockSignatureTracker # imm = 0xEA91
	movw	$0, RunTimeSignatureAdjuster
.LBB81_6:                               #   Parent Loop BB81_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$2, %cx
	xorw	%dx, %cx
	cmpw	$-5485, %cx             # imm = 0xEA93
	jne	.LBB81_76
# %bb.7:                                # %BZ2_hbCreateDecodeTables.split129
                                        #   in Loop: Header=BB81_6 Depth=2
	movl	(%r10), %ecx
	movl	(%rax), %edx
	movw	$-5485, BasicBlockSignatureTracker # imm = 0xEA93
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jge	.LBB81_16
# %bb.8:                                #   in Loop: Header=BB81_6 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$50, %cx
	cmpw	$-5471, %cx             # imm = 0xEAA1
	jne	.LBB81_76
# %bb.9:                                # %BZ2_hbCreateDecodeTables.split131
                                        #   in Loop: Header=BB81_6 Depth=2
	movq	(%r15), %rcx
	movslq	(%r10), %rdx
	movzbl	(%rcx,%rdx), %ecx
	movl	(%r9), %edx
	movw	$-5471, BasicBlockSignatureTracker # imm = 0xEAA1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jne	.LBB81_12
# %bb.10:                               #   in Loop: Header=BB81_6 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$101, %cx
	cmpw	$-5436, %cx             # imm = 0xEAC4
	jne	.LBB81_76
# %bb.11:                               # %BZ2_hbCreateDecodeTables.split135
                                        #   in Loop: Header=BB81_6 Depth=2
	movl	(%r10), %ecx
	movq	(%r14), %rdx
	movslq	(%r13), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	(%r13), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r13)
	movw	$-5436, BasicBlockSignatureTracker # imm = 0xEAC4
	movw	$101, RunTimeSignatureAdjuster
.LBB81_12:                              #   in Loop: Header=BB81_6 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$113, %cx
	xorw	%dx, %cx
	cmpw	$-5424, %cx             # imm = 0xEAD0
	jne	.LBB81_76
# %bb.13:                               # %BZ2_hbCreateDecodeTables.split137
                                        #   in Loop: Header=BB81_6 Depth=2
	movw	$-5424, BasicBlockSignatureTracker # imm = 0xEAD0
	movw	$0, RunTimeSignatureAdjuster
# %bb.14:                               #   in Loop: Header=BB81_6 Depth=2
	movw	BasicBlockSignatureTracker, %cx
	xorw	$51, %cx
	cmpw	$-5405, %cx             # imm = 0xEAE3
	jne	.LBB81_76
# %bb.15:                               # %BZ2_hbCreateDecodeTables.split139
                                        #   in Loop: Header=BB81_6 Depth=2
	movl	(%r10), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r10)
	movw	$-5405, BasicBlockSignatureTracker # imm = 0xEAE3
	movw	$114, RunTimeSignatureAdjuster
	jmp	.LBB81_6
.LBB81_16:                              #   in Loop: Header=BB81_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$117, %cx
	cmpw	$-5402, %cx             # imm = 0xEAE6
	jne	.LBB81_77
# %bb.17:                               # %BZ2_hbCreateDecodeTables.split133
                                        #   in Loop: Header=BB81_2 Depth=1
	movw	$-5402, BasicBlockSignatureTracker # imm = 0xEAE6
	movw	$0, RunTimeSignatureAdjuster
# %bb.18:                               #   in Loop: Header=BB81_2 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$8, %cx
	cmpw	$-5394, %cx             # imm = 0xEAEE
	jne	.LBB81_77
# %bb.19:                               # %BZ2_hbCreateDecodeTables.split141
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	(%r9), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r9)
	movw	$-5394, BasicBlockSignatureTracker # imm = 0xEAEE
	movw	$160, RunTimeSignatureAdjuster
	jmp	.LBB81_2
.LBB81_20:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$117, %cx
	cmpw	$-5378, %cx             # imm = 0xEAFE
	jne	.LBB81_78
# %bb.21:                               # %BZ2_hbCreateDecodeTables.split127
	movl	$0, (%r9)
	movw	$-5378, BasicBlockSignatureTracker # imm = 0xEAFE
	movw	$0, RunTimeSignatureAdjuster
.LBB81_22:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$484, %cx               # imm = 0x1E4
	xorw	%dx, %cx
	cmpw	$-5350, %cx             # imm = 0xEB1A
	jne	.LBB81_75
# %bb.23:                               # %BZ2_hbCreateDecodeTables.split143
                                        #   in Loop: Header=BB81_22 Depth=1
	movl	(%r9), %ecx
	movw	$-5350, BasicBlockSignatureTracker # imm = 0xEB1A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$23, %ecx
	jge	.LBB81_28
# %bb.24:                               #   in Loop: Header=BB81_22 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$7, %cx
	cmpw	$-5347, %cx             # imm = 0xEB1D
	jne	.LBB81_75
# %bb.25:                               # %BZ2_hbCreateDecodeTables.split145
                                        #   in Loop: Header=BB81_22 Depth=1
	movq	(%rdi), %rcx
	movslq	(%r9), %rdx
	movl	$0, (%rcx,%rdx,4)
	movw	$-5347, BasicBlockSignatureTracker # imm = 0xEB1D
	movw	$0, RunTimeSignatureAdjuster
# %bb.26:                               #   in Loop: Header=BB81_22 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$123, %cx
	cmpw	$-5274, %cx             # imm = 0xEB66
	jne	.LBB81_75
# %bb.27:                               # %BZ2_hbCreateDecodeTables.split149
                                        #   in Loop: Header=BB81_22 Depth=1
	movl	(%r9), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r9)
	movw	$-5274, BasicBlockSignatureTracker # imm = 0xEB66
	movw	$408, RunTimeSignatureAdjuster # imm = 0x198
	jmp	.LBB81_22
.LBB81_28:
	movw	BasicBlockSignatureTracker, %cx
	xorw	$198, %cx
	cmpw	$-5156, %cx             # imm = 0xEBDC
	jne	.LBB81_78
# %bb.29:                               # %BZ2_hbCreateDecodeTables.split147
	movl	$0, (%r9)
	movw	$-5156, BasicBlockSignatureTracker # imm = 0xEBDC
	movw	$0, RunTimeSignatureAdjuster
.LBB81_30:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %cx
	movw	RunTimeSignatureAdjuster, %dx
	xorw	$55, %cx
	xorw	%dx, %cx
	cmpw	$-5141, %cx             # imm = 0xEBEB
	jne	.LBB81_74
# %bb.31:                               # %BZ2_hbCreateDecodeTables.split151
                                        #   in Loop: Header=BB81_30 Depth=1
	movl	(%r9), %ecx
	movl	(%rax), %edx
	movw	$-5141, BasicBlockSignatureTracker # imm = 0xEBEB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%edx, %ecx
	jge	.LBB81_36
# %bb.32:                               #   in Loop: Header=BB81_30 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$2025, %cx              # imm = 0x7E9
	cmpw	$-5118, %cx             # imm = 0xEC02
	jne	.LBB81_74
# %bb.33:                               # %BZ2_hbCreateDecodeTables.split153
                                        #   in Loop: Header=BB81_30 Depth=1
	movq	(%rdi), %rcx
	movq	(%r15), %rdx
	movslq	(%r9), %rsi
	movzbl	(%rdx,%rsi), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %esi
	addl	$1, %esi
	movl	%esi, (%rcx,%rdx,4)
	movw	$-5118, BasicBlockSignatureTracker # imm = 0xEC02
	movw	$0, RunTimeSignatureAdjuster
# %bb.34:                               #   in Loop: Header=BB81_30 Depth=1
	movw	BasicBlockSignatureTracker, %cx
	xorw	$48, %cx
	cmpw	$-5070, %cx             # imm = 0xEC32
	jne	.LBB81_74
# %bb.35:                               # %BZ2_hbCreateDecodeTables.split157
                                        #   in Loop: Header=BB81_30 Depth=1
	movl	(%r9), %ecx
	addl	$1, %ecx
	movl	%ecx, (%r9)
	movw	$-5070, BasicBlockSignatureTracker # imm = 0xEC32
	movw	$2030, RunTimeSignatureAdjuster # imm = 0x7EE
	jmp	.LBB81_30
.LBB81_36:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2015, %ax              # imm = 0x7DF
	cmpw	$-5068, %ax             # imm = 0xEC34
	jne	.LBB81_78
# %bb.37:                               # %BZ2_hbCreateDecodeTables.split155
	movl	$1, (%r9)
	movw	$-5068, BasicBlockSignatureTracker # imm = 0xEC34
	movw	$0, RunTimeSignatureAdjuster
.LBB81_38:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8, %ax
	xorw	%cx, %ax
	cmpw	$-5060, %ax             # imm = 0xEC3C
	jne	.LBB81_73
# %bb.39:                               # %BZ2_hbCreateDecodeTables.split159
                                        #   in Loop: Header=BB81_38 Depth=1
	movl	(%r9), %eax
	movw	$-5060, BasicBlockSignatureTracker # imm = 0xEC3C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$23, %eax
	jge	.LBB81_44
# %bb.40:                               #   in Loop: Header=BB81_38 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$-5047, %ax             # imm = 0xEC49
	jne	.LBB81_73
# %bb.41:                               # %BZ2_hbCreateDecodeTables.split161
                                        #   in Loop: Header=BB81_38 Depth=1
	movq	(%rdi), %rax
	movl	(%r9), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdi), %rcx
	movslq	(%r9), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movw	$-5047, BasicBlockSignatureTracker # imm = 0xEC49
	movw	$0, RunTimeSignatureAdjuster
# %bb.42:                               #   in Loop: Header=BB81_38 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-5043, %ax             # imm = 0xEC4D
	jne	.LBB81_73
# %bb.43:                               # %BZ2_hbCreateDecodeTables.split165
                                        #   in Loop: Header=BB81_38 Depth=1
	movl	(%r9), %eax
	addl	$1, %eax
	movl	%eax, (%r9)
	movw	$-5043, BasicBlockSignatureTracker # imm = 0xEC4D
	movw	$121, RunTimeSignatureAdjuster
	jmp	.LBB81_38
.LBB81_44:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$86, %ax
	cmpw	$-5014, %ax             # imm = 0xEC6A
	jne	.LBB81_78
# %bb.45:                               # %BZ2_hbCreateDecodeTables.split163
	movl	$0, (%r9)
	movw	$-5014, BasicBlockSignatureTracker # imm = 0xEC6A
	movw	$0, RunTimeSignatureAdjuster
.LBB81_46:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$26, %ax
	xorw	%cx, %ax
	cmpw	$-5008, %ax             # imm = 0xEC70
	jne	.LBB81_72
# %bb.47:                               # %BZ2_hbCreateDecodeTables.split167
                                        #   in Loop: Header=BB81_46 Depth=1
	movl	(%r9), %eax
	movw	$-5008, BasicBlockSignatureTracker # imm = 0xEC70
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$23, %eax
	jge	.LBB81_52
# %bb.48:                               #   in Loop: Header=BB81_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$234, %ax
	cmpw	$-4966, %ax             # imm = 0xEC9A
	jne	.LBB81_72
# %bb.49:                               # %BZ2_hbCreateDecodeTables.split169
                                        #   in Loop: Header=BB81_46 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	%r9, %rdx
	movslq	(%r9), %rcx
	movl	$0, (%rax,%rcx,4)
	movw	$-4966, BasicBlockSignatureTracker # imm = 0xEC9A
	movw	$0, RunTimeSignatureAdjuster
# %bb.50:                               #   in Loop: Header=BB81_46 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$61, %ax
	cmpw	$-4953, %ax             # imm = 0xECA7
	movq	%rdx, %r9
	jne	.LBB81_72
# %bb.51:                               # %BZ2_hbCreateDecodeTables.split173
                                        #   in Loop: Header=BB81_46 Depth=1
	movl	(%r9), %eax
	addl	$1, %eax
	movl	%eax, (%r9)
	movw	$-4953, BasicBlockSignatureTracker # imm = 0xECA7
	movw	$205, RunTimeSignatureAdjuster
	jmp	.LBB81_46
.LBB81_52:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$220, %ax
	cmpw	$-4948, %ax             # imm = 0xECAC
	jne	.LBB81_78
# %bb.53:                               # %BZ2_hbCreateDecodeTables.split171
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	$0, (%rax)
	movl	(%r11), %eax
	movq	%r9, %rbx
	movl	%eax, (%r9)
	movw	$-4948, BasicBlockSignatureTracker # imm = 0xECAC
	movw	$0, RunTimeSignatureAdjuster
.LBB81_54:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$-4942, %ax             # imm = 0xECB2
	jne	.LBB81_71
# %bb.55:                               # %BZ2_hbCreateDecodeTables.split175
                                        #   in Loop: Header=BB81_54 Depth=1
	movl	(%rbx), %eax
	movl	(%r8), %ecx
	movw	$-4942, BasicBlockSignatureTracker # imm = 0xECB2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB81_60
# %bb.56:                               #   in Loop: Header=BB81_54 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$120, %ax
	cmpw	$-4918, %ax             # imm = 0xECCA
	jne	.LBB81_71
# %bb.57:                               # %BZ2_hbCreateDecodeTables.split177
                                        #   in Loop: Header=BB81_54 Depth=1
	movq	%rdi, %rdx
	movq	(%rdx), %rax
	movq	%rbx, %r9
	movl	(%r9), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	(%rdx), %rcx
	movslq	(%r9), %rdx
	subl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rsi         # 8-byte Reload
	addl	(%rsi), %eax
	movl	%eax, (%rsi)
	movl	(%rsi), %eax
	subl	$1, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movslq	(%r9), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	(%rsi), %eax
	shll	$1, %eax
	movl	%eax, (%rsi)
	movw	$-4918, BasicBlockSignatureTracker # imm = 0xECCA
	movw	$0, RunTimeSignatureAdjuster
# %bb.58:                               #   in Loop: Header=BB81_54 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$455, %ax               # imm = 0x1C7
	cmpw	$-4851, %ax             # imm = 0xED0D
	jne	.LBB81_71
# %bb.59:                               # %BZ2_hbCreateDecodeTables.split181
                                        #   in Loop: Header=BB81_54 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-4851, BasicBlockSignatureTracker # imm = 0xED0D
	movw	$417, RunTimeSignatureAdjuster # imm = 0x1A1
	jmp	.LBB81_54
.LBB81_60:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$431, %ax               # imm = 0x1AF
	cmpw	$-4835, %ax             # imm = 0xED1D
	movq	%rbx, %rcx
	jne	.LBB81_78
# %bb.61:                               # %BZ2_hbCreateDecodeTables.split179
	movl	(%r11), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-4835, BasicBlockSignatureTracker # imm = 0xED1D
	movw	$0, RunTimeSignatureAdjuster
.LBB81_62:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2, %ax
	xorw	%cx, %ax
	cmpw	$-4833, %ax             # imm = 0xED1F
	jne	.LBB81_70
# %bb.63:                               # %BZ2_hbCreateDecodeTables.split183
                                        #   in Loop: Header=BB81_62 Depth=1
	movl	(%rbx), %eax
	movl	(%r8), %ecx
	movw	$-4833, BasicBlockSignatureTracker # imm = 0xED1F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jg	.LBB81_68
# %bb.64:                               #   in Loop: Header=BB81_62 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$52, %ax
	cmpw	$-4821, %ax             # imm = 0xED2B
	jne	.LBB81_70
# %bb.65:                               # %BZ2_hbCreateDecodeTables.split185
                                        #   in Loop: Header=BB81_62 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	%rbx, %r9
	movl	(%r9), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$1, %eax
	shll	$1, %eax
	movq	%rdi, %rsi
	movq	(%rsi), %rcx
	movslq	(%r9), %rdx
	subl	(%rcx,%rdx,4), %eax
	movq	(%rsi), %rcx
	movslq	(%r9), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movw	$-4821, BasicBlockSignatureTracker # imm = 0xED2B
	movw	$0, RunTimeSignatureAdjuster
# %bb.66:                               #   in Loop: Header=BB81_62 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$22, %ax
	cmpw	$-4803, %ax             # imm = 0xED3D
	jne	.LBB81_70
# %bb.67:                               # %BZ2_hbCreateDecodeTables.split189
                                        #   in Loop: Header=BB81_62 Depth=1
	movq	%rbx, %rcx
	movl	(%rcx), %eax
	addl	$1, %eax
	movl	%eax, (%rcx)
	movw	$-4803, BasicBlockSignatureTracker # imm = 0xED3D
	movw	$32, RunTimeSignatureAdjuster
	jmp	.LBB81_62
.LBB81_68:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$83, %ax
	cmpw	$-4788, %ax             # imm = 0xED4C
	jne	.LBB81_78
# %bb.69:                               # %BZ2_hbCreateDecodeTables.split187
	movw	$-4788, BasicBlockSignatureTracker # imm = 0xED4C
	movw	$10368, RunTimeSignatureAdjuster # imm = 0x2880
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB81_70:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit
	jmp	.LBB81_78
.LBB81_71:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit1
	jmp	.LBB81_78
.LBB81_72:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit2
	jmp	.LBB81_78
.LBB81_73:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit3
	jmp	.LBB81_78
.LBB81_74:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit4
	jmp	.LBB81_78
.LBB81_75:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit5
	jmp	.LBB81_78
.LBB81_76:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit6
	jmp	.LBB81_78
.LBB81_77:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables.loopexit7
	jmp	.LBB81_78
.LBB81_78:                              # %CFerrorHandler.BZ2_hbCreateDecodeTables
	callq	FAULT_DETECTED_CFC
.Lfunc_end81:
	.size	BZ2_hbCreateDecodeTables, .Lfunc_end81-BZ2_hbCreateDecodeTables
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2               # -- Begin function ran
.LCPI82_0:
	.long	1325400064              # float 2.14748365E+9
	.text
	.globl	ran
	.p2align	4, 0x90
	.type	ran,@function
ran:                                    # @ran
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$661, %ax               # imm = 0x295
	xorw	%cx, %ax
	cmpw	$-4778, %ax             # imm = 0xED56
	jne	.LBB82_9
# %bb.1:                                # %ran.split25
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$661, %ax               # imm = 0x295
	xorw	%cx, %ax
	cmpw	$-4778, %ax             # imm = 0xED56
	jne	.LBB82_9
# %bb.2:                                # %ran.split23
	movl	$127773, %r8d           # imm = 0x1F31D
	movq	%rsp, %rdi
	addq	$-16, %rdi
	movq	%rdi, %rsp
	movq	%rsp, %rsi
	addq	$-16, %rsi
	movq	%rsi, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	seedi, %rax
	cqto
	idivq	%r8
	movq	%rax, (%rsi)
	movq	seedi, %rax
	cqto
	idivq	%r8
	movq	%rdx, (%rdi)
	imulq	$16807, (%rdi), %rax    # imm = 0x41A7
	imulq	$2836, (%rsi), %rdx     # imm = 0xB14
	subq	%rdx, %rax
	movq	%rax, (%rcx)
	movq	(%rcx), %rax
	movw	$-4778, BasicBlockSignatureTracker # imm = 0xED56
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jle	.LBB82_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-4775, %ax             # imm = 0xED59
	jne	.LBB82_9
# %bb.4:                                # %ran.split
	movq	(%rcx), %rax
	movq	%rax, seedi
	movw	$-4775, BasicBlockSignatureTracker # imm = 0xED59
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB82_7
.LBB82_5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$58, %ax
	cmpw	$-4756, %ax             # imm = 0xED6C
	jne	.LBB82_9
# %bb.6:                                # %ran.split19
	movq	(%rcx), %rax
	addq	$2147483647, %rax       # imm = 0x7FFFFFFF
	movq	%rax, seedi
	movw	$-4756, BasicBlockSignatureTracker # imm = 0xED6C
	movw	$53, RunTimeSignatureAdjuster
.LBB82_7:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$211, %ax
	xorw	%cx, %ax
	cmpw	$-4726, %ax             # imm = 0xED8A
	jne	.LBB82_9
# %bb.8:                                # %ran.split21
	movss	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	movq	seedi, %rax
	cvtsi2ssq	%rax, %xmm1
	divss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movw	$-4726, BasicBlockSignatureTracker # imm = 0xED8A
	movw	$570, RunTimeSignatureAdjuster # imm = 0x23A
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB82_9:                               # %CFerrorHandler.ran
	callq	FAULT_DETECTED_CFC
.Lfunc_end82:
	.size	ran, .Lfunc_end82-ran
	.cfi_endproc
                                        # -- End function
	.globl	spec_init               # -- Begin function spec_init
	.p2align	4, 0x90
	.type	spec_init,@function
spec_init:                              # @spec_init
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$5702, %ax              # imm = 0x1646
	xorw	%cx, %ax
	cmpw	$-4718, %ax             # imm = 0xED92
	jne	.LBB83_28
# %bb.1:                                # %spec_init.split67
	movl	$3, %eax
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movl	dbglvl, %ecx
	movw	$-4718, BasicBlockSignatureTracker # imm = 0xED92
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB83_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$-4690, %ax             # imm = 0xEDAE
	jne	.LBB83_28
# %bb.3:                                # %spec_init.split
	movabsq	$.L.str.81, %rdi
	movb	$0, %al
	callq	printf
	movw	$-4690, BasicBlockSignatureTracker # imm = 0xEDAE
	movw	$60, RunTimeSignatureAdjuster
.LBB83_4:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$34, %ax
	xorw	%cx, %ax
	cmpw	$-4688, %ax             # imm = 0xEDB0
	jne	.LBB83_28
# %bb.5:                                # %spec_init.split45
	movl	$0, (%rbx)
	movw	$-4688, BasicBlockSignatureTracker # imm = 0xEDB0
	movw	$0, RunTimeSignatureAdjuster
.LBB83_6:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_14 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$97, %ax
	xorw	%cx, %ax
	cmpw	$-4655, %ax             # imm = 0xEDD1
	jne	.LBB83_27
# %bb.7:                                # %spec_init.split47
                                        #   in Loop: Header=BB83_6 Depth=1
	movl	(%rbx), %eax
	movw	$-4655, BasicBlockSignatureTracker # imm = 0xEDD1
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jge	.LBB83_24
# %bb.8:                                #   in Loop: Header=BB83_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$992, %ax               # imm = 0x3E0
	cmpw	$-4559, %ax             # imm = 0xEE31
	jne	.LBB83_27
# %bb.9:                                # %spec_init.split49
                                        #   in Loop: Header=BB83_6 Depth=1
	movabsq	$spec_fd, %r12
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r12, %rcx
	addq	%rax, %rcx
	movl	(%rcx), %eax
	movl	%eax, (%r15)
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r12, %rdi
	addq	%rax, %rdi
	xorl	%esi, %esi
	movl	$24, %edx
	callq	memset
	movl	(%r15), %eax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %r12
	movl	%eax, (%r12)
	movl	(%r15), %eax
	addl	$1048576, %eax          # imm = 0x100000
	movslq	%eax, %rdi
	callq	malloc
	movabsq	$spec_fd, %rcx
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movq	%rax, 16(%rsi)
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rcx
	movq	16(%rcx), %rax
	movw	$-4559, BasicBlockSignatureTracker # imm = 0xEE31
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB83_12
# %bb.10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$80, %ax
	cmpw	$-4511, %ax             # imm = 0xEE61
	jne	.LBB83_28
# %bb.11:                               # %spec_init.split53
	movabsq	$.L.str.1.82, %rdi
	movb	$0, %al
	callq	printf
	xorl	%edi, %edi
	callq	exit
	movw	$-4511, BasicBlockSignatureTracker # imm = 0xEE61
	movw	$0, RunTimeSignatureAdjuster
.LBB83_12:                              #   in Loop: Header=BB83_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$85, %ax
	cmpw	$-4508, %ax             # imm = 0xEE64
	jne	.LBB83_27
# %bb.13:                               # %spec_init.split55
                                        #   in Loop: Header=BB83_6 Depth=1
	movl	$0, (%r14)
	movw	$-4508, BasicBlockSignatureTracker # imm = 0xEE64
	movw	$0, RunTimeSignatureAdjuster
.LBB83_14:                              #   Parent Loop BB83_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$22, %ax
	xorw	%cx, %ax
	cmpw	$-4494, %ax             # imm = 0xEE72
	jne	.LBB83_26
# %bb.15:                               # %spec_init.split57
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	(%r14), %eax
	movl	(%r15), %ecx
	movw	$-4494, BasicBlockSignatureTracker # imm = 0xEE72
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB83_20
# %bb.16:                               #   in Loop: Header=BB83_14 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-4485, %ax             # imm = 0xEE7B
	jne	.LBB83_26
# %bb.17:                               # %spec_init.split59
                                        #   in Loop: Header=BB83_14 Depth=2
	movabsq	$spec_fd, %rax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	16(%rax), %rax
	movslq	(%r14), %rcx
	movb	$0, (%rax,%rcx)
	movw	$-4485, BasicBlockSignatureTracker # imm = 0xEE7B
	movw	$0, RunTimeSignatureAdjuster
# %bb.18:                               #   in Loop: Header=BB83_14 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$235, %ax
	cmpw	$-4464, %ax             # imm = 0xEE90
	jne	.LBB83_26
# %bb.19:                               # %spec_init.split63
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	(%r14), %eax
	addl	$1024, %eax             # imm = 0x400
	movl	%eax, (%r14)
	movw	$-4464, BasicBlockSignatureTracker # imm = 0xEE90
	movw	$244, RunTimeSignatureAdjuster
	jmp	.LBB83_14
.LBB83_20:                              #   in Loop: Header=BB83_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$238, %ax
	cmpw	$-4452, %ax             # imm = 0xEE9C
	jne	.LBB83_27
# %bb.21:                               # %spec_init.split61
                                        #   in Loop: Header=BB83_6 Depth=1
	movw	$-4452, BasicBlockSignatureTracker # imm = 0xEE9C
	movw	$0, RunTimeSignatureAdjuster
# %bb.22:                               #   in Loop: Header=BB83_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$39, %ax
	cmpw	$-4421, %ax             # imm = 0xEEBB
	jne	.LBB83_27
# %bb.23:                               # %spec_init.split65
                                        #   in Loop: Header=BB83_6 Depth=1
	movl	(%rbx), %eax
	addl	$1, %eax
	movl	%eax, (%rbx)
	movw	$-4421, BasicBlockSignatureTracker # imm = 0xEEBB
	movw	$779, RunTimeSignatureAdjuster # imm = 0x30B
	jmp	.LBB83_6
.LBB83_24:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$778, %ax               # imm = 0x30A
	cmpw	$-4389, %ax             # imm = 0xEEDB
	jne	.LBB83_28
# %bb.25:                               # %spec_init.split51
	movw	$-4389, BasicBlockSignatureTracker # imm = 0xEEDB
	movw	$5454, RunTimeSignatureAdjuster # imm = 0x154E
	xorl	%eax, %eax
	leaq	-32(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB83_26:                              # %CFerrorHandler.spec_init.loopexit
	jmp	.LBB83_28
.LBB83_27:                              # %CFerrorHandler.spec_init.loopexit1
	jmp	.LBB83_28
.LBB83_28:                              # %CFerrorHandler.spec_init
	callq	FAULT_DETECTED_CFC
.Lfunc_end83:
	.size	spec_init, .Lfunc_end83-spec_init
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function spec_random_load
.LCPI84_0:
	.quad	4629700416936869888     # double 32
.LCPI84_1:
	.quad	4643211215818981376     # double 256
	.text
	.globl	spec_random_load
	.p2align	4, 0x90
	.type	spec_random_load,@function
spec_random_load:                       # @spec_random_load
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$4194328, %rsp          # imm = 0x400018
	.cfi_offset %rbx, -24
	movl	$4, %eax
	movl	%edi, -20(%rbp)
	movl	dbglvl, %ecx
	movw	$-4358, BasicBlockSignatureTracker # imm = 0xEEFA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB84_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$500, %ax               # imm = 0x1F4
	cmpw	$-4338, %ax             # imm = 0xEF0E
	jne	.LBB84_40
# %bb.2:                                # %spec_random_load.split
	movabsq	$.L.str.2.83, %rdi
	movb	$0, %al
	callq	printf
	movw	$-4338, BasicBlockSignatureTracker # imm = 0xEF0E
	movw	$500, RunTimeSignatureAdjuster # imm = 0x1F4
.LBB84_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$482, %ax               # imm = 0x1E2
	xorw	%cx, %ax
	cmpw	$-4328, %ax             # imm = 0xEF18
	jne	.LBB84_40
# %bb.4:                                # %spec_random_load.split64
	movl	$0, -12(%rbp)
	movw	$-4328, BasicBlockSignatureTracker # imm = 0xEF18
	movw	$0, RunTimeSignatureAdjuster
.LBB84_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_13 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$84, %ax
	xorw	%cx, %ax
	cmpw	$-4276, %ax             # imm = 0xEF4C
	jne	.LBB84_39
# %bb.6:                                # %spec_random_load.split66
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-12(%rbp), %eax
	movw	$-4276, BasicBlockSignatureTracker # imm = 0xEF4C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$32, %eax
	jge	.LBB84_23
# %bb.7:                                #   in Loop: Header=BB84_5 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$-4247, %ax             # imm = 0xEF69
	jne	.LBB84_39
# %bb.8:                                # %spec_random_load.split68
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	$5, %eax
	movl	dbglvl, %ecx
	movw	$-4247, BasicBlockSignatureTracker # imm = 0xEF69
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB84_11
# %bb.9:                                #   in Loop: Header=BB84_5 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$239, %ax
	cmpw	$-4218, %ax             # imm = 0xEF86
	jne	.LBB84_39
# %bb.10:                               # %spec_random_load.split72
                                        #   in Loop: Header=BB84_5 Depth=1
	movabsq	$.L.str.3.84, %rdi
	movl	-12(%rbp), %esi
	movb	$0, %al
	callq	printf
	movw	$-4218, BasicBlockSignatureTracker # imm = 0xEF86
	movw	$239, RunTimeSignatureAdjuster
.LBB84_11:                              #   in Loop: Header=BB84_5 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$197, %ax
	xorw	%cx, %ax
	cmpw	$-4180, %ax             # imm = 0xEFAC
	jne	.LBB84_39
# %bb.12:                               # %spec_random_load.split74
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	$0, -16(%rbp)
	movw	$-4180, BasicBlockSignatureTracker # imm = 0xEFAC
	movw	$0, RunTimeSignatureAdjuster
.LBB84_13:                              #   Parent Loop BB84_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$28, %ax
	xorw	%cx, %ax
	cmpw	$-4176, %ax             # imm = 0xEFB0
	jne	.LBB84_38
# %bb.14:                               # %spec_random_load.split76
                                        #   in Loop: Header=BB84_13 Depth=2
	movl	-16(%rbp), %eax
	movw	$-4176, BasicBlockSignatureTracker # imm = 0xEFB0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$131072, %eax           # imm = 0x20000
	jge	.LBB84_19
# %bb.15:                               #   in Loop: Header=BB84_13 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$115, %ax
	cmpw	$-4157, %ax             # imm = 0xEFC3
	jne	.LBB84_38
# %bb.16:                               # %spec_random_load.split78
                                        #   in Loop: Header=BB84_13 Depth=2
	movw	$-4157, BasicBlockSignatureTracker # imm = 0xEFC3
	movw	$0, RunTimeSignatureAdjuster
	callq	ran
	leaq	-4194336(%rbp), %rax
	movsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movw	$-4157, BasicBlockSignatureTracker # imm = 0xEFC3
	movw	$0, RunTimeSignatureAdjuster
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %ecx
	movslq	-12(%rbp), %rdx
	shlq	$17, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movw	$-4157, BasicBlockSignatureTracker # imm = 0xEFC3
	movw	$0, RunTimeSignatureAdjuster
# %bb.17:                               #   in Loop: Header=BB84_13 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$5, %ax
	cmpw	$-4154, %ax             # imm = 0xEFC6
	jne	.LBB84_38
# %bb.18:                               # %spec_random_load.split82
                                        #   in Loop: Header=BB84_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movw	$-4154, BasicBlockSignatureTracker # imm = 0xEFC6
	movw	$106, RunTimeSignatureAdjuster
	jmp	.LBB84_13
.LBB84_19:                              #   in Loop: Header=BB84_5 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$120, %ax
	cmpw	$-4152, %ax             # imm = 0xEFC8
	jne	.LBB84_39
# %bb.20:                               # %spec_random_load.split80
                                        #   in Loop: Header=BB84_5 Depth=1
	movw	$-4152, BasicBlockSignatureTracker # imm = 0xEFC8
	movw	$0, RunTimeSignatureAdjuster
# %bb.21:                               #   in Loop: Header=BB84_5 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$32, %ax
	cmpw	$-4120, %ax             # imm = 0xEFE8
	jne	.LBB84_39
# %bb.22:                               # %spec_random_load.split84
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movw	$-4120, BasicBlockSignatureTracker # imm = 0xEFE8
	movw	$240, RunTimeSignatureAdjuster
	jmp	.LBB84_5
.LBB84_23:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$161, %ax
	cmpw	$-4115, %ax             # imm = 0xEFED
	jne	.LBB84_40
# %bb.24:                               # %spec_random_load.split70
	movl	$4, %eax
	movl	dbglvl, %ecx
	movw	$-4115, BasicBlockSignatureTracker # imm = 0xEFED
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB84_27
# %bb.25:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-4112, %ax             # imm = 0xEFF0
	jne	.LBB84_40
# %bb.26:                               # %spec_random_load.split86
	movabsq	$.L.str.4.85, %rdi
	movb	$0, %al
	callq	printf
	movw	$-4112, BasicBlockSignatureTracker # imm = 0xEFF0
	movw	$29, RunTimeSignatureAdjuster
.LBB84_27:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$8168, %ax              # imm = 0x1FE8
	xorw	%cx, %ax
	cmpw	$-4091, %ax             # imm = 0xF005
	jne	.LBB84_40
# %bb.28:                               # %spec_random_load.split88
	movl	$0, -12(%rbp)
	movw	$-4091, BasicBlockSignatureTracker # imm = 0xF005
	movw	$0, RunTimeSignatureAdjuster
.LBB84_29:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$30, %ax
	xorw	%cx, %ax
	cmpw	$-4069, %ax             # imm = 0xF01B
	jne	.LBB84_37
# %bb.30:                               # %spec_random_load.split90
                                        #   in Loop: Header=BB84_29 Depth=1
	movabsq	$spec_fd, %rax
	movl	-12(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movw	$-4069, BasicBlockSignatureTracker # imm = 0xF01B
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jge	.LBB84_35
# %bb.31:                               #   in Loop: Header=BB84_29 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$-4050, %ax             # imm = 0xF02E
	jne	.LBB84_37
# %bb.32:                               # %spec_random_load.split92
                                        #   in Loop: Header=BB84_29 Depth=1
	movabsq	$spec_fd, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	16(%rax), %rbx
	movslq	-12(%rbp), %rax
	addq	%rax, %rbx
	movw	$-4050, BasicBlockSignatureTracker # imm = 0xF02E
	movw	$8173, RunTimeSignatureAdjuster # imm = 0x1FED
	callq	ran
	leaq	-4194336(%rbp), %rsi
	movsd	.LCPI84_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movw	$-4050, BasicBlockSignatureTracker # imm = 0xF02E
	movw	$8173, RunTimeSignatureAdjuster # imm = 0x1FED
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	cltq
	shlq	$17, %rax
	addq	%rax, %rsi
	movq	%rbx, %rdi
	movl	$131072, %edx           # imm = 0x20000
	callq	memcpy
	movw	$-4050, BasicBlockSignatureTracker # imm = 0xF02E
	movw	$0, RunTimeSignatureAdjuster
# %bb.33:                               #   in Loop: Header=BB84_29 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-4039, %ax             # imm = 0xF039
	jne	.LBB84_37
# %bb.34:                               # %spec_random_load.split96
                                        #   in Loop: Header=BB84_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$131072, %eax           # imm = 0x20000
	movl	%eax, -12(%rbp)
	movw	$-4039, BasicBlockSignatureTracker # imm = 0xF039
	movw	$60, RunTimeSignatureAdjuster
	jmp	.LBB84_29
.LBB84_35:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$95, %ax
	cmpw	$-4028, %ax             # imm = 0xF044
	jne	.LBB84_40
# %bb.36:                               # %spec_random_load.split94
	movabsq	$spec_fd, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$1048576, 4(%rax)       # imm = 0x100000
	movw	$-4028, BasicBlockSignatureTracker # imm = 0xF044
	movw	$0, RunTimeSignatureAdjuster
	xorl	%eax, %eax
	addq	$4194328, %rsp          # imm = 0x400018
	popq	%rbx
	popq	%rbp
	retq
.LBB84_37:                              # %CFerrorHandler.spec_random_load.loopexit
	jmp	.LBB84_40
.LBB84_38:                              # %CFerrorHandler.spec_random_load.loopexit1
	jmp	.LBB84_40
.LBB84_39:                              # %CFerrorHandler.spec_random_load.loopexit2
	jmp	.LBB84_40
.LBB84_40:                              # %CFerrorHandler.spec_random_load
	callq	FAULT_DETECTED_CFC
.Lfunc_end84:
	.size	spec_random_load, .Lfunc_end84-spec_random_load
	.cfi_endproc
                                        # -- End function
	.globl	spec_load               # -- Begin function spec_load
	.p2align	4, 0x90
	.type	spec_load,@function
spec_load:                              # @spec_load
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$2967, %ax              # imm = 0xB97
	xorw	%cx, %ax
	cmpw	$-3975, %ax             # imm = 0xF079
	jne	.LBB85_39
# %bb.1:                                # %spec_load.split96
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rsp
	movl	%edi, (%r12)
	movq	%rsi, (%r13)
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	%edx, (%rax)
	movq	(%r13), %rdi
	xorl	%esi, %esi
	movb	$0, %al
	callq	open
	movl	%eax, (%rbx)
	movl	(%rbx), %eax
	movw	$-3975, BasicBlockSignatureTracker # imm = 0xF079
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB85_4
# %bb.2:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$254, %ax
	cmpw	$-3961, %ax             # imm = 0xF087
	jne	.LBB85_39
# %bb.3:                                # %spec_load.split
	movq	stderr, %r15
	movq	(%r13), %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movabsq	$.L.str.5.86, %rsi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-3961, BasicBlockSignatureTracker # imm = 0xF087
	movw	$0, RunTimeSignatureAdjuster
.LBB85_4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$236, %ax
	cmpw	$-3947, %ax             # imm = 0xF095
	jne	.LBB85_39
# %bb.5:                                # %spec_load.split64
	movabsq	$spec_fd, %rax
	movslq	(%r12), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	$0, 4(%rdx)
	movslq	(%r12), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 8(%rax)
	movl	$0, (%r14)
	movw	$-3947, BasicBlockSignatureTracker # imm = 0xF095
	movw	$0, RunTimeSignatureAdjuster
.LBB85_6:                               # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$93, %ax
	xorw	%cx, %ax
	cmpw	$-3896, %ax             # imm = 0xF0C8
	jne	.LBB85_38
# %bb.7:                                # %spec_load.split66
                                        #   in Loop: Header=BB85_6 Depth=1
	movl	(%r14), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-3896, BasicBlockSignatureTracker # imm = 0xF0C8
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB85_20
# %bb.8:                                #   in Loop: Header=BB85_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$18, %ax
	cmpw	$-3878, %ax             # imm = 0xF0DA
	jne	.LBB85_38
# %bb.9:                                # %spec_load.split68
                                        #   in Loop: Header=BB85_6 Depth=1
	movabsq	$spec_fd, %rax
	movl	(%rbx), %edi
	movslq	(%r12), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	16(%rax), %rsi
	movslq	(%r14), %rax
	addq	%rax, %rsi
	movl	$131072, %edx           # imm = 0x20000
	callq	read
	movl	%eax, (%r15)
	movl	(%r15), %eax
	movw	$-3878, BasicBlockSignatureTracker # imm = 0xF0DA
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jne	.LBB85_12
# %bb.10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$48, %ax
	cmpw	$-3862, %ax             # imm = 0xF0EA
	jne	.LBB85_39
# %bb.11:                               # %spec_load.split72
	movw	$-3862, BasicBlockSignatureTracker # imm = 0xF0EA
	movw	$34, RunTimeSignatureAdjuster
	jmp	.LBB85_21
.LBB85_12:                              #   in Loop: Header=BB85_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-3849, %ax             # imm = 0xF0F7
	jne	.LBB85_38
# %bb.13:                               # %spec_load.split74
                                        #   in Loop: Header=BB85_6 Depth=1
	movl	(%r15), %eax
	movw	$-3849, BasicBlockSignatureTracker # imm = 0xF0F7
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jge	.LBB85_16
# %bb.14:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$10, %ax
	cmpw	$-3843, %ax             # imm = 0xF0FD
	jne	.LBB85_39
# %bb.15:                               # %spec_load.split76
	movq	stderr, %r15
	movq	(%r13), %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movabsq	$.L.str.6.87, %rsi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-3843, BasicBlockSignatureTracker # imm = 0xF0FD
	movw	$0, RunTimeSignatureAdjuster
.LBB85_16:                              #   in Loop: Header=BB85_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$501, %ax               # imm = 0x1F5
	cmpw	$-3838, %ax             # imm = 0xF102
	jne	.LBB85_38
# %bb.17:                               # %spec_load.split78
                                        #   in Loop: Header=BB85_6 Depth=1
	movabsq	$spec_fd, %rax
	movl	(%r15), %ecx
	movslq	(%r12), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	addl	4(%rax), %ecx
	movl	%ecx, 4(%rax)
	movw	$-3838, BasicBlockSignatureTracker # imm = 0xF102
	movw	$0, RunTimeSignatureAdjuster
# %bb.18:                               #   in Loop: Header=BB85_6 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-3827, %ax             # imm = 0xF10D
	jne	.LBB85_38
# %bb.19:                               # %spec_load.split80
                                        #   in Loop: Header=BB85_6 Depth=1
	movl	(%r15), %eax
	addl	(%r14), %eax
	movl	%eax, (%r14)
	movw	$-3827, BasicBlockSignatureTracker # imm = 0xF10D
	movw	$408, RunTimeSignatureAdjuster # imm = 0x198
	jmp	.LBB85_6
.LBB85_20:                              # %.loopexit
	jmp	.LBB85_21
.LBB85_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$454, %ax               # imm = 0x1C6
	xorw	%cx, %ax
	cmpw	$-3826, %ax             # imm = 0xF10E
	jne	.LBB85_39
# %bb.22:                               # %spec_load.split70
	movl	(%rbx), %edi
	callq	close
	movw	$-3826, BasicBlockSignatureTracker # imm = 0xF10E
	movw	$0, RunTimeSignatureAdjuster
.LBB85_23:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$36, %ax
	xorw	%cx, %ax
	cmpw	$-3798, %ax             # imm = 0xF12A
	jne	.LBB85_37
# %bb.24:                               # %spec_load.split82
                                        #   in Loop: Header=BB85_23 Depth=1
	movabsq	$spec_fd, %rax
	movslq	(%r12), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movw	$-3798, BasicBlockSignatureTracker # imm = 0xF12A
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB85_35
# %bb.25:                               #   in Loop: Header=BB85_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-3789, %ax             # imm = 0xF133
	jne	.LBB85_37
# %bb.26:                               # %spec_load.split84
                                        #   in Loop: Header=BB85_23 Depth=1
	movabsq	$spec_fd, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movl	(%rcx), %ecx
	movslq	(%r12), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	4(%rsi), %ecx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movl	%ecx, (%rdx)
	movl	(%rdx), %ecx
	movslq	(%r12), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	4(%rax), %eax
	movw	$-3789, BasicBlockSignatureTracker # imm = 0xF133
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jle	.LBB85_29
# %bb.27:                               #   in Loop: Header=BB85_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$112, %ax
	cmpw	$-3773, %ax             # imm = 0xF143
	jne	.LBB85_37
# %bb.28:                               # %spec_load.split88
                                        #   in Loop: Header=BB85_23 Depth=1
	movabsq	$spec_fd, %rax
	movslq	(%r12), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movw	$-3773, BasicBlockSignatureTracker # imm = 0xF143
	movw	$112, RunTimeSignatureAdjuster
.LBB85_29:                              #   in Loop: Header=BB85_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$109, %ax
	xorw	%cx, %ax
	cmpw	$-3746, %ax             # imm = 0xF15E
	jne	.LBB85_37
# %bb.30:                               # %spec_load.split90
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	$3, %eax
	movl	dbglvl, %ecx
	movw	$-3746, BasicBlockSignatureTracker # imm = 0xF15E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB85_33
# %bb.31:                               #   in Loop: Header=BB85_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$56, %ax
	cmpw	$-3738, %ax             # imm = 0xF166
	jne	.LBB85_37
# %bb.32:                               # %spec_load.split92
                                        #   in Loop: Header=BB85_23 Depth=1
	movabsq	$.L.str.7.88, %rdi
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %esi
	movb	$0, %al
	callq	printf
	movw	$-3738, BasicBlockSignatureTracker # imm = 0xF166
	movw	$56, RunTimeSignatureAdjuster
.LBB85_33:                              #   in Loop: Header=BB85_23 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$233, %ax
	xorw	%cx, %ax
	cmpw	$-3657, %ax             # imm = 0xF1B7
	jne	.LBB85_37
# %bb.34:                               # %spec_load.split94
                                        #   in Loop: Header=BB85_23 Depth=1
	movabsq	$spec_fd, %rbx
	movslq	(%r12), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rdi
	movslq	(%r12), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movslq	4(%rcx), %rax
	addq	%rax, %rdi
	movslq	(%r12), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rsi
	movq	-48(%rbp), %r14         # 8-byte Reload
	movslq	(%r14), %rdx
	callq	memcpy
	movl	(%r14), %eax
	movslq	(%r12), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rbx
	addl	4(%rbx), %eax
	movl	%eax, 4(%rbx)
	movw	$-3657, BasicBlockSignatureTracker # imm = 0xF1B7
	movw	$185, RunTimeSignatureAdjuster
	jmp	.LBB85_23
.LBB85_35:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$226, %ax
	cmpw	$-3640, %ax             # imm = 0xF1C8
	jne	.LBB85_39
# %bb.36:                               # %spec_load.split86
	movw	$-3640, BasicBlockSignatureTracker # imm = 0xF1C8
	movw	$2588, RunTimeSignatureAdjuster # imm = 0xA1C
	xorl	%eax, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB85_37:                              # %CFerrorHandler.spec_load.loopexit
	jmp	.LBB85_39
.LBB85_38:                              # %CFerrorHandler.spec_load.loopexit1
	jmp	.LBB85_39
.LBB85_39:                              # %CFerrorHandler.spec_load
	callq	FAULT_DETECTED_CFC
.Lfunc_end85:
	.size	spec_load, .Lfunc_end85-spec_load
	.cfi_endproc
                                        # -- End function
	.globl	spec_read               # -- Begin function spec_read
	.p2align	4, 0x90
	.type	spec_read,@function
spec_read:                              # @spec_read
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$4, %eax
	movl	%edi, -20(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	dbglvl, %ecx
	movw	$-3617, BasicBlockSignatureTracker # imm = 0xF1DF
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB86_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$-3602, %ax             # imm = 0xF1EE
	jne	.LBB86_29
# %bb.2:                                # %spec_read.split
	movabsq	$.L.str.8.89, %rdi
	movl	-20(%rbp), %esi
	movq	-40(%rbp), %rdx
	movl	-28(%rbp), %ecx
	movb	$0, %al
	callq	printf
	movw	$-3602, BasicBlockSignatureTracker # imm = 0xF1EE
	movw	$49, RunTimeSignatureAdjuster
.LBB86_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$991, %ax               # imm = 0x3DF
	xorw	%cx, %ax
	cmpw	$-3584, %ax             # imm = 0xF200
	jne	.LBB86_29
# %bb.4:                                # %spec_read.split50
	movl	-20(%rbp), %eax
	movw	$-3584, BasicBlockSignatureTracker # imm = 0xF200
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB86_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$49, %ax
	cmpw	$-3535, %ax             # imm = 0xF231
	jne	.LBB86_29
# %bb.6:                                # %spec_read.split52
	movabsq	$.L.str.9.90, %rsi
	movq	stderr, %rdi
	movl	-20(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-3535, BasicBlockSignatureTracker # imm = 0xF231
	movw	$0, RunTimeSignatureAdjuster
.LBB86_7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$60, %ax
	cmpw	$-3524, %ax             # imm = 0xF23C
	jne	.LBB86_29
# %bb.8:                                # %spec_read.split54
	movabsq	$spec_fd, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	8(%rdx), %ecx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	4(%rax), %eax
	movw	$-3524, BasicBlockSignatureTracker # imm = 0xF23C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jl	.LBB86_15
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$-3507, %ax             # imm = 0xF24D
	jne	.LBB86_29
# %bb.10:                               # %spec_read.split56
	movl	$4, %eax
	movl	dbglvl, %ecx
	movw	$-3507, BasicBlockSignatureTracker # imm = 0xF24D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB86_13
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$40, %ax
	cmpw	$-3483, %ax             # imm = 0xF265
	jne	.LBB86_29
# %bb.12:                               # %spec_read.split60
	movabsq	$.L.str.10.91, %rdi
	movb	$0, %al
	callq	printf
	movw	$-3483, BasicBlockSignatureTracker # imm = 0xF265
	movw	$40, RunTimeSignatureAdjuster
.LBB86_13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$57, %ax
	xorw	%cx, %ax
	cmpw	$-3468, %ax             # imm = 0xF274
	jne	.LBB86_29
# %bb.14:                               # %spec_read.split62
	movl	$-1, -32(%rbp)
	movw	$-3468, BasicBlockSignatureTracker # imm = 0xF274
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB86_27
.LBB86_15:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$187, %ax
	cmpw	$-3449, %ax             # imm = 0xF287
	jne	.LBB86_29
# %bb.16:                               # %spec_read.split58
	movabsq	$spec_fd, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	8(%rdx), %ecx
	addl	-28(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	4(%rax), %eax
	movw	$-3449, BasicBlockSignatureTracker # imm = 0xF287
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jl	.LBB86_19
# %bb.17:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-3396, %ax             # imm = 0xF2BC
	jne	.LBB86_29
# %bb.18:                               # %spec_read.split66
	movabsq	$spec_fd, %rax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-20(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	subl	8(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movw	$-3396, BasicBlockSignatureTracker # imm = 0xF2BC
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB86_21
.LBB86_19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$385, %ax               # imm = 0x181
	cmpw	$-3322, %ax             # imm = 0xF306
	jne	.LBB86_29
# %bb.20:                               # %spec_read.split68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movw	$-3322, BasicBlockSignatureTracker # imm = 0xF306
	movw	$442, RunTimeSignatureAdjuster # imm = 0x1BA
.LBB86_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$394, %ax               # imm = 0x18A
	xorw	%cx, %ax
	cmpw	$-3274, %ax             # imm = 0xF336
	jne	.LBB86_29
# %bb.22:                               # %spec_read.split70
	movl	$4, %r14d
	movabsq	$spec_fd, %rbx
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rsi
	movslq	-20(%rbp), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movslq	8(%rcx), %rax
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rbx
	addl	8(%rbx), %eax
	movl	%eax, 8(%rbx)
	movl	dbglvl, %eax
	movw	$-3274, BasicBlockSignatureTracker # imm = 0xF336
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %r14d
	jge	.LBB86_25
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$117, %ax
	cmpw	$-3261, %ax             # imm = 0xF343
	jne	.LBB86_29
# %bb.24:                               # %spec_read.split72
	movabsq	$.L.str.11.92, %rdi
	movl	-24(%rbp), %esi
	movb	$0, %al
	callq	printf
	movw	$-3261, BasicBlockSignatureTracker # imm = 0xF343
	movw	$117, RunTimeSignatureAdjuster
.LBB86_25:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$123, %ax
	xorw	%cx, %ax
	cmpw	$-3251, %ax             # imm = 0xF34D
	jne	.LBB86_29
# %bb.26:                               # %spec_read.split74
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movw	$-3251, BasicBlockSignatureTracker # imm = 0xF34D
	movw	$313, RunTimeSignatureAdjuster # imm = 0x139
.LBB86_27:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$300, %ax               # imm = 0x12C
	xorw	%cx, %ax
	cmpw	$-3240, %ax             # imm = 0xF358
	jne	.LBB86_29
# %bb.28:                               # %spec_read.split64
	movl	-32(%rbp), %eax
	movw	$-3240, BasicBlockSignatureTracker # imm = 0xF358
	movw	$0, RunTimeSignatureAdjuster
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB86_29:                              # %CFerrorHandler.spec_read
	callq	FAULT_DETECTED_CFC
.Lfunc_end86:
	.size	spec_read, .Lfunc_end86-spec_read
	.cfi_endproc
                                        # -- End function
	.globl	spec_fread              # -- Begin function spec_fread
	.p2align	4, 0x90
	.type	spec_fread,@function
spec_fread:                             # @spec_fread
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-8943, %ax             # imm = 0xDD11
	xorw	%bx, %ax
	cmpw	$-3211, %ax             # imm = 0xF375
	jne	.LBB87_32
# %bb.1:                                # %spec_fread.split67
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-8943, %ax             # imm = 0xDD11
	xorw	%bx, %ax
	cmpw	$-3211, %ax             # imm = 0xF375
	jne	.LBB87_32
# %bb.2:                                # %spec_fread.split65
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-8943, %ax             # imm = 0xDD11
	xorw	%bx, %ax
	cmpw	$-3211, %ax             # imm = 0xF375
	jne	.LBB87_32
# %bb.3:                                # %spec_fread.split
	movl	$4, %eax
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %r13
	addq	$-16, %r13
	movq	%r13, %rsp
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rdi, (%r13)
	movl	%esi, (%r12)
	movl	%edx, (%r14)
	movl	%ecx, (%rbx)
	movl	$0, (%r15)
	movl	dbglvl, %ecx
	movw	$-3211, BasicBlockSignatureTracker # imm = 0xF375
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB87_6
# %bb.4:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$189, %ax
	cmpw	$-3128, %ax             # imm = 0xF3C8
	jne	.LBB87_32
# %bb.5:                                # %spec_fread.split69
	movabsq	$.L.str.12.95, %rdi
	movq	(%r13), %rsi
	movl	(%r12), %edx
	movl	(%r14), %ecx
	movq	%r8, -48(%rbp)          # 8-byte Spill
	movl	(%rbx), %r8d
	movb	$0, %al
	callq	printf
	movq	-48(%rbp), %r8          # 8-byte Reload
	movw	$-3128, BasicBlockSignatureTracker # imm = 0xF3C8
	movw	$189, RunTimeSignatureAdjuster
.LBB87_6:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$151, %ax
	xorw	%cx, %ax
	cmpw	$-3102, %ax             # imm = 0xF3E2
	jne	.LBB87_32
# %bb.7:                                # %spec_fread.split71
	movl	(%rbx), %eax
	movw	$-3102, BasicBlockSignatureTracker # imm = 0xF3E2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB87_10
# %bb.8:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$7, %ax
	cmpw	$-3099, %ax             # imm = 0xF3E5
	jne	.LBB87_32
# %bb.9:                                # %spec_fread.split73
	movabsq	$.L.str.13.96, %rsi
	movq	stderr, %rdi
	movl	(%rbx), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-3099, BasicBlockSignatureTracker # imm = 0xF3E5
	movw	$0, RunTimeSignatureAdjuster
.LBB87_10:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$2032, %ax              # imm = 0x7F0
	cmpw	$-3054, %ax             # imm = 0xF412
	jne	.LBB87_32
# %bb.11:                               # %spec_fread.split75
	movabsq	$spec_fd, %rax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	8(%rdx), %ecx
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	4(%rax), %eax
	movw	$-3054, BasicBlockSignatureTracker # imm = 0xF412
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jl	.LBB87_18
# %bb.12:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$70, %ax
	cmpw	$-2988, %ax             # imm = 0xF454
	jne	.LBB87_32
# %bb.13:                               # %spec_fread.split77
	movl	$4, %eax
	movl	dbglvl, %ecx
	movw	$-2988, BasicBlockSignatureTracker # imm = 0xF454
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB87_16
# %bb.14:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$-2959, %ax             # imm = 0xF471
	jne	.LBB87_32
# %bb.15:                               # %spec_fread.split81
	movabsq	$.L.str.10.91, %rdi
	movb	$0, %al
	movq	%r8, %rbx
	callq	printf
	movq	%rbx, %r8
	movw	$-2959, BasicBlockSignatureTracker # imm = 0xF471
	movw	$37, RunTimeSignatureAdjuster
.LBB87_16:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$39, %ax
	xorw	%cx, %ax
	cmpw	$-2957, %ax             # imm = 0xF473
	jne	.LBB87_32
# %bb.17:                               # %spec_fread.split83
	movl	$-1, (%r8)
	movw	$-2957, BasicBlockSignatureTracker # imm = 0xF473
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB87_30
.LBB87_18:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$149, %ax
	cmpw	$-2937, %ax             # imm = 0xF487
	jne	.LBB87_32
# %bb.19:                               # %spec_fread.split79
	movabsq	$spec_fd, %rax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	8(%rdx), %ecx
	movl	(%r12), %edx
	imull	(%r14), %edx
	addl	%edx, %ecx
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	4(%rax), %eax
	movw	$-2937, BasicBlockSignatureTracker # imm = 0xF487
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jl	.LBB87_22
# %bb.20:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$28, %ax
	cmpw	$-2917, %ax             # imm = 0xF49B
	jne	.LBB87_32
# %bb.21:                               # %spec_fread.split87
	movabsq	$spec_fd, %rcx
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movl	4(%rdx), %eax
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	subl	8(%rcx), %eax
	cltd
	idivl	(%r12)
	movl	%eax, (%r15)
	movw	$-2917, BasicBlockSignatureTracker # imm = 0xF49B
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB87_24
.LBB87_22:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$-2894, %ax             # imm = 0xF4B2
	jne	.LBB87_32
# %bb.23:                               # %spec_fread.split89
	movl	(%r14), %eax
	movl	%eax, (%r15)
	movw	$-2894, BasicBlockSignatureTracker # imm = 0xF4B2
	movw	$41, RunTimeSignatureAdjuster
.LBB87_24:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$88, %ax
	xorw	%cx, %ax
	cmpw	$-2877, %ax             # imm = 0xF4C3
	jne	.LBB87_32
# %bb.25:                               # %spec_fread.split91
	movq	%r8, -48(%rbp)          # 8-byte Spill
	movabsq	$spec_fd, %r14
	movq	(%r13), %rdi
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r14, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rsi
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r14, %rcx
	addq	%rax, %rcx
	movslq	8(%rcx), %rax
	addq	%rax, %rsi
	movslq	(%r15), %rdx
	callq	memcpy
	movl	(%r15), %eax
	imull	(%r12), %eax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %r14
	addl	8(%r14), %eax
	movl	%eax, 8(%r14)
	movl	dbglvl, %eax
	movw	$-2877, BasicBlockSignatureTracker # imm = 0xF4C3
	movw	$0, RunTimeSignatureAdjuster
	movl	$4, %ecx
	cmpl	%eax, %ecx
	jge	.LBB87_28
# %bb.26:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$23, %ax
	cmpw	$-2860, %ax             # imm = 0xF4D4
	jne	.LBB87_32
# %bb.27:                               # %spec_fread.split93
	movabsq	$.L.str.11.92, %rdi
	movl	(%r15), %esi
	imull	(%r12), %esi
	movb	$0, %al
	callq	printf
	movw	$-2860, BasicBlockSignatureTracker # imm = 0xF4D4
	movw	$23, RunTimeSignatureAdjuster
.LBB87_28:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$47, %ax
	xorw	%cx, %ax
	cmpw	$-2836, %ax             # imm = 0xF4EC
	movq	-48(%rbp), %r8          # 8-byte Reload
	jne	.LBB87_32
# %bb.29:                               # %spec_fread.split95
	movl	(%r15), %eax
	movl	%eax, (%r8)
	movw	$-2836, BasicBlockSignatureTracker # imm = 0xF4EC
	movw	$159, RunTimeSignatureAdjuster
.LBB87_30:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$338, %ax               # imm = 0x152
	xorw	%cx, %ax
	cmpw	$-2783, %ax             # imm = 0xF521
	jne	.LBB87_32
# %bb.31:                               # %spec_fread.split85
	movl	(%r8), %eax
	movw	$-2783, BasicBlockSignatureTracker # imm = 0xF521
	movw	$-9361, RunTimeSignatureAdjuster # imm = 0xDB6F
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB87_32:                              # %CFerrorHandler.spec_fread
	callq	FAULT_DETECTED_CFC
.Lfunc_end87:
	.size	spec_fread, .Lfunc_end87-spec_fread
	.cfi_endproc
                                        # -- End function
	.globl	spec_getc               # -- Begin function spec_getc
	.p2align	4, 0x90
	.type	spec_getc,@function
spec_getc:                              # @spec_getc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15329, %ax            # imm = 0xC41F
	xorw	%cx, %ax
	cmpw	$-2754, %ax             # imm = 0xF53E
	jne	.LBB88_25
# %bb.1:                                # %spec_getc.split49
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15329, %ax            # imm = 0xC41F
	xorw	%cx, %ax
	cmpw	$-2754, %ax             # imm = 0xF53E
	jne	.LBB88_25
# %bb.2:                                # %spec_getc.split
	movl	$4, %eax
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movl	%edi, (%rbx)
	movl	$0, (%r15)
	movl	dbglvl, %ecx
	movw	$-2754, BasicBlockSignatureTracker # imm = 0xF53E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB88_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$101, %ax
	cmpw	$-2725, %ax             # imm = 0xF55B
	jne	.LBB88_25
# %bb.4:                                # %spec_getc.split51
	movabsq	$.L.str.14.99, %rdi
	movl	(%rbx), %esi
	movb	$0, %al
	callq	printf
	movw	$-2725, BasicBlockSignatureTracker # imm = 0xF55B
	movw	$101, RunTimeSignatureAdjuster
.LBB88_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$67, %ax
	xorw	%cx, %ax
	cmpw	$-2691, %ax             # imm = 0xF57D
	jne	.LBB88_25
# %bb.6:                                # %spec_getc.split53
	movl	(%rbx), %eax
	movw	$-2691, BasicBlockSignatureTracker # imm = 0xF57D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB88_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$232, %ax
	cmpw	$-2667, %ax             # imm = 0xF595
	jne	.LBB88_25
# %bb.8:                                # %spec_getc.split55
	movabsq	$.L.str.9.90, %rsi
	movq	stderr, %rdi
	movl	(%rbx), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-2667, BasicBlockSignatureTracker # imm = 0xF595
	movw	$0, RunTimeSignatureAdjuster
.LBB88_9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$219, %ax
	cmpw	$-2650, %ax             # imm = 0xF5A6
	jne	.LBB88_25
# %bb.10:                               # %spec_getc.split57
	movabsq	$spec_fd, %rax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	8(%rdx), %ecx
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	4(%rax), %eax
	movw	$-2650, BasicBlockSignatureTracker # imm = 0xF5A6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %ecx
	jl	.LBB88_17
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$102, %ax
	cmpw	$-2624, %ax             # imm = 0xF5C0
	jne	.LBB88_25
# %bb.12:                               # %spec_getc.split59
	movl	$4, %eax
	movl	dbglvl, %ecx
	movw	$-2624, BasicBlockSignatureTracker # imm = 0xF5C0
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB88_15
# %bb.13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$4, %ax
	cmpw	$-2620, %ax             # imm = 0xF5C4
	jne	.LBB88_25
# %bb.14:                               # %spec_getc.split63
	movabsq	$.L.str.10.91, %rdi
	movb	$0, %al
	callq	printf
	movw	$-2620, BasicBlockSignatureTracker # imm = 0xF5C4
	movw	$4, RunTimeSignatureAdjuster
.LBB88_15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$58, %ax
	xorw	%cx, %ax
	cmpw	$-2566, %ax             # imm = 0xF5FA
	jne	.LBB88_25
# %bb.16:                               # %spec_getc.split65
	movl	$-1, (%r14)
	movw	$-2566, BasicBlockSignatureTracker # imm = 0xF5FA
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB88_23
.LBB88_17:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$939, %ax               # imm = 0x3AB
	cmpw	$-2547, %ax             # imm = 0xF60D
	jne	.LBB88_25
# %bb.18:                               # %spec_getc.split61
	movl	$4, %eax
	movabsq	$spec_fd, %rcx
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movq	16(%rsi), %rdx
	movslq	(%rbx), %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movl	8(%rcx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, 8(%rcx)
	movslq	%esi, %rcx
	movzbl	(%rdx,%rcx), %ecx
	movl	%ecx, (%r15)
	movl	dbglvl, %ecx
	movw	$-2547, BasicBlockSignatureTracker # imm = 0xF60D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB88_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$63, %ax
	cmpw	$-2510, %ax             # imm = 0xF632
	jne	.LBB88_25
# %bb.20:                               # %spec_getc.split69
	movabsq	$.L.str.11.92, %rdi
	movl	(%r15), %esi
	movb	$0, %al
	callq	printf
	movw	$-2510, BasicBlockSignatureTracker # imm = 0xF632
	movw	$63, RunTimeSignatureAdjuster
.LBB88_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$51, %ax
	xorw	%cx, %ax
	cmpw	$-2498, %ax             # imm = 0xF63E
	jne	.LBB88_25
# %bb.22:                               # %spec_getc.split71
	movl	(%r15), %eax
	movl	%eax, (%r14)
	movw	$-2498, BasicBlockSignatureTracker # imm = 0xF63E
	movw	$964, RunTimeSignatureAdjuster # imm = 0x3C4
.LBB88_23:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$951, %ax               # imm = 0x3B7
	xorw	%cx, %ax
	cmpw	$-2483, %ax             # imm = 0xF64D
	jne	.LBB88_25
# %bb.24:                               # %spec_getc.split67
	movl	(%r14), %eax
	movw	$-2483, BasicBlockSignatureTracker # imm = 0xF64D
	movw	$-10237, RunTimeSignatureAdjuster # imm = 0xD803
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB88_25:                              # %CFerrorHandler.spec_getc
	callq	FAULT_DETECTED_CFC
.Lfunc_end88:
	.size	spec_getc, .Lfunc_end88-spec_getc
	.cfi_endproc
                                        # -- End function
	.globl	spec_ungetc             # -- Begin function spec_ungetc
	.p2align	4, 0x90
	.type	spec_ungetc,@function
spec_ungetc:                            # @spec_ungetc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-14401, %ax            # imm = 0xC7BF
	xorw	%cx, %ax
	cmpw	$-2430, %ax             # imm = 0xF682
	jne	.LBB89_23
# %bb.1:                                # %spec_ungetc.split42
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-14401, %ax            # imm = 0xC7BF
	xorw	%cx, %ax
	cmpw	$-2430, %ax             # imm = 0xF682
	jne	.LBB89_23
# %bb.2:                                # %spec_ungetc.split
	movl	$4, %eax
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movb	%dil, (%r14)
	movl	%esi, (%rbx)
	movl	$0, (%r15)
	movl	dbglvl, %ecx
	movw	$-2430, BasicBlockSignatureTracker # imm = 0xF682
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB89_5
# %bb.3:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$31, %ax
	cmpw	$-2403, %ax             # imm = 0xF69D
	jne	.LBB89_23
# %bb.4:                                # %spec_ungetc.split44
	movabsq	$.L.str.15.102, %rdi
	movl	(%rbx), %esi
	movb	$0, %al
	callq	printf
	movw	$-2403, BasicBlockSignatureTracker # imm = 0xF69D
	movw	$31, RunTimeSignatureAdjuster
.LBB89_5:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$62, %ax
	xorw	%cx, %ax
	cmpw	$-2372, %ax             # imm = 0xF6BC
	jne	.LBB89_23
# %bb.6:                                # %spec_ungetc.split46
	movl	(%rbx), %eax
	movw	$-2372, BasicBlockSignatureTracker # imm = 0xF6BC
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB89_9
# %bb.7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$90, %ax
	cmpw	$-2330, %ax             # imm = 0xF6E6
	jne	.LBB89_23
# %bb.8:                                # %spec_ungetc.split48
	movabsq	$.L.str.9.90, %rsi
	movq	stderr, %rdi
	movl	(%rbx), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-2330, BasicBlockSignatureTracker # imm = 0xF6E6
	movw	$0, RunTimeSignatureAdjuster
.LBB89_9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$404, %ax               # imm = 0x194
	cmpw	$-2264, %ax             # imm = 0xF728
	jne	.LBB89_23
# %bb.10:                               # %spec_ungetc.split50
	movabsq	$spec_fd, %rax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movw	$-2264, BasicBlockSignatureTracker # imm = 0xF728
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$0, %eax
	jg	.LBB89_13
# %bb.11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$96, %ax
	cmpw	$-2232, %ax             # imm = 0xF748
	jne	.LBB89_23
# %bb.12:                               # %spec_ungetc.split52
	movabsq	$.L.str.16.103, %rsi
	movabsq	$spec_fd, %rax
	movq	stderr, %rdi
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	8(%rax), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-2232, BasicBlockSignatureTracker # imm = 0xF748
	movw	$0, RunTimeSignatureAdjuster
.LBB89_13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$122, %ax
	cmpw	$-2222, %ax             # imm = 0xF752
	jne	.LBB89_23
# %bb.14:                               # %spec_ungetc.split54
	movabsq	$spec_fd, %rax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movq	16(%rdx), %rcx
	movslq	(%rbx), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rax
	movl	8(%rax), %edx
	addl	$-1, %edx
	movl	%edx, 8(%rax)
	movslq	%edx, %rax
	movzbl	(%rcx,%rax), %eax
	movzbl	(%r14), %ecx
	movw	$-2222, BasicBlockSignatureTracker # imm = 0xF752
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB89_17
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$15, %ax
	cmpw	$-2211, %ax             # imm = 0xF75D
	jne	.LBB89_23
# %bb.16:                               # %spec_ungetc.split56
	movabsq	$.L.str.17.104, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-2211, BasicBlockSignatureTracker # imm = 0xF75D
	movw	$0, RunTimeSignatureAdjuster
.LBB89_17:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$199, %ax
	cmpw	$-2155, %ax             # imm = 0xF795
	jne	.LBB89_23
# %bb.18:                               # %spec_ungetc.split58
	movl	$4, %eax
	movl	dbglvl, %ecx
	movw	$-2155, BasicBlockSignatureTracker # imm = 0xF795
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB89_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-2152, %ax             # imm = 0xF798
	jne	.LBB89_23
# %bb.20:                               # %spec_ungetc.split60
	movabsq	$.L.str.11.92, %rdi
	movl	(%r15), %esi
	movb	$0, %al
	callq	printf
	movw	$-2152, BasicBlockSignatureTracker # imm = 0xF798
	movw	$13, RunTimeSignatureAdjuster
.LBB89_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$3974, %ax              # imm = 0xF86
	xorw	%cx, %ax
	cmpw	$-2029, %ax             # imm = 0xF813
	jne	.LBB89_23
# %bb.22:                               # %spec_ungetc.split62
	movzbl	(%r14), %eax
	movw	$-2029, BasicBlockSignatureTracker # imm = 0xF813
	movw	$-14030, RunTimeSignatureAdjuster # imm = 0xC932
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB89_23:                              # %CFerrorHandler.spec_ungetc
	callq	FAULT_DETECTED_CFC
.Lfunc_end89:
	.size	spec_ungetc, .Lfunc_end89-spec_ungetc
	.cfi_endproc
                                        # -- End function
	.globl	spec_rewind             # -- Begin function spec_rewind
	.p2align	4, 0x90
	.type	spec_rewind,@function
spec_rewind:                            # @spec_rewind
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15960, %ax            # imm = 0xC1A8
	xorw	%cx, %ax
	cmpw	$-1953, %ax             # imm = 0xF85F
	jne	.LBB90_4
# %bb.1:                                # %spec_rewind.split15
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15960, %ax            # imm = 0xC1A8
	xorw	%cx, %ax
	cmpw	$-1953, %ax             # imm = 0xF85F
	jne	.LBB90_4
# %bb.2:                                # %spec_rewind.split13
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$-15960, %ax            # imm = 0xC1A8
	xorw	%cx, %ax
	cmpw	$-1953, %ax             # imm = 0xF85F
	jne	.LBB90_4
# %bb.3:                                # %spec_rewind.split
	movabsq	$spec_fd, %rax
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movl	%edi, (%rcx)
	movslq	(%rcx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	$0, 8(%rax)
	movw	$-1953, BasicBlockSignatureTracker # imm = 0xF85F
	movw	$-15948, RunTimeSignatureAdjuster # imm = 0xC1B4
	xorl	%eax, %eax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB90_4:                               # %CFerrorHandler.spec_rewind
	callq	FAULT_DETECTED_CFC
.Lfunc_end90:
	.size	spec_rewind, .Lfunc_end90-spec_rewind
	.cfi_endproc
                                        # -- End function
	.globl	spec_reset              # -- Begin function spec_reset
	.p2align	4, 0x90
	.type	spec_reset,@function
spec_reset:                             # @spec_reset
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1517, %ax              # imm = 0x5ED
	xorw	%cx, %ax
	cmpw	$-1932, %ax             # imm = 0xF874
	jne	.LBB91_3
# %bb.1:                                # %spec_reset.split8
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1517, %ax              # imm = 0x5ED
	xorw	%cx, %ax
	cmpw	$-1932, %ax             # imm = 0xF874
	jne	.LBB91_3
# %bb.2:                                # %spec_reset.split
	movabsq	$spec_fd, %r14
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movl	%edi, (%rbx)
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r14, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rdi
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r14, %rcx
	addq	%rax, %rcx
	movslq	4(%rcx), %rdx
	xorl	%esi, %esi
	callq	memset
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r14, %rcx
	addq	%rax, %rcx
	movl	$0, 4(%rcx)
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %r14
	movl	$0, 8(%r14)
	movw	$-1932, BasicBlockSignatureTracker # imm = 0xF874
	movw	$1356, RunTimeSignatureAdjuster # imm = 0x54C
	xorl	%eax, %eax
	leaq	-16(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB91_3:                               # %CFerrorHandler.spec_reset
	callq	FAULT_DETECTED_CFC
.Lfunc_end91:
	.size	spec_reset, .Lfunc_end91-spec_reset
	.cfi_endproc
                                        # -- End function
	.globl	spec_write              # -- Begin function spec_write
	.p2align	4, 0x90
	.type	spec_write,@function
spec_write:                             # @spec_write
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$4, %eax
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -24(%rbp)
	movl	dbglvl, %ecx
	movw	$-1852, BasicBlockSignatureTracker # imm = 0xF8C4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB92_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$37, %ax
	cmpw	$-1823, %ax             # imm = 0xF8E1
	jne	.LBB92_13
# %bb.2:                                # %spec_write.split
	movabsq	$.L.str.18.107, %rdi
	movl	-20(%rbp), %esi
	movq	-32(%rbp), %rdx
	movl	-24(%rbp), %ecx
	movb	$0, %al
	callq	printf
	movw	$-1823, BasicBlockSignatureTracker # imm = 0xF8E1
	movw	$37, RunTimeSignatureAdjuster
.LBB92_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$50, %ax
	xorw	%cx, %ax
	cmpw	$-1802, %ax             # imm = 0xF8F6
	jne	.LBB92_13
# %bb.4:                                # %spec_write.split20
	movl	-20(%rbp), %eax
	movw	$-1802, BasicBlockSignatureTracker # imm = 0xF8F6
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB92_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-1793, %ax             # imm = 0xF8FF
	jne	.LBB92_13
# %bb.6:                                # %spec_write.split22
	movabsq	$.L.str.19.108, %rsi
	movq	stderr, %rdi
	movl	-20(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-1793, BasicBlockSignatureTracker # imm = 0xF8FF
	movw	$0, RunTimeSignatureAdjuster
.LBB92_7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$500, %ax               # imm = 0x1F4
	cmpw	$-1790, %ax             # imm = 0xF902
	jne	.LBB92_13
# %bb.8:                                # %spec_write.split24
	movl	$4, %r14d
	movabsq	$spec_fd, %rbx
	movslq	-20(%rbp), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rdi
	movslq	-20(%rbp), %rax
	imulq	$24, %rax, %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movslq	8(%rcx), %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	addl	4(%rdx), %eax
	movl	%eax, 4(%rdx)
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rbx
	addl	8(%rbx), %eax
	movl	%eax, 8(%rbx)
	movl	dbglvl, %eax
	movw	$-1790, BasicBlockSignatureTracker # imm = 0xF902
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%eax, %r14d
	jge	.LBB92_11
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$44, %ax
	cmpw	$-1746, %ax             # imm = 0xF92E
	jne	.LBB92_13
# %bb.10:                               # %spec_write.split26
	movabsq	$.L.str.11.92, %rdi
	movl	-24(%rbp), %esi
	movb	$0, %al
	callq	printf
	movw	$-1746, BasicBlockSignatureTracker # imm = 0xF92E
	movw	$44, RunTimeSignatureAdjuster
.LBB92_11:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$93, %ax
	xorw	%cx, %ax
	cmpw	$-1697, %ax             # imm = 0xF95F
	jne	.LBB92_13
# %bb.12:                               # %spec_write.split28
	movl	-24(%rbp), %eax
	movw	$-1697, BasicBlockSignatureTracker # imm = 0xF95F
	movw	$0, RunTimeSignatureAdjuster
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB92_13:                              # %CFerrorHandler.spec_write
	callq	FAULT_DETECTED_CFC
.Lfunc_end92:
	.size	spec_write, .Lfunc_end92-spec_write
	.cfi_endproc
                                        # -- End function
	.globl	spec_fwrite             # -- Begin function spec_fwrite
	.p2align	4, 0x90
	.type	spec_fwrite,@function
spec_fwrite:                            # @spec_fwrite
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-12635, %ax            # imm = 0xCEA5
	xorw	%bx, %ax
	cmpw	$-1648, %ax             # imm = 0xF990
	jne	.LBB93_17
# %bb.1:                                # %spec_fwrite.split44
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-12635, %ax            # imm = 0xCEA5
	xorw	%bx, %ax
	cmpw	$-1648, %ax             # imm = 0xF990
	jne	.LBB93_17
# %bb.2:                                # %spec_fwrite.split42
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-12635, %ax            # imm = 0xCEA5
	xorw	%bx, %ax
	cmpw	$-1648, %ax             # imm = 0xF990
	jne	.LBB93_17
# %bb.3:                                # %spec_fwrite.split40
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %bx
	xorw	$-12635, %ax            # imm = 0xCEA5
	xorw	%bx, %ax
	cmpw	$-1648, %ax             # imm = 0xF990
	jne	.LBB93_17
# %bb.4:                                # %spec_fwrite.split
	movl	$4, %eax
	movq	%rsp, %r12
	addq	$-16, %r12
	movq	%r12, %rsp
	movq	%rsp, %r15
	addq	$-16, %r15
	movq	%r15, %rsp
	movq	%rsp, %r14
	addq	$-16, %r14
	movq	%r14, %rsp
	movq	%rsp, %rbx
	addq	$-16, %rbx
	movq	%rbx, %rsp
	movq	%rdi, (%r12)
	movl	%esi, (%r15)
	movl	%edx, (%r14)
	movl	%ecx, (%rbx)
	movl	dbglvl, %ecx
	movw	$-1648, BasicBlockSignatureTracker # imm = 0xF990
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB93_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$71, %ax
	cmpw	$-1577, %ax             # imm = 0xF9D7
	jne	.LBB93_17
# %bb.6:                                # %spec_fwrite.split46
	movabsq	$.L.str.20.111, %rdi
	movq	(%r12), %rsi
	movl	(%r15), %edx
	movl	(%r14), %ecx
	movl	(%rbx), %r8d
	movb	$0, %al
	callq	printf
	movw	$-1577, BasicBlockSignatureTracker # imm = 0xF9D7
	movw	$71, RunTimeSignatureAdjuster
.LBB93_7:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$75, %ax
	xorw	%cx, %ax
	cmpw	$-1573, %ax             # imm = 0xF9DB
	jne	.LBB93_17
# %bb.8:                                # %spec_fwrite.split48
	movl	(%rbx), %eax
	movw	$-1573, BasicBlockSignatureTracker # imm = 0xF9DB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB93_11
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$57, %ax
	cmpw	$-1566, %ax             # imm = 0xF9E2
	jne	.LBB93_17
# %bb.10:                               # %spec_fwrite.split50
	movabsq	$.L.str.21.112, %rsi
	movq	stderr, %rdi
	movl	(%rbx), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-1566, BasicBlockSignatureTracker # imm = 0xF9E2
	movw	$0, RunTimeSignatureAdjuster
.LBB93_11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$50, %ax
	cmpw	$-1559, %ax             # imm = 0xF9E9
	jne	.LBB93_17
# %bb.12:                               # %spec_fwrite.split52
	movabsq	$spec_fd, %r13
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r13, %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rdi
	movslq	(%rbx), %rax
	imulq	$24, %rax, %rax
	movq	%r13, %rcx
	addq	%rax, %rcx
	movslq	8(%rcx), %rax
	addq	%rax, %rdi
	movq	(%r12), %rsi
	movl	(%r15), %eax
	imull	(%r14), %eax
	movslq	%eax, %rdx
	callq	memcpy
	movl	(%r15), %eax
	imull	(%r14), %eax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	movq	%r13, %rdx
	addq	%rcx, %rdx
	addl	4(%rdx), %eax
	movl	%eax, 4(%rdx)
	movl	(%r15), %eax
	imull	(%r14), %eax
	movslq	(%rbx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %r13
	addl	8(%r13), %eax
	movl	%eax, 8(%r13)
	movl	dbglvl, %eax
	movw	$-1559, BasicBlockSignatureTracker # imm = 0xF9E9
	movw	$0, RunTimeSignatureAdjuster
	movl	$4, %ecx
	cmpl	%eax, %ecx
	jge	.LBB93_15
# %bb.13:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1016, %ax              # imm = 0x3F8
	cmpw	$-1519, %ax             # imm = 0xFA11
	jne	.LBB93_17
# %bb.14:                               # %spec_fwrite.split54
	movabsq	$.L.str.11.92, %rdi
	movl	(%r14), %esi
	movb	$0, %al
	callq	printf
	movw	$-1519, BasicBlockSignatureTracker # imm = 0xFA11
	movw	$1016, RunTimeSignatureAdjuster # imm = 0x3F8
.LBB93_15:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$962, %ax               # imm = 0x3C2
	xorw	%cx, %ax
	cmpw	$-1493, %ax             # imm = 0xFA2B
	jne	.LBB93_17
# %bb.16:                               # %spec_fwrite.split56
	movl	(%r14), %eax
	movw	$-1493, BasicBlockSignatureTracker # imm = 0xFA2B
	movw	$-13056, RunTimeSignatureAdjuster # imm = 0xCD00
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB93_17:                              # %CFerrorHandler.spec_fwrite
	callq	FAULT_DETECTED_CFC
.Lfunc_end93:
	.size	spec_fwrite, .Lfunc_end93-spec_fwrite
	.cfi_endproc
                                        # -- End function
	.globl	spec_putc               # -- Begin function spec_putc
	.p2align	4, 0x90
	.type	spec_putc,@function
spec_putc:                              # @spec_putc
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$4, %eax
	movb	%dil, -1(%rbp)
	movl	%esi, -8(%rbp)
	movl	dbglvl, %ecx
	movw	$-1427, BasicBlockSignatureTracker # imm = 0xFA6D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB94_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$201, %ax
	cmpw	$-1372, %ax             # imm = 0xFAA4
	jne	.LBB94_9
# %bb.2:                                # %spec_putc.split
	movabsq	$.L.str.22, %rdi
	movzbl	-1(%rbp), %esi
	movl	-8(%rbp), %edx
	movb	$0, %al
	callq	printf
	movw	$-1372, BasicBlockSignatureTracker # imm = 0xFAA4
	movw	$201, RunTimeSignatureAdjuster
.LBB94_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$214, %ax
	xorw	%cx, %ax
	cmpw	$-1349, %ax             # imm = 0xFABB
	jne	.LBB94_9
# %bb.4:                                # %spec_putc.split12
	movl	-8(%rbp), %eax
	movw	$-1349, BasicBlockSignatureTracker # imm = 0xFABB
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB94_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$-1344, %ax             # imm = 0xFAC0
	jne	.LBB94_9
# %bb.6:                                # %spec_putc.split14
	movabsq	$.L.str.19.108, %rsi
	movq	stderr, %rdi
	movl	-8(%rbp), %edx
	movb	$0, %al
	callq	fprintf
	xorl	%edi, %edi
	callq	exit
	movw	$-1344, BasicBlockSignatureTracker # imm = 0xFAC0
	movw	$0, RunTimeSignatureAdjuster
.LBB94_7:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$113, %ax
	cmpw	$-1334, %ax             # imm = 0xFACA
	jne	.LBB94_9
# %bb.8:                                # %spec_putc.split16
	movabsq	$spec_fd, %rax
	movb	-1(%rbp), %r8b
	movslq	-8(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movq	16(%rsi), %rdx
	movslq	-8(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	8(%rdi), %ecx
	movl	%ecx, %esi
	addl	$1, %esi
	movl	%esi, 8(%rdi)
	movslq	%ecx, %rcx
	movb	%r8b, (%rdx,%rcx)
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
	movzbl	-1(%rbp), %eax
	movw	$-1334, BasicBlockSignatureTracker # imm = 0xFACA
	movw	$0, RunTimeSignatureAdjuster
	addq	$16, %rsp
	popq	%rbp
	retq
.LBB94_9:                               # %CFerrorHandler.spec_putc
	callq	FAULT_DETECTED_CFC
.Lfunc_end94:
	.size	spec_putc, .Lfunc_end94-spec_putc
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movabsq	$.L.str.23, %rax
	movl	$0, -52(%rbp)
	movl	%edi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$64, -8(%rbp)
	movq	%rax, -48(%rbp)
	movq	$10, seedi
	movl	-16(%rbp), %eax
	movw	$-1267, BasicBlockSignatureTracker # imm = 0xFB0D
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$1, %eax
	jle	.LBB95_3
# %bb.1:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$20, %ax
	cmpw	$-1255, %ax             # imm = 0xFB19
	jne	.LBB95_78
# %bb.2:                                # %main.split
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movw	$-1255, BasicBlockSignatureTracker # imm = 0xFB19
	movw	$20, RunTimeSignatureAdjuster
.LBB95_3:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$66, %ax
	xorw	%cx, %ax
	cmpw	$-1201, %ax             # imm = 0xFB4F
	jne	.LBB95_78
# %bb.4:                                # %main.split135
	movl	-16(%rbp), %eax
	movw	$-1201, BasicBlockSignatureTracker # imm = 0xFB4F
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$2, %eax
	jle	.LBB95_7
# %bb.5:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$41, %ax
	cmpw	$-1178, %ax             # imm = 0xFB66
	jne	.LBB95_78
# %bb.6:                                # %main.split137
	movq	-40(%rbp), %rax
	movq	16(%rax), %rdi
	callq	atoi
	movl	%eax, -8(%rbp)
	movw	$-1178, BasicBlockSignatureTracker # imm = 0xFB66
	movw	$41, RunTimeSignatureAdjuster
.LBB95_7:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$195, %ax
	xorw	%cx, %ax
	cmpw	$-1140, %ax             # imm = 0xFB8C
	jne	.LBB95_78
# %bb.8:                                # %main.split139
	movl	-16(%rbp), %eax
	movw	$-1140, BasicBlockSignatureTracker # imm = 0xFB8C
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$3, %eax
	jle	.LBB95_11
# %bb.9:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-1131, %ax             # imm = 0xFB95
	jne	.LBB95_78
# %bb.10:                               # %main.split141
	movq	-40(%rbp), %rax
	movq	24(%rax), %rdi
	callq	atoi
	movl	%eax, -20(%rbp)
	movw	$-1131, BasicBlockSignatureTracker # imm = 0xFB95
	movw	$0, RunTimeSignatureAdjuster
	jmp	.LBB95_13
.LBB95_11:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$59, %ax
	cmpw	$-1097, %ax             # imm = 0xFBB7
	jne	.LBB95_78
# %bb.12:                               # %main.split143
	movl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movw	$-1097, BasicBlockSignatureTracker # imm = 0xFBB7
	movw	$34, RunTimeSignatureAdjuster
.LBB95_13:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$65, %ax
	xorw	%cx, %ax
	cmpw	$-1068, %ax             # imm = 0xFBD4
	jne	.LBB95_78
# %bb.14:                               # %main.split145
	movl	-8(%rbp), %eax
	shll	$20, %eax
	movl	%eax, spec_fd
	movl	-20(%rbp), %eax
	shll	$20, %eax
	movl	%eax, spec_fd+24
	movl	-8(%rbp), %eax
	shll	$20, %eax
	movl	%eax, spec_fd+48
	movw	$-1068, BasicBlockSignatureTracker # imm = 0xFBD4
	movw	$0, RunTimeSignatureAdjuster
	callq	spec_init
	movw	$-1068, BasicBlockSignatureTracker # imm = 0xFBD4
	movw	$0, RunTimeSignatureAdjuster
	movw	$-1068, BasicBlockSignatureTracker # imm = 0xFBD4
	movw	$0, RunTimeSignatureAdjuster
	callq	debug_time
	movl	$2, %eax
	movw	$-1068, BasicBlockSignatureTracker # imm = 0xFBD4
	movw	$0, RunTimeSignatureAdjuster
	movl	dbglvl, %ecx
	movw	$-1068, BasicBlockSignatureTracker # imm = 0xFBD4
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_17
# %bb.15:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$9, %ax
	cmpw	$-1059, %ax             # imm = 0xFBDD
	jne	.LBB95_78
# %bb.16:                               # %main.split147
	movabsq	$.L.str.24, %rdi
	movb	$0, %al
	callq	printf
	movw	$-1059, BasicBlockSignatureTracker # imm = 0xFBDD
	movw	$9, RunTimeSignatureAdjuster
.LBB95_17:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$58, %ax
	xorw	%cx, %ax
	cmpw	$-1042, %ax             # imm = 0xFBEE
	jne	.LBB95_78
# %bb.18:                               # %main.split149
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %edx
	shll	$20, %edx
	movw	$-1042, BasicBlockSignatureTracker # imm = 0xFBEE
	movw	$0, RunTimeSignatureAdjuster
	xorl	%edi, %edi
	callq	spec_load
	movl	$3, %eax
	movw	$-1042, BasicBlockSignatureTracker # imm = 0xFBEE
	movw	$0, RunTimeSignatureAdjuster
	movl	dbglvl, %ecx
	movw	$-1042, BasicBlockSignatureTracker # imm = 0xFBEE
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_21
# %bb.19:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$1972, %ax              # imm = 0x7B4
	cmpw	$-934, %ax              # imm = 0xFC5A
	jne	.LBB95_78
# %bb.20:                               # %main.split151
	movabsq	$.L.str.25, %rdi
	movl	spec_fd+4, %esi
	movb	$0, %al
	callq	printf
	movw	$-934, BasicBlockSignatureTracker # imm = 0xFC5A
	movw	$1972, RunTimeSignatureAdjuster # imm = 0x7B4
.LBB95_21:
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1894, %ax              # imm = 0x766
	xorw	%cx, %ax
	cmpw	$-888, %ax              # imm = 0xFC88
	jne	.LBB95_78
# %bb.22:                               # %main.split153
	movl	$1024, %ecx             # imm = 0x400
	movl	-8(%rbp), %eax
	shll	$20, %eax
	cltd
	idivl	%ecx
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movw	$-888, BasicBlockSignatureTracker # imm = 0xFC88
	movw	$0, RunTimeSignatureAdjuster
	cmpq	$0, %rax
	jne	.LBB95_25
# %bb.23:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$29, %ax
	cmpw	$-875, %ax              # imm = 0xFC95
	jne	.LBB95_78
# %bb.24:                               # %main.split155
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
	xorl	%edi, %edi
	callq	exit
	movw	$-875, BasicBlockSignatureTracker # imm = 0xFC95
	movw	$0, RunTimeSignatureAdjuster
.LBB95_25:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$42, %ax
	cmpw	$-862, %ax              # imm = 0xFCA2
	jne	.LBB95_78
# %bb.26:                               # %main.split157
	movl	$0, -4(%rbp)
	movw	$-862, BasicBlockSignatureTracker # imm = 0xFCA2
	movw	$0, RunTimeSignatureAdjuster
.LBB95_27:                              # =>This Inner Loop Header: Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$15, %ax
	xorw	%cx, %ax
	cmpw	$-851, %ax              # imm = 0xFCAD
	jne	.LBB95_77
# %bb.28:                               # %main.split159
                                        #   in Loop: Header=BB95_27 Depth=1
	imull	$1027, -4(%rbp), %eax   # imm = 0x403
	movl	-8(%rbp), %ecx
	shll	$20, %ecx
	movw	$-851, BasicBlockSignatureTracker # imm = 0xFCAD
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_33
# %bb.29:                               #   in Loop: Header=BB95_27 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$123, %ax
	cmpw	$-810, %ax              # imm = 0xFCD6
	jne	.LBB95_77
# %bb.30:                               # %main.split161
                                        #   in Loop: Header=BB95_27 Depth=1
	movq	spec_fd+16, %rax
	imull	$1027, -4(%rbp), %ecx   # imm = 0x403
	movslq	%ecx, %rcx
	movb	(%rax,%rcx), %al
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movw	$-810, BasicBlockSignatureTracker # imm = 0xFCD6
	movw	$0, RunTimeSignatureAdjuster
# %bb.31:                               #   in Loop: Header=BB95_27 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$38, %ax
	cmpw	$-784, %ax              # imm = 0xFCF0
	jne	.LBB95_77
# %bb.32:                               # %main.split165
                                        #   in Loop: Header=BB95_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movw	$-784, BasicBlockSignatureTracker # imm = 0xFCF0
	movw	$82, RunTimeSignatureAdjuster
	jmp	.LBB95_27
.LBB95_33:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$81, %ax
	cmpw	$-772, %ax              # imm = 0xFCFC
	jne	.LBB95_78
# %bb.34:                               # %main.split163
	movw	$-772, BasicBlockSignatureTracker # imm = 0xFCFC
	movw	$0, RunTimeSignatureAdjuster
	callq	spec_initbufs
	movw	$-772, BasicBlockSignatureTracker # imm = 0xFCFC
	movw	$0, RunTimeSignatureAdjuster
	movl	$5, -12(%rbp)
	movw	$-772, BasicBlockSignatureTracker # imm = 0xFCFC
	movw	$0, RunTimeSignatureAdjuster
.LBB95_35:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_55 Depth 2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$505, %ax               # imm = 0x1F9
	xorw	%cx, %ax
	cmpw	$-763, %ax              # imm = 0xFD05
	jne	.LBB95_76
# %bb.36:                               # %main.split167
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	-12(%rbp), %eax
	movw	$-763, BasicBlockSignatureTracker # imm = 0xFD05
	movw	$0, RunTimeSignatureAdjuster
	cmpl	$9, %eax
	jg	.LBB95_73
# %bb.37:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$19, %ax
	cmpw	$-746, %ax              # imm = 0xFD16
	jne	.LBB95_76
# %bb.38:                               # %main.split169
                                        #   in Loop: Header=BB95_35 Depth=1
	movw	$-746, BasicBlockSignatureTracker # imm = 0xFD16
	movw	$1730, RunTimeSignatureAdjuster # imm = 0x6C2
	callq	debug_time
	movl	$2, %eax
	movw	$-746, BasicBlockSignatureTracker # imm = 0xFD16
	movw	$1730, RunTimeSignatureAdjuster # imm = 0x6C2
	movl	dbglvl, %ecx
	movw	$-746, BasicBlockSignatureTracker # imm = 0xFD16
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_41
# %bb.39:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$53, %ax
	cmpw	$-733, %ax              # imm = 0xFD23
	jne	.LBB95_76
# %bb.40:                               # %main.split173
                                        #   in Loop: Header=BB95_35 Depth=1
	movabsq	$.L.str.27, %rdi
	movl	-12(%rbp), %esi
	movb	$0, %al
	callq	printf
	movw	$-733, BasicBlockSignatureTracker # imm = 0xFD23
	movw	$53, RunTimeSignatureAdjuster
.LBB95_41:                              #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$46, %ax
	xorw	%cx, %ax
	cmpw	$-712, %ax              # imm = 0xFD38
	jne	.LBB95_76
# %bb.42:                               # %main.split175
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	-12(%rbp), %edx
	movw	$-712, BasicBlockSignatureTracker # imm = 0xFD38
	movw	$0, RunTimeSignatureAdjuster
	xorl	%edi, %edi
	movl	$1, %esi
	callq	spec_compress
	movw	$-712, BasicBlockSignatureTracker # imm = 0xFD38
	movw	$0, RunTimeSignatureAdjuster
	movw	$-712, BasicBlockSignatureTracker # imm = 0xFD38
	movw	$1772, RunTimeSignatureAdjuster # imm = 0x6EC
	callq	debug_time
	movl	$3, %eax
	movw	$-712, BasicBlockSignatureTracker # imm = 0xFD38
	movw	$1772, RunTimeSignatureAdjuster # imm = 0x6EC
	movl	dbglvl, %ecx
	movw	$-712, BasicBlockSignatureTracker # imm = 0xFD38
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_45
# %bb.43:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$80, %ax
	cmpw	$-664, %ax              # imm = 0xFD68
	jne	.LBB95_76
# %bb.44:                               # %main.split177
                                        #   in Loop: Header=BB95_35 Depth=1
	movabsq	$.L.str.28, %rdi
	movl	spec_fd+28, %esi
	movb	$0, %al
	callq	printf
	movw	$-664, BasicBlockSignatureTracker # imm = 0xFD68
	movw	$80, RunTimeSignatureAdjuster
.LBB95_45:                              #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$161, %ax
	xorw	%cx, %ax
	cmpw	$-615, %ax              # imm = 0xFD99
	jne	.LBB95_76
# %bb.46:                               # %main.split179
                                        #   in Loop: Header=BB95_35 Depth=1
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$0, RunTimeSignatureAdjuster
	xorl	%edi, %edi
	callq	spec_reset
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$0, RunTimeSignatureAdjuster
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$-15250, RunTimeSignatureAdjuster # imm = 0xC46E
	movl	$1, %edi
	callq	spec_rewind
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$-15250, RunTimeSignatureAdjuster # imm = 0xC46E
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$1613, RunTimeSignatureAdjuster # imm = 0x64D
	callq	debug_time
	movl	$2, %eax
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$1613, RunTimeSignatureAdjuster # imm = 0x64D
	movl	dbglvl, %ecx
	movw	$-615, BasicBlockSignatureTracker # imm = 0xFD99
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_49
# %bb.47:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$3, %ax
	cmpw	$-614, %ax              # imm = 0xFD9A
	jne	.LBB95_76
# %bb.48:                               # %main.split181
                                        #   in Loop: Header=BB95_35 Depth=1
	movabsq	$.L.str.29, %rdi
	movb	$0, %al
	callq	printf
	movw	$-614, BasicBlockSignatureTracker # imm = 0xFD9A
	movw	$3, RunTimeSignatureAdjuster
.LBB95_49:                              #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$59, %ax
	xorw	%cx, %ax
	cmpw	$-606, %ax              # imm = 0xFDA2
	jne	.LBB95_76
# %bb.50:                               # %main.split183
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	-12(%rbp), %edx
	movw	$-606, BasicBlockSignatureTracker # imm = 0xFDA2
	movw	$0, RunTimeSignatureAdjuster
	movl	$1, %edi
	xorl	%esi, %esi
	callq	spec_uncompress
	movw	$-606, BasicBlockSignatureTracker # imm = 0xFDA2
	movw	$0, RunTimeSignatureAdjuster
	movw	$-606, BasicBlockSignatureTracker # imm = 0xFDA2
	movw	$1654, RunTimeSignatureAdjuster # imm = 0x676
	callq	debug_time
	movl	$3, %eax
	movw	$-606, BasicBlockSignatureTracker # imm = 0xFDA2
	movw	$1654, RunTimeSignatureAdjuster # imm = 0x676
	movl	dbglvl, %ecx
	movw	$-606, BasicBlockSignatureTracker # imm = 0xFDA2
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_53
# %bb.51:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$103, %ax
	cmpw	$-571, %ax              # imm = 0xFDC5
	jne	.LBB95_76
# %bb.52:                               # %main.split185
                                        #   in Loop: Header=BB95_35 Depth=1
	movabsq	$.L.str.30, %rdi
	movl	spec_fd+4, %esi
	movb	$0, %al
	callq	printf
	movw	$-571, BasicBlockSignatureTracker # imm = 0xFDC5
	movw	$103, RunTimeSignatureAdjuster
.LBB95_53:                              #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$70, %ax
	xorw	%cx, %ax
	cmpw	$-540, %ax              # imm = 0xFDE4
	jne	.LBB95_76
# %bb.54:                               # %main.split187
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	$0, -4(%rbp)
	movw	$-540, BasicBlockSignatureTracker # imm = 0xFDE4
	movw	$0, RunTimeSignatureAdjuster
.LBB95_55:                              #   Parent Loop BB95_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1002, %ax              # imm = 0x3EA
	xorw	%cx, %ax
	cmpw	$-498, %ax              # imm = 0xFE0E
	jne	.LBB95_75
# %bb.56:                               # %main.split189
                                        #   in Loop: Header=BB95_55 Depth=2
	imull	$1027, -4(%rbp), %eax   # imm = 0x403
	movl	-8(%rbp), %ecx
	shll	$20, %ecx
	movw	$-498, BasicBlockSignatureTracker # imm = 0xFE0E
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_65
# %bb.57:                               #   in Loop: Header=BB95_55 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$25, %ax
	cmpw	$-489, %ax              # imm = 0xFE17
	jne	.LBB95_75
# %bb.58:                               # %main.split191
                                        #   in Loop: Header=BB95_55 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	spec_fd+16, %rcx
	imull	$1027, -4(%rbp), %edx   # imm = 0x403
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %ecx
	movw	$-489, BasicBlockSignatureTracker # imm = 0xFE17
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	je	.LBB95_61
# %bb.59:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$54, %ax
	cmpw	$-479, %ax              # imm = 0xFE21
	jne	.LBB95_78
# %bb.60:                               # %main.split195
	movabsq	$.L.str.31, %rdi
	movl	-8(%rbp), %esi
	movb	$0, %al
	callq	printf
	xorl	%edi, %edi
	callq	exit
	movw	$-479, BasicBlockSignatureTracker # imm = 0xFE21
	movw	$0, RunTimeSignatureAdjuster
.LBB95_61:                              #   in Loop: Header=BB95_55 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$45, %ax
	cmpw	$-454, %ax              # imm = 0xFE3A
	jne	.LBB95_75
# %bb.62:                               # %main.split197
                                        #   in Loop: Header=BB95_55 Depth=2
	movw	$-454, BasicBlockSignatureTracker # imm = 0xFE3A
	movw	$0, RunTimeSignatureAdjuster
# %bb.63:                               #   in Loop: Header=BB95_55 Depth=2
	movw	BasicBlockSignatureTracker, %ax
	xorw	$182, %ax
	cmpw	$-372, %ax              # imm = 0xFE8C
	jne	.LBB95_75
# %bb.64:                               # %main.split199
                                        #   in Loop: Header=BB95_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movw	$-372, BasicBlockSignatureTracker # imm = 0xFE8C
	movw	$872, RunTimeSignatureAdjuster # imm = 0x368
	jmp	.LBB95_55
.LBB95_65:                              #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$155, %ax
	cmpw	$-363, %ax              # imm = 0xFE95
	jne	.LBB95_76
# %bb.66:                               # %main.split193
                                        #   in Loop: Header=BB95_35 Depth=1
	movw	$-363, BasicBlockSignatureTracker # imm = 0xFE95
	movw	$1345, RunTimeSignatureAdjuster # imm = 0x541
	callq	debug_time
	movl	$3, %eax
	movw	$-363, BasicBlockSignatureTracker # imm = 0xFE95
	movw	$1345, RunTimeSignatureAdjuster # imm = 0x541
	movl	dbglvl, %ecx
	movw	$-363, BasicBlockSignatureTracker # imm = 0xFE95
	movw	$0, RunTimeSignatureAdjuster
	cmpl	%ecx, %eax
	jge	.LBB95_69
# %bb.67:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$13, %ax
	cmpw	$-360, %ax              # imm = 0xFE98
	jne	.LBB95_76
# %bb.68:                               # %main.split201
                                        #   in Loop: Header=BB95_35 Depth=1
	movabsq	$.L.str.32, %rdi
	movb	$0, %al
	callq	printf
	movw	$-360, BasicBlockSignatureTracker # imm = 0xFE98
	movw	$13, RunTimeSignatureAdjuster
.LBB95_69:                              #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$53, %ax
	xorw	%cx, %ax
	cmpw	$-352, %ax              # imm = 0xFEA0
	jne	.LBB95_76
# %bb.70:                               # %main.split203
                                        #   in Loop: Header=BB95_35 Depth=1
	movw	$-352, BasicBlockSignatureTracker # imm = 0xFEA0
	movw	$825, RunTimeSignatureAdjuster # imm = 0x339
	movl	$1, %edi
	callq	spec_reset
	movw	$-352, BasicBlockSignatureTracker # imm = 0xFEA0
	movw	$825, RunTimeSignatureAdjuster # imm = 0x339
	movw	$-352, BasicBlockSignatureTracker # imm = 0xFEA0
	movw	$-14505, RunTimeSignatureAdjuster # imm = 0xC757
	xorl	%edi, %edi
	callq	spec_rewind
	movw	$-352, BasicBlockSignatureTracker # imm = 0xFEA0
	movw	$-14505, RunTimeSignatureAdjuster # imm = 0xC757
	movw	$-352, BasicBlockSignatureTracker # imm = 0xFEA0
	movw	$0, RunTimeSignatureAdjuster
# %bb.71:                               #   in Loop: Header=BB95_35 Depth=1
	movw	BasicBlockSignatureTracker, %ax
	xorw	$12, %ax
	cmpw	$-340, %ax              # imm = 0xFEAC
	jne	.LBB95_76
# %bb.72:                               # %main.split205
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	movw	$-340, BasicBlockSignatureTracker # imm = 0xFEAC
	movw	$592, RunTimeSignatureAdjuster # imm = 0x250
	jmp	.LBB95_35
.LBB95_73:
	movw	BasicBlockSignatureTracker, %ax
	xorw	$980, %ax               # imm = 0x3D4
	cmpw	$-303, %ax              # imm = 0xFED1
	jne	.LBB95_78
# %bb.74:                               # %main.split171
	movabsq	$.L.str.33, %rdi
	movl	-8(%rbp), %esi
	movb	$0, %al
	callq	printf
	movw	$-303, BasicBlockSignatureTracker # imm = 0xFED1
	movw	$0, RunTimeSignatureAdjuster
	xorl	%eax, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.LBB95_75:                              # %CFerrorHandler.main.loopexit
	jmp	.LBB95_78
.LBB95_76:                              # %CFerrorHandler.main.loopexit1
	jmp	.LBB95_78
.LBB95_77:                              # %CFerrorHandler.main.loopexit2
	jmp	.LBB95_78
.LBB95_78:                              # %CFerrorHandler.main
	callq	FAULT_DETECTED_CFC
.Lfunc_end95:
	.size	main, .Lfunc_end95-main
	.cfi_endproc
                                        # -- End function
	.globl	debug_time              # -- Begin function debug_time
	.p2align	4, 0x90
	.type	debug_time,@function
debug_time:                             # @debug_time
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1238, %ax              # imm = 0x4D6
	xorw	%cx, %ax
	cmpw	$-254, %ax
	jne	.LBB96_7
# %bb.1:                                # %debug_time.split36
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1238, %ax              # imm = 0x4D6
	xorw	%cx, %ax
	cmpw	$-254, %ax
	jne	.LBB96_7
# %bb.2:                                # %debug_time.split34
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1238, %ax              # imm = 0x4D6
	xorw	%cx, %ax
	cmpw	$-254, %ax
	jne	.LBB96_7
# %bb.3:                                # %debug_time.split32
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1238, %ax              # imm = 0x4D6
	xorw	%cx, %ax
	cmpw	$-254, %ax
	jne	.LBB96_7
# %bb.4:                                # %debug_time.split30
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1238, %ax              # imm = 0x4D6
	xorw	%cx, %ax
	cmpw	$-254, %ax
	jne	.LBB96_7
# %bb.5:                                # %debug_time.split28
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$1238, %ax              # imm = 0x4D6
	xorw	%cx, %ax
	cmpw	$-254, %ax
	jne	.LBB96_7
# %bb.6:                                # %debug_time.split
	movw	$-254, BasicBlockSignatureTracker
	movw	$1175, RunTimeSignatureAdjuster # imm = 0x497
	xorl	%eax, %eax
	popq	%rbp
	retq
.LBB96_7:                               # %CFerrorHandler.debug_time
	callq	FAULT_DETECTED_CFC
.Lfunc_end96:
	.size	debug_time, .Lfunc_end96-debug_time
	.cfi_endproc
                                        # -- End function
	.globl	spec_initbufs           # -- Begin function spec_initbufs
	.p2align	4, 0x90
	.type	spec_initbufs,@function
spec_initbufs:                          # @spec_initbufs
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$970, %ax               # imm = 0x3CA
	xorw	%cx, %ax
	cmpw	$-202, %ax
	jne	.LBB97_2
# %bb.1:                                # %spec_initbufs.split
	movb	$0, smallMode
	movl	$0, verbosity
	movl	$9, blockSize100k
	movl	$30, workFactor
	movw	$-202, BasicBlockSignatureTracker
	movw	$923, RunTimeSignatureAdjuster # imm = 0x39B
	popq	%rbp
	retq
.LBB97_2:                               # %CFerrorHandler.spec_initbufs
	callq	FAULT_DETECTED_CFC
.Lfunc_end97:
	.size	spec_initbufs, .Lfunc_end97-spec_initbufs
	.cfi_endproc
                                        # -- End function
	.globl	spec_compress           # -- Begin function spec_compress
	.p2align	4, 0x90
	.type	spec_compress,@function
spec_compress:                          # @spec_compress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$586, %ax               # imm = 0x24A
	xorw	%cx, %ax
	cmpw	$-142, %ax
	jne	.LBB98_2
# %bb.1:                                # %spec_compress.split
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movl	%edi, (%r8)
	movl	%esi, (%rcx)
	movl	%edx, (%rax)
	movl	(%rax), %eax
	movl	%eax, blockSize100k
	movl	(%r8), %edi
	movl	(%rcx), %esi
	movw	$-142, BasicBlockSignatureTracker
	movw	$-26401, RunTimeSignatureAdjuster # imm = 0x98DF
	callq	compressStream
	movw	$-142, BasicBlockSignatureTracker
	movw	$-26401, RunTimeSignatureAdjuster # imm = 0x98DF
	movw	$-142, BasicBlockSignatureTracker
	movw	$612, RunTimeSignatureAdjuster # imm = 0x264
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB98_2:                               # %CFerrorHandler.spec_compress
	callq	FAULT_DETECTED_CFC
.Lfunc_end98:
	.size	spec_compress, .Lfunc_end98-spec_compress
	.cfi_endproc
                                        # -- End function
	.globl	spec_uncompress         # -- Begin function spec_uncompress
	.p2align	4, 0x90
	.type	spec_uncompress,@function
spec_uncompress:                        # @spec_uncompress
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movw	BasicBlockSignatureTracker, %ax
	movw	RunTimeSignatureAdjuster, %cx
	xorw	$569, %ax               # imm = 0x239
	xorw	%cx, %ax
	cmpw	$-101, %ax
	jne	.LBB99_2
# %bb.1:                                # %spec_uncompress.split
	movq	%rsp, %r8
	addq	$-16, %r8
	movq	%r8, %rsp
	movq	%rsp, %rcx
	addq	$-16, %rcx
	movq	%rcx, %rsp
	movq	%rsp, %rax
	addq	$-16, %rax
	movq	%rax, %rsp
	movl	%edi, (%r8)
	movl	%esi, (%rcx)
	movl	%edx, (%rax)
	movl	$0, blockSize100k
	movl	(%r8), %edi
	movl	(%rcx), %esi
	movw	$-101, BasicBlockSignatureTracker
	movw	$0, RunTimeSignatureAdjuster
	callq	uncompressStream
	movw	$-101, BasicBlockSignatureTracker
	movw	$514, RunTimeSignatureAdjuster # imm = 0x202
	movw	$-101, BasicBlockSignatureTracker
	movw	$514, RunTimeSignatureAdjuster # imm = 0x202
	movq	%rbp, %rsp
	popq	%rbp
	retq
.LBB99_2:                               # %CFerrorHandler.spec_uncompress
	callq	FAULT_DETECTED_CFC
.Lfunc_end99:
	.size	spec_uncompress, .Lfunc_end99-spec_uncompress
	.cfi_endproc
                                        # -- End function
	.globl	FAULT_DETECTED_CFC      # -- Begin function FAULT_DETECTED_CFC
	.p2align	4, 0x90
	.type	FAULT_DETECTED_CFC,@function
FAULT_DETECTED_CFC:                     # @FAULT_DETECTED_CFC
	.cfi_startproc
# %bb.0:                                # %FAULT_DETECTED_CFC
	pushq	%rax
	.cfi_def_cfa_offset 16
	callq	abort
	movw	$-73, BasicBlockSignatureTracker(%rip)
	movw	$0, RunTimeSignatureAdjuster(%rip)
.Lfunc_end100:
	.size	FAULT_DETECTED_CFC, .Lfunc_end100-FAULT_DETECTED_CFC
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"      %d work, %d block, ratio %5.2f\n"
	.size	.L.str, 38

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"    too repetitive; using fallback sorting algorithm\n"
	.size	.L.str.1, 54

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"        main sort initialise ...\n"
	.size	.L.str.6, 34

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"        bucket sorting ...\n"
	.size	.L.str.2, 28

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"        qsort [0x%x, 0x%x]   done %d   this %d\n"
	.size	.L.str.7, 48

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"        %d pointers, %d sorted, %d scanned\n"
	.size	.L.str.8, 44

	.type	incs,@object            # @incs
	.data
	.p2align	4
incs:
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	121                     # 0x79
	.long	364                     # 0x16c
	.long	1093                    # 0x445
	.long	3280                    # 0xcd0
	.long	9841                    # 0x2671
	.long	29524                   # 0x7354
	.long	88573                   # 0x159fd
	.long	265720                  # 0x40df8
	.long	797161                  # 0xc29e9
	.long	2391484                 # 0x247dbc
	.size	incs, 56

	.type	.L.str.3,@object        # @.str.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3:
	.asciz	"        depth %6d has "
	.size	.L.str.3, 23

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"%6d unresolved strings\n"
	.size	.L.str.4, 24

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"        reconstructing block ...\n"
	.size	.L.str.5, 34

	.type	blockSize100k,@object   # @blockSize100k
	.comm	blockSize100k,4,4
	.type	verbosity,@object       # @verbosity
	.comm	verbosity,4,4
	.type	workFactor,@object      # @workFactor
	.comm	workFactor,4,4
	.type	outputHandleJustInCase,@object # @outputHandleJustInCase
	.comm	outputHandleJustInCase,4,4
	.type	smallMode,@object       # @smallMode
	.comm	smallMode,1,1
	.type	forceOverwrite,@object  # @forceOverwrite
	.comm	forceOverwrite,1,1
	.type	noisy,@object           # @noisy
	.comm	noisy,1,1
	.type	progName,@object        # @progName
	.comm	progName,8,8
	.type	inName,@object          # @inName
	.comm	inName,1034,16
	.type	keepInputFiles,@object  # @keepInputFiles
	.comm	keepInputFiles,1,1
	.type	deleteOutputOnInterrupt,@object # @deleteOutputOnInterrupt
	.comm	deleteOutputOnInterrupt,1,1
	.type	testFailsExist,@object  # @testFailsExist
	.comm	testFailsExist,1,1
	.type	unzFailsExist,@object   # @unzFailsExist
	.comm	unzFailsExist,1,1
	.type	numFileNames,@object    # @numFileNames
	.comm	numFileNames,4,4
	.type	numFilesProcessed,@object # @numFilesProcessed
	.comm	numFilesProcessed,4,4
	.type	exitValue,@object       # @exitValue
	.comm	exitValue,4,4
	.type	opMode,@object          # @opMode
	.comm	opMode,4,4
	.type	srcMode,@object         # @srcMode
	.comm	srcMode,4,4
	.type	longestFileName,@object # @longestFileName
	.comm	longestFileName,4,4
	.type	outName,@object         # @outName
	.comm	outName,1034,16
	.type	tmpName,@object         # @tmpName
	.comm	tmpName,1034,16
	.type	progNameReally,@object  # @progNameReally
	.comm	progNameReally,1034,16
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"\n"
	.size	.L.str.9, 2

	.type	.L.str.1.10,@object     # @.str.1.10
.L.str.1.10:
	.asciz	" no data compressed.\n"
	.size	.L.str.1.10, 22

	.type	.L.str.2.11,@object     # @.str.2.11
.L.str.2.11:
	.asciz	"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\n"
	.size	.L.str.2.11, 57

	.type	.L.str.3.12,@object     # @.str.3.12
.L.str.3.12:
	.asciz	"compress:unexpected error"
	.size	.L.str.3.12, 26

	.type	.L.str.4.13,@object     # @.str.4.13
.L.str.4.13:
	.asciz	"compress:end"
	.size	.L.str.4.13, 13

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"\n%s: PANIC -- internal consistency error:\n\t%s\n\tThis is probably a BUG, but it may be in your COMPILER.  Please do not bother\n\tthe original author.\n"
	.size	.L.str.10, 148

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"\tInput file = %s, output file = %s\n"
	.size	.L.str.11, 36

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"\n%s: I/O or other error, bailing out.  Possible reason follows.\n"
	.size	.L.str.15, 65

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"\n%s: couldn't allocate enough memory\n"
	.size	.L.str.16, 38

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"bzip2: I'm not configured correctly for this platform!\n\tI require Int32, Int16 and Char to have sizes\n\tof 4, 2 and 1 bytes to run properly, and they don't.\n\tProbably you can fix this by defining them correctly,\n\tand recompiling.  Bye!\n"
	.size	.L.str.17, 236

	.type	.L.str.5.14,@object     # @.str.5.14
.L.str.5.14:
	.asciz	"decompress:bzReadGetUnused"
	.size	.L.str.5.14, 27

	.type	.L.str.6.15,@object     # @.str.6.15
.L.str.6.15:
	.asciz	"\n    "
	.size	.L.str.6.15, 6

	.type	.L.str.7.16,@object     # @.str.7.16
.L.str.7.16:
	.asciz	"\n%s: %s: trailing garbage after EOF ignored\n"
	.size	.L.str.7.16, 45

	.type	.L.str.8.17,@object     # @.str.8.17
.L.str.8.17:
	.asciz	"decompress:unexpected error"
	.size	.L.str.8.17, 28

	.type	.L.str.9.18,@object     # @.str.9.18
.L.str.9.18:
	.asciz	"decompress:end"
	.size	.L.str.9.18, 15

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"\n%s: Compressed file ends unexpectedly;\n\tperhaps it is corrupted?  *Possible* reason follows.\n"
	.size	.L.str.14, 95

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"\nIt is possible that the compressed file(s) have become corrupted.\nYou can use the -tvv option to test integrity of such files.\n\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.13, 241

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"\n%s: Data integrity error when decompressing.\n"
	.size	.L.str.12, 47

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"\n\nbzip2/libbzip2: internal error number %d.\nThis may be a bug in bzip2/libbzip2, %s.\nIt may also be a bug in your compiler.  Please do not bother the\noriginal author of bzip2 with a bug report for this.  He\ndoesn't know anything about bzip2 as it appears in CPU2006.\n\n"
	.size	.L.str.21, 269

	.type	.L.str.1.22,@object     # @.str.1.22
.L.str.1.22:
	.asciz	"\n*** A special note about internal error number 1007 ***\n\nExperience suggests that a common cause of i.e. 1007\nis unreliable memory or other hardware.  The 1007 assertion\njust happens to cross-check the results of huge numbers of\nmemory reads/writes, and so acts (unintendedly) as a stress\ntest of your memory system.\n\nI suggest the following: try compressing the file again,\npossibly monitoring progress in detail with the -vv flag.\n\n* If the error cannot be reproduced, and/or happens at different\n  points in compression, you may have a flaky memory system.\n  Try a memory-test program.  I have used Memtest86\n  (www.memtest86.com).  At the time of writing it is free (GPLd).\n  Memtest86 tests memory much more thorougly than your BIOSs\n  power-on test, and may find failures that the BIOS doesn't.\n\n* If the error can be repeatably reproduced, this is a bug in\n  bzip2, and I would very much like to hear about it.  Please\n  let me know, and, ideally, save a copy of the file causing the\n  problem -- without which I will be unable to investigate it.\n\n"
	.size	.L.str.1.22, 1057

	.type	.L.str.5.23,@object     # @.str.5.23
.L.str.5.23:
	.asciz	"1.0.3, 15-Feb-2005"
	.size	.L.str.5.23, 19

	.type	.L.str.2.24,@object     # @.str.2.24
.L.str.2.24:
	.asciz	" {0x%08x, 0x%08x}"
	.size	.L.str.2.24, 18

	.type	.L.str.3.25,@object     # @.str.3.25
.L.str.3.25:
	.asciz	"]"
	.size	.L.str.3.25, 2

	.type	.L.str.4.26,@object     # @.str.4.26
.L.str.4.26:
	.asciz	"\n    combined CRCs: stored = 0x%08x, computed = 0x%08x"
	.size	.L.str.4.26, 55

	.type	.L.str.6.42,@object     # @.str.6.42
.L.str.6.42:
	.asciz	"w"
	.size	.L.str.6.42, 2

	.type	.L.str.7.43,@object     # @.str.7.43
.L.str.7.43:
	.asciz	"r"
	.size	.L.str.7.43, 2

	.type	.L.str.8.44,@object     # @.str.8.44
.L.str.8.44:
	.asciz	"b"
	.size	.L.str.8.44, 2

	.type	.L.str.9.45,@object     # @.str.9.45
.L.str.9.45:
	.zero	1
	.size	.L.str.9.45, 1

	.type	bzerrorstrings,@object  # @bzerrorstrings
	.data
	.p2align	4
bzerrorstrings:
	.quad	.L.str.10.46
	.quad	.L.str.11.47
	.quad	.L.str.12.48
	.quad	.L.str.13.49
	.quad	.L.str.14.50
	.quad	.L.str.15.51
	.quad	.L.str.16.52
	.quad	.L.str.17.53
	.quad	.L.str.18
	.quad	.L.str.19
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.size	bzerrorstrings, 128

	.type	.L.str.10.46,@object    # @.str.10.46
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.10.46:
	.asciz	"OK"
	.size	.L.str.10.46, 3

	.type	.L.str.11.47,@object    # @.str.11.47
.L.str.11.47:
	.asciz	"SEQUENCE_ERROR"
	.size	.L.str.11.47, 15

	.type	.L.str.12.48,@object    # @.str.12.48
.L.str.12.48:
	.asciz	"PARAM_ERROR"
	.size	.L.str.12.48, 12

	.type	.L.str.13.49,@object    # @.str.13.49
.L.str.13.49:
	.asciz	"MEM_ERROR"
	.size	.L.str.13.49, 10

	.type	.L.str.14.50,@object    # @.str.14.50
.L.str.14.50:
	.asciz	"DATA_ERROR"
	.size	.L.str.14.50, 11

	.type	.L.str.15.51,@object    # @.str.15.51
.L.str.15.51:
	.asciz	"DATA_ERROR_MAGIC"
	.size	.L.str.15.51, 17

	.type	.L.str.16.52,@object    # @.str.16.52
.L.str.16.52:
	.asciz	"IO_ERROR"
	.size	.L.str.16.52, 9

	.type	.L.str.17.53,@object    # @.str.17.53
.L.str.17.53:
	.asciz	"UNEXPECTED_EOF"
	.size	.L.str.17.53, 15

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"OUTBUFF_FULL"
	.size	.L.str.18, 13

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"CONFIG_ERROR"
	.size	.L.str.19, 13

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"???"
	.size	.L.str.20, 4

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\n"
	.size	.L.str.56, 62

	.type	.L.str.1.57,@object     # @.str.1.57
.L.str.1.57:
	.asciz	"    final combined CRC = 0x%08x\n   "
	.size	.L.str.1.57, 36

	.type	.L.str.2.58,@object     # @.str.2.58
.L.str.2.58:
	.asciz	"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\n"
	.size	.L.str.2.58, 64

	.type	.L.str.3.59,@object     # @.str.3.59
.L.str.3.59:
	.asciz	"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\n"
	.size	.L.str.3.59, 59

	.type	.L.str.4.60,@object     # @.str.4.60
.L.str.4.60:
	.asciz	"      pass %d: size is %d, grp uses are "
	.size	.L.str.4.60, 41

	.type	.L.str.5.61,@object     # @.str.5.61
.L.str.5.61:
	.asciz	"%d "
	.size	.L.str.5.61, 4

	.type	.L.str.6.62,@object     # @.str.6.62
.L.str.6.62:
	.asciz	"\n"
	.size	.L.str.6.62, 2

	.type	.L.str.7.63,@object     # @.str.7.63
.L.str.7.63:
	.asciz	"      bytes: mapping %d, "
	.size	.L.str.7.63, 26

	.type	.L.str.8.64,@object     # @.str.8.64
.L.str.8.64:
	.asciz	"selectors %d, "
	.size	.L.str.8.64, 15

	.type	.L.str.9.65,@object     # @.str.9.65
.L.str.9.65:
	.asciz	"code lengths %d, "
	.size	.L.str.9.65, 18

	.type	.L.str.10.66,@object    # @.str.10.66
.L.str.10.66:
	.asciz	"codes %d\n"
	.size	.L.str.10.66, 10

	.type	BZ2_crc32Table,@object  # @BZ2_crc32Table
	.data
	.globl	BZ2_crc32Table
	.p2align	4
BZ2_crc32Table:
	.long	0                       # 0x0
	.long	79764919                # 0x4c11db7
	.long	159529838               # 0x9823b6e
	.long	222504665               # 0xd4326d9
	.long	319059676               # 0x130476dc
	.long	398814059               # 0x17c56b6b
	.long	445009330               # 0x1a864db2
	.long	507990021               # 0x1e475005
	.long	638119352               # 0x2608edb8
	.long	583659535               # 0x22c9f00f
	.long	797628118               # 0x2f8ad6d6
	.long	726387553               # 0x2b4bcb61
	.long	890018660               # 0x350c9b64
	.long	835552979               # 0x31cd86d3
	.long	1015980042              # 0x3c8ea00a
	.long	944750013               # 0x384fbdbd
	.long	1276238704              # 0x4c11db70
	.long	1221641927              # 0x48d0c6c7
	.long	1167319070              # 0x4593e01e
	.long	1095957929              # 0x4152fda9
	.long	1595256236              # 0x5f15adac
	.long	1540665371              # 0x5bd4b01b
	.long	1452775106              # 0x569796c2
	.long	1381403509              # 0x52568b75
	.long	1780037320              # 0x6a1936c8
	.long	1859660671              # 0x6ed82b7f
	.long	1671105958              # 0x639b0da6
	.long	1733955601              # 0x675a1011
	.long	2031960084              # 0x791d4014
	.long	2111593891              # 0x7ddc5da3
	.long	1889500026              # 0x709f7b7a
	.long	1952343757              # 0x745e66cd
	.long	2552477408              # 0x9823b6e0
	.long	2632100695              # 0x9ce2ab57
	.long	2443283854              # 0x91a18d8e
	.long	2506133561              # 0x95609039
	.long	2334638140              # 0x8b27c03c
	.long	2414271883              # 0x8fe6dd8b
	.long	2191915858              # 0x82a5fb52
	.long	2254759653              # 0x8664e6e5
	.long	3190512472              # 0xbe2b5b58
	.long	3135915759              # 0xbaea46ef
	.long	3081330742              # 0xb7a96036
	.long	3009969537              # 0xb3687d81
	.long	2905550212              # 0xad2f2d84
	.long	2850959411              # 0xa9ee3033
	.long	2762807018              # 0xa4ad16ea
	.long	2691435357              # 0xa06c0b5d
	.long	3560074640              # 0xd4326d90
	.long	3505614887              # 0xd0f37027
	.long	3719321342              # 0xddb056fe
	.long	3648080713              # 0xd9714b49
	.long	3342211916              # 0xc7361b4c
	.long	3287746299              # 0xc3f706fb
	.long	3467911202              # 0xceb42022
	.long	3396681109              # 0xca753d95
	.long	4063920168              # 0xf23a8028
	.long	4143685023              # 0xf6fb9d9f
	.long	4223187782              # 0xfbb8bb46
	.long	4286162673              # 0xff79a6f1
	.long	3779000052              # 0xe13ef6f4
	.long	3858754371              # 0xe5ffeb43
	.long	3904687514              # 0xe8bccd9a
	.long	3967668269              # 0xec7dd02d
	.long	881225847               # 0x34867077
	.long	809987520               # 0x30476dc0
	.long	1023691545              # 0x3d044b19
	.long	969234094               # 0x39c556ae
	.long	662832811               # 0x278206ab
	.long	591600412               # 0x23431b1c
	.long	771767749               # 0x2e003dc5
	.long	717299826               # 0x2ac12072
	.long	311336399               # 0x128e9dcf
	.long	374308984               # 0x164f8078
	.long	453813921               # 0x1b0ca6a1
	.long	533576470               # 0x1fcdbb16
	.long	25881363                # 0x18aeb13
	.long	88864420                # 0x54bf6a4
	.long	134795389               # 0x808d07d
	.long	214552010               # 0xcc9cdca
	.long	2023205639              # 0x7897ab07
	.long	2086057648              # 0x7c56b6b0
	.long	1897238633              # 0x71159069
	.long	1976864222              # 0x75d48dde
	.long	1804852699              # 0x6b93dddb
	.long	1867694188              # 0x6f52c06c
	.long	1645340341              # 0x6211e6b5
	.long	1724971778              # 0x66d0fb02
	.long	1587496639              # 0x5e9f46bf
	.long	1516133128              # 0x5a5e5b08
	.long	1461550545              # 0x571d7dd1
	.long	1406951526              # 0x53dc6066
	.long	1302016099              # 0x4d9b3063
	.long	1230646740              # 0x495a2dd4
	.long	1142491917              # 0x44190b0d
	.long	1087903418              # 0x40d816ba
	.long	2896545431              # 0xaca5c697
	.long	2825181984              # 0xa864db20
	.long	2770861561              # 0xa527fdf9
	.long	2716262478              # 0xa1e6e04e
	.long	3215044683              # 0xbfa1b04b
	.long	3143675388              # 0xbb60adfc
	.long	3055782693              # 0xb6238b25
	.long	3001194130              # 0xb2e29692
	.long	2326604591              # 0x8aad2b2f
	.long	2389456536              # 0x8e6c3698
	.long	2200899649              # 0x832f1041
	.long	2280525302              # 0x87ee0df6
	.long	2578013683              # 0x99a95df3
	.long	2640855108              # 0x9d684044
	.long	2418763421              # 0x902b669d
	.long	2498394922              # 0x94ea7b2a
	.long	3769900519              # 0xe0b41de7
	.long	3832873040              # 0xe4750050
	.long	3912640137              # 0xe9362689
	.long	3992402750              # 0xedf73b3e
	.long	4088425275              # 0xf3b06b3b
	.long	4151408268              # 0xf771768c
	.long	4197601365              # 0xfa325055
	.long	4277358050              # 0xfef34de2
	.long	3334271071              # 0xc6bcf05f
	.long	3263032808              # 0xc27dede8
	.long	3476998961              # 0xcf3ecb31
	.long	3422541446              # 0xcbffd686
	.long	3585640067              # 0xd5b88683
	.long	3514407732              # 0xd1799b34
	.long	3694837229              # 0xdc3abded
	.long	3640369242              # 0xd8fba05a
	.long	1762451694              # 0x690ce0ee
	.long	1842216281              # 0x6dcdfd59
	.long	1619975040              # 0x608edb80
	.long	1682949687              # 0x644fc637
	.long	2047383090              # 0x7a089632
	.long	2127137669              # 0x7ec98b85
	.long	1938468188              # 0x738aad5c
	.long	2001449195              # 0x774bb0eb
	.long	1325665622              # 0x4f040d56
	.long	1271206113              # 0x4bc510e1
	.long	1183200824              # 0x46863638
	.long	1111960463              # 0x42472b8f
	.long	1543535498              # 0x5c007b8a
	.long	1489069629              # 0x58c1663d
	.long	1434599652              # 0x558240e4
	.long	1363369299              # 0x51435d53
	.long	622672798               # 0x251d3b9e
	.long	568075817               # 0x21dc2629
	.long	748617968               # 0x2c9f00f0
	.long	677256519               # 0x285e1d47
	.long	907627842               # 0x36194d42
	.long	853037301               # 0x32d850f5
	.long	1067152940              # 0x3f9b762c
	.long	995781531               # 0x3b5a6b9b
	.long	51762726                # 0x315d626
	.long	131386257               # 0x7d4cb91
	.long	177728840               # 0xa97ed48
	.long	240578815               # 0xe56f0ff
	.long	269590778               # 0x1011a0fa
	.long	349224269               # 0x14d0bd4d
	.long	429104020               # 0x19939b94
	.long	491947555               # 0x1d528623
	.long	4046411278              # 0xf12f560e
	.long	4126034873              # 0xf5ee4bb9
	.long	4172115296              # 0xf8ad6d60
	.long	4234965207              # 0xfc6c70d7
	.long	3794477266              # 0xe22b20d2
	.long	3874110821              # 0xe6ea3d65
	.long	3953728444              # 0xeba91bbc
	.long	4016571915              # 0xef68060b
	.long	3609705398              # 0xd727bbb6
	.long	3555108353              # 0xd3e6a601
	.long	3735388376              # 0xdea580d8
	.long	3664026991              # 0xda649d6f
	.long	3290680682              # 0xc423cd6a
	.long	3236090077              # 0xc0e2d0dd
	.long	3449943556              # 0xcda1f604
	.long	3378572211              # 0xc960ebb3
	.long	3174993278              # 0xbd3e8d7e
	.long	3120533705              # 0xb9ff90c9
	.long	3032266256              # 0xb4bcb610
	.long	2961025959              # 0xb07daba7
	.long	2923101090              # 0xae3afba2
	.long	2868635157              # 0xaafbe615
	.long	2813903052              # 0xa7b8c0cc
	.long	2742672763              # 0xa379dd7b
	.long	2604032198              # 0x9b3660c6
	.long	2683796849              # 0x9ff77d71
	.long	2461293480              # 0x92b45ba8
	.long	2524268063              # 0x9675461f
	.long	2284983834              # 0x8832161a
	.long	2364738477              # 0x8cf30bad
	.long	2175806836              # 0x81b02d74
	.long	2238787779              # 0x857130c3
	.long	1569362073              # 0x5d8a9099
	.long	1498123566              # 0x594b8d2e
	.long	1409854455              # 0x5408abf7
	.long	1355396672              # 0x50c9b640
	.long	1317987909              # 0x4e8ee645
	.long	1246755826              # 0x4a4ffbf2
	.long	1192025387              # 0x470cdd2b
	.long	1137557660              # 0x43cdc09c
	.long	2072149281              # 0x7b827d21
	.long	2135122070              # 0x7f436096
	.long	1912620623              # 0x7200464f
	.long	1992383480              # 0x76c15bf8
	.long	1753615357              # 0x68860bfd
	.long	1816598090              # 0x6c47164a
	.long	1627664531              # 0x61043093
	.long	1707420964              # 0x65c52d24
	.long	295390185               # 0x119b4be9
	.long	358241886               # 0x155a565e
	.long	404320391               # 0x18197087
	.long	483945776               # 0x1cd86d30
	.long	43990325                # 0x29f3d35
	.long	106832002               # 0x65e2082
	.long	186451547               # 0xb1d065b
	.long	266083308               # 0xfdc1bec
	.long	932423249               # 0x3793a651
	.long	861060070               # 0x3352bbe6
	.long	1041341759              # 0x3e119d3f
	.long	986742920               # 0x3ad08088
	.long	613929101               # 0x2497d08d
	.long	542559546               # 0x2056cd3a
	.long	756411363               # 0x2d15ebe3
	.long	701822548               # 0x29d4f654
	.long	3316196985              # 0xc5a92679
	.long	3244833742              # 0xc1683bce
	.long	3425377559              # 0xcc2b1d17
	.long	3370778784              # 0xc8ea00a0
	.long	3601682597              # 0xd6ad50a5
	.long	3530312978              # 0xd26c4d12
	.long	3744426955              # 0xdf2f6bcb
	.long	3689838204              # 0xdbee767c
	.long	3819031489              # 0xe3a1cbc1
	.long	3881883254              # 0xe760d676
	.long	3928223919              # 0xea23f0af
	.long	4007849240              # 0xeee2ed18
	.long	4037393693              # 0xf0a5bd1d
	.long	4100235434              # 0xf464a0aa
	.long	4180117107              # 0xf9278673
	.long	4259748804              # 0xfde69bc4
	.long	2310601993              # 0x89b8fd09
	.long	2373574846              # 0x8d79e0be
	.long	2151335527              # 0x803ac667
	.long	2231098320              # 0x84fbdbd0
	.long	2596047829              # 0x9abc8bd5
	.long	2659030626              # 0x9e7d9662
	.long	2470359227              # 0x933eb0bb
	.long	2550115596              # 0x97ffad0c
	.long	2947551409              # 0xafb010b1
	.long	2876312838              # 0xab710d06
	.long	2788305887              # 0xa6322bdf
	.long	2733848168              # 0xa2f33668
	.long	3165939309              # 0xbcb4666d
	.long	3094707162              # 0xb8757bda
	.long	3040238851              # 0xb5365d03
	.long	2985771188              # 0xb1f740b4
	.size	BZ2_crc32Table, 1024

	.type	.L.str.71,@object       # @.str.71
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.71:
	.asciz	"\n    [%d: huff+mtf "
	.size	.L.str.71, 20

	.type	.L.str.1.72,@object     # @.str.1.72
.L.str.1.72:
	.asciz	"rt+rld"
	.size	.L.str.1.72, 7

	.type	BZ2_rNums,@object       # @BZ2_rNums
	.data
	.globl	BZ2_rNums
	.p2align	4
BZ2_rNums:
	.long	619                     # 0x26b
	.long	720                     # 0x2d0
	.long	127                     # 0x7f
	.long	481                     # 0x1e1
	.long	931                     # 0x3a3
	.long	816                     # 0x330
	.long	813                     # 0x32d
	.long	233                     # 0xe9
	.long	566                     # 0x236
	.long	247                     # 0xf7
	.long	985                     # 0x3d9
	.long	724                     # 0x2d4
	.long	205                     # 0xcd
	.long	454                     # 0x1c6
	.long	863                     # 0x35f
	.long	491                     # 0x1eb
	.long	741                     # 0x2e5
	.long	242                     # 0xf2
	.long	949                     # 0x3b5
	.long	214                     # 0xd6
	.long	733                     # 0x2dd
	.long	859                     # 0x35b
	.long	335                     # 0x14f
	.long	708                     # 0x2c4
	.long	621                     # 0x26d
	.long	574                     # 0x23e
	.long	73                      # 0x49
	.long	654                     # 0x28e
	.long	730                     # 0x2da
	.long	472                     # 0x1d8
	.long	419                     # 0x1a3
	.long	436                     # 0x1b4
	.long	278                     # 0x116
	.long	496                     # 0x1f0
	.long	867                     # 0x363
	.long	210                     # 0xd2
	.long	399                     # 0x18f
	.long	680                     # 0x2a8
	.long	480                     # 0x1e0
	.long	51                      # 0x33
	.long	878                     # 0x36e
	.long	465                     # 0x1d1
	.long	811                     # 0x32b
	.long	169                     # 0xa9
	.long	869                     # 0x365
	.long	675                     # 0x2a3
	.long	611                     # 0x263
	.long	697                     # 0x2b9
	.long	867                     # 0x363
	.long	561                     # 0x231
	.long	862                     # 0x35e
	.long	687                     # 0x2af
	.long	507                     # 0x1fb
	.long	283                     # 0x11b
	.long	482                     # 0x1e2
	.long	129                     # 0x81
	.long	807                     # 0x327
	.long	591                     # 0x24f
	.long	733                     # 0x2dd
	.long	623                     # 0x26f
	.long	150                     # 0x96
	.long	238                     # 0xee
	.long	59                      # 0x3b
	.long	379                     # 0x17b
	.long	684                     # 0x2ac
	.long	877                     # 0x36d
	.long	625                     # 0x271
	.long	169                     # 0xa9
	.long	643                     # 0x283
	.long	105                     # 0x69
	.long	170                     # 0xaa
	.long	607                     # 0x25f
	.long	520                     # 0x208
	.long	932                     # 0x3a4
	.long	727                     # 0x2d7
	.long	476                     # 0x1dc
	.long	693                     # 0x2b5
	.long	425                     # 0x1a9
	.long	174                     # 0xae
	.long	647                     # 0x287
	.long	73                      # 0x49
	.long	122                     # 0x7a
	.long	335                     # 0x14f
	.long	530                     # 0x212
	.long	442                     # 0x1ba
	.long	853                     # 0x355
	.long	695                     # 0x2b7
	.long	249                     # 0xf9
	.long	445                     # 0x1bd
	.long	515                     # 0x203
	.long	909                     # 0x38d
	.long	545                     # 0x221
	.long	703                     # 0x2bf
	.long	919                     # 0x397
	.long	874                     # 0x36a
	.long	474                     # 0x1da
	.long	882                     # 0x372
	.long	500                     # 0x1f4
	.long	594                     # 0x252
	.long	612                     # 0x264
	.long	641                     # 0x281
	.long	801                     # 0x321
	.long	220                     # 0xdc
	.long	162                     # 0xa2
	.long	819                     # 0x333
	.long	984                     # 0x3d8
	.long	589                     # 0x24d
	.long	513                     # 0x201
	.long	495                     # 0x1ef
	.long	799                     # 0x31f
	.long	161                     # 0xa1
	.long	604                     # 0x25c
	.long	958                     # 0x3be
	.long	533                     # 0x215
	.long	221                     # 0xdd
	.long	400                     # 0x190
	.long	386                     # 0x182
	.long	867                     # 0x363
	.long	600                     # 0x258
	.long	782                     # 0x30e
	.long	382                     # 0x17e
	.long	596                     # 0x254
	.long	414                     # 0x19e
	.long	171                     # 0xab
	.long	516                     # 0x204
	.long	375                     # 0x177
	.long	682                     # 0x2aa
	.long	485                     # 0x1e5
	.long	911                     # 0x38f
	.long	276                     # 0x114
	.long	98                      # 0x62
	.long	553                     # 0x229
	.long	163                     # 0xa3
	.long	354                     # 0x162
	.long	666                     # 0x29a
	.long	933                     # 0x3a5
	.long	424                     # 0x1a8
	.long	341                     # 0x155
	.long	533                     # 0x215
	.long	870                     # 0x366
	.long	227                     # 0xe3
	.long	730                     # 0x2da
	.long	475                     # 0x1db
	.long	186                     # 0xba
	.long	263                     # 0x107
	.long	647                     # 0x287
	.long	537                     # 0x219
	.long	686                     # 0x2ae
	.long	600                     # 0x258
	.long	224                     # 0xe0
	.long	469                     # 0x1d5
	.long	68                      # 0x44
	.long	770                     # 0x302
	.long	919                     # 0x397
	.long	190                     # 0xbe
	.long	373                     # 0x175
	.long	294                     # 0x126
	.long	822                     # 0x336
	.long	808                     # 0x328
	.long	206                     # 0xce
	.long	184                     # 0xb8
	.long	943                     # 0x3af
	.long	795                     # 0x31b
	.long	384                     # 0x180
	.long	383                     # 0x17f
	.long	461                     # 0x1cd
	.long	404                     # 0x194
	.long	758                     # 0x2f6
	.long	839                     # 0x347
	.long	887                     # 0x377
	.long	715                     # 0x2cb
	.long	67                      # 0x43
	.long	618                     # 0x26a
	.long	276                     # 0x114
	.long	204                     # 0xcc
	.long	918                     # 0x396
	.long	873                     # 0x369
	.long	777                     # 0x309
	.long	604                     # 0x25c
	.long	560                     # 0x230
	.long	951                     # 0x3b7
	.long	160                     # 0xa0
	.long	578                     # 0x242
	.long	722                     # 0x2d2
	.long	79                      # 0x4f
	.long	804                     # 0x324
	.long	96                      # 0x60
	.long	409                     # 0x199
	.long	713                     # 0x2c9
	.long	940                     # 0x3ac
	.long	652                     # 0x28c
	.long	934                     # 0x3a6
	.long	970                     # 0x3ca
	.long	447                     # 0x1bf
	.long	318                     # 0x13e
	.long	353                     # 0x161
	.long	859                     # 0x35b
	.long	672                     # 0x2a0
	.long	112                     # 0x70
	.long	785                     # 0x311
	.long	645                     # 0x285
	.long	863                     # 0x35f
	.long	803                     # 0x323
	.long	350                     # 0x15e
	.long	139                     # 0x8b
	.long	93                      # 0x5d
	.long	354                     # 0x162
	.long	99                      # 0x63
	.long	820                     # 0x334
	.long	908                     # 0x38c
	.long	609                     # 0x261
	.long	772                     # 0x304
	.long	154                     # 0x9a
	.long	274                     # 0x112
	.long	580                     # 0x244
	.long	184                     # 0xb8
	.long	79                      # 0x4f
	.long	626                     # 0x272
	.long	630                     # 0x276
	.long	742                     # 0x2e6
	.long	653                     # 0x28d
	.long	282                     # 0x11a
	.long	762                     # 0x2fa
	.long	623                     # 0x26f
	.long	680                     # 0x2a8
	.long	81                      # 0x51
	.long	927                     # 0x39f
	.long	626                     # 0x272
	.long	789                     # 0x315
	.long	125                     # 0x7d
	.long	411                     # 0x19b
	.long	521                     # 0x209
	.long	938                     # 0x3aa
	.long	300                     # 0x12c
	.long	821                     # 0x335
	.long	78                      # 0x4e
	.long	343                     # 0x157
	.long	175                     # 0xaf
	.long	128                     # 0x80
	.long	250                     # 0xfa
	.long	170                     # 0xaa
	.long	774                     # 0x306
	.long	972                     # 0x3cc
	.long	275                     # 0x113
	.long	999                     # 0x3e7
	.long	639                     # 0x27f
	.long	495                     # 0x1ef
	.long	78                      # 0x4e
	.long	352                     # 0x160
	.long	126                     # 0x7e
	.long	857                     # 0x359
	.long	956                     # 0x3bc
	.long	358                     # 0x166
	.long	619                     # 0x26b
	.long	580                     # 0x244
	.long	124                     # 0x7c
	.long	737                     # 0x2e1
	.long	594                     # 0x252
	.long	701                     # 0x2bd
	.long	612                     # 0x264
	.long	669                     # 0x29d
	.long	112                     # 0x70
	.long	134                     # 0x86
	.long	694                     # 0x2b6
	.long	363                     # 0x16b
	.long	992                     # 0x3e0
	.long	809                     # 0x329
	.long	743                     # 0x2e7
	.long	168                     # 0xa8
	.long	974                     # 0x3ce
	.long	944                     # 0x3b0
	.long	375                     # 0x177
	.long	748                     # 0x2ec
	.long	52                      # 0x34
	.long	600                     # 0x258
	.long	747                     # 0x2eb
	.long	642                     # 0x282
	.long	182                     # 0xb6
	.long	862                     # 0x35e
	.long	81                      # 0x51
	.long	344                     # 0x158
	.long	805                     # 0x325
	.long	988                     # 0x3dc
	.long	739                     # 0x2e3
	.long	511                     # 0x1ff
	.long	655                     # 0x28f
	.long	814                     # 0x32e
	.long	334                     # 0x14e
	.long	249                     # 0xf9
	.long	515                     # 0x203
	.long	897                     # 0x381
	.long	955                     # 0x3bb
	.long	664                     # 0x298
	.long	981                     # 0x3d5
	.long	649                     # 0x289
	.long	113                     # 0x71
	.long	974                     # 0x3ce
	.long	459                     # 0x1cb
	.long	893                     # 0x37d
	.long	228                     # 0xe4
	.long	433                     # 0x1b1
	.long	837                     # 0x345
	.long	553                     # 0x229
	.long	268                     # 0x10c
	.long	926                     # 0x39e
	.long	240                     # 0xf0
	.long	102                     # 0x66
	.long	654                     # 0x28e
	.long	459                     # 0x1cb
	.long	51                      # 0x33
	.long	686                     # 0x2ae
	.long	754                     # 0x2f2
	.long	806                     # 0x326
	.long	760                     # 0x2f8
	.long	493                     # 0x1ed
	.long	403                     # 0x193
	.long	415                     # 0x19f
	.long	394                     # 0x18a
	.long	687                     # 0x2af
	.long	700                     # 0x2bc
	.long	946                     # 0x3b2
	.long	670                     # 0x29e
	.long	656                     # 0x290
	.long	610                     # 0x262
	.long	738                     # 0x2e2
	.long	392                     # 0x188
	.long	760                     # 0x2f8
	.long	799                     # 0x31f
	.long	887                     # 0x377
	.long	653                     # 0x28d
	.long	978                     # 0x3d2
	.long	321                     # 0x141
	.long	576                     # 0x240
	.long	617                     # 0x269
	.long	626                     # 0x272
	.long	502                     # 0x1f6
	.long	894                     # 0x37e
	.long	679                     # 0x2a7
	.long	243                     # 0xf3
	.long	440                     # 0x1b8
	.long	680                     # 0x2a8
	.long	879                     # 0x36f
	.long	194                     # 0xc2
	.long	572                     # 0x23c
	.long	640                     # 0x280
	.long	724                     # 0x2d4
	.long	926                     # 0x39e
	.long	56                      # 0x38
	.long	204                     # 0xcc
	.long	700                     # 0x2bc
	.long	707                     # 0x2c3
	.long	151                     # 0x97
	.long	457                     # 0x1c9
	.long	449                     # 0x1c1
	.long	797                     # 0x31d
	.long	195                     # 0xc3
	.long	791                     # 0x317
	.long	558                     # 0x22e
	.long	945                     # 0x3b1
	.long	679                     # 0x2a7
	.long	297                     # 0x129
	.long	59                      # 0x3b
	.long	87                      # 0x57
	.long	824                     # 0x338
	.long	713                     # 0x2c9
	.long	663                     # 0x297
	.long	412                     # 0x19c
	.long	693                     # 0x2b5
	.long	342                     # 0x156
	.long	606                     # 0x25e
	.long	134                     # 0x86
	.long	108                     # 0x6c
	.long	571                     # 0x23b
	.long	364                     # 0x16c
	.long	631                     # 0x277
	.long	212                     # 0xd4
	.long	174                     # 0xae
	.long	643                     # 0x283
	.long	304                     # 0x130
	.long	329                     # 0x149
	.long	343                     # 0x157
	.long	97                      # 0x61
	.long	430                     # 0x1ae
	.long	751                     # 0x2ef
	.long	497                     # 0x1f1
	.long	314                     # 0x13a
	.long	983                     # 0x3d7
	.long	374                     # 0x176
	.long	822                     # 0x336
	.long	928                     # 0x3a0
	.long	140                     # 0x8c
	.long	206                     # 0xce
	.long	73                      # 0x49
	.long	263                     # 0x107
	.long	980                     # 0x3d4
	.long	736                     # 0x2e0
	.long	876                     # 0x36c
	.long	478                     # 0x1de
	.long	430                     # 0x1ae
	.long	305                     # 0x131
	.long	170                     # 0xaa
	.long	514                     # 0x202
	.long	364                     # 0x16c
	.long	692                     # 0x2b4
	.long	829                     # 0x33d
	.long	82                      # 0x52
	.long	855                     # 0x357
	.long	953                     # 0x3b9
	.long	676                     # 0x2a4
	.long	246                     # 0xf6
	.long	369                     # 0x171
	.long	970                     # 0x3ca
	.long	294                     # 0x126
	.long	750                     # 0x2ee
	.long	807                     # 0x327
	.long	827                     # 0x33b
	.long	150                     # 0x96
	.long	790                     # 0x316
	.long	288                     # 0x120
	.long	923                     # 0x39b
	.long	804                     # 0x324
	.long	378                     # 0x17a
	.long	215                     # 0xd7
	.long	828                     # 0x33c
	.long	592                     # 0x250
	.long	281                     # 0x119
	.long	565                     # 0x235
	.long	555                     # 0x22b
	.long	710                     # 0x2c6
	.long	82                      # 0x52
	.long	896                     # 0x380
	.long	831                     # 0x33f
	.long	547                     # 0x223
	.long	261                     # 0x105
	.long	524                     # 0x20c
	.long	462                     # 0x1ce
	.long	293                     # 0x125
	.long	465                     # 0x1d1
	.long	502                     # 0x1f6
	.long	56                      # 0x38
	.long	661                     # 0x295
	.long	821                     # 0x335
	.long	976                     # 0x3d0
	.long	991                     # 0x3df
	.long	658                     # 0x292
	.long	869                     # 0x365
	.long	905                     # 0x389
	.long	758                     # 0x2f6
	.long	745                     # 0x2e9
	.long	193                     # 0xc1
	.long	768                     # 0x300
	.long	550                     # 0x226
	.long	608                     # 0x260
	.long	933                     # 0x3a5
	.long	378                     # 0x17a
	.long	286                     # 0x11e
	.long	215                     # 0xd7
	.long	979                     # 0x3d3
	.long	792                     # 0x318
	.long	961                     # 0x3c1
	.long	61                      # 0x3d
	.long	688                     # 0x2b0
	.long	793                     # 0x319
	.long	644                     # 0x284
	.long	986                     # 0x3da
	.long	403                     # 0x193
	.long	106                     # 0x6a
	.long	366                     # 0x16e
	.long	905                     # 0x389
	.long	644                     # 0x284
	.long	372                     # 0x174
	.long	567                     # 0x237
	.long	466                     # 0x1d2
	.long	434                     # 0x1b2
	.long	645                     # 0x285
	.long	210                     # 0xd2
	.long	389                     # 0x185
	.long	550                     # 0x226
	.long	919                     # 0x397
	.long	135                     # 0x87
	.long	780                     # 0x30c
	.long	773                     # 0x305
	.long	635                     # 0x27b
	.long	389                     # 0x185
	.long	707                     # 0x2c3
	.long	100                     # 0x64
	.long	626                     # 0x272
	.long	958                     # 0x3be
	.long	165                     # 0xa5
	.long	504                     # 0x1f8
	.long	920                     # 0x398
	.long	176                     # 0xb0
	.long	193                     # 0xc1
	.long	713                     # 0x2c9
	.long	857                     # 0x359
	.long	265                     # 0x109
	.long	203                     # 0xcb
	.long	50                      # 0x32
	.long	668                     # 0x29c
	.long	108                     # 0x6c
	.long	645                     # 0x285
	.long	990                     # 0x3de
	.long	626                     # 0x272
	.long	197                     # 0xc5
	.long	510                     # 0x1fe
	.long	357                     # 0x165
	.long	358                     # 0x166
	.long	850                     # 0x352
	.long	858                     # 0x35a
	.long	364                     # 0x16c
	.long	936                     # 0x3a8
	.long	638                     # 0x27e
	.size	BZ2_rNums, 2048

	.type	dbglvl,@object          # @dbglvl
	.globl	dbglvl
	.p2align	2
dbglvl:
	.long	4                       # 0x4
	.size	dbglvl, 4

	.type	seedi,@object           # @seedi
	.comm	seedi,8,8
	.type	spec_fd,@object         # @spec_fd
	.comm	spec_fd,72,16
	.type	.L.str.81,@object       # @.str.81
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.81:
	.asciz	"spec_init\n"
	.size	.L.str.81, 11

	.type	.L.str.1.82,@object     # @.str.1.82
.L.str.1.82:
	.asciz	"spec_init: Error mallocing memory!\n"
	.size	.L.str.1.82, 36

	.type	.L.str.2.83,@object     # @.str.2.83
.L.str.2.83:
	.asciz	"Creating Chunks\n"
	.size	.L.str.2.83, 17

	.type	.L.str.3.84,@object     # @.str.3.84
.L.str.3.84:
	.asciz	"Creating Chunk %d\n"
	.size	.L.str.3.84, 19

	.type	.L.str.4.85,@object     # @.str.4.85
.L.str.4.85:
	.asciz	"Filling input file\n"
	.size	.L.str.4.85, 20

	.type	.L.str.5.86,@object     # @.str.5.86
.L.str.5.86:
	.asciz	"Can't open file %s: %s\n"
	.size	.L.str.5.86, 24

	.type	.L.str.6.87,@object     # @.str.6.87
.L.str.6.87:
	.asciz	"Error reading from %s: %s\n"
	.size	.L.str.6.87, 27

	.type	.L.str.7.88,@object     # @.str.7.88
.L.str.7.88:
	.asciz	"Duplicating %d bytes\n"
	.size	.L.str.7.88, 22

	.type	.L.str.8.89,@object     # @.str.8.89
.L.str.8.89:
	.asciz	"spec_read: %d, %p, %d = "
	.size	.L.str.8.89, 25

	.type	.L.str.9.90,@object     # @.str.9.90
.L.str.9.90:
	.asciz	"spec_read: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.9.90, 34

	.type	.L.str.10.91,@object    # @.str.10.91
.L.str.10.91:
	.asciz	"EOF\n"
	.size	.L.str.10.91, 5

	.type	.L.str.11.92,@object    # @.str.11.92
.L.str.11.92:
	.asciz	"%d\n"
	.size	.L.str.11.92, 4

	.type	.L.str.12.95,@object    # @.str.12.95
.L.str.12.95:
	.asciz	"spec_fread: %p, (%d x %d) fd %d ="
	.size	.L.str.12.95, 34

	.type	.L.str.13.96,@object    # @.str.13.96
.L.str.13.96:
	.asciz	"spec_fread: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.13.96, 35

	.type	.L.str.14.99,@object    # @.str.14.99
.L.str.14.99:
	.asciz	"spec_getc: %d = "
	.size	.L.str.14.99, 17

	.type	.L.str.15.102,@object   # @.str.15.102
.L.str.15.102:
	.asciz	"spec_ungetc: %d = "
	.size	.L.str.15.102, 19

	.type	.L.str.16.103,@object   # @.str.16.103
.L.str.16.103:
	.asciz	"spec_ungetc: pos %d <= 0\n"
	.size	.L.str.16.103, 26

	.type	.L.str.17.104,@object   # @.str.17.104
.L.str.17.104:
	.asciz	"spec_ungetc: can't unget something that wasn't what was in the buffer!\n"
	.size	.L.str.17.104, 72

	.type	.L.str.18.107,@object   # @.str.18.107
.L.str.18.107:
	.asciz	"spec_write: %d, %p, %d = "
	.size	.L.str.18.107, 26

	.type	.L.str.19.108,@object   # @.str.19.108
.L.str.19.108:
	.asciz	"spec_write: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.19.108, 35

	.type	.L.str.20.111,@object   # @.str.20.111
.L.str.20.111:
	.asciz	"spec_fwrite: %p, %d, %d, %d = "
	.size	.L.str.20.111, 31

	.type	.L.str.21.112,@object   # @.str.21.112
.L.str.21.112:
	.asciz	"spec_fwrite: fd=%d, > MAX_SPEC_FD!\n"
	.size	.L.str.21.112, 36

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"spec_putc: %d, %d = "
	.size	.L.str.22, 21

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"input.combined"
	.size	.L.str.23, 15

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"Loading Input Data\n"
	.size	.L.str.24, 20

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"Input data %d bytes in length\n"
	.size	.L.str.25, 31

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"main: Error mallocing memory!\n"
	.size	.L.str.26, 31

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"Compressing Input Data, level %d\n"
	.size	.L.str.27, 34

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Compressed data %d bytes in length\n"
	.size	.L.str.28, 36

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"Uncompressing Data\n"
	.size	.L.str.29, 20

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"Uncompressed data %d bytes in length\n"
	.size	.L.str.30, 38

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"Tested %dMB buffer: Miscompared!!\n"
	.size	.L.str.31, 35

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"Uncompressed data compared correctly\n"
	.size	.L.str.32, 38

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"Tested %dMB buffer: OK!\n"
	.size	.L.str.33, 25

	.type	BasicBlockSignatureTracker,@object # @BasicBlockSignatureTracker
	.comm	BasicBlockSignatureTracker,2,4
	.type	RunTimeSignatureAdjuster,@object # @RunTimeSignatureAdjuster
	.comm	RunTimeSignatureAdjuster,2,4

	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
